
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006c1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  00802000  00006c1c  00006cb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000211d  008020f0  008020f0  00006da0  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00006da0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00006e00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000978  00000000  00000000  00006e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001d33a  00000000  00000000  000077bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000077a5  00000000  00000000  00024af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000071c9  00000000  00000000  0002c29b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ee8  00000000  00000000  00033464  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007744  00000000  00000000  0003534c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000096d7  00000000  00000000  0003ca90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000830  00000000  00000000  00046167  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__ctors_end>
       4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
       8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
       c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      10:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      14:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      18:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      1c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      20:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      24:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      28:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      2c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      30:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      34:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      38:	0c 94 7f 1d 	jmp	0x3afe	; 0x3afe <__vector_14>
      3c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      40:	0c 94 4e 1d 	jmp	0x3a9c	; 0x3a9c <__vector_16>
      44:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      48:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      4c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      50:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      54:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      58:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      5c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      60:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      64:	0c 94 2c 30 	jmp	0x6058	; 0x6058 <__vector_25>
      68:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      6c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      70:	0c 94 84 30 	jmp	0x6108	; 0x6108 <__vector_28>
      74:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      78:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      7c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      80:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      84:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      88:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      8c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      90:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      94:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      98:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      9c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      a0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      a4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      a8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      ac:	0c 94 8c 1b 	jmp	0x3718	; 0x3718 <__vector_43>
      b0:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <__vector_44>
      b4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      b8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      bc:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      c0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      c4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      c8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      cc:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      d0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      d4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      d8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      dc:	0c 94 1c 21 	jmp	0x4238	; 0x4238 <__vector_55>
      e0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      e4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      e8:	0c 94 8c 31 	jmp	0x6318	; 0x6318 <__vector_58>
      ec:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      f0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      f4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      f8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      fc:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     100:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     104:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     108:	0c 94 0d 1b 	jmp	0x361a	; 0x361a <__vector_66>
     10c:	0c 94 4c 1b 	jmp	0x3698	; 0x3698 <__vector_67>
     110:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     114:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     118:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     11c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     120:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     124:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     128:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     12c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     130:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     134:	0c 94 1d 1d 	jmp	0x3a3a	; 0x3a3a <__vector_77>
     138:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     13c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     140:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     144:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     148:	0c 94 ec 1c 	jmp	0x39d8	; 0x39d8 <__vector_82>
     14c:	0c 94 bb 1c 	jmp	0x3976	; 0x3976 <__vector_83>
     150:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     154:	0c 94 8a 1c 	jmp	0x3914	; 0x3914 <__vector_85>
     158:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     15c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     160:	0c 94 dc 30 	jmp	0x61b8	; 0x61b8 <__vector_88>
     164:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     168:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     16c:	0c 94 34 31 	jmp	0x6268	; 0x6268 <__vector_91>
     170:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     174:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     178:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     17c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     180:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     184:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     188:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     18c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     190:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     194:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     198:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     19c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1a0:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <__vector_104>
     1a4:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <__vector_105>
     1a8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1ac:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1b0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1b4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1b8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1bc:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1c0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1c4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1c8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1cc:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1d0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1d4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1d8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1dc:	0c 94 e4 31 	jmp	0x63c8	; 0x63c8 <__vector_119>
     1e0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1e4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1e8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1ec:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1f0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1f4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1f8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1fc:	35 0a       	sbc	r3, r21
     1fe:	3a 0a       	sbc	r3, r26
     200:	66 0a       	sbc	r6, r22
     202:	91 0a       	sbc	r9, r17
     204:	1d 0b       	sbc	r17, r29
     206:	ac 0b       	sbc	r26, r28
     208:	ed 0b       	sbc	r30, r29
     20a:	8b 0c       	add	r8, r11
     20c:	ad 0d       	add	r26, r13
     20e:	05 12       	cpse	r0, r21
     210:	b5 17       	cp	r27, r21
     212:	7c 12       	cpse	r7, r28
     214:	93 12       	cpse	r9, r19
     216:	39 12       	cpse	r3, r25
     218:	b5 17       	cp	r27, r21
     21a:	b5 17       	cp	r27, r21
     21c:	b5 17       	cp	r27, r21
     21e:	65 12       	cpse	r6, r21
     220:	b5 17       	cp	r27, r21
     222:	b5 17       	cp	r27, r21
     224:	b5 17       	cp	r27, r21
     226:	b5 17       	cp	r27, r21
     228:	b5 17       	cp	r27, r21
     22a:	23 12       	cpse	r2, r19
     22c:	af 12       	cpse	r10, r31
     22e:	b5 17       	cp	r27, r21
     230:	a1 12       	cpse	r10, r17
     232:	a6 12       	cpse	r10, r22
     234:	e5 13       	cpse	r30, r21
     236:	b5 17       	cp	r27, r21
     238:	b5 17       	cp	r27, r21
     23a:	b5 17       	cp	r27, r21
     23c:	07 14       	cp	r0, r7
     23e:	15 14       	cp	r1, r5
     240:	21 14       	cp	r2, r1
     242:	2d 14       	cp	r2, r13
     244:	39 14       	cp	r3, r9
     246:	45 14       	cp	r4, r5
     248:	51 14       	cp	r5, r1
     24a:	5d 14       	cp	r5, r13
     24c:	69 14       	cp	r6, r9
     24e:	75 14       	cp	r7, r5
     250:	b5 17       	cp	r27, r21
     252:	b5 17       	cp	r27, r21
     254:	b5 17       	cp	r27, r21
     256:	b5 17       	cp	r27, r21
     258:	b5 17       	cp	r27, r21
     25a:	b5 17       	cp	r27, r21
     25c:	b5 17       	cp	r27, r21
     25e:	b5 17       	cp	r27, r21
     260:	b5 17       	cp	r27, r21
     262:	b5 17       	cp	r27, r21
     264:	b5 17       	cp	r27, r21
     266:	b5 17       	cp	r27, r21
     268:	b5 17       	cp	r27, r21
     26a:	b5 17       	cp	r27, r21
     26c:	b5 17       	cp	r27, r21
     26e:	b5 17       	cp	r27, r21
     270:	b5 17       	cp	r27, r21
     272:	b5 17       	cp	r27, r21
     274:	b5 17       	cp	r27, r21
     276:	b5 17       	cp	r27, r21
     278:	b5 17       	cp	r27, r21
     27a:	b5 17       	cp	r27, r21
     27c:	b5 17       	cp	r27, r21
     27e:	b5 17       	cp	r27, r21
     280:	b5 17       	cp	r27, r21
     282:	b5 17       	cp	r27, r21
     284:	b5 17       	cp	r27, r21
     286:	b5 17       	cp	r27, r21
     288:	b5 17       	cp	r27, r21
     28a:	b5 17       	cp	r27, r21
     28c:	b5 17       	cp	r27, r21
     28e:	b5 17       	cp	r27, r21
     290:	b5 17       	cp	r27, r21
     292:	b5 17       	cp	r27, r21
     294:	b5 17       	cp	r27, r21
     296:	b5 17       	cp	r27, r21
     298:	b5 17       	cp	r27, r21
     29a:	b5 17       	cp	r27, r21
     29c:	b5 17       	cp	r27, r21
     29e:	6b 13       	cpse	r22, r27
     2a0:	b5 17       	cp	r27, r21
     2a2:	b5 17       	cp	r27, r21
     2a4:	b5 17       	cp	r27, r21
     2a6:	ff 12       	cpse	r15, r31
     2a8:	b5 17       	cp	r27, r21
     2aa:	d3 13       	cpse	r29, r19
     2ac:	b5 17       	cp	r27, r21
     2ae:	b5 17       	cp	r27, r21
     2b0:	b5 17       	cp	r27, r21
     2b2:	b5 17       	cp	r27, r21
     2b4:	b5 17       	cp	r27, r21
     2b6:	b5 17       	cp	r27, r21
     2b8:	b5 17       	cp	r27, r21
     2ba:	b5 17       	cp	r27, r21
     2bc:	b5 17       	cp	r27, r21
     2be:	b5 17       	cp	r27, r21
     2c0:	fa 12       	cpse	r15, r26
     2c2:	b5 17       	cp	r27, r21
     2c4:	b5 17       	cp	r27, r21
     2c6:	b5 17       	cp	r27, r21
     2c8:	b5 17       	cp	r27, r21
     2ca:	b5 17       	cp	r27, r21
     2cc:	82 13       	cpse	r24, r18
     2ce:	9d 13       	cpse	r25, r29
     2d0:	b8 13       	cpse	r27, r24
     2d2:	e4 14       	cp	r14, r4
     2d4:	f1 14       	cp	r15, r1
     2d6:	b5 17       	cp	r27, r21
     2d8:	b5 17       	cp	r27, r21
     2da:	b5 17       	cp	r27, r21
     2dc:	b5 17       	cp	r27, r21
     2de:	b5 17       	cp	r27, r21
     2e0:	b5 17       	cp	r27, r21
     2e2:	b5 17       	cp	r27, r21
     2e4:	b5 17       	cp	r27, r21
     2e6:	b5 17       	cp	r27, r21
     2e8:	b5 17       	cp	r27, r21
     2ea:	b5 17       	cp	r27, r21
     2ec:	1b 15       	cp	r17, r11
     2ee:	45 15       	cp	r20, r5
     2f0:	b5 17       	cp	r27, r21
     2f2:	b5 17       	cp	r27, r21
     2f4:	b5 17       	cp	r27, r21
     2f6:	b5 17       	cp	r27, r21
     2f8:	d2 14       	cp	r13, r2
     2fa:	d8 14       	cp	r13, r8
     2fc:	de 14       	cp	r13, r14
     2fe:	a7 16       	cp	r10, r23
     300:	b5 17       	cp	r27, r21
     302:	b5 17       	cp	r27, r21
     304:	b5 17       	cp	r27, r21
     306:	1d 17       	cp	r17, r29
     308:	29 17       	cp	r18, r25
     30a:	35 17       	cp	r19, r21
     30c:	41 17       	cp	r20, r17
     30e:	4d 17       	cp	r20, r29
     310:	59 17       	cp	r21, r25
     312:	65 17       	cp	r22, r21
     314:	71 17       	cp	r23, r17
     316:	7d 17       	cp	r23, r29
     318:	89 17       	cp	r24, r25
     31a:	b5 17       	cp	r27, r21
     31c:	b5 17       	cp	r27, r21
     31e:	b5 17       	cp	r27, r21
     320:	b5 17       	cp	r27, r21
     322:	b5 17       	cp	r27, r21
     324:	b5 17       	cp	r27, r21
     326:	b5 17       	cp	r27, r21
     328:	b5 17       	cp	r27, r21
     32a:	b5 17       	cp	r27, r21
     32c:	b5 17       	cp	r27, r21
     32e:	b5 17       	cp	r27, r21
     330:	b5 17       	cp	r27, r21
     332:	b5 17       	cp	r27, r21
     334:	b5 17       	cp	r27, r21
     336:	b5 17       	cp	r27, r21
     338:	b5 17       	cp	r27, r21
     33a:	b5 17       	cp	r27, r21
     33c:	b5 17       	cp	r27, r21
     33e:	b5 17       	cp	r27, r21
     340:	b5 17       	cp	r27, r21
     342:	b5 17       	cp	r27, r21
     344:	b5 17       	cp	r27, r21
     346:	b5 17       	cp	r27, r21
     348:	b5 17       	cp	r27, r21
     34a:	b5 17       	cp	r27, r21
     34c:	b5 17       	cp	r27, r21
     34e:	b5 17       	cp	r27, r21
     350:	b5 17       	cp	r27, r21
     352:	b5 17       	cp	r27, r21
     354:	b5 17       	cp	r27, r21
     356:	b5 17       	cp	r27, r21
     358:	b5 17       	cp	r27, r21
     35a:	b5 17       	cp	r27, r21
     35c:	b5 17       	cp	r27, r21
     35e:	b5 17       	cp	r27, r21
     360:	b5 17       	cp	r27, r21
     362:	b5 17       	cp	r27, r21
     364:	b5 17       	cp	r27, r21
     366:	b5 17       	cp	r27, r21
     368:	2d 16       	cp	r2, r29
     36a:	b5 17       	cp	r27, r21
     36c:	b5 17       	cp	r27, r21
     36e:	b5 17       	cp	r27, r21
     370:	0e 16       	cp	r0, r30
     372:	b5 17       	cp	r27, r21
     374:	b5 17       	cp	r27, r21
     376:	b5 17       	cp	r27, r21
     378:	b5 17       	cp	r27, r21
     37a:	b5 17       	cp	r27, r21
     37c:	b5 17       	cp	r27, r21
     37e:	b5 17       	cp	r27, r21
     380:	b5 17       	cp	r27, r21
     382:	03 17       	cp	r16, r19
     384:	b5 17       	cp	r27, r21
     386:	b5 17       	cp	r27, r21
     388:	b5 17       	cp	r27, r21
     38a:	b5 17       	cp	r27, r21
     38c:	eb 16       	cp	r14, r27
     38e:	b5 17       	cp	r27, r21
     390:	d1 16       	cp	r13, r17
     392:	9f 15       	cp	r25, r15
     394:	b5 17       	cp	r27, r21
     396:	b7 15       	cp	r27, r7
     398:	d4 15       	cp	r29, r4
     39a:	f1 15       	cp	r31, r1
     39c:	a5 2c       	mov	r10, r5
     39e:	a8 2c       	mov	r10, r8
     3a0:	ab 2c       	mov	r10, r11
     3a2:	ae 2c       	mov	r10, r14
     3a4:	b1 2c       	mov	r11, r1
     3a6:	b4 2c       	mov	r11, r4
     3a8:	b6 2c       	mov	r11, r6
     3aa:	c7 2c       	mov	r12, r7
     3ac:	cf 2c       	mov	r12, r15
     3ae:	d9 2c       	mov	r13, r9
     3b0:	d7 2c       	mov	r13, r7

000003b2 <__trampolines_start>:
     3b2:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <_ZN9task_user3runEv+0x2d0>
     3b6:	0c 94 ad 0d 	jmp	0x1b5a	; 0x1b5a <_ZN7task_md3runEv+0x728>
     3ba:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <_ZN9frt_queueImE7ISR_getEv>
     3be:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <_GLOBAL__sub_I_counter>
     3c2:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <_ZN10FakeDM542T7motorOnEv>
     3c6:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <_ZN9frt_queueImE3putERKm>
     3ca:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <_call_static_run_method>
     3ce:	0c 94 82 13 	jmp	0x2704	; 0x2704 <_ZN9task_user3runEv+0x3e0>
     3d2:	0c 94 b1 2c 	jmp	0x5962	; 0x5962 <_ZN8emstreamlsE15ser_manipulator+0x36>
     3d6:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <_ZN9task_user3runEv+0x482>
     3da:	0c 94 35 2f 	jmp	0x5e6a	; 0x5e6a <_ZN5rs2327putcharEc>
     3de:	0c 94 26 18 	jmp	0x304c	; 0x304c <_ZN9frt_queueImE10get_a_copyERm>
     3e2:	0c 94 ab 2c 	jmp	0x5956	; 0x5956 <_ZN8emstreamlsE15ser_manipulator+0x2a>
     3e6:	0c 94 e1 17 	jmp	0x2fc2	; 0x2fc2 <_ZN10FakeDM542T11free_motionEv>
     3ea:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <_ZN10FakeDM542T8motorCCWEv>
     3ee:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <_ZN9task_user3runEv+0x5c6>
     3f2:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <_ZN10FakeDM542T9take_stepEv>
     3f6:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <_ZN9task_user3runEv+0xc46>
     3fa:	0c 94 a8 2c 	jmp	0x5950	; 0x5950 <_ZN8emstreamlsE15ser_manipulator+0x24>
     3fe:	0c 94 df 17 	jmp	0x2fbe	; 0x2fbe <_ZN10FakeDM542T9disableCWEv>
     402:	0c 94 23 12 	jmp	0x2446	; 0x2446 <_ZN9task_user3runEv+0x122>
     406:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <_ZN9task_user3runEv+0xbbe>
     40a:	0c 94 46 2b 	jmp	0x568c	; 0x568c <_ZN14frt_text_queue14check_for_charEv>
     40e:	0c 94 35 0a 	jmp	0x146a	; 0x146a <_ZN7task_md3runEv+0x38>
     412:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <_ZN9frt_queueImE3getEv>
     416:	0c 94 a7 18 	jmp	0x314e	; 0x314e <_ZN9frt_queueImE11ISR_butt_inERKm>
     41a:	0c 94 39 14 	jmp	0x2872	; 0x2872 <_ZN9task_user3runEv+0x54e>
     41e:	0c 94 32 18 	jmp	0x3064	; 0x3064 <_ZN9frt_queueImE10get_a_copyEv>
     422:	0c 94 03 17 	jmp	0x2e06	; 0x2e06 <_ZN9task_user3runEv+0xae2>
     426:	0c 94 48 2c 	jmp	0x5890	; 0x5890 <_ZN8emstream13ready_to_sendEv>
     42a:	0c 94 f1 15 	jmp	0x2be2	; 0x2be2 <_ZN9task_user3runEv+0x8be>
     42e:	0c 94 4a 2c 	jmp	0x5894	; 0x5894 <_ZN8emstream7getcharEv>
     432:	0c 94 a5 2c 	jmp	0x594a	; 0x594a <_ZN8emstreamlsE15ser_manipulator+0x1e>
     436:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <_ZN9task_user3runEv+0xb16>
     43a:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <_ZN10FakeDM542T13get_directionEv>
     43e:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <_ZN9task_user3runEv+0x936>
     442:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <_ZN7task_md3runEv+0x4e4>
     446:	0c 94 39 12 	jmp	0x2472	; 0x2472 <_ZN9task_user3runEv+0x14e>
     44a:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <_ZN7task_md3runEv+0x42>
     44e:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <_ZN9task_user3runEv+0x680>
     452:	0c 94 cf 2c 	jmp	0x599e	; 0x599e <_ZN8emstreamlsE15ser_manipulator+0x72>
     456:	0c 94 af 12 	jmp	0x255e	; 0x255e <_ZN9task_user3runEv+0x23a>
     45a:	0c 94 9d 13 	jmp	0x273a	; 0x273a <_ZN9task_user3runEv+0x416>
     45e:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <_ZN9task_user3runEv+0x698>
     462:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <_ZN9frt_queueImE12num_items_inEv>
     466:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <_ZN9task_user3runEv+0xb5e>
     46a:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <_ZN9frt_queueImE7butt_inERKm>
     46e:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <_ZN9task_user3runEv+0x712>
     472:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <_ZN9task_user3runEv+0xab2>
     476:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <_ZN9task_user3runEv+0x766>
     47a:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <_ZN7task_md3runEv+0x3a8>
     47e:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <_ZN9task_user3runEv+0x44c>
     482:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <_ZN9task_user3runEv+0xb76>
     486:	0c 94 a1 12 	jmp	0x2542	; 0x2542 <_ZN9task_user3runEv+0x21e>
     48a:	0c 94 05 12 	jmp	0x240a	; 0x240a <_ZN9task_user3runEv+0xe6>
     48e:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <_ZN9task_user3runEv+0xbd6>
     492:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <_ZN7task_md3runEv+0x9a>
     496:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <_ZN9task_user3runEv+0xb8e>
     49a:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <_ZN9task_user3runEv+0xba6>
     49e:	0c 94 59 2f 	jmp	0x5eb2	; 0x5eb2 <_ZN5rs2327getcharEv>
     4a2:	0c 94 c7 2c 	jmp	0x598e	; 0x598e <_ZN8emstreamlsE15ser_manipulator+0x62>
     4a6:	0c 94 51 2b 	jmp	0x56a2	; 0x56a2 <_ZN14frt_text_queue7putcharEc>
     4aa:	0c 94 50 2c 	jmp	0x58a0	; 0x58a0 <_ZN8emstream12clear_screenEv>
     4ae:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <_ZN9frt_queueImE13ISR_not_emptyEv>
     4b2:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <_ZN10FakeDM542T8motorOffEv>
     4b6:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <_ZN9task_user3runEv+0x3b2>
     4ba:	0c 94 11 18 	jmp	0x3022	; 0x3022 <_ZN9frt_queueImE9not_emptyEv>
     4be:	0c 94 00 18 	jmp	0x3000	; 0x3000 <_ZN9frt_queueImE12ISR_is_emptyEv>
     4c2:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <_ZN9task_user3runEv+0xb2e>
     4c6:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <_ZN9task_user3runEv+0x596>
     4ca:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <_ZN7task_md3runEv>
     4ce:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <_ZN9task_user3runEv+0x4a6>
     4d2:	0c 94 b4 2c 	jmp	0x5968	; 0x5968 <_ZN8emstreamlsE15ser_manipulator+0x3c>
     4d6:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <_ZN10FakeDM542T14set_signal_lowEv>
     4da:	0c 94 93 12 	jmp	0x2526	; 0x2526 <_ZN9task_user3runEv+0x202>
     4de:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <_ZN9task_user3runEv+0x84a>
     4e2:	0c 94 07 14 	jmp	0x280e	; 0x280e <_ZN9task_user3runEv+0x4ea>
     4e6:	0c 94 45 14 	jmp	0x288a	; 0x288a <_ZN9task_user3runEv+0x566>
     4ea:	0c 94 ae 2c 	jmp	0x595c	; 0x595c <_ZN8emstreamlsE15ser_manipulator+0x30>
     4ee:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <_ZN9task_user3runEv+0xbee>
     4f2:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <_ZN11task_sensor3runEv>
     4f6:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <_ZN9task_user3runEv+0x6a4>
     4fa:	0c 94 b6 2c 	jmp	0x596c	; 0x596c <_ZN8emstreamlsE15ser_manipulator+0x40>
     4fe:	0c 94 d9 2c 	jmp	0x59b2	; 0x59b2 <_ZN8emstreamlsE15ser_manipulator+0x86>
     502:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <_ZN9task_user3runEv+0x57e>
     506:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <_ZN9task_user3runEv+0x2da>
     50a:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <_ZN9task_user3runEv+0xa2a>
     50e:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <_ZN9task_user3runEv+0x8f8>
     512:	0c 94 d4 15 	jmp	0x2ba8	; 0x2ba8 <_ZN9task_user3runEv+0x884>
     516:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <_ZN9task_user3runEv+0x1a6>
     51a:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <_ZN9task_user3runEv+0xa7e>
     51e:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <_ZN9task_user3runEv+0xb46>
     522:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <_ZN7task_md3runEv+0x208>
     526:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <_ZN7task_md3runEv+0x326>
     52a:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <_ZN9frt_queueImE3getEPm>
     52e:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <_ZN10FakeDM542T10get_statusEv>
     532:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <_ZN9frt_queueImE16ISR_num_items_inEv>
     536:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <_ZN9task_user3runEv+0x81a>
     53a:	0c 94 98 2a 	jmp	0x5530	; 0x5530 <_ZN8frt_task12print_statusER8emstream>
     53e:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <_ZN10FakeDM542T10disableCCWEv>
     542:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <_ZN9frt_queueImE8is_emptyEv>
     546:	0c 94 a6 12 	jmp	0x254c	; 0x254c <_ZN9task_user3runEv+0x228>
     54a:	0c 94 92 11 	jmp	0x2324	; 0x2324 <_ZN9task_user3runEv>
     54e:	0c 94 4d 2c 	jmp	0x589a	; 0x589a <_ZN8emstream14check_for_charEv>
     552:	0c 94 bf 18 	jmp	0x317e	; 0x317e <_ZN9frt_queueImE7ISR_putERKm>
     556:	0c 94 2d 14 	jmp	0x285a	; 0x285a <_ZN9task_user3runEv+0x536>
     55a:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <_ZN9task_user3runEv+0x6be>
     55e:	0c 94 a4 2b 	jmp	0x5748	; 0x5748 <__cxa_pure_virtual>
     562:	0c 94 21 14 	jmp	0x2842	; 0x2842 <_ZN9task_user3runEv+0x51e>
     566:	0c 94 d7 2c 	jmp	0x59ae	; 0x59ae <_ZN8emstreamlsE15ser_manipulator+0x82>
     56a:	0c 94 28 2b 	jmp	0x5650	; 0x5650 <_ZN14frt_text_queue7getcharEv>
     56e:	0c 94 15 14 	jmp	0x282a	; 0x282a <_ZN9task_user3runEv+0x506>
     572:	0c 94 7f 2f 	jmp	0x5efe	; 0x5efe <_ZN5rs23214check_for_charEv>
     576:	0c 94 7a 18 	jmp	0x30f4	; 0x30f4 <_ZN9frt_queueImE7ISR_getEPm>
     57a:	0c 94 4f 2c 	jmp	0x589e	; 0x589e <_ZN8emstream12transmit_nowEv>
     57e:	0c 94 69 14 	jmp	0x28d2	; 0x28d2 <_ZN9task_user3runEv+0x5ae>
     582:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <_ZN9task_user3runEv+0x1d4>
     586:	0c 94 fc 23 	jmp	0x47f8	; 0x47f8 <prvIdleTask>
     58a:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <_ZN9task_user3runEv+0x68c>
     58e:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <_ZN10FakeDM542T7motorCWEv>
     592:	0c 94 92 2f 	jmp	0x5f24	; 0x5f24 <_ZN5rs23212clear_screenEv>
     596:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <_ZN7task_md3runEv+0xf0>

0000059a <__trampolines_end>:
     59a:	00 40       	sbci	r16, 0x00	; 0
     59c:	7a 10       	cpse	r7, r10
     59e:	f3 5a       	subi	r31, 0xA3	; 163
     5a0:	00 a0       	ldd	r0, Z+32	; 0x20
     5a2:	72 4e       	sbci	r23, 0xE2	; 226
     5a4:	18 09       	sbc	r17, r8
     5a6:	00 10       	cpse	r0, r0
     5a8:	a5 d4       	rcall	.+2378   	; 0xef4 <__do_copy_data+0xa>
     5aa:	e8 00       	.word	0x00e8	; ????
     5ac:	00 e8       	ldi	r16, 0x80	; 128
     5ae:	76 48       	sbci	r23, 0x86	; 134
     5b0:	17 00       	.word	0x0017	; ????
     5b2:	00 e4       	ldi	r16, 0x40	; 64
     5b4:	0b 54       	subi	r16, 0x4B	; 75
     5b6:	02 00       	.word	0x0002	; ????
     5b8:	00 ca       	rjmp	.-3072   	; 0xfffff9ba <__eeprom_end+0xff7ef9ba>
     5ba:	9a 3b       	cpi	r25, 0xBA	; 186
     5bc:	00 00       	nop
     5be:	00 e1       	ldi	r16, 0x10	; 16
     5c0:	f5 05       	cpc	r31, r5
     5c2:	00 00       	nop
     5c4:	80 96       	adiw	r24, 0x20	; 32
     5c6:	98 00       	.word	0x0098	; ????
     5c8:	00 00       	nop
     5ca:	40 42       	sbci	r20, 0x20	; 32
     5cc:	0f 00       	.word	0x000f	; ????
     5ce:	00 00       	nop
     5d0:	a0 86       	std	Z+8, r10	; 0x08
     5d2:	01 00       	.word	0x0001	; ????
     5d4:	00 00       	nop
     5d6:	10 27       	eor	r17, r16
     5d8:	00 00       	nop
     5da:	00 00       	nop
     5dc:	e8 03       	fmulsu	r22, r16
     5de:	00 00       	nop
     5e0:	00 00       	nop
     5e2:	64 00       	.word	0x0064	; ????
     5e4:	00 00       	nop
     5e6:	00 00       	nop
     5e8:	0a 00       	.word	0x000a	; ????
     5ea:	00 00       	nop
     5ec:	00 00       	nop
     5ee:	01 00       	.word	0x0001	; ????
     5f0:	00 00       	nop
     5f2:	00 00       	nop
     5f4:	2c 76       	andi	r18, 0x6C	; 108
     5f6:	d8 88       	ldd	r13, Y+16	; 0x10
     5f8:	dc 67       	ori	r29, 0x7C	; 124
     5fa:	4f 08       	sbc	r4, r15
     5fc:	23 df       	rcall	.-442    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     5fe:	c1 df       	rcall	.-126    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
     600:	ae 59       	subi	r26, 0x9E	; 158
     602:	e1 b1       	in	r30, 0x01	; 1
     604:	b7 96       	adiw	r30, 0x27	; 39
     606:	e5 e3       	ldi	r30, 0x35	; 53
     608:	e4 53       	subi	r30, 0x34	; 52
     60a:	c6 3a       	cpi	r28, 0xA6	; 166
     60c:	e6 51       	subi	r30, 0x16	; 22
     60e:	99 76       	andi	r25, 0x69	; 105
     610:	96 e8       	ldi	r25, 0x86	; 134
     612:	e6 c2       	rjmp	.+1484   	; 0xbe0 <_ZZN9task_user21print_coord_mode_menuEvE3__c_2+0x2>
     614:	84 26       	eor	r8, r20
     616:	eb 89       	ldd	r30, Y+19	; 0x13
     618:	8c 9b       	sbis	0x11, 4	; 17
     61a:	62 ed       	ldi	r22, 0xD2	; 210
     61c:	40 7c       	andi	r20, 0xC0	; 192
     61e:	6f fc       	.word	0xfc6f	; ????
     620:	ef bc       	out	0x2f, r14	; 47
     622:	9c 9f       	mul	r25, r28
     624:	40 f2       	brcs	.-112    	; 0x5b6 <__trampolines_end+0x1c>
     626:	ba a5       	ldd	r27, Y+42	; 0x2a
     628:	6f a5       	ldd	r22, Y+47	; 0x2f
     62a:	f4 90       	lpm	r15, Z
     62c:	05 5a       	subi	r16, 0xA5	; 165
     62e:	2a f7       	brpl	.-54     	; 0x5fa <__trampolines_end+0x60>
     630:	5c 93       	st	X, r21
     632:	6b 6c       	ori	r22, 0xCB	; 203
     634:	f9 67       	ori	r31, 0x79	; 121
     636:	6d c1       	rjmp	.+730    	; 0x912 <_ZZN9task_user3runEvE3__c_11+0x17>
     638:	1b fc       	.word	0xfc1b	; ????
     63a:	e0 e4       	ldi	r30, 0x40	; 64
     63c:	0d 47       	sbci	r16, 0x7D	; 125
     63e:	fe f5       	brtc	.+126    	; 0x6be <_ZZN7task_md3runEvE3__c_3+0x1>
     640:	20 e6       	ldi	r18, 0x60	; 96
     642:	b5 00       	.word	0x00b5	; ????
     644:	d0 ed       	ldi	r29, 0xD0	; 208
     646:	90 2e       	mov	r9, r16
     648:	03 00       	.word	0x0003	; ????
     64a:	94 35       	cpi	r25, 0x54	; 84
     64c:	77 05       	cpc	r23, r7
     64e:	00 80       	ld	r0, Z
     650:	84 1e       	adc	r8, r20
     652:	08 00       	.word	0x0008	; ????
     654:	00 20       	and	r0, r0
     656:	4e 0a       	sbc	r4, r30
     658:	00 00       	nop
     65a:	00 c8       	rjmp	.-4096   	; 0xfffff65c <__eeprom_end+0xff7ef65c>
     65c:	0c 33       	cpi	r16, 0x3C	; 60
     65e:	33 33       	cpi	r19, 0x33	; 51
     660:	33 0f       	add	r19, r19
     662:	98 6e       	ori	r25, 0xE8	; 232
     664:	12 83       	std	Z+2, r17	; 0x02
     666:	11 41       	sbci	r17, 0x11	; 17
     668:	ef 8d       	ldd	r30, Y+31	; 0x1f
     66a:	21 14       	cp	r2, r1
     66c:	89 3b       	cpi	r24, 0xB9	; 185
     66e:	e6 55       	subi	r30, 0x56	; 86
     670:	16 cf       	rjmp	.-468    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     672:	fe e6       	ldi	r31, 0x6E	; 110
     674:	db 18       	sub	r13, r11
     676:	d1 84       	ldd	r13, Z+9	; 0x09
     678:	4b 38       	cpi	r20, 0x8B	; 139
     67a:	1b f7       	brvc	.-58     	; 0x642 <__trampolines_end+0xa8>
     67c:	7c 1d       	adc	r23, r12
     67e:	90 1d       	adc	r25, r0
     680:	a4 bb       	out	0x14, r26	; 20
     682:	e4 24       	eor	r14, r4
     684:	20 32       	cpi	r18, 0x20	; 32
     686:	84 72       	andi	r24, 0x24	; 36
     688:	5e 22       	and	r5, r30
     68a:	81 00       	.word	0x0081	; ????
     68c:	c9 f1       	breq	.+114    	; 0x700 <_ZZN11task_sensor3runEvE3__c_1>
     68e:	24 ec       	ldi	r18, 0xC4	; 196
     690:	a1 e5       	ldi	r26, 0x51	; 81
     692:	3d 27       	eor	r19, r29

00000694 <_ZZN7task_md12reset_deviceEvE3__c>:
     694:	52 65 73 65 74 74 69 6e 67 20 64 65 76 69 63 65     Resetting device
     6a4:	2e 00                                               ..

000006a6 <_ZZN7task_md7motorOnEvE3__c_0>:
     6a6:	52 00                                               R.

000006a8 <_ZZN7task_md7motorOnEvE3__c>:
     6a8:	46 00                                               F.

000006aa <_ZZN7task_md3runEvE3__c_8>:
     6aa:	6c 6f 63 3a 00                                      loc:.

000006af <_ZZN7task_md3runEvE3__c_7>:
     6af:	6c 6f 63 3a 00                                      loc:.

000006b4 <_ZZN7task_md3runEvE3__c_6>:
     6b4:	53 00                                               S.

000006b6 <_ZZN7task_md3runEvE3__c_5>:
     6b6:	6c 6f 63 3a 00                                      loc:.

000006bb <_ZZN7task_md3runEvE3__c_4>:
     6bb:	53 00                                               S.

000006bd <_ZZN7task_md3runEvE3__c_3>:
     6bd:	76 65 6c 3a 20 00                                   vel: .

000006c3 <_ZZN7task_md3runEvE3__c_2>:
     6c3:	6c 6f 63 3a 00                                      loc:.

000006c8 <_ZZN7task_md3runEvE3__c_1>:
     6c8:	53 00                                               S.

000006ca <_ZZN7task_md3runEvE3__c_0>:
     6ca:	6c 6f 63 3a 00                                      loc:.

000006cf <_ZZN7task_md3runEvE3__c>:
     6cf:	53 32 00                                            S2.

000006d2 <_ZZN11task_sensor12reset_deviceEvE3__c>:
     6d2:	52 65 73 65 74 74 69 6e 67 20 64 65 76 69 63 65     Resetting device
     6e2:	2e 00                                               ..

000006e4 <_ZZN11task_sensor3runEvE3__c_5>:
     6e4:	6d 56 3a 00                                         mV:.

000006e8 <_ZZN11task_sensor3runEvE3__c_4>:
     6e8:	48 46 3a 00                                         HF:.

000006ec <_ZZN11task_sensor3runEvE3__c_3>:
     6ec:	43 00                                               C.

000006ee <_ZZN11task_sensor3runEvE3__c_2>:
     6ee:	52 6f 75 74 69 6e 65 20 63 6f 6d 70 6c 65 74 65     Routine complete
     6fe:	2e 00                                               ..

00000700 <_ZZN11task_sensor3runEvE3__c_1>:
     700:	6d 56 3a 00                                         mV:.

00000704 <_ZZN11task_sensor3runEvE3__c_0>:
     704:	48 46 3a 00                                         HF:.

00000708 <_ZZN11task_sensor3runEvE3__c>:
     708:	53 65 6e 73 6f 72 20 52 65 61 64 69 6e 67 20 00     Sensor Reading .

00000718 <_ZZN9task_user11show_statusEvE3__c_4>:
     718:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

00000723 <_ZZN9task_user11show_statusEvE3__c_3>:
     723:	2f 00                                               /.

00000725 <_ZZN9task_user11show_statusEvE3__c_2>:
     725:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

00000733 <_ZZN9task_user11show_statusEvE3__c_1>:
     733:	54 69 6d 65 3a 20 00                                Time: .

0000073a <_ZZN9task_user11show_statusEvE3__c_0>:
     73a:	4f 63 74 20 31 30 20 32 30 31 38 00                 Oct 10 2018.

00000746 <_ZZN9task_user11show_statusEvE3__c>:
     746:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     756:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

00000765 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     765:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

00000774 <_ZZN9task_user18print_help_messageEvE3__c_9>:
     774:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     784:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

0000078f <_ZZN9task_user18print_help_messageEvE3__c_8>:
     78f:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     79f:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

000007ad <_ZZN9task_user18print_help_messageEvE3__c_7>:
     7ad:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     7bd:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     7cd:	6d 61 74 69 6f 6e 00                                mation.

000007d4 <_ZZN9task_user18print_help_messageEvE3__c_6>:
     7d4:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     7e4:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

000007f5 <_ZZN9task_user18print_help_messageEvE3__c_5>:
     7f5:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     805:	65 20 6f 6e 6c 79 3a 00                             e only:.

0000080d <_ZZN9task_user18print_help_messageEvE3__c_4>:
     80d:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     81d:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

00000829 <_ZZN9task_user18print_help_messageEvE3__c_3>:
     829:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     839:	68 65 20 41 56 52 00                                he AVR.

00000840 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     840:	20 68 65 6c 70 00                                    help.

00000846 <_ZZN9task_user18print_help_messageEvE3__c_1>:
     846:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     856:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

00000865 <_ZZN9task_user18print_help_messageEvE3__c_0>:
     865:	1b 5b 33 30 6d 00                                   .[30m.

0000086b <_ZZN9task_user18print_help_messageEvE3__c>:
     86b:	1b 5b 34 36 6d 00                                   .[46m.

00000871 <_ZZN9task_user3runEvE3__c_17>:
     871:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     881:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

0000088e <_ZZN9task_user3runEvE3__c_16>:
     88e:	53 65 6e 73 6f 72 20 73 61 6d 70 6c 65 20 73 69     Sensor sample si
     89e:	7a 65 20 73 65 74 20 74 6f 3a 00                    ze set to:.

000008a9 <_ZZN9task_user3runEvE3__c_15>:
     8a9:	53 65 6e 73 6f 72 20 64 65 6c 61 79 20 73 65 74     Sensor delay set
     8b9:	20 74 6f 3a 00                                       to:.

000008be <_ZZN9task_user3runEvE3__c_14>:
     8be:	4d 69 63 72 6f 73 74 65 70 20 73 63 61 6c 65 72     Microstep scaler
     8ce:	20 73 65 74 20 74 6f 3a 00                           set to:.

000008d7 <_ZZN9task_user3runEvE3__c_13>:
     8d7:	43 6f 6e 66 69 67 20 65 6e 74 65 72 65 64 3a 00     Config entered:.

000008e7 <_ZZN9task_user3runEvE3__c_12>:
     8e7:	4c 65 61 76 69 6e 67 20 63 6f 6e 66 69 67 20 6d     Leaving config m
     8f7:	6f 64 65 00                                         ode.

000008fb <_ZZN9task_user3runEvE3__c_11>:
     8fb:	5a 2d 61 78 69 73 20 6d 61 78 20 76 65 6c 6f 63     Z-axis max veloc
     90b:	69 74 79 20 73 65 74 20 74 6f 3a 00                 ity set to:.

00000917 <_ZZN9task_user3runEvE3__c_10>:
     917:	59 2d 61 78 69 73 20 6d 61 78 20 76 65 6c 6f 63     Y-axis max veloc
     927:	69 74 79 20 73 65 74 20 74 6f 3a 00                 ity set to:.

00000933 <_ZZN9task_user3runEvE3__c_9>:
     933:	58 2d 61 78 69 73 20 6d 61 78 20 76 65 6c 6f 63     X-axis max veloc
     943:	69 74 79 20 73 65 74 20 74 6f 3a 00                 ity set to:.

0000094f <_ZZN9task_user3runEvE3__c_8>:
     94f:	4d 61 78 20 76 65 6c 6f 63 69 74 79 20 73 65 74     Max velocity set
     95f:	20 74 6f 3a 00                                       to:.

00000964 <_ZZN9task_user3runEvE3__c_7>:
     964:	50 6c 65 61 73 65 20 63 68 6f 6f 73 65 20 74 68     Please choose th
     974:	65 20 6d 6f 74 6f 72 20 79 6f 75 20 77 6f 75 6c     e motor you woul
     984:	64 20 6c 69 6b 65 20 74 6f 20 63 6f 6e 74 72 6f     d like to contro
     994:	6c 2e 00                                            l..

00000997 <_ZZN9task_user3runEvE3__c_6>:
     997:	50 6c 65 61 73 65 20 63 68 6f 6f 73 65 20 74 68     Please choose th
     9a7:	65 20 6d 6f 74 6f 72 20 79 6f 75 20 77 6f 75 6c     e motor you woul
     9b7:	64 20 6c 69 6b 65 20 74 6f 20 63 6f 6e 74 72 6f     d like to contro
     9c7:	6c 2e 00                                            l..

000009ca <_ZZN9task_user3runEvE3__c_5>:
     9ca:	50 6c 65 61 73 65 20 63 68 6f 6f 73 65 20 74 68     Please choose th
     9da:	65 20 6d 6f 74 6f 72 20 79 6f 75 20 77 6f 75 6c     e motor you woul
     9ea:	64 20 6c 69 6b 65 20 74 6f 20 63 6f 6e 74 72 6f     d like to contro
     9fa:	6c 2e 00                                            l..

000009fd <_ZZN9task_user3runEvE3__c_4>:
     9fd:	52 65 63 65 69 76 69 6e 67 20 5a 2d 6c 6f 63 61     Receiving Z-loca
     a0d:	74 69 6f 6e 73 2e 00                                tions..

00000a14 <_ZZN9task_user3runEvE3__c_3>:
     a14:	52 65 63 65 69 76 69 6e 67 20 59 2d 6c 6f 63 61     Receiving Y-loca
     a24:	74 69 6f 6e 73 2e 00                                tions..

00000a2b <_ZZN9task_user3runEvE3__c_2>:
     a2b:	52 65 63 65 69 76 69 6e 67 20 58 2d 6c 6f 63 61     Receiving X-loca
     a3b:	74 69 6f 6e 73 2e 00                                tions..

00000a42 <_ZZN9task_user3runEvE3__c_1>:
     a42:	45 72 72 6f 72 3a 20 55 6e 65 71 75 61 6c 20 61     Error: Unequal a
     a52:	78 69 73 20 63 6f 6f 72 64 69 6e 61 74 65 20 76     xis coordinate v
     a62:	65 63 74 6f 72 73 2e 00                             ectors..

00000a6a <_ZZN9task_user3runEvE3__c_0>:
     a6a:	54 6f 74 61 6c 20 6e 6f 64 65 73 3a 20 00           Total nodes: .

00000a78 <_ZZN9task_user3runEvE3__c>:
     a78:	45 6e 74 65 72 69 6e 67 20 63 6f 6e 66 69 67 20     Entering config 
     a88:	6d 6f 64 65 00                                      mode.

00000a8d <_ZZN9task_user12reset_deviceEvE3__c>:
     a8d:	52 65 73 65 74 74 69 6e 67 20 64 65 76 69 63 65     Resetting device
     a9d:	2e 00                                               ..

00000a9f <_ZZN9task_user24print_dir_motor_commandsEvE3__c_1>:
     a9f:	50 72 65 73 73 20 43 74 72 6c 2d 53 20 74 6f 20     Press Ctrl-S to 
     aaf:	73 74 6f 70 2e 00                                   stop..

00000ab5 <_ZZN9task_user24print_dir_motor_commandsEvE3__c_0>:
     ab5:	50 72 65 73 73 20 43 74 72 6c 2d 52 20 74 6f 20     Press Ctrl-R to 
     ac5:	61 63 74 69 76 61 74 65 20 72 65 76 65 72 73 65     activate reverse
     ad5:	2e 00                                               ..

00000ad7 <_ZZN9task_user24print_dir_motor_commandsEvE3__c>:
     ad7:	50 72 65 73 73 20 43 74 72 6c 2d 46 20 74 6f 20     Press Ctrl-F to 
     ae7:	61 63 74 69 76 61 74 65 20 66 6f 72 77 61 72 64     activate forward
     af7:	2e 00                                               ..

00000af9 <_ZZN9task_user19print_dir_mode_menuEvE3__c_2>:
     af9:	50 72 65 73 73 20 43 74 72 6c 2d 5a 20 66 6f 72     Press Ctrl-Z for
     b09:	20 5a 2d 4d 6f 74 6f 72 20 63 6f 6d 6d 61 6e 64      Z-Motor command
     b19:	73 2e 00                                            s..

00000b1c <_ZZN9task_user19print_dir_mode_menuEvE3__c_1>:
     b1c:	50 72 65 73 73 20 43 74 72 6c 2d 59 20 66 6f 72     Press Ctrl-Y for
     b2c:	20 59 2d 4d 6f 74 6f 72 20 63 6f 6d 6d 61 6e 64      Y-Motor command
     b3c:	73 2e 00                                            s..

00000b3f <_ZZN9task_user19print_dir_mode_menuEvE3__c_0>:
     b3f:	50 72 65 73 73 20 43 74 72 6c 2d 58 20 66 6f 72     Press Ctrl-X for
     b4f:	20 58 2d 4d 6f 74 6f 72 20 63 6f 6d 6d 61 6e 64      X-Motor command
     b5f:	73 2e 00                                            s..

00000b62 <_ZZN9task_user19print_dir_mode_menuEvE3__c>:
     b62:	45 6e 74 65 72 69 6e 67 20 44 69 72 65 63 74 20     Entering Direct 
     b72:	4f 70 65 72 61 74 69 6f 6e 20 4d 6f 64 65 2e 00     Operation Mode..

00000b82 <_ZZN9task_user21print_coord_mode_menuEvE3__c_5>:
     b82:	50 72 65 73 73 20 45 20 74 6f 20 72 65 74 75 72     Press E to retur
     b92:	6e 20 74 6f 20 74 68 65 20 6d 61 69 6e 20 6d 65     n to the main me
     ba2:	6e 75 2e 00                                         nu..

00000ba6 <_ZZN9task_user21print_coord_mode_menuEvE3__c_4>:
     ba6:	50 72 65 73 73 20 52 20 74 6f 20 72 65 73 65 74     Press R to reset
     bb6:	20 74 68 65 20 64 65 76 69 63 65 2e 00               the device..

00000bc3 <_ZZN9task_user21print_coord_mode_menuEvE3__c_3>:
     bc3:	50 72 65 73 73 20 47 20 74 6f 20 72 75 6e 20 74     Press G to run t
     bd3:	68 65 20 64 65 76 69 63 65 2e 00                    he device..

00000bde <_ZZN9task_user21print_coord_mode_menuEvE3__c_2>:
     bde:	50 72 65 73 73 20 5a 20 74 6f 20 65 6e 74 65 72     Press Z to enter
     bee:	20 5a 2d 63 6f 6f 72 64 69 6e 61 74 65 73 2e 00      Z-coordinates..

00000bfe <_ZZN9task_user21print_coord_mode_menuEvE3__c_1>:
     bfe:	50 72 65 73 73 20 59 20 74 6f 20 65 6e 74 65 72     Press Y to enter
     c0e:	20 59 2d 63 6f 6f 72 64 69 6e 61 74 65 73 2e 00      Y-coordinates..

00000c1e <_ZZN9task_user21print_coord_mode_menuEvE3__c_0>:
     c1e:	50 72 65 73 73 20 58 20 74 6f 20 65 6e 74 65 72     Press X to enter
     c2e:	20 58 2d 63 6f 6f 72 64 69 6e 61 74 65 73 2e 00      X-coordinates..

00000c3e <_ZZN9task_user21print_coord_mode_menuEvE3__c>:
     c3e:	45 6e 74 65 72 69 6e 67 20 43 6f 6f 72 64 69 6e     Entering Coordin
     c4e:	61 74 65 20 4d 6f 64 65 2e 00                       ate Mode..

00000c58 <_ZZN9task_user22print_config_mode_menuEvE3__c_4>:
     c58:	50 72 65 73 73 20 45 20 74 6f 20 72 65 74 75 72     Press E to retur
     c68:	6e 20 74 6f 20 74 68 65 20 6d 61 69 6e 20 6d 65     n to the main me
     c78:	6e 75 2e 00                                         nu..

00000c7c <_ZZN9task_user22print_config_mode_menuEvE3__c_3>:
     c7c:	50 72 65 73 73 20 52 20 74 6f 20 72 65 73 65 74     Press R to reset
     c8c:	20 74 68 65 20 64 65 76 69 63 65 2e 00               the device..

00000c99 <_ZZN9task_user22print_config_mode_menuEvE3__c_2>:
     c99:	50 72 65 73 73 20 5a 20 74 6f 20 72 65 74 75 72     Press Z to retur
     ca9:	6e 20 74 68 65 20 64 65 76 69 63 65 20 74 6f 20     n the device to 
     cb9:	74 68 65 20 6f 72 69 67 69 6e 2e 00                 the origin..

00000cc5 <_ZZN9task_user22print_config_mode_menuEvE3__c_1>:
     cc5:	50 72 65 73 73 20 53 20 74 6f 20 63 68 61 6e 67     Press S to chang
     cd5:	65 20 74 68 65 20 64 65 66 61 75 6c 74 20 73 65     e the default se
     ce5:	6e 73 6f 72 20 72 65 61 64 69 6e 67 20 64 65 6c     nsor reading del
     cf5:	61 79 20 74 69 6d 65 2e 00                          ay time..

00000cfe <_ZZN9task_user22print_config_mode_menuEvE3__c_0>:
     cfe:	50 72 65 73 73 20 55 20 74 6f 20 63 68 61 6e 67     Press U to chang
     d0e:	65 20 74 68 65 20 64 65 66 61 75 6c 74 20 6d 6f     e the default mo
     d1e:	74 6f 72 20 6d 69 63 72 6f 73 74 65 70 20 73 63     tor microstep sc
     d2e:	61 6c 65 72 2e 00                                   aler..

00000d34 <_ZZN9task_user22print_config_mode_menuEvE3__c>:
     d34:	45 6e 74 65 72 69 6e 67 20 43 6f 6e 66 69 67 75     Entering Configu
     d44:	72 61 74 69 6f 6e 20 4d 6f 64 65 2e 00              ration Mode..

00000d51 <_ZZN9task_user15print_main_menuEvE3__c_3>:
     d51:	50 72 65 73 73 20 52 20 74 6f 20 72 65 73 65 74     Press R to reset
     d61:	20 74 68 65 20 64 65 76 69 63 65 2e 00               the device..

00000d6e <_ZZN9task_user15print_main_menuEvE3__c_2>:
     d6e:	50 72 65 73 73 20 44 20 66 6f 72 20 44 69 72 65     Press D for Dire
     d7e:	63 74 20 4f 70 65 72 61 74 69 6f 6e 20 4d 6f 64     ct Operation Mod
     d8e:	65 2e 00                                            e..

00000d91 <_ZZN9task_user15print_main_menuEvE3__c_1>:
     d91:	50 72 65 73 73 20 43 20 66 6f 72 20 43 6f 6f 72     Press C for Coor
     da1:	64 69 6e 61 74 65 20 4d 6f 64 65 2e 00              dinate Mode..

00000dae <_ZZN9task_user15print_main_menuEvE3__c_0>:
     dae:	50 72 65 73 73 20 41 20 66 6f 72 20 43 6f 6e 66     Press A for Conf
     dbe:	69 67 75 72 61 74 69 6f 6e 20 4d 6f 64 65 2e 00     iguration Mode..

00000dce <_ZZN9task_user15print_main_menuEvE3__c>:
     dce:	57 65 6c 63 6f 6d 65 20 74 6f 20 74 68 65 20 55     Welcome to the U
     dde:	73 65 72 20 49 6e 74 65 72 66 61 63 65 20 6d 61     ser Interface ma
     dee:	69 6e 20 6d 65 6e 75 20 6f 66 20 74 68 65 20 33     in menu of the 3
     dfe:	44 20 48 65 61 74 20 46 6c 75 78 20 43 61 6c 69     D Heat Flux Cali
     e0e:	62 72 61 74 6f 72 2e 00                             brator..

00000e16 <_ZZN8frt_task15emergency_resetEvE3__c_0>:
     e16:	52 65 73 65 74 74 69 6e 67 00                       Resetting.

00000e20 <_ZZN8frt_task15emergency_resetEvE3__c>:
     e20:	45 52 52 4f 52 20 69 6e 20 74 61 73 6b 20 00        ERROR in task .

00000e2f <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     e2f:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     e3f:	61 73 6b 20 00                                      ask .

00000e44 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     e44:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

00000e52 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     e52:	20 63 72 65 61 74 65 64 00                           created.

00000e5b <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     e5b:	54 61 73 6b 20 00                                   Task .

00000e61 <_ZZ15print_task_listP8emstreamE3__c_9>:
     e61:	09 09 00                                            ...

00000e64 <_ZZ15print_task_listP8emstreamE3__c_8>:
     e64:	2f 00                                               /.

00000e66 <_ZZ15print_task_listP8emstreamE3__c_7>:
     e66:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

00000e71 <_ZZ15print_task_listP8emstreamE3__c_6>:
     e71:	09 2d 2d 2d 2d 00                                   .----.

00000e77 <_ZZ15print_task_listP8emstreamE3__c_5>:
     e77:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

00000e83 <_ZZ15print_task_listP8emstreamE3__c_4>:
     e83:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

00000e94 <_ZZ15print_task_listP8emstreamE3__c_3>:
     e94:	09 52 75 6e 73 00                                   .Runs.

00000e9a <_ZZ15print_task_listP8emstreamE3__c_2>:
     e9a:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

00000ea6 <_ZZ15print_task_listP8emstreamE3__c_1>:
     ea6:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

00000eb7 <_ZZ15print_task_listP8emstreamE3__c_0>:
     eb7:	09 53 74 61 63 6b 00                                .Stack.

00000ebe <_ZZ15print_task_listP8emstreamE3__c>:
     ebe:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

00000ec9 <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     ec9:	09 00                                               ..

00000ecb <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     ecb:	09 00                                               ..

00000ecd <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     ecd:	2f 00                                               /.

00000ecf <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     ecf:	09 00                                               ..

00000ed1 <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     ed1:	09 00 00                                            ...

00000ed4 <_call_static_run_method>:
     ed4:	0e 94 be 29 	call	0x537c	; 0x537c <_ZN8frt_task22_call_users_run_methodEPS_>

00000ed8 <__ctors_start>:
     ed8:	d5 1d       	adc	r29, r5

00000eda <__ctors_end>:
     eda:	11 24       	eor	r1, r1
     edc:	1f be       	out	0x3f, r1	; 63
     ede:	cf ef       	ldi	r28, 0xFF	; 255
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	df e5       	ldi	r29, 0x5F	; 95
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	00 e0       	ldi	r16, 0x00	; 0
     ee8:	0c bf       	out	0x3c, r16	; 60

00000eea <__do_copy_data>:
     eea:	10 e2       	ldi	r17, 0x20	; 32
     eec:	a0 e0       	ldi	r26, 0x00	; 0
     eee:	b0 e2       	ldi	r27, 0x20	; 32
     ef0:	ec e1       	ldi	r30, 0x1C	; 28
     ef2:	fc e6       	ldi	r31, 0x6C	; 108
     ef4:	00 e0       	ldi	r16, 0x00	; 0
     ef6:	0b bf       	out	0x3b, r16	; 59
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <__do_copy_data+0x14>
     efa:	07 90       	elpm	r0, Z+
     efc:	0d 92       	st	X+, r0
     efe:	a0 3f       	cpi	r26, 0xF0	; 240
     f00:	b1 07       	cpc	r27, r17
     f02:	d9 f7       	brne	.-10     	; 0xefa <__do_copy_data+0x10>

00000f04 <__do_clear_bss>:
     f04:	22 e4       	ldi	r18, 0x42	; 66
     f06:	a0 ef       	ldi	r26, 0xF0	; 240
     f08:	b0 e2       	ldi	r27, 0x20	; 32
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <.do_clear_bss_start>

00000f0c <.do_clear_bss_loop>:
     f0c:	1d 92       	st	X+, r1

00000f0e <.do_clear_bss_start>:
     f0e:	ad 30       	cpi	r26, 0x0D	; 13
     f10:	b2 07       	cpc	r27, r18
     f12:	e1 f7       	brne	.-8      	; 0xf0c <.do_clear_bss_loop>

00000f14 <__do_global_ctors>:
     f14:	17 e0       	ldi	r17, 0x07	; 7
     f16:	cd e6       	ldi	r28, 0x6D	; 109
     f18:	d7 e0       	ldi	r29, 0x07	; 7
     f1a:	00 e0       	ldi	r16, 0x00	; 0
     f1c:	06 c0       	rjmp	.+12     	; 0xf2a <__do_global_ctors+0x16>
     f1e:	21 97       	sbiw	r28, 0x01	; 1
     f20:	01 09       	sbc	r16, r1
     f22:	80 2f       	mov	r24, r16
     f24:	fe 01       	movw	r30, r28
     f26:	0e 94 77 34 	call	0x68ee	; 0x68ee <__tablejump2__>
     f2a:	cc 36       	cpi	r28, 0x6C	; 108
     f2c:	d1 07       	cpc	r29, r17
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	08 07       	cpc	r16, r24
     f32:	a9 f7       	brne	.-22     	; 0xf1e <__do_global_ctors+0xa>
     f34:	0e 94 52 19 	call	0x32a4	; 0x32a4 <main>
     f38:	0c 94 0c 36 	jmp	0x6c18	; 0x6c18 <_exit>

00000f3c <__bad_interrupt>:
     f3c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000f40 <_ZN6DM542T27min_bound_interrupt_handlerEv>:
{
  thisInterruptTimer->low();
}

void DM542T::min_bound_interrupt_handler(void)
{
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	ec 01       	movw	r28, r24
  if (get_direction() == 1)
     f46:	e8 81       	ld	r30, Y
     f48:	f9 81       	ldd	r31, Y+1	; 0x01
     f4a:	06 84       	ldd	r0, Z+14	; 0x0e
     f4c:	f7 85       	ldd	r31, Z+15	; 0x0f
     f4e:	e0 2d       	mov	r30, r0
     f50:	19 95       	eicall
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	59 f4       	brne	.+22     	; 0xf6c <_ZN6DM542T27min_bound_interrupt_handlerEv+0x2c>
  {
    motorOff();
     f56:	e8 81       	ld	r30, Y
     f58:	f9 81       	ldd	r31, Y+1	; 0x01
     f5a:	06 80       	ldd	r0, Z+6	; 0x06
     f5c:	f7 81       	ldd	r31, Z+7	; 0x07
     f5e:	e0 2d       	mov	r30, r0
     f60:	ce 01       	movw	r24, r28
     f62:	19 95       	eicall

  void max_bound_interrupt_handler( ) ;
  
  virtual bool get_status(void);

  void reset_steps( ) { steps = 0 ; }
     f64:	19 a2       	std	Y+33, r1	; 0x21
     f66:	1a a2       	std	Y+34, r1	; 0x22
     f68:	1b a2       	std	Y+35, r1	; 0x23
     f6a:	1c a2       	std	Y+36, r1	; 0x24
    reset_steps();
  }
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <_ZN6DM542T27max_bound_interrupt_handlerEv>:

void DM542T::max_bound_interrupt_handler(void)
{
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	ec 01       	movw	r28, r24
  if (get_direction() == 0)
     f78:	e8 81       	ld	r30, Y
     f7a:	f9 81       	ldd	r31, Y+1	; 0x01
     f7c:	06 84       	ldd	r0, Z+14	; 0x0e
     f7e:	f7 85       	ldd	r31, Z+15	; 0x0f
     f80:	e0 2d       	mov	r30, r0
     f82:	19 95       	eicall
     f84:	81 11       	cpse	r24, r1
     f86:	07 c0       	rjmp	.+14     	; 0xf96 <_ZN6DM542T27max_bound_interrupt_handlerEv+0x24>
  {
    motorOff();
     f88:	e8 81       	ld	r30, Y
     f8a:	f9 81       	ldd	r31, Y+1	; 0x01
     f8c:	06 80       	ldd	r0, Z+6	; 0x06
     f8e:	f7 81       	ldd	r31, Z+7	; 0x07
     f90:	e0 2d       	mov	r30, r0
     f92:	ce 01       	movw	r24, r28
     f94:	19 95       	eicall
  }
}
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	08 95       	ret

00000f9c <_ZN12DeviceDriver11LimitSwitch10get_statusEv>:
  {

  }

  bool LimitSwitch::get_status(void)
  {
     f9c:	fc 01       	movw	r30, r24
    if (port->IN & input_bm)
     f9e:	a0 81       	ld	r26, Z
     fa0:	b1 81       	ldd	r27, Z+1	; 0x01
     fa2:	18 96       	adiw	r26, 0x08	; 8
     fa4:	9c 91       	ld	r25, X
     fa6:	83 81       	ldd	r24, Z+3	; 0x03
     fa8:	89 23       	and	r24, r25
     faa:	19 f0       	breq	.+6      	; 0xfb2 <_ZN12DeviceDriver11LimitSwitch10get_statusEv+0x16>
    engaged = false;
  }

  void LimitSwitch::set_status(void)
  {
    engaged = true;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	87 83       	std	Z+7, r24	; 0x07
     fb0:	01 c0       	rjmp	.+2      	; 0xfb4 <_ZN12DeviceDriver11LimitSwitch10get_statusEv+0x18>

  }

  void LimitSwitch::clr_status(void)
  {
    engaged = false;
     fb2:	17 82       	std	Z+7, r1	; 0x07
    {
      clr_status();
    }
    return engaged;

  }
     fb4:	87 81       	ldd	r24, Z+7	; 0x07
     fb6:	08 95       	ret

00000fb8 <_ZN5SBG018reg_readEv>:
 */
int16_t SBG01::get_voltage_bits (void)
{
	reg_read();
	return read_word;
}
     fb8:	bc 01       	movw	r22, r24
     fba:	64 5f       	subi	r22, 0xF4	; 244
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
     fbe:	48 ee       	ldi	r20, 0xE8	; 232
     fc0:	53 e0       	ldi	r21, 0x03	; 3
     fc2:	fc 01       	movw	r30, r24
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
     fc8:	0e 94 07 09 	call	0x120e	; 0x120e <_ZN3ADC4readEPij>
     fcc:	08 95       	ret

00000fce <_ZN5SBG0111get_voltageEv>:
     fce:	cf 92       	push	r12
     fd0:	df 92       	push	r13
     fd2:	ef 92       	push	r14
     fd4:	ff 92       	push	r15
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	ec 01       	movw	r28, r24
     fe0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN5SBG018reg_readEv>
     fe4:	0c 85       	ldd	r16, Y+12	; 0x0c
     fe6:	1d 85       	ldd	r17, Y+13	; 0x0d
     fe8:	88 81       	ld	r24, Y
     fea:	99 81       	ldd	r25, Y+1	; 0x01
     fec:	0e 94 43 09 	call	0x1286	; 0x1286 <_ZN3ADC15get_voltage_refEv>
     ff0:	6b 01       	movw	r12, r22
     ff2:	7c 01       	movw	r14, r24
     ff4:	b8 01       	movw	r22, r16
     ff6:	11 0f       	add	r17, r17
     ff8:	88 0b       	sbc	r24, r24
     ffa:	99 0b       	sbc	r25, r25
     ffc:	0e 94 4c 33 	call	0x6698	; 0x6698 <__floatsisf>
    1000:	a7 01       	movw	r20, r14
    1002:	96 01       	movw	r18, r12
    1004:	0e 94 d8 33 	call	0x67b0	; 0x67b0 <__mulsf3>
    1008:	6b 01       	movw	r12, r22
    100a:	7c 01       	movw	r14, r24
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	55 e4       	ldi	r21, 0x45	; 69
    1014:	6a 89       	ldd	r22, Y+18	; 0x12
    1016:	7b 89       	ldd	r23, Y+19	; 0x13
    1018:	8c 89       	ldd	r24, Y+20	; 0x14
    101a:	9d 89       	ldd	r25, Y+21	; 0x15
    101c:	0e 94 d8 33 	call	0x67b0	; 0x67b0 <__mulsf3>
    1020:	9b 01       	movw	r18, r22
    1022:	ac 01       	movw	r20, r24
    1024:	c7 01       	movw	r24, r14
    1026:	b6 01       	movw	r22, r12
    1028:	0e 94 a9 32 	call	0x6552	; 0x6552 <__divsf3>
    102c:	6a 83       	std	Y+2, r22	; 0x02
    102e:	7b 83       	std	Y+3, r23	; 0x03
    1030:	8c 83       	std	Y+4, r24	; 0x04
    1032:	9d 83       	std	Y+5, r25	; 0x05
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	08 95       	ret

00001046 <_ZN5SBG0114get_voltage_mvEv>:

//-------------------------------------------------------------------------------------
/** This method returns the result of get_voltage after converting it to millivolts
 */
float SBG01::get_voltage_mv (void)
{
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	ec 01       	movw	r28, r24
	get_voltage();
    104c:	0e 94 e7 07 	call	0xfce	; 0xfce <_ZN5SBG0111get_voltageEv>
	voltage_mv = voltage * 1000;
	voltage_mv = voltage_mv * 1.99 + 7.9;
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	4a e7       	ldi	r20, 0x7A	; 122
    1056:	54 e4       	ldi	r21, 0x44	; 68
    1058:	6a 81       	ldd	r22, Y+2	; 0x02
    105a:	7b 81       	ldd	r23, Y+3	; 0x03
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	9d 81       	ldd	r25, Y+5	; 0x05
    1060:	0e 94 d8 33 	call	0x67b0	; 0x67b0 <__mulsf3>
    1064:	22 e5       	ldi	r18, 0x52	; 82
    1066:	38 eb       	ldi	r19, 0xB8	; 184
    1068:	4e ef       	ldi	r20, 0xFE	; 254
    106a:	5f e3       	ldi	r21, 0x3F	; 63
    106c:	0e 94 d8 33 	call	0x67b0	; 0x67b0 <__mulsf3>
    1070:	2d ec       	ldi	r18, 0xCD	; 205
    1072:	3c ec       	ldi	r19, 0xCC	; 204
    1074:	4c ef       	ldi	r20, 0xFC	; 252
    1076:	50 e4       	ldi	r21, 0x40	; 64
    1078:	0e 94 3d 32 	call	0x647a	; 0x647a <__addsf3>
    107c:	6e 83       	std	Y+6, r22	; 0x06
    107e:	7f 83       	std	Y+7, r23	; 0x07
    1080:	88 87       	std	Y+8, r24	; 0x08
    1082:	99 87       	std	Y+9, r25	; 0x09
	return voltage_mv;
}
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	08 95       	ret

0000108a <_ZN6Motion13MotionControlC1Ej>:
    {
      ++steps;
    }
    else
    {
      --steps;
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	ec 01       	movw	r28, r24
    1090:	69 83       	std	Y+1, r22	; 0x01
    1092:	7a 83       	std	Y+2, r23	; 0x02
    1094:	1b 82       	std	Y+3, r1	; 0x03
    1096:	1c 82       	std	Y+4, r1	; 0x04
    1098:	1d 82       	std	Y+5, r1	; 0x05
    109a:	1e 82       	std	Y+6, r1	; 0x06
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 4a 33 	call	0x6694	; 0x6694 <__floatunsisf>
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	46 e1       	ldi	r20, 0x16	; 22
    10aa:	54 e4       	ldi	r21, 0x44	; 68
    10ac:	0e 94 d8 33 	call	0x67b0	; 0x67b0 <__mulsf3>
    10b0:	0e 94 1b 33 	call	0x6636	; 0x6636 <__fixunssfsi>
    10b4:	9b 01       	movw	r18, r22
    10b6:	ac 01       	movw	r20, r24
    10b8:	68 87       	std	Y+8, r22	; 0x08
    10ba:	79 87       	std	Y+9, r23	; 0x09
    10bc:	8a 87       	std	Y+10, r24	; 0x0a
    10be:	9b 87       	std	Y+11, r25	; 0x0b
    10c0:	61 e0       	ldi	r22, 0x01	; 1
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 55 34 	call	0x68aa	; 0x68aa <__udivmodsi4>
    10cc:	2c 87       	std	Y+12, r18	; 0x0c
    10ce:	3d 87       	std	Y+13, r19	; 0x0d
    10d0:	4e 87       	std	Y+14, r20	; 0x0e
    10d2:	5f 87       	std	Y+15, r21	; 0x0f
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	08 95       	ret

000010da <_ZN6Motion13MotionControl13inchesToStepsEm>:
    10da:	9a 01       	movw	r18, r20
    10dc:	ab 01       	movw	r20, r22
    10de:	fc 01       	movw	r30, r24
    10e0:	60 85       	ldd	r22, Z+8	; 0x08
    10e2:	71 85       	ldd	r23, Z+9	; 0x09
    10e4:	82 85       	ldd	r24, Z+10	; 0x0a
    10e6:	93 85       	ldd	r25, Z+11	; 0x0b
    10e8:	0e 94 45 34 	call	0x688a	; 0x688a <__mulsi3>
    10ec:	08 95       	ret

000010ee <_ZN6Motion13MotionControl8getStepsEv>:
  //-------------------------------------------------------------------------------------
  /** This method returns the number of steps that the driver has taken relative to the origin.
   */
  int32_t MotionControl::getSteps(void)
  {
    return steps;
    10ee:	fc 01       	movw	r30, r24
    10f0:	63 81       	ldd	r22, Z+3	; 0x03
    10f2:	74 81       	ldd	r23, Z+4	; 0x04
    10f4:	85 81       	ldd	r24, Z+5	; 0x05
    10f6:	96 81       	ldd	r25, Z+6	; 0x06
  }
    10f8:	08 95       	ret

000010fa <_ZN6Motion15VelocityControlC1Ej>:
   *  @param dir_bm A bit-mask indicating which pin on the port is used as the direction pin
   *  @param pwm_bm A bit-mask indicating which pin on the port is used as the pwm signal pin
   *  @param microstep_scaler A bit-mask indicating the factor that the default 200 steps
   *   of the motor is multiplied by
   */
  VelocityControl::VelocityControl ( uint16_t microstepScaler )
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	ec 01       	movw	r28, r24
    : MotionControl ( microstepScaler ), minOperatingFreqHz(500), rampAccel(1.5)
    1100:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN6Motion13MotionControlC1Ej>
    1104:	84 ef       	ldi	r24, 0xF4	; 244
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	a0 e0       	ldi	r26, 0x00	; 0
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	88 8b       	std	Y+16, r24	; 0x10
    110e:	99 8b       	std	Y+17, r25	; 0x11
    1110:	aa 8b       	std	Y+18, r26	; 0x12
    1112:	bb 8b       	std	Y+19, r27	; 0x13
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a0 ec       	ldi	r26, 0xC0	; 192
    111a:	bf e3       	ldi	r27, 0x3F	; 63
    111c:	8c a3       	std	Y+36, r24	; 0x24
    111e:	9d a3       	std	Y+37, r25	; 0x25
    1120:	ae a3       	std	Y+38, r26	; 0x26
    1122:	bf a3       	std	Y+39, r27	; 0x27
  {
    rampFreqAccel = inchesToSteps ( rampAccel ) ;
    1124:	41 e0       	ldi	r20, 0x01	; 1
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	ce 01       	movw	r24, r28
    112e:	0e 94 6d 08 	call	0x10da	; 0x10da <_ZN6Motion13MotionControl13inchesToStepsEm>
    1132:	0e 94 4a 33 	call	0x6694	; 0x6694 <__floatunsisf>
    1136:	68 a7       	std	Y+40, r22	; 0x28
    1138:	79 a7       	std	Y+41, r23	; 0x29
    113a:	8a a7       	std	Y+42, r24	; 0x2a
    113c:	9b a7       	std	Y+43, r25	; 0x2b
  }
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	08 95       	ret

00001144 <_ZN6Motion15VelocityControl7setRampEP14InterruptTimermm>:

  //-------------------------------------------------------------------------------------
  /** This method sets the controls for the acceleration of the motor.
   */
  void VelocityControl::setRamp ( InterruptTimer * timer, uint32_t initialFreqHz, uint32_t finalFreqHz )
  {
    1144:	ef 92       	push	r14
    1146:	ff 92       	push	r15
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	fc 01       	movw	r30, r24
    rampInitialFreqHz = initialFreqHz;
    114e:	20 8f       	std	Z+24, r18	; 0x18
    1150:	31 8f       	std	Z+25, r19	; 0x19
    1152:	42 8f       	std	Z+26, r20	; 0x1a
    1154:	53 8f       	std	Z+27, r21	; 0x1b
    rampFinalFreqHz = finalFreqHz;
    1156:	e4 8e       	std	Z+28, r14	; 0x1c
    1158:	f5 8e       	std	Z+29, r15	; 0x1d
    115a:	06 8f       	std	Z+30, r16	; 0x1e
    115c:	17 8f       	std	Z+31, r17	; 0x1f
    rampCurrentFreqHz = initialFreqHz ;
    115e:	20 a3       	std	Z+32, r18	; 0x20
    1160:	31 a3       	std	Z+33, r19	; 0x21
    1162:	42 a3       	std	Z+34, r20	; 0x22
    1164:	53 a3       	std	Z+35, r21	; 0x23
    handlerCallCount = 0;
    1166:	14 8a       	std	Z+20, r1	; 0x14
    1168:	15 8a       	std	Z+21, r1	; 0x15
    116a:	16 8a       	std	Z+22, r1	; 0x16
    116c:	17 8a       	std	Z+23, r1	; 0x17
    //timer->set_freq_hz(init_freq_hz); 
  }
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	08 95       	ret

00001178 <_ZN6Motion15VelocityControl11rampHandlerEv>:

  //-------------------------------------------------------------------------------------
  /** This method controls the velocity ramp.
   */
  uint32_t VelocityControl::rampHandler ( )
  {
    1178:	cf 92       	push	r12
    117a:	df 92       	push	r13
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	ec 01       	movw	r28, r24
    if ( rampCurrentFreqHz < rampFinalFreqHz )
    1186:	c8 a0       	ldd	r12, Y+32	; 0x20
    1188:	d9 a0       	ldd	r13, Y+33	; 0x21
    118a:	ea a0       	ldd	r14, Y+34	; 0x22
    118c:	fb a0       	ldd	r15, Y+35	; 0x23
    118e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1190:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1192:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1194:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1196:	c8 16       	cp	r12, r24
    1198:	d9 06       	cpc	r13, r25
    119a:	ea 06       	cpc	r14, r26
    119c:	fb 06       	cpc	r15, r27
    119e:	18 f5       	brcc	.+70     	; 0x11e6 <_ZN6Motion15VelocityControl11rampHandlerEv+0x6e>
    {
      handlerCallCount++ ;
    11a0:	8c 89       	ldd	r24, Y+20	; 0x14
    11a2:	9d 89       	ldd	r25, Y+21	; 0x15
    11a4:	ae 89       	ldd	r26, Y+22	; 0x16
    11a6:	bf 89       	ldd	r27, Y+23	; 0x17
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	a1 1d       	adc	r26, r1
    11ac:	b1 1d       	adc	r27, r1
    11ae:	8c 8b       	std	Y+20, r24	; 0x14
    11b0:	9d 8b       	std	Y+21, r25	; 0x15
    11b2:	ae 8b       	std	Y+22, r26	; 0x16
    11b4:	bf 8b       	std	Y+23, r27	; 0x17
      uint32_t freqDelta = rampFreqAccel / rampHandlerScanFreq ;
      rampCurrentFreqHz = rampCurrentFreqHz + freqDelta ;
    11b6:	6c a5       	ldd	r22, Y+44	; 0x2c
    11b8:	7d a5       	ldd	r23, Y+45	; 0x2d
    11ba:	8e a5       	ldd	r24, Y+46	; 0x2e
    11bc:	9f a5       	ldd	r25, Y+47	; 0x2f
    11be:	0e 94 4a 33 	call	0x6694	; 0x6694 <__floatunsisf>
    11c2:	9b 01       	movw	r18, r22
    11c4:	ac 01       	movw	r20, r24
    11c6:	68 a5       	ldd	r22, Y+40	; 0x28
    11c8:	79 a5       	ldd	r23, Y+41	; 0x29
    11ca:	8a a5       	ldd	r24, Y+42	; 0x2a
    11cc:	9b a5       	ldd	r25, Y+43	; 0x2b
    11ce:	0e 94 a9 32 	call	0x6552	; 0x6552 <__divsf3>
    11d2:	0e 94 1b 33 	call	0x6636	; 0x6636 <__fixunssfsi>
    11d6:	c6 0e       	add	r12, r22
    11d8:	d7 1e       	adc	r13, r23
    11da:	e8 1e       	adc	r14, r24
    11dc:	f9 1e       	adc	r15, r25
    11de:	c8 a2       	std	Y+32, r12	; 0x20
    11e0:	d9 a2       	std	Y+33, r13	; 0x21
    11e2:	ea a2       	std	Y+34, r14	; 0x22
    11e4:	fb a2       	std	Y+35, r15	; 0x23
    }

    return getRampCurrentFreqHz() ; 
    11e6:	68 a1       	ldd	r22, Y+32	; 0x20
    11e8:	79 a1       	ldd	r23, Y+33	; 0x21
    11ea:	8a a1       	ldd	r24, Y+34	; 0x22
    11ec:	9b a1       	ldd	r25, Y+35	; 0x23
  }
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	df 90       	pop	r13
    11f8:	cf 90       	pop	r12
    11fa:	08 95       	ret

000011fc <_ZN3ADC10start_convEv>:
    11fc:	dc 01       	movw	r26, r24
    11fe:	16 96       	adiw	r26, 0x06	; 6
    1200:	ed 91       	ld	r30, X+
    1202:	fc 91       	ld	r31, X
    1204:	17 97       	sbiw	r26, 0x07	; 7
    1206:	80 a1       	ldd	r24, Z+32	; 0x20
    1208:	80 68       	ori	r24, 0x80	; 128
    120a:	80 a3       	std	Z+32, r24	; 0x20
    120c:	08 95       	ret

0000120e <_ZN3ADC4readEPij>:
    120e:	ef 92       	push	r14
    1210:	ff 92       	push	r15
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	1f 92       	push	r1
    121c:	1f 92       	push	r1
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	8c 01       	movw	r16, r24
    1224:	7b 01       	movw	r14, r22
    1226:	49 83       	std	Y+1, r20	; 0x01
    1228:	5a 83       	std	Y+2, r21	; 0x02
    122a:	0e 94 fe 08 	call	0x11fc	; 0x11fc <_ZN3ADC10start_convEv>
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	9a 81       	ldd	r25, Y+2	; 0x02
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	89 83       	std	Y+1, r24	; 0x01
    1236:	9a 83       	std	Y+2, r25	; 0x02
    1238:	89 2b       	or	r24, r25
    123a:	b9 f0       	breq	.+46     	; 0x126a <_ZN3ADC4readEPij+0x5c>
    123c:	d8 01       	movw	r26, r16
    123e:	16 96       	adiw	r26, 0x06	; 6
    1240:	ed 91       	ld	r30, X+
    1242:	fc 91       	ld	r31, X
    1244:	17 97       	sbiw	r26, 0x07	; 7
    1246:	83 a1       	ldd	r24, Z+35	; 0x23
    1248:	80 ff       	sbrs	r24, 0
    124a:	f1 cf       	rjmp	.-30     	; 0x122e <_ZN3ADC4readEPij+0x20>
    124c:	0e c0       	rjmp	.+28     	; 0x126a <_ZN3ADC4readEPij+0x5c>
    124e:	d8 01       	movw	r26, r16
    1250:	16 96       	adiw	r26, 0x06	; 6
    1252:	ed 91       	ld	r30, X+
    1254:	fc 91       	ld	r31, X
    1256:	17 97       	sbiw	r26, 0x07	; 7
    1258:	84 a1       	ldd	r24, Z+36	; 0x24
    125a:	95 a1       	ldd	r25, Z+37	; 0x25
    125c:	f7 01       	movw	r30, r14
    125e:	80 83       	st	Z, r24
    1260:	91 83       	std	Z+1, r25	; 0x01
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	07 c0       	rjmp	.+14     	; 0x1274 <_ZN3ADC4readEPij+0x66>
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	05 c0       	rjmp	.+10     	; 0x1274 <_ZN3ADC4readEPij+0x66>
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	89 2b       	or	r24, r25
    1270:	71 f7       	brne	.-36     	; 0x124e <_ZN3ADC4readEPij+0x40>
    1272:	f9 cf       	rjmp	.-14     	; 0x1266 <_ZN3ADC4readEPij+0x58>
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	ff 90       	pop	r15
    1282:	ef 90       	pop	r14
    1284:	08 95       	ret

00001286 <_ZN3ADC15get_voltage_refEv>:
    1286:	fc 01       	movw	r30, r24
    1288:	62 81       	ldd	r22, Z+2	; 0x02
    128a:	73 81       	ldd	r23, Z+3	; 0x03
    128c:	84 81       	ldd	r24, Z+4	; 0x04
    128e:	95 81       	ldd	r25, Z+5	; 0x05
    1290:	08 95       	ret

00001292 <_ZN7task_mdC1EPKchjP8emstreamP6DM542TPN12DeviceDriver11LimitSwitchES8_P9frt_queueImESB_P11shared_dataIhEPSC_IbEj>:
	md->take_step();
}

void task_md::set_signal_low(void)
{
	md->set_signal_low();
    1292:	2f 92       	push	r2
    1294:	3f 92       	push	r3
    1296:	4f 92       	push	r4
    1298:	5f 92       	push	r5
    129a:	6f 92       	push	r6
    129c:	7f 92       	push	r7
    129e:	8f 92       	push	r8
    12a0:	9f 92       	push	r9
    12a2:	af 92       	push	r10
    12a4:	bf 92       	push	r11
    12a6:	cf 92       	push	r12
    12a8:	df 92       	push	r13
    12aa:	ef 92       	push	r14
    12ac:	ff 92       	push	r15
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	3c 01       	movw	r6, r24
    12bc:	2b 01       	movw	r4, r22
    12be:	2c 8c       	ldd	r2, Y+28	; 0x1c
    12c0:	3d 8c       	ldd	r3, Y+29	; 0x1d
    12c2:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <_ZN8frt_taskC1EPKchjP8emstream>
    12c6:	8b e0       	ldi	r24, 0x0B	; 11
    12c8:	90 e2       	ldi	r25, 0x20	; 32
    12ca:	f3 01       	movw	r30, r6
    12cc:	80 83       	st	Z, r24
    12ce:	91 83       	std	Z+1, r25	; 0x01
    12d0:	e2 8a       	std	Z+18, r14	; 0x12
    12d2:	f3 8a       	std	Z+19, r15	; 0x13
    12d4:	c4 8a       	std	Z+20, r12	; 0x14
    12d6:	d5 8a       	std	Z+21, r13	; 0x15
    12d8:	a6 8a       	std	Z+22, r10	; 0x16
    12da:	b7 8a       	std	Z+23, r11	; 0x17
    12dc:	86 a2       	std	Z+38, r8	; 0x26
    12de:	97 a2       	std	Z+39, r9	; 0x27
    12e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12e2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12e4:	82 ab       	std	Z+50, r24	; 0x32
    12e6:	93 ab       	std	Z+51, r25	; 0x33
    12e8:	88 8d       	ldd	r24, Y+24	; 0x18
    12ea:	99 8d       	ldd	r25, Y+25	; 0x19
    12ec:	86 ab       	std	Z+54, r24	; 0x36
    12ee:	97 ab       	std	Z+55, r25	; 0x37
    12f0:	8e 89       	ldd	r24, Y+22	; 0x16
    12f2:	9f 89       	ldd	r25, Y+23	; 0x17
    12f4:	86 af       	std	Z+62, r24	; 0x3e
    12f6:	97 af       	std	Z+63, r25	; 0x3f
    12f8:	ea 5b       	subi	r30, 0xBA	; 186
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	20 82       	st	Z, r2
    12fe:	31 82       	std	Z+1, r3	; 0x01
    1300:	32 96       	adiw	r30, 0x02	; 2
    1302:	40 82       	st	Z, r4
    1304:	51 82       	std	Z+1, r5	; 0x01
    1306:	b1 01       	movw	r22, r2
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	0e 94 4a 33 	call	0x6694	; 0x6694 <__floatunsisf>
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	46 e1       	ldi	r20, 0x16	; 22
    1316:	54 e4       	ldi	r21, 0x44	; 68
    1318:	0e 94 d8 33 	call	0x67b0	; 0x67b0 <__mulsf3>
    131c:	9b 01       	movw	r18, r22
    131e:	ac 01       	movw	r20, r24
    1320:	f3 01       	movw	r30, r6
    1322:	60 a7       	std	Z+40, r22	; 0x28
    1324:	71 a7       	std	Z+41, r23	; 0x29
    1326:	82 a7       	std	Z+42, r24	; 0x2a
    1328:	93 a7       	std	Z+43, r25	; 0x2b
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	80 e8       	ldi	r24, 0x80	; 128
    1330:	9f e3       	ldi	r25, 0x3F	; 63
    1332:	0e 94 a9 32 	call	0x6552	; 0x6552 <__divsf3>
    1336:	f3 01       	movw	r30, r6
    1338:	64 a7       	std	Z+44, r22	; 0x2c
    133a:	75 a7       	std	Z+45, r23	; 0x2d
    133c:	86 a7       	std	Z+46, r24	; 0x2e
    133e:	97 a7       	std	Z+47, r25	; 0x2f
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	df 90       	pop	r13
    134e:	cf 90       	pop	r12
    1350:	bf 90       	pop	r11
    1352:	af 90       	pop	r10
    1354:	9f 90       	pop	r9
    1356:	8f 90       	pop	r8
    1358:	7f 90       	pop	r7
    135a:	6f 90       	pop	r6
    135c:	5f 90       	pop	r5
    135e:	4f 90       	pop	r4
    1360:	3f 90       	pop	r3
    1362:	2f 90       	pop	r2
    1364:	08 95       	ret

00001366 <_ZN7task_md7motorOnEv>:
		reset_device();
	}
}

bool task_md::motorOn(void)
{
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	ec 01       	movw	r28, r24
	if (md->get_direction() == 0)
    1370:	8a 89       	ldd	r24, Y+18	; 0x12
    1372:	9b 89       	ldd	r25, Y+19	; 0x13
    1374:	dc 01       	movw	r26, r24
    1376:	ed 91       	ld	r30, X+
    1378:	fc 91       	ld	r31, X
    137a:	06 84       	ldd	r0, Z+14	; 0x0e
    137c:	f7 85       	ldd	r31, Z+15	; 0x0f
    137e:	e0 2d       	mov	r30, r0
    1380:	19 95       	eicall
    1382:	81 11       	cpse	r24, r1
    1384:	27 c0       	rjmp	.+78     	; 0x13d4 <_ZN7task_md7motorOnEv+0x6e>
	{
		if (!(LS_max->get_status()))
    1386:	8e 89       	ldd	r24, Y+22	; 0x16
    1388:	9f 89       	ldd	r25, Y+23	; 0x17
    138a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <_ZN12DeviceDriver11LimitSwitch10get_statusEv>
    138e:	81 11       	cpse	r24, r1
    1390:	48 c0       	rjmp	.+144    	; 0x1422 <_ZN7task_md7motorOnEv+0xbc>
		{
			md->motorOn();
    1392:	8a 89       	ldd	r24, Y+18	; 0x12
    1394:	9b 89       	ldd	r25, Y+19	; 0x13
    1396:	dc 01       	movw	r26, r24
    1398:	ed 91       	ld	r30, X+
    139a:	fc 91       	ld	r31, X
    139c:	01 90       	ld	r0, Z+
    139e:	f0 81       	ld	r31, Z
    13a0:	e0 2d       	mov	r30, r0
    13a2:	19 95       	eicall
			*p_serial << task_name << PMS ("F") << endl;
    13a4:	0e 81       	ldd	r16, Y+6	; 0x06
    13a6:	1f 81       	ldd	r17, Y+7	; 0x07
    13a8:	c8 5b       	subi	r28, 0xB8	; 184
    13aa:	df 4f       	sbci	r29, 0xFF	; 255
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    13ac:	68 81       	ld	r22, Y
    13ae:	79 81       	ldd	r23, Y+1	; 0x01
    13b0:	c8 01       	movw	r24, r16
    13b2:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    13b6:	6a e0       	ldi	r22, 0x0A	; 10
    13b8:	c8 01       	movw	r24, r16
    13ba:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    13be:	ec 01       	movw	r28, r24
    13c0:	68 ea       	ldi	r22, 0xA8	; 168
    13c2:	76 e0       	ldi	r23, 0x06	; 6
    13c4:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    13c8:	66 e0       	ldi	r22, 0x06	; 6
    13ca:	ce 01       	movw	r24, r28
    13cc:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
			return true;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	2a c0       	rjmp	.+84     	; 0x1428 <_ZN7task_md7motorOnEv+0xc2>
			return false;
		}
	}
	else
	{
		if (!(LS_min->get_status()))
    13d4:	8c 89       	ldd	r24, Y+20	; 0x14
    13d6:	9d 89       	ldd	r25, Y+21	; 0x15
    13d8:	0e 94 ce 07 	call	0xf9c	; 0xf9c <_ZN12DeviceDriver11LimitSwitch10get_statusEv>
    13dc:	81 11       	cpse	r24, r1
    13de:	23 c0       	rjmp	.+70     	; 0x1426 <_ZN7task_md7motorOnEv+0xc0>
		{
			md->motorOn();
    13e0:	8a 89       	ldd	r24, Y+18	; 0x12
    13e2:	9b 89       	ldd	r25, Y+19	; 0x13
    13e4:	dc 01       	movw	r26, r24
    13e6:	ed 91       	ld	r30, X+
    13e8:	fc 91       	ld	r31, X
    13ea:	01 90       	ld	r0, Z+
    13ec:	f0 81       	ld	r31, Z
    13ee:	e0 2d       	mov	r30, r0
    13f0:	19 95       	eicall
			*p_serial << task_name << PMS ("R") << endl;
    13f2:	0e 81       	ldd	r16, Y+6	; 0x06
    13f4:	1f 81       	ldd	r17, Y+7	; 0x07
    13f6:	c8 5b       	subi	r28, 0xB8	; 184
    13f8:	df 4f       	sbci	r29, 0xFF	; 255
    13fa:	68 81       	ld	r22, Y
    13fc:	79 81       	ldd	r23, Y+1	; 0x01
    13fe:	c8 01       	movw	r24, r16
    1400:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    1404:	6a e0       	ldi	r22, 0x0A	; 10
    1406:	c8 01       	movw	r24, r16
    1408:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    140c:	ec 01       	movw	r28, r24
    140e:	66 ea       	ldi	r22, 0xA6	; 166
    1410:	76 e0       	ldi	r23, 0x06	; 6
    1412:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    1416:	66 e0       	ldi	r22, 0x06	; 6
    1418:	ce 01       	movw	r24, r28
    141a:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
			return true;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	03 c0       	rjmp	.+6      	; 0x1428 <_ZN7task_md7motorOnEv+0xc2>
			*p_serial << task_name << PMS ("F") << endl;
			return true;
		}
		else
		{
			return false;
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	01 c0       	rjmp	.+2      	; 0x1428 <_ZN7task_md7motorOnEv+0xc2>
			*p_serial << task_name << PMS ("R") << endl;
			return true;
		}
		else
		{
			return false;
    1426:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	08 95       	ret

00001432 <_ZN7task_md3runEv>:
/** This task interacts with the motor driver object in order to control the motors
 *  in ways specified by the user.
 */

void task_md::run (void)
{
    1432:	ec 01       	movw	r28, r24
	char char_in;                           // Character read from serial device
	time_stamp a_time;                      // Holds the time so it can be displayed
	portTickType previous_ticks;
	uint16_t delay_counter = 0;
    1434:	c1 2c       	mov	r12, r1
    1436:	d1 2c       	mov	r13, r1
				{
					md->motorOff();
					transition_to(8);
				}
				
				freq_hz = md->rampHandler();
    1438:	4c 01       	movw	r8, r24
    143a:	80 e4       	ldi	r24, 0x40	; 64
    143c:	88 0e       	add	r8, r24
    143e:	91 1c       	adc	r9, r1
					}
				}
				
				if (++delay_counter == 5)
				{
					*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    1440:	5e 01       	movw	r10, r28
    1442:	a8 e4       	ldi	r26, 0x48	; 72
    1444:	aa 0e       	add	r10, r26
    1446:	b1 1c       	adc	r11, r1
					motorOn();
				}
				else if (steps > step_destination)
				{
					md->motorCW();
					md->setRamp( md->thisInterruptTimer, 500, max_vel );
    1448:	1e 01       	movw	r2, r28
    144a:	b2 e4       	ldi	r27, 0x42	; 66
    144c:	2b 0e       	add	r2, r27
    144e:	31 1c       	adc	r3, r1
			//*p_serial << task_name << state << endl;
			//state_delay_counter = 0;
		//}
		
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
    1450:	8c 85       	ldd	r24, Y+12	; 0x0c
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	89 30       	cpi	r24, 0x09	; 9
    1456:	91 05       	cpc	r25, r1
    1458:	08 f0       	brcs	.+2      	; 0x145c <_ZN7task_md3runEv+0x2a>
    145a:	8f c3       	rjmp	.+1822   	; 0x1b7a <_ZN7task_md3runEv+0x748>
    145c:	fc 01       	movw	r30, r24
    145e:	88 27       	eor	r24, r24
    1460:	e2 50       	subi	r30, 0x02	; 2
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	8f 4f       	sbci	r24, 0xFF	; 255
    1466:	0c 94 77 34 	jmp	0x68ee	; 0x68ee <__tablejump2__>
			// In state 0, the motor task is powered CW back to the origin location in order
			// to get a starting location for all subsequent steps.
			case (0):
			
				#ifdef USE_FAKE_DRIVERS
				transition_to( 2 ) ;
    146a:	62 e0       	ldi	r22, 0x02	; 2
    146c:	ce 01       	movw	r24, r28
    146e:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
				#ifndef USE_FAKE_DRIVERS
				motor_operator->put(2);
				transition_to(3);
				#endif
			
			    break;
    1472:	83 c3       	rjmp	.+1798   	; 0x1b7a <_ZN7task_md3runEv+0x748>
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 1, the motor is returning to the origin and waiting for the limit
			// switch to power it off.
			case (1):
				
				md->rampHandler();
    1474:	8a 89       	ldd	r24, Y+18	; 0x12
    1476:	9b 89       	ldd	r25, Y+19	; 0x13
    1478:	4e 96       	adiw	r24, 0x1e	; 30
    147a:	0e 94 bc 08 	call	0x1178	; 0x1178 <_ZN6Motion15VelocityControl11rampHandlerEv>
				
                if (md->get_status())
    147e:	8a 89       	ldd	r24, Y+18	; 0x12
    1480:	9b 89       	ldd	r25, Y+19	; 0x13
    1482:	dc 01       	movw	r26, r24
    1484:	ed 91       	ld	r30, X+
    1486:	fc 91       	ld	r31, X
    1488:	04 88       	ldd	r0, Z+20	; 0x14
    148a:	f5 89       	ldd	r31, Z+21	; 0x15
    148c:	e0 2d       	mov	r30, r0
    148e:	19 95       	eicall
    1490:	88 23       	and	r24, r24
    1492:	09 f4       	brne	.+2      	; 0x1496 <_ZN7task_md3runEv+0x64>
    1494:	72 c3       	rjmp	.+1764   	; 0x1b7a <_ZN7task_md3runEv+0x748>
				{
					motor_operator->put(0);
    1496:	ee a9       	ldd	r30, Y+54	; 0x36
    1498:	ff a9       	ldd	r31, Y+55	; 0x37
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	0f 92       	push	r0
			the_data = new_data;
    14a0:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    14a2:	0f 90       	pop	r0
    14a4:	0f be       	out	0x3f, r0	; 63
					*p_serial << PMS ("S2") << endl;
    14a6:	6a e0       	ldi	r22, 0x0A	; 10
    14a8:	8e 81       	ldd	r24, Y+6	; 0x06
    14aa:	9f 81       	ldd	r25, Y+7	; 0x07
    14ac:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    14b0:	3c 01       	movw	r6, r24
    14b2:	6f ec       	ldi	r22, 0xCF	; 207
    14b4:	76 e0       	ldi	r23, 0x06	; 6
    14b6:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    14ba:	66 e0       	ldi	r22, 0x06	; 6
    14bc:	c3 01       	movw	r24, r6
    14be:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
					transition_to(2);
    14c2:	62 e0       	ldi	r22, 0x02	; 2
    14c4:	ce 01       	movw	r24, r28
    14c6:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    14ca:	57 c3       	rjmp	.+1710   	; 0x1b7a <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    14d2:	0f 90       	pop	r0
    14d4:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 2, the motor is idle - waiting for a command to switch it into 
			// a certain mode.
			case (2):
				//*p_serial << task_name << PMS ("S2") << endl;
				if(direct_mode.get())
    14d6:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <direct_mode>
    14da:	88 23       	and	r24, r24
    14dc:	29 f0       	breq	.+10     	; 0x14e8 <_ZN7task_md3runEv+0xb6>
				{
					transition_to(3);
    14de:	63 e0       	ldi	r22, 0x03	; 3
    14e0:	ce 01       	movw	r24, r28
    14e2:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    14e6:	49 c3       	rjmp	.+1682   	; 0x1b7a <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    14ee:	0f 90       	pop	r0
    14f0:	0f be       	out	0x3f, r0	; 63
				}
				else if(coordinate_mode.get())
    14f2:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    14f6:	88 23       	and	r24, r24
    14f8:	29 f0       	breq	.+10     	; 0x1504 <_ZN7task_md3runEv+0xd2>
				{
					transition_to(5);
    14fa:	65 e0       	ldi	r22, 0x05	; 5
    14fc:	ce 01       	movw	r24, r28
    14fe:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    1502:	3b c3       	rjmp	.+1654   	; 0x1b7a <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    150a:	0f 90       	pop	r0
    150c:	0f be       	out	0x3f, r0	; 63
				}
				else if(incremental_mode.get())
    150e:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <incremental_mode>
    1512:	88 23       	and	r24, r24
    1514:	09 f4       	brne	.+2      	; 0x1518 <_ZN7task_md3runEv+0xe6>
    1516:	31 c3       	rjmp	.+1634   	; 0x1b7a <_ZN7task_md3runEv+0x748>
				{
					transition_to(5);
    1518:	65 e0       	ldi	r22, 0x05	; 5
    151a:	ce 01       	movw	r24, r28
    151c:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    1520:	2c c3       	rjmp	.+1624   	; 0x1b7a <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	0f 92       	push	r0
			temporary_copy = the_data;
    1528:	ee a9       	ldd	r30, Y+54	; 0x36
    152a:	ff a9       	ldd	r31, Y+55	; 0x37
    152c:	80 81       	ld	r24, Z
			portEXIT_CRITICAL ();
    152e:	0f 90       	pop	r0
    1530:	0f be       	out	0x3f, r0	; 63
			
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
			// In State 3, the motor is in the off state of direct operation mode.	
			case (3):
			    
				if (motor_operator->get() == 1)
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	09 f0       	breq	.+2      	; 0x1538 <_ZN7task_md3runEv+0x106>
    1536:	3a c0       	rjmp	.+116    	; 0x15ac <_ZN7task_md3runEv+0x17a>
				{
					md->motorCCW();
    1538:	8a 89       	ldd	r24, Y+18	; 0x12
    153a:	9b 89       	ldd	r25, Y+19	; 0x13
    153c:	dc 01       	movw	r26, r24
    153e:	ed 91       	ld	r30, X+
    1540:	fc 91       	ld	r31, X
    1542:	04 80       	ldd	r0, Z+4	; 0x04
    1544:	f5 81       	ldd	r31, Z+5	; 0x05
    1546:	e0 2d       	mov	r30, r0
    1548:	19 95       	eicall
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1550:	0f 90       	pop	r0
    1552:	0f be       	out	0x3f, r0	; 63
					md->setRamp( md->thisInterruptTimer, 500, gen_max_v.get() );
    1554:	8a 89       	ldd	r24, Y+18	; 0x12
    1556:	9b 89       	ldd	r25, Y+19	; 0x13
    1558:	e0 90 39 21 	lds	r14, 0x2139	; 0x802139 <gen_max_v>
    155c:	f0 90 3a 21 	lds	r15, 0x213A	; 0x80213a <gen_max_v+0x1>
    1560:	00 91 3b 21 	lds	r16, 0x213B	; 0x80213b <gen_max_v+0x2>
    1564:	10 91 3c 21 	lds	r17, 0x213C	; 0x80213c <gen_max_v+0x3>
    1568:	fc 01       	movw	r30, r24
    156a:	64 8d       	ldd	r22, Z+28	; 0x1c
    156c:	75 8d       	ldd	r23, Z+29	; 0x1d
    156e:	24 ef       	ldi	r18, 0xF4	; 244
    1570:	31 e0       	ldi	r19, 0x01	; 1
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	50 e0       	ldi	r21, 0x00	; 0
    1576:	4e 96       	adiw	r24, 0x1e	; 30
    1578:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN6Motion15VelocityControl7setRampEP14InterruptTimermm>
					motor_on = motorOn();
    157c:	ce 01       	movw	r24, r28
    157e:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN7task_md7motorOnEv>
    1582:	8d af       	std	Y+61, r24	; 0x3d
					if (motor_on)
    1584:	88 23       	and	r24, r24
    1586:	29 f0       	breq	.+10     	; 0x1592 <_ZN7task_md3runEv+0x160>
					{
						transition_to(4);
    1588:	64 e0       	ldi	r22, 0x04	; 4
    158a:	ce 01       	movw	r24, r28
    158c:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    1590:	f4 c2       	rjmp	.+1512   	; 0x1b7a <_ZN7task_md3runEv+0x748>
					}
					else
					{
						motor_operator->put(0);
    1592:	ee a9       	ldd	r30, Y+54	; 0x36
    1594:	ff a9       	ldd	r31, Y+55	; 0x37
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	0f 92       	push	r0
			the_data = new_data;
    159c:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    159e:	0f 90       	pop	r0
    15a0:	0f be       	out	0x3f, r0	; 63
						transition_to(2);
    15a2:	62 e0       	ldi	r22, 0x02	; 2
    15a4:	ce 01       	movw	r24, r28
    15a6:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    15aa:	e7 c2       	rjmp	.+1486   	; 0x1b7a <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    15b2:	0f 90       	pop	r0
    15b4:	0f be       	out	0x3f, r0	; 63
					}
				}
				else if (motor_operator->get() == 2)
    15b6:	82 30       	cpi	r24, 0x02	; 2
    15b8:	09 f0       	breq	.+2      	; 0x15bc <_ZN7task_md3runEv+0x18a>
    15ba:	3a c0       	rjmp	.+116    	; 0x1630 <_ZN7task_md3runEv+0x1fe>
				{
					md->motorCW();
    15bc:	8a 89       	ldd	r24, Y+18	; 0x12
    15be:	9b 89       	ldd	r25, Y+19	; 0x13
    15c0:	dc 01       	movw	r26, r24
    15c2:	ed 91       	ld	r30, X+
    15c4:	fc 91       	ld	r31, X
    15c6:	02 80       	ldd	r0, Z+2	; 0x02
    15c8:	f3 81       	ldd	r31, Z+3	; 0x03
    15ca:	e0 2d       	mov	r30, r0
    15cc:	19 95       	eicall
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    15d4:	0f 90       	pop	r0
    15d6:	0f be       	out	0x3f, r0	; 63
					md->setRamp( md->thisInterruptTimer, 500, gen_max_v.get() );
    15d8:	8a 89       	ldd	r24, Y+18	; 0x12
    15da:	9b 89       	ldd	r25, Y+19	; 0x13
    15dc:	e0 90 39 21 	lds	r14, 0x2139	; 0x802139 <gen_max_v>
    15e0:	f0 90 3a 21 	lds	r15, 0x213A	; 0x80213a <gen_max_v+0x1>
    15e4:	00 91 3b 21 	lds	r16, 0x213B	; 0x80213b <gen_max_v+0x2>
    15e8:	10 91 3c 21 	lds	r17, 0x213C	; 0x80213c <gen_max_v+0x3>
    15ec:	fc 01       	movw	r30, r24
    15ee:	64 8d       	ldd	r22, Z+28	; 0x1c
    15f0:	75 8d       	ldd	r23, Z+29	; 0x1d
    15f2:	24 ef       	ldi	r18, 0xF4	; 244
    15f4:	31 e0       	ldi	r19, 0x01	; 1
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	4e 96       	adiw	r24, 0x1e	; 30
    15fc:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN6Motion15VelocityControl7setRampEP14InterruptTimermm>
					motor_on = motorOn();
    1600:	ce 01       	movw	r24, r28
    1602:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN7task_md7motorOnEv>
    1606:	8d af       	std	Y+61, r24	; 0x3d
					if (motor_on)
    1608:	88 23       	and	r24, r24
    160a:	29 f0       	breq	.+10     	; 0x1616 <_ZN7task_md3runEv+0x1e4>
					{
						transition_to(4);
    160c:	64 e0       	ldi	r22, 0x04	; 4
    160e:	ce 01       	movw	r24, r28
    1610:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    1614:	b2 c2       	rjmp	.+1380   	; 0x1b7a <_ZN7task_md3runEv+0x748>
					}	
					else
					{
						motor_operator->put(0);
    1616:	ee a9       	ldd	r30, Y+54	; 0x36
    1618:	ff a9       	ldd	r31, Y+55	; 0x37
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	0f 92       	push	r0
			the_data = new_data;
    1620:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    1622:	0f 90       	pop	r0
    1624:	0f be       	out	0x3f, r0	; 63
						transition_to(2);
    1626:	62 e0       	ldi	r22, 0x02	; 2
    1628:	ce 01       	movw	r24, r28
    162a:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    162e:	a5 c2       	rjmp	.+1354   	; 0x1b7a <_ZN7task_md3runEv+0x748>
					}	
				}
				else
				{
					transition_to(2);
    1630:	62 e0       	ldi	r22, 0x02	; 2
    1632:	ce 01       	movw	r24, r28
    1634:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    1638:	a0 c2       	rjmp	.+1344   	; 0x1b7a <_ZN7task_md3runEv+0x748>
			
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In State 4, the motor is enabled, waiting for a stop command.
			case (4):
								
				md->rampHandler();
    163a:	8a 89       	ldd	r24, Y+18	; 0x12
    163c:	9b 89       	ldd	r25, Y+19	; 0x13
    163e:	4e 96       	adiw	r24, 0x1e	; 30
    1640:	0e 94 bc 08 	call	0x1178	; 0x1178 <_ZN6Motion15VelocityControl11rampHandlerEv>
				
				if(md->get_status() == false)
    1644:	8a 89       	ldd	r24, Y+18	; 0x12
    1646:	9b 89       	ldd	r25, Y+19	; 0x13
    1648:	dc 01       	movw	r26, r24
    164a:	ed 91       	ld	r30, X+
    164c:	fc 91       	ld	r31, X
    164e:	04 88       	ldd	r0, Z+20	; 0x14
    1650:	f5 89       	ldd	r31, Z+21	; 0x15
    1652:	e0 2d       	mov	r30, r0
    1654:	19 95       	eicall
    1656:	81 11       	cpse	r24, r1
    1658:	08 c0       	rjmp	.+16     	; 0x166a <_ZN7task_md3runEv+0x238>
				{
					motor_operator->put(0);
    165a:	ee a9       	ldd	r30, Y+54	; 0x36
    165c:	ff a9       	ldd	r31, Y+55	; 0x37
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	0f 92       	push	r0
			the_data = new_data;
    1664:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    1666:	0f 90       	pop	r0
    1668:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
			temporary_copy = the_data;
    1674:	ee a9       	ldd	r30, Y+54	; 0x36
    1676:	ff a9       	ldd	r31, Y+55	; 0x37
				}
				
			    if(motor_operator->get() == 0)
    1678:	80 81       	ld	r24, Z
    167a:	81 11       	cpse	r24, r1
    167c:	42 c0       	rjmp	.+132    	; 0x1702 <_ZN7task_md3runEv+0x2d0>
				{
					md->motorOff();
    167e:	8a 89       	ldd	r24, Y+18	; 0x12
    1680:	9b 89       	ldd	r25, Y+19	; 0x13
    1682:	dc 01       	movw	r26, r24
    1684:	ed 91       	ld	r30, X+
    1686:	fc 91       	ld	r31, X
    1688:	06 80       	ldd	r0, Z+6	; 0x06
    168a:	f7 81       	ldd	r31, Z+7	; 0x07
    168c:	e0 2d       	mov	r30, r0
    168e:	19 95       	eicall
					*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    1690:	8a 89       	ldd	r24, Y+18	; 0x12
    1692:	9b 89       	ldd	r25, Y+19	; 0x13
    1694:	4e 96       	adiw	r24, 0x1e	; 30
    1696:	0e 94 77 08 	call	0x10ee	; 0x10ee <_ZN6Motion13MotionControl8getStepsEv>
    169a:	2b 01       	movw	r4, r22
    169c:	3c 01       	movw	r6, r24
    169e:	0e 81       	ldd	r16, Y+6	; 0x06
    16a0:	1f 81       	ldd	r17, Y+7	; 0x07
    16a2:	f5 01       	movw	r30, r10
    16a4:	60 81       	ld	r22, Z
    16a6:	71 81       	ldd	r23, Z+1	; 0x01
    16a8:	c8 01       	movw	r24, r16
    16aa:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    16ae:	6a e0       	ldi	r22, 0x0A	; 10
    16b0:	c8 01       	movw	r24, r16
    16b2:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    16b6:	8c 01       	movw	r16, r24
    16b8:	6a ec       	ldi	r22, 0xCA	; 202
    16ba:	76 e0       	ldi	r23, 0x06	; 6
    16bc:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    16c0:	b3 01       	movw	r22, r6
    16c2:	a2 01       	movw	r20, r4
    16c4:	c8 01       	movw	r24, r16
    16c6:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <_ZN8emstreamlsEl>
    16ca:	66 e0       	ldi	r22, 0x06	; 6
    16cc:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
					*p_serial << task_name << PMS ("S") << endl;
    16d0:	0e 81       	ldd	r16, Y+6	; 0x06
    16d2:	1f 81       	ldd	r17, Y+7	; 0x07
    16d4:	d5 01       	movw	r26, r10
    16d6:	6d 91       	ld	r22, X+
    16d8:	7c 91       	ld	r23, X
    16da:	c8 01       	movw	r24, r16
    16dc:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    16e0:	6a e0       	ldi	r22, 0x0A	; 10
    16e2:	c8 01       	movw	r24, r16
    16e4:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    16e8:	8c 01       	movw	r16, r24
    16ea:	68 ec       	ldi	r22, 0xC8	; 200
    16ec:	76 e0       	ldi	r23, 0x06	; 6
    16ee:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    16f2:	66 e0       	ldi	r22, 0x06	; 6
    16f4:	c8 01       	movw	r24, r16
    16f6:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
					transition_to(2);
    16fa:	62 e0       	ldi	r22, 0x02	; 2
    16fc:	ce 01       	movw	r24, r28
    16fe:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
				}
				
				if (++delay_counter == 5)
    1702:	bf ef       	ldi	r27, 0xFF	; 255
    1704:	cb 1a       	sub	r12, r27
    1706:	db 0a       	sbc	r13, r27
    1708:	e5 e0       	ldi	r30, 0x05	; 5
    170a:	ce 16       	cp	r12, r30
    170c:	d1 04       	cpc	r13, r1
    170e:	09 f0       	breq	.+2      	; 0x1712 <_ZN7task_md3runEv+0x2e0>
    1710:	34 c2       	rjmp	.+1128   	; 0x1b7a <_ZN7task_md3runEv+0x748>
				{
					*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    1712:	8a 89       	ldd	r24, Y+18	; 0x12
    1714:	9b 89       	ldd	r25, Y+19	; 0x13
    1716:	4e 96       	adiw	r24, 0x1e	; 30
    1718:	0e 94 77 08 	call	0x10ee	; 0x10ee <_ZN6Motion13MotionControl8getStepsEv>
    171c:	2b 01       	movw	r4, r22
    171e:	3c 01       	movw	r6, r24
    1720:	0e 81       	ldd	r16, Y+6	; 0x06
    1722:	1f 81       	ldd	r17, Y+7	; 0x07
    1724:	d5 01       	movw	r26, r10
    1726:	6d 91       	ld	r22, X+
    1728:	7c 91       	ld	r23, X
    172a:	c8 01       	movw	r24, r16
    172c:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    1730:	6a e0       	ldi	r22, 0x0A	; 10
    1732:	c8 01       	movw	r24, r16
    1734:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    1738:	8c 01       	movw	r16, r24
    173a:	63 ec       	ldi	r22, 0xC3	; 195
    173c:	76 e0       	ldi	r23, 0x06	; 6
    173e:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    1742:	b3 01       	movw	r22, r6
    1744:	a2 01       	movw	r20, r4
    1746:	c8 01       	movw	r24, r16
    1748:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <_ZN8emstreamlsEl>
    174c:	66 e0       	ldi	r22, 0x06	; 6
    174e:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
					delay_counter = 0;
    1752:	c1 2c       	mov	r12, r1
    1754:	d1 2c       	mov	r13, r1
    1756:	11 c2       	rjmp	.+1058   	; 0x1b7a <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    175e:	0f 90       	pop	r0
    1760:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In State 5, the motor is disabled, and awaits a signal from the sensor before
			// it begins calculating its operation parameters to reach the next destination.	
			case (5):
							
				if (!(coordinate_mode.get()) && !(incremental_mode.get()) && !(drawing_mode.get()))
    1762:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    1766:	81 11       	cpse	r24, r1
    1768:	17 c0       	rjmp	.+46     	; 0x1798 <_ZN7task_md3runEv+0x366>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1770:	0f 90       	pop	r0
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <incremental_mode>
    1778:	81 11       	cpse	r24, r1
    177a:	0e c0       	rjmp	.+28     	; 0x1798 <_ZN7task_md3runEv+0x366>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1782:	0f 90       	pop	r0
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <drawing_mode>
    178a:	81 11       	cpse	r24, r1
    178c:	05 c0       	rjmp	.+10     	; 0x1798 <_ZN7task_md3runEv+0x366>
				{
					transition_to(2);
    178e:	62 e0       	ldi	r22, 0x02	; 2
    1790:	ce 01       	movw	r24, r28
    1792:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    1796:	f1 c1       	rjmp	.+994    	; 0x1b7a <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    179e:	0f 90       	pop	r0
    17a0:	0f be       	out	0x3f, r0	; 63
				}	
				else if(next_node.get())
    17a2:	80 91 64 21 	lds	r24, 0x2164	; 0x802164 <next_node>
    17a6:	88 23       	and	r24, r24
    17a8:	09 f4       	brne	.+2      	; 0x17ac <_ZN7task_md3runEv+0x37a>
    17aa:	e7 c1       	rjmp	.+974    	; 0x1b7a <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    17b2:	0f 90       	pop	r0
    17b4:	0f be       	out	0x3f, r0	; 63
				{
					max_vel = gen_max_v.get();
    17b6:	80 91 39 21 	lds	r24, 0x2139	; 0x802139 <gen_max_v>
    17ba:	90 91 3a 21 	lds	r25, 0x213A	; 0x80213a <gen_max_v+0x1>
    17be:	a0 91 3b 21 	lds	r26, 0x213B	; 0x80213b <gen_max_v+0x2>
    17c2:	b0 91 3c 21 	lds	r27, 0x213C	; 0x80213c <gen_max_v+0x3>
    17c6:	f1 01       	movw	r30, r2
    17c8:	80 83       	st	Z, r24
    17ca:	91 83       	std	Z+1, r25	; 0x01
    17cc:	a2 83       	std	Z+2, r26	; 0x02
    17ce:	b3 83       	std	Z+3, r27	; 0x03
					transition_to(6);
    17d0:	66 e0       	ldi	r22, 0x06	; 6
    17d2:	ce 01       	movw	r24, r28
    17d4:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    17d8:	d0 c1       	rjmp	.+928    	; 0x1b7a <_ZN7task_md3runEv+0x748>
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In State 6, the motor is calculating how many steps it must take to reach 
			// the desired node.
			case (6):
			    
				steps = md->getSteps();
    17da:	8a 89       	ldd	r24, Y+18	; 0x12
    17dc:	9b 89       	ldd	r25, Y+19	; 0x13
    17de:	4e 96       	adiw	r24, 0x1e	; 30
    17e0:	0e 94 77 08 	call	0x10ee	; 0x10ee <_ZN6Motion13MotionControl8getStepsEv>
    17e4:	6c 8f       	std	Y+28, r22	; 0x1c
    17e6:	7d 8f       	std	Y+29, r23	; 0x1d
    17e8:	8e 8f       	std	Y+30, r24	; 0x1e
    17ea:	9f 8f       	std	Y+31, r25	; 0x1f
				step_destination = locations->get();
    17ec:	8e a1       	ldd	r24, Y+38	; 0x26
    17ee:	9f a1       	ldd	r25, Y+39	; 0x27
    17f0:	dc 01       	movw	r26, r24
    17f2:	ed 91       	ld	r30, X+
    17f4:	fc 91       	ld	r31, X
    17f6:	00 84       	ldd	r0, Z+8	; 0x08
    17f8:	f1 85       	ldd	r31, Z+9	; 0x09
    17fa:	e0 2d       	mov	r30, r0
    17fc:	19 95       	eicall
    17fe:	69 af       	std	Y+57, r22	; 0x39
    1800:	7a af       	std	Y+58, r23	; 0x3a
    1802:	8b af       	std	Y+59, r24	; 0x3b
    1804:	9c af       	std	Y+60, r25	; 0x3c
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    180c:	0f 90       	pop	r0
    180e:	0f be       	out	0x3f, r0	; 63
				if (drawing_mode.get())
    1810:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <drawing_mode>
    1814:	88 23       	and	r24, r24
    1816:	49 f1       	breq	.+82     	; 0x186a <_ZN7task_md3runEv+0x438>
				{
					max_vel = max_velocity->get();
    1818:	8e ad       	ldd	r24, Y+62	; 0x3e
    181a:	9f ad       	ldd	r25, Y+63	; 0x3f
    181c:	dc 01       	movw	r26, r24
    181e:	ed 91       	ld	r30, X+
    1820:	fc 91       	ld	r31, X
    1822:	00 84       	ldd	r0, Z+8	; 0x08
    1824:	f1 85       	ldd	r31, Z+9	; 0x09
    1826:	e0 2d       	mov	r30, r0
    1828:	19 95       	eicall
    182a:	2b 01       	movw	r4, r22
    182c:	3c 01       	movw	r6, r24
    182e:	f1 01       	movw	r30, r2
    1830:	60 83       	st	Z, r22
    1832:	71 83       	std	Z+1, r23	; 0x01
    1834:	82 83       	std	Z+2, r24	; 0x02
    1836:	93 83       	std	Z+3, r25	; 0x03
					*p_serial << task_name << PMS ("vel: ") << max_vel << endl;
    1838:	0e 81       	ldd	r16, Y+6	; 0x06
    183a:	1f 81       	ldd	r17, Y+7	; 0x07
    183c:	d5 01       	movw	r26, r10
    183e:	6d 91       	ld	r22, X+
    1840:	7c 91       	ld	r23, X
    1842:	c8 01       	movw	r24, r16
    1844:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    1848:	6a e0       	ldi	r22, 0x0A	; 10
    184a:	c8 01       	movw	r24, r16
    184c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    1850:	8c 01       	movw	r16, r24
    1852:	6d eb       	ldi	r22, 0xBD	; 189
    1854:	76 e0       	ldi	r23, 0x06	; 6
    1856:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    185a:	b3 01       	movw	r22, r6
    185c:	a2 01       	movw	r20, r4
    185e:	c8 01       	movw	r24, r16
    1860:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <_ZN8emstreamlsEm>
    1864:	66 e0       	ldi	r22, 0x06	; 6
    1866:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
				}
							
				if (steps < step_destination)
    186a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    186c:	5d 8d       	ldd	r21, Y+29	; 0x1d
    186e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1870:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1872:	89 ad       	ldd	r24, Y+57	; 0x39
    1874:	9a ad       	ldd	r25, Y+58	; 0x3a
    1876:	ab ad       	ldd	r26, Y+59	; 0x3b
    1878:	bc ad       	ldd	r27, Y+60	; 0x3c
    187a:	48 17       	cp	r20, r24
    187c:	59 07       	cpc	r21, r25
    187e:	6a 07       	cpc	r22, r26
    1880:	7b 07       	cpc	r23, r27
    1882:	04 f5       	brge	.+64     	; 0x18c4 <_ZN7task_md3runEv+0x492>
				{
					md->motorCCW();
    1884:	8a 89       	ldd	r24, Y+18	; 0x12
    1886:	9b 89       	ldd	r25, Y+19	; 0x13
    1888:	dc 01       	movw	r26, r24
    188a:	ed 91       	ld	r30, X+
    188c:	fc 91       	ld	r31, X
    188e:	04 80       	ldd	r0, Z+4	; 0x04
    1890:	f5 81       	ldd	r31, Z+5	; 0x05
    1892:	e0 2d       	mov	r30, r0
    1894:	19 95       	eicall
					md->setRamp( md->thisInterruptTimer, 500, max_vel ) ;		
    1896:	8a 89       	ldd	r24, Y+18	; 0x12
    1898:	9b 89       	ldd	r25, Y+19	; 0x13
    189a:	f1 01       	movw	r30, r2
    189c:	e0 80       	ld	r14, Z
    189e:	f1 80       	ldd	r15, Z+1	; 0x01
    18a0:	02 81       	ldd	r16, Z+2	; 0x02
    18a2:	13 81       	ldd	r17, Z+3	; 0x03
    18a4:	dc 01       	movw	r26, r24
    18a6:	5c 96       	adiw	r26, 0x1c	; 28
    18a8:	6d 91       	ld	r22, X+
    18aa:	7c 91       	ld	r23, X
    18ac:	5d 97       	sbiw	r26, 0x1d	; 29
    18ae:	24 ef       	ldi	r18, 0xF4	; 244
    18b0:	31 e0       	ldi	r19, 0x01	; 1
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	4e 96       	adiw	r24, 0x1e	; 30
    18b8:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN6Motion15VelocityControl7setRampEP14InterruptTimermm>
					motorOn();
    18bc:	ce 01       	movw	r24, r28
    18be:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN7task_md7motorOnEv>
    18c2:	24 c0       	rjmp	.+72     	; 0x190c <_ZN7task_md3runEv+0x4da>
				}
				else if (steps > step_destination)
    18c4:	84 17       	cp	r24, r20
    18c6:	95 07       	cpc	r25, r21
    18c8:	a6 07       	cpc	r26, r22
    18ca:	b7 07       	cpc	r27, r23
    18cc:	fc f4       	brge	.+62     	; 0x190c <_ZN7task_md3runEv+0x4da>
				{
					md->motorCW();
    18ce:	8a 89       	ldd	r24, Y+18	; 0x12
    18d0:	9b 89       	ldd	r25, Y+19	; 0x13
    18d2:	dc 01       	movw	r26, r24
    18d4:	ed 91       	ld	r30, X+
    18d6:	fc 91       	ld	r31, X
    18d8:	02 80       	ldd	r0, Z+2	; 0x02
    18da:	f3 81       	ldd	r31, Z+3	; 0x03
    18dc:	e0 2d       	mov	r30, r0
    18de:	19 95       	eicall
					md->setRamp( md->thisInterruptTimer, 500, max_vel );
    18e0:	8a 89       	ldd	r24, Y+18	; 0x12
    18e2:	9b 89       	ldd	r25, Y+19	; 0x13
    18e4:	f1 01       	movw	r30, r2
    18e6:	e0 80       	ld	r14, Z
    18e8:	f1 80       	ldd	r15, Z+1	; 0x01
    18ea:	02 81       	ldd	r16, Z+2	; 0x02
    18ec:	13 81       	ldd	r17, Z+3	; 0x03
    18ee:	dc 01       	movw	r26, r24
    18f0:	5c 96       	adiw	r26, 0x1c	; 28
    18f2:	6d 91       	ld	r22, X+
    18f4:	7c 91       	ld	r23, X
    18f6:	5d 97       	sbiw	r26, 0x1d	; 29
    18f8:	24 ef       	ldi	r18, 0xF4	; 244
    18fa:	31 e0       	ldi	r19, 0x01	; 1
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	4e 96       	adiw	r24, 0x1e	; 30
    1902:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN6Motion15VelocityControl7setRampEP14InterruptTimermm>
					motorOn();
    1906:	ce 01       	movw	r24, r28
    1908:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN7task_md7motorOnEv>
				}
				
				transition_to(7); 
    190c:	67 e0       	ldi	r22, 0x07	; 7
    190e:	ce 01       	movw	r24, r28
    1910:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
				
				break;
    1914:	32 c1       	rjmp	.+612    	; 0x1b7a <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    191c:	0f 90       	pop	r0
    191e:	0f be       	out	0x3f, r0	; 63
			
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In State 7, the motor is enabled until it reaches its destination.
			case (7):
			
				if (pause.get())
    1920:	80 91 61 21 	lds	r24, 0x2161	; 0x802161 <pause>
    1924:	88 23       	and	r24, r24
    1926:	69 f0       	breq	.+26     	; 0x1942 <_ZN7task_md3runEv+0x510>
				{
					md->motorOff();
    1928:	8a 89       	ldd	r24, Y+18	; 0x12
    192a:	9b 89       	ldd	r25, Y+19	; 0x13
    192c:	dc 01       	movw	r26, r24
    192e:	ed 91       	ld	r30, X+
    1930:	fc 91       	ld	r31, X
    1932:	06 80       	ldd	r0, Z+6	; 0x06
    1934:	f7 81       	ldd	r31, Z+7	; 0x07
    1936:	e0 2d       	mov	r30, r0
    1938:	19 95       	eicall
					transition_to(8);
    193a:	68 e0       	ldi	r22, 0x08	; 8
    193c:	ce 01       	movw	r24, r28
    193e:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
				}
				
				freq_hz = md->rampHandler();
    1942:	8a 89       	ldd	r24, Y+18	; 0x12
    1944:	9b 89       	ldd	r25, Y+19	; 0x13
    1946:	4e 96       	adiw	r24, 0x1e	; 30
    1948:	0e 94 bc 08 	call	0x1178	; 0x1178 <_ZN6Motion15VelocityControl11rampHandlerEv>
    194c:	f4 01       	movw	r30, r8
    194e:	60 83       	st	Z, r22
    1950:	71 83       	std	Z+1, r23	; 0x01
			    
			    if(md->get_direction() == 0)
    1952:	8a 89       	ldd	r24, Y+18	; 0x12
    1954:	9b 89       	ldd	r25, Y+19	; 0x13
    1956:	dc 01       	movw	r26, r24
    1958:	ed 91       	ld	r30, X+
    195a:	fc 91       	ld	r31, X
    195c:	06 84       	ldd	r0, Z+14	; 0x0e
    195e:	f7 85       	ldd	r31, Z+15	; 0x0f
    1960:	e0 2d       	mov	r30, r0
    1962:	19 95       	eicall
    1964:	81 11       	cpse	r24, r1
    1966:	62 c0       	rjmp	.+196    	; 0x1a2c <_ZN7task_md3runEv+0x5fa>
				{
					if(md->getSteps() >= step_destination)
    1968:	8a 89       	ldd	r24, Y+18	; 0x12
    196a:	9b 89       	ldd	r25, Y+19	; 0x13
    196c:	4e 96       	adiw	r24, 0x1e	; 30
    196e:	0e 94 77 08 	call	0x10ee	; 0x10ee <_ZN6Motion13MotionControl8getStepsEv>
    1972:	09 ad       	ldd	r16, Y+57	; 0x39
    1974:	1a ad       	ldd	r17, Y+58	; 0x3a
    1976:	2b ad       	ldd	r18, Y+59	; 0x3b
    1978:	3c ad       	ldd	r19, Y+60	; 0x3c
    197a:	60 17       	cp	r22, r16
    197c:	71 07       	cpc	r23, r17
    197e:	82 07       	cpc	r24, r18
    1980:	93 07       	cpc	r25, r19
    1982:	0c f4       	brge	.+2      	; 0x1986 <_ZN7task_md3runEv+0x554>
    1984:	c0 c0       	rjmp	.+384    	; 0x1b06 <_ZN7task_md3runEv+0x6d4>
					{
						md->motorOff();
    1986:	8a 89       	ldd	r24, Y+18	; 0x12
    1988:	9b 89       	ldd	r25, Y+19	; 0x13
    198a:	dc 01       	movw	r26, r24
    198c:	ed 91       	ld	r30, X+
    198e:	fc 91       	ld	r31, X
    1990:	06 80       	ldd	r0, Z+6	; 0x06
    1992:	f7 81       	ldd	r31, Z+7	; 0x07
    1994:	e0 2d       	mov	r30, r0
    1996:	19 95       	eicall
						*p_serial << task_name << PMS ("S") << endl;
    1998:	0e 81       	ldd	r16, Y+6	; 0x06
    199a:	1f 81       	ldd	r17, Y+7	; 0x07
    199c:	f5 01       	movw	r30, r10
    199e:	60 81       	ld	r22, Z
    19a0:	71 81       	ldd	r23, Z+1	; 0x01
    19a2:	c8 01       	movw	r24, r16
    19a4:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    19a8:	6a e0       	ldi	r22, 0x0A	; 10
    19aa:	c8 01       	movw	r24, r16
    19ac:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    19b0:	8c 01       	movw	r16, r24
    19b2:	6b eb       	ldi	r22, 0xBB	; 187
    19b4:	76 e0       	ldi	r23, 0x06	; 6
    19b6:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    19ba:	66 e0       	ldi	r22, 0x06	; 6
    19bc:	c8 01       	movw	r24, r16
    19be:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
						*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    19c2:	8a 89       	ldd	r24, Y+18	; 0x12
    19c4:	9b 89       	ldd	r25, Y+19	; 0x13
    19c6:	4e 96       	adiw	r24, 0x1e	; 30
    19c8:	0e 94 77 08 	call	0x10ee	; 0x10ee <_ZN6Motion13MotionControl8getStepsEv>
    19cc:	2b 01       	movw	r4, r22
    19ce:	3c 01       	movw	r6, r24
    19d0:	0e 81       	ldd	r16, Y+6	; 0x06
    19d2:	1f 81       	ldd	r17, Y+7	; 0x07
    19d4:	d5 01       	movw	r26, r10
    19d6:	6d 91       	ld	r22, X+
    19d8:	7c 91       	ld	r23, X
    19da:	c8 01       	movw	r24, r16
    19dc:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    19e0:	6a e0       	ldi	r22, 0x0A	; 10
    19e2:	c8 01       	movw	r24, r16
    19e4:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    19e8:	8c 01       	movw	r16, r24
    19ea:	66 eb       	ldi	r22, 0xB6	; 182
    19ec:	76 e0       	ldi	r23, 0x06	; 6
    19ee:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    19f2:	b3 01       	movw	r22, r6
    19f4:	a2 01       	movw	r20, r4
    19f6:	c8 01       	movw	r24, r16
    19f8:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <_ZN8emstreamlsEl>
    19fc:	66 e0       	ldi	r22, 0x06	; 6
    19fe:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
						motor_complete->put(true);
    1a02:	ea a9       	ldd	r30, Y+50	; 0x32
    1a04:	fb a9       	ldd	r31, Y+51	; 0x33
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	0f 92       	push	r0
			the_data = new_data;
    1a0c:	b1 e0       	ldi	r27, 0x01	; 1
    1a0e:	b0 83       	st	Z, r27
			portEXIT_CRITICAL ();
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	0f 92       	push	r0
			the_data = new_data;
    1a1a:	10 92 64 21 	sts	0x2164, r1	; 0x802164 <next_node>
			portEXIT_CRITICAL ();
    1a1e:	0f 90       	pop	r0
    1a20:	0f be       	out	0x3f, r0	; 63
						next_node.put(false);
						transition_to(5);
    1a22:	65 e0       	ldi	r22, 0x05	; 5
    1a24:	ce 01       	movw	r24, r28
    1a26:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    1a2a:	6d c0       	rjmp	.+218    	; 0x1b06 <_ZN7task_md3runEv+0x6d4>
					}
				}
				else if(md->get_direction() == 1)
    1a2c:	8a 89       	ldd	r24, Y+18	; 0x12
    1a2e:	9b 89       	ldd	r25, Y+19	; 0x13
    1a30:	dc 01       	movw	r26, r24
    1a32:	ed 91       	ld	r30, X+
    1a34:	fc 91       	ld	r31, X
    1a36:	06 84       	ldd	r0, Z+14	; 0x0e
    1a38:	f7 85       	ldd	r31, Z+15	; 0x0f
    1a3a:	e0 2d       	mov	r30, r0
    1a3c:	19 95       	eicall
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <_ZN7task_md3runEv+0x612>
    1a42:	61 c0       	rjmp	.+194    	; 0x1b06 <_ZN7task_md3runEv+0x6d4>
				{
					if(md->getSteps() <= step_destination)
    1a44:	8a 89       	ldd	r24, Y+18	; 0x12
    1a46:	9b 89       	ldd	r25, Y+19	; 0x13
    1a48:	4e 96       	adiw	r24, 0x1e	; 30
    1a4a:	0e 94 77 08 	call	0x10ee	; 0x10ee <_ZN6Motion13MotionControl8getStepsEv>
    1a4e:	09 ad       	ldd	r16, Y+57	; 0x39
    1a50:	1a ad       	ldd	r17, Y+58	; 0x3a
    1a52:	2b ad       	ldd	r18, Y+59	; 0x3b
    1a54:	3c ad       	ldd	r19, Y+60	; 0x3c
    1a56:	06 17       	cp	r16, r22
    1a58:	17 07       	cpc	r17, r23
    1a5a:	28 07       	cpc	r18, r24
    1a5c:	39 07       	cpc	r19, r25
    1a5e:	0c f4       	brge	.+2      	; 0x1a62 <_ZN7task_md3runEv+0x630>
    1a60:	52 c0       	rjmp	.+164    	; 0x1b06 <_ZN7task_md3runEv+0x6d4>
					{
						md->motorOff();
    1a62:	8a 89       	ldd	r24, Y+18	; 0x12
    1a64:	9b 89       	ldd	r25, Y+19	; 0x13
    1a66:	dc 01       	movw	r26, r24
    1a68:	ed 91       	ld	r30, X+
    1a6a:	fc 91       	ld	r31, X
    1a6c:	06 80       	ldd	r0, Z+6	; 0x06
    1a6e:	f7 81       	ldd	r31, Z+7	; 0x07
    1a70:	e0 2d       	mov	r30, r0
    1a72:	19 95       	eicall
						*p_serial << task_name << PMS ("S") << endl;
    1a74:	0e 81       	ldd	r16, Y+6	; 0x06
    1a76:	1f 81       	ldd	r17, Y+7	; 0x07
    1a78:	f5 01       	movw	r30, r10
    1a7a:	60 81       	ld	r22, Z
    1a7c:	71 81       	ldd	r23, Z+1	; 0x01
    1a7e:	c8 01       	movw	r24, r16
    1a80:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    1a84:	6a e0       	ldi	r22, 0x0A	; 10
    1a86:	c8 01       	movw	r24, r16
    1a88:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    1a8c:	8c 01       	movw	r16, r24
    1a8e:	64 eb       	ldi	r22, 0xB4	; 180
    1a90:	76 e0       	ldi	r23, 0x06	; 6
    1a92:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    1a96:	66 e0       	ldi	r22, 0x06	; 6
    1a98:	c8 01       	movw	r24, r16
    1a9a:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
						*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    1a9e:	8a 89       	ldd	r24, Y+18	; 0x12
    1aa0:	9b 89       	ldd	r25, Y+19	; 0x13
    1aa2:	4e 96       	adiw	r24, 0x1e	; 30
    1aa4:	0e 94 77 08 	call	0x10ee	; 0x10ee <_ZN6Motion13MotionControl8getStepsEv>
    1aa8:	2b 01       	movw	r4, r22
    1aaa:	3c 01       	movw	r6, r24
    1aac:	0e 81       	ldd	r16, Y+6	; 0x06
    1aae:	1f 81       	ldd	r17, Y+7	; 0x07
    1ab0:	d5 01       	movw	r26, r10
    1ab2:	6d 91       	ld	r22, X+
    1ab4:	7c 91       	ld	r23, X
    1ab6:	c8 01       	movw	r24, r16
    1ab8:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    1abc:	6a e0       	ldi	r22, 0x0A	; 10
    1abe:	c8 01       	movw	r24, r16
    1ac0:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    1ac4:	8c 01       	movw	r16, r24
    1ac6:	6f ea       	ldi	r22, 0xAF	; 175
    1ac8:	76 e0       	ldi	r23, 0x06	; 6
    1aca:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    1ace:	b3 01       	movw	r22, r6
    1ad0:	a2 01       	movw	r20, r4
    1ad2:	c8 01       	movw	r24, r16
    1ad4:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <_ZN8emstreamlsEl>
    1ad8:	66 e0       	ldi	r22, 0x06	; 6
    1ada:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
						motor_complete->put(true);
    1ade:	ea a9       	ldd	r30, Y+50	; 0x32
    1ae0:	fb a9       	ldd	r31, Y+51	; 0x33
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	0f 92       	push	r0
			the_data = new_data;
    1ae8:	b1 e0       	ldi	r27, 0x01	; 1
    1aea:	b0 83       	st	Z, r27
			portEXIT_CRITICAL ();
    1aec:	0f 90       	pop	r0
    1aee:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	0f 92       	push	r0
			the_data = new_data;
    1af6:	10 92 64 21 	sts	0x2164, r1	; 0x802164 <next_node>
			portEXIT_CRITICAL ();
    1afa:	0f 90       	pop	r0
    1afc:	0f be       	out	0x3f, r0	; 63
						next_node.put(false);
						transition_to(5);
    1afe:	65 e0       	ldi	r22, 0x05	; 5
    1b00:	ce 01       	movw	r24, r28
    1b02:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>

					}
				}
				
				if (++delay_counter == 5)
    1b06:	ef ef       	ldi	r30, 0xFF	; 255
    1b08:	ce 1a       	sub	r12, r30
    1b0a:	de 0a       	sbc	r13, r30
    1b0c:	f5 e0       	ldi	r31, 0x05	; 5
    1b0e:	cf 16       	cp	r12, r31
    1b10:	d1 04       	cpc	r13, r1
    1b12:	99 f5       	brne	.+102    	; 0x1b7a <_ZN7task_md3runEv+0x748>
				{
					*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    1b14:	8a 89       	ldd	r24, Y+18	; 0x12
    1b16:	9b 89       	ldd	r25, Y+19	; 0x13
    1b18:	4e 96       	adiw	r24, 0x1e	; 30
    1b1a:	0e 94 77 08 	call	0x10ee	; 0x10ee <_ZN6Motion13MotionControl8getStepsEv>
    1b1e:	2b 01       	movw	r4, r22
    1b20:	3c 01       	movw	r6, r24
    1b22:	0e 81       	ldd	r16, Y+6	; 0x06
    1b24:	1f 81       	ldd	r17, Y+7	; 0x07
    1b26:	d5 01       	movw	r26, r10
    1b28:	6d 91       	ld	r22, X+
    1b2a:	7c 91       	ld	r23, X
    1b2c:	c8 01       	movw	r24, r16
    1b2e:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    1b32:	6a e0       	ldi	r22, 0x0A	; 10
    1b34:	c8 01       	movw	r24, r16
    1b36:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    1b3a:	8c 01       	movw	r16, r24
    1b3c:	6a ea       	ldi	r22, 0xAA	; 170
    1b3e:	76 e0       	ldi	r23, 0x06	; 6
    1b40:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    1b44:	b3 01       	movw	r22, r6
    1b46:	a2 01       	movw	r20, r4
    1b48:	c8 01       	movw	r24, r16
    1b4a:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <_ZN8emstreamlsEl>
    1b4e:	66 e0       	ldi	r22, 0x06	; 6
    1b50:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
					//*p_serial << task_name << PMS ("freq: ") << freq_hz << endl;
					
					delay_counter = 0;
    1b54:	c1 2c       	mov	r12, r1
    1b56:	d1 2c       	mov	r13, r1
    1b58:	10 c0       	rjmp	.+32     	; 0x1b7a <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1b60:	0f 90       	pop	r0
    1b62:	0f be       	out	0x3f, r0	; 63
				
				break;	
				
			case (8):
			
				if(!(pause.get()))
    1b64:	80 91 61 21 	lds	r24, 0x2161	; 0x802161 <pause>
    1b68:	81 11       	cpse	r24, r1
    1b6a:	07 c0       	rjmp	.+14     	; 0x1b7a <_ZN7task_md3runEv+0x748>
				{
					motorOn();
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN7task_md7motorOnEv>
					transition_to(7);
    1b72:	67 e0       	ldi	r22, 0x07	; 7
    1b74:	ce 01       	movw	r24, r28
    1b76:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
				break;


		} // End switch state

		runs++;                             // Increment counter for debugging
    1b7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b7e:	a8 89       	ldd	r26, Y+16	; 0x10
    1b80:	b9 89       	ldd	r27, Y+17	; 0x11
    1b82:	01 96       	adiw	r24, 0x01	; 1
    1b84:	a1 1d       	adc	r26, r1
    1b86:	b1 1d       	adc	r27, r1
    1b88:	8e 87       	std	Y+14, r24	; 0x0e
    1b8a:	9f 87       	std	Y+15, r25	; 0x0f
    1b8c:	a8 8b       	std	Y+16, r26	; 0x10
    1b8e:	b9 8b       	std	Y+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (20));
    1b90:	64 e1       	ldi	r22, 0x14	; 20
    1b92:	70 e0       	ldi	r23, 0x00	; 0
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <vTaskDelay>
	uint16_t state_delay_counter = 0;
	

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    1b9c:	59 cc       	rjmp	.-1870   	; 0x1450 <_ZN7task_md3runEv+0x1e>

00001b9e <_ZN11task_sensor3runEv>:
/** This task interacts with the heat flux sensor in order to capture readings and relay
 *  that data to the user interface task.
 */

void task_sensor::run (void)
{
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <_ZN11task_sensor3runEv+0x6>
    1ba4:	1f 92       	push	r1
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	8c 01       	movw	r16, r24
	char char_in;                           // Character read from serial device
	time_stamp a_time;                      // Holds the time so it can be displayed
	portTickType previous_ticks;
	//float sensor_readings[sensor_sample_number.get()];
	samples_taken = 0;
    1bac:	fc 01       	movw	r30, r24
    1bae:	15 8e       	std	Z+29, r1	; 0x1d
    1bb0:	16 8e       	std	Z+30, r1	; 0x1e
    1bb2:	17 8e       	std	Z+31, r1	; 0x1f
    1bb4:	10 a2       	std	Z+32, r1	; 0x20
	sample_sum = 0;
    1bb6:	11 8e       	std	Z+25, r1	; 0x19
    1bb8:	12 8e       	std	Z+26, r1	; 0x1a
    1bba:	13 8e       	std	Z+27, r1	; 0x1b
    1bbc:	14 8e       	std	Z+28, r1	; 0x1c
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	0f 92       	push	r0
			the_data = new_data;
    1bc4:	10 92 77 21 	sts	0x2177, r1	; 0x802177 <sensor_complete>
			portEXIT_CRITICAL ();
    1bc8:	0f 90       	pop	r0
    1bca:	0f be       	out	0x3f, r0	; 63
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
			the_data = new_data;
    1bcc:	dd 24       	eor	r13, r13
    1bce:	d3 94       	inc	r13
	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
	{
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
    1bd0:	f8 01       	movw	r30, r16
    1bd2:	84 85       	ldd	r24, Z+12	; 0x0c
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <_ZN11task_sensor3runEv+0x3c>
    1bd8:	4b c0       	rjmp	.+150    	; 0x1c70 <_ZN11task_sensor3runEv+0xd2>
    1bda:	38 f0       	brcs	.+14     	; 0x1bea <_ZN11task_sensor3runEv+0x4c>
    1bdc:	82 30       	cpi	r24, 0x02	; 2
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <_ZN11task_sensor3runEv+0x44>
    1be0:	13 c1       	rjmp	.+550    	; 0x1e08 <_ZN11task_sensor3runEv+0x26a>
    1be2:	83 30       	cpi	r24, 0x03	; 3
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <_ZN11task_sensor3runEv+0x4a>
    1be6:	38 c2       	rjmp	.+1136   	; 0x2058 <_ZN11task_sensor3runEv+0x4ba>
    1be8:	df c2       	rjmp	.+1470   	; 0x21a8 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1bf0:	0f 90       	pop	r0
    1bf2:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 0, the sensor task is waiting for the device to enter a certain mode.
			case (0):
		
				//*p_serial << sbg01->get_voltage_mv() <<  endl;
				if (sensor_reading.get())
    1bf4:	80 91 72 21 	lds	r24, 0x2172	; 0x802172 <sensor_reading>
    1bf8:	88 23       	and	r24, r24
    1bfa:	71 f0       	breq	.+28     	; 0x1c18 <_ZN11task_sensor3runEv+0x7a>
				{
					sample_sum = 0;
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	11 8e       	std	Z+25, r1	; 0x19
    1c00:	12 8e       	std	Z+26, r1	; 0x1a
    1c02:	13 8e       	std	Z+27, r1	; 0x1b
    1c04:	14 8e       	std	Z+28, r1	; 0x1c
					samples_taken = 0;
    1c06:	15 8e       	std	Z+29, r1	; 0x1d
    1c08:	16 8e       	std	Z+30, r1	; 0x1e
    1c0a:	17 8e       	std	Z+31, r1	; 0x1f
    1c0c:	10 a2       	std	Z+32, r1	; 0x20
					transition_to(3);
    1c0e:	63 e0       	ldi	r22, 0x03	; 3
    1c10:	c8 01       	movw	r24, r16
    1c12:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    1c16:	c8 c2       	rjmp	.+1424   	; 0x21a8 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1c1e:	0f 90       	pop	r0
    1c20:	0f be       	out	0x3f, r0	; 63
				}
				else if(coordinate_mode.get() || incremental_mode.get() || drawing_mode.get())
    1c22:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    1c26:	81 11       	cpse	r24, r1
    1c28:	13 c0       	rjmp	.+38     	; 0x1c50 <_ZN11task_sensor3runEv+0xb2>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1c30:	0f 90       	pop	r0
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <incremental_mode>
    1c38:	81 11       	cpse	r24, r1
    1c3a:	0a c0       	rjmp	.+20     	; 0x1c50 <_ZN11task_sensor3runEv+0xb2>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1c42:	0f 90       	pop	r0
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <drawing_mode>
    1c4a:	88 23       	and	r24, r24
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <_ZN11task_sensor3runEv+0xb2>
    1c4e:	ac c2       	rjmp	.+1368   	; 0x21a8 <_ZN11task_sensor3runEv+0x60a>
				{
					sample_sum = 0;
    1c50:	f8 01       	movw	r30, r16
    1c52:	11 8e       	std	Z+25, r1	; 0x19
    1c54:	12 8e       	std	Z+26, r1	; 0x1a
    1c56:	13 8e       	std	Z+27, r1	; 0x1b
    1c58:	14 8e       	std	Z+28, r1	; 0x1c
					samples_taken = 0;
    1c5a:	15 8e       	std	Z+29, r1	; 0x1d
    1c5c:	16 8e       	std	Z+30, r1	; 0x1e
    1c5e:	17 8e       	std	Z+31, r1	; 0x1f
    1c60:	10 a2       	std	Z+32, r1	; 0x20
					current_node = 0;
    1c62:	15 8a       	std	Z+21, r1	; 0x15
    1c64:	16 8a       	std	Z+22, r1	; 0x16
					transition_to(1);
    1c66:	6d 2d       	mov	r22, r13
    1c68:	c8 01       	movw	r24, r16
    1c6a:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    1c6e:	9c c2       	rjmp	.+1336   	; 0x21a8 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1c76:	0f 90       	pop	r0
    1c78:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 1, the device is in coordinate mode, so the sensor will only take readings
			// after the set delay time has elapsed while the sensor is in the proper position.
			case (1):
			
			if(xmotor_complete.get() && ymotor_complete.get() && zmotor_complete.get())
    1c7a:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <xmotor_complete>
    1c7e:	88 23       	and	r24, r24
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <_ZN11task_sensor3runEv+0xe6>
    1c82:	92 c2       	rjmp	.+1316   	; 0x21a8 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1c8a:	0f 90       	pop	r0
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	80 91 79 21 	lds	r24, 0x2179	; 0x802179 <ymotor_complete>
    1c92:	88 23       	and	r24, r24
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <_ZN11task_sensor3runEv+0xfa>
    1c96:	88 c2       	rjmp	.+1296   	; 0x21a8 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1c9e:	0f 90       	pop	r0
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	80 91 78 21 	lds	r24, 0x2178	; 0x802178 <zmotor_complete>
    1ca6:	88 23       	and	r24, r24
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <_ZN11task_sensor3runEv+0x10e>
    1caa:	7e c2       	rjmp	.+1276   	; 0x21a8 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1cb2:	0f 90       	pop	r0
    1cb4:	0f be       	out	0x3f, r0	; 63
			{
				if (incremental_mode.get())
    1cb6:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <incremental_mode>
    1cba:	88 23       	and	r24, r24
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <_ZN11task_sensor3runEv+0x122>
    1cbe:	2f c0       	rjmp	.+94     	; 0x1d1e <_ZN11task_sensor3runEv+0x180>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	0f 92       	push	r0
			the_data = new_data;
    1cc6:	10 92 f3 20 	sts	0x20F3, r1	; 0x8020f3 <incremental_mode>
			portEXIT_CRITICAL ();
    1cca:	0f 90       	pop	r0
    1ccc:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	0f 92       	push	r0
			the_data = new_data;
    1cd4:	d0 92 64 21 	sts	0x2164, r13	; 0x802164 <next_node>
			portEXIT_CRITICAL ();
    1cd8:	0f 90       	pop	r0
    1cda:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	0f 92       	push	r0
			the_data = new_data;
    1ce2:	10 92 72 21 	sts	0x2172, r1	; 0x802172 <sensor_reading>
			portEXIT_CRITICAL ();
    1ce6:	0f 90       	pop	r0
    1ce8:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	0f 92       	push	r0
			the_data = new_data;
    1cf0:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <xmotor_complete>
			portEXIT_CRITICAL ();
    1cf4:	0f 90       	pop	r0
    1cf6:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	0f 92       	push	r0
			the_data = new_data;
    1cfe:	10 92 79 21 	sts	0x2179, r1	; 0x802179 <ymotor_complete>
			portEXIT_CRITICAL ();
    1d02:	0f 90       	pop	r0
    1d04:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	0f 92       	push	r0
			the_data = new_data;
    1d0c:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <zmotor_complete>
			portEXIT_CRITICAL ();
    1d10:	0f 90       	pop	r0
    1d12:	0f be       	out	0x3f, r0	; 63
					next_node.put(true);
					sensor_reading.put(false);
					xmotor_complete.put(false);
					ymotor_complete.put(false);
					zmotor_complete.put(false);
					transition_to(0);
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	c8 01       	movw	r24, r16
    1d18:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    1d1c:	45 c2       	rjmp	.+1162   	; 0x21a8 <_ZN11task_sensor3runEv+0x60a>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	0f 92       	push	r0
			the_data = new_data;
    1d24:	d0 92 72 21 	sts	0x2172, r13	; 0x802172 <sensor_reading>
			portEXIT_CRITICAL ();
    1d28:	0f 90       	pop	r0
    1d2a:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	0f 92       	push	r0
			temporary_copy = the_data;
    1d32:	40 90 69 21 	lds	r4, 0x2169	; 0x802169 <sensor_delay>
    1d36:	50 90 6a 21 	lds	r5, 0x216A	; 0x80216a <sensor_delay+0x1>
    1d3a:	60 90 6b 21 	lds	r6, 0x216B	; 0x80216b <sensor_delay+0x2>
    1d3e:	70 90 6c 21 	lds	r7, 0x216C	; 0x80216c <sensor_delay+0x3>
			portEXIT_CRITICAL ();
    1d42:	0f 90       	pop	r0
    1d44:	0f be       	out	0x3f, r0	; 63
				}
				else
				{
					sensor_reading.put(true);
					*p_serial <<  PMS ("Sensor Reading ") << ++current_node << " (Delay = " << sensor_delay.get() << " ms)" << endl;
    1d46:	f8 01       	movw	r30, r16
    1d48:	e5 88       	ldd	r14, Z+21	; 0x15
    1d4a:	f6 88       	ldd	r15, Z+22	; 0x16
    1d4c:	ff ef       	ldi	r31, 0xFF	; 255
    1d4e:	ef 1a       	sub	r14, r31
    1d50:	ff 0a       	sbc	r15, r31
    1d52:	f8 01       	movw	r30, r16
    1d54:	e5 8a       	std	Z+21, r14	; 0x15
    1d56:	f6 8a       	std	Z+22, r15	; 0x16
    1d58:	6a e0       	ldi	r22, 0x0A	; 10
    1d5a:	86 81       	ldd	r24, Z+6	; 0x06
    1d5c:	97 81       	ldd	r25, Z+7	; 0x07
    1d5e:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    1d62:	5c 01       	movw	r10, r24
    1d64:	68 e0       	ldi	r22, 0x08	; 8
    1d66:	77 e0       	ldi	r23, 0x07	; 7
    1d68:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    1d6c:	b7 01       	movw	r22, r14
    1d6e:	c5 01       	movw	r24, r10
    1d70:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <_ZN8emstreamlsEj>
    1d74:	7c 01       	movw	r14, r24
    1d76:	6f e0       	ldi	r22, 0x0F	; 15
    1d78:	70 e2       	ldi	r23, 0x20	; 32
    1d7a:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    1d7e:	b3 01       	movw	r22, r6
    1d80:	a2 01       	movw	r20, r4
    1d82:	c7 01       	movw	r24, r14
    1d84:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <_ZN8emstreamlsEm>
    1d88:	7c 01       	movw	r14, r24
    1d8a:	6a e1       	ldi	r22, 0x1A	; 26
    1d8c:	70 e2       	ldi	r23, 0x20	; 32
    1d8e:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    1d92:	66 e0       	ldi	r22, 0x06	; 6
    1d94:	c7 01       	movw	r24, r14
    1d96:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
					node++;
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	82 89       	ldd	r24, Z+18	; 0x12
    1d9e:	8f 5f       	subi	r24, 0xFF	; 255
    1da0:	82 8b       	std	Z+18, r24	; 0x12
					previous_ticks = xTaskGetTickCount();
    1da2:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <xTaskGetTickCount>
    1da6:	69 83       	std	Y+1, r22	; 0x01
    1da8:	7a 83       	std	Y+2, r23	; 0x02
    1daa:	8b 83       	std	Y+3, r24	; 0x03
    1dac:	9c 83       	std	Y+4, r25	; 0x04
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1db4:	0f 90       	pop	r0
    1db6:	0f be       	out	0x3f, r0	; 63
		 *                    delay so as to get precise, regular timing
		 *  @param milliseconds The duration of the delay interval in milliseconds
		 */
		void delay_from_to_ms (portTickType& from_ticks, portTickType milliseconds)
		{
			portTickType interval = configMS_TO_TICKS (milliseconds);
    1db8:	20 91 69 21 	lds	r18, 0x2169	; 0x802169 <sensor_delay>
    1dbc:	30 91 6a 21 	lds	r19, 0x216A	; 0x80216a <sensor_delay+0x1>
    1dc0:	40 91 6b 21 	lds	r20, 0x216B	; 0x80216b <sensor_delay+0x2>
    1dc4:	50 91 6c 21 	lds	r21, 0x216C	; 0x80216c <sensor_delay+0x3>
    1dc8:	a8 ee       	ldi	r26, 0xE8	; 232
    1dca:	b3 e0       	ldi	r27, 0x03	; 3
    1dcc:	0e 94 8e 34 	call	0x691c	; 0x691c <__muluhisi3>
    1dd0:	68 3e       	cpi	r22, 0xE8	; 232
    1dd2:	f3 e0       	ldi	r31, 0x03	; 3
    1dd4:	7f 07       	cpc	r23, r31
    1dd6:	81 05       	cpc	r24, r1
    1dd8:	91 05       	cpc	r25, r1
    1dda:	48 f0       	brcs	.+18     	; 0x1dee <_ZN11task_sensor3runEv+0x250>
    1ddc:	28 ee       	ldi	r18, 0xE8	; 232
    1dde:	33 e0       	ldi	r19, 0x03	; 3
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	50 e0       	ldi	r21, 0x00	; 0
    1de4:	0e 94 55 34 	call	0x68aa	; 0x68aa <__udivmodsi4>
    1de8:	ba 01       	movw	r22, r20
    1dea:	a9 01       	movw	r20, r18
    1dec:	04 c0       	rjmp	.+8      	; 0x1df6 <_ZN11task_sensor3runEv+0x258>
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	50 e0       	ldi	r21, 0x00	; 0
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	70 e0       	ldi	r23, 0x00	; 0
			vTaskDelayUntil (&from_ticks, interval);
    1df6:	ce 01       	movw	r24, r28
    1df8:	01 96       	adiw	r24, 0x01	; 1
    1dfa:	0e 94 34 27 	call	0x4e68	; 0x4e68 <vTaskDelayUntil>
					delay_from_to_ms(previous_ticks, sensor_delay.get());
					transition_to(2);
    1dfe:	62 e0       	ldi	r22, 0x02	; 2
    1e00:	c8 01       	movw	r24, r16
    1e02:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    1e06:	d0 c1       	rjmp	.+928    	; 0x21a8 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	0f 92       	push	r0
			temporary_copy = the_data;
    1e0e:	60 91 6e 21 	lds	r22, 0x216E	; 0x80216e <sensor_sample_number>
    1e12:	70 91 6f 21 	lds	r23, 0x216F	; 0x80216f <sensor_sample_number+0x1>
    1e16:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <sensor_sample_number+0x2>
    1e1a:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    1e1e:	0f 90       	pop	r0
    1e20:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 3, the device has waited for the heat flux gage to get a steady reading, and will
			// now take a number of samples to be averaged and then sent back to the interface.
			case (2):
									
			if(samples_taken < sensor_sample_number.get())
    1e22:	f8 01       	movw	r30, r16
    1e24:	45 8c       	ldd	r4, Z+29	; 0x1d
    1e26:	56 8c       	ldd	r5, Z+30	; 0x1e
    1e28:	67 8c       	ldd	r6, Z+31	; 0x1f
    1e2a:	70 a0       	ldd	r7, Z+32	; 0x20
    1e2c:	46 16       	cp	r4, r22
    1e2e:	57 06       	cpc	r5, r23
    1e30:	68 06       	cpc	r6, r24
    1e32:	79 06       	cpc	r7, r25
    1e34:	f0 f4       	brcc	.+60     	; 0x1e72 <_ZN11task_sensor3runEv+0x2d4>
			{
				//sensor_readings[samples_taken] = sbg01->get_voltage_mv();
				sample_sum += sbg01->get_voltage_mv();
    1e36:	83 89       	ldd	r24, Z+19	; 0x13
    1e38:	94 89       	ldd	r25, Z+20	; 0x14
    1e3a:	0e 94 23 08 	call	0x1046	; 0x1046 <_ZN5SBG0114get_voltage_mvEv>
    1e3e:	9b 01       	movw	r18, r22
    1e40:	ac 01       	movw	r20, r24
    1e42:	f8 01       	movw	r30, r16
    1e44:	61 8d       	ldd	r22, Z+25	; 0x19
    1e46:	72 8d       	ldd	r23, Z+26	; 0x1a
    1e48:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e4a:	94 8d       	ldd	r25, Z+28	; 0x1c
    1e4c:	0e 94 3d 32 	call	0x647a	; 0x647a <__addsf3>
    1e50:	f8 01       	movw	r30, r16
    1e52:	61 8f       	std	Z+25, r22	; 0x19
    1e54:	72 8f       	std	Z+26, r23	; 0x1a
    1e56:	83 8f       	std	Z+27, r24	; 0x1b
    1e58:	94 8f       	std	Z+28, r25	; 0x1c
				samples_taken++;
    1e5a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e5c:	96 8d       	ldd	r25, Z+30	; 0x1e
    1e5e:	a7 8d       	ldd	r26, Z+31	; 0x1f
    1e60:	b0 a1       	ldd	r27, Z+32	; 0x20
    1e62:	01 96       	adiw	r24, 0x01	; 1
    1e64:	a1 1d       	adc	r26, r1
    1e66:	b1 1d       	adc	r27, r1
    1e68:	85 8f       	std	Z+29, r24	; 0x1d
    1e6a:	96 8f       	std	Z+30, r25	; 0x1e
    1e6c:	a7 8f       	std	Z+31, r26	; 0x1f
    1e6e:	b0 a3       	std	Z+32, r27	; 0x20
    1e70:	9b c1       	rjmp	.+822    	; 0x21a8 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1e78:	0f 90       	pop	r0
    1e7a:	0f be       	out	0x3f, r0	; 63
			}
			else
			{
				heat_flux.put(sample_sum/sensor_sample_number.get());
    1e7c:	0e 94 4a 33 	call	0x6694	; 0x6694 <__floatunsisf>
    1e80:	9b 01       	movw	r18, r22
    1e82:	ac 01       	movw	r20, r24
    1e84:	f8 01       	movw	r30, r16
    1e86:	61 8d       	ldd	r22, Z+25	; 0x19
    1e88:	72 8d       	ldd	r23, Z+26	; 0x1a
    1e8a:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e8c:	94 8d       	ldd	r25, Z+28	; 0x1c
    1e8e:	0e 94 a9 32 	call	0x6552	; 0x6552 <__divsf3>
    1e92:	2b 01       	movw	r4, r22
    1e94:	3c 01       	movw	r6, r24
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	0f 92       	push	r0
			the_data = new_data;
    1e9c:	60 93 73 21 	sts	0x2173, r22	; 0x802173 <heat_flux>
    1ea0:	70 93 74 21 	sts	0x2174, r23	; 0x802174 <heat_flux+0x1>
    1ea4:	80 93 75 21 	sts	0x2175, r24	; 0x802175 <heat_flux+0x2>
    1ea8:	90 93 76 21 	sts	0x2176, r25	; 0x802176 <heat_flux+0x3>
			portEXIT_CRITICAL ();
    1eac:	0f 90       	pop	r0
    1eae:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1eb6:	0f 90       	pop	r0
    1eb8:	0f be       	out	0x3f, r0	; 63
				*p_serial << PMS ("HF:") << heat_flux.get()*6.289 << endl;
    1eba:	6a e0       	ldi	r22, 0x0A	; 10
    1ebc:	f8 01       	movw	r30, r16
    1ebe:	86 81       	ldd	r24, Z+6	; 0x06
    1ec0:	97 81       	ldd	r25, Z+7	; 0x07
    1ec2:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    1ec6:	7c 01       	movw	r14, r24
    1ec8:	64 e0       	ldi	r22, 0x04	; 4
    1eca:	77 e0       	ldi	r23, 0x07	; 7
    1ecc:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    1ed0:	2d e7       	ldi	r18, 0x7D	; 125
    1ed2:	3f e3       	ldi	r19, 0x3F	; 63
    1ed4:	49 ec       	ldi	r20, 0xC9	; 201
    1ed6:	50 e4       	ldi	r21, 0x40	; 64
    1ed8:	c3 01       	movw	r24, r6
    1eda:	b2 01       	movw	r22, r4
    1edc:	0e 94 d8 33 	call	0x67b0	; 0x67b0 <__mulsf3>
    1ee0:	ab 01       	movw	r20, r22
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	c7 01       	movw	r24, r14
    1ee6:	0e 94 67 2d 	call	0x5ace	; 0x5ace <_ZN8emstreamlsEd>
    1eea:	66 e0       	ldi	r22, 0x06	; 6
    1eec:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	0f 92       	push	r0
			temporary_copy = the_data;
    1ef6:	40 90 73 21 	lds	r4, 0x2173	; 0x802173 <heat_flux>
    1efa:	50 90 74 21 	lds	r5, 0x2174	; 0x802174 <heat_flux+0x1>
    1efe:	60 90 75 21 	lds	r6, 0x2175	; 0x802175 <heat_flux+0x2>
    1f02:	70 90 76 21 	lds	r7, 0x2176	; 0x802176 <heat_flux+0x3>
			portEXIT_CRITICAL ();
    1f06:	0f 90       	pop	r0
    1f08:	0f be       	out	0x3f, r0	; 63
				*p_serial << PMS ("mV:") << heat_flux.get() << endl;
    1f0a:	6a e0       	ldi	r22, 0x0A	; 10
    1f0c:	f8 01       	movw	r30, r16
    1f0e:	86 81       	ldd	r24, Z+6	; 0x06
    1f10:	97 81       	ldd	r25, Z+7	; 0x07
    1f12:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    1f16:	7c 01       	movw	r14, r24
    1f18:	60 e0       	ldi	r22, 0x00	; 0
    1f1a:	77 e0       	ldi	r23, 0x07	; 7
    1f1c:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    1f20:	b3 01       	movw	r22, r6
    1f22:	a2 01       	movw	r20, r4
    1f24:	c7 01       	movw	r24, r14
    1f26:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <_ZN8emstreamlsEf>
    1f2a:	66 e0       	ldi	r22, 0x06	; 6
    1f2c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
				//*p_serial << PMS ("Sample std dev: ") << get_std_dev(heat_flux.get(), sensor_sample_number.get(), sensor_readings) << endl;
				sample_sum = 0;
    1f30:	f8 01       	movw	r30, r16
    1f32:	11 8e       	std	Z+25, r1	; 0x19
    1f34:	12 8e       	std	Z+26, r1	; 0x1a
    1f36:	13 8e       	std	Z+27, r1	; 0x1b
    1f38:	14 8e       	std	Z+28, r1	; 0x1c
				samples_taken = 0;
    1f3a:	15 8e       	std	Z+29, r1	; 0x1d
    1f3c:	16 8e       	std	Z+30, r1	; 0x1e
    1f3e:	17 8e       	std	Z+31, r1	; 0x1f
    1f40:	10 a2       	std	Z+32, r1	; 0x20
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	f8 94       	cli
    1f46:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1f48:	0f 90       	pop	r0
    1f4a:	0f be       	out	0x3f, r0	; 63
				if (current_node < total_nodes.get())
    1f4c:	20 91 62 21 	lds	r18, 0x2162	; 0x802162 <total_nodes>
    1f50:	30 91 63 21 	lds	r19, 0x2163	; 0x802163 <total_nodes+0x1>
    1f54:	85 89       	ldd	r24, Z+21	; 0x15
    1f56:	96 89       	ldd	r25, Z+22	; 0x16
    1f58:	82 17       	cp	r24, r18
    1f5a:	93 07       	cpc	r25, r19
    1f5c:	08 f0       	brcs	.+2      	; 0x1f60 <_ZN11task_sensor3runEv+0x3c2>
    1f5e:	28 c0       	rjmp	.+80     	; 0x1fb0 <_ZN11task_sensor3runEv+0x412>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	0f 92       	push	r0
			the_data = new_data;
    1f66:	d0 92 64 21 	sts	0x2164, r13	; 0x802164 <next_node>
			portEXIT_CRITICAL ();
    1f6a:	0f 90       	pop	r0
    1f6c:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	0f 92       	push	r0
			the_data = new_data;
    1f74:	10 92 72 21 	sts	0x2172, r1	; 0x802172 <sensor_reading>
			portEXIT_CRITICAL ();
    1f78:	0f 90       	pop	r0
    1f7a:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	0f 92       	push	r0
			the_data = new_data;
    1f82:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <xmotor_complete>
			portEXIT_CRITICAL ();
    1f86:	0f 90       	pop	r0
    1f88:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	0f 92       	push	r0
			the_data = new_data;
    1f90:	10 92 79 21 	sts	0x2179, r1	; 0x802179 <ymotor_complete>
			portEXIT_CRITICAL ();
    1f94:	0f 90       	pop	r0
    1f96:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	0f 92       	push	r0
			the_data = new_data;
    1f9e:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <zmotor_complete>
			portEXIT_CRITICAL ();
    1fa2:	0f 90       	pop	r0
    1fa4:	0f be       	out	0x3f, r0	; 63
					next_node.put(true);
					sensor_reading.put(false);
					xmotor_complete.put(false);
					ymotor_complete.put(false);
					zmotor_complete.put(false);
					transition_to(1);
    1fa6:	6d 2d       	mov	r22, r13
    1fa8:	c8 01       	movw	r24, r16
    1faa:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    1fae:	fc c0       	rjmp	.+504    	; 0x21a8 <_ZN11task_sensor3runEv+0x60a>
				}
				else
				{
					*p_serial << PMS ("Routine complete.") << endl;	
    1fb0:	6a e0       	ldi	r22, 0x0A	; 10
    1fb2:	f8 01       	movw	r30, r16
    1fb4:	86 81       	ldd	r24, Z+6	; 0x06
    1fb6:	97 81       	ldd	r25, Z+7	; 0x07
    1fb8:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    1fbc:	7c 01       	movw	r14, r24
    1fbe:	6e ee       	ldi	r22, 0xEE	; 238
    1fc0:	76 e0       	ldi	r23, 0x06	; 6
    1fc2:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    1fc6:	66 e0       	ldi	r22, 0x06	; 6
    1fc8:	c7 01       	movw	r24, r14
    1fca:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
					transition_to(0);
    1fce:	60 e0       	ldi	r22, 0x00	; 0
    1fd0:	c8 01       	movw	r24, r16
    1fd2:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	0f 92       	push	r0
			the_data = new_data;
    1fdc:	10 92 f5 20 	sts	0x20F5, r1	; 0x8020f5 <coordinate_mode>
			portEXIT_CRITICAL ();
    1fe0:	0f 90       	pop	r0
    1fe2:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	0f 92       	push	r0
			the_data = new_data;
    1fea:	10 92 3d 21 	sts	0x213D, r1	; 0x80213d <drawing_mode>
			portEXIT_CRITICAL ();
    1fee:	0f 90       	pop	r0
    1ff0:	0f be       	out	0x3f, r0	; 63
					coordinate_mode.put(false);
					drawing_mode.put(false);
					*p_serial << PMS ("C") << endl;
    1ff2:	6a e0       	ldi	r22, 0x0A	; 10
    1ff4:	f8 01       	movw	r30, r16
    1ff6:	86 81       	ldd	r24, Z+6	; 0x06
    1ff8:	97 81       	ldd	r25, Z+7	; 0x07
    1ffa:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    1ffe:	7c 01       	movw	r14, r24
    2000:	6c ee       	ldi	r22, 0xEC	; 236
    2002:	76 e0       	ldi	r23, 0x06	; 6
    2004:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2008:	66 e0       	ldi	r22, 0x06	; 6
    200a:	c7 01       	movw	r24, r14
    200c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	0f 92       	push	r0
			the_data = new_data;
    2016:	10 92 64 21 	sts	0x2164, r1	; 0x802164 <next_node>
			portEXIT_CRITICAL ();
    201a:	0f 90       	pop	r0
    201c:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	0f 92       	push	r0
			the_data = new_data;
    2024:	10 92 72 21 	sts	0x2172, r1	; 0x802172 <sensor_reading>
			portEXIT_CRITICAL ();
    2028:	0f 90       	pop	r0
    202a:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	0f 92       	push	r0
			the_data = new_data;
    2032:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <xmotor_complete>
			portEXIT_CRITICAL ();
    2036:	0f 90       	pop	r0
    2038:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	0f 92       	push	r0
			the_data = new_data;
    2040:	10 92 79 21 	sts	0x2179, r1	; 0x802179 <ymotor_complete>
			portEXIT_CRITICAL ();
    2044:	0f 90       	pop	r0
    2046:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	0f 92       	push	r0
			the_data = new_data;
    204e:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <zmotor_complete>
			portEXIT_CRITICAL ();
    2052:	0f 90       	pop	r0
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	a8 c0       	rjmp	.+336    	; 0x21a8 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	0f 92       	push	r0
			temporary_copy = the_data;
    205e:	60 91 6e 21 	lds	r22, 0x216E	; 0x80216e <sensor_sample_number>
    2062:	70 91 6f 21 	lds	r23, 0x216F	; 0x80216f <sensor_sample_number+0x1>
    2066:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <sensor_sample_number+0x2>
    206a:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    206e:	0f 90       	pop	r0
    2070:	0f be       	out	0x3f, r0	; 63
			// In state 4, the interface has requested a sensor reading. The ADC will sample
			// a set number of readings and then take the average and send the result back
			// over serial.
			case (3):
			
			if(samples_taken < sensor_sample_number.get())
    2072:	f8 01       	movw	r30, r16
    2074:	45 8c       	ldd	r4, Z+29	; 0x1d
    2076:	56 8c       	ldd	r5, Z+30	; 0x1e
    2078:	67 8c       	ldd	r6, Z+31	; 0x1f
    207a:	70 a0       	ldd	r7, Z+32	; 0x20
    207c:	46 16       	cp	r4, r22
    207e:	57 06       	cpc	r5, r23
    2080:	68 06       	cpc	r6, r24
    2082:	79 06       	cpc	r7, r25
    2084:	f0 f4       	brcc	.+60     	; 0x20c2 <_ZN11task_sensor3runEv+0x524>
			{
				sample_sum += sbg01->get_voltage_mv();
    2086:	83 89       	ldd	r24, Z+19	; 0x13
    2088:	94 89       	ldd	r25, Z+20	; 0x14
    208a:	0e 94 23 08 	call	0x1046	; 0x1046 <_ZN5SBG0114get_voltage_mvEv>
    208e:	9b 01       	movw	r18, r22
    2090:	ac 01       	movw	r20, r24
    2092:	f8 01       	movw	r30, r16
    2094:	61 8d       	ldd	r22, Z+25	; 0x19
    2096:	72 8d       	ldd	r23, Z+26	; 0x1a
    2098:	83 8d       	ldd	r24, Z+27	; 0x1b
    209a:	94 8d       	ldd	r25, Z+28	; 0x1c
    209c:	0e 94 3d 32 	call	0x647a	; 0x647a <__addsf3>
    20a0:	f8 01       	movw	r30, r16
    20a2:	61 8f       	std	Z+25, r22	; 0x19
    20a4:	72 8f       	std	Z+26, r23	; 0x1a
    20a6:	83 8f       	std	Z+27, r24	; 0x1b
    20a8:	94 8f       	std	Z+28, r25	; 0x1c
				samples_taken++;
    20aa:	85 8d       	ldd	r24, Z+29	; 0x1d
    20ac:	96 8d       	ldd	r25, Z+30	; 0x1e
    20ae:	a7 8d       	ldd	r26, Z+31	; 0x1f
    20b0:	b0 a1       	ldd	r27, Z+32	; 0x20
    20b2:	01 96       	adiw	r24, 0x01	; 1
    20b4:	a1 1d       	adc	r26, r1
    20b6:	b1 1d       	adc	r27, r1
    20b8:	85 8f       	std	Z+29, r24	; 0x1d
    20ba:	96 8f       	std	Z+30, r25	; 0x1e
    20bc:	a7 8f       	std	Z+31, r26	; 0x1f
    20be:	b0 a3       	std	Z+32, r27	; 0x20
    20c0:	73 c0       	rjmp	.+230    	; 0x21a8 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    20c8:	0f 90       	pop	r0
    20ca:	0f be       	out	0x3f, r0	; 63
			}
			else
			{
				heat_flux.put(sample_sum/sensor_sample_number.get());
    20cc:	0e 94 4a 33 	call	0x6694	; 0x6694 <__floatunsisf>
    20d0:	9b 01       	movw	r18, r22
    20d2:	ac 01       	movw	r20, r24
    20d4:	f8 01       	movw	r30, r16
    20d6:	61 8d       	ldd	r22, Z+25	; 0x19
    20d8:	72 8d       	ldd	r23, Z+26	; 0x1a
    20da:	83 8d       	ldd	r24, Z+27	; 0x1b
    20dc:	94 8d       	ldd	r25, Z+28	; 0x1c
    20de:	0e 94 a9 32 	call	0x6552	; 0x6552 <__divsf3>
    20e2:	2b 01       	movw	r4, r22
    20e4:	3c 01       	movw	r6, r24
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	0f 92       	push	r0
			the_data = new_data;
    20ec:	60 93 73 21 	sts	0x2173, r22	; 0x802173 <heat_flux>
    20f0:	70 93 74 21 	sts	0x2174, r23	; 0x802174 <heat_flux+0x1>
    20f4:	80 93 75 21 	sts	0x2175, r24	; 0x802175 <heat_flux+0x2>
    20f8:	90 93 76 21 	sts	0x2176, r25	; 0x802176 <heat_flux+0x3>
			portEXIT_CRITICAL ();
    20fc:	0f 90       	pop	r0
    20fe:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    2106:	0f 90       	pop	r0
    2108:	0f be       	out	0x3f, r0	; 63
				*p_serial << PMS ("HF:") << heat_flux.get()*6.289 << endl;
    210a:	6a e0       	ldi	r22, 0x0A	; 10
    210c:	f8 01       	movw	r30, r16
    210e:	86 81       	ldd	r24, Z+6	; 0x06
    2110:	97 81       	ldd	r25, Z+7	; 0x07
    2112:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2116:	7c 01       	movw	r14, r24
    2118:	68 ee       	ldi	r22, 0xE8	; 232
    211a:	76 e0       	ldi	r23, 0x06	; 6
    211c:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2120:	2d e7       	ldi	r18, 0x7D	; 125
    2122:	3f e3       	ldi	r19, 0x3F	; 63
    2124:	49 ec       	ldi	r20, 0xC9	; 201
    2126:	50 e4       	ldi	r21, 0x40	; 64
    2128:	c3 01       	movw	r24, r6
    212a:	b2 01       	movw	r22, r4
    212c:	0e 94 d8 33 	call	0x67b0	; 0x67b0 <__mulsf3>
    2130:	ab 01       	movw	r20, r22
    2132:	bc 01       	movw	r22, r24
    2134:	c7 01       	movw	r24, r14
    2136:	0e 94 67 2d 	call	0x5ace	; 0x5ace <_ZN8emstreamlsEd>
    213a:	66 e0       	ldi	r22, 0x06	; 6
    213c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	0f 92       	push	r0
			temporary_copy = the_data;
    2146:	40 90 73 21 	lds	r4, 0x2173	; 0x802173 <heat_flux>
    214a:	50 90 74 21 	lds	r5, 0x2174	; 0x802174 <heat_flux+0x1>
    214e:	60 90 75 21 	lds	r6, 0x2175	; 0x802175 <heat_flux+0x2>
    2152:	70 90 76 21 	lds	r7, 0x2176	; 0x802176 <heat_flux+0x3>
			portEXIT_CRITICAL ();
    2156:	0f 90       	pop	r0
    2158:	0f be       	out	0x3f, r0	; 63
				*p_serial << PMS ("mV:") << heat_flux.get() << endl;
    215a:	6a e0       	ldi	r22, 0x0A	; 10
    215c:	f8 01       	movw	r30, r16
    215e:	86 81       	ldd	r24, Z+6	; 0x06
    2160:	97 81       	ldd	r25, Z+7	; 0x07
    2162:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2166:	7c 01       	movw	r14, r24
    2168:	64 ee       	ldi	r22, 0xE4	; 228
    216a:	76 e0       	ldi	r23, 0x06	; 6
    216c:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2170:	b3 01       	movw	r22, r6
    2172:	a2 01       	movw	r20, r4
    2174:	c7 01       	movw	r24, r14
    2176:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <_ZN8emstreamlsEf>
    217a:	66 e0       	ldi	r22, 0x06	; 6
    217c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
				//*p_serial << PMS ("Sample std dev: ") << get_std_dev(heat_flux.get(), sensor_sample_number.get(), sensor_readings) << endl;
				sample_sum = 0;
    2180:	f8 01       	movw	r30, r16
    2182:	11 8e       	std	Z+25, r1	; 0x19
    2184:	12 8e       	std	Z+26, r1	; 0x1a
    2186:	13 8e       	std	Z+27, r1	; 0x1b
    2188:	14 8e       	std	Z+28, r1	; 0x1c
				samples_taken = 0;
    218a:	15 8e       	std	Z+29, r1	; 0x1d
    218c:	16 8e       	std	Z+30, r1	; 0x1e
    218e:	17 8e       	std	Z+31, r1	; 0x1f
    2190:	10 a2       	std	Z+32, r1	; 0x20
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	0f 92       	push	r0
			the_data = new_data;
    2198:	10 92 72 21 	sts	0x2172, r1	; 0x802172 <sensor_reading>
			portEXIT_CRITICAL ();
    219c:	0f 90       	pop	r0
    219e:	0f be       	out	0x3f, r0	; 63
				sensor_reading.put(false);
				transition_to(0);
    21a0:	60 e0       	ldi	r22, 0x00	; 0
    21a2:	c8 01       	movw	r24, r16
    21a4:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
			
			break;

		} // End switch state

		runs++;                             // Increment counter for debugging
    21a8:	f8 01       	movw	r30, r16
    21aa:	86 85       	ldd	r24, Z+14	; 0x0e
    21ac:	97 85       	ldd	r25, Z+15	; 0x0f
    21ae:	a0 89       	ldd	r26, Z+16	; 0x10
    21b0:	b1 89       	ldd	r27, Z+17	; 0x11
    21b2:	01 96       	adiw	r24, 0x01	; 1
    21b4:	a1 1d       	adc	r26, r1
    21b6:	b1 1d       	adc	r27, r1
    21b8:	86 87       	std	Z+14, r24	; 0x0e
    21ba:	97 87       	std	Z+15, r25	; 0x0f
    21bc:	a0 8b       	std	Z+16, r26	; 0x10
    21be:	b1 8b       	std	Z+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (1));
    21c0:	61 e0       	ldi	r22, 0x01	; 1
    21c2:	70 e0       	ldi	r23, 0x00	; 0
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <vTaskDelay>
	sensor_complete.put(false);
	

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    21cc:	01 cd       	rjmp	.-1534   	; 0x1bd0 <_ZN11task_sensor3runEv+0x32>

000021ce <_ZN11task_sensorC1EPKchjP8emstreamP5SBG01>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

task_sensor::task_sensor (const char* a_name, 
    21ce:	cf 92       	push	r12
    21d0:	df 92       	push	r13
    21d2:	ef 92       	push	r14
    21d4:	ff 92       	push	r15
    21d6:	0f 93       	push	r16
    21d8:	1f 93       	push	r17
    21da:	cf 93       	push	r28
    21dc:	df 93       	push	r29
    21de:	ec 01       	movw	r28, r24
    21e0:	6b 01       	movw	r12, r22
					  unsigned portBASE_TYPE a_priority, 
					  size_t a_stack_size,
					  emstream* p_ser_dev,
					  SBG01* sbg01
					 )
	: frt_task (a_name, a_priority, a_stack_size, p_ser_dev), sbg01(sbg01)
    21e2:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <_ZN8frt_taskC1EPKchjP8emstream>
    21e6:	83 e2       	ldi	r24, 0x23	; 35
    21e8:	90 e2       	ldi	r25, 0x20	; 32
    21ea:	88 83       	st	Y, r24
    21ec:	99 83       	std	Y+1, r25	; 0x01
    21ee:	eb 8a       	std	Y+19, r14	; 0x13
    21f0:	fc 8a       	std	Y+20, r15	; 0x14
{
	task_name = a_name;	
    21f2:	c9 a2       	std	Y+33, r12	; 0x21
    21f4:	da a2       	std	Y+34, r13	; 0x22
}
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	1f 91       	pop	r17
    21fc:	0f 91       	pop	r16
    21fe:	ff 90       	pop	r15
    2200:	ef 90       	pop	r14
    2202:	df 90       	pop	r13
    2204:	cf 90       	pop	r12
    2206:	08 95       	ret

00002208 <_ZN9task_userC1EPKchjP8emstream>:
	// Show how the timer/counter is set up to cause RTOS timer ticks
	*p_serial << PMS (", TCC0CCA=") << TCC0.CCA << endl << endl;

	// Have the tasks print their status
	print_task_list (p_serial);
}
    2208:	ef 92       	push	r14
    220a:	ff 92       	push	r15
    220c:	0f 93       	push	r16
    220e:	1f 93       	push	r17
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29
    2214:	ec 01       	movw	r28, r24
    2216:	7b 01       	movw	r14, r22
    2218:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <_ZN8frt_taskC1EPKchjP8emstream>
    221c:	8b e2       	ldi	r24, 0x2B	; 43
    221e:	90 e2       	ldi	r25, 0x20	; 32
    2220:	88 83       	st	Y, r24
    2222:	99 83       	std	Y+1, r25	; 0x01
    2224:	fe 01       	movw	r30, r28
    2226:	e0 5e       	subi	r30, 0xE0	; 224
    2228:	fe 4f       	sbci	r31, 0xFE	; 254
    222a:	e0 82       	st	Z, r14
    222c:	f1 82       	std	Z+1, r15	; 0x01
    222e:	ce 5e       	subi	r28, 0xEE	; 238
    2230:	de 4f       	sbci	r29, 0xFE	; 254
    2232:	18 82       	st	Y, r1
    2234:	df 91       	pop	r29
    2236:	cf 91       	pop	r28
    2238:	1f 91       	pop	r17
    223a:	0f 91       	pop	r16
    223c:	ff 90       	pop	r15
    223e:	ef 90       	pop	r14
    2240:	08 95       	ret

00002242 <_ZN9task_user10str_to_intEv>:
    2242:	bf 92       	push	r11
    2244:	cf 92       	push	r12
    2246:	df 92       	push	r13
    2248:	ef 92       	push	r14
    224a:	ff 92       	push	r15
    224c:	0f 93       	push	r16
    224e:	1f 93       	push	r17
    2250:	cf 93       	push	r28
    2252:	df 93       	push	r29
    2254:	fc 01       	movw	r30, r24
    2256:	dc 01       	movw	r26, r24
    2258:	ae 5e       	subi	r26, 0xEE	; 238
    225a:	be 4f       	sbci	r27, 0xFE	; 254
    225c:	2c 91       	ld	r18, X
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	21 50       	subi	r18, 0x01	; 1
    2262:	31 09       	sbc	r19, r1
    2264:	12 16       	cp	r1, r18
    2266:	13 06       	cpc	r1, r19
    2268:	a4 f5       	brge	.+104    	; 0x22d2 <_ZN9task_user10str_to_intEv+0x90>
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	50 e0       	ldi	r21, 0x00	; 0
    226e:	b1 2c       	mov	r11, r1
    2270:	60 e0       	ldi	r22, 0x00	; 0
    2272:	70 e0       	ldi	r23, 0x00	; 0
    2274:	cb 01       	movw	r24, r22
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	aa 1f       	adc	r26, r26
    2280:	bb 1f       	adc	r27, r27
    2282:	6c 01       	movw	r12, r24
    2284:	7d 01       	movw	r14, r26
    2286:	cc 0c       	add	r12, r12
    2288:	dd 1c       	adc	r13, r13
    228a:	ee 1c       	adc	r14, r14
    228c:	ff 1c       	adc	r15, r15
    228e:	cc 0c       	add	r12, r12
    2290:	dd 1c       	adc	r13, r13
    2292:	ee 1c       	adc	r14, r14
    2294:	ff 1c       	adc	r15, r15
    2296:	8c 0d       	add	r24, r12
    2298:	9d 1d       	adc	r25, r13
    229a:	ae 1d       	adc	r26, r14
    229c:	bf 1d       	adc	r27, r15
    229e:	4e 0f       	add	r20, r30
    22a0:	5f 1f       	adc	r21, r31
    22a2:	ea 01       	movw	r28, r20
    22a4:	4a 89       	ldd	r20, Y+18	; 0x12
    22a6:	50 e0       	ldi	r21, 0x00	; 0
    22a8:	40 53       	subi	r20, 0x30	; 48
    22aa:	51 09       	sbc	r21, r1
    22ac:	05 2e       	mov	r0, r21
    22ae:	00 0c       	add	r0, r0
    22b0:	66 0b       	sbc	r22, r22
    22b2:	77 0b       	sbc	r23, r23
    22b4:	7a 01       	movw	r14, r20
    22b6:	8b 01       	movw	r16, r22
    22b8:	e8 0e       	add	r14, r24
    22ba:	f9 1e       	adc	r15, r25
    22bc:	0a 1f       	adc	r16, r26
    22be:	1b 1f       	adc	r17, r27
    22c0:	c8 01       	movw	r24, r16
    22c2:	b7 01       	movw	r22, r14
    22c4:	b3 94       	inc	r11
    22c6:	4b 2d       	mov	r20, r11
    22c8:	50 e0       	ldi	r21, 0x00	; 0
    22ca:	42 17       	cp	r20, r18
    22cc:	53 07       	cpc	r21, r19
    22ce:	9c f2       	brlt	.-90     	; 0x2276 <_ZN9task_user10str_to_intEv+0x34>
    22d0:	03 c0       	rjmp	.+6      	; 0x22d8 <_ZN9task_user10str_to_intEv+0x96>
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	70 e0       	ldi	r23, 0x00	; 0
    22d6:	cb 01       	movw	r24, r22
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	1f 91       	pop	r17
    22de:	0f 91       	pop	r16
    22e0:	ff 90       	pop	r15
    22e2:	ef 90       	pop	r14
    22e4:	df 90       	pop	r13
    22e6:	cf 90       	pop	r12
    22e8:	bf 90       	pop	r11
    22ea:	08 95       	ret

000022ec <_ZN9task_user12reset_deviceEv>:
    22ec:	6a e0       	ldi	r22, 0x0A	; 10
    22ee:	fc 01       	movw	r30, r24
    22f0:	86 81       	ldd	r24, Z+6	; 0x06
    22f2:	97 81       	ldd	r25, Z+7	; 0x07
    22f4:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    22f8:	ec 01       	movw	r28, r24
    22fa:	6d e8       	ldi	r22, 0x8D	; 141
    22fc:	7a e0       	ldi	r23, 0x0A	; 10
    22fe:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2302:	66 e0       	ldi	r22, 0x06	; 6
    2304:	ce 01       	movw	r24, r28
    2306:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    230a:	93 e0       	ldi	r25, 0x03	; 3
    230c:	88 ed       	ldi	r24, 0xD8	; 216
    230e:	08 b6       	in	r0, 0x38	; 56
    2310:	18 be       	out	0x38, r1	; 56
    2312:	84 bf       	out	0x34, r24	; 52
    2314:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2318:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    231c:	81 fd       	sbrc	r24, 1
    231e:	fc cf       	rjmp	.-8      	; 0x2318 <_ZN9task_user12reset_deviceEv+0x2c>
    2320:	08 be       	out	0x38, r0	; 56
    2322:	ff cf       	rjmp	.-2      	; 0x2322 <_ZN9task_user12reset_deviceEv+0x36>

00002324 <_ZN9task_user3runEv>:
/** This task interacts with the user by transmitting and receiving bytes over USB to 
 *  and from a computer.
 */

void task_user::run (void)
{
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	00 d0       	rcall	.+0      	; 0x232a <_ZN9task_user3runEv+0x6>
    232a:	00 d0       	rcall	.+0      	; 0x232c <_ZN9task_user3runEv+0x8>
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	9a 83       	std	Y+2, r25	; 0x02
			// coordinates of the device and then activates the device upon the user's command.
            case (1):
				if (p_serial->check_for_char ())        // If the user typed a
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
					atoi_buf[atoi_index] = char_in;
    2334:	8c 01       	movw	r16, r24
    2336:	0e 5e       	subi	r16, 0xEE	; 238
    2338:	1e 4f       	sbci	r17, 0xFE	; 254
						*p_serial << endl;
						break;
						
						case (','):
						*p_serial << char_in;
						conv_int = str_to_int();
    233a:	7c 01       	movw	r14, r24
    233c:	8d ee       	ldi	r24, 0xED	; 237
    233e:	e8 1a       	sub	r14, r24
    2340:	8e ef       	ldi	r24, 0xFE	; 254
    2342:	f8 0a       	sbc	r15, r24
						location_queue->put(conv_int);
    2344:	89 80       	ldd	r8, Y+1	; 0x01
    2346:	9a 80       	ldd	r9, Y+2	; 0x02
    2348:	99 ee       	ldi	r25, 0xE9	; 233
    234a:	89 1a       	sub	r8, r25
    234c:	9e ef       	ldi	r25, 0xFE	; 254
    234e:	99 0a       	sbc	r9, r25
							}
							
							break;
							
						case ('s'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    2350:	a9 80       	ldd	r10, Y+1	; 0x01
    2352:	ba 80       	ldd	r11, Y+2	; 0x02
    2354:	a3 ee       	ldi	r26, 0xE3	; 227
    2356:	aa 1a       	sub	r10, r26
    2358:	ae ef       	ldi	r26, 0xFE	; 254
    235a:	ba 0a       	sbc	r11, r26
							break;
							
						case ('n'):
							*p_serial << PMS ("Sensor sample size set to:") << endl;
							atoi_index = 0;
							data_config = &sensor_sample_number;
    235c:	69 80       	ldd	r6, Y+1	; 0x01
    235e:	7a 80       	ldd	r7, Y+2	; 0x02
    2360:	b7 ee       	ldi	r27, 0xE7	; 231
    2362:	6b 1a       	sub	r6, r27
    2364:	be ef       	ldi	r27, 0xFE	; 254
    2366:	7b 0a       	sbc	r7, r27
						case (','):
							*p_serial << char_in;
							
							conv_int = str_to_int();
							conv_int = conv_int * 1000;
							v_config->put(conv_int);
    2368:	49 80       	ldd	r4, Y+1	; 0x01
    236a:	5a 80       	ldd	r5, Y+2	; 0x02
    236c:	e5 ee       	ldi	r30, 0xE5	; 229
    236e:	4e 1a       	sub	r4, r30
    2370:	ee ef       	ldi	r30, 0xFE	; 254
    2372:	5e 0a       	sbc	r5, r30
							transition_to(0);
							break;
							
						case('a'):
							conv_int = str_to_int();
							if (queue_indicator)
    2374:	29 80       	ldd	r2, Y+1	; 0x01
    2376:	3a 80       	ldd	r3, Y+2	; 0x02
    2378:	fe ed       	ldi	r31, 0xDE	; 222
    237a:	2f 1a       	sub	r2, r31
    237c:	fe ef       	ldi	r31, 0xFE	; 254
    237e:	3f 0a       	sbc	r3, r31
							}
							else
							{
								if (data_config == &ramp_run_span)
								{
									conv_int = 100 / conv_int;
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	9a 81       	ldd	r25, Y+2	; 0x02
    2384:	8d 83       	std	Y+5, r24	; 0x05
    2386:	9e 83       	std	Y+6, r25	; 0x06
			//*p_serial << PMS ("interrupt reset") << endl;
			//reset_device();
		//}
		
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
    2388:	ad 81       	ldd	r26, Y+5	; 0x05
    238a:	be 81       	ldd	r27, Y+6	; 0x06
    238c:	1c 96       	adiw	r26, 0x0c	; 12
    238e:	8c 91       	ld	r24, X
    2390:	1c 97       	sbiw	r26, 0x0c	; 12
    2392:	81 30       	cpi	r24, 0x01	; 1
    2394:	09 f4       	brne	.+2      	; 0x2398 <_ZN9task_user3runEv+0x74>
    2396:	fd c0       	rjmp	.+506    	; 0x2592 <_ZN9task_user3runEv+0x26e>
    2398:	38 f0       	brcs	.+14     	; 0x23a8 <_ZN9task_user3runEv+0x84>
    239a:	82 30       	cpi	r24, 0x02	; 2
    239c:	09 f4       	brne	.+2      	; 0x23a0 <_ZN9task_user3runEv+0x7c>
    239e:	cf c2       	rjmp	.+1438   	; 0x293e <_ZN9task_user3runEv+0x61a>
    23a0:	83 30       	cpi	r24, 0x03	; 3
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <_ZN9task_user3runEv+0x82>
    23a4:	9b c3       	rjmp	.+1846   	; 0x2adc <_ZN9task_user3runEv+0x7b8>
    23a6:	c1 c5       	rjmp	.+2946   	; 0x2f2a <_ZN9task_user3runEv+0xc06>
		{
			// In Case 0, the interface is in the main menu.
			case (0):
			
				if (p_serial->check_for_char ())        // If the user typed a
    23a8:	ed 81       	ldd	r30, Y+5	; 0x05
    23aa:	fe 81       	ldd	r31, Y+6	; 0x06
    23ac:	86 81       	ldd	r24, Z+6	; 0x06
    23ae:	97 81       	ldd	r25, Z+7	; 0x07
    23b0:	dc 01       	movw	r26, r24
    23b2:	ed 91       	ld	r30, X+
    23b4:	fc 91       	ld	r31, X
    23b6:	04 80       	ldd	r0, Z+4	; 0x04
    23b8:	f5 81       	ldd	r31, Z+5	; 0x05
    23ba:	e0 2d       	mov	r30, r0
    23bc:	19 95       	eicall
    23be:	88 23       	and	r24, r24
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <_ZN9task_user3runEv+0xa0>
    23c2:	d3 c5       	rjmp	.+2982   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    23c4:	ed 81       	ldd	r30, Y+5	; 0x05
    23c6:	fe 81       	ldd	r31, Y+6	; 0x06
    23c8:	86 81       	ldd	r24, Z+6	; 0x06
    23ca:	97 81       	ldd	r25, Z+7	; 0x07
    23cc:	dc 01       	movw	r26, r24
    23ce:	ed 91       	ld	r30, X+
    23d0:	fc 91       	ld	r31, X
    23d2:	06 80       	ldd	r0, Z+6	; 0x06
    23d4:	f7 81       	ldd	r31, Z+7	; 0x07
    23d6:	e0 2d       	mov	r30, r0
    23d8:	19 95       	eicall
					atoi_buf[atoi_index] = char_in;
    23da:	f8 01       	movw	r30, r16
    23dc:	20 81       	ld	r18, Z
    23de:	ed 81       	ldd	r30, Y+5	; 0x05
    23e0:	fe 81       	ldd	r31, Y+6	; 0x06
    23e2:	e2 0f       	add	r30, r18
    23e4:	f1 1d       	adc	r31, r1
    23e6:	82 8b       	std	Z+18, r24	; 0x12
					atoi_index++;
    23e8:	2f 5f       	subi	r18, 0xFF	; 255
    23ea:	d8 01       	movw	r26, r16
    23ec:	2c 93       	st	X, r18
					switch(char_in)
    23ee:	99 27       	eor	r25, r25
    23f0:	fc 01       	movw	r30, r24
    23f2:	e1 56       	subi	r30, 0x61	; 97
    23f4:	f1 09       	sbc	r31, r1
    23f6:	e3 31       	cpi	r30, 0x13	; 19
    23f8:	f1 05       	cpc	r31, r1
    23fa:	08 f0       	brcs	.+2      	; 0x23fe <_ZN9task_user3runEv+0xda>
    23fc:	b6 c5       	rjmp	.+2924   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
    23fe:	88 27       	eor	r24, r24
    2400:	e9 5f       	subi	r30, 0xF9	; 249
    2402:	fe 4f       	sbci	r31, 0xFE	; 254
    2404:	8f 4f       	sbci	r24, 0xFF	; 255
    2406:	0c 94 77 34 	jmp	0x68ee	; 0x68ee <__tablejump2__>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	0f 92       	push	r0
			the_data = new_data;
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <configuration_mode>
			portEXIT_CRITICAL ();
    2416:	0f 90       	pop	r0
    2418:	0f be       	out	0x3f, r0	; 63
					{
						case(CMD_CONFIG_MODE):
						
							//print_config_mode_menu();
							configuration_mode.put(true);
							*p_serial << PMS ("Entering config mode") << endl;
    241a:	6a e0       	ldi	r22, 0x0A	; 10
    241c:	ed 81       	ldd	r30, Y+5	; 0x05
    241e:	fe 81       	ldd	r31, Y+6	; 0x06
    2420:	86 81       	ldd	r24, Z+6	; 0x06
    2422:	97 81       	ldd	r25, Z+7	; 0x07
    2424:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2428:	6c 01       	movw	r12, r24
    242a:	68 e7       	ldi	r22, 0x78	; 120
    242c:	7a e0       	ldi	r23, 0x0A	; 10
    242e:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2432:	66 e0       	ldi	r22, 0x06	; 6
    2434:	c6 01       	movw	r24, r12
    2436:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
							transition_to(3);
    243a:	63 e0       	ldi	r22, 0x03	; 3
    243c:	8d 81       	ldd	r24, Y+5	; 0x05
    243e:	9e 81       	ldd	r25, Y+6	; 0x06
    2440:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
							break;
    2444:	92 c5       	rjmp	.+2852   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	0f 92       	push	r0
			the_data = new_data;
    244c:	10 92 f2 20 	sts	0x20F2, r1	; 0x8020f2 <xmotor_on>
			portEXIT_CRITICAL ();
    2450:	0f 90       	pop	r0
    2452:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	0f 92       	push	r0
			the_data = new_data;
    245a:	10 92 f1 20 	sts	0x20F1, r1	; 0x8020f1 <ymotor_on>
			portEXIT_CRITICAL ();
    245e:	0f 90       	pop	r0
    2460:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	0f 92       	push	r0
			the_data = new_data;
    2468:	10 92 f0 20 	sts	0x20F0, r1	; 0x8020f0 <__data_end>
			portEXIT_CRITICAL ();
    246c:	0f 90       	pop	r0
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	7c c5       	rjmp	.+2808   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	0f 92       	push	r0
			the_data = new_data;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	80 93 3d 21 	sts	0x213D, r24	; 0x80213d <drawing_mode>
			portEXIT_CRITICAL ();
    247e:	0f 90       	pop	r0
    2480:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	0f 92       	push	r0
			the_data = new_data;
    2488:	10 92 69 21 	sts	0x2169, r1	; 0x802169 <sensor_delay>
    248c:	10 92 6a 21 	sts	0x216A, r1	; 0x80216a <sensor_delay+0x1>
    2490:	10 92 6b 21 	sts	0x216B, r1	; 0x80216b <sensor_delay+0x2>
    2494:	10 92 6c 21 	sts	0x216C, r1	; 0x80216c <sensor_delay+0x3>
			portEXIT_CRITICAL ();
    2498:	0f 90       	pop	r0
    249a:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	f8 94       	cli
    24a0:	0f 92       	push	r0
			the_data = new_data;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	a0 e0       	ldi	r26, 0x00	; 0
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	80 93 6e 21 	sts	0x216E, r24	; 0x80216e <sensor_sample_number>
    24ae:	90 93 6f 21 	sts	0x216F, r25	; 0x80216f <sensor_sample_number+0x1>
    24b2:	a0 93 70 21 	sts	0x2170, r26	; 0x802170 <sensor_sample_number+0x2>
    24b6:	b0 93 71 21 	sts	0x2171, r27	; 0x802171 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    24ba:	0f 90       	pop	r0
    24bc:	0f be       	out	0x3f, r0	; 63
							
						case('e'):
							drawing_mode.put(true);
							sensor_delay.put(0);
							sensor_sample_number.put(1);
							transition_to(1);
    24be:	61 e0       	ldi	r22, 0x01	; 1
    24c0:	8d 81       	ldd	r24, Y+5	; 0x05
    24c2:	9e 81       	ldd	r25, Y+6	; 0x06
    24c4:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
							break ;
    24c8:	50 c5       	rjmp	.+2720   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    24d0:	0f 90       	pop	r0
    24d2:	0f be       	out	0x3f, r0	; 63
							
						case('i'):
							if (!(incremental_mode.get()))
    24d4:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <incremental_mode>
    24d8:	81 11       	cpse	r24, r1
    24da:	47 c5       	rjmp	.+2702   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    24dc:	0f b6       	in	r0, 0x3f	; 63
    24de:	f8 94       	cli
    24e0:	0f 92       	push	r0
			the_data = new_data;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	80 93 f3 20 	sts	0x20F3, r24	; 0x8020f3 <incremental_mode>
			portEXIT_CRITICAL ();
    24e8:	0f 90       	pop	r0
    24ea:	0f be       	out	0x3f, r0	; 63
							{
								incremental_mode.put(true);
								transition_to(1);
    24ec:	61 e0       	ldi	r22, 0x01	; 1
    24ee:	8d 81       	ldd	r24, Y+5	; 0x05
    24f0:	9e 81       	ldd	r25, Y+6	; 0x06
    24f2:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    24f6:	39 c5       	rjmp	.+2674   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    24fe:	0f 90       	pop	r0
    2500:	0f be       	out	0x3f, r0	; 63
							
							break;
							
						case('c'):
						
							if (!(coordinate_mode.get()))
    2502:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    2506:	81 11       	cpse	r24, r1
    2508:	30 c5       	rjmp	.+2656   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	0f 92       	push	r0
			the_data = new_data;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	80 93 f5 20 	sts	0x20F5, r24	; 0x8020f5 <coordinate_mode>
			portEXIT_CRITICAL ();
    2516:	0f 90       	pop	r0
    2518:	0f be       	out	0x3f, r0	; 63
							{
								coordinate_mode.put(true);
								transition_to(1);
    251a:	61 e0       	ldi	r22, 0x01	; 1
    251c:	8d 81       	ldd	r24, Y+5	; 0x05
    251e:	9e 81       	ldd	r25, Y+6	; 0x06
    2520:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
    2524:	22 c5       	rjmp	.+2628   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	f8 94       	cli
    252a:	0f 92       	push	r0
			the_data = new_data;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <direct_mode>
			portEXIT_CRITICAL ();
    2532:	0f 90       	pop	r0
    2534:	0f be       	out	0x3f, r0	; 63
						
						case('d'):
						
							//print_dir_mode_menu();
							direct_mode.put(true);
							transition_to(2);
    2536:	62 e0       	ldi	r22, 0x02	; 2
    2538:	8d 81       	ldd	r24, Y+5	; 0x05
    253a:	9e 81       	ldd	r25, Y+6	; 0x06
    253c:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
							break;
    2540:	14 c5       	rjmp	.+2600   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
    2542:	ad 81       	ldd	r26, Y+5	; 0x05
    2544:	be 81       	ldd	r27, Y+6	; 0x06
							
						case('r'):
							
							reset_device();
    2546:	cd 01       	movw	r24, r26
    2548:	0e 94 76 11 	call	0x22ec	; 0x22ec <_ZN9task_user12reset_deviceEv>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	0f 92       	push	r0
			the_data = new_data;
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	80 93 72 21 	sts	0x2172, r24	; 0x802172 <sensor_reading>
			portEXIT_CRITICAL ();
    2558:	0f 90       	pop	r0
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	06 c5       	rjmp	.+2572   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	f8 94       	cli
    2562:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    2564:	0f 90       	pop	r0
    2566:	0f be       	out	0x3f, r0	; 63
							sensor_reading.put(true);
							break;
							
						case('p'):
							
							if(!(pause.get()))
    2568:	80 91 61 21 	lds	r24, 0x2161	; 0x802161 <pause>
    256c:	81 11       	cpse	r24, r1
    256e:	09 c0       	rjmp	.+18     	; 0x2582 <_ZN9task_user3runEv+0x25e>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	0f 92       	push	r0
			the_data = new_data;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	80 93 61 21 	sts	0x2161, r24	; 0x802161 <pause>
			portEXIT_CRITICAL ();
    257c:	0f 90       	pop	r0
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	f4 c4       	rjmp	.+2536   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	f8 94       	cli
    2586:	0f 92       	push	r0
			the_data = new_data;
    2588:	10 92 61 21 	sts	0x2161, r1	; 0x802161 <pause>
			portEXIT_CRITICAL ();
    258c:	0f 90       	pop	r0
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	ec c4       	rjmp	.+2520   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
				
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In Case 1, the UI is in Coordinate Mode. It waits for the user to specify the x, y, z 
			// coordinates of the device and then activates the device upon the user's command.
            case (1):
				if (p_serial->check_for_char ())        // If the user typed a
    2592:	ed 81       	ldd	r30, Y+5	; 0x05
    2594:	fe 81       	ldd	r31, Y+6	; 0x06
    2596:	86 81       	ldd	r24, Z+6	; 0x06
    2598:	97 81       	ldd	r25, Z+7	; 0x07
    259a:	dc 01       	movw	r26, r24
    259c:	ed 91       	ld	r30, X+
    259e:	fc 91       	ld	r31, X
    25a0:	04 80       	ldd	r0, Z+4	; 0x04
    25a2:	f5 81       	ldd	r31, Z+5	; 0x05
    25a4:	e0 2d       	mov	r30, r0
    25a6:	19 95       	eicall
    25a8:	88 23       	and	r24, r24
    25aa:	09 f4       	brne	.+2      	; 0x25ae <_ZN9task_user3runEv+0x28a>
    25ac:	aa c1       	rjmp	.+852    	; 0x2902 <_ZN9task_user3runEv+0x5de>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    25ae:	ed 81       	ldd	r30, Y+5	; 0x05
    25b0:	fe 81       	ldd	r31, Y+6	; 0x06
    25b2:	86 81       	ldd	r24, Z+6	; 0x06
    25b4:	97 81       	ldd	r25, Z+7	; 0x07
    25b6:	dc 01       	movw	r26, r24
    25b8:	ed 91       	ld	r30, X+
    25ba:	fc 91       	ld	r31, X
    25bc:	06 80       	ldd	r0, Z+6	; 0x06
    25be:	f7 81       	ldd	r31, Z+7	; 0x07
    25c0:	e0 2d       	mov	r30, r0
    25c2:	19 95       	eicall
    25c4:	bc 01       	movw	r22, r24
					atoi_buf[atoi_index] = char_in;
    25c6:	f8 01       	movw	r30, r16
    25c8:	80 81       	ld	r24, Z
    25ca:	ed 81       	ldd	r30, Y+5	; 0x05
    25cc:	fe 81       	ldd	r31, Y+6	; 0x06
    25ce:	e8 0f       	add	r30, r24
    25d0:	f1 1d       	adc	r31, r1
    25d2:	62 8b       	std	Z+18, r22	; 0x12
					atoi_index++;
    25d4:	8f 5f       	subi	r24, 0xFF	; 255
    25d6:	d8 01       	movw	r26, r16
    25d8:	8c 93       	st	X, r24
					switch (char_in)
    25da:	fb 01       	movw	r30, r22
    25dc:	ff 27       	eor	r31, r31
    25de:	bc 97       	sbiw	r30, 0x2c	; 44
    25e0:	ef 34       	cpi	r30, 0x4F	; 79
    25e2:	f1 05       	cpc	r31, r1
    25e4:	08 f0       	brcs	.+2      	; 0x25e8 <_ZN9task_user3runEv+0x2c4>
    25e6:	c1 c4       	rjmp	.+2434   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
    25e8:	88 27       	eor	r24, r24
    25ea:	e6 5e       	subi	r30, 0xE6	; 230
    25ec:	fe 4f       	sbci	r31, 0xFE	; 254
    25ee:	8f 4f       	sbci	r24, 0xFF	; 255
    25f0:	0c 94 77 34 	jmp	0x68ee	; 0x68ee <__tablejump2__>
    25f4:	ed 81       	ldd	r30, Y+5	; 0x05
    25f6:	fe 81       	ldd	r31, Y+6	; 0x06
					{
						case('r'):
						
							reset_device();
    25f8:	cf 01       	movw	r24, r30
    25fa:	0e 94 76 11 	call	0x22ec	; 0x22ec <_ZN9task_user12reset_deviceEv>
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    25fe:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <xlocations+0x4>
    2602:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <xlocations+0x5>
    2606:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <uxQueueMessagesWaiting>
    260a:	d8 2e       	mov	r13, r24
    260c:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <ylocations+0x4>
    2610:	90 91 06 21 	lds	r25, 0x2106	; 0x802106 <ylocations+0x5>
    2614:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <uxQueueMessagesWaiting>
							break;
						
						case ('e'):
						//print_main_menu();
						//coordinate_mode.put(false);
						if (xlocations.num_items_in() == ylocations.num_items_in() && xlocations.num_items_in() == zlocations.num_items_in())
    2618:	d8 12       	cpse	r13, r24
    261a:	45 c0       	rjmp	.+138    	; 0x26a6 <_ZN9task_user3runEv+0x382>
    261c:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <xlocations+0x4>
    2620:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <xlocations+0x5>
    2624:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <uxQueueMessagesWaiting>
    2628:	d8 2e       	mov	r13, r24
    262a:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <zlocations+0x4>
    262e:	90 91 fc 20 	lds	r25, 0x20FC	; 0x8020fc <zlocations+0x5>
    2632:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <uxQueueMessagesWaiting>
    2636:	d8 12       	cpse	r13, r24
    2638:	36 c0       	rjmp	.+108    	; 0x26a6 <_ZN9task_user3runEv+0x382>
    263a:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <xlocations+0x4>
    263e:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <xlocations+0x5>
    2642:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <uxQueueMessagesWaiting>
    2646:	c8 2e       	mov	r12, r24
    2648:	d1 2c       	mov	r13, r1
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    264a:	0f b6       	in	r0, 0x3f	; 63
    264c:	f8 94       	cli
    264e:	0f 92       	push	r0
			the_data = new_data;
    2650:	c0 92 62 21 	sts	0x2162, r12	; 0x802162 <total_nodes>
    2654:	d0 92 63 21 	sts	0x2163, r13	; 0x802163 <total_nodes+0x1>
			portEXIT_CRITICAL ();
    2658:	0f 90       	pop	r0
    265a:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    2662:	0f 90       	pop	r0
    2664:	0f be       	out	0x3f, r0	; 63
						{
							total_nodes.put(xlocations.num_items_in());
							*p_serial << PMS ("Total nodes: ") << total_nodes.get() << endl;
    2666:	6a e0       	ldi	r22, 0x0A	; 10
    2668:	ad 81       	ldd	r26, Y+5	; 0x05
    266a:	be 81       	ldd	r27, Y+6	; 0x06
    266c:	16 96       	adiw	r26, 0x06	; 6
    266e:	8d 91       	ld	r24, X+
    2670:	9c 91       	ld	r25, X
    2672:	17 97       	sbiw	r26, 0x07	; 7
    2674:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2678:	89 83       	std	Y+1, r24	; 0x01
    267a:	9a 83       	std	Y+2, r25	; 0x02
    267c:	6a e6       	ldi	r22, 0x6A	; 106
    267e:	7a e0       	ldi	r23, 0x0A	; 10
    2680:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2684:	b6 01       	movw	r22, r12
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	9a 81       	ldd	r25, Y+2	; 0x02
    268a:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <_ZN8emstreamlsEj>
    268e:	66 e0       	ldi	r22, 0x06	; 6
    2690:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	0f 92       	push	r0
			the_data = new_data;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	80 93 64 21 	sts	0x2164, r24	; 0x802164 <next_node>
			portEXIT_CRITICAL ();
    26a0:	0f 90       	pop	r0
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	10 c0       	rjmp	.+32     	; 0x26c6 <_ZN9task_user3runEv+0x3a2>
							next_node.put(true);
						}
						else
						{
							*p_serial << PMS ("Error: Unequal axis coordinate vectors.") << endl;
    26a6:	6a e0       	ldi	r22, 0x0A	; 10
    26a8:	ed 81       	ldd	r30, Y+5	; 0x05
    26aa:	fe 81       	ldd	r31, Y+6	; 0x06
    26ac:	86 81       	ldd	r24, Z+6	; 0x06
    26ae:	97 81       	ldd	r25, Z+7	; 0x07
    26b0:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    26b4:	6c 01       	movw	r12, r24
    26b6:	62 e4       	ldi	r22, 0x42	; 66
    26b8:	7a e0       	ldi	r23, 0x0A	; 10
    26ba:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    26be:	66 e0       	ldi	r22, 0x06	; 6
    26c0:	c6 01       	movw	r24, r12
    26c2:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
						}
						atoi_index = 0;
    26c6:	d8 01       	movw	r26, r16
    26c8:	1c 92       	st	X, r1
						transition_to(0);
    26ca:	60 e0       	ldi	r22, 0x00	; 0
    26cc:	8d 81       	ldd	r24, Y+5	; 0x05
    26ce:	9e 81       	ldd	r25, Y+6	; 0x06
    26d0:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
						break;
    26d4:	4a c4       	rjmp	.+2196   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						
						// This character acts as an enter which the python file can more easily send.
						case('a'):
						conv_int = str_to_int();
    26d6:	8d 81       	ldd	r24, Y+5	; 0x05
    26d8:	9e 81       	ldd	r25, Y+6	; 0x06
    26da:	0e 94 21 11 	call	0x2242	; 0x2242 <_ZN9task_user10str_to_intEv>
    26de:	f7 01       	movw	r30, r14
    26e0:	60 83       	st	Z, r22
    26e2:	71 83       	std	Z+1, r23	; 0x01
    26e4:	82 83       	std	Z+2, r24	; 0x02
    26e6:	93 83       	std	Z+3, r25	; 0x03
						location_queue->put(conv_int);
    26e8:	d4 01       	movw	r26, r8
    26ea:	8d 91       	ld	r24, X+
    26ec:	9c 91       	ld	r25, X
    26ee:	dc 01       	movw	r26, r24
    26f0:	ed 91       	ld	r30, X+
    26f2:	fc 91       	ld	r31, X
    26f4:	01 90       	ld	r0, Z+
    26f6:	f0 81       	ld	r31, Z
    26f8:	e0 2d       	mov	r30, r0
    26fa:	b7 01       	movw	r22, r14
    26fc:	19 95       	eicall
						atoi_index = 0;
    26fe:	f8 01       	movw	r30, r16
    2700:	10 82       	st	Z, r1
						//*p_serial << endl << PMS ("Locations stored in memory location: ") << location_queue << endl;
						break;
    2702:	33 c4       	rjmp	.+2150   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						
						case ('x'):
						atoi_index = 0;
    2704:	d8 01       	movw	r26, r16
    2706:	1c 92       	st	X, r1
						*p_serial << endl << PMS ("Receiving X-locations.") << endl;
    2708:	66 e0       	ldi	r22, 0x06	; 6
    270a:	ed 81       	ldd	r30, Y+5	; 0x05
    270c:	fe 81       	ldd	r31, Y+6	; 0x06
    270e:	86 81       	ldd	r24, Z+6	; 0x06
    2710:	97 81       	ldd	r25, Z+7	; 0x07
    2712:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2716:	6a e0       	ldi	r22, 0x0A	; 10
    2718:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    271c:	6c 01       	movw	r12, r24
    271e:	6b e2       	ldi	r22, 0x2B	; 43
    2720:	7a e0       	ldi	r23, 0x0A	; 10
    2722:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2726:	66 e0       	ldi	r22, 0x06	; 6
    2728:	c6 01       	movw	r24, r12
    272a:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
						location_queue = &xlocations;
    272e:	eb e0       	ldi	r30, 0x0B	; 11
    2730:	f1 e2       	ldi	r31, 0x21	; 33
    2732:	d4 01       	movw	r26, r8
    2734:	ed 93       	st	X+, r30
    2736:	fc 93       	st	X, r31
						break;
    2738:	18 c4       	rjmp	.+2096   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						
						case ('y'):
						atoi_index = 0;
    273a:	d8 01       	movw	r26, r16
    273c:	1c 92       	st	X, r1
						*p_serial << endl << PMS ("Receiving Y-locations.") << endl;
    273e:	66 e0       	ldi	r22, 0x06	; 6
    2740:	ed 81       	ldd	r30, Y+5	; 0x05
    2742:	fe 81       	ldd	r31, Y+6	; 0x06
    2744:	86 81       	ldd	r24, Z+6	; 0x06
    2746:	97 81       	ldd	r25, Z+7	; 0x07
    2748:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    274c:	6a e0       	ldi	r22, 0x0A	; 10
    274e:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2752:	6c 01       	movw	r12, r24
    2754:	64 e1       	ldi	r22, 0x14	; 20
    2756:	7a e0       	ldi	r23, 0x0A	; 10
    2758:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    275c:	66 e0       	ldi	r22, 0x06	; 6
    275e:	c6 01       	movw	r24, r12
    2760:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
						location_queue = &ylocations;
    2764:	e1 e0       	ldi	r30, 0x01	; 1
    2766:	f1 e2       	ldi	r31, 0x21	; 33
    2768:	d4 01       	movw	r26, r8
    276a:	ed 93       	st	X+, r30
    276c:	fc 93       	st	X, r31
						break;
    276e:	fd c3       	rjmp	.+2042   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						
						case ('z'):
						atoi_index = 0;
    2770:	d8 01       	movw	r26, r16
    2772:	1c 92       	st	X, r1
						*p_serial << endl << PMS ("Receiving Z-locations.") << endl;
    2774:	66 e0       	ldi	r22, 0x06	; 6
    2776:	ed 81       	ldd	r30, Y+5	; 0x05
    2778:	fe 81       	ldd	r31, Y+6	; 0x06
    277a:	86 81       	ldd	r24, Z+6	; 0x06
    277c:	97 81       	ldd	r25, Z+7	; 0x07
    277e:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2782:	6a e0       	ldi	r22, 0x0A	; 10
    2784:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2788:	6c 01       	movw	r12, r24
    278a:	6d ef       	ldi	r22, 0xFD	; 253
    278c:	79 e0       	ldi	r23, 0x09	; 9
    278e:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2792:	66 e0       	ldi	r22, 0x06	; 6
    2794:	c6 01       	movw	r24, r12
    2796:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
						location_queue = &zlocations;
    279a:	e7 ef       	ldi	r30, 0xF7	; 247
    279c:	f0 e2       	ldi	r31, 0x20	; 32
    279e:	d4 01       	movw	r26, r8
    27a0:	ed 93       	st	X+, r30
    27a2:	fc 93       	st	X, r31
						break;
    27a4:	e2 c3       	rjmp	.+1988   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	0f 92       	push	r0
			the_data = new_data;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	80 93 6d 21 	sts	0x216D, r24	; 0x80216d <initialization_complete>
			portEXIT_CRITICAL ();
    27b2:	0f 90       	pop	r0
    27b4:	0f be       	out	0x3f, r0	; 63
						
						case ('g'):
						initialization_complete.put(true);
						*p_serial << endl;
    27b6:	66 e0       	ldi	r22, 0x06	; 6
    27b8:	ad 81       	ldd	r26, Y+5	; 0x05
    27ba:	be 81       	ldd	r27, Y+6	; 0x06
    27bc:	16 96       	adiw	r26, 0x06	; 6
    27be:	8d 91       	ld	r24, X+
    27c0:	9c 91       	ld	r25, X
    27c2:	17 97       	sbiw	r26, 0x07	; 7
    27c4:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
						break;
    27c8:	d0 c3       	rjmp	.+1952   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						
						case (','):
						*p_serial << char_in;
    27ca:	ed 81       	ldd	r30, Y+5	; 0x05
    27cc:	fe 81       	ldd	r31, Y+6	; 0x06
    27ce:	86 81       	ldd	r24, Z+6	; 0x06
    27d0:	97 81       	ldd	r25, Z+7	; 0x07
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    27d2:	dc 01       	movw	r26, r24
    27d4:	ed 91       	ld	r30, X+
    27d6:	fc 91       	ld	r31, X
    27d8:	02 80       	ldd	r0, Z+2	; 0x02
    27da:	f3 81       	ldd	r31, Z+3	; 0x03
    27dc:	e0 2d       	mov	r30, r0
    27de:	19 95       	eicall
						conv_int = str_to_int();
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	9e 81       	ldd	r25, Y+6	; 0x06
    27e4:	0e 94 21 11 	call	0x2242	; 0x2242 <_ZN9task_user10str_to_intEv>
    27e8:	f7 01       	movw	r30, r14
    27ea:	60 83       	st	Z, r22
    27ec:	71 83       	std	Z+1, r23	; 0x01
    27ee:	82 83       	std	Z+2, r24	; 0x02
    27f0:	93 83       	std	Z+3, r25	; 0x03
						location_queue->put(conv_int);
    27f2:	d4 01       	movw	r26, r8
    27f4:	8d 91       	ld	r24, X+
    27f6:	9c 91       	ld	r25, X
    27f8:	dc 01       	movw	r26, r24
    27fa:	ed 91       	ld	r30, X+
    27fc:	fc 91       	ld	r31, X
    27fe:	01 90       	ld	r0, Z+
    2800:	f0 81       	ld	r31, Z
    2802:	e0 2d       	mov	r30, r0
    2804:	b7 01       	movw	r22, r14
    2806:	19 95       	eicall
						atoi_index = 0;
    2808:	f8 01       	movw	r30, r16
    280a:	10 82       	st	Z, r1

						break;
    280c:	ae c3       	rjmp	.+1884   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						
						case('0'):
						
						*p_serial << char_in;
    280e:	ad 81       	ldd	r26, Y+5	; 0x05
    2810:	be 81       	ldd	r27, Y+6	; 0x06
    2812:	16 96       	adiw	r26, 0x06	; 6
    2814:	8d 91       	ld	r24, X+
    2816:	9c 91       	ld	r25, X
    2818:	17 97       	sbiw	r26, 0x07	; 7
    281a:	dc 01       	movw	r26, r24
    281c:	ed 91       	ld	r30, X+
    281e:	fc 91       	ld	r31, X
    2820:	02 80       	ldd	r0, Z+2	; 0x02
    2822:	f3 81       	ldd	r31, Z+3	; 0x03
    2824:	e0 2d       	mov	r30, r0
    2826:	19 95       	eicall
    2828:	a0 c3       	rjmp	.+1856   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('1'):
						
						*p_serial << char_in;
    282a:	ed 81       	ldd	r30, Y+5	; 0x05
    282c:	fe 81       	ldd	r31, Y+6	; 0x06
    282e:	86 81       	ldd	r24, Z+6	; 0x06
    2830:	97 81       	ldd	r25, Z+7	; 0x07
    2832:	dc 01       	movw	r26, r24
    2834:	ed 91       	ld	r30, X+
    2836:	fc 91       	ld	r31, X
    2838:	02 80       	ldd	r0, Z+2	; 0x02
    283a:	f3 81       	ldd	r31, Z+3	; 0x03
    283c:	e0 2d       	mov	r30, r0
    283e:	19 95       	eicall
    2840:	94 c3       	rjmp	.+1832   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('2'):
						
						*p_serial << char_in;
    2842:	ed 81       	ldd	r30, Y+5	; 0x05
    2844:	fe 81       	ldd	r31, Y+6	; 0x06
    2846:	86 81       	ldd	r24, Z+6	; 0x06
    2848:	97 81       	ldd	r25, Z+7	; 0x07
    284a:	dc 01       	movw	r26, r24
    284c:	ed 91       	ld	r30, X+
    284e:	fc 91       	ld	r31, X
    2850:	02 80       	ldd	r0, Z+2	; 0x02
    2852:	f3 81       	ldd	r31, Z+3	; 0x03
    2854:	e0 2d       	mov	r30, r0
    2856:	19 95       	eicall
    2858:	88 c3       	rjmp	.+1808   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('3'):
						
						*p_serial << char_in;
    285a:	ed 81       	ldd	r30, Y+5	; 0x05
    285c:	fe 81       	ldd	r31, Y+6	; 0x06
    285e:	86 81       	ldd	r24, Z+6	; 0x06
    2860:	97 81       	ldd	r25, Z+7	; 0x07
    2862:	dc 01       	movw	r26, r24
    2864:	ed 91       	ld	r30, X+
    2866:	fc 91       	ld	r31, X
    2868:	02 80       	ldd	r0, Z+2	; 0x02
    286a:	f3 81       	ldd	r31, Z+3	; 0x03
    286c:	e0 2d       	mov	r30, r0
    286e:	19 95       	eicall
    2870:	7c c3       	rjmp	.+1784   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('4'):
						
						*p_serial << char_in;
    2872:	ed 81       	ldd	r30, Y+5	; 0x05
    2874:	fe 81       	ldd	r31, Y+6	; 0x06
    2876:	86 81       	ldd	r24, Z+6	; 0x06
    2878:	97 81       	ldd	r25, Z+7	; 0x07
    287a:	dc 01       	movw	r26, r24
    287c:	ed 91       	ld	r30, X+
    287e:	fc 91       	ld	r31, X
    2880:	02 80       	ldd	r0, Z+2	; 0x02
    2882:	f3 81       	ldd	r31, Z+3	; 0x03
    2884:	e0 2d       	mov	r30, r0
    2886:	19 95       	eicall
    2888:	70 c3       	rjmp	.+1760   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('5'):
						
						*p_serial << char_in;
    288a:	ed 81       	ldd	r30, Y+5	; 0x05
    288c:	fe 81       	ldd	r31, Y+6	; 0x06
    288e:	86 81       	ldd	r24, Z+6	; 0x06
    2890:	97 81       	ldd	r25, Z+7	; 0x07
    2892:	dc 01       	movw	r26, r24
    2894:	ed 91       	ld	r30, X+
    2896:	fc 91       	ld	r31, X
    2898:	02 80       	ldd	r0, Z+2	; 0x02
    289a:	f3 81       	ldd	r31, Z+3	; 0x03
    289c:	e0 2d       	mov	r30, r0
    289e:	19 95       	eicall
    28a0:	64 c3       	rjmp	.+1736   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('6'):
						
						*p_serial << char_in;
    28a2:	ed 81       	ldd	r30, Y+5	; 0x05
    28a4:	fe 81       	ldd	r31, Y+6	; 0x06
    28a6:	86 81       	ldd	r24, Z+6	; 0x06
    28a8:	97 81       	ldd	r25, Z+7	; 0x07
    28aa:	dc 01       	movw	r26, r24
    28ac:	ed 91       	ld	r30, X+
    28ae:	fc 91       	ld	r31, X
    28b0:	02 80       	ldd	r0, Z+2	; 0x02
    28b2:	f3 81       	ldd	r31, Z+3	; 0x03
    28b4:	e0 2d       	mov	r30, r0
    28b6:	19 95       	eicall
    28b8:	58 c3       	rjmp	.+1712   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('7'):
						
						*p_serial << char_in;
    28ba:	ed 81       	ldd	r30, Y+5	; 0x05
    28bc:	fe 81       	ldd	r31, Y+6	; 0x06
    28be:	86 81       	ldd	r24, Z+6	; 0x06
    28c0:	97 81       	ldd	r25, Z+7	; 0x07
    28c2:	dc 01       	movw	r26, r24
    28c4:	ed 91       	ld	r30, X+
    28c6:	fc 91       	ld	r31, X
    28c8:	02 80       	ldd	r0, Z+2	; 0x02
    28ca:	f3 81       	ldd	r31, Z+3	; 0x03
    28cc:	e0 2d       	mov	r30, r0
    28ce:	19 95       	eicall
    28d0:	4c c3       	rjmp	.+1688   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('8'):
						
						*p_serial << char_in;
    28d2:	ed 81       	ldd	r30, Y+5	; 0x05
    28d4:	fe 81       	ldd	r31, Y+6	; 0x06
    28d6:	86 81       	ldd	r24, Z+6	; 0x06
    28d8:	97 81       	ldd	r25, Z+7	; 0x07
    28da:	dc 01       	movw	r26, r24
    28dc:	ed 91       	ld	r30, X+
    28de:	fc 91       	ld	r31, X
    28e0:	02 80       	ldd	r0, Z+2	; 0x02
    28e2:	f3 81       	ldd	r31, Z+3	; 0x03
    28e4:	e0 2d       	mov	r30, r0
    28e6:	19 95       	eicall
    28e8:	40 c3       	rjmp	.+1664   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('9'):
						
						*p_serial << char_in;
    28ea:	ed 81       	ldd	r30, Y+5	; 0x05
    28ec:	fe 81       	ldd	r31, Y+6	; 0x06
    28ee:	86 81       	ldd	r24, Z+6	; 0x06
    28f0:	97 81       	ldd	r25, Z+7	; 0x07
    28f2:	dc 01       	movw	r26, r24
    28f4:	ed 91       	ld	r30, X+
    28f6:	fc 91       	ld	r31, X
    28f8:	02 80       	ldd	r0, Z+2	; 0x02
    28fa:	f3 81       	ldd	r31, Z+3	; 0x03
    28fc:	e0 2d       	mov	r30, r0
    28fe:	19 95       	eicall
    2900:	34 c3       	rjmp	.+1640   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
					}
				}

				// Check the print queue to see if another task has sent this task
				// something to be printed
				else if (print_ser_queue.check_for_char ())
    2902:	85 e1       	ldi	r24, 0x15	; 21
    2904:	91 e2       	ldi	r25, 0x21	; 33
    2906:	0e 94 46 2b 	call	0x568c	; 0x568c <_ZN14frt_text_queue14check_for_charEv>
    290a:	88 23       	and	r24, r24
    290c:	09 f4       	brne	.+2      	; 0x2910 <_ZN9task_user3runEv+0x5ec>
    290e:	2d c3       	rjmp	.+1626   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
				{
					p_serial->putchar (print_ser_queue.getchar ());
    2910:	ad 81       	ldd	r26, Y+5	; 0x05
    2912:	be 81       	ldd	r27, Y+6	; 0x06
    2914:	16 96       	adiw	r26, 0x06	; 6
    2916:	ed 91       	ld	r30, X+
    2918:	fc 91       	ld	r31, X
    291a:	17 97       	sbiw	r26, 0x07	; 7
    291c:	01 90       	ld	r0, Z+
    291e:	f0 81       	ld	r31, Z
    2920:	e0 2d       	mov	r30, r0
    2922:	c2 80       	ldd	r12, Z+2	; 0x02
    2924:	d3 80       	ldd	r13, Z+3	; 0x03
    2926:	85 e1       	ldi	r24, 0x15	; 21
    2928:	91 e2       	ldi	r25, 0x21	; 33
    292a:	0e 94 28 2b 	call	0x5650	; 0x5650 <_ZN14frt_text_queue7getcharEv>
    292e:	68 2f       	mov	r22, r24
    2930:	ed 81       	ldd	r30, Y+5	; 0x05
    2932:	fe 81       	ldd	r31, Y+6	; 0x06
    2934:	86 81       	ldd	r24, Z+6	; 0x06
    2936:	97 81       	ldd	r25, Z+7	; 0x07
    2938:	f6 01       	movw	r30, r12
    293a:	19 95       	eicall
    293c:	16 c3       	rjmp	.+1580   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
			// State 2 is Direct Operation Mode. Here, the user can enter commands that directly turn the motors on
			// and off, as well as control their direction.
				
			case (2):
				if (p_serial->check_for_char ())        // If the user typed a
    293e:	ad 81       	ldd	r26, Y+5	; 0x05
    2940:	be 81       	ldd	r27, Y+6	; 0x06
    2942:	16 96       	adiw	r26, 0x06	; 6
    2944:	8d 91       	ld	r24, X+
    2946:	9c 91       	ld	r25, X
    2948:	17 97       	sbiw	r26, 0x07	; 7
    294a:	dc 01       	movw	r26, r24
    294c:	ed 91       	ld	r30, X+
    294e:	fc 91       	ld	r31, X
    2950:	04 80       	ldd	r0, Z+4	; 0x04
    2952:	f5 81       	ldd	r31, Z+5	; 0x05
    2954:	e0 2d       	mov	r30, r0
    2956:	19 95       	eicall
    2958:	88 23       	and	r24, r24
    295a:	09 f4       	brne	.+2      	; 0x295e <_ZN9task_user3runEv+0x63a>
    295c:	06 c3       	rjmp	.+1548   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    295e:	ed 81       	ldd	r30, Y+5	; 0x05
    2960:	fe 81       	ldd	r31, Y+6	; 0x06
    2962:	86 81       	ldd	r24, Z+6	; 0x06
    2964:	97 81       	ldd	r25, Z+7	; 0x07
    2966:	dc 01       	movw	r26, r24
    2968:	ed 91       	ld	r30, X+
    296a:	fc 91       	ld	r31, X
    296c:	06 80       	ldd	r0, Z+6	; 0x06
    296e:	f7 81       	ldd	r31, Z+7	; 0x07
    2970:	e0 2d       	mov	r30, r0
    2972:	19 95       	eicall
					atoi_buf[atoi_index] = char_in;
    2974:	f8 01       	movw	r30, r16
    2976:	20 81       	ld	r18, Z
    2978:	ed 81       	ldd	r30, Y+5	; 0x05
    297a:	fe 81       	ldd	r31, Y+6	; 0x06
    297c:	e2 0f       	add	r30, r18
    297e:	f1 1d       	adc	r31, r1
    2980:	82 8b       	std	Z+18, r24	; 0x12
					atoi_index++;
    2982:	2f 5f       	subi	r18, 0xFF	; 255
    2984:	d8 01       	movw	r26, r16
    2986:	2c 93       	st	X, r18
					switch (char_in)
    2988:	99 27       	eor	r25, r25
    298a:	fc 01       	movw	r30, r24
    298c:	e5 56       	subi	r30, 0x65	; 101
    298e:	f1 09       	sbc	r31, r1
    2990:	e6 31       	cpi	r30, 0x16	; 22
    2992:	f1 05       	cpc	r31, r1
    2994:	08 f0       	brcs	.+2      	; 0x2998 <_ZN9task_user3runEv+0x674>
    2996:	e9 c2       	rjmp	.+1490   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
    2998:	88 27       	eor	r24, r24
    299a:	e7 59       	subi	r30, 0x97	; 151
    299c:	fe 4f       	sbci	r31, 0xFE	; 254
    299e:	8f 4f       	sbci	r24, 0xFF	; 255
    29a0:	0c 94 77 34 	jmp	0x68ee	; 0x68ee <__tablejump2__>
					{
						case ('x'):
							pmotor_operator = &xmotor_on;
    29a4:	82 ef       	ldi	r24, 0xF2	; 242
    29a6:	90 e2       	ldi	r25, 0x20	; 32
    29a8:	f5 01       	movw	r30, r10
    29aa:	80 83       	st	Z, r24
    29ac:	91 83       	std	Z+1, r25	; 0x01
							//*p_serial << endl << PMS ("Press Ctrl-E to return to the main menu.") << endl << endl;
							//*p_serial << PMS ("X-Motor Controls:") << endl;
							
							break;
    29ae:	dd c2       	rjmp	.+1466   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						case ('y'):
							pmotor_operator = &ymotor_on;
    29b0:	81 ef       	ldi	r24, 0xF1	; 241
    29b2:	90 e2       	ldi	r25, 0x20	; 32
    29b4:	d5 01       	movw	r26, r10
    29b6:	8d 93       	st	X+, r24
    29b8:	9c 93       	st	X, r25
							//*p_serial << endl << PMS ("Press Ctrl-E to return to the main menu.") << endl << endl;
							//*p_serial << PMS ("Y-Motor Controls:") << endl;
							//*p_serial << PMS ("Press Ctrl-F to activate forward.") << endl;
							//*p_serial << PMS ("Press Ctrl-R to activate reverse.") << endl;
							//*p_serial << PMS ("Press Ctrl-S to stop.") << endl;
							break;
    29ba:	d7 c2       	rjmp	.+1454   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						case ('z'):
							pmotor_operator = &zmotor_on;
    29bc:	80 ef       	ldi	r24, 0xF0	; 240
    29be:	90 e2       	ldi	r25, 0x20	; 32
    29c0:	f5 01       	movw	r30, r10
    29c2:	80 83       	st	Z, r24
    29c4:	91 83       	std	Z+1, r25	; 0x01
							//*p_serial << endl << PMS ("Press Ctrl-E to return to the main menu.") << endl << endl;
							//*p_serial << PMS ("Z-Motor Controls:") << endl;
							//*p_serial << PMS ("Press Ctrl-F to activate forward.") << endl;
							//*p_serial << PMS ("Press Ctrl-R to activate reverse.") << endl;
							//*p_serial << PMS ("Press Ctrl-S to stop.") << endl;
							break;
    29c6:	d1 c2       	rjmp	.+1442   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	0f 92       	push	r0
			the_data = new_data;
    29ce:	10 92 f4 20 	sts	0x20F4, r1	; 0x8020f4 <direct_mode>
			portEXIT_CRITICAL ();
    29d2:	0f 90       	pop	r0
    29d4:	0f be       	out	0x3f, r0	; 63
							//*p_serial << PMS ("Press Ctrl-B for Coordinate Mode") << endl;
							//*p_serial << PMS ("Press Ctrl-D for Direct Operation Mode") << endl;
							//*p_serial << PMS ("Press Ctrl-R for Routine Operation Mode") << endl;
						
							direct_mode.put(false);
							transition_to(0);
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	8d 81       	ldd	r24, Y+5	; 0x05
    29da:	9e 81       	ldd	r25, Y+6	; 0x06
    29dc:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
							break;
    29e0:	c4 c2       	rjmp	.+1416   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						
						case ('f'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    29e2:	d5 01       	movw	r26, r10
    29e4:	ed 91       	ld	r30, X+
    29e6:	fc 91       	ld	r31, X
    29e8:	b0 e2       	ldi	r27, 0x20	; 32
    29ea:	e2 3f       	cpi	r30, 0xF2	; 242
    29ec:	fb 07       	cpc	r31, r27
    29ee:	41 f0       	breq	.+16     	; 0x2a00 <_ZN9task_user3runEv+0x6dc>
    29f0:	80 e2       	ldi	r24, 0x20	; 32
    29f2:	e1 3f       	cpi	r30, 0xF1	; 241
    29f4:	f8 07       	cpc	r31, r24
    29f6:	21 f0       	breq	.+8      	; 0x2a00 <_ZN9task_user3runEv+0x6dc>
    29f8:	90 e2       	ldi	r25, 0x20	; 32
    29fa:	e0 3f       	cpi	r30, 0xF0	; 240
    29fc:	f9 07       	cpc	r31, r25
    29fe:	41 f4       	brne	.+16     	; 0x2a10 <_ZN9task_user3runEv+0x6ec>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2a00:	0f b6       	in	r0, 0x3f	; 63
    2a02:	f8 94       	cli
    2a04:	0f 92       	push	r0
			the_data = new_data;
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	80 83       	st	Z, r24
			portEXIT_CRITICAL ();
    2a0a:	0f 90       	pop	r0
    2a0c:	0f be       	out	0x3f, r0	; 63
    2a0e:	ad c2       	rjmp	.+1370   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
								pmotor_operator->put(1);
								
							}
							else
							{
								*p_serial << PMS ("Please choose the motor you would like to control.") << endl;
    2a10:	6a e0       	ldi	r22, 0x0A	; 10
    2a12:	ad 81       	ldd	r26, Y+5	; 0x05
    2a14:	be 81       	ldd	r27, Y+6	; 0x06
    2a16:	16 96       	adiw	r26, 0x06	; 6
    2a18:	8d 91       	ld	r24, X+
    2a1a:	9c 91       	ld	r25, X
    2a1c:	17 97       	sbiw	r26, 0x07	; 7
    2a1e:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2a22:	6c 01       	movw	r12, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    2a24:	6a ec       	ldi	r22, 0xCA	; 202
    2a26:	79 e0       	ldi	r23, 0x09	; 9
    2a28:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2a2c:	66 e0       	ldi	r22, 0x06	; 6
    2a2e:	c6 01       	movw	r24, r12
    2a30:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2a34:	9a c2       	rjmp	.+1332   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
							}
							
							break;
							
						case ('r'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    2a36:	d5 01       	movw	r26, r10
    2a38:	ed 91       	ld	r30, X+
    2a3a:	fc 91       	ld	r31, X
    2a3c:	b0 e2       	ldi	r27, 0x20	; 32
    2a3e:	e2 3f       	cpi	r30, 0xF2	; 242
    2a40:	fb 07       	cpc	r31, r27
    2a42:	41 f0       	breq	.+16     	; 0x2a54 <_ZN9task_user3runEv+0x730>
    2a44:	80 e2       	ldi	r24, 0x20	; 32
    2a46:	e1 3f       	cpi	r30, 0xF1	; 241
    2a48:	f8 07       	cpc	r31, r24
    2a4a:	21 f0       	breq	.+8      	; 0x2a54 <_ZN9task_user3runEv+0x730>
    2a4c:	90 e2       	ldi	r25, 0x20	; 32
    2a4e:	e0 3f       	cpi	r30, 0xF0	; 240
    2a50:	f9 07       	cpc	r31, r25
    2a52:	41 f4       	brne	.+16     	; 0x2a64 <_ZN9task_user3runEv+0x740>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	0f 92       	push	r0
			the_data = new_data;
    2a5a:	82 e0       	ldi	r24, 0x02	; 2
    2a5c:	80 83       	st	Z, r24
			portEXIT_CRITICAL ();
    2a5e:	0f 90       	pop	r0
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	83 c2       	rjmp	.+1286   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
								pmotor_operator->put(2);
								
							}
							else
							{
								*p_serial << PMS ("Please choose the motor you would like to control.") << endl;
    2a64:	6a e0       	ldi	r22, 0x0A	; 10
    2a66:	ad 81       	ldd	r26, Y+5	; 0x05
    2a68:	be 81       	ldd	r27, Y+6	; 0x06
    2a6a:	16 96       	adiw	r26, 0x06	; 6
    2a6c:	8d 91       	ld	r24, X+
    2a6e:	9c 91       	ld	r25, X
    2a70:	17 97       	sbiw	r26, 0x07	; 7
    2a72:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2a76:	6c 01       	movw	r12, r24
    2a78:	67 e9       	ldi	r22, 0x97	; 151
    2a7a:	79 e0       	ldi	r23, 0x09	; 9
    2a7c:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2a80:	66 e0       	ldi	r22, 0x06	; 6
    2a82:	c6 01       	movw	r24, r12
    2a84:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2a88:	70 c2       	rjmp	.+1248   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
							}
							
							break;
							
						case ('s'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    2a8a:	d5 01       	movw	r26, r10
    2a8c:	ed 91       	ld	r30, X+
    2a8e:	fc 91       	ld	r31, X
    2a90:	b0 e2       	ldi	r27, 0x20	; 32
    2a92:	e2 3f       	cpi	r30, 0xF2	; 242
    2a94:	fb 07       	cpc	r31, r27
    2a96:	41 f0       	breq	.+16     	; 0x2aa8 <_ZN9task_user3runEv+0x784>
    2a98:	80 e2       	ldi	r24, 0x20	; 32
    2a9a:	e1 3f       	cpi	r30, 0xF1	; 241
    2a9c:	f8 07       	cpc	r31, r24
    2a9e:	21 f0       	breq	.+8      	; 0x2aa8 <_ZN9task_user3runEv+0x784>
    2aa0:	90 e2       	ldi	r25, 0x20	; 32
    2aa2:	e0 3f       	cpi	r30, 0xF0	; 240
    2aa4:	f9 07       	cpc	r31, r25
    2aa6:	39 f4       	brne	.+14     	; 0x2ab6 <_ZN9task_user3runEv+0x792>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	0f 92       	push	r0
			the_data = new_data;
    2aae:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    2ab0:	0f 90       	pop	r0
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	5a c2       	rjmp	.+1204   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
								pmotor_operator->put(0);
								
							}
							else
							{
								*p_serial << PMS ("Please choose the motor you would like to control.") << endl;
    2ab6:	6a e0       	ldi	r22, 0x0A	; 10
    2ab8:	ad 81       	ldd	r26, Y+5	; 0x05
    2aba:	be 81       	ldd	r27, Y+6	; 0x06
    2abc:	16 96       	adiw	r26, 0x06	; 6
    2abe:	8d 91       	ld	r24, X+
    2ac0:	9c 91       	ld	r25, X
    2ac2:	17 97       	sbiw	r26, 0x07	; 7
    2ac4:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2ac8:	6c 01       	movw	r12, r24
    2aca:	64 e6       	ldi	r22, 0x64	; 100
    2acc:	79 e0       	ldi	r23, 0x09	; 9
    2ace:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2ad2:	66 e0       	ldi	r22, 0x06	; 6
    2ad4:	c6 01       	movw	r24, r12
    2ad6:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2ada:	47 c2       	rjmp	.+1166   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
			/** In State 3, the interface task is in configuration mode. In this mode, it has the ability to change the
			 *	default values of certain system parameters.
			 */			
				
			case (3):
				if (p_serial->check_for_char ())        // If the user typed a
    2adc:	ed 81       	ldd	r30, Y+5	; 0x05
    2ade:	fe 81       	ldd	r31, Y+6	; 0x06
    2ae0:	86 81       	ldd	r24, Z+6	; 0x06
    2ae2:	97 81       	ldd	r25, Z+7	; 0x07
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	ed 91       	ld	r30, X+
    2ae8:	fc 91       	ld	r31, X
    2aea:	04 80       	ldd	r0, Z+4	; 0x04
    2aec:	f5 81       	ldd	r31, Z+5	; 0x05
    2aee:	e0 2d       	mov	r30, r0
    2af0:	19 95       	eicall
    2af2:	88 23       	and	r24, r24
    2af4:	09 f4       	brne	.+2      	; 0x2af8 <_ZN9task_user3runEv+0x7d4>
    2af6:	39 c2       	rjmp	.+1138   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    2af8:	ed 81       	ldd	r30, Y+5	; 0x05
    2afa:	fe 81       	ldd	r31, Y+6	; 0x06
    2afc:	86 81       	ldd	r24, Z+6	; 0x06
    2afe:	97 81       	ldd	r25, Z+7	; 0x07
    2b00:	dc 01       	movw	r26, r24
    2b02:	ed 91       	ld	r30, X+
    2b04:	fc 91       	ld	r31, X
    2b06:	06 80       	ldd	r0, Z+6	; 0x06
    2b08:	f7 81       	ldd	r31, Z+7	; 0x07
    2b0a:	e0 2d       	mov	r30, r0
    2b0c:	19 95       	eicall
    2b0e:	bc 01       	movw	r22, r24
					atoi_buf[atoi_index] = char_in;
    2b10:	f8 01       	movw	r30, r16
    2b12:	80 81       	ld	r24, Z
    2b14:	ed 81       	ldd	r30, Y+5	; 0x05
    2b16:	fe 81       	ldd	r31, Y+6	; 0x06
    2b18:	e8 0f       	add	r30, r24
    2b1a:	f1 1d       	adc	r31, r1
    2b1c:	62 8b       	std	Z+18, r22	; 0x12
					atoi_index++;
    2b1e:	8f 5f       	subi	r24, 0xFF	; 255
    2b20:	d8 01       	movw	r26, r16
    2b22:	8c 93       	st	X, r24
					switch (char_in)
    2b24:	fb 01       	movw	r30, r22
    2b26:	ff 27       	eor	r31, r31
    2b28:	bc 97       	sbiw	r30, 0x2c	; 44
    2b2a:	ef 34       	cpi	r30, 0x4F	; 79
    2b2c:	f1 05       	cpc	r31, r1
    2b2e:	08 f0       	brcs	.+2      	; 0x2b32 <_ZN9task_user3runEv+0x80e>
    2b30:	1c c2       	rjmp	.+1080   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
    2b32:	88 27       	eor	r24, r24
    2b34:	e1 58       	subi	r30, 0x81	; 129
    2b36:	fe 4f       	sbci	r31, 0xFE	; 254
    2b38:	8f 4f       	sbci	r24, 0xFF	; 255
    2b3a:	0c 94 77 34 	jmp	0x68ee	; 0x68ee <__tablejump2__>
							//atoi_index = 0;
							//data_config = &ramp_run_span;
							//break;
							
						case ('v'):
							*p_serial << PMS ("Max velocity set to:") << endl;
    2b3e:	6a e0       	ldi	r22, 0x0A	; 10
    2b40:	ed 81       	ldd	r30, Y+5	; 0x05
    2b42:	fe 81       	ldd	r31, Y+6	; 0x06
    2b44:	86 81       	ldd	r24, Z+6	; 0x06
    2b46:	97 81       	ldd	r25, Z+7	; 0x07
    2b48:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2b4c:	6c 01       	movw	r12, r24
    2b4e:	6f e4       	ldi	r22, 0x4F	; 79
    2b50:	79 e0       	ldi	r23, 0x09	; 9
    2b52:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2b56:	66 e0       	ldi	r22, 0x06	; 6
    2b58:	c6 01       	movw	r24, r12
    2b5a:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    2b5e:	d8 01       	movw	r26, r16
    2b60:	1c 92       	st	X, r1
							data_config = &gen_max_v;
    2b62:	89 e3       	ldi	r24, 0x39	; 57
    2b64:	91 e2       	ldi	r25, 0x21	; 33
    2b66:	f3 01       	movw	r30, r6
    2b68:	80 83       	st	Z, r24
    2b6a:	91 83       	std	Z+1, r25	; 0x01
							break;
    2b6c:	fe c1       	rjmp	.+1020   	; 0x2f6a <_ZN9task_user3runEv+0xc46>
							
						case ('x'):
							*p_serial << PMS ("X-axis max velocity set to:") << endl;
    2b6e:	6a e0       	ldi	r22, 0x0A	; 10
    2b70:	ad 81       	ldd	r26, Y+5	; 0x05
    2b72:	be 81       	ldd	r27, Y+6	; 0x06
    2b74:	16 96       	adiw	r26, 0x06	; 6
    2b76:	8d 91       	ld	r24, X+
    2b78:	9c 91       	ld	r25, X
    2b7a:	17 97       	sbiw	r26, 0x07	; 7
    2b7c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2b80:	6c 01       	movw	r12, r24
    2b82:	63 e3       	ldi	r22, 0x33	; 51
    2b84:	79 e0       	ldi	r23, 0x09	; 9
    2b86:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2b8a:	66 e0       	ldi	r22, 0x06	; 6
    2b8c:	c6 01       	movw	r24, r12
    2b8e:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    2b92:	f8 01       	movw	r30, r16
    2b94:	10 82       	st	Z, r1
							v_config = &x_max_velocity;
    2b96:	87 e5       	ldi	r24, 0x57	; 87
    2b98:	91 e2       	ldi	r25, 0x21	; 33
    2b9a:	d2 01       	movw	r26, r4
    2b9c:	8d 93       	st	X+, r24
    2b9e:	9c 93       	st	X, r25
							queue_indicator = true;
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	f1 01       	movw	r30, r2
    2ba4:	80 83       	st	Z, r24
							break;
    2ba6:	e1 c1       	rjmp	.+962    	; 0x2f6a <_ZN9task_user3runEv+0xc46>
							
						case ('y'):
							*p_serial << PMS ("Y-axis max velocity set to:") << endl;
    2ba8:	6a e0       	ldi	r22, 0x0A	; 10
    2baa:	ad 81       	ldd	r26, Y+5	; 0x05
    2bac:	be 81       	ldd	r27, Y+6	; 0x06
    2bae:	16 96       	adiw	r26, 0x06	; 6
    2bb0:	8d 91       	ld	r24, X+
    2bb2:	9c 91       	ld	r25, X
    2bb4:	17 97       	sbiw	r26, 0x07	; 7
    2bb6:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2bba:	6c 01       	movw	r12, r24
    2bbc:	67 e1       	ldi	r22, 0x17	; 23
    2bbe:	79 e0       	ldi	r23, 0x09	; 9
    2bc0:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2bc4:	66 e0       	ldi	r22, 0x06	; 6
    2bc6:	c6 01       	movw	r24, r12
    2bc8:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    2bcc:	f8 01       	movw	r30, r16
    2bce:	10 82       	st	Z, r1
							v_config = &y_max_velocity;
    2bd0:	8d e4       	ldi	r24, 0x4D	; 77
    2bd2:	91 e2       	ldi	r25, 0x21	; 33
    2bd4:	d2 01       	movw	r26, r4
    2bd6:	8d 93       	st	X+, r24
    2bd8:	9c 93       	st	X, r25
							queue_indicator = true;
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	f1 01       	movw	r30, r2
    2bde:	80 83       	st	Z, r24
							break;
    2be0:	c4 c1       	rjmp	.+904    	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						
						case ('z'):
							*p_serial << PMS ("Z-axis max velocity set to:") << endl;
    2be2:	6a e0       	ldi	r22, 0x0A	; 10
    2be4:	ad 81       	ldd	r26, Y+5	; 0x05
    2be6:	be 81       	ldd	r27, Y+6	; 0x06
    2be8:	16 96       	adiw	r26, 0x06	; 6
    2bea:	8d 91       	ld	r24, X+
    2bec:	9c 91       	ld	r25, X
    2bee:	17 97       	sbiw	r26, 0x07	; 7
    2bf0:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2bf4:	6c 01       	movw	r12, r24
    2bf6:	6b ef       	ldi	r22, 0xFB	; 251
    2bf8:	78 e0       	ldi	r23, 0x08	; 8
    2bfa:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2bfe:	66 e0       	ldi	r22, 0x06	; 6
    2c00:	c6 01       	movw	r24, r12
    2c02:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    2c06:	f8 01       	movw	r30, r16
    2c08:	10 82       	st	Z, r1
							v_config = &z_max_velocity;
    2c0a:	83 e4       	ldi	r24, 0x43	; 67
    2c0c:	91 e2       	ldi	r25, 0x21	; 33
    2c0e:	d2 01       	movw	r26, r4
    2c10:	8d 93       	st	X+, r24
    2c12:	9c 93       	st	X, r25
							queue_indicator = true;
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	f1 01       	movw	r30, r2
    2c18:	80 83       	st	Z, r24
							break;
    2c1a:	a7 c1       	rjmp	.+846    	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						
						case ('e'):
							*p_serial << PMS ("Leaving config mode") << endl;
    2c1c:	6a e0       	ldi	r22, 0x0A	; 10
    2c1e:	ad 81       	ldd	r26, Y+5	; 0x05
    2c20:	be 81       	ldd	r27, Y+6	; 0x06
    2c22:	16 96       	adiw	r26, 0x06	; 6
    2c24:	8d 91       	ld	r24, X+
    2c26:	9c 91       	ld	r25, X
    2c28:	17 97       	sbiw	r26, 0x07	; 7
    2c2a:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2c2e:	6c 01       	movw	r12, r24
    2c30:	67 ee       	ldi	r22, 0xE7	; 231
    2c32:	78 e0       	ldi	r23, 0x08	; 8
    2c34:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2c38:	66 e0       	ldi	r22, 0x06	; 6
    2c3a:	c6 01       	movw	r24, r12
    2c3c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	0f 92       	push	r0
			the_data = new_data;
    2c46:	10 92 f6 20 	sts	0x20F6, r1	; 0x8020f6 <configuration_mode>
			portEXIT_CRITICAL ();
    2c4a:	0f 90       	pop	r0
    2c4c:	0f be       	out	0x3f, r0	; 63
							configuration_mode.put(false);
							transition_to(0);
    2c4e:	60 e0       	ldi	r22, 0x00	; 0
    2c50:	8d 81       	ldd	r24, Y+5	; 0x05
    2c52:	9e 81       	ldd	r25, Y+6	; 0x06
    2c54:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8frt_task13transition_toEh>
							break;
    2c58:	88 c1       	rjmp	.+784    	; 0x2f6a <_ZN9task_user3runEv+0xc46>
							
						case('a'):
							conv_int = str_to_int();
    2c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5e:	0e 94 21 11 	call	0x2242	; 0x2242 <_ZN9task_user10str_to_intEv>
    2c62:	9b 01       	movw	r18, r22
    2c64:	ac 01       	movw	r20, r24
    2c66:	f7 01       	movw	r30, r14
    2c68:	60 83       	st	Z, r22
    2c6a:	71 83       	std	Z+1, r23	; 0x01
    2c6c:	82 83       	std	Z+2, r24	; 0x02
    2c6e:	93 83       	std	Z+3, r25	; 0x03
							if (queue_indicator)
    2c70:	d1 01       	movw	r26, r2
    2c72:	8c 91       	ld	r24, X
    2c74:	88 23       	and	r24, r24
    2c76:	b1 f0       	breq	.+44     	; 0x2ca4 <_ZN9task_user3runEv+0x980>
							{
								conv_int = 1000 * conv_int;
    2c78:	a8 ee       	ldi	r26, 0xE8	; 232
    2c7a:	b3 e0       	ldi	r27, 0x03	; 3
    2c7c:	0e 94 8e 34 	call	0x691c	; 0x691c <__muluhisi3>
    2c80:	60 83       	st	Z, r22
    2c82:	71 83       	std	Z+1, r23	; 0x01
    2c84:	82 83       	std	Z+2, r24	; 0x02
    2c86:	93 83       	std	Z+3, r25	; 0x03
								v_config->put(conv_int);
    2c88:	d2 01       	movw	r26, r4
    2c8a:	8d 91       	ld	r24, X+
    2c8c:	9c 91       	ld	r25, X
    2c8e:	dc 01       	movw	r26, r24
    2c90:	ed 91       	ld	r30, X+
    2c92:	fc 91       	ld	r31, X
    2c94:	01 90       	ld	r0, Z+
    2c96:	f0 81       	ld	r31, Z
    2c98:	e0 2d       	mov	r30, r0
    2c9a:	b7 01       	movw	r22, r14
    2c9c:	19 95       	eicall
								queue_indicator = false;
    2c9e:	f1 01       	movw	r30, r2
    2ca0:	10 82       	st	Z, r1
    2ca2:	32 c0       	rjmp	.+100    	; 0x2d08 <_ZN9task_user3runEv+0x9e4>
							}
							else
							{
								if (data_config == &ramp_run_span)
    2ca4:	d3 01       	movw	r26, r6
    2ca6:	cd 90       	ld	r12, X+
    2ca8:	dc 90       	ld	r13, X
    2caa:	bf e3       	ldi	r27, 0x3F	; 63
    2cac:	cb 16       	cp	r12, r27
    2cae:	b1 e2       	ldi	r27, 0x21	; 33
    2cb0:	db 06       	cpc	r13, r27
    2cb2:	61 f4       	brne	.+24     	; 0x2ccc <_ZN9task_user3runEv+0x9a8>
								{
									conv_int = 100 / conv_int;
    2cb4:	64 e6       	ldi	r22, 0x64	; 100
    2cb6:	70 e0       	ldi	r23, 0x00	; 0
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	0e 94 55 34 	call	0x68aa	; 0x68aa <__udivmodsi4>
    2cc0:	f7 01       	movw	r30, r14
    2cc2:	20 83       	st	Z, r18
    2cc4:	31 83       	std	Z+1, r19	; 0x01
    2cc6:	42 83       	std	Z+2, r20	; 0x02
    2cc8:	53 83       	std	Z+3, r21	; 0x03
    2cca:	0f c0       	rjmp	.+30     	; 0x2cea <_ZN9task_user3runEv+0x9c6>
								}
								else if (data_config == &gen_max_v)
    2ccc:	f9 e3       	ldi	r31, 0x39	; 57
    2cce:	cf 16       	cp	r12, r31
    2cd0:	f1 e2       	ldi	r31, 0x21	; 33
    2cd2:	df 06       	cpc	r13, r31
    2cd4:	51 f4       	brne	.+20     	; 0x2cea <_ZN9task_user3runEv+0x9c6>
								{
									conv_int = 1500 * conv_int;
    2cd6:	ac ed       	ldi	r26, 0xDC	; 220
    2cd8:	b5 e0       	ldi	r27, 0x05	; 5
    2cda:	0e 94 8e 34 	call	0x691c	; 0x691c <__muluhisi3>
    2cde:	d7 01       	movw	r26, r14
    2ce0:	6d 93       	st	X+, r22
    2ce2:	7d 93       	st	X+, r23
    2ce4:	8d 93       	st	X+, r24
    2ce6:	9c 93       	st	X, r25
    2ce8:	13 97       	sbiw	r26, 0x03	; 3
								}
								data_config->put(conv_int);
    2cea:	f7 01       	movw	r30, r14
    2cec:	80 81       	ld	r24, Z
    2cee:	91 81       	ldd	r25, Z+1	; 0x01
    2cf0:	a2 81       	ldd	r26, Z+2	; 0x02
    2cf2:	b3 81       	ldd	r27, Z+3	; 0x03
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	f8 94       	cli
    2cf8:	0f 92       	push	r0
			the_data = new_data;
    2cfa:	f6 01       	movw	r30, r12
    2cfc:	80 83       	st	Z, r24
    2cfe:	91 83       	std	Z+1, r25	; 0x01
    2d00:	a2 83       	std	Z+2, r26	; 0x02
    2d02:	b3 83       	std	Z+3, r27	; 0x03
			portEXIT_CRITICAL ();
    2d04:	0f 90       	pop	r0
    2d06:	0f be       	out	0x3f, r0	; 63
							}
									
							atoi_index = 0;
    2d08:	d8 01       	movw	r26, r16
    2d0a:	1c 92       	st	X, r1
							*p_serial << PMS ("Config entered:") << conv_int << endl;
    2d0c:	d7 01       	movw	r26, r14
    2d0e:	8d 91       	ld	r24, X+
    2d10:	9d 91       	ld	r25, X+
    2d12:	0d 90       	ld	r0, X+
    2d14:	bc 91       	ld	r27, X
    2d16:	a0 2d       	mov	r26, r0
    2d18:	89 83       	std	Y+1, r24	; 0x01
    2d1a:	9a 83       	std	Y+2, r25	; 0x02
    2d1c:	ab 83       	std	Y+3, r26	; 0x03
    2d1e:	bc 83       	std	Y+4, r27	; 0x04
    2d20:	6a e0       	ldi	r22, 0x0A	; 10
    2d22:	ed 81       	ldd	r30, Y+5	; 0x05
    2d24:	fe 81       	ldd	r31, Y+6	; 0x06
    2d26:	86 81       	ldd	r24, Z+6	; 0x06
    2d28:	97 81       	ldd	r25, Z+7	; 0x07
    2d2a:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2d2e:	6c 01       	movw	r12, r24
    2d30:	67 ed       	ldi	r22, 0xD7	; 215
    2d32:	78 e0       	ldi	r23, 0x08	; 8
    2d34:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2d38:	49 81       	ldd	r20, Y+1	; 0x01
    2d3a:	5a 81       	ldd	r21, Y+2	; 0x02
    2d3c:	6b 81       	ldd	r22, Y+3	; 0x03
    2d3e:	7c 81       	ldd	r23, Y+4	; 0x04
    2d40:	c6 01       	movw	r24, r12
    2d42:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <_ZN8emstreamlsEm>
    2d46:	66 e0       	ldi	r22, 0x06	; 6
    2d48:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
							break;
    2d4c:	0e c1       	rjmp	.+540    	; 0x2f6a <_ZN9task_user3runEv+0xc46>
							
						case (','):
							*p_serial << char_in;
    2d4e:	ad 81       	ldd	r26, Y+5	; 0x05
    2d50:	be 81       	ldd	r27, Y+6	; 0x06
    2d52:	16 96       	adiw	r26, 0x06	; 6
    2d54:	8d 91       	ld	r24, X+
    2d56:	9c 91       	ld	r25, X
    2d58:	17 97       	sbiw	r26, 0x07	; 7
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	ed 91       	ld	r30, X+
    2d5e:	fc 91       	ld	r31, X
    2d60:	02 80       	ldd	r0, Z+2	; 0x02
    2d62:	f3 81       	ldd	r31, Z+3	; 0x03
    2d64:	e0 2d       	mov	r30, r0
    2d66:	19 95       	eicall
							
							conv_int = str_to_int();
    2d68:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6c:	0e 94 21 11 	call	0x2242	; 0x2242 <_ZN9task_user10str_to_intEv>
    2d70:	9b 01       	movw	r18, r22
    2d72:	ac 01       	movw	r20, r24
							conv_int = conv_int * 1000;
    2d74:	a8 ee       	ldi	r26, 0xE8	; 232
    2d76:	b3 e0       	ldi	r27, 0x03	; 3
    2d78:	0e 94 8e 34 	call	0x691c	; 0x691c <__muluhisi3>
    2d7c:	f7 01       	movw	r30, r14
    2d7e:	60 83       	st	Z, r22
    2d80:	71 83       	std	Z+1, r23	; 0x01
    2d82:	82 83       	std	Z+2, r24	; 0x02
    2d84:	93 83       	std	Z+3, r25	; 0x03
							v_config->put(conv_int);
    2d86:	d2 01       	movw	r26, r4
    2d88:	8d 91       	ld	r24, X+
    2d8a:	9c 91       	ld	r25, X
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	ed 91       	ld	r30, X+
    2d90:	fc 91       	ld	r31, X
    2d92:	01 90       	ld	r0, Z+
    2d94:	f0 81       	ld	r31, Z
    2d96:	e0 2d       	mov	r30, r0
    2d98:	b7 01       	movw	r22, r14
    2d9a:	19 95       	eicall
							atoi_index = 0;
    2d9c:	f8 01       	movw	r30, r16
    2d9e:	10 82       	st	Z, r1
							break;
    2da0:	e4 c0       	rjmp	.+456    	; 0x2f6a <_ZN9task_user3runEv+0xc46>
							
						case ('u'):
							*p_serial << PMS ("Microstep scaler set to:") << endl;
    2da2:	6a e0       	ldi	r22, 0x0A	; 10
    2da4:	ad 81       	ldd	r26, Y+5	; 0x05
    2da6:	be 81       	ldd	r27, Y+6	; 0x06
    2da8:	16 96       	adiw	r26, 0x06	; 6
    2daa:	8d 91       	ld	r24, X+
    2dac:	9c 91       	ld	r25, X
    2dae:	17 97       	sbiw	r26, 0x07	; 7
    2db0:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2db4:	6c 01       	movw	r12, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    2db6:	6e eb       	ldi	r22, 0xBE	; 190
    2db8:	78 e0       	ldi	r23, 0x08	; 8
    2dba:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2dbe:	66 e0       	ldi	r22, 0x06	; 6
    2dc0:	c6 01       	movw	r24, r12
    2dc2:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    2dc6:	f8 01       	movw	r30, r16
    2dc8:	10 82       	st	Z, r1
							data_config = &microstep_scaler;
    2dca:	85 e6       	ldi	r24, 0x65	; 101
    2dcc:	91 e2       	ldi	r25, 0x21	; 33
    2dce:	d3 01       	movw	r26, r6
    2dd0:	8d 93       	st	X+, r24
    2dd2:	9c 93       	st	X, r25
							break;
    2dd4:	ca c0       	rjmp	.+404    	; 0x2f6a <_ZN9task_user3runEv+0xc46>
							
						case ('s'):
							*p_serial << PMS ("Sensor delay set to:") << endl;
    2dd6:	6a e0       	ldi	r22, 0x0A	; 10
    2dd8:	ed 81       	ldd	r30, Y+5	; 0x05
    2dda:	fe 81       	ldd	r31, Y+6	; 0x06
    2ddc:	86 81       	ldd	r24, Z+6	; 0x06
    2dde:	97 81       	ldd	r25, Z+7	; 0x07
    2de0:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2de4:	6c 01       	movw	r12, r24
    2de6:	69 ea       	ldi	r22, 0xA9	; 169
    2de8:	78 e0       	ldi	r23, 0x08	; 8
    2dea:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2dee:	66 e0       	ldi	r22, 0x06	; 6
    2df0:	c6 01       	movw	r24, r12
    2df2:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    2df6:	d8 01       	movw	r26, r16
    2df8:	1c 92       	st	X, r1
							data_config = &sensor_delay;
    2dfa:	89 e6       	ldi	r24, 0x69	; 105
    2dfc:	91 e2       	ldi	r25, 0x21	; 33
    2dfe:	f3 01       	movw	r30, r6
    2e00:	80 83       	st	Z, r24
    2e02:	91 83       	std	Z+1, r25	; 0x01
							break;
    2e04:	b2 c0       	rjmp	.+356    	; 0x2f6a <_ZN9task_user3runEv+0xc46>
							
						case ('n'):
							*p_serial << PMS ("Sensor sample size set to:") << endl;
    2e06:	6a e0       	ldi	r22, 0x0A	; 10
    2e08:	ad 81       	ldd	r26, Y+5	; 0x05
    2e0a:	be 81       	ldd	r27, Y+6	; 0x06
    2e0c:	16 96       	adiw	r26, 0x06	; 6
    2e0e:	8d 91       	ld	r24, X+
    2e10:	9c 91       	ld	r25, X
    2e12:	17 97       	sbiw	r26, 0x07	; 7
    2e14:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2e18:	6c 01       	movw	r12, r24
    2e1a:	6e e8       	ldi	r22, 0x8E	; 142
    2e1c:	78 e0       	ldi	r23, 0x08	; 8
    2e1e:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2e22:	66 e0       	ldi	r22, 0x06	; 6
    2e24:	c6 01       	movw	r24, r12
    2e26:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    2e2a:	f8 01       	movw	r30, r16
    2e2c:	10 82       	st	Z, r1
							data_config = &sensor_sample_number;
    2e2e:	8e e6       	ldi	r24, 0x6E	; 110
    2e30:	91 e2       	ldi	r25, 0x21	; 33
    2e32:	d3 01       	movw	r26, r6
    2e34:	8d 93       	st	X+, r24
    2e36:	9c 93       	st	X, r25
							break;
    2e38:	98 c0       	rjmp	.+304    	; 0x2f6a <_ZN9task_user3runEv+0xc46>
							
						case('0'):
						
						*p_serial << char_in;
    2e3a:	ed 81       	ldd	r30, Y+5	; 0x05
    2e3c:	fe 81       	ldd	r31, Y+6	; 0x06
    2e3e:	86 81       	ldd	r24, Z+6	; 0x06
    2e40:	97 81       	ldd	r25, Z+7	; 0x07
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    2e42:	dc 01       	movw	r26, r24
    2e44:	ed 91       	ld	r30, X+
    2e46:	fc 91       	ld	r31, X
    2e48:	02 80       	ldd	r0, Z+2	; 0x02
    2e4a:	f3 81       	ldd	r31, Z+3	; 0x03
    2e4c:	e0 2d       	mov	r30, r0
    2e4e:	19 95       	eicall
    2e50:	8c c0       	rjmp	.+280    	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('1'):
						
						*p_serial << char_in;
    2e52:	ed 81       	ldd	r30, Y+5	; 0x05
    2e54:	fe 81       	ldd	r31, Y+6	; 0x06
    2e56:	86 81       	ldd	r24, Z+6	; 0x06
    2e58:	97 81       	ldd	r25, Z+7	; 0x07
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	ed 91       	ld	r30, X+
    2e5e:	fc 91       	ld	r31, X
    2e60:	02 80       	ldd	r0, Z+2	; 0x02
    2e62:	f3 81       	ldd	r31, Z+3	; 0x03
    2e64:	e0 2d       	mov	r30, r0
    2e66:	19 95       	eicall
    2e68:	80 c0       	rjmp	.+256    	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('2'):
						
						*p_serial << char_in;
    2e6a:	ed 81       	ldd	r30, Y+5	; 0x05
    2e6c:	fe 81       	ldd	r31, Y+6	; 0x06
    2e6e:	86 81       	ldd	r24, Z+6	; 0x06
    2e70:	97 81       	ldd	r25, Z+7	; 0x07
    2e72:	dc 01       	movw	r26, r24
    2e74:	ed 91       	ld	r30, X+
    2e76:	fc 91       	ld	r31, X
    2e78:	02 80       	ldd	r0, Z+2	; 0x02
    2e7a:	f3 81       	ldd	r31, Z+3	; 0x03
    2e7c:	e0 2d       	mov	r30, r0
    2e7e:	19 95       	eicall
    2e80:	74 c0       	rjmp	.+232    	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('3'):
						
						*p_serial << char_in;
    2e82:	ed 81       	ldd	r30, Y+5	; 0x05
    2e84:	fe 81       	ldd	r31, Y+6	; 0x06
    2e86:	86 81       	ldd	r24, Z+6	; 0x06
    2e88:	97 81       	ldd	r25, Z+7	; 0x07
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	ed 91       	ld	r30, X+
    2e8e:	fc 91       	ld	r31, X
    2e90:	02 80       	ldd	r0, Z+2	; 0x02
    2e92:	f3 81       	ldd	r31, Z+3	; 0x03
    2e94:	e0 2d       	mov	r30, r0
    2e96:	19 95       	eicall
    2e98:	68 c0       	rjmp	.+208    	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('4'):
						
						*p_serial << char_in;
    2e9a:	ed 81       	ldd	r30, Y+5	; 0x05
    2e9c:	fe 81       	ldd	r31, Y+6	; 0x06
    2e9e:	86 81       	ldd	r24, Z+6	; 0x06
    2ea0:	97 81       	ldd	r25, Z+7	; 0x07
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	ed 91       	ld	r30, X+
    2ea6:	fc 91       	ld	r31, X
    2ea8:	02 80       	ldd	r0, Z+2	; 0x02
    2eaa:	f3 81       	ldd	r31, Z+3	; 0x03
    2eac:	e0 2d       	mov	r30, r0
    2eae:	19 95       	eicall
    2eb0:	5c c0       	rjmp	.+184    	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('5'):
						
						*p_serial << char_in;
    2eb2:	ed 81       	ldd	r30, Y+5	; 0x05
    2eb4:	fe 81       	ldd	r31, Y+6	; 0x06
    2eb6:	86 81       	ldd	r24, Z+6	; 0x06
    2eb8:	97 81       	ldd	r25, Z+7	; 0x07
    2eba:	dc 01       	movw	r26, r24
    2ebc:	ed 91       	ld	r30, X+
    2ebe:	fc 91       	ld	r31, X
    2ec0:	02 80       	ldd	r0, Z+2	; 0x02
    2ec2:	f3 81       	ldd	r31, Z+3	; 0x03
    2ec4:	e0 2d       	mov	r30, r0
    2ec6:	19 95       	eicall
    2ec8:	50 c0       	rjmp	.+160    	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('6'):
						
						*p_serial << char_in;
    2eca:	ed 81       	ldd	r30, Y+5	; 0x05
    2ecc:	fe 81       	ldd	r31, Y+6	; 0x06
    2ece:	86 81       	ldd	r24, Z+6	; 0x06
    2ed0:	97 81       	ldd	r25, Z+7	; 0x07
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	ed 91       	ld	r30, X+
    2ed6:	fc 91       	ld	r31, X
    2ed8:	02 80       	ldd	r0, Z+2	; 0x02
    2eda:	f3 81       	ldd	r31, Z+3	; 0x03
    2edc:	e0 2d       	mov	r30, r0
    2ede:	19 95       	eicall
    2ee0:	44 c0       	rjmp	.+136    	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('7'):
						
						*p_serial << char_in;
    2ee2:	ed 81       	ldd	r30, Y+5	; 0x05
    2ee4:	fe 81       	ldd	r31, Y+6	; 0x06
    2ee6:	86 81       	ldd	r24, Z+6	; 0x06
    2ee8:	97 81       	ldd	r25, Z+7	; 0x07
    2eea:	dc 01       	movw	r26, r24
    2eec:	ed 91       	ld	r30, X+
    2eee:	fc 91       	ld	r31, X
    2ef0:	02 80       	ldd	r0, Z+2	; 0x02
    2ef2:	f3 81       	ldd	r31, Z+3	; 0x03
    2ef4:	e0 2d       	mov	r30, r0
    2ef6:	19 95       	eicall
    2ef8:	38 c0       	rjmp	.+112    	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('8'):
						
						*p_serial << char_in;
    2efa:	ed 81       	ldd	r30, Y+5	; 0x05
    2efc:	fe 81       	ldd	r31, Y+6	; 0x06
    2efe:	86 81       	ldd	r24, Z+6	; 0x06
    2f00:	97 81       	ldd	r25, Z+7	; 0x07
    2f02:	dc 01       	movw	r26, r24
    2f04:	ed 91       	ld	r30, X+
    2f06:	fc 91       	ld	r31, X
    2f08:	02 80       	ldd	r0, Z+2	; 0x02
    2f0a:	f3 81       	ldd	r31, Z+3	; 0x03
    2f0c:	e0 2d       	mov	r30, r0
    2f0e:	19 95       	eicall
    2f10:	2c c0       	rjmp	.+88     	; 0x2f6a <_ZN9task_user3runEv+0xc46>
						break;

						case('9'):
						
						*p_serial << char_in;
    2f12:	ed 81       	ldd	r30, Y+5	; 0x05
    2f14:	fe 81       	ldd	r31, Y+6	; 0x06
    2f16:	86 81       	ldd	r24, Z+6	; 0x06
    2f18:	97 81       	ldd	r25, Z+7	; 0x07
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	ed 91       	ld	r30, X+
    2f1e:	fc 91       	ld	r31, X
    2f20:	02 80       	ldd	r0, Z+2	; 0x02
    2f22:	f3 81       	ldd	r31, Z+3	; 0x03
    2f24:	e0 2d       	mov	r30, r0
    2f26:	19 95       	eicall
    2f28:	20 c0       	rjmp	.+64     	; 0x2f6a <_ZN9task_user3runEv+0xc46>
    2f2a:	a9 83       	std	Y+1, r26	; 0x01
    2f2c:	ba 83       	std	Y+2, r27	; 0x02
				break;

			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// We should never get to the default state. If we do, complain and restart
			default:
				*p_serial << PMS ("Illegal state! Resetting AVR") << endl;
    2f2e:	6a e0       	ldi	r22, 0x0A	; 10
    2f30:	fd 01       	movw	r30, r26
    2f32:	86 81       	ldd	r24, Z+6	; 0x06
    2f34:	97 81       	ldd	r25, Z+7	; 0x07
    2f36:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    2f3a:	89 83       	std	Y+1, r24	; 0x01
    2f3c:	9a 83       	std	Y+2, r25	; 0x02
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    2f3e:	61 e7       	ldi	r22, 0x71	; 113
    2f40:	78 e0       	ldi	r23, 0x08	; 8
    2f42:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    2f46:	66 e0       	ldi	r22, 0x06	; 6
    2f48:	89 81       	ldd	r24, Y+1	; 0x01
    2f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
				wdt_enable (WDTO_120MS);
    2f50:	93 e0       	ldi	r25, 0x03	; 3
    2f52:	88 ed       	ldi	r24, 0xD8	; 216
    2f54:	08 b6       	in	r0, 0x38	; 56
    2f56:	18 be       	out	0x38, r1	; 56
    2f58:	84 bf       	out	0x34, r24	; 52
    2f5a:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2f5e:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    2f62:	81 fd       	sbrc	r24, 1
    2f64:	fc cf       	rjmp	.-8      	; 0x2f5e <_ZN9task_user3runEv+0xc3a>
    2f66:	08 be       	out	0x38, r0	; 56
    2f68:	ff cf       	rjmp	.-2      	; 0x2f68 <_ZN9task_user3runEv+0xc44>
				for (;;);
				break;

		} // End switch state

		runs++;                             // Increment counter for debugging
    2f6a:	ed 81       	ldd	r30, Y+5	; 0x05
    2f6c:	fe 81       	ldd	r31, Y+6	; 0x06
    2f6e:	86 85       	ldd	r24, Z+14	; 0x0e
    2f70:	97 85       	ldd	r25, Z+15	; 0x0f
    2f72:	a0 89       	ldd	r26, Z+16	; 0x10
    2f74:	b1 89       	ldd	r27, Z+17	; 0x11
    2f76:	01 96       	adiw	r24, 0x01	; 1
    2f78:	a1 1d       	adc	r26, r1
    2f7a:	b1 1d       	adc	r27, r1
    2f7c:	86 87       	std	Z+14, r24	; 0x0e
    2f7e:	97 87       	std	Z+15, r25	; 0x0f
    2f80:	a0 8b       	std	Z+16, r26	; 0x10
    2f82:	b1 8b       	std	Z+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (1));
    2f84:	61 e0       	ldi	r22, 0x01	; 1
    2f86:	70 e0       	ldi	r23, 0x00	; 0
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <vTaskDelay>

	//print_main_menu();

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    2f90:	fb c9       	rjmp	.-3082   	; 0x2388 <_ZN9task_user3runEv+0x64>

00002f92 <_ZN10FakeDM542T7motorOnEv>:
		 */
		virtual bool ISR_butt_in (const data_type& item)
		{
			(void) item;                    // This just shuts up a compiler warning
			return (false);
		}
    2f92:	80 55       	subi	r24, 0x50	; 80
    2f94:	9f 4f       	sbci	r25, 0xFF	; 255
    2f96:	21 e0       	ldi	r18, 0x01	; 1
    2f98:	fc 01       	movw	r30, r24
    2f9a:	20 83       	st	Z, r18
    2f9c:	08 95       	ret

00002f9e <_ZN10FakeDM542T7motorCWEv>:
    2f9e:	8f 54       	subi	r24, 0x4F	; 79
    2fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa2:	21 e0       	ldi	r18, 0x01	; 1
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	20 83       	st	Z, r18
    2fa8:	08 95       	ret

00002faa <_ZN10FakeDM542T8motorCCWEv>:
    2faa:	8f 54       	subi	r24, 0x4F	; 79
    2fac:	9f 4f       	sbci	r25, 0xFF	; 255
    2fae:	fc 01       	movw	r30, r24
    2fb0:	10 82       	st	Z, r1
    2fb2:	08 95       	ret

00002fb4 <_ZN10FakeDM542T8motorOffEv>:
    2fb4:	80 55       	subi	r24, 0x50	; 80
    2fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb8:	fc 01       	movw	r30, r24
    2fba:	10 82       	st	Z, r1
    2fbc:	08 95       	ret

00002fbe <_ZN10FakeDM542T9disableCWEv>:
    2fbe:	08 95       	ret

00002fc0 <_ZN10FakeDM542T10disableCCWEv>:
    2fc0:	08 95       	ret

00002fc2 <_ZN10FakeDM542T11free_motionEv>:
    2fc2:	08 95       	ret

00002fc4 <_ZN10FakeDM542T13get_directionEv>:
    2fc4:	8f 54       	subi	r24, 0x4F	; 79
    2fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc8:	fc 01       	movw	r30, r24
    2fca:	80 81       	ld	r24, Z
    2fcc:	08 95       	ret

00002fce <_ZN10FakeDM542T9take_stepEv>:
    2fce:	08 95       	ret

00002fd0 <_ZN10FakeDM542T14set_signal_lowEv>:
    2fd0:	08 95       	ret

00002fd2 <_ZN10FakeDM542T10get_statusEv>:
    2fd2:	80 55       	subi	r24, 0x50	; 80
    2fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd6:	fc 01       	movw	r30, r24
    2fd8:	80 81       	ld	r24, Z
    2fda:	08 95       	ret

00002fdc <_ZN9frt_queueImE16ISR_num_items_inEv>:
		 *  called only from within an interrupt service routine.
		 *  @return The number of items in the queue
		 */
		size_t ISR_num_items_in (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle));
    2fdc:	fc 01       	movw	r30, r24
    2fde:	84 81       	ldd	r24, Z+4	; 0x04
    2fe0:	95 81       	ldd	r25, Z+5	; 0x05
    2fe2:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <uxQueueMessagesWaitingFromISR>
		}
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	08 95       	ret

00002fea <_ZN9frt_queueImE13ISR_not_emptyEv>:
		 *  an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool ISR_not_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) != 0);
    2fea:	fc 01       	movw	r30, r24
    2fec:	84 81       	ldd	r24, Z+4	; 0x04
    2fee:	95 81       	ldd	r25, Z+5	; 0x05
    2ff0:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <uxQueueMessagesWaitingFromISR>
    2ff4:	91 e0       	ldi	r25, 0x01	; 1
    2ff6:	81 11       	cpse	r24, r1
    2ff8:	01 c0       	rjmp	.+2      	; 0x2ffc <_ZN9frt_queueImE13ISR_not_emptyEv+0x12>
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
		}
    2ffc:	89 2f       	mov	r24, r25
    2ffe:	08 95       	ret

00003000 <_ZN9frt_queueImE12ISR_is_emptyEv>:
		 *  routine. It must not be used in normal non-ISR code. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool ISR_is_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) == 0);
    3000:	fc 01       	movw	r30, r24
    3002:	84 81       	ldd	r24, Z+4	; 0x04
    3004:	95 81       	ldd	r25, Z+5	; 0x05
    3006:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <uxQueueMessagesWaitingFromISR>
    300a:	91 e0       	ldi	r25, 0x01	; 1
    300c:	81 11       	cpse	r24, r1
    300e:	90 e0       	ldi	r25, 0x00	; 0
		}
    3010:	89 2f       	mov	r24, r25
    3012:	08 95       	ret

00003014 <_ZN9frt_queueImE12num_items_inEv>:
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    3014:	fc 01       	movw	r30, r24
    3016:	84 81       	ldd	r24, Z+4	; 0x04
    3018:	95 81       	ldd	r25, Z+5	; 0x05
    301a:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <uxQueueMessagesWaiting>
		}
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	08 95       	ret

00003022 <_ZN9frt_queueImE9not_emptyEv>:
		 *  \b not be called from within an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool not_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) != 0);
    3022:	fc 01       	movw	r30, r24
    3024:	84 81       	ldd	r24, Z+4	; 0x04
    3026:	95 81       	ldd	r25, Z+5	; 0x05
    3028:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <uxQueueMessagesWaiting>
    302c:	91 e0       	ldi	r25, 0x01	; 1
    302e:	81 11       	cpse	r24, r1
    3030:	01 c0       	rjmp	.+2      	; 0x3034 <_ZN9frt_queueImE9not_emptyEv+0x12>
    3032:	90 e0       	ldi	r25, 0x00	; 0
		}
    3034:	89 2f       	mov	r24, r25
    3036:	08 95       	ret

00003038 <_ZN9frt_queueImE8is_emptyEv>:
		/** This method checks if the queue is empty. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool is_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) == 0);
    3038:	fc 01       	movw	r30, r24
    303a:	84 81       	ldd	r24, Z+4	; 0x04
    303c:	95 81       	ldd	r25, Z+5	; 0x05
    303e:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <uxQueueMessagesWaiting>
    3042:	91 e0       	ldi	r25, 0x01	; 1
    3044:	81 11       	cpse	r24, r1
    3046:	90 e0       	ldi	r25, 0x00	; 0
		}
    3048:	89 2f       	mov	r24, r25
    304a:	08 95       	ret

0000304c <_ZN9frt_queueImE10get_a_copyERm>:
 *  \c xQueuePeekFromISR() which would allow copying items from a queue in an ISR. 
 *  @param item A reference to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get_a_copy (data_type& item)
    304c:	0f 93       	push	r16
{
	xQueuePeek (handle, &item, portMAX_DELAY);
    304e:	01 e0       	ldi	r16, 0x01	; 1
    3050:	2f ef       	ldi	r18, 0xFF	; 255
    3052:	3f ef       	ldi	r19, 0xFF	; 255
    3054:	a9 01       	movw	r20, r18
    3056:	fc 01       	movw	r30, r24
    3058:	84 81       	ldd	r24, Z+4	; 0x04
    305a:	95 81       	ldd	r25, Z+5	; 0x05
    305c:	0e 94 00 23 	call	0x4600	; 0x4600 <xQueueGenericReceive>
}
    3060:	0f 91       	pop	r16
    3062:	08 95       	ret

00003064 <_ZN9frt_queueImE10get_a_copyEv>:
 *          data type if we couldn't get any data from the queue and the attempt
 *          timed out
 */

template <class data_type>
inline data_type frt_queue<data_type>::get_a_copy (void)
    3064:	0f 93       	push	r16
    3066:	cf 93       	push	r28
    3068:	df 93       	push	r29
    306a:	00 d0       	rcall	.+0      	; 0x306c <_ZN9frt_queueImE10get_a_copyEv+0x8>
    306c:	1f 92       	push	r1
    306e:	cd b7       	in	r28, 0x3d	; 61
    3070:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueuePeek (handle, &recv_item, portMAX_DELAY);
    3072:	01 e0       	ldi	r16, 0x01	; 1
    3074:	2f ef       	ldi	r18, 0xFF	; 255
    3076:	3f ef       	ldi	r19, 0xFF	; 255
    3078:	a9 01       	movw	r20, r18
    307a:	be 01       	movw	r22, r28
    307c:	6f 5f       	subi	r22, 0xFF	; 255
    307e:	7f 4f       	sbci	r23, 0xFF	; 255
    3080:	fc 01       	movw	r30, r24
    3082:	84 81       	ldd	r24, Z+4	; 0x04
    3084:	95 81       	ldd	r25, Z+5	; 0x05
    3086:	0e 94 00 23 	call	0x4600	; 0x4600 <xQueueGenericReceive>
	return (recv_item);
    308a:	69 81       	ldd	r22, Y+1	; 0x01
    308c:	7a 81       	ldd	r23, Y+2	; 0x02
    308e:	8b 81       	ldd	r24, Y+3	; 0x03
    3090:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3092:	24 96       	adiw	r28, 0x04	; 4
    3094:	cd bf       	out	0x3d, r28	; 61
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	df 91       	pop	r29
    309a:	cf 91       	pop	r28
    309c:	0f 91       	pop	r16
    309e:	08 95       	ret

000030a0 <_ZN9frt_queueImE3getEPm>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get (data_type* p_item)
    30a0:	0f 93       	push	r16
{
	xQueueReceive (handle, p_item, portMAX_DELAY);
    30a2:	00 e0       	ldi	r16, 0x00	; 0
    30a4:	2f ef       	ldi	r18, 0xFF	; 255
    30a6:	3f ef       	ldi	r19, 0xFF	; 255
    30a8:	a9 01       	movw	r20, r18
    30aa:	fc 01       	movw	r30, r24
    30ac:	84 81       	ldd	r24, Z+4	; 0x04
    30ae:	95 81       	ldd	r25, Z+5	; 0x05
    30b0:	0e 94 00 23 	call	0x4600	; 0x4600 <xQueueGenericReceive>
}
    30b4:	0f 91       	pop	r16
    30b6:	08 95       	ret

000030b8 <_ZN9frt_queueImE3getEv>:
 *  up. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::get (void)
    30b8:	0f 93       	push	r16
    30ba:	cf 93       	push	r28
    30bc:	df 93       	push	r29
    30be:	00 d0       	rcall	.+0      	; 0x30c0 <_ZN9frt_queueImE3getEv+0x8>
    30c0:	1f 92       	push	r1
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceive (handle, &recv_item, portMAX_DELAY);
    30c6:	00 e0       	ldi	r16, 0x00	; 0
    30c8:	2f ef       	ldi	r18, 0xFF	; 255
    30ca:	3f ef       	ldi	r19, 0xFF	; 255
    30cc:	a9 01       	movw	r20, r18
    30ce:	be 01       	movw	r22, r28
    30d0:	6f 5f       	subi	r22, 0xFF	; 255
    30d2:	7f 4f       	sbci	r23, 0xFF	; 255
    30d4:	fc 01       	movw	r30, r24
    30d6:	84 81       	ldd	r24, Z+4	; 0x04
    30d8:	95 81       	ldd	r25, Z+5	; 0x05
    30da:	0e 94 00 23 	call	0x4600	; 0x4600 <xQueueGenericReceive>
	return (recv_item);
    30de:	69 81       	ldd	r22, Y+1	; 0x01
    30e0:	7a 81       	ldd	r23, Y+2	; 0x02
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	9c 81       	ldd	r25, Y+4	; 0x04
}
    30e6:	24 96       	adiw	r28, 0x04	; 4
    30e8:	cd bf       	out	0x3d, r28	; 61
    30ea:	de bf       	out	0x3e, r29	; 62
    30ec:	df 91       	pop	r29
    30ee:	cf 91       	pop	r28
    30f0:	0f 91       	pop	r16
    30f2:	08 95       	ret

000030f4 <_ZN9frt_queueImE7ISR_getEPm>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::ISR_get (data_type* p_item)
    30f4:	cf 93       	push	r28
    30f6:	df 93       	push	r29
    30f8:	1f 92       	push	r1
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
{
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, and
	// nothing will actually be copied
	xQueueReceiveFromISR (handle, p_item, &task_awakened);
    30fe:	ae 01       	movw	r20, r28
    3100:	4f 5f       	subi	r20, 0xFF	; 255
    3102:	5f 4f       	sbci	r21, 0xFF	; 255
    3104:	fc 01       	movw	r30, r24
    3106:	84 81       	ldd	r24, Z+4	; 0x04
    3108:	95 81       	ldd	r25, Z+5	; 0x05
    310a:	0e 94 c4 23 	call	0x4788	; 0x4788 <xQueueReceiveFromISR>
}
    310e:	0f 90       	pop	r0
    3110:	df 91       	pop	r29
    3112:	cf 91       	pop	r28
    3114:	08 95       	ret

00003116 <_ZN9frt_queueImE7ISR_getEv>:
 *  service routine. This method must not be called from within normal non-ISR code. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::ISR_get (void)
    3116:	cf 93       	push	r28
    3118:	df 93       	push	r29
    311a:	cd b7       	in	r28, 0x3d	; 61
    311c:	de b7       	in	r29, 0x3e	; 62
    311e:	25 97       	sbiw	r28, 0x05	; 5
    3120:	cd bf       	out	0x3d, r28	; 61
    3122:	de bf       	out	0x3e, r29	; 62
	data_type recv_item;                    // Data item read from the queue
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceiveFromISR (handle, &recv_item, &task_awakened);
    3124:	ae 01       	movw	r20, r28
    3126:	4b 5f       	subi	r20, 0xFB	; 251
    3128:	5f 4f       	sbci	r21, 0xFF	; 255
    312a:	be 01       	movw	r22, r28
    312c:	6f 5f       	subi	r22, 0xFF	; 255
    312e:	7f 4f       	sbci	r23, 0xFF	; 255
    3130:	fc 01       	movw	r30, r24
    3132:	84 81       	ldd	r24, Z+4	; 0x04
    3134:	95 81       	ldd	r25, Z+5	; 0x05
    3136:	0e 94 c4 23 	call	0x4788	; 0x4788 <xQueueReceiveFromISR>
	return (recv_item);
    313a:	69 81       	ldd	r22, Y+1	; 0x01
    313c:	7a 81       	ldd	r23, Y+2	; 0x02
    313e:	8b 81       	ldd	r24, Y+3	; 0x03
    3140:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3142:	25 96       	adiw	r28, 0x05	; 5
    3144:	cd bf       	out	0x3d, r28	; 61
    3146:	de bf       	out	0x3e, r29	; 62
    3148:	df 91       	pop	r29
    314a:	cf 91       	pop	r28
    314c:	08 95       	ret

0000314e <_ZN9frt_queueImE11ISR_butt_inERKm>:
 *              the front of the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
bool frt_queue<data_type>::ISR_butt_in (const data_type& item)
    314e:	cf 93       	push	r28
    3150:	df 93       	push	r29
    3152:	1f 92       	push	r1
    3154:	cd b7       	in	r28, 0x3d	; 61
    3156:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    3158:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;                      // Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToFrontFromISR (handle, &item, &shouldSwitch));
    315a:	21 e0       	ldi	r18, 0x01	; 1
    315c:	ae 01       	movw	r20, r28
    315e:	4f 5f       	subi	r20, 0xFF	; 255
    3160:	5f 4f       	sbci	r21, 0xFF	; 255
    3162:	fc 01       	movw	r30, r24
    3164:	84 81       	ldd	r24, Z+4	; 0x04
    3166:	95 81       	ldd	r25, Z+5	; 0x05
    3168:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    316c:	91 e0       	ldi	r25, 0x01	; 1
    316e:	81 11       	cpse	r24, r1
    3170:	01 c0       	rjmp	.+2      	; 0x3174 <_ZN9frt_queueImE11ISR_butt_inERKm+0x26>
    3172:	90 e0       	ldi	r25, 0x00	; 0
}
    3174:	89 2f       	mov	r24, r25
    3176:	0f 90       	pop	r0
    3178:	df 91       	pop	r29
    317a:	cf 91       	pop	r28
    317c:	08 95       	ret

0000317e <_ZN9frt_queueImE7ISR_putERKm>:
 *  @param item Reference to the item which is going to be put into the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
inline bool frt_queue<data_type>::ISR_put (const data_type& item)
    317e:	cf 93       	push	r28
    3180:	df 93       	push	r29
    3182:	1f 92       	push	r1
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    3188:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;						// Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToBackFromISR (handle, &item, &shouldSwitch));
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	ae 01       	movw	r20, r28
    318e:	4f 5f       	subi	r20, 0xFF	; 255
    3190:	5f 4f       	sbci	r21, 0xFF	; 255
    3192:	fc 01       	movw	r30, r24
    3194:	84 81       	ldd	r24, Z+4	; 0x04
    3196:	95 81       	ldd	r25, Z+5	; 0x05
    3198:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    319c:	91 e0       	ldi	r25, 0x01	; 1
    319e:	81 11       	cpse	r24, r1
    31a0:	01 c0       	rjmp	.+2      	; 0x31a4 <_ZN9frt_queueImE7ISR_putERKm+0x26>
    31a2:	90 e0       	ldi	r25, 0x00	; 0
}
    31a4:	89 2f       	mov	r24, r25
    31a6:	0f 90       	pop	r0
    31a8:	df 91       	pop	r29
    31aa:	cf 91       	pop	r28
    31ac:	08 95       	ret

000031ae <_ZN9frt_queueImE7butt_inERKm>:
		 *  \b not be used within an interrupt service routine. 
		 *  @param item Reference to the item which is going to be (rudely) put into 
		 *              the front of the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool butt_in (const data_type& item)
    31ae:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToFront (handle, &item, ticks_to_wait)));
    31b0:	fc 01       	movw	r30, r24
    31b2:	26 81       	ldd	r18, Z+6	; 0x06
    31b4:	37 81       	ldd	r19, Z+7	; 0x07
    31b6:	40 85       	ldd	r20, Z+8	; 0x08
    31b8:	51 85       	ldd	r21, Z+9	; 0x09
    31ba:	01 e0       	ldi	r16, 0x01	; 1
    31bc:	84 81       	ldd	r24, Z+4	; 0x04
    31be:	95 81       	ldd	r25, Z+5	; 0x05
    31c0:	0e 94 39 22 	call	0x4472	; 0x4472 <xQueueGenericSend>
    31c4:	91 e0       	ldi	r25, 0x01	; 1
    31c6:	81 11       	cpse	r24, r1
    31c8:	01 c0       	rjmp	.+2      	; 0x31cc <_ZN9frt_queueImE7butt_inERKm+0x1e>
    31ca:	90 e0       	ldi	r25, 0x00	; 0
		}
    31cc:	89 2f       	mov	r24, r25
    31ce:	0f 91       	pop	r16
    31d0:	08 95       	ret

000031d2 <_ZN9frt_queueImE3putERKm>:
		 *  an item into the front of the queue so it will be retreived first, use 
		 *  \c butt_in() instead. This method must \b not be used within an ISR.
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
    31d2:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
    31d4:	fc 01       	movw	r30, r24
    31d6:	26 81       	ldd	r18, Z+6	; 0x06
    31d8:	37 81       	ldd	r19, Z+7	; 0x07
    31da:	40 85       	ldd	r20, Z+8	; 0x08
    31dc:	51 85       	ldd	r21, Z+9	; 0x09
    31de:	00 e0       	ldi	r16, 0x00	; 0
    31e0:	84 81       	ldd	r24, Z+4	; 0x04
    31e2:	95 81       	ldd	r25, Z+5	; 0x05
    31e4:	0e 94 39 22 	call	0x4472	; 0x4472 <xQueueGenericSend>
    31e8:	91 e0       	ldi	r25, 0x01	; 1
    31ea:	81 11       	cpse	r24, r1
    31ec:	01 c0       	rjmp	.+2      	; 0x31f0 <_ZN9frt_queueImE3putERKm+0x1e>
    31ee:	90 e0       	ldi	r25, 0x00	; 0
		}
    31f0:	89 2f       	mov	r24, r25
    31f2:	0f 91       	pop	r16
    31f4:	08 95       	ret

000031f6 <_ZN10FakeDM542TC1Ej>:
  
  public:
  
  // (Timer* timer, PORT_t* logic_port, uint8_t ena_bm, uint8_t dir_bm, uint8_t microstep_scaler);
  
  FakeDM542T ( uint16_t microstep_scaler )
    31f6:	cf 93       	push	r28
    31f8:	df 93       	push	r29
    31fa:	ec 01       	movw	r28, r24
  public:
  
  // (Timer* timer, PORT_t* logic_port, uint8_t ena_bm, uint8_t dir_bm, uint8_t microstep_scaler);
  
  DM542T ( uint16_t microstep_scaler )
    : VelocityControl( microstep_scaler ) 
    31fc:	4e 96       	adiw	r24, 0x1e	; 30
    31fe:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZN6Motion15VelocityControlC1Ej>
    3202:	fe 01       	movw	r30, r28
    3204:	e5 58       	subi	r30, 0x85	; 133
    3206:	ff 4f       	sbci	r31, 0xFF	; 255
    3208:	10 82       	st	Z, r1
    320a:	11 82       	std	Z+1, r1	; 0x01
    320c:	12 82       	std	Z+2, r1	; 0x02
    320e:	13 82       	std	Z+3, r1	; 0x03
    3210:	34 96       	adiw	r30, 0x04	; 4
    3212:	10 82       	st	Z, r1
    3214:	11 82       	std	Z+1, r1	; 0x01
    3216:	12 82       	std	Z+2, r1	; 0x02
    3218:	13 82       	std	Z+3, r1	; 0x03
    321a:	34 96       	adiw	r30, 0x04	; 4
    321c:	10 82       	st	Z, r1
    321e:	11 82       	std	Z+1, r1	; 0x01
    3220:	12 82       	std	Z+2, r1	; 0x02
    3222:	13 82       	std	Z+3, r1	; 0x03
    3224:	34 96       	adiw	r30, 0x04	; 4
    3226:	10 82       	st	Z, r1
    3228:	11 82       	std	Z+1, r1	; 0x01
    322a:	12 82       	std	Z+2, r1	; 0x02
    322c:	13 82       	std	Z+3, r1	; 0x03
    322e:	34 96       	adiw	r30, 0x04	; 4
    3230:	10 82       	st	Z, r1
    3232:	11 82       	std	Z+1, r1	; 0x01
    3234:	12 82       	std	Z+2, r1	; 0x02
    3236:	13 82       	std	Z+3, r1	; 0x03
    : DM542T( microstep_scaler ) 
    3238:	83 e7       	ldi	r24, 0x73	; 115
    323a:	90 e2       	ldi	r25, 0x20	; 32
    323c:	88 83       	st	Y, r24
    323e:	99 83       	std	Y+1, r25	; 0x01
    3240:	b9 96       	adiw	r30, 0x29	; 41
    3242:	10 82       	st	Z, r1
    3244:	11 82       	std	Z+1, r1	; 0x01
    3246:	12 82       	std	Z+2, r1	; 0x02
    3248:	13 82       	std	Z+3, r1	; 0x03
    324a:	34 96       	adiw	r30, 0x04	; 4
    324c:	10 82       	st	Z, r1
    324e:	11 82       	std	Z+1, r1	; 0x01
    3250:	12 82       	std	Z+2, r1	; 0x02
    3252:	13 82       	std	Z+3, r1	; 0x03
    3254:	34 96       	adiw	r30, 0x04	; 4
    3256:	10 82       	st	Z, r1
    3258:	11 82       	std	Z+1, r1	; 0x01
    325a:	12 82       	std	Z+2, r1	; 0x02
    325c:	13 82       	std	Z+3, r1	; 0x03
    325e:	34 96       	adiw	r30, 0x04	; 4
    3260:	10 82       	st	Z, r1
    3262:	11 82       	std	Z+1, r1	; 0x01
    3264:	12 82       	std	Z+2, r1	; 0x02
    3266:	13 82       	std	Z+3, r1	; 0x03
    3268:	cc 53       	subi	r28, 0x3C	; 60
    326a:	df 4f       	sbci	r29, 0xFF	; 255
    326c:	18 82       	st	Y, r1
    326e:	19 82       	std	Y+1, r1	; 0x01
    3270:	1a 82       	std	Y+2, r1	; 0x02
    3272:	1b 82       	std	Y+3, r1	; 0x03
    { }
    3274:	df 91       	pop	r29
    3276:	cf 91       	pop	r28
    3278:	08 95       	ret

0000327a <_Z8CCPWritePVhh>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    327a:	0f 93       	push	r16
    327c:	cf 93       	push	r28
    327e:	df 93       	push	r29
    3280:	1f 92       	push	r1
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
  #if defined __GNUC__
  uint8_t volatile saved_sreg = SREG;
    3286:	2f b7       	in	r18, 0x3f	; 63
    3288:	29 83       	std	Y+1, r18	; 0x01
  cli();
    328a:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
  #ifdef RAMPZ
  RAMPZ = 0;
    328c:	1b be       	out	0x3b, r1	; 59
  "out   %3, r16"       "\n\t"
  "st     Z,  %1"       "\n\t"
  :
  : "r" (tmpAddr), "r" (value), "M" (0xD8), "i" (&CCP)
  : "r16", "r30", "r31"
  );
    328e:	fc 01       	movw	r30, r24
    3290:	08 ed       	ldi	r16, 0xD8	; 216
    3292:	04 bf       	out	0x34, r16	; 52
    3294:	60 83       	st	Z, r22

  SREG = saved_sreg;
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	8f bf       	out	0x3f, r24	; 63
  #endif
}
    329a:	0f 90       	pop	r0
    329c:	df 91       	pop	r29
    329e:	cf 91       	pop	r28
    32a0:	0f 91       	pop	r16
    32a2:	08 95       	ret

000032a4 <main>:
 *  reset.
 *  @return This is a real-time microcontroller program which doesn't return. Ever.
 */

int main (void)
{
    32a4:	6f 92       	push	r6
    32a6:	7f 92       	push	r7
    32a8:	8f 92       	push	r8
    32aa:	9f 92       	push	r9
    32ac:	af 92       	push	r10
    32ae:	bf 92       	push	r11
    32b0:	cf 92       	push	r12
    32b2:	df 92       	push	r13
    32b4:	ef 92       	push	r14
    32b6:	ff 92       	push	r15
    32b8:	0f 93       	push	r16
    32ba:	1f 93       	push	r17
    32bc:	cf 93       	push	r28
    32be:	df 93       	push	r29
    32c0:	cd b7       	in	r28, 0x3d	; 61
    32c2:	de b7       	in	r29, 0x3e	; 62
    32c4:	6d 97       	sbiw	r28, 0x1d	; 29
    32c6:	cd bf       	out	0x3d, r28	; 61
    32c8:	de bf       	out	0x3e, r29	; 62
  cli();
    32ca:	f8 94       	cli
  // Configure the system clock
  { 
    // Enable the 32MHz internal RC oscillator and the external 32KHz oscillator
    OSC.CTRL |= (1 << OSC_RC32MEN_bp);
    32cc:	e0 e5       	ldi	r30, 0x50	; 80
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	80 81       	ld	r24, Z
    32d2:	82 60       	ori	r24, 0x02	; 2
    32d4:	80 83       	st	Z, r24
    do {} while((OSC.STATUS & (1 << OSC_RC32MRDY_bp)) != (1 << OSC_RC32MRDY_bp));
    32d6:	81 81       	ldd	r24, Z+1	; 0x01
    32d8:	81 ff       	sbrs	r24, 1
    32da:	fd cf       	rjmp	.-6      	; 0x32d6 <main+0x32>

    // Select the clock
    CCPWrite(&(CLK.CTRL),((CLK.CTRL & ~CLK_SCLKSEL_gm) | (1 << CLK_SCLKSEL0_bp)));
    32dc:	60 91 40 00 	lds	r22, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    32e0:	68 7f       	andi	r22, 0xF8	; 248
    32e2:	61 60       	ori	r22, 0x01	; 1
    32e4:	80 e4       	ldi	r24, 0x40	; 64
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	0e 94 3d 19 	call	0x327a	; 0x327a <_Z8CCPWritePVhh>
    
    // Disable the 2MHz internal RC oscillator
    OSC.CTRL &= ~(1 << OSC_RC2MEN_bp);
    32ec:	e0 e5       	ldi	r30, 0x50	; 80
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	80 81       	ld	r24, Z
    32f2:	8e 7f       	andi	r24, 0xFE	; 254
    32f4:	80 83       	st	Z, r24
  }
  
  // Disable the watchdog timer unless it's needed later. This is important because
  // sometimes the watchdog timer may have been left on...and it tends to stay on  
  wdt_disable ();
    32f6:	9d ef       	ldi	r25, 0xFD	; 253
    32f8:	88 ed       	ldi	r24, 0xD8	; 216
    32fa:	08 b6       	in	r0, 0x38	; 56
    32fc:	18 be       	out	0x38, r1	; 56
    32fe:	84 bf       	out	0x34, r24	; 52
    3300:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3304:	08 be       	out	0x38, r0	; 56

  // Configure a serial port which can be used by a task to print debugging infor-
  // mation, or to allow user interaction, or for whatever use is appropriate.  The
  // serial port will be used by the user interface task after setup is complete and
  // the task scheduler has been started by the function vTaskStartScheduler()
  rs232 ser_dev(0,&USARTE0); // Create a serial device on USART E0
    3306:	40 ea       	ldi	r20, 0xA0	; 160
    3308:	5a e0       	ldi	r21, 0x0A	; 10
    330a:	60 e0       	ldi	r22, 0x00	; 0
    330c:	70 e0       	ldi	r23, 0x00	; 0
    330e:	ce 01       	movw	r24, r28
    3310:	01 96       	adiw	r24, 0x01	; 1
    3312:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <_ZN5rs232C1EjP12USART_struct>
  ser_dev << clrscr << "FreeRTOS Xmega Testing Program" << endl << endl;
    3316:	67 e0       	ldi	r22, 0x07	; 7
    3318:	ce 01       	movw	r24, r28
    331a:	01 96       	adiw	r24, 0x01	; 1
    331c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    3320:	3c 01       	movw	r6, r24
    3322:	6f e2       	ldi	r22, 0x2F	; 47
    3324:	70 e2       	ldi	r23, 0x20	; 32
    3326:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    332a:	66 e0       	ldi	r22, 0x06	; 6
    332c:	c3 01       	movw	r24, r6
    332e:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    3332:	66 e0       	ldi	r22, 0x06	; 6
    3334:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    3338:	0f b6       	in	r0, 0x3f	; 63
    333a:	f8 94       	cli
    333c:	0f 92       	push	r0
			the_data = new_data;
    333e:	82 e0       	ldi	r24, 0x02	; 2
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	a0 e0       	ldi	r26, 0x00	; 0
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	80 93 69 21 	sts	0x2169, r24	; 0x802169 <sensor_delay>
    334a:	90 93 6a 21 	sts	0x216A, r25	; 0x80216a <sensor_delay+0x1>
    334e:	a0 93 6b 21 	sts	0x216B, r26	; 0x80216b <sensor_delay+0x2>
    3352:	b0 93 6c 21 	sts	0x216C, r27	; 0x80216c <sensor_delay+0x3>
			portEXIT_CRITICAL ();
    3356:	0f 90       	pop	r0
    3358:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	0f 92       	push	r0
			the_data = new_data;
    3360:	88 e0       	ldi	r24, 0x08	; 8
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	a0 e0       	ldi	r26, 0x00	; 0
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	80 93 65 21 	sts	0x2165, r24	; 0x802165 <microstep_scaler>
    336c:	90 93 66 21 	sts	0x2166, r25	; 0x802166 <microstep_scaler+0x1>
    3370:	a0 93 67 21 	sts	0x2167, r26	; 0x802167 <microstep_scaler+0x2>
    3374:	b0 93 68 21 	sts	0x2168, r27	; 0x802168 <microstep_scaler+0x3>
			portEXIT_CRITICAL ();
    3378:	0f 90       	pop	r0
    337a:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    337c:	0f b6       	in	r0, 0x3f	; 63
    337e:	f8 94       	cli
    3380:	0f 92       	push	r0
			the_data = new_data;
    3382:	88 ee       	ldi	r24, 0xE8	; 232
    3384:	93 e0       	ldi	r25, 0x03	; 3
    3386:	a0 e0       	ldi	r26, 0x00	; 0
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	80 93 6e 21 	sts	0x216E, r24	; 0x80216e <sensor_sample_number>
    338e:	90 93 6f 21 	sts	0x216F, r25	; 0x80216f <sensor_sample_number+0x1>
    3392:	a0 93 70 21 	sts	0x2170, r26	; 0x802170 <sensor_sample_number+0x2>
    3396:	b0 93 71 21 	sts	0x2171, r27	; 0x802171 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    339a:	0f 90       	pop	r0
    339c:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    339e:	0f b6       	in	r0, 0x3f	; 63
    33a0:	f8 94       	cli
    33a2:	0f 92       	push	r0
			the_data = new_data;
    33a4:	82 e3       	ldi	r24, 0x32	; 50
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	a0 e0       	ldi	r26, 0x00	; 0
    33aa:	b0 e0       	ldi	r27, 0x00	; 0
    33ac:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <ramp_run_span>
    33b0:	90 93 40 21 	sts	0x2140, r25	; 0x802140 <ramp_run_span+0x1>
    33b4:	a0 93 41 21 	sts	0x2141, r26	; 0x802141 <ramp_run_span+0x2>
    33b8:	b0 93 42 21 	sts	0x2142, r27	; 0x802142 <ramp_run_span+0x3>
			portEXIT_CRITICAL ();
    33bc:	0f 90       	pop	r0
    33be:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    33c0:	0f b6       	in	r0, 0x3f	; 63
    33c2:	f8 94       	cli
    33c4:	0f 92       	push	r0
			the_data = new_data;
    33c6:	8c e4       	ldi	r24, 0x4C	; 76
    33c8:	9d e1       	ldi	r25, 0x1D	; 29
    33ca:	a0 e0       	ldi	r26, 0x00	; 0
    33cc:	b0 e0       	ldi	r27, 0x00	; 0
    33ce:	80 93 39 21 	sts	0x2139, r24	; 0x802139 <gen_max_v>
    33d2:	90 93 3a 21 	sts	0x213A, r25	; 0x80213a <gen_max_v+0x1>
    33d6:	a0 93 3b 21 	sts	0x213B, r26	; 0x80213b <gen_max_v+0x2>
    33da:	b0 93 3c 21 	sts	0x213C, r27	; 0x80213c <gen_max_v+0x3>
			portEXIT_CRITICAL ();
    33de:	0f 90       	pop	r0
    33e0:	0f be       	out	0x3f, r0	; 63
  adc = new ADC(&ADCB, &(ADCB.CH0));
  sbg01 = new SBG01(adc, 6.28930818);
  #endif

  #ifdef USE_FAKE_DRIVERS
  sbg01 = new SBG01 ( ) ;
    33e2:	8a e1       	ldi	r24, 0x1A	; 26
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	0e 94 9e 2b 	call	0x573c	; 0x573c <_Znwj>
    33ea:	80 93 37 21 	sts	0x2137, r24	; 0x802137 <sbg01>
    33ee:	90 93 38 21 	sts	0x2138, r25	; 0x802138 <sbg01+0x1>
  md_y = new DM542T ( &PORTA, PIN4_bm, PIN5_bm, 8, &PORTD, &TCD0, PIN3_bm, TC_CCDINTLVL_HI_gc );
  md_z = new DM542T ( &PORTA, PIN6_bm, PIN7_bm, 8, &PORTC, &TCC0, PIN0_bm, TC_CCAINTLVL_HI_gc );
  #endif

  #ifdef USE_FAKE_DRIVERS
  md_x = new FakeDM542T ( 8 ) ;
    33f2:	88 ec       	ldi	r24, 0xC8	; 200
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	0e 94 9e 2b 	call	0x573c	; 0x573c <_Znwj>
    33fa:	3c 01       	movw	r6, r24
    33fc:	68 e0       	ldi	r22, 0x08	; 8
    33fe:	70 e0       	ldi	r23, 0x00	; 0
    3400:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <_ZN10FakeDM542TC1Ej>
    3404:	60 92 29 21 	sts	0x2129, r6	; 0x802129 <md_x>
    3408:	70 92 2a 21 	sts	0x212A, r7	; 0x80212a <md_x+0x1>
  md_y = new FakeDM542T ( 8 ) ;
    340c:	88 ec       	ldi	r24, 0xC8	; 200
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	0e 94 9e 2b 	call	0x573c	; 0x573c <_Znwj>
    3414:	3c 01       	movw	r6, r24
    3416:	68 e0       	ldi	r22, 0x08	; 8
    3418:	70 e0       	ldi	r23, 0x00	; 0
    341a:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <_ZN10FakeDM542TC1Ej>
    341e:	60 92 27 21 	sts	0x2127, r6	; 0x802127 <md_y>
    3422:	70 92 28 21 	sts	0x2128, r7	; 0x802128 <md_y+0x1>
  md_z = new FakeDM542T ( 8 ) ;
    3426:	88 ec       	ldi	r24, 0xC8	; 200
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	0e 94 9e 2b 	call	0x573c	; 0x573c <_Znwj>
    342e:	3c 01       	movw	r6, r24
    3430:	68 e0       	ldi	r22, 0x08	; 8
    3432:	70 e0       	ldi	r23, 0x00	; 0
    3434:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <_ZN10FakeDM542TC1Ej>
    3438:	60 92 25 21 	sts	0x2125, r6	; 0x802125 <md_z>
    343c:	70 92 26 21 	sts	0x2126, r7	; 0x802126 <md_z+0x1>
  lim_z1 = new DeviceDriver::LimitSwitch ( &PORTF, PIN1_bm, 0, 0, EVSYS_CHMUX_PORTF_PIN1_gc);
  lim_z2 = new DeviceDriver::LimitSwitch ( &PORTF, PIN2_bm, 0, 1, EVSYS_CHMUX_PORTF_PIN2_gc);
  #endif

  #ifdef USE_FAKE_DRIVERS
  lim_x1 = new DeviceDriver::LimitSwitch ( ) ;
    3440:	88 e0       	ldi	r24, 0x08	; 8
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	0e 94 9e 2b 	call	0x573c	; 0x573c <_Znwj>
    3448:	80 93 35 21 	sts	0x2135, r24	; 0x802135 <lim_x1>
    344c:	90 93 36 21 	sts	0x2136, r25	; 0x802136 <lim_x1+0x1>
  lim_x2 = new DeviceDriver::LimitSwitch ( ) ;
    3450:	88 e0       	ldi	r24, 0x08	; 8
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	0e 94 9e 2b 	call	0x573c	; 0x573c <_Znwj>
    3458:	80 93 33 21 	sts	0x2133, r24	; 0x802133 <lim_x2>
    345c:	90 93 34 21 	sts	0x2134, r25	; 0x802134 <lim_x2+0x1>
  lim_y1 = new DeviceDriver::LimitSwitch ( ) ;
    3460:	88 e0       	ldi	r24, 0x08	; 8
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	0e 94 9e 2b 	call	0x573c	; 0x573c <_Znwj>
    3468:	80 93 31 21 	sts	0x2131, r24	; 0x802131 <lim_y1>
    346c:	90 93 32 21 	sts	0x2132, r25	; 0x802132 <lim_y1+0x1>
  lim_y2 = new DeviceDriver::LimitSwitch ( ) ;
    3470:	88 e0       	ldi	r24, 0x08	; 8
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	0e 94 9e 2b 	call	0x573c	; 0x573c <_Znwj>
    3478:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <lim_y2>
    347c:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <lim_y2+0x1>
  lim_z1 = new DeviceDriver::LimitSwitch ( ) ;
    3480:	88 e0       	ldi	r24, 0x08	; 8
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	0e 94 9e 2b 	call	0x573c	; 0x573c <_Znwj>
    3488:	80 93 2d 21 	sts	0x212D, r24	; 0x80212d <lim_z1>
    348c:	90 93 2e 21 	sts	0x212E, r25	; 0x80212e <lim_z1+0x1>
  lim_z2 = new DeviceDriver::LimitSwitch ( ) ;
    3490:	88 e0       	ldi	r24, 0x08	; 8
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	0e 94 9e 2b 	call	0x573c	; 0x573c <_Znwj>
    3498:	80 93 2b 21 	sts	0x212B, r24	; 0x80212b <lim_z2>
    349c:	90 93 2c 21 	sts	0x212C, r25	; 0x80212c <lim_z2+0x1>
  #endif
  
  
  // The user interface is at low priority; it could have been run in the idle task
  // but it is desired to exercise the RTOS more thoroughly in this test program
  new task_user ( "UserInt", task_priority (0), 128, &ser_dev ) ;
    34a0:	83 e2       	ldi	r24, 0x23	; 35
    34a2:	91 e0       	ldi	r25, 0x01	; 1
    34a4:	0e 94 9e 2b 	call	0x573c	; 0x573c <_Znwj>
    34a8:	8e 01       	movw	r16, r28
    34aa:	0f 5f       	subi	r16, 0xFF	; 255
    34ac:	1f 4f       	sbci	r17, 0xFF	; 255
    34ae:	20 e8       	ldi	r18, 0x80	; 128
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	40 e0       	ldi	r20, 0x00	; 0
    34b4:	6e e4       	ldi	r22, 0x4E	; 78
    34b6:	70 e2       	ldi	r23, 0x20	; 32
    34b8:	0e 94 04 11 	call	0x2208	; 0x2208 <_ZN9task_userC1EPKchjP8emstream>
  
  new task_md ("MDX", task_priority(8), 128, &ser_dev, md_x, lim_x1, lim_x2, &xlocations,
  &x_max_velocity, &xmotor_on, &xmotor_complete, 8);
    34bc:	8a e4       	ldi	r24, 0x4A	; 74
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	0e 94 9e 2b 	call	0x573c	; 0x573c <_Znwj>
    34c4:	a0 90 33 21 	lds	r10, 0x2133	; 0x802133 <lim_x2>
    34c8:	b0 90 34 21 	lds	r11, 0x2134	; 0x802134 <lim_x2+0x1>
    34cc:	c0 90 35 21 	lds	r12, 0x2135	; 0x802135 <lim_x1>
    34d0:	d0 90 36 21 	lds	r13, 0x2136	; 0x802136 <lim_x1+0x1>
    34d4:	e0 90 29 21 	lds	r14, 0x2129	; 0x802129 <md_x>
    34d8:	f0 90 2a 21 	lds	r15, 0x212A	; 0x80212a <md_x+0x1>
    34dc:	1f 92       	push	r1
    34de:	68 94       	set
    34e0:	77 24       	eor	r7, r7
    34e2:	73 f8       	bld	r7, 3
    34e4:	7f 92       	push	r7
    34e6:	2a e7       	ldi	r18, 0x7A	; 122
    34e8:	31 e2       	ldi	r19, 0x21	; 33
    34ea:	3f 93       	push	r19
    34ec:	2f 93       	push	r18
    34ee:	22 ef       	ldi	r18, 0xF2	; 242
    34f0:	30 e2       	ldi	r19, 0x20	; 32
    34f2:	3f 93       	push	r19
    34f4:	2f 93       	push	r18
    34f6:	27 e5       	ldi	r18, 0x57	; 87
    34f8:	31 e2       	ldi	r19, 0x21	; 33
    34fa:	3f 93       	push	r19
    34fc:	2f 93       	push	r18
    34fe:	0f 2e       	mov	r0, r31
    3500:	fb e0       	ldi	r31, 0x0B	; 11
    3502:	8f 2e       	mov	r8, r31
    3504:	f1 e2       	ldi	r31, 0x21	; 33
    3506:	9f 2e       	mov	r9, r31
    3508:	f0 2d       	mov	r31, r0
    350a:	20 e8       	ldi	r18, 0x80	; 128
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	44 e0       	ldi	r20, 0x04	; 4
    3510:	66 e5       	ldi	r22, 0x56	; 86
    3512:	70 e2       	ldi	r23, 0x20	; 32
    3514:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN7task_mdC1EPKchjP8emstreamP6DM542TPN12DeviceDriver11LimitSwitchES8_P9frt_queueImESB_P11shared_dataIhEPSC_IbEj>
  
  new task_md ("MDY", task_priority(8), 128, &ser_dev, md_y, lim_y1, lim_y2, &ylocations,
  &y_max_velocity, &ymotor_on, &ymotor_complete, 8);
    3518:	8a e4       	ldi	r24, 0x4A	; 74
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	0e 94 9e 2b 	call	0x573c	; 0x573c <_Znwj>
    3520:	a0 90 2f 21 	lds	r10, 0x212F	; 0x80212f <lim_y2>
    3524:	b0 90 30 21 	lds	r11, 0x2130	; 0x802130 <lim_y2+0x1>
    3528:	c0 90 31 21 	lds	r12, 0x2131	; 0x802131 <lim_y1>
    352c:	d0 90 32 21 	lds	r13, 0x2132	; 0x802132 <lim_y1+0x1>
    3530:	e0 90 27 21 	lds	r14, 0x2127	; 0x802127 <md_y>
    3534:	f0 90 28 21 	lds	r15, 0x2128	; 0x802128 <md_y+0x1>
    3538:	1f 92       	push	r1
    353a:	7f 92       	push	r7
    353c:	29 e7       	ldi	r18, 0x79	; 121
    353e:	31 e2       	ldi	r19, 0x21	; 33
    3540:	3f 93       	push	r19
    3542:	2f 93       	push	r18
    3544:	21 ef       	ldi	r18, 0xF1	; 241
    3546:	30 e2       	ldi	r19, 0x20	; 32
    3548:	3f 93       	push	r19
    354a:	2f 93       	push	r18
    354c:	2d e4       	ldi	r18, 0x4D	; 77
    354e:	31 e2       	ldi	r19, 0x21	; 33
    3550:	3f 93       	push	r19
    3552:	2f 93       	push	r18
    3554:	0f 2e       	mov	r0, r31
    3556:	f1 e0       	ldi	r31, 0x01	; 1
    3558:	8f 2e       	mov	r8, r31
    355a:	f1 e2       	ldi	r31, 0x21	; 33
    355c:	9f 2e       	mov	r9, r31
    355e:	f0 2d       	mov	r31, r0
    3560:	20 e8       	ldi	r18, 0x80	; 128
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	44 e0       	ldi	r20, 0x04	; 4
    3566:	6a e5       	ldi	r22, 0x5A	; 90
    3568:	70 e2       	ldi	r23, 0x20	; 32
    356a:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN7task_mdC1EPKchjP8emstreamP6DM542TPN12DeviceDriver11LimitSwitchES8_P9frt_queueImESB_P11shared_dataIhEPSC_IbEj>
  
  new task_md ("MDZ", task_priority(8), 128, &ser_dev, md_z, lim_z1, lim_z2, &zlocations,
  &z_max_velocity, &zmotor_on, &zmotor_complete, 8);
    356e:	8a e4       	ldi	r24, 0x4A	; 74
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	0e 94 9e 2b 	call	0x573c	; 0x573c <_Znwj>
    3576:	a0 90 2b 21 	lds	r10, 0x212B	; 0x80212b <lim_z2>
    357a:	b0 90 2c 21 	lds	r11, 0x212C	; 0x80212c <lim_z2+0x1>
    357e:	c0 90 2d 21 	lds	r12, 0x212D	; 0x80212d <lim_z1>
    3582:	d0 90 2e 21 	lds	r13, 0x212E	; 0x80212e <lim_z1+0x1>
    3586:	e0 90 25 21 	lds	r14, 0x2125	; 0x802125 <md_z>
    358a:	f0 90 26 21 	lds	r15, 0x2126	; 0x802126 <md_z+0x1>
    358e:	1f 92       	push	r1
    3590:	7f 92       	push	r7
    3592:	28 e7       	ldi	r18, 0x78	; 120
    3594:	31 e2       	ldi	r19, 0x21	; 33
    3596:	3f 93       	push	r19
    3598:	2f 93       	push	r18
    359a:	20 ef       	ldi	r18, 0xF0	; 240
    359c:	30 e2       	ldi	r19, 0x20	; 32
    359e:	3f 93       	push	r19
    35a0:	2f 93       	push	r18
    35a2:	23 e4       	ldi	r18, 0x43	; 67
    35a4:	31 e2       	ldi	r19, 0x21	; 33
    35a6:	3f 93       	push	r19
    35a8:	2f 93       	push	r18
    35aa:	0f 2e       	mov	r0, r31
    35ac:	f7 ef       	ldi	r31, 0xF7	; 247
    35ae:	8f 2e       	mov	r8, r31
    35b0:	f0 e2       	ldi	r31, 0x20	; 32
    35b2:	9f 2e       	mov	r9, r31
    35b4:	f0 2d       	mov	r31, r0
    35b6:	20 e8       	ldi	r18, 0x80	; 128
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	44 e0       	ldi	r20, 0x04	; 4
    35bc:	6e e5       	ldi	r22, 0x5E	; 94
    35be:	70 e2       	ldi	r23, 0x20	; 32
    35c0:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN7task_mdC1EPKchjP8emstreamP6DM542TPN12DeviceDriver11LimitSwitchES8_P9frt_queueImESB_P11shared_dataIhEPSC_IbEj>
  //   8 );
  
  // new task_md ("MDZ", task_priority(8), 128, &ser_dev, 
  //   8 );
  
  new task_sensor ("Gardon_Gauge", task_priority(9), 500, &ser_dev, sbg01);
    35c4:	83 e2       	ldi	r24, 0x23	; 35
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	0e 94 9e 2b 	call	0x573c	; 0x573c <_Znwj>
    35cc:	e0 90 37 21 	lds	r14, 0x2137	; 0x802137 <sbg01>
    35d0:	f0 90 38 21 	lds	r15, 0x2138	; 0x802138 <sbg01+0x1>
    35d4:	24 ef       	ldi	r18, 0xF4	; 244
    35d6:	31 e0       	ldi	r19, 0x01	; 1
    35d8:	44 e0       	ldi	r20, 0x04	; 4
    35da:	62 e6       	ldi	r22, 0x62	; 98
    35dc:	70 e2       	ldi	r23, 0x20	; 32
    35de:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_ZN11task_sensorC1EPKchjP8emstreamP5SBG01>
  //new task_thermocouple ("Therm9", task_priority(6), 128, &ser_dev, therm9);
  //
  //new task_thermocouple ("Therm10", task_priority(6), 128, &ser_dev, therm10);
  
  // Enable high level interrupts and global interrupts
  PMIC_CTRL = (1 << PMIC_HILVLEN_bp | 1 << PMIC_MEDLVLEN_bp | 1 << PMIC_LOLVLEN_bp);
    35e2:	87 e0       	ldi	r24, 0x07	; 7
    35e4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
  sei();
    35e8:	78 94       	sei

    //initialization_complete.put(false);
  
  // Here's where the RTOS scheduler is started up. It should never exit as long as
  // power is on and the microcontroller isn't rebooted
  vTaskStartScheduler ();
    35ea:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <vTaskStartScheduler>
}
    35ee:	cd bf       	out	0x3d, r28	; 61
    35f0:	de bf       	out	0x3e, r29	; 62
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	6d 96       	adiw	r28, 0x1d	; 29
    35f8:	cd bf       	out	0x3d, r28	; 61
    35fa:	de bf       	out	0x3e, r29	; 62
    35fc:	df 91       	pop	r29
    35fe:	cf 91       	pop	r28
    3600:	1f 91       	pop	r17
    3602:	0f 91       	pop	r16
    3604:	ff 90       	pop	r15
    3606:	ef 90       	pop	r14
    3608:	df 90       	pop	r13
    360a:	cf 90       	pop	r12
    360c:	bf 90       	pop	r11
    360e:	af 90       	pop	r10
    3610:	9f 90       	pop	r9
    3612:	8f 90       	pop	r8
    3614:	7f 90       	pop	r7
    3616:	6f 90       	pop	r6
    3618:	08 95       	ret

0000361a <__vector_66>:

ISR(PORTA_INT0_vect)
{
    361a:	1f 92       	push	r1
    361c:	0f 92       	push	r0
    361e:	0f b6       	in	r0, 0x3f	; 63
    3620:	0f 92       	push	r0
    3622:	11 24       	eor	r1, r1
    3624:	0b b6       	in	r0, 0x3b	; 59
    3626:	0f 92       	push	r0
    3628:	2f 93       	push	r18
    362a:	3f 93       	push	r19
    362c:	4f 93       	push	r20
    362e:	5f 93       	push	r21
    3630:	6f 93       	push	r22
    3632:	7f 93       	push	r23
    3634:	8f 93       	push	r24
    3636:	9f 93       	push	r25
    3638:	af 93       	push	r26
    363a:	bf 93       	push	r27
    363c:	ef 93       	push	r30
    363e:	ff 93       	push	r31
  md_x->min_bound_interrupt_handler();
    3640:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <md_x>
    3644:	90 91 2a 21 	lds	r25, 0x212A	; 0x80212a <md_x+0x1>
    3648:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN6DM542T27min_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_x->get_direction() == 1)
    364c:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    3650:	88 23       	and	r24, r24
    3652:	79 f0       	breq	.+30     	; 0x3672 <__vector_66+0x58>
    3654:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <md_x>
    3658:	90 91 2a 21 	lds	r25, 0x212A	; 0x80212a <md_x+0x1>
    365c:	dc 01       	movw	r26, r24
    365e:	ed 91       	ld	r30, X+
    3660:	fc 91       	ld	r31, X
    3662:	06 84       	ldd	r0, Z+14	; 0x0e
    3664:	f7 85       	ldd	r31, Z+15	; 0x0f
    3666:	e0 2d       	mov	r30, r0
    3668:	19 95       	eicall
    366a:	81 30       	cpi	r24, 0x01	; 1
    366c:	11 f4       	brne	.+4      	; 0x3672 <__vector_66+0x58>
		*  default case on most small microcontrollers. 
		*  @param new_data The data which is to be written into the shared data item
		*/
		void ISR_put (data_type new_data)
		{
			the_data = new_data;
    366e:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <reset>
  {
    reset.ISR_put(true);
  }
}
    3672:	ff 91       	pop	r31
    3674:	ef 91       	pop	r30
    3676:	bf 91       	pop	r27
    3678:	af 91       	pop	r26
    367a:	9f 91       	pop	r25
    367c:	8f 91       	pop	r24
    367e:	7f 91       	pop	r23
    3680:	6f 91       	pop	r22
    3682:	5f 91       	pop	r21
    3684:	4f 91       	pop	r20
    3686:	3f 91       	pop	r19
    3688:	2f 91       	pop	r18
    368a:	0f 90       	pop	r0
    368c:	0b be       	out	0x3b, r0	; 59
    368e:	0f 90       	pop	r0
    3690:	0f be       	out	0x3f, r0	; 63
    3692:	0f 90       	pop	r0
    3694:	1f 90       	pop	r1
    3696:	18 95       	reti

00003698 <__vector_67>:

ISR(PORTA_INT1_vect)
{
    3698:	1f 92       	push	r1
    369a:	0f 92       	push	r0
    369c:	0f b6       	in	r0, 0x3f	; 63
    369e:	0f 92       	push	r0
    36a0:	11 24       	eor	r1, r1
    36a2:	0b b6       	in	r0, 0x3b	; 59
    36a4:	0f 92       	push	r0
    36a6:	2f 93       	push	r18
    36a8:	3f 93       	push	r19
    36aa:	4f 93       	push	r20
    36ac:	5f 93       	push	r21
    36ae:	6f 93       	push	r22
    36b0:	7f 93       	push	r23
    36b2:	8f 93       	push	r24
    36b4:	9f 93       	push	r25
    36b6:	af 93       	push	r26
    36b8:	bf 93       	push	r27
    36ba:	ef 93       	push	r30
    36bc:	ff 93       	push	r31
  md_x->max_bound_interrupt_handler();
    36be:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <md_x>
    36c2:	90 91 2a 21 	lds	r25, 0x212A	; 0x80212a <md_x+0x1>
    36c6:	0e 94 b9 07 	call	0xf72	; 0xf72 <_ZN6DM542T27max_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_x->get_direction() == 0)
    36ca:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    36ce:	88 23       	and	r24, r24
    36d0:	81 f0       	breq	.+32     	; 0x36f2 <__vector_67+0x5a>
    36d2:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <md_x>
    36d6:	90 91 2a 21 	lds	r25, 0x212A	; 0x80212a <md_x+0x1>
    36da:	dc 01       	movw	r26, r24
    36dc:	ed 91       	ld	r30, X+
    36de:	fc 91       	ld	r31, X
    36e0:	06 84       	ldd	r0, Z+14	; 0x0e
    36e2:	f7 85       	ldd	r31, Z+15	; 0x0f
    36e4:	e0 2d       	mov	r30, r0
    36e6:	19 95       	eicall
    36e8:	81 11       	cpse	r24, r1
    36ea:	03 c0       	rjmp	.+6      	; 0x36f2 <__vector_67+0x5a>
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <reset>
  {
    reset.ISR_put(true);
  }
}
    36f2:	ff 91       	pop	r31
    36f4:	ef 91       	pop	r30
    36f6:	bf 91       	pop	r27
    36f8:	af 91       	pop	r26
    36fa:	9f 91       	pop	r25
    36fc:	8f 91       	pop	r24
    36fe:	7f 91       	pop	r23
    3700:	6f 91       	pop	r22
    3702:	5f 91       	pop	r21
    3704:	4f 91       	pop	r20
    3706:	3f 91       	pop	r19
    3708:	2f 91       	pop	r18
    370a:	0f 90       	pop	r0
    370c:	0b be       	out	0x3b, r0	; 59
    370e:	0f 90       	pop	r0
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	0f 90       	pop	r0
    3714:	1f 90       	pop	r1
    3716:	18 95       	reti

00003718 <__vector_43>:

ISR(PORTE_INT0_vect)
{
    3718:	1f 92       	push	r1
    371a:	0f 92       	push	r0
    371c:	0f b6       	in	r0, 0x3f	; 63
    371e:	0f 92       	push	r0
    3720:	11 24       	eor	r1, r1
    3722:	0b b6       	in	r0, 0x3b	; 59
    3724:	0f 92       	push	r0
    3726:	2f 93       	push	r18
    3728:	3f 93       	push	r19
    372a:	4f 93       	push	r20
    372c:	5f 93       	push	r21
    372e:	6f 93       	push	r22
    3730:	7f 93       	push	r23
    3732:	8f 93       	push	r24
    3734:	9f 93       	push	r25
    3736:	af 93       	push	r26
    3738:	bf 93       	push	r27
    373a:	ef 93       	push	r30
    373c:	ff 93       	push	r31
  md_y->min_bound_interrupt_handler();
    373e:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <md_y>
    3742:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <md_y+0x1>
    3746:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN6DM542T27min_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_y->get_direction() == 1)
    374a:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    374e:	88 23       	and	r24, r24
    3750:	79 f0       	breq	.+30     	; 0x3770 <__vector_43+0x58>
    3752:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <md_y>
    3756:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <md_y+0x1>
    375a:	dc 01       	movw	r26, r24
    375c:	ed 91       	ld	r30, X+
    375e:	fc 91       	ld	r31, X
    3760:	06 84       	ldd	r0, Z+14	; 0x0e
    3762:	f7 85       	ldd	r31, Z+15	; 0x0f
    3764:	e0 2d       	mov	r30, r0
    3766:	19 95       	eicall
    3768:	81 30       	cpi	r24, 0x01	; 1
    376a:	11 f4       	brne	.+4      	; 0x3770 <__vector_43+0x58>
    376c:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <reset>
  {
    reset.ISR_put(true);
  }
}
    3770:	ff 91       	pop	r31
    3772:	ef 91       	pop	r30
    3774:	bf 91       	pop	r27
    3776:	af 91       	pop	r26
    3778:	9f 91       	pop	r25
    377a:	8f 91       	pop	r24
    377c:	7f 91       	pop	r23
    377e:	6f 91       	pop	r22
    3780:	5f 91       	pop	r21
    3782:	4f 91       	pop	r20
    3784:	3f 91       	pop	r19
    3786:	2f 91       	pop	r18
    3788:	0f 90       	pop	r0
    378a:	0b be       	out	0x3b, r0	; 59
    378c:	0f 90       	pop	r0
    378e:	0f be       	out	0x3f, r0	; 63
    3790:	0f 90       	pop	r0
    3792:	1f 90       	pop	r1
    3794:	18 95       	reti

00003796 <__vector_44>:

ISR(PORTE_INT1_vect)
{
    3796:	1f 92       	push	r1
    3798:	0f 92       	push	r0
    379a:	0f b6       	in	r0, 0x3f	; 63
    379c:	0f 92       	push	r0
    379e:	11 24       	eor	r1, r1
    37a0:	0b b6       	in	r0, 0x3b	; 59
    37a2:	0f 92       	push	r0
    37a4:	2f 93       	push	r18
    37a6:	3f 93       	push	r19
    37a8:	4f 93       	push	r20
    37aa:	5f 93       	push	r21
    37ac:	6f 93       	push	r22
    37ae:	7f 93       	push	r23
    37b0:	8f 93       	push	r24
    37b2:	9f 93       	push	r25
    37b4:	af 93       	push	r26
    37b6:	bf 93       	push	r27
    37b8:	ef 93       	push	r30
    37ba:	ff 93       	push	r31
  md_y->max_bound_interrupt_handler();
    37bc:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <md_y>
    37c0:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <md_y+0x1>
    37c4:	0e 94 b9 07 	call	0xf72	; 0xf72 <_ZN6DM542T27max_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_y->get_direction() == 0)
    37c8:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    37cc:	88 23       	and	r24, r24
    37ce:	81 f0       	breq	.+32     	; 0x37f0 <__vector_44+0x5a>
    37d0:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <md_y>
    37d4:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <md_y+0x1>
    37d8:	dc 01       	movw	r26, r24
    37da:	ed 91       	ld	r30, X+
    37dc:	fc 91       	ld	r31, X
    37de:	06 84       	ldd	r0, Z+14	; 0x0e
    37e0:	f7 85       	ldd	r31, Z+15	; 0x0f
    37e2:	e0 2d       	mov	r30, r0
    37e4:	19 95       	eicall
    37e6:	81 11       	cpse	r24, r1
    37e8:	03 c0       	rjmp	.+6      	; 0x37f0 <__vector_44+0x5a>
    37ea:	81 e0       	ldi	r24, 0x01	; 1
    37ec:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <reset>
  {
    reset.ISR_put(true);
  }
}
    37f0:	ff 91       	pop	r31
    37f2:	ef 91       	pop	r30
    37f4:	bf 91       	pop	r27
    37f6:	af 91       	pop	r26
    37f8:	9f 91       	pop	r25
    37fa:	8f 91       	pop	r24
    37fc:	7f 91       	pop	r23
    37fe:	6f 91       	pop	r22
    3800:	5f 91       	pop	r21
    3802:	4f 91       	pop	r20
    3804:	3f 91       	pop	r19
    3806:	2f 91       	pop	r18
    3808:	0f 90       	pop	r0
    380a:	0b be       	out	0x3b, r0	; 59
    380c:	0f 90       	pop	r0
    380e:	0f be       	out	0x3f, r0	; 63
    3810:	0f 90       	pop	r0
    3812:	1f 90       	pop	r1
    3814:	18 95       	reti

00003816 <__vector_104>:

ISR(PORTF_INT0_vect)
{
    3816:	1f 92       	push	r1
    3818:	0f 92       	push	r0
    381a:	0f b6       	in	r0, 0x3f	; 63
    381c:	0f 92       	push	r0
    381e:	11 24       	eor	r1, r1
    3820:	0b b6       	in	r0, 0x3b	; 59
    3822:	0f 92       	push	r0
    3824:	2f 93       	push	r18
    3826:	3f 93       	push	r19
    3828:	4f 93       	push	r20
    382a:	5f 93       	push	r21
    382c:	6f 93       	push	r22
    382e:	7f 93       	push	r23
    3830:	8f 93       	push	r24
    3832:	9f 93       	push	r25
    3834:	af 93       	push	r26
    3836:	bf 93       	push	r27
    3838:	ef 93       	push	r30
    383a:	ff 93       	push	r31
  md_z->min_bound_interrupt_handler();
    383c:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <md_z>
    3840:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <md_z+0x1>
    3844:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN6DM542T27min_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_z->get_direction() == 1)
    3848:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    384c:	88 23       	and	r24, r24
    384e:	79 f0       	breq	.+30     	; 0x386e <__vector_104+0x58>
    3850:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <md_z>
    3854:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <md_z+0x1>
    3858:	dc 01       	movw	r26, r24
    385a:	ed 91       	ld	r30, X+
    385c:	fc 91       	ld	r31, X
    385e:	06 84       	ldd	r0, Z+14	; 0x0e
    3860:	f7 85       	ldd	r31, Z+15	; 0x0f
    3862:	e0 2d       	mov	r30, r0
    3864:	19 95       	eicall
    3866:	81 30       	cpi	r24, 0x01	; 1
    3868:	11 f4       	brne	.+4      	; 0x386e <__vector_104+0x58>
    386a:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <reset>
  {
    reset.ISR_put(true);
  }
}
    386e:	ff 91       	pop	r31
    3870:	ef 91       	pop	r30
    3872:	bf 91       	pop	r27
    3874:	af 91       	pop	r26
    3876:	9f 91       	pop	r25
    3878:	8f 91       	pop	r24
    387a:	7f 91       	pop	r23
    387c:	6f 91       	pop	r22
    387e:	5f 91       	pop	r21
    3880:	4f 91       	pop	r20
    3882:	3f 91       	pop	r19
    3884:	2f 91       	pop	r18
    3886:	0f 90       	pop	r0
    3888:	0b be       	out	0x3b, r0	; 59
    388a:	0f 90       	pop	r0
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	0f 90       	pop	r0
    3890:	1f 90       	pop	r1
    3892:	18 95       	reti

00003894 <__vector_105>:

ISR(PORTF_INT1_vect)
{
    3894:	1f 92       	push	r1
    3896:	0f 92       	push	r0
    3898:	0f b6       	in	r0, 0x3f	; 63
    389a:	0f 92       	push	r0
    389c:	11 24       	eor	r1, r1
    389e:	0b b6       	in	r0, 0x3b	; 59
    38a0:	0f 92       	push	r0
    38a2:	2f 93       	push	r18
    38a4:	3f 93       	push	r19
    38a6:	4f 93       	push	r20
    38a8:	5f 93       	push	r21
    38aa:	6f 93       	push	r22
    38ac:	7f 93       	push	r23
    38ae:	8f 93       	push	r24
    38b0:	9f 93       	push	r25
    38b2:	af 93       	push	r26
    38b4:	bf 93       	push	r27
    38b6:	ef 93       	push	r30
    38b8:	ff 93       	push	r31
  md_z->max_bound_interrupt_handler();
    38ba:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <md_z>
    38be:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <md_z+0x1>
    38c2:	0e 94 b9 07 	call	0xf72	; 0xf72 <_ZN6DM542T27max_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_z->get_direction() == 0)
    38c6:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    38ca:	88 23       	and	r24, r24
    38cc:	81 f0       	breq	.+32     	; 0x38ee <__vector_105+0x5a>
    38ce:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <md_z>
    38d2:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <md_z+0x1>
    38d6:	dc 01       	movw	r26, r24
    38d8:	ed 91       	ld	r30, X+
    38da:	fc 91       	ld	r31, X
    38dc:	06 84       	ldd	r0, Z+14	; 0x0e
    38de:	f7 85       	ldd	r31, Z+15	; 0x0f
    38e0:	e0 2d       	mov	r30, r0
    38e2:	19 95       	eicall
    38e4:	81 11       	cpse	r24, r1
    38e6:	03 c0       	rjmp	.+6      	; 0x38ee <__vector_105+0x5a>
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <reset>
  {
    reset.ISR_put(true);
  }
}
    38ee:	ff 91       	pop	r31
    38f0:	ef 91       	pop	r30
    38f2:	bf 91       	pop	r27
    38f4:	af 91       	pop	r26
    38f6:	9f 91       	pop	r25
    38f8:	8f 91       	pop	r24
    38fa:	7f 91       	pop	r23
    38fc:	6f 91       	pop	r22
    38fe:	5f 91       	pop	r21
    3900:	4f 91       	pop	r20
    3902:	3f 91       	pop	r19
    3904:	2f 91       	pop	r18
    3906:	0f 90       	pop	r0
    3908:	0b be       	out	0x3b, r0	; 59
    390a:	0f 90       	pop	r0
    390c:	0f be       	out	0x3f, r0	; 63
    390e:	0f 90       	pop	r0
    3910:	1f 90       	pop	r1
    3912:	18 95       	reti

00003914 <__vector_85>:

ISR(TCD1_CCA_vect)
{
    3914:	1f 92       	push	r1
    3916:	0f 92       	push	r0
    3918:	0f b6       	in	r0, 0x3f	; 63
    391a:	0f 92       	push	r0
    391c:	11 24       	eor	r1, r1
    391e:	0b b6       	in	r0, 0x3b	; 59
    3920:	0f 92       	push	r0
    3922:	2f 93       	push	r18
    3924:	3f 93       	push	r19
    3926:	4f 93       	push	r20
    3928:	5f 93       	push	r21
    392a:	6f 93       	push	r22
    392c:	7f 93       	push	r23
    392e:	8f 93       	push	r24
    3930:	9f 93       	push	r25
    3932:	af 93       	push	r26
    3934:	bf 93       	push	r27
    3936:	ef 93       	push	r30
    3938:	ff 93       	push	r31
  md_x->set_signal_low();
    393a:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <md_x>
    393e:	90 91 2a 21 	lds	r25, 0x212A	; 0x80212a <md_x+0x1>
    3942:	dc 01       	movw	r26, r24
    3944:	ed 91       	ld	r30, X+
    3946:	fc 91       	ld	r31, X
    3948:	02 88       	ldd	r0, Z+18	; 0x12
    394a:	f3 89       	ldd	r31, Z+19	; 0x13
    394c:	e0 2d       	mov	r30, r0
    394e:	19 95       	eicall
}
    3950:	ff 91       	pop	r31
    3952:	ef 91       	pop	r30
    3954:	bf 91       	pop	r27
    3956:	af 91       	pop	r26
    3958:	9f 91       	pop	r25
    395a:	8f 91       	pop	r24
    395c:	7f 91       	pop	r23
    395e:	6f 91       	pop	r22
    3960:	5f 91       	pop	r21
    3962:	4f 91       	pop	r20
    3964:	3f 91       	pop	r19
    3966:	2f 91       	pop	r18
    3968:	0f 90       	pop	r0
    396a:	0b be       	out	0x3b, r0	; 59
    396c:	0f 90       	pop	r0
    396e:	0f be       	out	0x3f, r0	; 63
    3970:	0f 90       	pop	r0
    3972:	1f 90       	pop	r1
    3974:	18 95       	reti

00003976 <__vector_83>:

ISR(TCD1_OVF_vect)
{
    3976:	1f 92       	push	r1
    3978:	0f 92       	push	r0
    397a:	0f b6       	in	r0, 0x3f	; 63
    397c:	0f 92       	push	r0
    397e:	11 24       	eor	r1, r1
    3980:	0b b6       	in	r0, 0x3b	; 59
    3982:	0f 92       	push	r0
    3984:	2f 93       	push	r18
    3986:	3f 93       	push	r19
    3988:	4f 93       	push	r20
    398a:	5f 93       	push	r21
    398c:	6f 93       	push	r22
    398e:	7f 93       	push	r23
    3990:	8f 93       	push	r24
    3992:	9f 93       	push	r25
    3994:	af 93       	push	r26
    3996:	bf 93       	push	r27
    3998:	ef 93       	push	r30
    399a:	ff 93       	push	r31
  md_x->take_step();
    399c:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <md_x>
    39a0:	90 91 2a 21 	lds	r25, 0x212A	; 0x80212a <md_x+0x1>
    39a4:	dc 01       	movw	r26, r24
    39a6:	ed 91       	ld	r30, X+
    39a8:	fc 91       	ld	r31, X
    39aa:	00 88       	ldd	r0, Z+16	; 0x10
    39ac:	f1 89       	ldd	r31, Z+17	; 0x11
    39ae:	e0 2d       	mov	r30, r0
    39b0:	19 95       	eicall
}
    39b2:	ff 91       	pop	r31
    39b4:	ef 91       	pop	r30
    39b6:	bf 91       	pop	r27
    39b8:	af 91       	pop	r26
    39ba:	9f 91       	pop	r25
    39bc:	8f 91       	pop	r24
    39be:	7f 91       	pop	r23
    39c0:	6f 91       	pop	r22
    39c2:	5f 91       	pop	r21
    39c4:	4f 91       	pop	r20
    39c6:	3f 91       	pop	r19
    39c8:	2f 91       	pop	r18
    39ca:	0f 90       	pop	r0
    39cc:	0b be       	out	0x3b, r0	; 59
    39ce:	0f 90       	pop	r0
    39d0:	0f be       	out	0x3f, r0	; 63
    39d2:	0f 90       	pop	r0
    39d4:	1f 90       	pop	r1
    39d6:	18 95       	reti

000039d8 <__vector_82>:

ISR(TCD0_CCD_vect)
{
    39d8:	1f 92       	push	r1
    39da:	0f 92       	push	r0
    39dc:	0f b6       	in	r0, 0x3f	; 63
    39de:	0f 92       	push	r0
    39e0:	11 24       	eor	r1, r1
    39e2:	0b b6       	in	r0, 0x3b	; 59
    39e4:	0f 92       	push	r0
    39e6:	2f 93       	push	r18
    39e8:	3f 93       	push	r19
    39ea:	4f 93       	push	r20
    39ec:	5f 93       	push	r21
    39ee:	6f 93       	push	r22
    39f0:	7f 93       	push	r23
    39f2:	8f 93       	push	r24
    39f4:	9f 93       	push	r25
    39f6:	af 93       	push	r26
    39f8:	bf 93       	push	r27
    39fa:	ef 93       	push	r30
    39fc:	ff 93       	push	r31
  md_y->set_signal_low();
    39fe:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <md_y>
    3a02:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <md_y+0x1>
    3a06:	dc 01       	movw	r26, r24
    3a08:	ed 91       	ld	r30, X+
    3a0a:	fc 91       	ld	r31, X
    3a0c:	02 88       	ldd	r0, Z+18	; 0x12
    3a0e:	f3 89       	ldd	r31, Z+19	; 0x13
    3a10:	e0 2d       	mov	r30, r0
    3a12:	19 95       	eicall
}
    3a14:	ff 91       	pop	r31
    3a16:	ef 91       	pop	r30
    3a18:	bf 91       	pop	r27
    3a1a:	af 91       	pop	r26
    3a1c:	9f 91       	pop	r25
    3a1e:	8f 91       	pop	r24
    3a20:	7f 91       	pop	r23
    3a22:	6f 91       	pop	r22
    3a24:	5f 91       	pop	r21
    3a26:	4f 91       	pop	r20
    3a28:	3f 91       	pop	r19
    3a2a:	2f 91       	pop	r18
    3a2c:	0f 90       	pop	r0
    3a2e:	0b be       	out	0x3b, r0	; 59
    3a30:	0f 90       	pop	r0
    3a32:	0f be       	out	0x3f, r0	; 63
    3a34:	0f 90       	pop	r0
    3a36:	1f 90       	pop	r1
    3a38:	18 95       	reti

00003a3a <__vector_77>:

ISR(TCD0_OVF_vect)
{
    3a3a:	1f 92       	push	r1
    3a3c:	0f 92       	push	r0
    3a3e:	0f b6       	in	r0, 0x3f	; 63
    3a40:	0f 92       	push	r0
    3a42:	11 24       	eor	r1, r1
    3a44:	0b b6       	in	r0, 0x3b	; 59
    3a46:	0f 92       	push	r0
    3a48:	2f 93       	push	r18
    3a4a:	3f 93       	push	r19
    3a4c:	4f 93       	push	r20
    3a4e:	5f 93       	push	r21
    3a50:	6f 93       	push	r22
    3a52:	7f 93       	push	r23
    3a54:	8f 93       	push	r24
    3a56:	9f 93       	push	r25
    3a58:	af 93       	push	r26
    3a5a:	bf 93       	push	r27
    3a5c:	ef 93       	push	r30
    3a5e:	ff 93       	push	r31
  md_y->take_step();
    3a60:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <md_y>
    3a64:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <md_y+0x1>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	ed 91       	ld	r30, X+
    3a6c:	fc 91       	ld	r31, X
    3a6e:	00 88       	ldd	r0, Z+16	; 0x10
    3a70:	f1 89       	ldd	r31, Z+17	; 0x11
    3a72:	e0 2d       	mov	r30, r0
    3a74:	19 95       	eicall
}
    3a76:	ff 91       	pop	r31
    3a78:	ef 91       	pop	r30
    3a7a:	bf 91       	pop	r27
    3a7c:	af 91       	pop	r26
    3a7e:	9f 91       	pop	r25
    3a80:	8f 91       	pop	r24
    3a82:	7f 91       	pop	r23
    3a84:	6f 91       	pop	r22
    3a86:	5f 91       	pop	r21
    3a88:	4f 91       	pop	r20
    3a8a:	3f 91       	pop	r19
    3a8c:	2f 91       	pop	r18
    3a8e:	0f 90       	pop	r0
    3a90:	0b be       	out	0x3b, r0	; 59
    3a92:	0f 90       	pop	r0
    3a94:	0f be       	out	0x3f, r0	; 63
    3a96:	0f 90       	pop	r0
    3a98:	1f 90       	pop	r1
    3a9a:	18 95       	reti

00003a9c <__vector_16>:

ISR(TCC0_CCA_vect)
{
    3a9c:	1f 92       	push	r1
    3a9e:	0f 92       	push	r0
    3aa0:	0f b6       	in	r0, 0x3f	; 63
    3aa2:	0f 92       	push	r0
    3aa4:	11 24       	eor	r1, r1
    3aa6:	0b b6       	in	r0, 0x3b	; 59
    3aa8:	0f 92       	push	r0
    3aaa:	2f 93       	push	r18
    3aac:	3f 93       	push	r19
    3aae:	4f 93       	push	r20
    3ab0:	5f 93       	push	r21
    3ab2:	6f 93       	push	r22
    3ab4:	7f 93       	push	r23
    3ab6:	8f 93       	push	r24
    3ab8:	9f 93       	push	r25
    3aba:	af 93       	push	r26
    3abc:	bf 93       	push	r27
    3abe:	ef 93       	push	r30
    3ac0:	ff 93       	push	r31
  md_z->set_signal_low();
    3ac2:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <md_z>
    3ac6:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <md_z+0x1>
    3aca:	dc 01       	movw	r26, r24
    3acc:	ed 91       	ld	r30, X+
    3ace:	fc 91       	ld	r31, X
    3ad0:	02 88       	ldd	r0, Z+18	; 0x12
    3ad2:	f3 89       	ldd	r31, Z+19	; 0x13
    3ad4:	e0 2d       	mov	r30, r0
    3ad6:	19 95       	eicall
}
    3ad8:	ff 91       	pop	r31
    3ada:	ef 91       	pop	r30
    3adc:	bf 91       	pop	r27
    3ade:	af 91       	pop	r26
    3ae0:	9f 91       	pop	r25
    3ae2:	8f 91       	pop	r24
    3ae4:	7f 91       	pop	r23
    3ae6:	6f 91       	pop	r22
    3ae8:	5f 91       	pop	r21
    3aea:	4f 91       	pop	r20
    3aec:	3f 91       	pop	r19
    3aee:	2f 91       	pop	r18
    3af0:	0f 90       	pop	r0
    3af2:	0b be       	out	0x3b, r0	; 59
    3af4:	0f 90       	pop	r0
    3af6:	0f be       	out	0x3f, r0	; 63
    3af8:	0f 90       	pop	r0
    3afa:	1f 90       	pop	r1
    3afc:	18 95       	reti

00003afe <__vector_14>:

ISR(TCC0_OVF_vect)
{
    3afe:	1f 92       	push	r1
    3b00:	0f 92       	push	r0
    3b02:	0f b6       	in	r0, 0x3f	; 63
    3b04:	0f 92       	push	r0
    3b06:	11 24       	eor	r1, r1
    3b08:	0b b6       	in	r0, 0x3b	; 59
    3b0a:	0f 92       	push	r0
    3b0c:	2f 93       	push	r18
    3b0e:	3f 93       	push	r19
    3b10:	4f 93       	push	r20
    3b12:	5f 93       	push	r21
    3b14:	6f 93       	push	r22
    3b16:	7f 93       	push	r23
    3b18:	8f 93       	push	r24
    3b1a:	9f 93       	push	r25
    3b1c:	af 93       	push	r26
    3b1e:	bf 93       	push	r27
    3b20:	ef 93       	push	r30
    3b22:	ff 93       	push	r31
  md_z->take_step();
    3b24:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <md_z>
    3b28:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <md_z+0x1>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	ed 91       	ld	r30, X+
    3b30:	fc 91       	ld	r31, X
    3b32:	00 88       	ldd	r0, Z+16	; 0x10
    3b34:	f1 89       	ldd	r31, Z+17	; 0x11
    3b36:	e0 2d       	mov	r30, r0
    3b38:	19 95       	eicall
    3b3a:	ff 91       	pop	r31
    3b3c:	ef 91       	pop	r30
    3b3e:	bf 91       	pop	r27
    3b40:	af 91       	pop	r26
    3b42:	9f 91       	pop	r25
    3b44:	8f 91       	pop	r24
    3b46:	7f 91       	pop	r23
    3b48:	6f 91       	pop	r22
    3b4a:	5f 91       	pop	r21
    3b4c:	4f 91       	pop	r20
    3b4e:	3f 91       	pop	r19
    3b50:	2f 91       	pop	r18
    3b52:	0f 90       	pop	r0
    3b54:	0b be       	out	0x3b, r0	; 59
    3b56:	0f 90       	pop	r0
    3b58:	0f be       	out	0x3f, r0	; 63
    3b5a:	0f 90       	pop	r0
    3b5c:	1f 90       	pop	r1
    3b5e:	18 95       	reti

00003b60 <_ZN9frt_queueImEC1EhP8emstreamm>:
 *  @param p_ser_dev Pointer to a serial device to be used for debugging printouts
 *                   (Default: NULL)
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
    3b60:	cf 92       	push	r12
    3b62:	df 92       	push	r13
    3b64:	ef 92       	push	r14
    3b66:	ff 92       	push	r15
    3b68:	0f 93       	push	r16
    3b6a:	1f 93       	push	r17
    3b6c:	cf 93       	push	r28
    3b6e:	df 93       	push	r29
    3b70:	ec 01       	movw	r28, r24
    3b72:	86 2f       	mov	r24, r22
    3b74:	68 01       	movw	r12, r16
    3b76:	79 01       	movw	r14, r18

template <class data_type>
frt_base_queue<data_type>::frt_base_queue (emstream* p_ser_dev)
{
	// Save the pointer to a serial devide so it may be used for debugging
	p_serial = p_ser_dev;
    3b78:	4a 83       	std	Y+2, r20	; 0x02
    3b7a:	5b 83       	std	Y+3, r21	; 0x03
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    3b7c:	2d e8       	ldi	r18, 0x8D	; 141
    3b7e:	30 e2       	ldi	r19, 0x20	; 32
    3b80:	28 83       	st	Y, r18
    3b82:	39 83       	std	Y+1, r19	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    3b84:	40 e0       	ldi	r20, 0x00	; 0
    3b86:	64 e0       	ldi	r22, 0x04	; 4
    3b88:	0e 94 0b 22 	call	0x4416	; 0x4416 <xQueueGenericCreate>
    3b8c:	8c 83       	std	Y+4, r24	; 0x04
    3b8e:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    3b90:	ce 82       	std	Y+6, r12	; 0x06
    3b92:	df 82       	std	Y+7, r13	; 0x07
    3b94:	e8 86       	std	Y+8, r14	; 0x08
    3b96:	f9 86       	std	Y+9, r15	; 0x09
	if (handle == 0)
	{
		DBG (p_ser_dev, PMS ("ERROR creating ") << queue_size << PMS("x") 
			 << sizeof (data_type) << PMS ("B queue #") << handle << endl);
	}
}
    3b98:	df 91       	pop	r29
    3b9a:	cf 91       	pop	r28
    3b9c:	1f 91       	pop	r17
    3b9e:	0f 91       	pop	r16
    3ba0:	ff 90       	pop	r15
    3ba2:	ef 90       	pop	r14
    3ba4:	df 90       	pop	r13
    3ba6:	cf 90       	pop	r12
    3ba8:	08 95       	ret

00003baa <_GLOBAL__sub_I_counter>:
    3baa:	0f 93       	push	r16
    3bac:	1f 93       	push	r17
shared_data<bool> emergency_shutdown;
shared_data<bool> next_node;
shared_data<uint16_t> current_node;
shared_data<uint16_t> total_nodes;
shared_data<bool> pause;
frt_queue<uint32_t> x_max_velocity(50,NULL,10);
    3bae:	0a e0       	ldi	r16, 0x0A	; 10
    3bb0:	10 e0       	ldi	r17, 0x00	; 0
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	40 e0       	ldi	r20, 0x00	; 0
    3bb8:	50 e0       	ldi	r21, 0x00	; 0
    3bba:	62 e3       	ldi	r22, 0x32	; 50
    3bbc:	87 e5       	ldi	r24, 0x57	; 87
    3bbe:	91 e2       	ldi	r25, 0x21	; 33
    3bc0:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> y_max_velocity(50,NULL,10);
    3bc4:	0a e0       	ldi	r16, 0x0A	; 10
    3bc6:	10 e0       	ldi	r17, 0x00	; 0
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	40 e0       	ldi	r20, 0x00	; 0
    3bce:	50 e0       	ldi	r21, 0x00	; 0
    3bd0:	62 e3       	ldi	r22, 0x32	; 50
    3bd2:	8d e4       	ldi	r24, 0x4D	; 77
    3bd4:	91 e2       	ldi	r25, 0x21	; 33
    3bd6:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> z_max_velocity(50,NULL,10);
    3bda:	0a e0       	ldi	r16, 0x0A	; 10
    3bdc:	10 e0       	ldi	r17, 0x00	; 0
    3bde:	20 e0       	ldi	r18, 0x00	; 0
    3be0:	30 e0       	ldi	r19, 0x00	; 0
    3be2:	40 e0       	ldi	r20, 0x00	; 0
    3be4:	50 e0       	ldi	r21, 0x00	; 0
    3be6:	62 e3       	ldi	r22, 0x32	; 50
    3be8:	83 e4       	ldi	r24, 0x43	; 67
    3bea:	91 e2       	ldi	r25, 0x21	; 33
    3bec:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <_ZN9frt_queueImEC1EhP8emstreamm>
InterruptTimer* timer_C0_pin0;
DM542T* md_x;
DM542T* md_y;
DM542T* md_z;

frt_text_queue print_ser_queue (32, NULL, 10);
    3bf0:	0a e0       	ldi	r16, 0x0A	; 10
    3bf2:	10 e0       	ldi	r17, 0x00	; 0
    3bf4:	20 e0       	ldi	r18, 0x00	; 0
    3bf6:	30 e0       	ldi	r19, 0x00	; 0
    3bf8:	40 e0       	ldi	r20, 0x00	; 0
    3bfa:	50 e0       	ldi	r21, 0x00	; 0
    3bfc:	60 e2       	ldi	r22, 0x20	; 32
    3bfe:	70 e0       	ldi	r23, 0x00	; 0
    3c00:	85 e1       	ldi	r24, 0x15	; 21
    3c02:	91 e2       	ldi	r25, 0x21	; 33
    3c04:	0e 94 6f 2b 	call	0x56de	; 0x56de <_ZN14frt_text_queueC1EjP8emstreamm>

frt_queue<uint32_t> xlocations(50,NULL,10);
    3c08:	0a e0       	ldi	r16, 0x0A	; 10
    3c0a:	10 e0       	ldi	r17, 0x00	; 0
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	40 e0       	ldi	r20, 0x00	; 0
    3c12:	50 e0       	ldi	r21, 0x00	; 0
    3c14:	62 e3       	ldi	r22, 0x32	; 50
    3c16:	8b e0       	ldi	r24, 0x0B	; 11
    3c18:	91 e2       	ldi	r25, 0x21	; 33
    3c1a:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> ylocations(50,NULL,10);
    3c1e:	0a e0       	ldi	r16, 0x0A	; 10
    3c20:	10 e0       	ldi	r17, 0x00	; 0
    3c22:	20 e0       	ldi	r18, 0x00	; 0
    3c24:	30 e0       	ldi	r19, 0x00	; 0
    3c26:	40 e0       	ldi	r20, 0x00	; 0
    3c28:	50 e0       	ldi	r21, 0x00	; 0
    3c2a:	62 e3       	ldi	r22, 0x32	; 50
    3c2c:	81 e0       	ldi	r24, 0x01	; 1
    3c2e:	91 e2       	ldi	r25, 0x21	; 33
    3c30:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> zlocations(50,NULL,10);
    3c34:	0a e0       	ldi	r16, 0x0A	; 10
    3c36:	10 e0       	ldi	r17, 0x00	; 0
    3c38:	20 e0       	ldi	r18, 0x00	; 0
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	40 e0       	ldi	r20, 0x00	; 0
    3c3e:	50 e0       	ldi	r21, 0x00	; 0
    3c40:	62 e3       	ldi	r22, 0x32	; 50
    3c42:	87 ef       	ldi	r24, 0xF7	; 247
    3c44:	90 e2       	ldi	r25, 0x20	; 32
    3c46:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <_ZN9frt_queueImEC1EhP8emstreamm>
}

ISR(TCC0_OVF_vect)
{
  md_z->take_step();
    3c4a:	1f 91       	pop	r17
    3c4c:	0f 91       	pop	r16
    3c4e:	08 95       	ret

00003c50 <pvPortMalloc>:
    3c50:	0f 93       	push	r16
    3c52:	1f 93       	push	r17
    3c54:	cf 93       	push	r28
    3c56:	df 93       	push	r29
    3c58:	ec 01       	movw	r28, r24
    3c5a:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <vTaskSuspendAll>
    3c5e:	80 91 7b 21 	lds	r24, 0x217B	; 0x80217b <xHeapHasBeenInitialised.4146>
    3c62:	81 11       	cpse	r24, r1
    3c64:	1d c0       	rjmp	.+58     	; 0x3ca0 <pvPortMalloc+0x50>
    3c66:	a0 e8       	ldi	r26, 0x80	; 128
    3c68:	b1 e2       	ldi	r27, 0x21	; 33
    3c6a:	e4 e8       	ldi	r30, 0x84	; 132
    3c6c:	f1 e2       	ldi	r31, 0x21	; 33
    3c6e:	ed 93       	st	X+, r30
    3c70:	fc 93       	st	X, r31
    3c72:	11 97       	sbiw	r26, 0x01	; 1
    3c74:	12 96       	adiw	r26, 0x02	; 2
    3c76:	1d 92       	st	X+, r1
    3c78:	1c 92       	st	X, r1
    3c7a:	13 97       	sbiw	r26, 0x03	; 3
    3c7c:	ac e7       	ldi	r26, 0x7C	; 124
    3c7e:	b1 e2       	ldi	r27, 0x21	; 33
    3c80:	8f ef       	ldi	r24, 0xFF	; 255
    3c82:	9f e1       	ldi	r25, 0x1F	; 31
    3c84:	12 96       	adiw	r26, 0x02	; 2
    3c86:	8d 93       	st	X+, r24
    3c88:	9c 93       	st	X, r25
    3c8a:	13 97       	sbiw	r26, 0x03	; 3
    3c8c:	1d 92       	st	X+, r1
    3c8e:	1c 92       	st	X, r1
    3c90:	11 97       	sbiw	r26, 0x01	; 1
    3c92:	82 83       	std	Z+2, r24	; 0x02
    3c94:	93 83       	std	Z+3, r25	; 0x03
    3c96:	a0 83       	st	Z, r26
    3c98:	b1 83       	std	Z+1, r27	; 0x01
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	80 93 7b 21 	sts	0x217B, r24	; 0x80217b <xHeapHasBeenInitialised.4146>
    3ca0:	20 97       	sbiw	r28, 0x00	; 0
    3ca2:	09 f4       	brne	.+2      	; 0x3ca6 <pvPortMalloc+0x56>
    3ca4:	5f c0       	rjmp	.+190    	; 0x3d64 <pvPortMalloc+0x114>
    3ca6:	9e 01       	movw	r18, r28
    3ca8:	2b 5f       	subi	r18, 0xFB	; 251
    3caa:	3f 4f       	sbci	r19, 0xFF	; 255
    3cac:	24 96       	adiw	r28, 0x04	; 4
    3cae:	ce 3f       	cpi	r28, 0xFE	; 254
    3cb0:	df 41       	sbci	r29, 0x1F	; 31
    3cb2:	08 f0       	brcs	.+2      	; 0x3cb6 <pvPortMalloc+0x66>
    3cb4:	5a c0       	rjmp	.+180    	; 0x3d6a <pvPortMalloc+0x11a>
    3cb6:	e0 91 80 21 	lds	r30, 0x2180	; 0x802180 <xStart>
    3cba:	f0 91 81 21 	lds	r31, 0x2181	; 0x802181 <xStart+0x1>
    3cbe:	a0 e8       	ldi	r26, 0x80	; 128
    3cc0:	b1 e2       	ldi	r27, 0x21	; 33
    3cc2:	02 c0       	rjmp	.+4      	; 0x3cc8 <pvPortMalloc+0x78>
    3cc4:	df 01       	movw	r26, r30
    3cc6:	fc 01       	movw	r30, r24
    3cc8:	82 81       	ldd	r24, Z+2	; 0x02
    3cca:	93 81       	ldd	r25, Z+3	; 0x03
    3ccc:	82 17       	cp	r24, r18
    3cce:	93 07       	cpc	r25, r19
    3cd0:	20 f4       	brcc	.+8      	; 0x3cda <pvPortMalloc+0x8a>
    3cd2:	80 81       	ld	r24, Z
    3cd4:	91 81       	ldd	r25, Z+1	; 0x01
    3cd6:	00 97       	sbiw	r24, 0x00	; 0
    3cd8:	a9 f7       	brne	.-22     	; 0x3cc4 <pvPortMalloc+0x74>
    3cda:	c1 e2       	ldi	r28, 0x21	; 33
    3cdc:	ec 37       	cpi	r30, 0x7C	; 124
    3cde:	fc 07       	cpc	r31, r28
    3ce0:	09 f4       	brne	.+2      	; 0x3ce4 <pvPortMalloc+0x94>
    3ce2:	46 c0       	rjmp	.+140    	; 0x3d70 <pvPortMalloc+0x120>
    3ce4:	cd 91       	ld	r28, X+
    3ce6:	dc 91       	ld	r29, X
    3ce8:	11 97       	sbiw	r26, 0x01	; 1
    3cea:	8e 01       	movw	r16, r28
    3cec:	0b 5f       	subi	r16, 0xFB	; 251
    3cee:	1f 4f       	sbci	r17, 0xFF	; 255
    3cf0:	80 81       	ld	r24, Z
    3cf2:	91 81       	ldd	r25, Z+1	; 0x01
    3cf4:	8d 93       	st	X+, r24
    3cf6:	9c 93       	st	X, r25
    3cf8:	82 81       	ldd	r24, Z+2	; 0x02
    3cfa:	93 81       	ldd	r25, Z+3	; 0x03
    3cfc:	82 1b       	sub	r24, r18
    3cfe:	93 0b       	sbc	r25, r19
    3d00:	8b 30       	cpi	r24, 0x0B	; 11
    3d02:	91 05       	cpc	r25, r1
    3d04:	10 f1       	brcs	.+68     	; 0x3d4a <pvPortMalloc+0xfa>
    3d06:	bf 01       	movw	r22, r30
    3d08:	62 0f       	add	r22, r18
    3d0a:	73 1f       	adc	r23, r19
    3d0c:	db 01       	movw	r26, r22
    3d0e:	12 96       	adiw	r26, 0x02	; 2
    3d10:	8d 93       	st	X+, r24
    3d12:	9c 93       	st	X, r25
    3d14:	13 97       	sbiw	r26, 0x03	; 3
    3d16:	22 83       	std	Z+2, r18	; 0x02
    3d18:	33 83       	std	Z+3, r19	; 0x03
    3d1a:	12 96       	adiw	r26, 0x02	; 2
    3d1c:	4d 91       	ld	r20, X+
    3d1e:	5c 91       	ld	r21, X
    3d20:	13 97       	sbiw	r26, 0x03	; 3
    3d22:	80 e8       	ldi	r24, 0x80	; 128
    3d24:	91 e2       	ldi	r25, 0x21	; 33
    3d26:	01 c0       	rjmp	.+2      	; 0x3d2a <pvPortMalloc+0xda>
    3d28:	cd 01       	movw	r24, r26
    3d2a:	ec 01       	movw	r28, r24
    3d2c:	a8 81       	ld	r26, Y
    3d2e:	b9 81       	ldd	r27, Y+1	; 0x01
    3d30:	12 96       	adiw	r26, 0x02	; 2
    3d32:	2d 91       	ld	r18, X+
    3d34:	3c 91       	ld	r19, X
    3d36:	13 97       	sbiw	r26, 0x03	; 3
    3d38:	24 17       	cp	r18, r20
    3d3a:	35 07       	cpc	r19, r21
    3d3c:	a8 f3       	brcs	.-22     	; 0x3d28 <pvPortMalloc+0xd8>
    3d3e:	eb 01       	movw	r28, r22
    3d40:	a8 83       	st	Y, r26
    3d42:	b9 83       	std	Y+1, r27	; 0x01
    3d44:	dc 01       	movw	r26, r24
    3d46:	6d 93       	st	X+, r22
    3d48:	7c 93       	st	X, r23
    3d4a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    3d4e:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    3d52:	22 81       	ldd	r18, Z+2	; 0x02
    3d54:	33 81       	ldd	r19, Z+3	; 0x03
    3d56:	82 1b       	sub	r24, r18
    3d58:	93 0b       	sbc	r25, r19
    3d5a:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    3d5e:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    3d62:	08 c0       	rjmp	.+16     	; 0x3d74 <pvPortMalloc+0x124>
    3d64:	00 e0       	ldi	r16, 0x00	; 0
    3d66:	10 e0       	ldi	r17, 0x00	; 0
    3d68:	05 c0       	rjmp	.+10     	; 0x3d74 <pvPortMalloc+0x124>
    3d6a:	00 e0       	ldi	r16, 0x00	; 0
    3d6c:	10 e0       	ldi	r17, 0x00	; 0
    3d6e:	02 c0       	rjmp	.+4      	; 0x3d74 <pvPortMalloc+0x124>
    3d70:	00 e0       	ldi	r16, 0x00	; 0
    3d72:	10 e0       	ldi	r17, 0x00	; 0
    3d74:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <xTaskResumeAll>
    3d78:	c8 01       	movw	r24, r16
    3d7a:	df 91       	pop	r29
    3d7c:	cf 91       	pop	r28
    3d7e:	1f 91       	pop	r17
    3d80:	0f 91       	pop	r16
    3d82:	08 95       	ret

00003d84 <vPortFree>:
    3d84:	0f 93       	push	r16
    3d86:	1f 93       	push	r17
    3d88:	cf 93       	push	r28
    3d8a:	df 93       	push	r29
    3d8c:	00 97       	sbiw	r24, 0x00	; 0
    3d8e:	41 f1       	breq	.+80     	; 0x3de0 <vPortFree+0x5c>
    3d90:	ec 01       	movw	r28, r24
    3d92:	8c 01       	movw	r16, r24
    3d94:	05 50       	subi	r16, 0x05	; 5
    3d96:	11 09       	sbc	r17, r1
    3d98:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <vTaskSuspendAll>
    3d9c:	f8 01       	movw	r30, r16
    3d9e:	42 81       	ldd	r20, Z+2	; 0x02
    3da0:	53 81       	ldd	r21, Z+3	; 0x03
    3da2:	a0 e8       	ldi	r26, 0x80	; 128
    3da4:	b1 e2       	ldi	r27, 0x21	; 33
    3da6:	01 c0       	rjmp	.+2      	; 0x3daa <vPortFree+0x26>
    3da8:	df 01       	movw	r26, r30
    3daa:	ed 91       	ld	r30, X+
    3dac:	fc 91       	ld	r31, X
    3dae:	11 97       	sbiw	r26, 0x01	; 1
    3db0:	22 81       	ldd	r18, Z+2	; 0x02
    3db2:	33 81       	ldd	r19, Z+3	; 0x03
    3db4:	24 17       	cp	r18, r20
    3db6:	35 07       	cpc	r19, r21
    3db8:	b8 f3       	brcs	.-18     	; 0x3da8 <vPortFree+0x24>
    3dba:	25 97       	sbiw	r28, 0x05	; 5
    3dbc:	e8 83       	st	Y, r30
    3dbe:	f9 83       	std	Y+1, r31	; 0x01
    3dc0:	0d 93       	st	X+, r16
    3dc2:	1c 93       	st	X, r17
    3dc4:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    3dc8:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    3dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dce:	9b 81       	ldd	r25, Y+3	; 0x03
    3dd0:	82 0f       	add	r24, r18
    3dd2:	93 1f       	adc	r25, r19
    3dd4:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    3dd8:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    3ddc:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <xTaskResumeAll>
    3de0:	df 91       	pop	r29
    3de2:	cf 91       	pop	r28
    3de4:	1f 91       	pop	r17
    3de6:	0f 91       	pop	r16
    3de8:	08 95       	ret

00003dea <vListInitialise>:
    3dea:	fc 01       	movw	r30, r24
    3dec:	03 96       	adiw	r24, 0x03	; 3
    3dee:	81 83       	std	Z+1, r24	; 0x01
    3df0:	92 83       	std	Z+2, r25	; 0x02
    3df2:	4f ef       	ldi	r20, 0xFF	; 255
    3df4:	5f ef       	ldi	r21, 0xFF	; 255
    3df6:	ba 01       	movw	r22, r20
    3df8:	43 83       	std	Z+3, r20	; 0x03
    3dfa:	54 83       	std	Z+4, r21	; 0x04
    3dfc:	65 83       	std	Z+5, r22	; 0x05
    3dfe:	76 83       	std	Z+6, r23	; 0x06
    3e00:	87 83       	std	Z+7, r24	; 0x07
    3e02:	90 87       	std	Z+8, r25	; 0x08
    3e04:	81 87       	std	Z+9, r24	; 0x09
    3e06:	92 87       	std	Z+10, r25	; 0x0a
    3e08:	10 82       	st	Z, r1
    3e0a:	08 95       	ret

00003e0c <vListInitialiseItem>:
    3e0c:	fc 01       	movw	r30, r24
    3e0e:	12 86       	std	Z+10, r1	; 0x0a
    3e10:	13 86       	std	Z+11, r1	; 0x0b
    3e12:	08 95       	ret

00003e14 <vListInsertEnd>:
    3e14:	cf 93       	push	r28
    3e16:	df 93       	push	r29
    3e18:	fc 01       	movw	r30, r24
    3e1a:	db 01       	movw	r26, r22
    3e1c:	21 81       	ldd	r18, Z+1	; 0x01
    3e1e:	32 81       	ldd	r19, Z+2	; 0x02
    3e20:	e9 01       	movw	r28, r18
    3e22:	8c 81       	ldd	r24, Y+4	; 0x04
    3e24:	9d 81       	ldd	r25, Y+5	; 0x05
    3e26:	14 96       	adiw	r26, 0x04	; 4
    3e28:	8d 93       	st	X+, r24
    3e2a:	9c 93       	st	X, r25
    3e2c:	15 97       	sbiw	r26, 0x05	; 5
    3e2e:	81 81       	ldd	r24, Z+1	; 0x01
    3e30:	92 81       	ldd	r25, Z+2	; 0x02
    3e32:	16 96       	adiw	r26, 0x06	; 6
    3e34:	8d 93       	st	X+, r24
    3e36:	9c 93       	st	X, r25
    3e38:	17 97       	sbiw	r26, 0x07	; 7
    3e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e3c:	9d 81       	ldd	r25, Y+5	; 0x05
    3e3e:	ec 01       	movw	r28, r24
    3e40:	6e 83       	std	Y+6, r22	; 0x06
    3e42:	7f 83       	std	Y+7, r23	; 0x07
    3e44:	e9 01       	movw	r28, r18
    3e46:	6c 83       	std	Y+4, r22	; 0x04
    3e48:	7d 83       	std	Y+5, r23	; 0x05
    3e4a:	61 83       	std	Z+1, r22	; 0x01
    3e4c:	72 83       	std	Z+2, r23	; 0x02
    3e4e:	1a 96       	adiw	r26, 0x0a	; 10
    3e50:	ed 93       	st	X+, r30
    3e52:	fc 93       	st	X, r31
    3e54:	1b 97       	sbiw	r26, 0x0b	; 11
    3e56:	80 81       	ld	r24, Z
    3e58:	8f 5f       	subi	r24, 0xFF	; 255
    3e5a:	80 83       	st	Z, r24
    3e5c:	df 91       	pop	r29
    3e5e:	cf 91       	pop	r28
    3e60:	08 95       	ret

00003e62 <vListInsert>:
    3e62:	0f 93       	push	r16
    3e64:	1f 93       	push	r17
    3e66:	cf 93       	push	r28
    3e68:	df 93       	push	r29
    3e6a:	eb 01       	movw	r28, r22
    3e6c:	08 81       	ld	r16, Y
    3e6e:	19 81       	ldd	r17, Y+1	; 0x01
    3e70:	2a 81       	ldd	r18, Y+2	; 0x02
    3e72:	3b 81       	ldd	r19, Y+3	; 0x03
    3e74:	0f 3f       	cpi	r16, 0xFF	; 255
    3e76:	4f ef       	ldi	r20, 0xFF	; 255
    3e78:	14 07       	cpc	r17, r20
    3e7a:	24 07       	cpc	r18, r20
    3e7c:	34 07       	cpc	r19, r20
    3e7e:	31 f4       	brne	.+12     	; 0x3e8c <vListInsert+0x2a>
    3e80:	dc 01       	movw	r26, r24
    3e82:	19 96       	adiw	r26, 0x09	; 9
    3e84:	ed 91       	ld	r30, X+
    3e86:	fc 91       	ld	r31, X
    3e88:	1a 97       	sbiw	r26, 0x0a	; 10
    3e8a:	1f c0       	rjmp	.+62     	; 0x3eca <vListInsert+0x68>
    3e8c:	fc 01       	movw	r30, r24
    3e8e:	33 96       	adiw	r30, 0x03	; 3
    3e90:	dc 01       	movw	r26, r24
    3e92:	17 96       	adiw	r26, 0x07	; 7
    3e94:	4d 91       	ld	r20, X+
    3e96:	5c 91       	ld	r21, X
    3e98:	18 97       	sbiw	r26, 0x08	; 8
    3e9a:	da 01       	movw	r26, r20
    3e9c:	4d 91       	ld	r20, X+
    3e9e:	5d 91       	ld	r21, X+
    3ea0:	6d 91       	ld	r22, X+
    3ea2:	7c 91       	ld	r23, X
    3ea4:	04 17       	cp	r16, r20
    3ea6:	15 07       	cpc	r17, r21
    3ea8:	26 07       	cpc	r18, r22
    3eaa:	37 07       	cpc	r19, r23
    3eac:	70 f0       	brcs	.+28     	; 0x3eca <vListInsert+0x68>
    3eae:	04 80       	ldd	r0, Z+4	; 0x04
    3eb0:	f5 81       	ldd	r31, Z+5	; 0x05
    3eb2:	e0 2d       	mov	r30, r0
    3eb4:	a4 81       	ldd	r26, Z+4	; 0x04
    3eb6:	b5 81       	ldd	r27, Z+5	; 0x05
    3eb8:	4d 91       	ld	r20, X+
    3eba:	5d 91       	ld	r21, X+
    3ebc:	6d 91       	ld	r22, X+
    3ebe:	7c 91       	ld	r23, X
    3ec0:	04 17       	cp	r16, r20
    3ec2:	15 07       	cpc	r17, r21
    3ec4:	26 07       	cpc	r18, r22
    3ec6:	37 07       	cpc	r19, r23
    3ec8:	90 f7       	brcc	.-28     	; 0x3eae <vListInsert+0x4c>
    3eca:	a4 81       	ldd	r26, Z+4	; 0x04
    3ecc:	b5 81       	ldd	r27, Z+5	; 0x05
    3ece:	ac 83       	std	Y+4, r26	; 0x04
    3ed0:	bd 83       	std	Y+5, r27	; 0x05
    3ed2:	16 96       	adiw	r26, 0x06	; 6
    3ed4:	cd 93       	st	X+, r28
    3ed6:	dc 93       	st	X, r29
    3ed8:	17 97       	sbiw	r26, 0x07	; 7
    3eda:	ee 83       	std	Y+6, r30	; 0x06
    3edc:	ff 83       	std	Y+7, r31	; 0x07
    3ede:	c4 83       	std	Z+4, r28	; 0x04
    3ee0:	d5 83       	std	Z+5, r29	; 0x05
    3ee2:	8a 87       	std	Y+10, r24	; 0x0a
    3ee4:	9b 87       	std	Y+11, r25	; 0x0b
    3ee6:	fc 01       	movw	r30, r24
    3ee8:	20 81       	ld	r18, Z
    3eea:	2f 5f       	subi	r18, 0xFF	; 255
    3eec:	20 83       	st	Z, r18
    3eee:	df 91       	pop	r29
    3ef0:	cf 91       	pop	r28
    3ef2:	1f 91       	pop	r17
    3ef4:	0f 91       	pop	r16
    3ef6:	08 95       	ret

00003ef8 <vListRemove>:
    3ef8:	fc 01       	movw	r30, r24
    3efa:	a4 81       	ldd	r26, Z+4	; 0x04
    3efc:	b5 81       	ldd	r27, Z+5	; 0x05
    3efe:	86 81       	ldd	r24, Z+6	; 0x06
    3f00:	97 81       	ldd	r25, Z+7	; 0x07
    3f02:	16 96       	adiw	r26, 0x06	; 6
    3f04:	8d 93       	st	X+, r24
    3f06:	9c 93       	st	X, r25
    3f08:	17 97       	sbiw	r26, 0x07	; 7
    3f0a:	a6 81       	ldd	r26, Z+6	; 0x06
    3f0c:	b7 81       	ldd	r27, Z+7	; 0x07
    3f0e:	84 81       	ldd	r24, Z+4	; 0x04
    3f10:	95 81       	ldd	r25, Z+5	; 0x05
    3f12:	14 96       	adiw	r26, 0x04	; 4
    3f14:	8d 93       	st	X+, r24
    3f16:	9c 93       	st	X, r25
    3f18:	15 97       	sbiw	r26, 0x05	; 5
    3f1a:	a2 85       	ldd	r26, Z+10	; 0x0a
    3f1c:	b3 85       	ldd	r27, Z+11	; 0x0b
    3f1e:	11 96       	adiw	r26, 0x01	; 1
    3f20:	8d 91       	ld	r24, X+
    3f22:	9c 91       	ld	r25, X
    3f24:	12 97       	sbiw	r26, 0x02	; 2
    3f26:	e8 17       	cp	r30, r24
    3f28:	f9 07       	cpc	r31, r25
    3f2a:	31 f4       	brne	.+12     	; 0x3f38 <vListRemove+0x40>
    3f2c:	86 81       	ldd	r24, Z+6	; 0x06
    3f2e:	97 81       	ldd	r25, Z+7	; 0x07
    3f30:	11 96       	adiw	r26, 0x01	; 1
    3f32:	8d 93       	st	X+, r24
    3f34:	9c 93       	st	X, r25
    3f36:	12 97       	sbiw	r26, 0x02	; 2
    3f38:	12 86       	std	Z+10, r1	; 0x0a
    3f3a:	13 86       	std	Z+11, r1	; 0x0b
    3f3c:	8c 91       	ld	r24, X
    3f3e:	81 50       	subi	r24, 0x01	; 1
    3f40:	8c 93       	st	X, r24
    3f42:	08 95       	ret

00003f44 <pxPortInitialiseStack>:
    3f44:	80 93 0b 42 	sts	0x420B, r24	; 0x80420b <portStackTopForTask>
    3f48:	90 93 0c 42 	sts	0x420C, r25	; 0x80420c <portStackTopForTask+0x1>
    3f4c:	31 e1       	ldi	r19, 0x11	; 17
    3f4e:	fc 01       	movw	r30, r24
    3f50:	30 83       	st	Z, r19
    3f52:	31 97       	sbiw	r30, 0x01	; 1
    3f54:	22 e2       	ldi	r18, 0x22	; 34
    3f56:	20 83       	st	Z, r18
    3f58:	31 97       	sbiw	r30, 0x01	; 1
    3f5a:	a3 e3       	ldi	r26, 0x33	; 51
    3f5c:	a0 83       	st	Z, r26
    3f5e:	31 97       	sbiw	r30, 0x01	; 1
    3f60:	60 83       	st	Z, r22
    3f62:	31 97       	sbiw	r30, 0x01	; 1
    3f64:	70 83       	st	Z, r23
    3f66:	31 97       	sbiw	r30, 0x01	; 1
    3f68:	10 82       	st	Z, r1
    3f6a:	31 97       	sbiw	r30, 0x01	; 1
    3f6c:	10 82       	st	Z, r1
    3f6e:	31 97       	sbiw	r30, 0x01	; 1
    3f70:	60 e8       	ldi	r22, 0x80	; 128
    3f72:	60 83       	st	Z, r22
    3f74:	31 97       	sbiw	r30, 0x01	; 1
    3f76:	10 82       	st	Z, r1
    3f78:	31 97       	sbiw	r30, 0x01	; 1
    3f7a:	10 82       	st	Z, r1
    3f7c:	31 97       	sbiw	r30, 0x01	; 1
    3f7e:	10 82       	st	Z, r1
    3f80:	31 97       	sbiw	r30, 0x01	; 1
    3f82:	62 e0       	ldi	r22, 0x02	; 2
    3f84:	60 83       	st	Z, r22
    3f86:	31 97       	sbiw	r30, 0x01	; 1
    3f88:	63 e0       	ldi	r22, 0x03	; 3
    3f8a:	60 83       	st	Z, r22
    3f8c:	31 97       	sbiw	r30, 0x01	; 1
    3f8e:	64 e0       	ldi	r22, 0x04	; 4
    3f90:	60 83       	st	Z, r22
    3f92:	31 97       	sbiw	r30, 0x01	; 1
    3f94:	65 e0       	ldi	r22, 0x05	; 5
    3f96:	60 83       	st	Z, r22
    3f98:	31 97       	sbiw	r30, 0x01	; 1
    3f9a:	66 e0       	ldi	r22, 0x06	; 6
    3f9c:	60 83       	st	Z, r22
    3f9e:	31 97       	sbiw	r30, 0x01	; 1
    3fa0:	67 e0       	ldi	r22, 0x07	; 7
    3fa2:	60 83       	st	Z, r22
    3fa4:	31 97       	sbiw	r30, 0x01	; 1
    3fa6:	68 e0       	ldi	r22, 0x08	; 8
    3fa8:	60 83       	st	Z, r22
    3faa:	31 97       	sbiw	r30, 0x01	; 1
    3fac:	69 e0       	ldi	r22, 0x09	; 9
    3fae:	60 83       	st	Z, r22
    3fb0:	31 97       	sbiw	r30, 0x01	; 1
    3fb2:	60 e1       	ldi	r22, 0x10	; 16
    3fb4:	60 83       	st	Z, r22
    3fb6:	31 97       	sbiw	r30, 0x01	; 1
    3fb8:	30 83       	st	Z, r19
    3fba:	31 97       	sbiw	r30, 0x01	; 1
    3fbc:	32 e1       	ldi	r19, 0x12	; 18
    3fbe:	30 83       	st	Z, r19
    3fc0:	31 97       	sbiw	r30, 0x01	; 1
    3fc2:	33 e1       	ldi	r19, 0x13	; 19
    3fc4:	30 83       	st	Z, r19
    3fc6:	31 97       	sbiw	r30, 0x01	; 1
    3fc8:	34 e1       	ldi	r19, 0x14	; 20
    3fca:	30 83       	st	Z, r19
    3fcc:	31 97       	sbiw	r30, 0x01	; 1
    3fce:	35 e1       	ldi	r19, 0x15	; 21
    3fd0:	30 83       	st	Z, r19
    3fd2:	31 97       	sbiw	r30, 0x01	; 1
    3fd4:	36 e1       	ldi	r19, 0x16	; 22
    3fd6:	30 83       	st	Z, r19
    3fd8:	31 97       	sbiw	r30, 0x01	; 1
    3fda:	37 e1       	ldi	r19, 0x17	; 23
    3fdc:	30 83       	st	Z, r19
    3fde:	31 97       	sbiw	r30, 0x01	; 1
    3fe0:	38 e1       	ldi	r19, 0x18	; 24
    3fe2:	30 83       	st	Z, r19
    3fe4:	31 97       	sbiw	r30, 0x01	; 1
    3fe6:	39 e1       	ldi	r19, 0x19	; 25
    3fe8:	30 83       	st	Z, r19
    3fea:	31 97       	sbiw	r30, 0x01	; 1
    3fec:	30 e2       	ldi	r19, 0x20	; 32
    3fee:	30 83       	st	Z, r19
    3ff0:	31 97       	sbiw	r30, 0x01	; 1
    3ff2:	31 e2       	ldi	r19, 0x21	; 33
    3ff4:	30 83       	st	Z, r19
    3ff6:	31 97       	sbiw	r30, 0x01	; 1
    3ff8:	20 83       	st	Z, r18
    3ffa:	31 97       	sbiw	r30, 0x01	; 1
    3ffc:	23 e2       	ldi	r18, 0x23	; 35
    3ffe:	20 83       	st	Z, r18
    4000:	31 97       	sbiw	r30, 0x01	; 1
    4002:	40 83       	st	Z, r20
    4004:	31 97       	sbiw	r30, 0x01	; 1
    4006:	50 83       	st	Z, r21
    4008:	31 97       	sbiw	r30, 0x01	; 1
    400a:	26 e2       	ldi	r18, 0x26	; 38
    400c:	20 83       	st	Z, r18
    400e:	31 97       	sbiw	r30, 0x01	; 1
    4010:	27 e2       	ldi	r18, 0x27	; 39
    4012:	20 83       	st	Z, r18
    4014:	31 97       	sbiw	r30, 0x01	; 1
    4016:	28 e2       	ldi	r18, 0x28	; 40
    4018:	20 83       	st	Z, r18
    401a:	31 97       	sbiw	r30, 0x01	; 1
    401c:	29 e2       	ldi	r18, 0x29	; 41
    401e:	20 83       	st	Z, r18
    4020:	31 97       	sbiw	r30, 0x01	; 1
    4022:	20 e3       	ldi	r18, 0x30	; 48
    4024:	20 83       	st	Z, r18
    4026:	31 97       	sbiw	r30, 0x01	; 1
    4028:	21 e3       	ldi	r18, 0x31	; 49
    402a:	20 83       	st	Z, r18
    402c:	89 97       	sbiw	r24, 0x29	; 41
    402e:	08 95       	ret

00004030 <xPortStartScheduler>:
    4030:	8c e7       	ldi	r24, 0x7C	; 124
    4032:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <__TEXT_REGION_LENGTH__+0x700a69>
    4036:	8f ef       	ldi	r24, 0xFF	; 255
    4038:	80 93 68 0a 	sts	0x0A68, r24	; 0x800a68 <__TEXT_REGION_LENGTH__+0x700a68>
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
    4042:	81 e1       	ldi	r24, 0x11	; 17
    4044:	80 93 41 0a 	sts	0x0A41, r24	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
    4048:	83 e0       	ldi	r24, 0x03	; 3
    404a:	80 93 47 0a 	sts	0x0A47, r24	; 0x800a47 <__TEXT_REGION_LENGTH__+0x700a47>
    404e:	a0 91 e3 41 	lds	r26, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4052:	b0 91 e4 41 	lds	r27, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4056:	cd 91       	ld	r28, X+
    4058:	cd bf       	out	0x3d, r28	; 61
    405a:	dd 91       	ld	r29, X+
    405c:	de bf       	out	0x3e, r29	; 62
    405e:	ff 91       	pop	r31
    4060:	ef 91       	pop	r30
    4062:	df 91       	pop	r29
    4064:	cf 91       	pop	r28
    4066:	bf 91       	pop	r27
    4068:	af 91       	pop	r26
    406a:	9f 91       	pop	r25
    406c:	8f 91       	pop	r24
    406e:	7f 91       	pop	r23
    4070:	6f 91       	pop	r22
    4072:	5f 91       	pop	r21
    4074:	4f 91       	pop	r20
    4076:	3f 91       	pop	r19
    4078:	2f 91       	pop	r18
    407a:	1f 91       	pop	r17
    407c:	0f 91       	pop	r16
    407e:	ff 90       	pop	r15
    4080:	ef 90       	pop	r14
    4082:	df 90       	pop	r13
    4084:	cf 90       	pop	r12
    4086:	bf 90       	pop	r11
    4088:	af 90       	pop	r10
    408a:	9f 90       	pop	r9
    408c:	8f 90       	pop	r8
    408e:	7f 90       	pop	r7
    4090:	6f 90       	pop	r6
    4092:	5f 90       	pop	r5
    4094:	4f 90       	pop	r4
    4096:	3f 90       	pop	r3
    4098:	2f 90       	pop	r2
    409a:	1f 90       	pop	r1
    409c:	0f 90       	pop	r0
    409e:	0c be       	out	0x3c, r0	; 60
    40a0:	0f 90       	pop	r0
    40a2:	0b be       	out	0x3b, r0	; 59
    40a4:	0f 90       	pop	r0
    40a6:	0f be       	out	0x3f, r0	; 63
    40a8:	0f 90       	pop	r0
    40aa:	08 95       	ret
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	08 95       	ret

000040b0 <vPortYield>:
    40b0:	0f 92       	push	r0
    40b2:	0f b6       	in	r0, 0x3f	; 63
    40b4:	f8 94       	cli
    40b6:	0f 92       	push	r0
    40b8:	0b b6       	in	r0, 0x3b	; 59
    40ba:	0f 92       	push	r0
    40bc:	0c b6       	in	r0, 0x3c	; 60
    40be:	0f 92       	push	r0
    40c0:	1f 92       	push	r1
    40c2:	11 24       	eor	r1, r1
    40c4:	2f 92       	push	r2
    40c6:	3f 92       	push	r3
    40c8:	4f 92       	push	r4
    40ca:	5f 92       	push	r5
    40cc:	6f 92       	push	r6
    40ce:	7f 92       	push	r7
    40d0:	8f 92       	push	r8
    40d2:	9f 92       	push	r9
    40d4:	af 92       	push	r10
    40d6:	bf 92       	push	r11
    40d8:	cf 92       	push	r12
    40da:	df 92       	push	r13
    40dc:	ef 92       	push	r14
    40de:	ff 92       	push	r15
    40e0:	0f 93       	push	r16
    40e2:	1f 93       	push	r17
    40e4:	2f 93       	push	r18
    40e6:	3f 93       	push	r19
    40e8:	4f 93       	push	r20
    40ea:	5f 93       	push	r21
    40ec:	6f 93       	push	r22
    40ee:	7f 93       	push	r23
    40f0:	8f 93       	push	r24
    40f2:	9f 93       	push	r25
    40f4:	af 93       	push	r26
    40f6:	bf 93       	push	r27
    40f8:	cf 93       	push	r28
    40fa:	df 93       	push	r29
    40fc:	ef 93       	push	r30
    40fe:	ff 93       	push	r31
    4100:	a0 91 e3 41 	lds	r26, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4104:	b0 91 e4 41 	lds	r27, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4108:	0d b6       	in	r0, 0x3d	; 61
    410a:	0d 92       	st	X+, r0
    410c:	0e b6       	in	r0, 0x3e	; 62
    410e:	0d 92       	st	X+, r0
    4110:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <vTaskSwitchContext>
    4114:	a0 91 e3 41 	lds	r26, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4118:	b0 91 e4 41 	lds	r27, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    411c:	cd 91       	ld	r28, X+
    411e:	cd bf       	out	0x3d, r28	; 61
    4120:	dd 91       	ld	r29, X+
    4122:	de bf       	out	0x3e, r29	; 62
    4124:	ff 91       	pop	r31
    4126:	ef 91       	pop	r30
    4128:	df 91       	pop	r29
    412a:	cf 91       	pop	r28
    412c:	bf 91       	pop	r27
    412e:	af 91       	pop	r26
    4130:	9f 91       	pop	r25
    4132:	8f 91       	pop	r24
    4134:	7f 91       	pop	r23
    4136:	6f 91       	pop	r22
    4138:	5f 91       	pop	r21
    413a:	4f 91       	pop	r20
    413c:	3f 91       	pop	r19
    413e:	2f 91       	pop	r18
    4140:	1f 91       	pop	r17
    4142:	0f 91       	pop	r16
    4144:	ff 90       	pop	r15
    4146:	ef 90       	pop	r14
    4148:	df 90       	pop	r13
    414a:	cf 90       	pop	r12
    414c:	bf 90       	pop	r11
    414e:	af 90       	pop	r10
    4150:	9f 90       	pop	r9
    4152:	8f 90       	pop	r8
    4154:	7f 90       	pop	r7
    4156:	6f 90       	pop	r6
    4158:	5f 90       	pop	r5
    415a:	4f 90       	pop	r4
    415c:	3f 90       	pop	r3
    415e:	2f 90       	pop	r2
    4160:	1f 90       	pop	r1
    4162:	0f 90       	pop	r0
    4164:	0c be       	out	0x3c, r0	; 60
    4166:	0f 90       	pop	r0
    4168:	0b be       	out	0x3b, r0	; 59
    416a:	0f 90       	pop	r0
    416c:	0f be       	out	0x3f, r0	; 63
    416e:	0f 90       	pop	r0
    4170:	08 95       	ret

00004172 <vPortYieldFromTick>:
    4172:	0f 92       	push	r0
    4174:	0f b6       	in	r0, 0x3f	; 63
    4176:	f8 94       	cli
    4178:	0f 92       	push	r0
    417a:	0b b6       	in	r0, 0x3b	; 59
    417c:	0f 92       	push	r0
    417e:	0c b6       	in	r0, 0x3c	; 60
    4180:	0f 92       	push	r0
    4182:	1f 92       	push	r1
    4184:	11 24       	eor	r1, r1
    4186:	2f 92       	push	r2
    4188:	3f 92       	push	r3
    418a:	4f 92       	push	r4
    418c:	5f 92       	push	r5
    418e:	6f 92       	push	r6
    4190:	7f 92       	push	r7
    4192:	8f 92       	push	r8
    4194:	9f 92       	push	r9
    4196:	af 92       	push	r10
    4198:	bf 92       	push	r11
    419a:	cf 92       	push	r12
    419c:	df 92       	push	r13
    419e:	ef 92       	push	r14
    41a0:	ff 92       	push	r15
    41a2:	0f 93       	push	r16
    41a4:	1f 93       	push	r17
    41a6:	2f 93       	push	r18
    41a8:	3f 93       	push	r19
    41aa:	4f 93       	push	r20
    41ac:	5f 93       	push	r21
    41ae:	6f 93       	push	r22
    41b0:	7f 93       	push	r23
    41b2:	8f 93       	push	r24
    41b4:	9f 93       	push	r25
    41b6:	af 93       	push	r26
    41b8:	bf 93       	push	r27
    41ba:	cf 93       	push	r28
    41bc:	df 93       	push	r29
    41be:	ef 93       	push	r30
    41c0:	ff 93       	push	r31
    41c2:	a0 91 e3 41 	lds	r26, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    41c6:	b0 91 e4 41 	lds	r27, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    41ca:	0d b6       	in	r0, 0x3d	; 61
    41cc:	0d 92       	st	X+, r0
    41ce:	0e b6       	in	r0, 0x3e	; 62
    41d0:	0d 92       	st	X+, r0
    41d2:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <vTaskIncrementTick>
    41d6:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <vTaskSwitchContext>
    41da:	a0 91 e3 41 	lds	r26, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    41de:	b0 91 e4 41 	lds	r27, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    41e2:	cd 91       	ld	r28, X+
    41e4:	cd bf       	out	0x3d, r28	; 61
    41e6:	dd 91       	ld	r29, X+
    41e8:	de bf       	out	0x3e, r29	; 62
    41ea:	ff 91       	pop	r31
    41ec:	ef 91       	pop	r30
    41ee:	df 91       	pop	r29
    41f0:	cf 91       	pop	r28
    41f2:	bf 91       	pop	r27
    41f4:	af 91       	pop	r26
    41f6:	9f 91       	pop	r25
    41f8:	8f 91       	pop	r24
    41fa:	7f 91       	pop	r23
    41fc:	6f 91       	pop	r22
    41fe:	5f 91       	pop	r21
    4200:	4f 91       	pop	r20
    4202:	3f 91       	pop	r19
    4204:	2f 91       	pop	r18
    4206:	1f 91       	pop	r17
    4208:	0f 91       	pop	r16
    420a:	ff 90       	pop	r15
    420c:	ef 90       	pop	r14
    420e:	df 90       	pop	r13
    4210:	cf 90       	pop	r12
    4212:	bf 90       	pop	r11
    4214:	af 90       	pop	r10
    4216:	9f 90       	pop	r9
    4218:	8f 90       	pop	r8
    421a:	7f 90       	pop	r7
    421c:	6f 90       	pop	r6
    421e:	5f 90       	pop	r5
    4220:	4f 90       	pop	r4
    4222:	3f 90       	pop	r3
    4224:	2f 90       	pop	r2
    4226:	1f 90       	pop	r1
    4228:	0f 90       	pop	r0
    422a:	0c be       	out	0x3c, r0	; 60
    422c:	0f 90       	pop	r0
    422e:	0b be       	out	0x3b, r0	; 59
    4230:	0f 90       	pop	r0
    4232:	0f be       	out	0x3f, r0	; 63
    4234:	0f 90       	pop	r0
    4236:	08 95       	ret

00004238 <__vector_55>:
    4238:	0e 94 b9 20 	call	0x4172	; 0x4172 <vPortYieldFromTick>
    423c:	18 95       	reti

0000423e <prvCopyDataToQueue>:
    423e:	cf 93       	push	r28
    4240:	df 93       	push	r29
    4242:	ec 01       	movw	r28, r24
    4244:	88 a1       	ldd	r24, Y+32	; 0x20
    4246:	81 11       	cpse	r24, r1
    4248:	0b c0       	rjmp	.+22     	; 0x4260 <prvCopyDataToQueue+0x22>
    424a:	88 81       	ld	r24, Y
    424c:	99 81       	ldd	r25, Y+1	; 0x01
    424e:	89 2b       	or	r24, r25
    4250:	e1 f5       	brne	.+120    	; 0x42ca <prvCopyDataToQueue+0x8c>
    4252:	8a 81       	ldd	r24, Y+2	; 0x02
    4254:	9b 81       	ldd	r25, Y+3	; 0x03
    4256:	0e 94 8a 29 	call	0x5314	; 0x5314 <vTaskPriorityDisinherit>
    425a:	1a 82       	std	Y+2, r1	; 0x02
    425c:	1b 82       	std	Y+3, r1	; 0x03
    425e:	35 c0       	rjmp	.+106    	; 0x42ca <prvCopyDataToQueue+0x8c>
    4260:	41 11       	cpse	r20, r1
    4262:	17 c0       	rjmp	.+46     	; 0x4292 <prvCopyDataToQueue+0x54>
    4264:	48 2f       	mov	r20, r24
    4266:	50 e0       	ldi	r21, 0x00	; 0
    4268:	8c 81       	ldd	r24, Y+4	; 0x04
    426a:	9d 81       	ldd	r25, Y+5	; 0x05
    426c:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <memcpy>
    4270:	28 a1       	ldd	r18, Y+32	; 0x20
    4272:	8c 81       	ldd	r24, Y+4	; 0x04
    4274:	9d 81       	ldd	r25, Y+5	; 0x05
    4276:	82 0f       	add	r24, r18
    4278:	91 1d       	adc	r25, r1
    427a:	8c 83       	std	Y+4, r24	; 0x04
    427c:	9d 83       	std	Y+5, r25	; 0x05
    427e:	2a 81       	ldd	r18, Y+2	; 0x02
    4280:	3b 81       	ldd	r19, Y+3	; 0x03
    4282:	82 17       	cp	r24, r18
    4284:	93 07       	cpc	r25, r19
    4286:	08 f1       	brcs	.+66     	; 0x42ca <prvCopyDataToQueue+0x8c>
    4288:	88 81       	ld	r24, Y
    428a:	99 81       	ldd	r25, Y+1	; 0x01
    428c:	8c 83       	std	Y+4, r24	; 0x04
    428e:	9d 83       	std	Y+5, r25	; 0x05
    4290:	1c c0       	rjmp	.+56     	; 0x42ca <prvCopyDataToQueue+0x8c>
    4292:	48 2f       	mov	r20, r24
    4294:	50 e0       	ldi	r21, 0x00	; 0
    4296:	8e 81       	ldd	r24, Y+6	; 0x06
    4298:	9f 81       	ldd	r25, Y+7	; 0x07
    429a:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <memcpy>
    429e:	88 a1       	ldd	r24, Y+32	; 0x20
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	91 95       	neg	r25
    42a4:	81 95       	neg	r24
    42a6:	91 09       	sbc	r25, r1
    42a8:	2e 81       	ldd	r18, Y+6	; 0x06
    42aa:	3f 81       	ldd	r19, Y+7	; 0x07
    42ac:	28 0f       	add	r18, r24
    42ae:	39 1f       	adc	r19, r25
    42b0:	2e 83       	std	Y+6, r18	; 0x06
    42b2:	3f 83       	std	Y+7, r19	; 0x07
    42b4:	48 81       	ld	r20, Y
    42b6:	59 81       	ldd	r21, Y+1	; 0x01
    42b8:	24 17       	cp	r18, r20
    42ba:	35 07       	cpc	r19, r21
    42bc:	30 f4       	brcc	.+12     	; 0x42ca <prvCopyDataToQueue+0x8c>
    42be:	2a 81       	ldd	r18, Y+2	; 0x02
    42c0:	3b 81       	ldd	r19, Y+3	; 0x03
    42c2:	82 0f       	add	r24, r18
    42c4:	93 1f       	adc	r25, r19
    42c6:	8e 83       	std	Y+6, r24	; 0x06
    42c8:	9f 83       	std	Y+7, r25	; 0x07
    42ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    42cc:	8f 5f       	subi	r24, 0xFF	; 255
    42ce:	8e 8f       	std	Y+30, r24	; 0x1e
    42d0:	df 91       	pop	r29
    42d2:	cf 91       	pop	r28
    42d4:	08 95       	ret

000042d6 <prvCopyDataFromQueue>:
    42d6:	fc 01       	movw	r30, r24
    42d8:	80 81       	ld	r24, Z
    42da:	91 81       	ldd	r25, Z+1	; 0x01
    42dc:	00 97       	sbiw	r24, 0x00	; 0
    42de:	a1 f0       	breq	.+40     	; 0x4308 <prvCopyDataFromQueue+0x32>
    42e0:	40 a1       	ldd	r20, Z+32	; 0x20
    42e2:	50 e0       	ldi	r21, 0x00	; 0
    42e4:	26 81       	ldd	r18, Z+6	; 0x06
    42e6:	37 81       	ldd	r19, Z+7	; 0x07
    42e8:	24 0f       	add	r18, r20
    42ea:	35 1f       	adc	r19, r21
    42ec:	26 83       	std	Z+6, r18	; 0x06
    42ee:	37 83       	std	Z+7, r19	; 0x07
    42f0:	a2 81       	ldd	r26, Z+2	; 0x02
    42f2:	b3 81       	ldd	r27, Z+3	; 0x03
    42f4:	2a 17       	cp	r18, r26
    42f6:	3b 07       	cpc	r19, r27
    42f8:	10 f0       	brcs	.+4      	; 0x42fe <prvCopyDataFromQueue+0x28>
    42fa:	86 83       	std	Z+6, r24	; 0x06
    42fc:	97 83       	std	Z+7, r25	; 0x07
    42fe:	cb 01       	movw	r24, r22
    4300:	66 81       	ldd	r22, Z+6	; 0x06
    4302:	77 81       	ldd	r23, Z+7	; 0x07
    4304:	0e 94 71 35 	call	0x6ae2	; 0x6ae2 <memcpy>
    4308:	08 95       	ret

0000430a <prvUnlockQueue>:
    430a:	0f 93       	push	r16
    430c:	1f 93       	push	r17
    430e:	cf 93       	push	r28
    4310:	df 93       	push	r29
    4312:	ec 01       	movw	r28, r24
    4314:	0f b6       	in	r0, 0x3f	; 63
    4316:	f8 94       	cli
    4318:	0f 92       	push	r0
    431a:	8a a1       	ldd	r24, Y+34	; 0x22
    431c:	18 16       	cp	r1, r24
    431e:	b4 f4       	brge	.+44     	; 0x434c <prvUnlockQueue+0x42>
    4320:	8b 89       	ldd	r24, Y+19	; 0x13
    4322:	81 11       	cpse	r24, r1
    4324:	05 c0       	rjmp	.+10     	; 0x4330 <prvUnlockQueue+0x26>
    4326:	12 c0       	rjmp	.+36     	; 0x434c <prvUnlockQueue+0x42>
    4328:	8b 89       	ldd	r24, Y+19	; 0x13
    432a:	81 11       	cpse	r24, r1
    432c:	04 c0       	rjmp	.+8      	; 0x4336 <prvUnlockQueue+0x2c>
    432e:	0e c0       	rjmp	.+28     	; 0x434c <prvUnlockQueue+0x42>
    4330:	8e 01       	movw	r16, r28
    4332:	0d 5e       	subi	r16, 0xED	; 237
    4334:	1f 4f       	sbci	r17, 0xFF	; 255
    4336:	c8 01       	movw	r24, r16
    4338:	0e 94 56 28 	call	0x50ac	; 0x50ac <xTaskRemoveFromEventList>
    433c:	81 11       	cpse	r24, r1
    433e:	0e 94 13 29 	call	0x5226	; 0x5226 <vTaskMissedYield>
    4342:	8a a1       	ldd	r24, Y+34	; 0x22
    4344:	81 50       	subi	r24, 0x01	; 1
    4346:	8a a3       	std	Y+34, r24	; 0x22
    4348:	18 16       	cp	r1, r24
    434a:	74 f3       	brlt	.-36     	; 0x4328 <prvUnlockQueue+0x1e>
    434c:	8f ef       	ldi	r24, 0xFF	; 255
    434e:	8a a3       	std	Y+34, r24	; 0x22
    4350:	0f 90       	pop	r0
    4352:	0f be       	out	0x3f, r0	; 63
    4354:	0f b6       	in	r0, 0x3f	; 63
    4356:	f8 94       	cli
    4358:	0f 92       	push	r0
    435a:	89 a1       	ldd	r24, Y+33	; 0x21
    435c:	18 16       	cp	r1, r24
    435e:	b4 f4       	brge	.+44     	; 0x438c <prvUnlockQueue+0x82>
    4360:	88 85       	ldd	r24, Y+8	; 0x08
    4362:	81 11       	cpse	r24, r1
    4364:	05 c0       	rjmp	.+10     	; 0x4370 <prvUnlockQueue+0x66>
    4366:	12 c0       	rjmp	.+36     	; 0x438c <prvUnlockQueue+0x82>
    4368:	88 85       	ldd	r24, Y+8	; 0x08
    436a:	81 11       	cpse	r24, r1
    436c:	04 c0       	rjmp	.+8      	; 0x4376 <prvUnlockQueue+0x6c>
    436e:	0e c0       	rjmp	.+28     	; 0x438c <prvUnlockQueue+0x82>
    4370:	8e 01       	movw	r16, r28
    4372:	08 5f       	subi	r16, 0xF8	; 248
    4374:	1f 4f       	sbci	r17, 0xFF	; 255
    4376:	c8 01       	movw	r24, r16
    4378:	0e 94 56 28 	call	0x50ac	; 0x50ac <xTaskRemoveFromEventList>
    437c:	81 11       	cpse	r24, r1
    437e:	0e 94 13 29 	call	0x5226	; 0x5226 <vTaskMissedYield>
    4382:	89 a1       	ldd	r24, Y+33	; 0x21
    4384:	81 50       	subi	r24, 0x01	; 1
    4386:	89 a3       	std	Y+33, r24	; 0x21
    4388:	18 16       	cp	r1, r24
    438a:	74 f3       	brlt	.-36     	; 0x4368 <prvUnlockQueue+0x5e>
    438c:	8f ef       	ldi	r24, 0xFF	; 255
    438e:	89 a3       	std	Y+33, r24	; 0x21
    4390:	0f 90       	pop	r0
    4392:	0f be       	out	0x3f, r0	; 63
    4394:	df 91       	pop	r29
    4396:	cf 91       	pop	r28
    4398:	1f 91       	pop	r17
    439a:	0f 91       	pop	r16
    439c:	08 95       	ret

0000439e <xQueueGenericReset>:
    439e:	1f 93       	push	r17
    43a0:	cf 93       	push	r28
    43a2:	df 93       	push	r29
    43a4:	61 30       	cpi	r22, 0x01	; 1
    43a6:	59 f0       	breq	.+22     	; 0x43be <xQueueGenericReset+0x20>
    43a8:	fc 01       	movw	r30, r24
    43aa:	23 89       	ldd	r18, Z+19	; 0x13
    43ac:	30 85       	ldd	r19, Z+8	; 0x08
    43ae:	31 11       	cpse	r19, r1
    43b0:	2c c0       	rjmp	.+88     	; 0x440a <xQueueGenericReset+0x6c>
    43b2:	11 e0       	ldi	r17, 0x01	; 1
    43b4:	21 11       	cpse	r18, r1
    43b6:	10 e0       	ldi	r17, 0x00	; 0
    43b8:	21 11       	cpse	r18, r1
    43ba:	28 c0       	rjmp	.+80     	; 0x440c <xQueueGenericReset+0x6e>
    43bc:	01 c0       	rjmp	.+2      	; 0x43c0 <xQueueGenericReset+0x22>
    43be:	11 e0       	ldi	r17, 0x01	; 1
    43c0:	ec 01       	movw	r28, r24
    43c2:	48 81       	ld	r20, Y
    43c4:	59 81       	ldd	r21, Y+1	; 0x01
    43c6:	28 a1       	ldd	r18, Y+32	; 0x20
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	6f 8d       	ldd	r22, Y+31	; 0x1f
    43cc:	62 9f       	mul	r22, r18
    43ce:	c0 01       	movw	r24, r0
    43d0:	63 9f       	mul	r22, r19
    43d2:	90 0d       	add	r25, r0
    43d4:	11 24       	eor	r1, r1
    43d6:	ba 01       	movw	r22, r20
    43d8:	68 0f       	add	r22, r24
    43da:	79 1f       	adc	r23, r25
    43dc:	6a 83       	std	Y+2, r22	; 0x02
    43de:	7b 83       	std	Y+3, r23	; 0x03
    43e0:	1e 8e       	std	Y+30, r1	; 0x1e
    43e2:	4c 83       	std	Y+4, r20	; 0x04
    43e4:	5d 83       	std	Y+5, r21	; 0x05
    43e6:	82 1b       	sub	r24, r18
    43e8:	93 0b       	sbc	r25, r19
    43ea:	84 0f       	add	r24, r20
    43ec:	95 1f       	adc	r25, r21
    43ee:	8e 83       	std	Y+6, r24	; 0x06
    43f0:	9f 83       	std	Y+7, r25	; 0x07
    43f2:	8f ef       	ldi	r24, 0xFF	; 255
    43f4:	89 a3       	std	Y+33, r24	; 0x21
    43f6:	8a a3       	std	Y+34, r24	; 0x22
    43f8:	ce 01       	movw	r24, r28
    43fa:	08 96       	adiw	r24, 0x08	; 8
    43fc:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <vListInitialise>
    4400:	ce 01       	movw	r24, r28
    4402:	43 96       	adiw	r24, 0x13	; 19
    4404:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <vListInitialise>
    4408:	01 c0       	rjmp	.+2      	; 0x440c <xQueueGenericReset+0x6e>
    440a:	10 e0       	ldi	r17, 0x00	; 0
    440c:	81 2f       	mov	r24, r17
    440e:	df 91       	pop	r29
    4410:	cf 91       	pop	r28
    4412:	1f 91       	pop	r17
    4414:	08 95       	ret

00004416 <xQueueGenericCreate>:
    4416:	0f 93       	push	r16
    4418:	1f 93       	push	r17
    441a:	cf 93       	push	r28
    441c:	df 93       	push	r29
    441e:	88 23       	and	r24, r24
    4420:	01 f1       	breq	.+64     	; 0x4462 <xQueueGenericCreate+0x4c>
    4422:	06 2f       	mov	r16, r22
    4424:	18 2f       	mov	r17, r24
    4426:	83 e2       	ldi	r24, 0x23	; 35
    4428:	90 e0       	ldi	r25, 0x00	; 0
    442a:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <pvPortMalloc>
    442e:	ec 01       	movw	r28, r24
    4430:	89 2b       	or	r24, r25
    4432:	c9 f0       	breq	.+50     	; 0x4466 <xQueueGenericCreate+0x50>
    4434:	10 9f       	mul	r17, r16
    4436:	c0 01       	movw	r24, r0
    4438:	11 24       	eor	r1, r1
    443a:	01 96       	adiw	r24, 0x01	; 1
    443c:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <pvPortMalloc>
    4440:	88 83       	st	Y, r24
    4442:	99 83       	std	Y+1, r25	; 0x01
    4444:	89 2b       	or	r24, r25
    4446:	39 f0       	breq	.+14     	; 0x4456 <xQueueGenericCreate+0x40>
    4448:	1f 8f       	std	Y+31, r17	; 0x1f
    444a:	08 a3       	std	Y+32, r16	; 0x20
    444c:	61 e0       	ldi	r22, 0x01	; 1
    444e:	ce 01       	movw	r24, r28
    4450:	0e 94 cf 21 	call	0x439e	; 0x439e <xQueueGenericReset>
    4454:	08 c0       	rjmp	.+16     	; 0x4466 <xQueueGenericCreate+0x50>
    4456:	ce 01       	movw	r24, r28
    4458:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <vPortFree>
    445c:	c0 e0       	ldi	r28, 0x00	; 0
    445e:	d0 e0       	ldi	r29, 0x00	; 0
    4460:	02 c0       	rjmp	.+4      	; 0x4466 <xQueueGenericCreate+0x50>
    4462:	c0 e0       	ldi	r28, 0x00	; 0
    4464:	d0 e0       	ldi	r29, 0x00	; 0
    4466:	ce 01       	movw	r24, r28
    4468:	df 91       	pop	r29
    446a:	cf 91       	pop	r28
    446c:	1f 91       	pop	r17
    446e:	0f 91       	pop	r16
    4470:	08 95       	ret

00004472 <xQueueGenericSend>:
    4472:	af 92       	push	r10
    4474:	bf 92       	push	r11
    4476:	cf 92       	push	r12
    4478:	df 92       	push	r13
    447a:	ef 92       	push	r14
    447c:	ff 92       	push	r15
    447e:	0f 93       	push	r16
    4480:	1f 93       	push	r17
    4482:	cf 93       	push	r28
    4484:	df 93       	push	r29
    4486:	cd b7       	in	r28, 0x3d	; 61
    4488:	de b7       	in	r29, 0x3e	; 62
    448a:	29 97       	sbiw	r28, 0x09	; 9
    448c:	cd bf       	out	0x3d, r28	; 61
    448e:	de bf       	out	0x3e, r29	; 62
    4490:	7c 01       	movw	r14, r24
    4492:	5b 01       	movw	r10, r22
    4494:	2e 83       	std	Y+6, r18	; 0x06
    4496:	3f 83       	std	Y+7, r19	; 0x07
    4498:	48 87       	std	Y+8, r20	; 0x08
    449a:	59 87       	std	Y+9, r21	; 0x09
    449c:	10 e0       	ldi	r17, 0x00	; 0
    449e:	6c 01       	movw	r12, r24
    44a0:	88 e0       	ldi	r24, 0x08	; 8
    44a2:	c8 0e       	add	r12, r24
    44a4:	d1 1c       	adc	r13, r1
    44a6:	0f b6       	in	r0, 0x3f	; 63
    44a8:	f8 94       	cli
    44aa:	0f 92       	push	r0
    44ac:	f7 01       	movw	r30, r14
    44ae:	96 8d       	ldd	r25, Z+30	; 0x1e
    44b0:	87 8d       	ldd	r24, Z+31	; 0x1f
    44b2:	98 17       	cp	r25, r24
    44b4:	a8 f4       	brcc	.+42     	; 0x44e0 <xQueueGenericSend+0x6e>
    44b6:	40 2f       	mov	r20, r16
    44b8:	b5 01       	movw	r22, r10
    44ba:	c7 01       	movw	r24, r14
    44bc:	0e 94 1f 21 	call	0x423e	; 0x423e <prvCopyDataToQueue>
    44c0:	f7 01       	movw	r30, r14
    44c2:	83 89       	ldd	r24, Z+19	; 0x13
    44c4:	88 23       	and	r24, r24
    44c6:	41 f0       	breq	.+16     	; 0x44d8 <xQueueGenericSend+0x66>
    44c8:	c7 01       	movw	r24, r14
    44ca:	43 96       	adiw	r24, 0x13	; 19
    44cc:	0e 94 56 28 	call	0x50ac	; 0x50ac <xTaskRemoveFromEventList>
    44d0:	81 30       	cpi	r24, 0x01	; 1
    44d2:	11 f4       	brne	.+4      	; 0x44d8 <xQueueGenericSend+0x66>
    44d4:	0e 94 58 20 	call	0x40b0	; 0x40b0 <vPortYield>
    44d8:	0f 90       	pop	r0
    44da:	0f be       	out	0x3f, r0	; 63
    44dc:	81 e0       	ldi	r24, 0x01	; 1
    44de:	56 c0       	rjmp	.+172    	; 0x458c <xQueueGenericSend+0x11a>
    44e0:	8e 81       	ldd	r24, Y+6	; 0x06
    44e2:	9f 81       	ldd	r25, Y+7	; 0x07
    44e4:	a8 85       	ldd	r26, Y+8	; 0x08
    44e6:	b9 85       	ldd	r27, Y+9	; 0x09
    44e8:	89 2b       	or	r24, r25
    44ea:	8a 2b       	or	r24, r26
    44ec:	8b 2b       	or	r24, r27
    44ee:	21 f4       	brne	.+8      	; 0x44f8 <xQueueGenericSend+0x86>
    44f0:	0f 90       	pop	r0
    44f2:	0f be       	out	0x3f, r0	; 63
    44f4:	80 e0       	ldi	r24, 0x00	; 0
    44f6:	4a c0       	rjmp	.+148    	; 0x458c <xQueueGenericSend+0x11a>
    44f8:	11 11       	cpse	r17, r1
    44fa:	05 c0       	rjmp	.+10     	; 0x4506 <xQueueGenericSend+0x94>
    44fc:	ce 01       	movw	r24, r28
    44fe:	01 96       	adiw	r24, 0x01	; 1
    4500:	0e 94 95 28 	call	0x512a	; 0x512a <vTaskSetTimeOutState>
    4504:	11 e0       	ldi	r17, 0x01	; 1
    4506:	0f 90       	pop	r0
    4508:	0f be       	out	0x3f, r0	; 63
    450a:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <vTaskSuspendAll>
    450e:	0f b6       	in	r0, 0x3f	; 63
    4510:	f8 94       	cli
    4512:	0f 92       	push	r0
    4514:	f7 01       	movw	r30, r14
    4516:	81 a1       	ldd	r24, Z+33	; 0x21
    4518:	8f 3f       	cpi	r24, 0xFF	; 255
    451a:	09 f4       	brne	.+2      	; 0x451e <xQueueGenericSend+0xac>
    451c:	11 a2       	std	Z+33, r1	; 0x21
    451e:	f7 01       	movw	r30, r14
    4520:	82 a1       	ldd	r24, Z+34	; 0x22
    4522:	8f 3f       	cpi	r24, 0xFF	; 255
    4524:	09 f4       	brne	.+2      	; 0x4528 <xQueueGenericSend+0xb6>
    4526:	12 a2       	std	Z+34, r1	; 0x22
    4528:	0f 90       	pop	r0
    452a:	0f be       	out	0x3f, r0	; 63
    452c:	be 01       	movw	r22, r28
    452e:	6a 5f       	subi	r22, 0xFA	; 250
    4530:	7f 4f       	sbci	r23, 0xFF	; 255
    4532:	ce 01       	movw	r24, r28
    4534:	01 96       	adiw	r24, 0x01	; 1
    4536:	0e 94 a6 28 	call	0x514c	; 0x514c <xTaskCheckForTimeOut>
    453a:	81 11       	cpse	r24, r1
    453c:	21 c0       	rjmp	.+66     	; 0x4580 <xQueueGenericSend+0x10e>
    453e:	0f b6       	in	r0, 0x3f	; 63
    4540:	f8 94       	cli
    4542:	0f 92       	push	r0
    4544:	f7 01       	movw	r30, r14
    4546:	96 8d       	ldd	r25, Z+30	; 0x1e
    4548:	0f 90       	pop	r0
    454a:	0f be       	out	0x3f, r0	; 63
    454c:	87 8d       	ldd	r24, Z+31	; 0x1f
    454e:	98 13       	cpse	r25, r24
    4550:	11 c0       	rjmp	.+34     	; 0x4574 <xQueueGenericSend+0x102>
    4552:	4e 81       	ldd	r20, Y+6	; 0x06
    4554:	5f 81       	ldd	r21, Y+7	; 0x07
    4556:	68 85       	ldd	r22, Y+8	; 0x08
    4558:	79 85       	ldd	r23, Y+9	; 0x09
    455a:	c6 01       	movw	r24, r12
    455c:	0e 94 2c 28 	call	0x5058	; 0x5058 <vTaskPlaceOnEventList>
    4560:	c7 01       	movw	r24, r14
    4562:	0e 94 85 21 	call	0x430a	; 0x430a <prvUnlockQueue>
    4566:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <xTaskResumeAll>
    456a:	81 11       	cpse	r24, r1
    456c:	9c cf       	rjmp	.-200    	; 0x44a6 <xQueueGenericSend+0x34>
    456e:	0e 94 58 20 	call	0x40b0	; 0x40b0 <vPortYield>
    4572:	99 cf       	rjmp	.-206    	; 0x44a6 <xQueueGenericSend+0x34>
    4574:	c7 01       	movw	r24, r14
    4576:	0e 94 85 21 	call	0x430a	; 0x430a <prvUnlockQueue>
    457a:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <xTaskResumeAll>
    457e:	93 cf       	rjmp	.-218    	; 0x44a6 <xQueueGenericSend+0x34>
    4580:	c7 01       	movw	r24, r14
    4582:	0e 94 85 21 	call	0x430a	; 0x430a <prvUnlockQueue>
    4586:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <xTaskResumeAll>
    458a:	80 e0       	ldi	r24, 0x00	; 0
    458c:	29 96       	adiw	r28, 0x09	; 9
    458e:	cd bf       	out	0x3d, r28	; 61
    4590:	de bf       	out	0x3e, r29	; 62
    4592:	df 91       	pop	r29
    4594:	cf 91       	pop	r28
    4596:	1f 91       	pop	r17
    4598:	0f 91       	pop	r16
    459a:	ff 90       	pop	r15
    459c:	ef 90       	pop	r14
    459e:	df 90       	pop	r13
    45a0:	cf 90       	pop	r12
    45a2:	bf 90       	pop	r11
    45a4:	af 90       	pop	r10
    45a6:	08 95       	ret

000045a8 <xQueueGenericSendFromISR>:
    45a8:	0f 93       	push	r16
    45aa:	1f 93       	push	r17
    45ac:	cf 93       	push	r28
    45ae:	df 93       	push	r29
    45b0:	8a 01       	movw	r16, r20
    45b2:	fc 01       	movw	r30, r24
    45b4:	56 8d       	ldd	r21, Z+30	; 0x1e
    45b6:	37 8d       	ldd	r19, Z+31	; 0x1f
    45b8:	53 17       	cp	r21, r19
    45ba:	c0 f4       	brcc	.+48     	; 0x45ec <xQueueGenericSendFromISR+0x44>
    45bc:	42 2f       	mov	r20, r18
    45be:	ec 01       	movw	r28, r24
    45c0:	0e 94 1f 21 	call	0x423e	; 0x423e <prvCopyDataToQueue>
    45c4:	8a a1       	ldd	r24, Y+34	; 0x22
    45c6:	8f 3f       	cpi	r24, 0xFF	; 255
    45c8:	69 f4       	brne	.+26     	; 0x45e4 <xQueueGenericSendFromISR+0x3c>
    45ca:	8b 89       	ldd	r24, Y+19	; 0x13
    45cc:	88 23       	and	r24, r24
    45ce:	81 f0       	breq	.+32     	; 0x45f0 <xQueueGenericSendFromISR+0x48>
    45d0:	ce 01       	movw	r24, r28
    45d2:	43 96       	adiw	r24, 0x13	; 19
    45d4:	0e 94 56 28 	call	0x50ac	; 0x50ac <xTaskRemoveFromEventList>
    45d8:	88 23       	and	r24, r24
    45da:	61 f0       	breq	.+24     	; 0x45f4 <xQueueGenericSendFromISR+0x4c>
    45dc:	81 e0       	ldi	r24, 0x01	; 1
    45de:	f8 01       	movw	r30, r16
    45e0:	80 83       	st	Z, r24
    45e2:	09 c0       	rjmp	.+18     	; 0x45f6 <xQueueGenericSendFromISR+0x4e>
    45e4:	8f 5f       	subi	r24, 0xFF	; 255
    45e6:	8a a3       	std	Y+34, r24	; 0x22
    45e8:	81 e0       	ldi	r24, 0x01	; 1
    45ea:	05 c0       	rjmp	.+10     	; 0x45f6 <xQueueGenericSendFromISR+0x4e>
    45ec:	80 e0       	ldi	r24, 0x00	; 0
    45ee:	03 c0       	rjmp	.+6      	; 0x45f6 <xQueueGenericSendFromISR+0x4e>
    45f0:	81 e0       	ldi	r24, 0x01	; 1
    45f2:	01 c0       	rjmp	.+2      	; 0x45f6 <xQueueGenericSendFromISR+0x4e>
    45f4:	81 e0       	ldi	r24, 0x01	; 1
    45f6:	df 91       	pop	r29
    45f8:	cf 91       	pop	r28
    45fa:	1f 91       	pop	r17
    45fc:	0f 91       	pop	r16
    45fe:	08 95       	ret

00004600 <xQueueGenericReceive>:
    4600:	af 92       	push	r10
    4602:	bf 92       	push	r11
    4604:	cf 92       	push	r12
    4606:	df 92       	push	r13
    4608:	ef 92       	push	r14
    460a:	ff 92       	push	r15
    460c:	0f 93       	push	r16
    460e:	1f 93       	push	r17
    4610:	cf 93       	push	r28
    4612:	df 93       	push	r29
    4614:	cd b7       	in	r28, 0x3d	; 61
    4616:	de b7       	in	r29, 0x3e	; 62
    4618:	29 97       	sbiw	r28, 0x09	; 9
    461a:	cd bf       	out	0x3d, r28	; 61
    461c:	de bf       	out	0x3e, r29	; 62
    461e:	7c 01       	movw	r14, r24
    4620:	5b 01       	movw	r10, r22
    4622:	2e 83       	std	Y+6, r18	; 0x06
    4624:	3f 83       	std	Y+7, r19	; 0x07
    4626:	48 87       	std	Y+8, r20	; 0x08
    4628:	59 87       	std	Y+9, r21	; 0x09
    462a:	10 e0       	ldi	r17, 0x00	; 0
    462c:	6c 01       	movw	r12, r24
    462e:	83 e1       	ldi	r24, 0x13	; 19
    4630:	c8 0e       	add	r12, r24
    4632:	d1 1c       	adc	r13, r1
    4634:	0f b6       	in	r0, 0x3f	; 63
    4636:	f8 94       	cli
    4638:	0f 92       	push	r0
    463a:	f7 01       	movw	r30, r14
    463c:	86 8d       	ldd	r24, Z+30	; 0x1e
    463e:	88 23       	and	r24, r24
    4640:	99 f1       	breq	.+102    	; 0x46a8 <xQueueGenericReceive+0xa8>
    4642:	c6 80       	ldd	r12, Z+6	; 0x06
    4644:	d7 80       	ldd	r13, Z+7	; 0x07
    4646:	b5 01       	movw	r22, r10
    4648:	c7 01       	movw	r24, r14
    464a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <prvCopyDataFromQueue>
    464e:	01 11       	cpse	r16, r1
    4650:	1a c0       	rjmp	.+52     	; 0x4686 <xQueueGenericReceive+0x86>
    4652:	f7 01       	movw	r30, r14
    4654:	86 8d       	ldd	r24, Z+30	; 0x1e
    4656:	81 50       	subi	r24, 0x01	; 1
    4658:	86 8f       	std	Z+30, r24	; 0x1e
    465a:	80 81       	ld	r24, Z
    465c:	91 81       	ldd	r25, Z+1	; 0x01
    465e:	89 2b       	or	r24, r25
    4660:	29 f4       	brne	.+10     	; 0x466c <xQueueGenericReceive+0x6c>
    4662:	0e 94 30 29 	call	0x5260	; 0x5260 <xTaskGetCurrentTaskHandle>
    4666:	f7 01       	movw	r30, r14
    4668:	82 83       	std	Z+2, r24	; 0x02
    466a:	93 83       	std	Z+3, r25	; 0x03
    466c:	f7 01       	movw	r30, r14
    466e:	80 85       	ldd	r24, Z+8	; 0x08
    4670:	88 23       	and	r24, r24
    4672:	b1 f0       	breq	.+44     	; 0x46a0 <xQueueGenericReceive+0xa0>
    4674:	c7 01       	movw	r24, r14
    4676:	08 96       	adiw	r24, 0x08	; 8
    4678:	0e 94 56 28 	call	0x50ac	; 0x50ac <xTaskRemoveFromEventList>
    467c:	81 30       	cpi	r24, 0x01	; 1
    467e:	81 f4       	brne	.+32     	; 0x46a0 <xQueueGenericReceive+0xa0>
    4680:	0e 94 58 20 	call	0x40b0	; 0x40b0 <vPortYield>
    4684:	0d c0       	rjmp	.+26     	; 0x46a0 <xQueueGenericReceive+0xa0>
    4686:	f7 01       	movw	r30, r14
    4688:	c6 82       	std	Z+6, r12	; 0x06
    468a:	d7 82       	std	Z+7, r13	; 0x07
    468c:	83 89       	ldd	r24, Z+19	; 0x13
    468e:	88 23       	and	r24, r24
    4690:	39 f0       	breq	.+14     	; 0x46a0 <xQueueGenericReceive+0xa0>
    4692:	c7 01       	movw	r24, r14
    4694:	43 96       	adiw	r24, 0x13	; 19
    4696:	0e 94 56 28 	call	0x50ac	; 0x50ac <xTaskRemoveFromEventList>
    469a:	81 11       	cpse	r24, r1
    469c:	0e 94 58 20 	call	0x40b0	; 0x40b0 <vPortYield>
    46a0:	0f 90       	pop	r0
    46a2:	0f be       	out	0x3f, r0	; 63
    46a4:	81 e0       	ldi	r24, 0x01	; 1
    46a6:	62 c0       	rjmp	.+196    	; 0x476c <xQueueGenericReceive+0x16c>
    46a8:	8e 81       	ldd	r24, Y+6	; 0x06
    46aa:	9f 81       	ldd	r25, Y+7	; 0x07
    46ac:	a8 85       	ldd	r26, Y+8	; 0x08
    46ae:	b9 85       	ldd	r27, Y+9	; 0x09
    46b0:	89 2b       	or	r24, r25
    46b2:	8a 2b       	or	r24, r26
    46b4:	8b 2b       	or	r24, r27
    46b6:	21 f4       	brne	.+8      	; 0x46c0 <xQueueGenericReceive+0xc0>
    46b8:	0f 90       	pop	r0
    46ba:	0f be       	out	0x3f, r0	; 63
    46bc:	80 e0       	ldi	r24, 0x00	; 0
    46be:	56 c0       	rjmp	.+172    	; 0x476c <xQueueGenericReceive+0x16c>
    46c0:	11 11       	cpse	r17, r1
    46c2:	05 c0       	rjmp	.+10     	; 0x46ce <xQueueGenericReceive+0xce>
    46c4:	ce 01       	movw	r24, r28
    46c6:	01 96       	adiw	r24, 0x01	; 1
    46c8:	0e 94 95 28 	call	0x512a	; 0x512a <vTaskSetTimeOutState>
    46cc:	11 e0       	ldi	r17, 0x01	; 1
    46ce:	0f 90       	pop	r0
    46d0:	0f be       	out	0x3f, r0	; 63
    46d2:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <vTaskSuspendAll>
    46d6:	0f b6       	in	r0, 0x3f	; 63
    46d8:	f8 94       	cli
    46da:	0f 92       	push	r0
    46dc:	f7 01       	movw	r30, r14
    46de:	81 a1       	ldd	r24, Z+33	; 0x21
    46e0:	8f 3f       	cpi	r24, 0xFF	; 255
    46e2:	09 f4       	brne	.+2      	; 0x46e6 <xQueueGenericReceive+0xe6>
    46e4:	11 a2       	std	Z+33, r1	; 0x21
    46e6:	f7 01       	movw	r30, r14
    46e8:	82 a1       	ldd	r24, Z+34	; 0x22
    46ea:	8f 3f       	cpi	r24, 0xFF	; 255
    46ec:	09 f4       	brne	.+2      	; 0x46f0 <xQueueGenericReceive+0xf0>
    46ee:	12 a2       	std	Z+34, r1	; 0x22
    46f0:	0f 90       	pop	r0
    46f2:	0f be       	out	0x3f, r0	; 63
    46f4:	be 01       	movw	r22, r28
    46f6:	6a 5f       	subi	r22, 0xFA	; 250
    46f8:	7f 4f       	sbci	r23, 0xFF	; 255
    46fa:	ce 01       	movw	r24, r28
    46fc:	01 96       	adiw	r24, 0x01	; 1
    46fe:	0e 94 a6 28 	call	0x514c	; 0x514c <xTaskCheckForTimeOut>
    4702:	81 11       	cpse	r24, r1
    4704:	2d c0       	rjmp	.+90     	; 0x4760 <xQueueGenericReceive+0x160>
    4706:	0f b6       	in	r0, 0x3f	; 63
    4708:	f8 94       	cli
    470a:	0f 92       	push	r0
    470c:	f7 01       	movw	r30, r14
    470e:	86 8d       	ldd	r24, Z+30	; 0x1e
    4710:	0f 90       	pop	r0
    4712:	0f be       	out	0x3f, r0	; 63
    4714:	81 11       	cpse	r24, r1
    4716:	1e c0       	rjmp	.+60     	; 0x4754 <xQueueGenericReceive+0x154>
    4718:	80 81       	ld	r24, Z
    471a:	91 81       	ldd	r25, Z+1	; 0x01
    471c:	89 2b       	or	r24, r25
    471e:	49 f4       	brne	.+18     	; 0x4732 <xQueueGenericReceive+0x132>
    4720:	0f b6       	in	r0, 0x3f	; 63
    4722:	f8 94       	cli
    4724:	0f 92       	push	r0
    4726:	82 81       	ldd	r24, Z+2	; 0x02
    4728:	93 81       	ldd	r25, Z+3	; 0x03
    472a:	0e 94 35 29 	call	0x526a	; 0x526a <vTaskPriorityInherit>
    472e:	0f 90       	pop	r0
    4730:	0f be       	out	0x3f, r0	; 63
    4732:	4e 81       	ldd	r20, Y+6	; 0x06
    4734:	5f 81       	ldd	r21, Y+7	; 0x07
    4736:	68 85       	ldd	r22, Y+8	; 0x08
    4738:	79 85       	ldd	r23, Y+9	; 0x09
    473a:	c6 01       	movw	r24, r12
    473c:	0e 94 2c 28 	call	0x5058	; 0x5058 <vTaskPlaceOnEventList>
    4740:	c7 01       	movw	r24, r14
    4742:	0e 94 85 21 	call	0x430a	; 0x430a <prvUnlockQueue>
    4746:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <xTaskResumeAll>
    474a:	81 11       	cpse	r24, r1
    474c:	73 cf       	rjmp	.-282    	; 0x4634 <xQueueGenericReceive+0x34>
    474e:	0e 94 58 20 	call	0x40b0	; 0x40b0 <vPortYield>
    4752:	70 cf       	rjmp	.-288    	; 0x4634 <xQueueGenericReceive+0x34>
    4754:	c7 01       	movw	r24, r14
    4756:	0e 94 85 21 	call	0x430a	; 0x430a <prvUnlockQueue>
    475a:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <xTaskResumeAll>
    475e:	6a cf       	rjmp	.-300    	; 0x4634 <xQueueGenericReceive+0x34>
    4760:	c7 01       	movw	r24, r14
    4762:	0e 94 85 21 	call	0x430a	; 0x430a <prvUnlockQueue>
    4766:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <xTaskResumeAll>
    476a:	80 e0       	ldi	r24, 0x00	; 0
    476c:	29 96       	adiw	r28, 0x09	; 9
    476e:	cd bf       	out	0x3d, r28	; 61
    4770:	de bf       	out	0x3e, r29	; 62
    4772:	df 91       	pop	r29
    4774:	cf 91       	pop	r28
    4776:	1f 91       	pop	r17
    4778:	0f 91       	pop	r16
    477a:	ff 90       	pop	r15
    477c:	ef 90       	pop	r14
    477e:	df 90       	pop	r13
    4780:	cf 90       	pop	r12
    4782:	bf 90       	pop	r11
    4784:	af 90       	pop	r10
    4786:	08 95       	ret

00004788 <xQueueReceiveFromISR>:
    4788:	0f 93       	push	r16
    478a:	1f 93       	push	r17
    478c:	cf 93       	push	r28
    478e:	df 93       	push	r29
    4790:	fc 01       	movw	r30, r24
    4792:	26 8d       	ldd	r18, Z+30	; 0x1e
    4794:	22 23       	and	r18, r18
    4796:	d9 f0       	breq	.+54     	; 0x47ce <xQueueReceiveFromISR+0x46>
    4798:	8a 01       	movw	r16, r20
    479a:	ec 01       	movw	r28, r24
    479c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <prvCopyDataFromQueue>
    47a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    47a2:	81 50       	subi	r24, 0x01	; 1
    47a4:	8e 8f       	std	Y+30, r24	; 0x1e
    47a6:	89 a1       	ldd	r24, Y+33	; 0x21
    47a8:	8f 3f       	cpi	r24, 0xFF	; 255
    47aa:	69 f4       	brne	.+26     	; 0x47c6 <xQueueReceiveFromISR+0x3e>
    47ac:	88 85       	ldd	r24, Y+8	; 0x08
    47ae:	88 23       	and	r24, r24
    47b0:	81 f0       	breq	.+32     	; 0x47d2 <xQueueReceiveFromISR+0x4a>
    47b2:	ce 01       	movw	r24, r28
    47b4:	08 96       	adiw	r24, 0x08	; 8
    47b6:	0e 94 56 28 	call	0x50ac	; 0x50ac <xTaskRemoveFromEventList>
    47ba:	88 23       	and	r24, r24
    47bc:	61 f0       	breq	.+24     	; 0x47d6 <xQueueReceiveFromISR+0x4e>
    47be:	81 e0       	ldi	r24, 0x01	; 1
    47c0:	f8 01       	movw	r30, r16
    47c2:	80 83       	st	Z, r24
    47c4:	09 c0       	rjmp	.+18     	; 0x47d8 <xQueueReceiveFromISR+0x50>
    47c6:	8f 5f       	subi	r24, 0xFF	; 255
    47c8:	89 a3       	std	Y+33, r24	; 0x21
    47ca:	81 e0       	ldi	r24, 0x01	; 1
    47cc:	05 c0       	rjmp	.+10     	; 0x47d8 <xQueueReceiveFromISR+0x50>
    47ce:	80 e0       	ldi	r24, 0x00	; 0
    47d0:	03 c0       	rjmp	.+6      	; 0x47d8 <xQueueReceiveFromISR+0x50>
    47d2:	81 e0       	ldi	r24, 0x01	; 1
    47d4:	01 c0       	rjmp	.+2      	; 0x47d8 <xQueueReceiveFromISR+0x50>
    47d6:	81 e0       	ldi	r24, 0x01	; 1
    47d8:	df 91       	pop	r29
    47da:	cf 91       	pop	r28
    47dc:	1f 91       	pop	r17
    47de:	0f 91       	pop	r16
    47e0:	08 95       	ret

000047e2 <uxQueueMessagesWaiting>:
    47e2:	0f b6       	in	r0, 0x3f	; 63
    47e4:	f8 94       	cli
    47e6:	0f 92       	push	r0
    47e8:	fc 01       	movw	r30, r24
    47ea:	86 8d       	ldd	r24, Z+30	; 0x1e
    47ec:	0f 90       	pop	r0
    47ee:	0f be       	out	0x3f, r0	; 63
    47f0:	08 95       	ret

000047f2 <uxQueueMessagesWaitingFromISR>:
    47f2:	fc 01       	movw	r30, r24
    47f4:	86 8d       	ldd	r24, Z+30	; 0x1e
    47f6:	08 95       	ret

000047f8 <prvIdleTask>:
    47f8:	c7 eb       	ldi	r28, 0xB7	; 183
    47fa:	d1 e4       	ldi	r29, 0x41	; 65
    47fc:	88 81       	ld	r24, Y
    47fe:	82 30       	cpi	r24, 0x02	; 2
    4800:	e8 f3       	brcs	.-6      	; 0x47fc <prvIdleTask+0x4>
    4802:	0e 94 58 20 	call	0x40b0	; 0x40b0 <vPortYield>
    4806:	fa cf       	rjmp	.-12     	; 0x47fc <prvIdleTask+0x4>

00004808 <prvAddCurrentTaskToDelayedList>:
    4808:	cf 92       	push	r12
    480a:	df 92       	push	r13
    480c:	ef 92       	push	r14
    480e:	ff 92       	push	r15
    4810:	6b 01       	movw	r12, r22
    4812:	7c 01       	movw	r14, r24
    4814:	e0 91 e3 41 	lds	r30, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4818:	f0 91 e4 41 	lds	r31, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    481c:	62 83       	std	Z+2, r22	; 0x02
    481e:	73 83       	std	Z+3, r23	; 0x03
    4820:	84 83       	std	Z+4, r24	; 0x04
    4822:	95 83       	std	Z+5, r25	; 0x05
    4824:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    4828:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    482c:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    4830:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    4834:	c8 16       	cp	r12, r24
    4836:	d9 06       	cpc	r13, r25
    4838:	ea 06       	cpc	r14, r26
    483a:	fb 06       	cpc	r15, r27
    483c:	68 f4       	brcc	.+26     	; 0x4858 <prvAddCurrentTaskToDelayedList+0x50>
    483e:	60 91 e3 41 	lds	r22, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4842:	70 91 e4 41 	lds	r23, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4846:	80 91 9d 41 	lds	r24, 0x419D	; 0x80419d <pxOverflowDelayedTaskList>
    484a:	90 91 9e 41 	lds	r25, 0x419E	; 0x80419e <pxOverflowDelayedTaskList+0x1>
    484e:	6e 5f       	subi	r22, 0xFE	; 254
    4850:	7f 4f       	sbci	r23, 0xFF	; 255
    4852:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <vListInsert>
    4856:	21 c0       	rjmp	.+66     	; 0x489a <prvAddCurrentTaskToDelayedList+0x92>
    4858:	60 91 e3 41 	lds	r22, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    485c:	70 91 e4 41 	lds	r23, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4860:	80 91 9f 41 	lds	r24, 0x419F	; 0x80419f <pxDelayedTaskList>
    4864:	90 91 a0 41 	lds	r25, 0x41A0	; 0x8041a0 <pxDelayedTaskList+0x1>
    4868:	6e 5f       	subi	r22, 0xFE	; 254
    486a:	7f 4f       	sbci	r23, 0xFF	; 255
    486c:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <vListInsert>
    4870:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    4874:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    4878:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    487c:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    4880:	c8 16       	cp	r12, r24
    4882:	d9 06       	cpc	r13, r25
    4884:	ea 06       	cpc	r14, r26
    4886:	fb 06       	cpc	r15, r27
    4888:	40 f4       	brcc	.+16     	; 0x489a <prvAddCurrentTaskToDelayedList+0x92>
    488a:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    488e:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    4892:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    4896:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    489a:	ff 90       	pop	r15
    489c:	ef 90       	pop	r14
    489e:	df 90       	pop	r13
    48a0:	cf 90       	pop	r12
    48a2:	08 95       	ret

000048a4 <xTaskGenericCreate>:
    48a4:	4f 92       	push	r4
    48a6:	5f 92       	push	r5
    48a8:	6f 92       	push	r6
    48aa:	7f 92       	push	r7
    48ac:	8f 92       	push	r8
    48ae:	9f 92       	push	r9
    48b0:	af 92       	push	r10
    48b2:	bf 92       	push	r11
    48b4:	cf 92       	push	r12
    48b6:	df 92       	push	r13
    48b8:	ef 92       	push	r14
    48ba:	ff 92       	push	r15
    48bc:	0f 93       	push	r16
    48be:	1f 93       	push	r17
    48c0:	cf 93       	push	r28
    48c2:	df 93       	push	r29
    48c4:	5c 01       	movw	r10, r24
    48c6:	4b 01       	movw	r8, r22
    48c8:	3a 01       	movw	r6, r20
    48ca:	29 01       	movw	r4, r18
    48cc:	88 e2       	ldi	r24, 0x28	; 40
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <pvPortMalloc>
    48d4:	ec 01       	movw	r28, r24
    48d6:	89 2b       	or	r24, r25
    48d8:	09 f4       	brne	.+2      	; 0x48dc <xTaskGenericCreate+0x38>
    48da:	d4 c0       	rjmp	.+424    	; 0x4a84 <xTaskGenericCreate+0x1e0>
    48dc:	c1 14       	cp	r12, r1
    48de:	d1 04       	cpc	r13, r1
    48e0:	09 f0       	breq	.+2      	; 0x48e4 <xTaskGenericCreate+0x40>
    48e2:	cc c0       	rjmp	.+408    	; 0x4a7c <xTaskGenericCreate+0x1d8>
    48e4:	c3 01       	movw	r24, r6
    48e6:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <pvPortMalloc>
    48ea:	8b 8f       	std	Y+27, r24	; 0x1b
    48ec:	9c 8f       	std	Y+28, r25	; 0x1c
    48ee:	00 97       	sbiw	r24, 0x00	; 0
    48f0:	21 f4       	brne	.+8      	; 0x48fa <xTaskGenericCreate+0x56>
    48f2:	ce 01       	movw	r24, r28
    48f4:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <vPortFree>
    48f8:	c5 c0       	rjmp	.+394    	; 0x4a84 <xTaskGenericCreate+0x1e0>
    48fa:	a3 01       	movw	r20, r6
    48fc:	61 e1       	ldi	r22, 0x11	; 17
    48fe:	70 e0       	ldi	r23, 0x00	; 0
    4900:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <memset>
    4904:	93 01       	movw	r18, r6
    4906:	21 50       	subi	r18, 0x01	; 1
    4908:	31 09       	sbc	r19, r1
    490a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    490c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    490e:	3c 01       	movw	r6, r24
    4910:	62 0e       	add	r6, r18
    4912:	73 1e       	adc	r7, r19
    4914:	4a e0       	ldi	r20, 0x0A	; 10
    4916:	50 e0       	ldi	r21, 0x00	; 0
    4918:	b4 01       	movw	r22, r8
    491a:	ce 01       	movw	r24, r28
    491c:	4d 96       	adiw	r24, 0x1d	; 29
    491e:	0e 94 81 35 	call	0x6b02	; 0x6b02 <strncpy>
    4922:	1e a2       	std	Y+38, r1	; 0x26
    4924:	10 2f       	mov	r17, r16
    4926:	04 30       	cpi	r16, 0x04	; 4
    4928:	08 f0       	brcs	.+2      	; 0x492c <xTaskGenericCreate+0x88>
    492a:	13 e0       	ldi	r17, 0x03	; 3
    492c:	1a 8f       	std	Y+26, r17	; 0x1a
    492e:	1f a3       	std	Y+39, r17	; 0x27
    4930:	6e 01       	movw	r12, r28
    4932:	22 e0       	ldi	r18, 0x02	; 2
    4934:	c2 0e       	add	r12, r18
    4936:	d1 1c       	adc	r13, r1
    4938:	c6 01       	movw	r24, r12
    493a:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <vListInitialiseItem>
    493e:	ce 01       	movw	r24, r28
    4940:	0e 96       	adiw	r24, 0x0e	; 14
    4942:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <vListInitialiseItem>
    4946:	ca 87       	std	Y+10, r28	; 0x0a
    4948:	db 87       	std	Y+11, r29	; 0x0b
    494a:	84 e0       	ldi	r24, 0x04	; 4
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	a0 e0       	ldi	r26, 0x00	; 0
    4950:	b0 e0       	ldi	r27, 0x00	; 0
    4952:	81 1b       	sub	r24, r17
    4954:	91 09       	sbc	r25, r1
    4956:	a1 09       	sbc	r26, r1
    4958:	b1 09       	sbc	r27, r1
    495a:	8e 87       	std	Y+14, r24	; 0x0e
    495c:	9f 87       	std	Y+15, r25	; 0x0f
    495e:	a8 8b       	std	Y+16, r26	; 0x10
    4960:	b9 8b       	std	Y+17, r27	; 0x11
    4962:	ce 8b       	std	Y+22, r28	; 0x16
    4964:	df 8b       	std	Y+23, r29	; 0x17
    4966:	a2 01       	movw	r20, r4
    4968:	b5 01       	movw	r22, r10
    496a:	c3 01       	movw	r24, r6
    496c:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <pxPortInitialiseStack>
    4970:	88 83       	st	Y, r24
    4972:	99 83       	std	Y+1, r25	; 0x01
    4974:	e1 14       	cp	r14, r1
    4976:	f1 04       	cpc	r15, r1
    4978:	19 f0       	breq	.+6      	; 0x4980 <xTaskGenericCreate+0xdc>
    497a:	f7 01       	movw	r30, r14
    497c:	c0 83       	st	Z, r28
    497e:	d1 83       	std	Z+1, r29	; 0x01
    4980:	0f b6       	in	r0, 0x3f	; 63
    4982:	f8 94       	cli
    4984:	0f 92       	push	r0
    4986:	80 91 8f 41 	lds	r24, 0x418F	; 0x80418f <uxCurrentNumberOfTasks>
    498a:	8f 5f       	subi	r24, 0xFF	; 255
    498c:	80 93 8f 41 	sts	0x418F, r24	; 0x80418f <uxCurrentNumberOfTasks>
    4990:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4994:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4998:	89 2b       	or	r24, r25
    499a:	89 f5       	brne	.+98     	; 0x49fe <xTaskGenericCreate+0x15a>
    499c:	c0 93 e3 41 	sts	0x41E3, r28	; 0x8041e3 <pxCurrentTCB>
    49a0:	d0 93 e4 41 	sts	0x41E4, r29	; 0x8041e4 <pxCurrentTCB+0x1>
    49a4:	80 91 8f 41 	lds	r24, 0x418F	; 0x80418f <uxCurrentNumberOfTasks>
    49a8:	81 30       	cpi	r24, 0x01	; 1
    49aa:	c1 f5       	brne	.+112    	; 0x4a1c <xTaskGenericCreate+0x178>
    49ac:	87 eb       	ldi	r24, 0xB7	; 183
    49ae:	91 e4       	ldi	r25, 0x41	; 65
    49b0:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <vListInitialise>
    49b4:	82 ec       	ldi	r24, 0xC2	; 194
    49b6:	91 e4       	ldi	r25, 0x41	; 65
    49b8:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <vListInitialise>
    49bc:	8d ec       	ldi	r24, 0xCD	; 205
    49be:	91 e4       	ldi	r25, 0x41	; 65
    49c0:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <vListInitialise>
    49c4:	88 ed       	ldi	r24, 0xD8	; 216
    49c6:	91 e4       	ldi	r25, 0x41	; 65
    49c8:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <vListInitialise>
    49cc:	8c ea       	ldi	r24, 0xAC	; 172
    49ce:	91 e4       	ldi	r25, 0x41	; 65
    49d0:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <vListInitialise>
    49d4:	81 ea       	ldi	r24, 0xA1	; 161
    49d6:	91 e4       	ldi	r25, 0x41	; 65
    49d8:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <vListInitialise>
    49dc:	82 e9       	ldi	r24, 0x92	; 146
    49de:	91 e4       	ldi	r25, 0x41	; 65
    49e0:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <vListInitialise>
    49e4:	8c ea       	ldi	r24, 0xAC	; 172
    49e6:	91 e4       	ldi	r25, 0x41	; 65
    49e8:	80 93 9f 41 	sts	0x419F, r24	; 0x80419f <pxDelayedTaskList>
    49ec:	90 93 a0 41 	sts	0x41A0, r25	; 0x8041a0 <pxDelayedTaskList+0x1>
    49f0:	81 ea       	ldi	r24, 0xA1	; 161
    49f2:	91 e4       	ldi	r25, 0x41	; 65
    49f4:	80 93 9d 41 	sts	0x419D, r24	; 0x80419d <pxOverflowDelayedTaskList>
    49f8:	90 93 9e 41 	sts	0x419E, r25	; 0x80419e <pxOverflowDelayedTaskList+0x1>
    49fc:	0f c0       	rjmp	.+30     	; 0x4a1c <xTaskGenericCreate+0x178>
    49fe:	80 91 88 41 	lds	r24, 0x4188	; 0x804188 <xSchedulerRunning>
    4a02:	81 11       	cpse	r24, r1
    4a04:	0b c0       	rjmp	.+22     	; 0x4a1c <xTaskGenericCreate+0x178>
    4a06:	e0 91 e3 41 	lds	r30, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4a0a:	f0 91 e4 41 	lds	r31, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4a0e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4a10:	08 17       	cp	r16, r24
    4a12:	20 f0       	brcs	.+8      	; 0x4a1c <xTaskGenericCreate+0x178>
    4a14:	c0 93 e3 41 	sts	0x41E3, r28	; 0x8041e3 <pxCurrentTCB>
    4a18:	d0 93 e4 41 	sts	0x41E4, r29	; 0x8041e4 <pxCurrentTCB+0x1>
    4a1c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4a1e:	90 91 8a 41 	lds	r25, 0x418A	; 0x80418a <uxTopUsedPriority>
    4a22:	98 17       	cp	r25, r24
    4a24:	10 f4       	brcc	.+4      	; 0x4a2a <xTaskGenericCreate+0x186>
    4a26:	80 93 8a 41 	sts	0x418A, r24	; 0x80418a <uxTopUsedPriority>
    4a2a:	90 91 83 41 	lds	r25, 0x4183	; 0x804183 <uxTaskNumber>
    4a2e:	9f 5f       	subi	r25, 0xFF	; 255
    4a30:	90 93 83 41 	sts	0x4183, r25	; 0x804183 <uxTaskNumber>
    4a34:	90 91 89 41 	lds	r25, 0x4189	; 0x804189 <uxTopReadyPriority>
    4a38:	98 17       	cp	r25, r24
    4a3a:	10 f4       	brcc	.+4      	; 0x4a40 <xTaskGenericCreate+0x19c>
    4a3c:	80 93 89 41 	sts	0x4189, r24	; 0x804189 <uxTopReadyPriority>
    4a40:	fb e0       	ldi	r31, 0x0B	; 11
    4a42:	8f 9f       	mul	r24, r31
    4a44:	c0 01       	movw	r24, r0
    4a46:	11 24       	eor	r1, r1
    4a48:	b6 01       	movw	r22, r12
    4a4a:	89 54       	subi	r24, 0x49	; 73
    4a4c:	9e 4b       	sbci	r25, 0xBE	; 190
    4a4e:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <vListInsertEnd>
    4a52:	0f 90       	pop	r0
    4a54:	0f be       	out	0x3f, r0	; 63
    4a56:	80 91 88 41 	lds	r24, 0x4188	; 0x804188 <xSchedulerRunning>
    4a5a:	88 23       	and	r24, r24
    4a5c:	59 f0       	breq	.+22     	; 0x4a74 <xTaskGenericCreate+0x1d0>
    4a5e:	e0 91 e3 41 	lds	r30, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4a62:	f0 91 e4 41 	lds	r31, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4a66:	82 8d       	ldd	r24, Z+26	; 0x1a
    4a68:	80 17       	cp	r24, r16
    4a6a:	30 f4       	brcc	.+12     	; 0x4a78 <xTaskGenericCreate+0x1d4>
    4a6c:	0e 94 58 20 	call	0x40b0	; 0x40b0 <vPortYield>
    4a70:	81 e0       	ldi	r24, 0x01	; 1
    4a72:	09 c0       	rjmp	.+18     	; 0x4a86 <xTaskGenericCreate+0x1e2>
    4a74:	81 e0       	ldi	r24, 0x01	; 1
    4a76:	07 c0       	rjmp	.+14     	; 0x4a86 <xTaskGenericCreate+0x1e2>
    4a78:	81 e0       	ldi	r24, 0x01	; 1
    4a7a:	05 c0       	rjmp	.+10     	; 0x4a86 <xTaskGenericCreate+0x1e2>
    4a7c:	cb 8e       	std	Y+27, r12	; 0x1b
    4a7e:	dc 8e       	std	Y+28, r13	; 0x1c
    4a80:	c6 01       	movw	r24, r12
    4a82:	3b cf       	rjmp	.-394    	; 0x48fa <xTaskGenericCreate+0x56>
    4a84:	8f ef       	ldi	r24, 0xFF	; 255
    4a86:	df 91       	pop	r29
    4a88:	cf 91       	pop	r28
    4a8a:	1f 91       	pop	r17
    4a8c:	0f 91       	pop	r16
    4a8e:	ff 90       	pop	r15
    4a90:	ef 90       	pop	r14
    4a92:	df 90       	pop	r13
    4a94:	cf 90       	pop	r12
    4a96:	bf 90       	pop	r11
    4a98:	af 90       	pop	r10
    4a9a:	9f 90       	pop	r9
    4a9c:	8f 90       	pop	r8
    4a9e:	7f 90       	pop	r7
    4aa0:	6f 90       	pop	r6
    4aa2:	5f 90       	pop	r5
    4aa4:	4f 90       	pop	r4
    4aa6:	08 95       	ret

00004aa8 <uxTaskPriorityGet>:
    4aa8:	0f b6       	in	r0, 0x3f	; 63
    4aaa:	f8 94       	cli
    4aac:	0f 92       	push	r0
    4aae:	00 97       	sbiw	r24, 0x00	; 0
    4ab0:	21 f4       	brne	.+8      	; 0x4aba <uxTaskPriorityGet+0x12>
    4ab2:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4ab6:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4aba:	0f 90       	pop	r0
    4abc:	0f be       	out	0x3f, r0	; 63
    4abe:	fc 01       	movw	r30, r24
    4ac0:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ac2:	08 95       	ret

00004ac4 <vTaskStartScheduler>:
    4ac4:	af 92       	push	r10
    4ac6:	bf 92       	push	r11
    4ac8:	cf 92       	push	r12
    4aca:	df 92       	push	r13
    4acc:	ef 92       	push	r14
    4ace:	ff 92       	push	r15
    4ad0:	0f 93       	push	r16
    4ad2:	a1 2c       	mov	r10, r1
    4ad4:	b1 2c       	mov	r11, r1
    4ad6:	c1 2c       	mov	r12, r1
    4ad8:	d1 2c       	mov	r13, r1
    4ada:	0f 2e       	mov	r0, r31
    4adc:	f0 e9       	ldi	r31, 0x90	; 144
    4ade:	ef 2e       	mov	r14, r31
    4ae0:	f1 e4       	ldi	r31, 0x41	; 65
    4ae2:	ff 2e       	mov	r15, r31
    4ae4:	f0 2d       	mov	r31, r0
    4ae6:	00 e0       	ldi	r16, 0x00	; 0
    4ae8:	20 e0       	ldi	r18, 0x00	; 0
    4aea:	30 e0       	ldi	r19, 0x00	; 0
    4aec:	44 e6       	ldi	r20, 0x64	; 100
    4aee:	50 e0       	ldi	r21, 0x00	; 0
    4af0:	6d ea       	ldi	r22, 0xAD	; 173
    4af2:	70 e2       	ldi	r23, 0x20	; 32
    4af4:	8c ef       	ldi	r24, 0xFC	; 252
    4af6:	93 e2       	ldi	r25, 0x23	; 35
    4af8:	0e 94 52 24 	call	0x48a4	; 0x48a4 <xTaskGenericCreate>
    4afc:	81 30       	cpi	r24, 0x01	; 1
    4afe:	69 f4       	brne	.+26     	; 0x4b1a <vTaskStartScheduler+0x56>
    4b00:	f8 94       	cli
    4b02:	80 93 88 41 	sts	0x4188, r24	; 0x804188 <xSchedulerRunning>
    4b06:	10 92 8b 41 	sts	0x418B, r1	; 0x80418b <xTickCount>
    4b0a:	10 92 8c 41 	sts	0x418C, r1	; 0x80418c <xTickCount+0x1>
    4b0e:	10 92 8d 41 	sts	0x418D, r1	; 0x80418d <xTickCount+0x2>
    4b12:	10 92 8e 41 	sts	0x418E, r1	; 0x80418e <xTickCount+0x3>
    4b16:	0e 94 18 20 	call	0x4030	; 0x4030 <xPortStartScheduler>
    4b1a:	0f 91       	pop	r16
    4b1c:	ff 90       	pop	r15
    4b1e:	ef 90       	pop	r14
    4b20:	df 90       	pop	r13
    4b22:	cf 90       	pop	r12
    4b24:	bf 90       	pop	r11
    4b26:	af 90       	pop	r10
    4b28:	08 95       	ret

00004b2a <vTaskSuspendAll>:
    4b2a:	80 91 87 41 	lds	r24, 0x4187	; 0x804187 <uxSchedulerSuspended>
    4b2e:	8f 5f       	subi	r24, 0xFF	; 255
    4b30:	80 93 87 41 	sts	0x4187, r24	; 0x804187 <uxSchedulerSuspended>
    4b34:	08 95       	ret

00004b36 <xTaskGetTickCount>:
    4b36:	0f b6       	in	r0, 0x3f	; 63
    4b38:	f8 94       	cli
    4b3a:	0f 92       	push	r0
    4b3c:	60 91 8b 41 	lds	r22, 0x418B	; 0x80418b <xTickCount>
    4b40:	70 91 8c 41 	lds	r23, 0x418C	; 0x80418c <xTickCount+0x1>
    4b44:	80 91 8d 41 	lds	r24, 0x418D	; 0x80418d <xTickCount+0x2>
    4b48:	90 91 8e 41 	lds	r25, 0x418E	; 0x80418e <xTickCount+0x3>
    4b4c:	0f 90       	pop	r0
    4b4e:	0f be       	out	0x3f, r0	; 63
    4b50:	08 95       	ret

00004b52 <pcTaskGetTaskName>:
    4b52:	00 97       	sbiw	r24, 0x00	; 0
    4b54:	21 f4       	brne	.+8      	; 0x4b5e <pcTaskGetTaskName+0xc>
    4b56:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4b5a:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4b5e:	4d 96       	adiw	r24, 0x1d	; 29
    4b60:	08 95       	ret

00004b62 <vTaskIncrementTick>:
    4b62:	ff 92       	push	r15
    4b64:	0f 93       	push	r16
    4b66:	1f 93       	push	r17
    4b68:	cf 93       	push	r28
    4b6a:	df 93       	push	r29
    4b6c:	80 91 87 41 	lds	r24, 0x4187	; 0x804187 <uxSchedulerSuspended>
    4b70:	81 11       	cpse	r24, r1
    4b72:	ed c0       	rjmp	.+474    	; 0x4d4e <vTaskIncrementTick+0x1ec>
    4b74:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    4b78:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    4b7c:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    4b80:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    4b84:	01 96       	adiw	r24, 0x01	; 1
    4b86:	a1 1d       	adc	r26, r1
    4b88:	b1 1d       	adc	r27, r1
    4b8a:	80 93 8b 41 	sts	0x418B, r24	; 0x80418b <xTickCount>
    4b8e:	90 93 8c 41 	sts	0x418C, r25	; 0x80418c <xTickCount+0x1>
    4b92:	a0 93 8d 41 	sts	0x418D, r26	; 0x80418d <xTickCount+0x2>
    4b96:	b0 93 8e 41 	sts	0x418E, r27	; 0x80418e <xTickCount+0x3>
    4b9a:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    4b9e:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    4ba2:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    4ba6:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    4baa:	89 2b       	or	r24, r25
    4bac:	8a 2b       	or	r24, r26
    4bae:	8b 2b       	or	r24, r27
    4bb0:	f1 f5       	brne	.+124    	; 0x4c2e <vTaskIncrementTick+0xcc>
    4bb2:	80 91 9f 41 	lds	r24, 0x419F	; 0x80419f <pxDelayedTaskList>
    4bb6:	90 91 a0 41 	lds	r25, 0x41A0	; 0x8041a0 <pxDelayedTaskList+0x1>
    4bba:	20 91 9d 41 	lds	r18, 0x419D	; 0x80419d <pxOverflowDelayedTaskList>
    4bbe:	30 91 9e 41 	lds	r19, 0x419E	; 0x80419e <pxOverflowDelayedTaskList+0x1>
    4bc2:	20 93 9f 41 	sts	0x419F, r18	; 0x80419f <pxDelayedTaskList>
    4bc6:	30 93 a0 41 	sts	0x41A0, r19	; 0x8041a0 <pxDelayedTaskList+0x1>
    4bca:	80 93 9d 41 	sts	0x419D, r24	; 0x80419d <pxOverflowDelayedTaskList>
    4bce:	90 93 9e 41 	sts	0x419E, r25	; 0x80419e <pxOverflowDelayedTaskList+0x1>
    4bd2:	80 91 84 41 	lds	r24, 0x4184	; 0x804184 <xNumOfOverflows>
    4bd6:	8f 5f       	subi	r24, 0xFF	; 255
    4bd8:	80 93 84 41 	sts	0x4184, r24	; 0x804184 <xNumOfOverflows>
    4bdc:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <pxDelayedTaskList>
    4be0:	f0 91 a0 41 	lds	r31, 0x41A0	; 0x8041a0 <pxDelayedTaskList+0x1>
    4be4:	80 81       	ld	r24, Z
    4be6:	81 11       	cpse	r24, r1
    4be8:	0c c0       	rjmp	.+24     	; 0x4c02 <vTaskIncrementTick+0xa0>
    4bea:	8f ef       	ldi	r24, 0xFF	; 255
    4bec:	9f ef       	ldi	r25, 0xFF	; 255
    4bee:	dc 01       	movw	r26, r24
    4bf0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    4bf4:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    4bf8:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    4bfc:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    4c00:	16 c0       	rjmp	.+44     	; 0x4c2e <vTaskIncrementTick+0xcc>
    4c02:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <pxDelayedTaskList>
    4c06:	f0 91 a0 41 	lds	r31, 0x41A0	; 0x8041a0 <pxDelayedTaskList+0x1>
    4c0a:	07 80       	ldd	r0, Z+7	; 0x07
    4c0c:	f0 85       	ldd	r31, Z+8	; 0x08
    4c0e:	e0 2d       	mov	r30, r0
    4c10:	00 84       	ldd	r0, Z+8	; 0x08
    4c12:	f1 85       	ldd	r31, Z+9	; 0x09
    4c14:	e0 2d       	mov	r30, r0
    4c16:	82 81       	ldd	r24, Z+2	; 0x02
    4c18:	93 81       	ldd	r25, Z+3	; 0x03
    4c1a:	a4 81       	ldd	r26, Z+4	; 0x04
    4c1c:	b5 81       	ldd	r27, Z+5	; 0x05
    4c1e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    4c22:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    4c26:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    4c2a:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    4c2e:	40 91 8b 41 	lds	r20, 0x418B	; 0x80418b <xTickCount>
    4c32:	50 91 8c 41 	lds	r21, 0x418C	; 0x80418c <xTickCount+0x1>
    4c36:	60 91 8d 41 	lds	r22, 0x418D	; 0x80418d <xTickCount+0x2>
    4c3a:	70 91 8e 41 	lds	r23, 0x418E	; 0x80418e <xTickCount+0x3>
    4c3e:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    4c42:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    4c46:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    4c4a:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    4c4e:	48 17       	cp	r20, r24
    4c50:	59 07       	cpc	r21, r25
    4c52:	6a 07       	cpc	r22, r26
    4c54:	7b 07       	cpc	r23, r27
    4c56:	08 f4       	brcc	.+2      	; 0x4c5a <vTaskIncrementTick+0xf8>
    4c58:	7f c0       	rjmp	.+254    	; 0x4d58 <vTaskIncrementTick+0x1f6>
    4c5a:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <pxDelayedTaskList>
    4c5e:	f0 91 a0 41 	lds	r31, 0x41A0	; 0x8041a0 <pxDelayedTaskList+0x1>
    4c62:	80 81       	ld	r24, Z
    4c64:	88 23       	and	r24, r24
    4c66:	f9 f0       	breq	.+62     	; 0x4ca6 <vTaskIncrementTick+0x144>
    4c68:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <pxDelayedTaskList>
    4c6c:	f0 91 a0 41 	lds	r31, 0x41A0	; 0x8041a0 <pxDelayedTaskList+0x1>
    4c70:	07 80       	ldd	r0, Z+7	; 0x07
    4c72:	f0 85       	ldd	r31, Z+8	; 0x08
    4c74:	e0 2d       	mov	r30, r0
    4c76:	c0 85       	ldd	r28, Z+8	; 0x08
    4c78:	d1 85       	ldd	r29, Z+9	; 0x09
    4c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    4c7e:	ac 81       	ldd	r26, Y+4	; 0x04
    4c80:	bd 81       	ldd	r27, Y+5	; 0x05
    4c82:	40 91 8b 41 	lds	r20, 0x418B	; 0x80418b <xTickCount>
    4c86:	50 91 8c 41 	lds	r21, 0x418C	; 0x80418c <xTickCount+0x1>
    4c8a:	60 91 8d 41 	lds	r22, 0x418D	; 0x80418d <xTickCount+0x2>
    4c8e:	70 91 8e 41 	lds	r23, 0x418E	; 0x80418e <xTickCount+0x3>
    4c92:	48 17       	cp	r20, r24
    4c94:	59 07       	cpc	r21, r25
    4c96:	6a 07       	cpc	r22, r26
    4c98:	7b 07       	cpc	r23, r27
    4c9a:	58 f1       	brcs	.+86     	; 0x4cf2 <vTaskIncrementTick+0x190>
    4c9c:	0f 2e       	mov	r0, r31
    4c9e:	fb e0       	ldi	r31, 0x0B	; 11
    4ca0:	ff 2e       	mov	r15, r31
    4ca2:	f0 2d       	mov	r31, r0
    4ca4:	2f c0       	rjmp	.+94     	; 0x4d04 <vTaskIncrementTick+0x1a2>
    4ca6:	8f ef       	ldi	r24, 0xFF	; 255
    4ca8:	9f ef       	ldi	r25, 0xFF	; 255
    4caa:	dc 01       	movw	r26, r24
    4cac:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    4cb0:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    4cb4:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    4cb8:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    4cbc:	4d c0       	rjmp	.+154    	; 0x4d58 <vTaskIncrementTick+0x1f6>
    4cbe:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <pxDelayedTaskList>
    4cc2:	f0 91 a0 41 	lds	r31, 0x41A0	; 0x8041a0 <pxDelayedTaskList+0x1>
    4cc6:	07 80       	ldd	r0, Z+7	; 0x07
    4cc8:	f0 85       	ldd	r31, Z+8	; 0x08
    4cca:	e0 2d       	mov	r30, r0
    4ccc:	c0 85       	ldd	r28, Z+8	; 0x08
    4cce:	d1 85       	ldd	r29, Z+9	; 0x09
    4cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    4cd4:	ac 81       	ldd	r26, Y+4	; 0x04
    4cd6:	bd 81       	ldd	r27, Y+5	; 0x05
    4cd8:	40 91 8b 41 	lds	r20, 0x418B	; 0x80418b <xTickCount>
    4cdc:	50 91 8c 41 	lds	r21, 0x418C	; 0x80418c <xTickCount+0x1>
    4ce0:	60 91 8d 41 	lds	r22, 0x418D	; 0x80418d <xTickCount+0x2>
    4ce4:	70 91 8e 41 	lds	r23, 0x418E	; 0x80418e <xTickCount+0x3>
    4ce8:	48 17       	cp	r20, r24
    4cea:	59 07       	cpc	r21, r25
    4cec:	6a 07       	cpc	r22, r26
    4cee:	7b 07       	cpc	r23, r27
    4cf0:	48 f4       	brcc	.+18     	; 0x4d04 <vTaskIncrementTick+0x1a2>
    4cf2:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    4cf6:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    4cfa:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    4cfe:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    4d02:	2a c0       	rjmp	.+84     	; 0x4d58 <vTaskIncrementTick+0x1f6>
    4d04:	8e 01       	movw	r16, r28
    4d06:	0e 5f       	subi	r16, 0xFE	; 254
    4d08:	1f 4f       	sbci	r17, 0xFF	; 255
    4d0a:	c8 01       	movw	r24, r16
    4d0c:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <vListRemove>
    4d10:	88 8d       	ldd	r24, Y+24	; 0x18
    4d12:	99 8d       	ldd	r25, Y+25	; 0x19
    4d14:	89 2b       	or	r24, r25
    4d16:	21 f0       	breq	.+8      	; 0x4d20 <vTaskIncrementTick+0x1be>
    4d18:	ce 01       	movw	r24, r28
    4d1a:	0e 96       	adiw	r24, 0x0e	; 14
    4d1c:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <vListRemove>
    4d20:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4d22:	90 91 89 41 	lds	r25, 0x4189	; 0x804189 <uxTopReadyPriority>
    4d26:	98 17       	cp	r25, r24
    4d28:	10 f4       	brcc	.+4      	; 0x4d2e <vTaskIncrementTick+0x1cc>
    4d2a:	80 93 89 41 	sts	0x4189, r24	; 0x804189 <uxTopReadyPriority>
    4d2e:	f8 9e       	mul	r15, r24
    4d30:	c0 01       	movw	r24, r0
    4d32:	11 24       	eor	r1, r1
    4d34:	b8 01       	movw	r22, r16
    4d36:	89 54       	subi	r24, 0x49	; 73
    4d38:	9e 4b       	sbci	r25, 0xBE	; 190
    4d3a:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <vListInsertEnd>
    4d3e:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <pxDelayedTaskList>
    4d42:	f0 91 a0 41 	lds	r31, 0x41A0	; 0x8041a0 <pxDelayedTaskList+0x1>
    4d46:	80 81       	ld	r24, Z
    4d48:	81 11       	cpse	r24, r1
    4d4a:	b9 cf       	rjmp	.-142    	; 0x4cbe <vTaskIncrementTick+0x15c>
    4d4c:	ac cf       	rjmp	.-168    	; 0x4ca6 <vTaskIncrementTick+0x144>
    4d4e:	80 91 86 41 	lds	r24, 0x4186	; 0x804186 <uxMissedTicks>
    4d52:	8f 5f       	subi	r24, 0xFF	; 255
    4d54:	80 93 86 41 	sts	0x4186, r24	; 0x804186 <uxMissedTicks>
    4d58:	df 91       	pop	r29
    4d5a:	cf 91       	pop	r28
    4d5c:	1f 91       	pop	r17
    4d5e:	0f 91       	pop	r16
    4d60:	ff 90       	pop	r15
    4d62:	08 95       	ret

00004d64 <xTaskResumeAll>:
    4d64:	cf 92       	push	r12
    4d66:	df 92       	push	r13
    4d68:	ef 92       	push	r14
    4d6a:	ff 92       	push	r15
    4d6c:	0f 93       	push	r16
    4d6e:	1f 93       	push	r17
    4d70:	cf 93       	push	r28
    4d72:	df 93       	push	r29
    4d74:	0f b6       	in	r0, 0x3f	; 63
    4d76:	f8 94       	cli
    4d78:	0f 92       	push	r0
    4d7a:	80 91 87 41 	lds	r24, 0x4187	; 0x804187 <uxSchedulerSuspended>
    4d7e:	81 50       	subi	r24, 0x01	; 1
    4d80:	80 93 87 41 	sts	0x4187, r24	; 0x804187 <uxSchedulerSuspended>
    4d84:	80 91 87 41 	lds	r24, 0x4187	; 0x804187 <uxSchedulerSuspended>
    4d88:	81 11       	cpse	r24, r1
    4d8a:	60 c0       	rjmp	.+192    	; 0x4e4c <xTaskResumeAll+0xe8>
    4d8c:	80 91 8f 41 	lds	r24, 0x418F	; 0x80418f <uxCurrentNumberOfTasks>
    4d90:	81 11       	cpse	r24, r1
    4d92:	2c c0       	rjmp	.+88     	; 0x4dec <xTaskResumeAll+0x88>
    4d94:	5e c0       	rjmp	.+188    	; 0x4e52 <xTaskResumeAll+0xee>
    4d96:	d7 01       	movw	r26, r14
    4d98:	17 96       	adiw	r26, 0x07	; 7
    4d9a:	ed 91       	ld	r30, X+
    4d9c:	fc 91       	ld	r31, X
    4d9e:	18 97       	sbiw	r26, 0x08	; 8
    4da0:	c0 85       	ldd	r28, Z+8	; 0x08
    4da2:	d1 85       	ldd	r29, Z+9	; 0x09
    4da4:	ce 01       	movw	r24, r28
    4da6:	0e 96       	adiw	r24, 0x0e	; 14
    4da8:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <vListRemove>
    4dac:	8e 01       	movw	r16, r28
    4dae:	0e 5f       	subi	r16, 0xFE	; 254
    4db0:	1f 4f       	sbci	r17, 0xFF	; 255
    4db2:	c8 01       	movw	r24, r16
    4db4:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <vListRemove>
    4db8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4dba:	90 91 89 41 	lds	r25, 0x4189	; 0x804189 <uxTopReadyPriority>
    4dbe:	98 17       	cp	r25, r24
    4dc0:	10 f4       	brcc	.+4      	; 0x4dc6 <xTaskResumeAll+0x62>
    4dc2:	80 93 89 41 	sts	0x4189, r24	; 0x804189 <uxTopReadyPriority>
    4dc6:	d8 9e       	mul	r13, r24
    4dc8:	c0 01       	movw	r24, r0
    4dca:	11 24       	eor	r1, r1
    4dcc:	b8 01       	movw	r22, r16
    4dce:	89 54       	subi	r24, 0x49	; 73
    4dd0:	9e 4b       	sbci	r25, 0xBE	; 190
    4dd2:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <vListInsertEnd>
    4dd6:	e0 91 e3 41 	lds	r30, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4dda:	f0 91 e4 41 	lds	r31, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4dde:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4de0:	82 8d       	ldd	r24, Z+26	; 0x1a
    4de2:	98 17       	cp	r25, r24
    4de4:	70 f0       	brcs	.+28     	; 0x4e02 <xTaskResumeAll+0x9e>
    4de6:	cc 24       	eor	r12, r12
    4de8:	c3 94       	inc	r12
    4dea:	0b c0       	rjmp	.+22     	; 0x4e02 <xTaskResumeAll+0x9e>
    4dec:	c1 2c       	mov	r12, r1
    4dee:	0f 2e       	mov	r0, r31
    4df0:	f2 e9       	ldi	r31, 0x92	; 146
    4df2:	ef 2e       	mov	r14, r31
    4df4:	f1 e4       	ldi	r31, 0x41	; 65
    4df6:	ff 2e       	mov	r15, r31
    4df8:	f0 2d       	mov	r31, r0
    4dfa:	0f 2e       	mov	r0, r31
    4dfc:	fb e0       	ldi	r31, 0x0B	; 11
    4dfe:	df 2e       	mov	r13, r31
    4e00:	f0 2d       	mov	r31, r0
    4e02:	f7 01       	movw	r30, r14
    4e04:	80 81       	ld	r24, Z
    4e06:	81 11       	cpse	r24, r1
    4e08:	c6 cf       	rjmp	.-116    	; 0x4d96 <xTaskResumeAll+0x32>
    4e0a:	80 91 86 41 	lds	r24, 0x4186	; 0x804186 <uxMissedTicks>
    4e0e:	88 23       	and	r24, r24
    4e10:	81 f0       	breq	.+32     	; 0x4e32 <xTaskResumeAll+0xce>
    4e12:	80 91 86 41 	lds	r24, 0x4186	; 0x804186 <uxMissedTicks>
    4e16:	88 23       	and	r24, r24
    4e18:	99 f0       	breq	.+38     	; 0x4e40 <xTaskResumeAll+0xdc>
    4e1a:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <vTaskIncrementTick>
    4e1e:	80 91 86 41 	lds	r24, 0x4186	; 0x804186 <uxMissedTicks>
    4e22:	81 50       	subi	r24, 0x01	; 1
    4e24:	80 93 86 41 	sts	0x4186, r24	; 0x804186 <uxMissedTicks>
    4e28:	80 91 86 41 	lds	r24, 0x4186	; 0x804186 <uxMissedTicks>
    4e2c:	81 11       	cpse	r24, r1
    4e2e:	f5 cf       	rjmp	.-22     	; 0x4e1a <xTaskResumeAll+0xb6>
    4e30:	07 c0       	rjmp	.+14     	; 0x4e40 <xTaskResumeAll+0xdc>
    4e32:	f1 e0       	ldi	r31, 0x01	; 1
    4e34:	cf 16       	cp	r12, r31
    4e36:	21 f0       	breq	.+8      	; 0x4e40 <xTaskResumeAll+0xdc>
    4e38:	80 91 85 41 	lds	r24, 0x4185	; 0x804185 <xMissedYield>
    4e3c:	81 30       	cpi	r24, 0x01	; 1
    4e3e:	41 f4       	brne	.+16     	; 0x4e50 <xTaskResumeAll+0xec>
    4e40:	10 92 85 41 	sts	0x4185, r1	; 0x804185 <xMissedYield>
    4e44:	0e 94 58 20 	call	0x40b0	; 0x40b0 <vPortYield>
    4e48:	81 e0       	ldi	r24, 0x01	; 1
    4e4a:	03 c0       	rjmp	.+6      	; 0x4e52 <xTaskResumeAll+0xee>
    4e4c:	80 e0       	ldi	r24, 0x00	; 0
    4e4e:	01 c0       	rjmp	.+2      	; 0x4e52 <xTaskResumeAll+0xee>
    4e50:	80 e0       	ldi	r24, 0x00	; 0
    4e52:	0f 90       	pop	r0
    4e54:	0f be       	out	0x3f, r0	; 63
    4e56:	df 91       	pop	r29
    4e58:	cf 91       	pop	r28
    4e5a:	1f 91       	pop	r17
    4e5c:	0f 91       	pop	r16
    4e5e:	ff 90       	pop	r15
    4e60:	ef 90       	pop	r14
    4e62:	df 90       	pop	r13
    4e64:	cf 90       	pop	r12
    4e66:	08 95       	ret

00004e68 <vTaskDelayUntil>:
    4e68:	cf 92       	push	r12
    4e6a:	df 92       	push	r13
    4e6c:	ef 92       	push	r14
    4e6e:	ff 92       	push	r15
    4e70:	cf 93       	push	r28
    4e72:	df 93       	push	r29
    4e74:	ec 01       	movw	r28, r24
    4e76:	6a 01       	movw	r12, r20
    4e78:	7b 01       	movw	r14, r22
    4e7a:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <vTaskSuspendAll>
    4e7e:	88 81       	ld	r24, Y
    4e80:	99 81       	ldd	r25, Y+1	; 0x01
    4e82:	aa 81       	ldd	r26, Y+2	; 0x02
    4e84:	bb 81       	ldd	r27, Y+3	; 0x03
    4e86:	c8 0e       	add	r12, r24
    4e88:	d9 1e       	adc	r13, r25
    4e8a:	ea 1e       	adc	r14, r26
    4e8c:	fb 1e       	adc	r15, r27
    4e8e:	40 91 8b 41 	lds	r20, 0x418B	; 0x80418b <xTickCount>
    4e92:	50 91 8c 41 	lds	r21, 0x418C	; 0x80418c <xTickCount+0x1>
    4e96:	60 91 8d 41 	lds	r22, 0x418D	; 0x80418d <xTickCount+0x2>
    4e9a:	70 91 8e 41 	lds	r23, 0x418E	; 0x80418e <xTickCount+0x3>
    4e9e:	48 17       	cp	r20, r24
    4ea0:	59 07       	cpc	r21, r25
    4ea2:	6a 07       	cpc	r22, r26
    4ea4:	7b 07       	cpc	r23, r27
    4ea6:	b8 f4       	brcc	.+46     	; 0x4ed6 <vTaskDelayUntil+0x6e>
    4ea8:	c8 16       	cp	r12, r24
    4eaa:	d9 06       	cpc	r13, r25
    4eac:	ea 06       	cpc	r14, r26
    4eae:	fb 06       	cpc	r15, r27
    4eb0:	e0 f5       	brcc	.+120    	; 0x4f2a <vTaskDelayUntil+0xc2>
    4eb2:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    4eb6:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    4eba:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    4ebe:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    4ec2:	c8 82       	st	Y, r12
    4ec4:	d9 82       	std	Y+1, r13	; 0x01
    4ec6:	ea 82       	std	Y+2, r14	; 0x02
    4ec8:	fb 82       	std	Y+3, r15	; 0x03
    4eca:	8c 15       	cp	r24, r12
    4ecc:	9d 05       	cpc	r25, r13
    4ece:	ae 05       	cpc	r26, r14
    4ed0:	bf 05       	cpc	r27, r15
    4ed2:	f8 f4       	brcc	.+62     	; 0x4f12 <vTaskDelayUntil+0xaa>
    4ed4:	13 c0       	rjmp	.+38     	; 0x4efc <vTaskDelayUntil+0x94>
    4ed6:	c8 16       	cp	r12, r24
    4ed8:	d9 06       	cpc	r13, r25
    4eda:	ea 06       	cpc	r14, r26
    4edc:	fb 06       	cpc	r15, r27
    4ede:	00 f1       	brcs	.+64     	; 0x4f20 <vTaskDelayUntil+0xb8>
    4ee0:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    4ee4:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    4ee8:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    4eec:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    4ef0:	8c 15       	cp	r24, r12
    4ef2:	9d 05       	cpc	r25, r13
    4ef4:	ae 05       	cpc	r26, r14
    4ef6:	bf 05       	cpc	r27, r15
    4ef8:	98 f0       	brcs	.+38     	; 0x4f20 <vTaskDelayUntil+0xb8>
    4efa:	17 c0       	rjmp	.+46     	; 0x4f2a <vTaskDelayUntil+0xc2>
    4efc:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4f00:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4f04:	02 96       	adiw	r24, 0x02	; 2
    4f06:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <vListRemove>
    4f0a:	c7 01       	movw	r24, r14
    4f0c:	b6 01       	movw	r22, r12
    4f0e:	0e 94 04 24 	call	0x4808	; 0x4808 <prvAddCurrentTaskToDelayedList>
    4f12:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <xTaskResumeAll>
    4f16:	81 11       	cpse	r24, r1
    4f18:	0d c0       	rjmp	.+26     	; 0x4f34 <vTaskDelayUntil+0xcc>
    4f1a:	0e 94 58 20 	call	0x40b0	; 0x40b0 <vPortYield>
    4f1e:	0a c0       	rjmp	.+20     	; 0x4f34 <vTaskDelayUntil+0xcc>
    4f20:	c8 82       	st	Y, r12
    4f22:	d9 82       	std	Y+1, r13	; 0x01
    4f24:	ea 82       	std	Y+2, r14	; 0x02
    4f26:	fb 82       	std	Y+3, r15	; 0x03
    4f28:	e9 cf       	rjmp	.-46     	; 0x4efc <vTaskDelayUntil+0x94>
    4f2a:	c8 82       	st	Y, r12
    4f2c:	d9 82       	std	Y+1, r13	; 0x01
    4f2e:	ea 82       	std	Y+2, r14	; 0x02
    4f30:	fb 82       	std	Y+3, r15	; 0x03
    4f32:	ef cf       	rjmp	.-34     	; 0x4f12 <vTaskDelayUntil+0xaa>
    4f34:	df 91       	pop	r29
    4f36:	cf 91       	pop	r28
    4f38:	ff 90       	pop	r15
    4f3a:	ef 90       	pop	r14
    4f3c:	df 90       	pop	r13
    4f3e:	cf 90       	pop	r12
    4f40:	08 95       	ret

00004f42 <vTaskDelay>:
    4f42:	cf 92       	push	r12
    4f44:	df 92       	push	r13
    4f46:	ef 92       	push	r14
    4f48:	ff 92       	push	r15
    4f4a:	6b 01       	movw	r12, r22
    4f4c:	7c 01       	movw	r14, r24
    4f4e:	67 2b       	or	r22, r23
    4f50:	68 2b       	or	r22, r24
    4f52:	69 2b       	or	r22, r25
    4f54:	e9 f0       	breq	.+58     	; 0x4f90 <vTaskDelay+0x4e>
    4f56:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <vTaskSuspendAll>
    4f5a:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    4f5e:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    4f62:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    4f66:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    4f6a:	c8 0e       	add	r12, r24
    4f6c:	d9 1e       	adc	r13, r25
    4f6e:	ea 1e       	adc	r14, r26
    4f70:	fb 1e       	adc	r15, r27
    4f72:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4f76:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4f7a:	02 96       	adiw	r24, 0x02	; 2
    4f7c:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <vListRemove>
    4f80:	c7 01       	movw	r24, r14
    4f82:	b6 01       	movw	r22, r12
    4f84:	0e 94 04 24 	call	0x4808	; 0x4808 <prvAddCurrentTaskToDelayedList>
    4f88:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <xTaskResumeAll>
    4f8c:	81 11       	cpse	r24, r1
    4f8e:	02 c0       	rjmp	.+4      	; 0x4f94 <vTaskDelay+0x52>
    4f90:	0e 94 58 20 	call	0x40b0	; 0x40b0 <vPortYield>
    4f94:	ff 90       	pop	r15
    4f96:	ef 90       	pop	r14
    4f98:	df 90       	pop	r13
    4f9a:	cf 90       	pop	r12
    4f9c:	08 95       	ret

00004f9e <vTaskSwitchContext>:
    4f9e:	80 91 87 41 	lds	r24, 0x4187	; 0x804187 <uxSchedulerSuspended>
    4fa2:	81 11       	cpse	r24, r1
    4fa4:	0c c0       	rjmp	.+24     	; 0x4fbe <vTaskSwitchContext+0x20>
    4fa6:	e0 91 89 41 	lds	r30, 0x4189	; 0x804189 <uxTopReadyPriority>
    4faa:	4b e0       	ldi	r20, 0x0B	; 11
    4fac:	e4 9f       	mul	r30, r20
    4fae:	f0 01       	movw	r30, r0
    4fb0:	11 24       	eor	r1, r1
    4fb2:	e9 54       	subi	r30, 0x49	; 73
    4fb4:	fe 4b       	sbci	r31, 0xBE	; 190
    4fb6:	80 81       	ld	r24, Z
    4fb8:	88 23       	and	r24, r24
    4fba:	29 f0       	breq	.+10     	; 0x4fc6 <vTaskSwitchContext+0x28>
    4fbc:	14 c0       	rjmp	.+40     	; 0x4fe6 <vTaskSwitchContext+0x48>
    4fbe:	81 e0       	ldi	r24, 0x01	; 1
    4fc0:	80 93 85 41 	sts	0x4185, r24	; 0x804185 <xMissedYield>
    4fc4:	08 95       	ret
    4fc6:	9b e0       	ldi	r25, 0x0B	; 11
    4fc8:	80 91 89 41 	lds	r24, 0x4189	; 0x804189 <uxTopReadyPriority>
    4fcc:	81 50       	subi	r24, 0x01	; 1
    4fce:	80 93 89 41 	sts	0x4189, r24	; 0x804189 <uxTopReadyPriority>
    4fd2:	e0 91 89 41 	lds	r30, 0x4189	; 0x804189 <uxTopReadyPriority>
    4fd6:	9e 9f       	mul	r25, r30
    4fd8:	f0 01       	movw	r30, r0
    4fda:	11 24       	eor	r1, r1
    4fdc:	e9 54       	subi	r30, 0x49	; 73
    4fde:	fe 4b       	sbci	r31, 0xBE	; 190
    4fe0:	80 81       	ld	r24, Z
    4fe2:	88 23       	and	r24, r24
    4fe4:	89 f3       	breq	.-30     	; 0x4fc8 <vTaskSwitchContext+0x2a>
    4fe6:	80 91 89 41 	lds	r24, 0x4189	; 0x804189 <uxTopReadyPriority>
    4fea:	28 2f       	mov	r18, r24
    4fec:	30 e0       	ldi	r19, 0x00	; 0
    4fee:	4b e0       	ldi	r20, 0x0B	; 11
    4ff0:	84 9f       	mul	r24, r20
    4ff2:	c0 01       	movw	r24, r0
    4ff4:	11 24       	eor	r1, r1
    4ff6:	dc 01       	movw	r26, r24
    4ff8:	a9 54       	subi	r26, 0x49	; 73
    4ffa:	be 4b       	sbci	r27, 0xBE	; 190
    4ffc:	11 96       	adiw	r26, 0x01	; 1
    4ffe:	ed 91       	ld	r30, X+
    5000:	fc 91       	ld	r31, X
    5002:	12 97       	sbiw	r26, 0x02	; 2
    5004:	04 80       	ldd	r0, Z+4	; 0x04
    5006:	f5 81       	ldd	r31, Z+5	; 0x05
    5008:	e0 2d       	mov	r30, r0
    500a:	11 96       	adiw	r26, 0x01	; 1
    500c:	ed 93       	st	X+, r30
    500e:	fc 93       	st	X, r31
    5010:	12 97       	sbiw	r26, 0x02	; 2
    5012:	86 54       	subi	r24, 0x46	; 70
    5014:	9e 4b       	sbci	r25, 0xBE	; 190
    5016:	e8 17       	cp	r30, r24
    5018:	f9 07       	cpc	r31, r25
    501a:	61 f4       	brne	.+24     	; 0x5034 <vTaskSwitchContext+0x96>
    501c:	84 81       	ldd	r24, Z+4	; 0x04
    501e:	95 81       	ldd	r25, Z+5	; 0x05
    5020:	4b e0       	ldi	r20, 0x0B	; 11
    5022:	42 9f       	mul	r20, r18
    5024:	f0 01       	movw	r30, r0
    5026:	43 9f       	mul	r20, r19
    5028:	f0 0d       	add	r31, r0
    502a:	11 24       	eor	r1, r1
    502c:	e9 54       	subi	r30, 0x49	; 73
    502e:	fe 4b       	sbci	r31, 0xBE	; 190
    5030:	81 83       	std	Z+1, r24	; 0x01
    5032:	92 83       	std	Z+2, r25	; 0x02
    5034:	8b e0       	ldi	r24, 0x0B	; 11
    5036:	82 9f       	mul	r24, r18
    5038:	f0 01       	movw	r30, r0
    503a:	83 9f       	mul	r24, r19
    503c:	f0 0d       	add	r31, r0
    503e:	11 24       	eor	r1, r1
    5040:	e9 54       	subi	r30, 0x49	; 73
    5042:	fe 4b       	sbci	r31, 0xBE	; 190
    5044:	01 80       	ldd	r0, Z+1	; 0x01
    5046:	f2 81       	ldd	r31, Z+2	; 0x02
    5048:	e0 2d       	mov	r30, r0
    504a:	80 85       	ldd	r24, Z+8	; 0x08
    504c:	91 85       	ldd	r25, Z+9	; 0x09
    504e:	80 93 e3 41 	sts	0x41E3, r24	; 0x8041e3 <pxCurrentTCB>
    5052:	90 93 e4 41 	sts	0x41E4, r25	; 0x8041e4 <pxCurrentTCB+0x1>
    5056:	08 95       	ret

00005058 <vTaskPlaceOnEventList>:
    5058:	cf 92       	push	r12
    505a:	df 92       	push	r13
    505c:	ef 92       	push	r14
    505e:	ff 92       	push	r15
    5060:	6a 01       	movw	r12, r20
    5062:	7b 01       	movw	r14, r22
    5064:	60 91 e3 41 	lds	r22, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    5068:	70 91 e4 41 	lds	r23, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    506c:	62 5f       	subi	r22, 0xF2	; 242
    506e:	7f 4f       	sbci	r23, 0xFF	; 255
    5070:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <vListInsert>
    5074:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    5078:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    507c:	02 96       	adiw	r24, 0x02	; 2
    507e:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <vListRemove>
    5082:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    5086:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    508a:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    508e:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    5092:	bc 01       	movw	r22, r24
    5094:	cd 01       	movw	r24, r26
    5096:	6c 0d       	add	r22, r12
    5098:	7d 1d       	adc	r23, r13
    509a:	8e 1d       	adc	r24, r14
    509c:	9f 1d       	adc	r25, r15
    509e:	0e 94 04 24 	call	0x4808	; 0x4808 <prvAddCurrentTaskToDelayedList>
    50a2:	ff 90       	pop	r15
    50a4:	ef 90       	pop	r14
    50a6:	df 90       	pop	r13
    50a8:	cf 90       	pop	r12
    50aa:	08 95       	ret

000050ac <xTaskRemoveFromEventList>:
    50ac:	0f 93       	push	r16
    50ae:	1f 93       	push	r17
    50b0:	cf 93       	push	r28
    50b2:	df 93       	push	r29
    50b4:	dc 01       	movw	r26, r24
    50b6:	17 96       	adiw	r26, 0x07	; 7
    50b8:	ed 91       	ld	r30, X+
    50ba:	fc 91       	ld	r31, X
    50bc:	18 97       	sbiw	r26, 0x08	; 8
    50be:	c0 85       	ldd	r28, Z+8	; 0x08
    50c0:	d1 85       	ldd	r29, Z+9	; 0x09
    50c2:	8e 01       	movw	r16, r28
    50c4:	02 5f       	subi	r16, 0xF2	; 242
    50c6:	1f 4f       	sbci	r17, 0xFF	; 255
    50c8:	c8 01       	movw	r24, r16
    50ca:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <vListRemove>
    50ce:	80 91 87 41 	lds	r24, 0x4187	; 0x804187 <uxSchedulerSuspended>
    50d2:	81 11       	cpse	r24, r1
    50d4:	16 c0       	rjmp	.+44     	; 0x5102 <xTaskRemoveFromEventList+0x56>
    50d6:	0c 50       	subi	r16, 0x0C	; 12
    50d8:	11 09       	sbc	r17, r1
    50da:	c8 01       	movw	r24, r16
    50dc:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <vListRemove>
    50e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    50e2:	90 91 89 41 	lds	r25, 0x4189	; 0x804189 <uxTopReadyPriority>
    50e6:	98 17       	cp	r25, r24
    50e8:	10 f4       	brcc	.+4      	; 0x50ee <xTaskRemoveFromEventList+0x42>
    50ea:	80 93 89 41 	sts	0x4189, r24	; 0x804189 <uxTopReadyPriority>
    50ee:	bb e0       	ldi	r27, 0x0B	; 11
    50f0:	8b 9f       	mul	r24, r27
    50f2:	c0 01       	movw	r24, r0
    50f4:	11 24       	eor	r1, r1
    50f6:	b8 01       	movw	r22, r16
    50f8:	89 54       	subi	r24, 0x49	; 73
    50fa:	9e 4b       	sbci	r25, 0xBE	; 190
    50fc:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <vListInsertEnd>
    5100:	05 c0       	rjmp	.+10     	; 0x510c <xTaskRemoveFromEventList+0x60>
    5102:	b8 01       	movw	r22, r16
    5104:	82 e9       	ldi	r24, 0x92	; 146
    5106:	91 e4       	ldi	r25, 0x41	; 65
    5108:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <vListInsertEnd>
    510c:	e0 91 e3 41 	lds	r30, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    5110:	f0 91 e4 41 	lds	r31, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    5114:	81 e0       	ldi	r24, 0x01	; 1
    5116:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5118:	92 8d       	ldd	r25, Z+26	; 0x1a
    511a:	29 17       	cp	r18, r25
    511c:	08 f4       	brcc	.+2      	; 0x5120 <xTaskRemoveFromEventList+0x74>
    511e:	80 e0       	ldi	r24, 0x00	; 0
    5120:	df 91       	pop	r29
    5122:	cf 91       	pop	r28
    5124:	1f 91       	pop	r17
    5126:	0f 91       	pop	r16
    5128:	08 95       	ret

0000512a <vTaskSetTimeOutState>:
    512a:	20 91 84 41 	lds	r18, 0x4184	; 0x804184 <xNumOfOverflows>
    512e:	fc 01       	movw	r30, r24
    5130:	20 83       	st	Z, r18
    5132:	40 91 8b 41 	lds	r20, 0x418B	; 0x80418b <xTickCount>
    5136:	50 91 8c 41 	lds	r21, 0x418C	; 0x80418c <xTickCount+0x1>
    513a:	60 91 8d 41 	lds	r22, 0x418D	; 0x80418d <xTickCount+0x2>
    513e:	70 91 8e 41 	lds	r23, 0x418E	; 0x80418e <xTickCount+0x3>
    5142:	41 83       	std	Z+1, r20	; 0x01
    5144:	52 83       	std	Z+2, r21	; 0x02
    5146:	63 83       	std	Z+3, r22	; 0x03
    5148:	74 83       	std	Z+4, r23	; 0x04
    514a:	08 95       	ret

0000514c <xTaskCheckForTimeOut>:
    514c:	8f 92       	push	r8
    514e:	9f 92       	push	r9
    5150:	af 92       	push	r10
    5152:	bf 92       	push	r11
    5154:	cf 92       	push	r12
    5156:	df 92       	push	r13
    5158:	ef 92       	push	r14
    515a:	ff 92       	push	r15
    515c:	0f 93       	push	r16
    515e:	1f 93       	push	r17
    5160:	cf 93       	push	r28
    5162:	df 93       	push	r29
    5164:	fc 01       	movw	r30, r24
    5166:	0f b6       	in	r0, 0x3f	; 63
    5168:	f8 94       	cli
    516a:	0f 92       	push	r0
    516c:	80 91 84 41 	lds	r24, 0x4184	; 0x804184 <xNumOfOverflows>
    5170:	90 81       	ld	r25, Z
    5172:	98 17       	cp	r25, r24
    5174:	89 f0       	breq	.+34     	; 0x5198 <xTaskCheckForTimeOut+0x4c>
    5176:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    517a:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    517e:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    5182:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    5186:	01 81       	ldd	r16, Z+1	; 0x01
    5188:	12 81       	ldd	r17, Z+2	; 0x02
    518a:	23 81       	ldd	r18, Z+3	; 0x03
    518c:	34 81       	ldd	r19, Z+4	; 0x04
    518e:	80 17       	cp	r24, r16
    5190:	91 07       	cpc	r25, r17
    5192:	a2 07       	cpc	r26, r18
    5194:	b3 07       	cpc	r27, r19
    5196:	a8 f5       	brcc	.+106    	; 0x5202 <xTaskCheckForTimeOut+0xb6>
    5198:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    519c:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    51a0:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    51a4:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    51a8:	c1 80       	ldd	r12, Z+1	; 0x01
    51aa:	d2 80       	ldd	r13, Z+2	; 0x02
    51ac:	e3 80       	ldd	r14, Z+3	; 0x03
    51ae:	f4 80       	ldd	r15, Z+4	; 0x04
    51b0:	eb 01       	movw	r28, r22
    51b2:	08 81       	ld	r16, Y
    51b4:	19 81       	ldd	r17, Y+1	; 0x01
    51b6:	2a 81       	ldd	r18, Y+2	; 0x02
    51b8:	3b 81       	ldd	r19, Y+3	; 0x03
    51ba:	8c 19       	sub	r24, r12
    51bc:	9d 09       	sbc	r25, r13
    51be:	ae 09       	sbc	r26, r14
    51c0:	bf 09       	sbc	r27, r15
    51c2:	80 17       	cp	r24, r16
    51c4:	91 07       	cpc	r25, r17
    51c6:	a2 07       	cpc	r26, r18
    51c8:	b3 07       	cpc	r27, r19
    51ca:	e8 f4       	brcc	.+58     	; 0x5206 <xTaskCheckForTimeOut+0xba>
    51cc:	cf 01       	movw	r24, r30
    51ce:	80 90 8b 41 	lds	r8, 0x418B	; 0x80418b <xTickCount>
    51d2:	90 90 8c 41 	lds	r9, 0x418C	; 0x80418c <xTickCount+0x1>
    51d6:	a0 90 8d 41 	lds	r10, 0x418D	; 0x80418d <xTickCount+0x2>
    51da:	b0 90 8e 41 	lds	r11, 0x418E	; 0x80418e <xTickCount+0x3>
    51de:	b5 01       	movw	r22, r10
    51e0:	a4 01       	movw	r20, r8
    51e2:	4c 19       	sub	r20, r12
    51e4:	5d 09       	sbc	r21, r13
    51e6:	6e 09       	sbc	r22, r14
    51e8:	7f 09       	sbc	r23, r15
    51ea:	04 1b       	sub	r16, r20
    51ec:	15 0b       	sbc	r17, r21
    51ee:	26 0b       	sbc	r18, r22
    51f0:	37 0b       	sbc	r19, r23
    51f2:	08 83       	st	Y, r16
    51f4:	19 83       	std	Y+1, r17	; 0x01
    51f6:	2a 83       	std	Y+2, r18	; 0x02
    51f8:	3b 83       	std	Y+3, r19	; 0x03
    51fa:	0e 94 95 28 	call	0x512a	; 0x512a <vTaskSetTimeOutState>
    51fe:	80 e0       	ldi	r24, 0x00	; 0
    5200:	03 c0       	rjmp	.+6      	; 0x5208 <xTaskCheckForTimeOut+0xbc>
    5202:	81 e0       	ldi	r24, 0x01	; 1
    5204:	01 c0       	rjmp	.+2      	; 0x5208 <xTaskCheckForTimeOut+0xbc>
    5206:	81 e0       	ldi	r24, 0x01	; 1
    5208:	0f 90       	pop	r0
    520a:	0f be       	out	0x3f, r0	; 63
    520c:	df 91       	pop	r29
    520e:	cf 91       	pop	r28
    5210:	1f 91       	pop	r17
    5212:	0f 91       	pop	r16
    5214:	ff 90       	pop	r15
    5216:	ef 90       	pop	r14
    5218:	df 90       	pop	r13
    521a:	cf 90       	pop	r12
    521c:	bf 90       	pop	r11
    521e:	af 90       	pop	r10
    5220:	9f 90       	pop	r9
    5222:	8f 90       	pop	r8
    5224:	08 95       	ret

00005226 <vTaskMissedYield>:
    5226:	81 e0       	ldi	r24, 0x01	; 1
    5228:	80 93 85 41 	sts	0x4185, r24	; 0x804185 <xMissedYield>
    522c:	08 95       	ret

0000522e <uxTaskGetStackHighWaterMark>:
    522e:	00 97       	sbiw	r24, 0x00	; 0
    5230:	21 f4       	brne	.+8      	; 0x523a <uxTaskGetStackHighWaterMark+0xc>
    5232:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    5236:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    523a:	dc 01       	movw	r26, r24
    523c:	5b 96       	adiw	r26, 0x1b	; 27
    523e:	ed 91       	ld	r30, X+
    5240:	fc 91       	ld	r31, X
    5242:	5c 97       	sbiw	r26, 0x1c	; 28
    5244:	80 81       	ld	r24, Z
    5246:	81 31       	cpi	r24, 0x11	; 17
    5248:	41 f4       	brne	.+16     	; 0x525a <uxTaskGetStackHighWaterMark+0x2c>
    524a:	31 96       	adiw	r30, 0x01	; 1
    524c:	80 e0       	ldi	r24, 0x00	; 0
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	01 96       	adiw	r24, 0x01	; 1
    5252:	21 91       	ld	r18, Z+
    5254:	21 31       	cpi	r18, 0x11	; 17
    5256:	e1 f3       	breq	.-8      	; 0x5250 <uxTaskGetStackHighWaterMark+0x22>
    5258:	08 95       	ret
    525a:	80 e0       	ldi	r24, 0x00	; 0
    525c:	90 e0       	ldi	r25, 0x00	; 0
    525e:	08 95       	ret

00005260 <xTaskGetCurrentTaskHandle>:
    5260:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    5264:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    5268:	08 95       	ret

0000526a <vTaskPriorityInherit>:
    526a:	0f 93       	push	r16
    526c:	1f 93       	push	r17
    526e:	cf 93       	push	r28
    5270:	df 93       	push	r29
    5272:	fc 01       	movw	r30, r24
    5274:	22 8d       	ldd	r18, Z+26	; 0x1a
    5276:	a0 91 e3 41 	lds	r26, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    527a:	b0 91 e4 41 	lds	r27, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    527e:	5a 96       	adiw	r26, 0x1a	; 26
    5280:	8c 91       	ld	r24, X
    5282:	28 17       	cp	r18, r24
    5284:	08 f0       	brcs	.+2      	; 0x5288 <vTaskPriorityInherit+0x1e>
    5286:	41 c0       	rjmp	.+130    	; 0x530a <vTaskPriorityInherit+0xa0>
    5288:	a0 91 e3 41 	lds	r26, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    528c:	b0 91 e4 41 	lds	r27, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    5290:	5a 96       	adiw	r26, 0x1a	; 26
    5292:	3c 91       	ld	r19, X
    5294:	84 e0       	ldi	r24, 0x04	; 4
    5296:	90 e0       	ldi	r25, 0x00	; 0
    5298:	a0 e0       	ldi	r26, 0x00	; 0
    529a:	b0 e0       	ldi	r27, 0x00	; 0
    529c:	83 1b       	sub	r24, r19
    529e:	91 09       	sbc	r25, r1
    52a0:	a1 09       	sbc	r26, r1
    52a2:	b1 09       	sbc	r27, r1
    52a4:	86 87       	std	Z+14, r24	; 0x0e
    52a6:	97 87       	std	Z+15, r25	; 0x0f
    52a8:	a0 8b       	std	Z+16, r26	; 0x10
    52aa:	b1 8b       	std	Z+17, r27	; 0x11
    52ac:	8b e0       	ldi	r24, 0x0B	; 11
    52ae:	28 9f       	mul	r18, r24
    52b0:	90 01       	movw	r18, r0
    52b2:	11 24       	eor	r1, r1
    52b4:	29 54       	subi	r18, 0x49	; 73
    52b6:	3e 4b       	sbci	r19, 0xBE	; 190
    52b8:	84 85       	ldd	r24, Z+12	; 0x0c
    52ba:	95 85       	ldd	r25, Z+13	; 0x0d
    52bc:	82 17       	cp	r24, r18
    52be:	93 07       	cpc	r25, r19
    52c0:	e9 f4       	brne	.+58     	; 0x52fc <vTaskPriorityInherit+0x92>
    52c2:	8f 01       	movw	r16, r30
    52c4:	ef 01       	movw	r28, r30
    52c6:	22 96       	adiw	r28, 0x02	; 2
    52c8:	ce 01       	movw	r24, r28
    52ca:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <vListRemove>
    52ce:	e0 91 e3 41 	lds	r30, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    52d2:	f0 91 e4 41 	lds	r31, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    52d6:	82 8d       	ldd	r24, Z+26	; 0x1a
    52d8:	f8 01       	movw	r30, r16
    52da:	82 8f       	std	Z+26, r24	; 0x1a
    52dc:	90 91 89 41 	lds	r25, 0x4189	; 0x804189 <uxTopReadyPriority>
    52e0:	98 17       	cp	r25, r24
    52e2:	10 f4       	brcc	.+4      	; 0x52e8 <vTaskPriorityInherit+0x7e>
    52e4:	80 93 89 41 	sts	0x4189, r24	; 0x804189 <uxTopReadyPriority>
    52e8:	fb e0       	ldi	r31, 0x0B	; 11
    52ea:	8f 9f       	mul	r24, r31
    52ec:	c0 01       	movw	r24, r0
    52ee:	11 24       	eor	r1, r1
    52f0:	be 01       	movw	r22, r28
    52f2:	89 54       	subi	r24, 0x49	; 73
    52f4:	9e 4b       	sbci	r25, 0xBE	; 190
    52f6:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <vListInsertEnd>
    52fa:	07 c0       	rjmp	.+14     	; 0x530a <vTaskPriorityInherit+0xa0>
    52fc:	a0 91 e3 41 	lds	r26, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    5300:	b0 91 e4 41 	lds	r27, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    5304:	5a 96       	adiw	r26, 0x1a	; 26
    5306:	8c 91       	ld	r24, X
    5308:	82 8f       	std	Z+26, r24	; 0x1a
    530a:	df 91       	pop	r29
    530c:	cf 91       	pop	r28
    530e:	1f 91       	pop	r17
    5310:	0f 91       	pop	r16
    5312:	08 95       	ret

00005314 <vTaskPriorityDisinherit>:
    5314:	0f 93       	push	r16
    5316:	1f 93       	push	r17
    5318:	cf 93       	push	r28
    531a:	df 93       	push	r29
    531c:	00 97       	sbiw	r24, 0x00	; 0
    531e:	49 f1       	breq	.+82     	; 0x5372 <vTaskPriorityDisinherit+0x5e>
    5320:	fc 01       	movw	r30, r24
    5322:	32 8d       	ldd	r19, Z+26	; 0x1a
    5324:	27 a1       	ldd	r18, Z+39	; 0x27
    5326:	32 17       	cp	r19, r18
    5328:	21 f1       	breq	.+72     	; 0x5372 <vTaskPriorityDisinherit+0x5e>
    532a:	ec 01       	movw	r28, r24
    532c:	8c 01       	movw	r16, r24
    532e:	0e 5f       	subi	r16, 0xFE	; 254
    5330:	1f 4f       	sbci	r17, 0xFF	; 255
    5332:	c8 01       	movw	r24, r16
    5334:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <vListRemove>
    5338:	8f a1       	ldd	r24, Y+39	; 0x27
    533a:	8a 8f       	std	Y+26, r24	; 0x1a
    533c:	44 e0       	ldi	r20, 0x04	; 4
    533e:	50 e0       	ldi	r21, 0x00	; 0
    5340:	60 e0       	ldi	r22, 0x00	; 0
    5342:	70 e0       	ldi	r23, 0x00	; 0
    5344:	48 1b       	sub	r20, r24
    5346:	51 09       	sbc	r21, r1
    5348:	61 09       	sbc	r22, r1
    534a:	71 09       	sbc	r23, r1
    534c:	4e 87       	std	Y+14, r20	; 0x0e
    534e:	5f 87       	std	Y+15, r21	; 0x0f
    5350:	68 8b       	std	Y+16, r22	; 0x10
    5352:	79 8b       	std	Y+17, r23	; 0x11
    5354:	90 91 89 41 	lds	r25, 0x4189	; 0x804189 <uxTopReadyPriority>
    5358:	98 17       	cp	r25, r24
    535a:	10 f4       	brcc	.+4      	; 0x5360 <vTaskPriorityDisinherit+0x4c>
    535c:	80 93 89 41 	sts	0x4189, r24	; 0x804189 <uxTopReadyPriority>
    5360:	fb e0       	ldi	r31, 0x0B	; 11
    5362:	8f 9f       	mul	r24, r31
    5364:	c0 01       	movw	r24, r0
    5366:	11 24       	eor	r1, r1
    5368:	b8 01       	movw	r22, r16
    536a:	89 54       	subi	r24, 0x49	; 73
    536c:	9e 4b       	sbci	r25, 0xBE	; 190
    536e:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <vListInsertEnd>
    5372:	df 91       	pop	r29
    5374:	cf 91       	pop	r28
    5376:	1f 91       	pop	r17
    5378:	0f 91       	pop	r16
    537a:	08 95       	ret

0000537c <_ZN8frt_task22_call_users_run_methodEPS_>:
    537c:	ec 01       	movw	r28, r24
    537e:	e8 81       	ld	r30, Y
    5380:	f9 81       	ldd	r31, Y+1	; 0x01
    5382:	01 90       	ld	r0, Z+
    5384:	f0 81       	ld	r31, Z
    5386:	e0 2d       	mov	r30, r0
    5388:	19 95       	eicall
    538a:	1a 82       	std	Y+2, r1	; 0x02
    538c:	1b 82       	std	Y+3, r1	; 0x03
    538e:	6f ef       	ldi	r22, 0xFF	; 255
    5390:	7f ef       	ldi	r23, 0xFF	; 255
    5392:	cb 01       	movw	r24, r22
    5394:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <vTaskDelay>
    5398:	fa cf       	rjmp	.-12     	; 0x538e <_ZN8frt_task22_call_users_run_methodEPS_+0x12>

0000539a <_ZN8frt_task13transition_toEh>:
    539a:	fc 01       	movw	r30, r24
    539c:	64 87       	std	Z+12, r22	; 0x0c
    539e:	65 87       	std	Z+13, r22	; 0x0d
    53a0:	08 95       	ret

000053a2 <_ZN8frt_taskC1EPKchjP8emstream>:
    53a2:	4f 92       	push	r4
    53a4:	5f 92       	push	r5
    53a6:	6f 92       	push	r6
    53a8:	7f 92       	push	r7
    53aa:	8f 92       	push	r8
    53ac:	9f 92       	push	r9
    53ae:	af 92       	push	r10
    53b0:	bf 92       	push	r11
    53b2:	cf 92       	push	r12
    53b4:	df 92       	push	r13
    53b6:	ef 92       	push	r14
    53b8:	ff 92       	push	r15
    53ba:	0f 93       	push	r16
    53bc:	1f 93       	push	r17
    53be:	cf 93       	push	r28
    53c0:	df 93       	push	r29
    53c2:	cd b7       	in	r28, 0x3d	; 61
    53c4:	de b7       	in	r29, 0x3e	; 62
    53c6:	2a 97       	sbiw	r28, 0x0a	; 10
    53c8:	cd bf       	out	0x3d, r28	; 61
    53ca:	de bf       	out	0x3e, r29	; 62
    53cc:	4c 01       	movw	r8, r24
    53ce:	29 01       	movw	r4, r18
    53d0:	38 01       	movw	r6, r16
    53d2:	86 eb       	ldi	r24, 0xB6	; 182
    53d4:	90 e2       	ldi	r25, 0x20	; 32
    53d6:	f4 01       	movw	r30, r8
    53d8:	80 83       	st	Z, r24
    53da:	91 83       	std	Z+1, r25	; 0x01
    53dc:	fb 01       	movw	r30, r22
    53de:	80 81       	ld	r24, Z
    53e0:	88 23       	and	r24, r24
    53e2:	69 f0       	breq	.+26     	; 0x53fe <_ZN8frt_taskC1EPKchjP8emstream+0x5c>
    53e4:	de 01       	movw	r26, r28
    53e6:	11 96       	adiw	r26, 0x01	; 1
    53e8:	31 96       	adiw	r30, 0x01	; 1
    53ea:	90 e0       	ldi	r25, 0x00	; 0
    53ec:	02 c0       	rjmp	.+4      	; 0x53f2 <_ZN8frt_taskC1EPKchjP8emstream+0x50>
    53ee:	99 30       	cpi	r25, 0x09	; 9
    53f0:	39 f0       	breq	.+14     	; 0x5400 <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
    53f2:	9f 5f       	subi	r25, 0xFF	; 255
    53f4:	8d 93       	st	X+, r24
    53f6:	81 91       	ld	r24, Z+
    53f8:	81 11       	cpse	r24, r1
    53fa:	f9 cf       	rjmp	.-14     	; 0x53ee <_ZN8frt_taskC1EPKchjP8emstream+0x4c>
    53fc:	01 c0       	rjmp	.+2      	; 0x5400 <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
    53fe:	90 e0       	ldi	r25, 0x00	; 0
    5400:	e1 e0       	ldi	r30, 0x01	; 1
    5402:	f0 e0       	ldi	r31, 0x00	; 0
    5404:	ec 0f       	add	r30, r28
    5406:	fd 1f       	adc	r31, r29
    5408:	e9 0f       	add	r30, r25
    540a:	f1 1d       	adc	r31, r1
    540c:	10 82       	st	Z, r1
    540e:	74 01       	movw	r14, r8
    5410:	f2 e0       	ldi	r31, 0x02	; 2
    5412:	ef 0e       	add	r14, r31
    5414:	f1 1c       	adc	r15, r1
    5416:	a1 2c       	mov	r10, r1
    5418:	b1 2c       	mov	r11, r1
    541a:	c1 2c       	mov	r12, r1
    541c:	d1 2c       	mov	r13, r1
    541e:	04 2f       	mov	r16, r20
    5420:	94 01       	movw	r18, r8
    5422:	a2 01       	movw	r20, r4
    5424:	be 01       	movw	r22, r28
    5426:	6f 5f       	subi	r22, 0xFF	; 255
    5428:	7f 4f       	sbci	r23, 0xFF	; 255
    542a:	8a e6       	ldi	r24, 0x6A	; 106
    542c:	97 e0       	ldi	r25, 0x07	; 7
    542e:	0e 94 52 24 	call	0x48a4	; 0x48a4 <xTaskGenericCreate>
    5432:	f4 01       	movw	r30, r8
    5434:	66 82       	std	Z+6, r6	; 0x06
    5436:	77 82       	std	Z+7, r7	; 0x07
    5438:	40 86       	std	Z+8, r4	; 0x08
    543a:	51 86       	std	Z+9, r5	; 0x09
    543c:	20 91 e5 41 	lds	r18, 0x41E5	; 0x8041e5 <last_created_task_pointer>
    5440:	30 91 e6 41 	lds	r19, 0x41E6	; 0x8041e6 <last_created_task_pointer+0x1>
    5444:	24 83       	std	Z+4, r18	; 0x04
    5446:	35 83       	std	Z+5, r19	; 0x05
    5448:	80 92 e5 41 	sts	0x41E5, r8	; 0x8041e5 <last_created_task_pointer>
    544c:	90 92 e6 41 	sts	0x41E6, r9	; 0x8041e6 <last_created_task_pointer+0x1>
    5450:	14 86       	std	Z+12, r1	; 0x0c
    5452:	15 86       	std	Z+13, r1	; 0x0d
    5454:	40 90 0b 42 	lds	r4, 0x420B	; 0x80420b <portStackTopForTask>
    5458:	50 90 0c 42 	lds	r5, 0x420C	; 0x80420c <portStackTopForTask+0x1>
    545c:	ff ef       	ldi	r31, 0xFF	; 255
    545e:	4f 1a       	sub	r4, r31
    5460:	5f 0a       	sbc	r5, r31
    5462:	40 92 0b 42 	sts	0x420B, r4	; 0x80420b <portStackTopForTask>
    5466:	50 92 0c 42 	sts	0x420C, r5	; 0x80420c <portStackTopForTask+0x1>
    546a:	f4 01       	movw	r30, r8
    546c:	42 86       	std	Z+10, r4	; 0x0a
    546e:	53 86       	std	Z+11, r5	; 0x0b
    5470:	16 86       	std	Z+14, r1	; 0x0e
    5472:	17 86       	std	Z+15, r1	; 0x0f
    5474:	10 8a       	std	Z+16, r1	; 0x10
    5476:	11 8a       	std	Z+17, r1	; 0x11
    5478:	61 14       	cp	r6, r1
    547a:	71 04       	cpc	r7, r1
    547c:	09 f4       	brne	.+2      	; 0x5480 <_ZN8frt_taskC1EPKchjP8emstream+0xde>
    547e:	44 c0       	rjmp	.+136    	; 0x5508 <_ZN8frt_taskC1EPKchjP8emstream+0x166>
    5480:	81 30       	cpi	r24, 0x01	; 1
    5482:	79 f5       	brne	.+94     	; 0x54e2 <_ZN8frt_taskC1EPKchjP8emstream+0x140>
    5484:	6a e0       	ldi	r22, 0x0A	; 10
    5486:	c3 01       	movw	r24, r6
    5488:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    548c:	7c 01       	movw	r14, r24
    548e:	6b e5       	ldi	r22, 0x5B	; 91
    5490:	7e e0       	ldi	r23, 0x0E	; 14
    5492:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    5496:	be 01       	movw	r22, r28
    5498:	6f 5f       	subi	r22, 0xFF	; 255
    549a:	7f 4f       	sbci	r23, 0xFF	; 255
    549c:	c7 01       	movw	r24, r14
    549e:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    54a2:	6a e0       	ldi	r22, 0x0A	; 10
    54a4:	c7 01       	movw	r24, r14
    54a6:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    54aa:	7c 01       	movw	r14, r24
    54ac:	62 e5       	ldi	r22, 0x52	; 82
    54ae:	7e e0       	ldi	r23, 0x0E	; 14
    54b0:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    54b4:	6a e0       	ldi	r22, 0x0A	; 10
    54b6:	c7 01       	movw	r24, r14
    54b8:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    54bc:	7c 01       	movw	r14, r24
    54be:	64 e4       	ldi	r22, 0x44	; 68
    54c0:	7e e0       	ldi	r23, 0x0E	; 14
    54c2:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    54c6:	63 e0       	ldi	r22, 0x03	; 3
    54c8:	c7 01       	movw	r24, r14
    54ca:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    54ce:	b2 01       	movw	r22, r4
    54d0:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <_ZN8emstreamlsEj>
    54d4:	62 e0       	ldi	r22, 0x02	; 2
    54d6:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    54da:	66 e0       	ldi	r22, 0x06	; 6
    54dc:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    54e0:	13 c0       	rjmp	.+38     	; 0x5508 <_ZN8frt_taskC1EPKchjP8emstream+0x166>
    54e2:	6a e0       	ldi	r22, 0x0A	; 10
    54e4:	c3 01       	movw	r24, r6
    54e6:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    54ea:	4c 01       	movw	r8, r24
    54ec:	6f e2       	ldi	r22, 0x2F	; 47
    54ee:	7e e0       	ldi	r23, 0x0E	; 14
    54f0:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    54f4:	be 01       	movw	r22, r28
    54f6:	6f 5f       	subi	r22, 0xFF	; 255
    54f8:	7f 4f       	sbci	r23, 0xFF	; 255
    54fa:	c4 01       	movw	r24, r8
    54fc:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    5500:	66 e0       	ldi	r22, 0x06	; 6
    5502:	c4 01       	movw	r24, r8
    5504:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    5508:	2a 96       	adiw	r28, 0x0a	; 10
    550a:	cd bf       	out	0x3d, r28	; 61
    550c:	de bf       	out	0x3e, r29	; 62
    550e:	df 91       	pop	r29
    5510:	cf 91       	pop	r28
    5512:	1f 91       	pop	r17
    5514:	0f 91       	pop	r16
    5516:	ff 90       	pop	r15
    5518:	ef 90       	pop	r14
    551a:	df 90       	pop	r13
    551c:	cf 90       	pop	r12
    551e:	bf 90       	pop	r11
    5520:	af 90       	pop	r10
    5522:	9f 90       	pop	r9
    5524:	8f 90       	pop	r8
    5526:	7f 90       	pop	r7
    5528:	6f 90       	pop	r6
    552a:	5f 90       	pop	r5
    552c:	4f 90       	pop	r4
    552e:	08 95       	ret

00005530 <_ZN8frt_task12print_statusER8emstream>:
    5530:	8f 92       	push	r8
    5532:	9f 92       	push	r9
    5534:	af 92       	push	r10
    5536:	bf 92       	push	r11
    5538:	cf 92       	push	r12
    553a:	df 92       	push	r13
    553c:	ef 92       	push	r14
    553e:	ff 92       	push	r15
    5540:	0f 93       	push	r16
    5542:	1f 93       	push	r17
    5544:	cf 93       	push	r28
    5546:	df 93       	push	r29
    5548:	ec 01       	movw	r28, r24
    554a:	8b 01       	movw	r16, r22
    554c:	8a 81       	ldd	r24, Y+2	; 0x02
    554e:	9b 81       	ldd	r25, Y+3	; 0x03
    5550:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <pcTaskGetTaskName>
    5554:	bc 01       	movw	r22, r24
    5556:	c8 01       	movw	r24, r16
    5558:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    555c:	d8 01       	movw	r26, r16
    555e:	ed 91       	ld	r30, X+
    5560:	fc 91       	ld	r31, X
    5562:	02 80       	ldd	r0, Z+2	; 0x02
    5564:	f3 81       	ldd	r31, Z+3	; 0x03
    5566:	e0 2d       	mov	r30, r0
    5568:	69 e0       	ldi	r22, 0x09	; 9
    556a:	c8 01       	movw	r24, r16
    556c:	19 95       	eicall
    556e:	8a 81       	ldd	r24, Y+2	; 0x02
    5570:	9b 81       	ldd	r25, Y+3	; 0x03
    5572:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <pcTaskGetTaskName>
    5576:	fc 01       	movw	r30, r24
    5578:	01 90       	ld	r0, Z+
    557a:	00 20       	and	r0, r0
    557c:	e9 f7       	brne	.-6      	; 0x5578 <_ZN8frt_task12print_statusER8emstream+0x48>
    557e:	31 97       	sbiw	r30, 0x01	; 1
    5580:	e8 1b       	sub	r30, r24
    5582:	f9 0b       	sbc	r31, r25
    5584:	38 97       	sbiw	r30, 0x08	; 8
    5586:	48 f4       	brcc	.+18     	; 0x559a <_ZN8frt_task12print_statusER8emstream+0x6a>
    5588:	d8 01       	movw	r26, r16
    558a:	ed 91       	ld	r30, X+
    558c:	fc 91       	ld	r31, X
    558e:	02 80       	ldd	r0, Z+2	; 0x02
    5590:	f3 81       	ldd	r31, Z+3	; 0x03
    5592:	e0 2d       	mov	r30, r0
    5594:	69 e0       	ldi	r22, 0x09	; 9
    5596:	c8 01       	movw	r24, r16
    5598:	19 95       	eicall
    559a:	ce 84       	ldd	r12, Y+14	; 0x0e
    559c:	df 84       	ldd	r13, Y+15	; 0x0f
    559e:	e8 88       	ldd	r14, Y+16	; 0x10
    55a0:	f9 88       	ldd	r15, Y+17	; 0x11
    55a2:	a8 84       	ldd	r10, Y+8	; 0x08
    55a4:	b9 84       	ldd	r11, Y+9	; 0x09
    55a6:	8a 81       	ldd	r24, Y+2	; 0x02
    55a8:	9b 81       	ldd	r25, Y+3	; 0x03
    55aa:	0e 94 17 29 	call	0x522e	; 0x522e <uxTaskGetStackHighWaterMark>
    55ae:	98 2e       	mov	r9, r24
    55b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    55b2:	8a 81       	ldd	r24, Y+2	; 0x02
    55b4:	9b 81       	ldd	r25, Y+3	; 0x03
    55b6:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <uxTaskPriorityGet>
    55ba:	68 2f       	mov	r22, r24
    55bc:	c8 01       	movw	r24, r16
    55be:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <_ZN8emstreamlsEh>
    55c2:	6a e0       	ldi	r22, 0x0A	; 10
    55c4:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    55c8:	ec 01       	movw	r28, r24
    55ca:	61 ed       	ldi	r22, 0xD1	; 209
    55cc:	7e e0       	ldi	r23, 0x0E	; 14
    55ce:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    55d2:	68 2d       	mov	r22, r8
    55d4:	ce 01       	movw	r24, r28
    55d6:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <_ZN8emstreamlsEh>
    55da:	6a e0       	ldi	r22, 0x0A	; 10
    55dc:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    55e0:	ec 01       	movw	r28, r24
    55e2:	6f ec       	ldi	r22, 0xCF	; 207
    55e4:	7e e0       	ldi	r23, 0x0E	; 14
    55e6:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    55ea:	69 2d       	mov	r22, r9
    55ec:	ce 01       	movw	r24, r28
    55ee:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <_ZN8emstreamlsEh>
    55f2:	6a e0       	ldi	r22, 0x0A	; 10
    55f4:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    55f8:	ec 01       	movw	r28, r24
    55fa:	6d ec       	ldi	r22, 0xCD	; 205
    55fc:	7e e0       	ldi	r23, 0x0E	; 14
    55fe:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    5602:	b5 01       	movw	r22, r10
    5604:	ce 01       	movw	r24, r28
    5606:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <_ZN8emstreamlsEj>
    560a:	6a e0       	ldi	r22, 0x0A	; 10
    560c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    5610:	ec 01       	movw	r28, r24
    5612:	6b ec       	ldi	r22, 0xCB	; 203
    5614:	7e e0       	ldi	r23, 0x0E	; 14
    5616:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    561a:	6a e0       	ldi	r22, 0x0A	; 10
    561c:	ce 01       	movw	r24, r28
    561e:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstreamlsE15ser_manipulator>
    5622:	ec 01       	movw	r28, r24
    5624:	69 ec       	ldi	r22, 0xC9	; 201
    5626:	7e e0       	ldi	r23, 0x0E	; 14
    5628:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    562c:	b7 01       	movw	r22, r14
    562e:	a6 01       	movw	r20, r12
    5630:	ce 01       	movw	r24, r28
    5632:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <_ZN8emstreamlsEm>
    5636:	df 91       	pop	r29
    5638:	cf 91       	pop	r28
    563a:	1f 91       	pop	r17
    563c:	0f 91       	pop	r16
    563e:	ff 90       	pop	r15
    5640:	ef 90       	pop	r14
    5642:	df 90       	pop	r13
    5644:	cf 90       	pop	r12
    5646:	bf 90       	pop	r11
    5648:	af 90       	pop	r10
    564a:	9f 90       	pop	r9
    564c:	8f 90       	pop	r8
    564e:	08 95       	ret

00005650 <_ZN14frt_text_queue7getcharEv>:
    5650:	0f 93       	push	r16
    5652:	cf 93       	push	r28
    5654:	df 93       	push	r29
    5656:	1f 92       	push	r1
    5658:	cd b7       	in	r28, 0x3d	; 61
    565a:	de b7       	in	r29, 0x3e	; 62
    565c:	00 e0       	ldi	r16, 0x00	; 0
    565e:	2f ef       	ldi	r18, 0xFF	; 255
    5660:	3f ef       	ldi	r19, 0xFF	; 255
    5662:	a9 01       	movw	r20, r18
    5664:	be 01       	movw	r22, r28
    5666:	6f 5f       	subi	r22, 0xFF	; 255
    5668:	7f 4f       	sbci	r23, 0xFF	; 255
    566a:	fc 01       	movw	r30, r24
    566c:	80 85       	ldd	r24, Z+8	; 0x08
    566e:	91 85       	ldd	r25, Z+9	; 0x09
    5670:	0e 94 00 23 	call	0x4600	; 0x4600 <xQueueGenericReceive>
    5674:	81 30       	cpi	r24, 0x01	; 1
    5676:	19 f4       	brne	.+6      	; 0x567e <_ZN14frt_text_queue7getcharEv+0x2e>
    5678:	89 81       	ldd	r24, Y+1	; 0x01
    567a:	90 e0       	ldi	r25, 0x00	; 0
    567c:	02 c0       	rjmp	.+4      	; 0x5682 <_ZN14frt_text_queue7getcharEv+0x32>
    567e:	8f ef       	ldi	r24, 0xFF	; 255
    5680:	9f ef       	ldi	r25, 0xFF	; 255
    5682:	0f 90       	pop	r0
    5684:	df 91       	pop	r29
    5686:	cf 91       	pop	r28
    5688:	0f 91       	pop	r16
    568a:	08 95       	ret

0000568c <_ZN14frt_text_queue14check_for_charEv>:
    568c:	fc 01       	movw	r30, r24
    568e:	80 85       	ldd	r24, Z+8	; 0x08
    5690:	91 85       	ldd	r25, Z+9	; 0x09
    5692:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <uxQueueMessagesWaiting>
    5696:	91 e0       	ldi	r25, 0x01	; 1
    5698:	81 11       	cpse	r24, r1
    569a:	01 c0       	rjmp	.+2      	; 0x569e <_ZN14frt_text_queue14check_for_charEv+0x12>
    569c:	90 e0       	ldi	r25, 0x00	; 0
    569e:	89 2f       	mov	r24, r25
    56a0:	08 95       	ret

000056a2 <_ZN14frt_text_queue7putcharEc>:
    56a2:	0f 93       	push	r16
    56a4:	cf 93       	push	r28
    56a6:	df 93       	push	r29
    56a8:	1f 92       	push	r1
    56aa:	cd b7       	in	r28, 0x3d	; 61
    56ac:	de b7       	in	r29, 0x3e	; 62
    56ae:	69 83       	std	Y+1, r22	; 0x01
    56b0:	fc 01       	movw	r30, r24
    56b2:	22 85       	ldd	r18, Z+10	; 0x0a
    56b4:	33 85       	ldd	r19, Z+11	; 0x0b
    56b6:	44 85       	ldd	r20, Z+12	; 0x0c
    56b8:	55 85       	ldd	r21, Z+13	; 0x0d
    56ba:	00 e0       	ldi	r16, 0x00	; 0
    56bc:	be 01       	movw	r22, r28
    56be:	6f 5f       	subi	r22, 0xFF	; 255
    56c0:	7f 4f       	sbci	r23, 0xFF	; 255
    56c2:	80 85       	ldd	r24, Z+8	; 0x08
    56c4:	91 85       	ldd	r25, Z+9	; 0x09
    56c6:	0e 94 39 22 	call	0x4472	; 0x4472 <xQueueGenericSend>
    56ca:	91 e0       	ldi	r25, 0x01	; 1
    56cc:	81 11       	cpse	r24, r1
    56ce:	01 c0       	rjmp	.+2      	; 0x56d2 <_ZN14frt_text_queue7putcharEc+0x30>
    56d0:	90 e0       	ldi	r25, 0x00	; 0
    56d2:	89 2f       	mov	r24, r25
    56d4:	0f 90       	pop	r0
    56d6:	df 91       	pop	r29
    56d8:	cf 91       	pop	r28
    56da:	0f 91       	pop	r16
    56dc:	08 95       	ret

000056de <_ZN14frt_text_queueC1EjP8emstreamm>:
    56de:	8f 92       	push	r8
    56e0:	9f 92       	push	r9
    56e2:	bf 92       	push	r11
    56e4:	cf 92       	push	r12
    56e6:	df 92       	push	r13
    56e8:	ef 92       	push	r14
    56ea:	ff 92       	push	r15
    56ec:	0f 93       	push	r16
    56ee:	1f 93       	push	r17
    56f0:	cf 93       	push	r28
    56f2:	df 93       	push	r29
    56f4:	ec 01       	movw	r28, r24
    56f6:	b6 2e       	mov	r11, r22
    56f8:	4a 01       	movw	r8, r20
    56fa:	68 01       	movw	r12, r16
    56fc:	79 01       	movw	r14, r18
    56fe:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <_ZN8emstreamC1Ev>
    5702:	8e eb       	ldi	r24, 0xBE	; 190
    5704:	90 e2       	ldi	r25, 0x20	; 32
    5706:	88 83       	st	Y, r24
    5708:	99 83       	std	Y+1, r25	; 0x01
    570a:	8e 86       	std	Y+14, r8	; 0x0e
    570c:	9f 86       	std	Y+15, r9	; 0x0f
    570e:	40 e0       	ldi	r20, 0x00	; 0
    5710:	61 e0       	ldi	r22, 0x01	; 1
    5712:	8b 2d       	mov	r24, r11
    5714:	0e 94 0b 22 	call	0x4416	; 0x4416 <xQueueGenericCreate>
    5718:	88 87       	std	Y+8, r24	; 0x08
    571a:	99 87       	std	Y+9, r25	; 0x09
    571c:	ca 86       	std	Y+10, r12	; 0x0a
    571e:	db 86       	std	Y+11, r13	; 0x0b
    5720:	ec 86       	std	Y+12, r14	; 0x0c
    5722:	fd 86       	std	Y+13, r15	; 0x0d
    5724:	df 91       	pop	r29
    5726:	cf 91       	pop	r28
    5728:	1f 91       	pop	r17
    572a:	0f 91       	pop	r16
    572c:	ff 90       	pop	r15
    572e:	ef 90       	pop	r14
    5730:	df 90       	pop	r13
    5732:	cf 90       	pop	r12
    5734:	bf 90       	pop	r11
    5736:	9f 90       	pop	r9
    5738:	8f 90       	pop	r8
    573a:	08 95       	ret

0000573c <_Znwj>:
    573c:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <pvPortMalloc>
    5740:	08 95       	ret

00005742 <_Znaj>:
    5742:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <pvPortMalloc>
    5746:	08 95       	ret

00005748 <__cxa_pure_virtual>:
    5748:	08 95       	ret

0000574a <_ZN7base232C1EjP12USART_struct>:
    574a:	cf 93       	push	r28
    574c:	df 93       	push	r29
    574e:	fc 01       	movw	r30, r24
    5750:	da 01       	movw	r26, r20
    5752:	40 3a       	cpi	r20, 0xA0	; 160
    5754:	68 e0       	ldi	r22, 0x08	; 8
    5756:	56 07       	cpc	r21, r22
    5758:	49 f4       	brne	.+18     	; 0x576c <_ZN7base232C1EjP12USART_struct+0x22>
    575a:	80 e4       	ldi	r24, 0x40	; 64
    575c:	96 e0       	ldi	r25, 0x06	; 6
    575e:	82 83       	std	Z+2, r24	; 0x02
    5760:	93 83       	std	Z+3, r25	; 0x03
    5762:	82 e0       	ldi	r24, 0x02	; 2
    5764:	84 83       	std	Z+4, r24	; 0x04
    5766:	83 e0       	ldi	r24, 0x03	; 3
    5768:	85 83       	std	Z+5, r24	; 0x05
    576a:	3f c0       	rjmp	.+126    	; 0x57ea <_ZN7base232C1EjP12USART_struct+0xa0>
    576c:	40 3b       	cpi	r20, 0xB0	; 176
    576e:	78 e0       	ldi	r23, 0x08	; 8
    5770:	57 07       	cpc	r21, r23
    5772:	49 f4       	brne	.+18     	; 0x5786 <_ZN7base232C1EjP12USART_struct+0x3c>
    5774:	80 e4       	ldi	r24, 0x40	; 64
    5776:	96 e0       	ldi	r25, 0x06	; 6
    5778:	82 83       	std	Z+2, r24	; 0x02
    577a:	93 83       	std	Z+3, r25	; 0x03
    577c:	86 e0       	ldi	r24, 0x06	; 6
    577e:	84 83       	std	Z+4, r24	; 0x04
    5780:	87 e0       	ldi	r24, 0x07	; 7
    5782:	85 83       	std	Z+5, r24	; 0x05
    5784:	32 c0       	rjmp	.+100    	; 0x57ea <_ZN7base232C1EjP12USART_struct+0xa0>
    5786:	40 3a       	cpi	r20, 0xA0	; 160
    5788:	89 e0       	ldi	r24, 0x09	; 9
    578a:	58 07       	cpc	r21, r24
    578c:	49 f4       	brne	.+18     	; 0x57a0 <_ZN7base232C1EjP12USART_struct+0x56>
    578e:	80 e6       	ldi	r24, 0x60	; 96
    5790:	96 e0       	ldi	r25, 0x06	; 6
    5792:	82 83       	std	Z+2, r24	; 0x02
    5794:	93 83       	std	Z+3, r25	; 0x03
    5796:	82 e0       	ldi	r24, 0x02	; 2
    5798:	84 83       	std	Z+4, r24	; 0x04
    579a:	83 e0       	ldi	r24, 0x03	; 3
    579c:	85 83       	std	Z+5, r24	; 0x05
    579e:	25 c0       	rjmp	.+74     	; 0x57ea <_ZN7base232C1EjP12USART_struct+0xa0>
    57a0:	40 3b       	cpi	r20, 0xB0	; 176
    57a2:	69 e0       	ldi	r22, 0x09	; 9
    57a4:	56 07       	cpc	r21, r22
    57a6:	49 f4       	brne	.+18     	; 0x57ba <_ZN7base232C1EjP12USART_struct+0x70>
    57a8:	80 e6       	ldi	r24, 0x60	; 96
    57aa:	96 e0       	ldi	r25, 0x06	; 6
    57ac:	82 83       	std	Z+2, r24	; 0x02
    57ae:	93 83       	std	Z+3, r25	; 0x03
    57b0:	86 e0       	ldi	r24, 0x06	; 6
    57b2:	84 83       	std	Z+4, r24	; 0x04
    57b4:	87 e0       	ldi	r24, 0x07	; 7
    57b6:	85 83       	std	Z+5, r24	; 0x05
    57b8:	18 c0       	rjmp	.+48     	; 0x57ea <_ZN7base232C1EjP12USART_struct+0xa0>
    57ba:	40 3a       	cpi	r20, 0xA0	; 160
    57bc:	7a e0       	ldi	r23, 0x0A	; 10
    57be:	57 07       	cpc	r21, r23
    57c0:	49 f4       	brne	.+18     	; 0x57d4 <_ZN7base232C1EjP12USART_struct+0x8a>
    57c2:	80 e8       	ldi	r24, 0x80	; 128
    57c4:	96 e0       	ldi	r25, 0x06	; 6
    57c6:	82 83       	std	Z+2, r24	; 0x02
    57c8:	93 83       	std	Z+3, r25	; 0x03
    57ca:	82 e0       	ldi	r24, 0x02	; 2
    57cc:	84 83       	std	Z+4, r24	; 0x04
    57ce:	83 e0       	ldi	r24, 0x03	; 3
    57d0:	85 83       	std	Z+5, r24	; 0x05
    57d2:	0b c0       	rjmp	.+22     	; 0x57ea <_ZN7base232C1EjP12USART_struct+0xa0>
    57d4:	40 3a       	cpi	r20, 0xA0	; 160
    57d6:	5b 40       	sbci	r21, 0x0B	; 11
    57d8:	41 f4       	brne	.+16     	; 0x57ea <_ZN7base232C1EjP12USART_struct+0xa0>
    57da:	80 ea       	ldi	r24, 0xA0	; 160
    57dc:	96 e0       	ldi	r25, 0x06	; 6
    57de:	82 83       	std	Z+2, r24	; 0x02
    57e0:	93 83       	std	Z+3, r25	; 0x03
    57e2:	82 e0       	ldi	r24, 0x02	; 2
    57e4:	84 83       	std	Z+4, r24	; 0x04
    57e6:	83 e0       	ldi	r24, 0x03	; 3
    57e8:	85 83       	std	Z+5, r24	; 0x05
    57ea:	a6 83       	std	Z+6, r26	; 0x06
    57ec:	b7 83       	std	Z+7, r27	; 0x07
    57ee:	cd 01       	movw	r24, r26
    57f0:	01 96       	adiw	r24, 0x01	; 1
    57f2:	80 87       	std	Z+8, r24	; 0x08
    57f4:	91 87       	std	Z+9, r25	; 0x09
    57f6:	03 96       	adiw	r24, 0x03	; 3
    57f8:	82 87       	std	Z+10, r24	; 0x0a
    57fa:	93 87       	std	Z+11, r25	; 0x0b
    57fc:	25 81       	ldd	r18, Z+5	; 0x05
    57fe:	c2 81       	ldd	r28, Z+2	; 0x02
    5800:	d3 81       	ldd	r29, Z+3	; 0x03
    5802:	4c 81       	ldd	r20, Y+4	; 0x04
    5804:	81 e0       	ldi	r24, 0x01	; 1
    5806:	90 e0       	ldi	r25, 0x00	; 0
    5808:	bc 01       	movw	r22, r24
    580a:	02 c0       	rjmp	.+4      	; 0x5810 <_ZN7base232C1EjP12USART_struct+0xc6>
    580c:	66 0f       	add	r22, r22
    580e:	77 1f       	adc	r23, r23
    5810:	2a 95       	dec	r18
    5812:	e2 f7       	brpl	.-8      	; 0x580c <_ZN7base232C1EjP12USART_struct+0xc2>
    5814:	9b 01       	movw	r18, r22
    5816:	24 2b       	or	r18, r20
    5818:	2c 83       	std	Y+4, r18	; 0x04
    581a:	25 81       	ldd	r18, Z+5	; 0x05
    581c:	c2 81       	ldd	r28, Z+2	; 0x02
    581e:	d3 81       	ldd	r29, Z+3	; 0x03
    5820:	48 81       	ld	r20, Y
    5822:	bc 01       	movw	r22, r24
    5824:	02 c0       	rjmp	.+4      	; 0x582a <_ZN7base232C1EjP12USART_struct+0xe0>
    5826:	66 0f       	add	r22, r22
    5828:	77 1f       	adc	r23, r23
    582a:	2a 95       	dec	r18
    582c:	e2 f7       	brpl	.-8      	; 0x5826 <_ZN7base232C1EjP12USART_struct+0xdc>
    582e:	9b 01       	movw	r18, r22
    5830:	24 2b       	or	r18, r20
    5832:	28 83       	st	Y, r18
    5834:	34 81       	ldd	r19, Z+4	; 0x04
    5836:	c2 81       	ldd	r28, Z+2	; 0x02
    5838:	d3 81       	ldd	r29, Z+3	; 0x03
    583a:	28 81       	ld	r18, Y
    583c:	02 c0       	rjmp	.+4      	; 0x5842 <_ZN7base232C1EjP12USART_struct+0xf8>
    583e:	88 0f       	add	r24, r24
    5840:	99 1f       	adc	r25, r25
    5842:	3a 95       	dec	r19
    5844:	e2 f7       	brpl	.-8      	; 0x583e <_ZN7base232C1EjP12USART_struct+0xf4>
    5846:	80 95       	com	r24
    5848:	90 95       	com	r25
    584a:	82 23       	and	r24, r18
    584c:	88 83       	st	Y, r24
    584e:	80 e1       	ldi	r24, 0x10	; 16
    5850:	13 96       	adiw	r26, 0x03	; 3
    5852:	8c 93       	st	X, r24
    5854:	13 97       	sbiw	r26, 0x03	; 3
    5856:	83 e0       	ldi	r24, 0x03	; 3
    5858:	15 96       	adiw	r26, 0x05	; 5
    585a:	8c 93       	st	X, r24
    585c:	15 97       	sbiw	r26, 0x05	; 5
    585e:	80 ef       	ldi	r24, 0xF0	; 240
    5860:	17 96       	adiw	r26, 0x07	; 7
    5862:	8c 93       	st	X, r24
    5864:	17 97       	sbiw	r26, 0x07	; 7
    5866:	81 e2       	ldi	r24, 0x21	; 33
    5868:	16 96       	adiw	r26, 0x06	; 6
    586a:	8c 93       	st	X, r24
    586c:	16 97       	sbiw	r26, 0x06	; 6
    586e:	88 e1       	ldi	r24, 0x18	; 24
    5870:	14 96       	adiw	r26, 0x04	; 4
    5872:	8c 93       	st	X, r24
    5874:	80 e8       	ldi	r24, 0x80	; 128
    5876:	85 87       	std	Z+13, r24	; 0x0d
    5878:	80 e4       	ldi	r24, 0x40	; 64
    587a:	86 87       	std	Z+14, r24	; 0x0e
    587c:	80 e2       	ldi	r24, 0x20	; 32
    587e:	84 87       	std	Z+12, r24	; 0x0c
    5880:	06 80       	ldd	r0, Z+6	; 0x06
    5882:	f7 81       	ldd	r31, Z+7	; 0x07
    5884:	e0 2d       	mov	r30, r0
    5886:	80 81       	ld	r24, Z
    5888:	80 81       	ld	r24, Z
    588a:	df 91       	pop	r29
    588c:	cf 91       	pop	r28
    588e:	08 95       	ret

00005890 <_ZN8emstream13ready_to_sendEv>:
    5890:	81 e0       	ldi	r24, 0x01	; 1
    5892:	08 95       	ret

00005894 <_ZN8emstream7getcharEv>:
    5894:	80 e0       	ldi	r24, 0x00	; 0
    5896:	90 e0       	ldi	r25, 0x00	; 0
    5898:	08 95       	ret

0000589a <_ZN8emstream14check_for_charEv>:
    589a:	80 e0       	ldi	r24, 0x00	; 0
    589c:	08 95       	ret

0000589e <_ZN8emstream12transmit_nowEv>:
    589e:	08 95       	ret

000058a0 <_ZN8emstream12clear_screenEv>:
    58a0:	08 95       	ret

000058a2 <_ZN8emstreamC1Ev>:
    58a2:	fc 01       	movw	r30, r24
    58a4:	8e ec       	ldi	r24, 0xCE	; 206
    58a6:	90 e2       	ldi	r25, 0x20	; 32
    58a8:	80 83       	st	Z, r24
    58aa:	91 83       	std	Z+1, r25	; 0x01
    58ac:	8a e0       	ldi	r24, 0x0A	; 10
    58ae:	82 83       	std	Z+2, r24	; 0x02
    58b0:	13 82       	std	Z+3, r1	; 0x03
    58b2:	83 e0       	ldi	r24, 0x03	; 3
    58b4:	85 83       	std	Z+5, r24	; 0x05
    58b6:	14 82       	std	Z+4, r1	; 0x04
    58b8:	16 82       	std	Z+6, r1	; 0x06
    58ba:	17 82       	std	Z+7, r1	; 0x07
    58bc:	08 95       	ret

000058be <_ZN8emstream4putsEPKc>:
    58be:	0f 93       	push	r16
    58c0:	1f 93       	push	r17
    58c2:	cf 93       	push	r28
    58c4:	df 93       	push	r29
    58c6:	8c 01       	movw	r16, r24
    58c8:	fb 01       	movw	r30, r22
    58ca:	dc 01       	movw	r26, r24
    58cc:	14 96       	adiw	r26, 0x04	; 4
    58ce:	8c 91       	ld	r24, X
    58d0:	81 11       	cpse	r24, r1
    58d2:	04 c0       	rjmp	.+8      	; 0x58dc <_ZN8emstream4putsEPKc+0x1e>
    58d4:	60 81       	ld	r22, Z
    58d6:	61 11       	cpse	r22, r1
    58d8:	17 c0       	rjmp	.+46     	; 0x5908 <_ZN8emstream4putsEPKc+0x4a>
    58da:	23 c0       	rjmp	.+70     	; 0x5922 <_ZN8emstream4putsEPKc+0x64>
    58dc:	d8 01       	movw	r26, r16
    58de:	14 96       	adiw	r26, 0x04	; 4
    58e0:	1c 92       	st	X, r1
    58e2:	eb 01       	movw	r28, r22
    58e4:	21 96       	adiw	r28, 0x01	; 1
    58e6:	64 91       	lpm	r22, Z
    58e8:	66 23       	and	r22, r22
    58ea:	d9 f0       	breq	.+54     	; 0x5922 <_ZN8emstream4putsEPKc+0x64>
    58ec:	d8 01       	movw	r26, r16
    58ee:	ed 91       	ld	r30, X+
    58f0:	fc 91       	ld	r31, X
    58f2:	02 80       	ldd	r0, Z+2	; 0x02
    58f4:	f3 81       	ldd	r31, Z+3	; 0x03
    58f6:	e0 2d       	mov	r30, r0
    58f8:	c8 01       	movw	r24, r16
    58fa:	19 95       	eicall
    58fc:	fe 01       	movw	r30, r28
    58fe:	64 91       	lpm	r22, Z
    5900:	21 96       	adiw	r28, 0x01	; 1
    5902:	61 11       	cpse	r22, r1
    5904:	f3 cf       	rjmp	.-26     	; 0x58ec <_ZN8emstream4putsEPKc+0x2e>
    5906:	0d c0       	rjmp	.+26     	; 0x5922 <_ZN8emstream4putsEPKc+0x64>
    5908:	ef 01       	movw	r28, r30
    590a:	21 96       	adiw	r28, 0x01	; 1
    590c:	d8 01       	movw	r26, r16
    590e:	ed 91       	ld	r30, X+
    5910:	fc 91       	ld	r31, X
    5912:	02 80       	ldd	r0, Z+2	; 0x02
    5914:	f3 81       	ldd	r31, Z+3	; 0x03
    5916:	e0 2d       	mov	r30, r0
    5918:	c8 01       	movw	r24, r16
    591a:	19 95       	eicall
    591c:	69 91       	ld	r22, Y+
    591e:	61 11       	cpse	r22, r1
    5920:	f5 cf       	rjmp	.-22     	; 0x590c <_ZN8emstream4putsEPKc+0x4e>
    5922:	df 91       	pop	r29
    5924:	cf 91       	pop	r28
    5926:	1f 91       	pop	r17
    5928:	0f 91       	pop	r16
    592a:	08 95       	ret

0000592c <_ZN8emstreamlsE15ser_manipulator>:
    592c:	cf 93       	push	r28
    592e:	df 93       	push	r29
    5930:	ec 01       	movw	r28, r24
    5932:	86 2f       	mov	r24, r22
    5934:	90 e0       	ldi	r25, 0x00	; 0
    5936:	8b 30       	cpi	r24, 0x0B	; 11
    5938:	91 05       	cpc	r25, r1
    593a:	d8 f5       	brcc	.+118    	; 0x59b2 <_ZN8emstreamlsE15ser_manipulator+0x86>
    593c:	fc 01       	movw	r30, r24
    593e:	88 27       	eor	r24, r24
    5940:	e2 53       	subi	r30, 0x32	; 50
    5942:	fe 4f       	sbci	r31, 0xFE	; 254
    5944:	8f 4f       	sbci	r24, 0xFF	; 255
    5946:	0c 94 77 34 	jmp	0x68ee	; 0x68ee <__tablejump2__>
    594a:	82 e0       	ldi	r24, 0x02	; 2
    594c:	8a 83       	std	Y+2, r24	; 0x02
    594e:	31 c0       	rjmp	.+98     	; 0x59b2 <_ZN8emstreamlsE15ser_manipulator+0x86>
    5950:	88 e0       	ldi	r24, 0x08	; 8
    5952:	8a 83       	std	Y+2, r24	; 0x02
    5954:	2e c0       	rjmp	.+92     	; 0x59b2 <_ZN8emstreamlsE15ser_manipulator+0x86>
    5956:	8a e0       	ldi	r24, 0x0A	; 10
    5958:	8a 83       	std	Y+2, r24	; 0x02
    595a:	2b c0       	rjmp	.+86     	; 0x59b2 <_ZN8emstreamlsE15ser_manipulator+0x86>
    595c:	80 e1       	ldi	r24, 0x10	; 16
    595e:	8a 83       	std	Y+2, r24	; 0x02
    5960:	28 c0       	rjmp	.+80     	; 0x59b2 <_ZN8emstreamlsE15ser_manipulator+0x86>
    5962:	81 e0       	ldi	r24, 0x01	; 1
    5964:	8b 83       	std	Y+3, r24	; 0x03
    5966:	25 c0       	rjmp	.+74     	; 0x59b2 <_ZN8emstreamlsE15ser_manipulator+0x86>
    5968:	1b 82       	std	Y+3, r1	; 0x03
    596a:	23 c0       	rjmp	.+70     	; 0x59b2 <_ZN8emstreamlsE15ser_manipulator+0x86>
    596c:	e8 81       	ld	r30, Y
    596e:	f9 81       	ldd	r31, Y+1	; 0x01
    5970:	02 80       	ldd	r0, Z+2	; 0x02
    5972:	f3 81       	ldd	r31, Z+3	; 0x03
    5974:	e0 2d       	mov	r30, r0
    5976:	6d e0       	ldi	r22, 0x0D	; 13
    5978:	ce 01       	movw	r24, r28
    597a:	19 95       	eicall
    597c:	e8 81       	ld	r30, Y
    597e:	f9 81       	ldd	r31, Y+1	; 0x01
    5980:	02 80       	ldd	r0, Z+2	; 0x02
    5982:	f3 81       	ldd	r31, Z+3	; 0x03
    5984:	e0 2d       	mov	r30, r0
    5986:	6a e0       	ldi	r22, 0x0A	; 10
    5988:	ce 01       	movw	r24, r28
    598a:	19 95       	eicall
    598c:	12 c0       	rjmp	.+36     	; 0x59b2 <_ZN8emstreamlsE15ser_manipulator+0x86>
    598e:	e8 81       	ld	r30, Y
    5990:	f9 81       	ldd	r31, Y+1	; 0x01
    5992:	02 84       	ldd	r0, Z+10	; 0x0a
    5994:	f3 85       	ldd	r31, Z+11	; 0x0b
    5996:	e0 2d       	mov	r30, r0
    5998:	ce 01       	movw	r24, r28
    599a:	19 95       	eicall
    599c:	0a c0       	rjmp	.+20     	; 0x59b2 <_ZN8emstreamlsE15ser_manipulator+0x86>
    599e:	e8 81       	ld	r30, Y
    59a0:	f9 81       	ldd	r31, Y+1	; 0x01
    59a2:	00 84       	ldd	r0, Z+8	; 0x08
    59a4:	f1 85       	ldd	r31, Z+9	; 0x09
    59a6:	e0 2d       	mov	r30, r0
    59a8:	ce 01       	movw	r24, r28
    59aa:	19 95       	eicall
    59ac:	02 c0       	rjmp	.+4      	; 0x59b2 <_ZN8emstreamlsE15ser_manipulator+0x86>
    59ae:	81 e0       	ldi	r24, 0x01	; 1
    59b0:	8c 83       	std	Y+4, r24	; 0x04
    59b2:	ce 01       	movw	r24, r28
    59b4:	df 91       	pop	r29
    59b6:	cf 91       	pop	r28
    59b8:	08 95       	ret

000059ba <_ZN8emstreamlsEf>:
    59ba:	af 92       	push	r10
    59bc:	bf 92       	push	r11
    59be:	cf 92       	push	r12
    59c0:	df 92       	push	r13
    59c2:	ef 92       	push	r14
    59c4:	ff 92       	push	r15
    59c6:	0f 93       	push	r16
    59c8:	1f 93       	push	r17
    59ca:	cf 93       	push	r28
    59cc:	df 93       	push	r29
    59ce:	cd b7       	in	r28, 0x3d	; 61
    59d0:	de b7       	in	r29, 0x3e	; 62
    59d2:	64 97       	sbiw	r28, 0x14	; 20
    59d4:	cd bf       	out	0x3d, r28	; 61
    59d6:	de bf       	out	0x3e, r29	; 62
    59d8:	7c 01       	movw	r14, r24
    59da:	cb 01       	movw	r24, r22
    59dc:	ba 01       	movw	r22, r20
    59de:	d0 90 06 20 	lds	r13, 0x2006	; 0x802006 <bts_glob_prec>
    59e2:	00 e1       	ldi	r16, 0x10	; 16
    59e4:	2d 2d       	mov	r18, r13
    59e6:	ae 01       	movw	r20, r28
    59e8:	4f 5f       	subi	r20, 0xFF	; 255
    59ea:	5f 4f       	sbci	r21, 0xFF	; 255
    59ec:	0e 94 99 34 	call	0x6932	; 0x6932 <__ftoa_engine>
    59f0:	5c 01       	movw	r10, r24
    59f2:	89 81       	ldd	r24, Y+1	; 0x01
    59f4:	83 ff       	sbrs	r24, 3
    59f6:	06 c0       	rjmp	.+12     	; 0x5a04 <_ZN8emstreamlsEf+0x4a>
    59f8:	6c ed       	ldi	r22, 0xDC	; 220
    59fa:	70 e2       	ldi	r23, 0x20	; 32
    59fc:	c7 01       	movw	r24, r14
    59fe:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    5a02:	56 c0       	rjmp	.+172    	; 0x5ab0 <_ZN8emstreamlsEf+0xf6>
    5a04:	80 ff       	sbrs	r24, 0
    5a06:	09 c0       	rjmp	.+18     	; 0x5a1a <_ZN8emstreamlsEf+0x60>
    5a08:	d7 01       	movw	r26, r14
    5a0a:	ed 91       	ld	r30, X+
    5a0c:	fc 91       	ld	r31, X
    5a0e:	02 80       	ldd	r0, Z+2	; 0x02
    5a10:	f3 81       	ldd	r31, Z+3	; 0x03
    5a12:	e0 2d       	mov	r30, r0
    5a14:	6d e2       	ldi	r22, 0x2D	; 45
    5a16:	c7 01       	movw	r24, r14
    5a18:	19 95       	eicall
    5a1a:	d7 01       	movw	r26, r14
    5a1c:	ed 91       	ld	r30, X+
    5a1e:	fc 91       	ld	r31, X
    5a20:	02 80       	ldd	r0, Z+2	; 0x02
    5a22:	f3 81       	ldd	r31, Z+3	; 0x03
    5a24:	e0 2d       	mov	r30, r0
    5a26:	6a 81       	ldd	r22, Y+2	; 0x02
    5a28:	c7 01       	movw	r24, r14
    5a2a:	19 95       	eicall
    5a2c:	dd 20       	and	r13, r13
    5a2e:	49 f0       	breq	.+18     	; 0x5a42 <_ZN8emstreamlsEf+0x88>
    5a30:	d7 01       	movw	r26, r14
    5a32:	ed 91       	ld	r30, X+
    5a34:	fc 91       	ld	r31, X
    5a36:	02 80       	ldd	r0, Z+2	; 0x02
    5a38:	f3 81       	ldd	r31, Z+3	; 0x03
    5a3a:	e0 2d       	mov	r30, r0
    5a3c:	6e e2       	ldi	r22, 0x2E	; 46
    5a3e:	c7 01       	movw	r24, r14
    5a40:	19 95       	eicall
    5a42:	8e 01       	movw	r16, r28
    5a44:	0d 5f       	subi	r16, 0xFD	; 253
    5a46:	1f 4f       	sbci	r17, 0xFF	; 255
    5a48:	ce 01       	movw	r24, r28
    5a4a:	8d 0d       	add	r24, r13
    5a4c:	91 1d       	adc	r25, r1
    5a4e:	fc 01       	movw	r30, r24
    5a50:	33 96       	adiw	r30, 0x03	; 3
    5a52:	6f 01       	movw	r12, r30
    5a54:	0c 15       	cp	r16, r12
    5a56:	1d 05       	cpc	r17, r13
    5a58:	99 f0       	breq	.+38     	; 0x5a80 <_ZN8emstreamlsEf+0xc6>
    5a5a:	d8 01       	movw	r26, r16
    5a5c:	6c 91       	ld	r22, X
    5a5e:	61 11       	cpse	r22, r1
    5a60:	1c c0       	rjmp	.+56     	; 0x5a9a <_ZN8emstreamlsEf+0xe0>
    5a62:	0e c0       	rjmp	.+28     	; 0x5a80 <_ZN8emstreamlsEf+0xc6>
    5a64:	d7 01       	movw	r26, r14
    5a66:	ed 91       	ld	r30, X+
    5a68:	fc 91       	ld	r31, X
    5a6a:	02 80       	ldd	r0, Z+2	; 0x02
    5a6c:	f3 81       	ldd	r31, Z+3	; 0x03
    5a6e:	e0 2d       	mov	r30, r0
    5a70:	6b e2       	ldi	r22, 0x2B	; 43
    5a72:	c7 01       	movw	r24, r14
    5a74:	19 95       	eicall
    5a76:	b5 01       	movw	r22, r10
    5a78:	c7 01       	movw	r24, r14
    5a7a:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <_ZN8emstreamlsEi>
    5a7e:	18 c0       	rjmp	.+48     	; 0x5ab0 <_ZN8emstreamlsEf+0xf6>
    5a80:	d7 01       	movw	r26, r14
    5a82:	ed 91       	ld	r30, X+
    5a84:	fc 91       	ld	r31, X
    5a86:	02 80       	ldd	r0, Z+2	; 0x02
    5a88:	f3 81       	ldd	r31, Z+3	; 0x03
    5a8a:	e0 2d       	mov	r30, r0
    5a8c:	65 e4       	ldi	r22, 0x45	; 69
    5a8e:	c7 01       	movw	r24, r14
    5a90:	19 95       	eicall
    5a92:	1a 14       	cp	r1, r10
    5a94:	1b 04       	cpc	r1, r11
    5a96:	34 f3       	brlt	.-52     	; 0x5a64 <_ZN8emstreamlsEf+0xaa>
    5a98:	ee cf       	rjmp	.-36     	; 0x5a76 <_ZN8emstreamlsEf+0xbc>
    5a9a:	0f 5f       	subi	r16, 0xFF	; 255
    5a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    5a9e:	d7 01       	movw	r26, r14
    5aa0:	ed 91       	ld	r30, X+
    5aa2:	fc 91       	ld	r31, X
    5aa4:	02 80       	ldd	r0, Z+2	; 0x02
    5aa6:	f3 81       	ldd	r31, Z+3	; 0x03
    5aa8:	e0 2d       	mov	r30, r0
    5aaa:	c7 01       	movw	r24, r14
    5aac:	19 95       	eicall
    5aae:	d2 cf       	rjmp	.-92     	; 0x5a54 <_ZN8emstreamlsEf+0x9a>
    5ab0:	c7 01       	movw	r24, r14
    5ab2:	64 96       	adiw	r28, 0x14	; 20
    5ab4:	cd bf       	out	0x3d, r28	; 61
    5ab6:	de bf       	out	0x3e, r29	; 62
    5ab8:	df 91       	pop	r29
    5aba:	cf 91       	pop	r28
    5abc:	1f 91       	pop	r17
    5abe:	0f 91       	pop	r16
    5ac0:	ff 90       	pop	r15
    5ac2:	ef 90       	pop	r14
    5ac4:	df 90       	pop	r13
    5ac6:	cf 90       	pop	r12
    5ac8:	bf 90       	pop	r11
    5aca:	af 90       	pop	r10
    5acc:	08 95       	ret

00005ace <_ZN8emstreamlsEd>:
    5ace:	af 92       	push	r10
    5ad0:	bf 92       	push	r11
    5ad2:	cf 92       	push	r12
    5ad4:	df 92       	push	r13
    5ad6:	ef 92       	push	r14
    5ad8:	ff 92       	push	r15
    5ada:	0f 93       	push	r16
    5adc:	1f 93       	push	r17
    5ade:	cf 93       	push	r28
    5ae0:	df 93       	push	r29
    5ae2:	cd b7       	in	r28, 0x3d	; 61
    5ae4:	de b7       	in	r29, 0x3e	; 62
    5ae6:	64 97       	sbiw	r28, 0x14	; 20
    5ae8:	cd bf       	out	0x3d, r28	; 61
    5aea:	de bf       	out	0x3e, r29	; 62
    5aec:	7c 01       	movw	r14, r24
    5aee:	cb 01       	movw	r24, r22
    5af0:	ba 01       	movw	r22, r20
    5af2:	10 91 06 20 	lds	r17, 0x2006	; 0x802006 <bts_glob_prec>
    5af6:	00 e1       	ldi	r16, 0x10	; 16
    5af8:	21 2f       	mov	r18, r17
    5afa:	ae 01       	movw	r20, r28
    5afc:	4f 5f       	subi	r20, 0xFF	; 255
    5afe:	5f 4f       	sbci	r21, 0xFF	; 255
    5b00:	0e 94 99 34 	call	0x6932	; 0x6932 <__ftoa_engine>
    5b04:	5c 01       	movw	r10, r24
    5b06:	89 81       	ldd	r24, Y+1	; 0x01
    5b08:	83 ff       	sbrs	r24, 3
    5b0a:	06 c0       	rjmp	.+12     	; 0x5b18 <_ZN8emstreamlsEd+0x4a>
    5b0c:	6a ed       	ldi	r22, 0xDA	; 218
    5b0e:	70 e2       	ldi	r23, 0x20	; 32
    5b10:	c7 01       	movw	r24, r14
    5b12:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    5b16:	50 c0       	rjmp	.+160    	; 0x5bb8 <_ZN8emstreamlsEd+0xea>
    5b18:	80 ff       	sbrs	r24, 0
    5b1a:	09 c0       	rjmp	.+18     	; 0x5b2e <_ZN8emstreamlsEd+0x60>
    5b1c:	d7 01       	movw	r26, r14
    5b1e:	ed 91       	ld	r30, X+
    5b20:	fc 91       	ld	r31, X
    5b22:	02 80       	ldd	r0, Z+2	; 0x02
    5b24:	f3 81       	ldd	r31, Z+3	; 0x03
    5b26:	e0 2d       	mov	r30, r0
    5b28:	6d e2       	ldi	r22, 0x2D	; 45
    5b2a:	c7 01       	movw	r24, r14
    5b2c:	19 95       	eicall
    5b2e:	d7 01       	movw	r26, r14
    5b30:	ed 91       	ld	r30, X+
    5b32:	fc 91       	ld	r31, X
    5b34:	02 80       	ldd	r0, Z+2	; 0x02
    5b36:	f3 81       	ldd	r31, Z+3	; 0x03
    5b38:	e0 2d       	mov	r30, r0
    5b3a:	6a 81       	ldd	r22, Y+2	; 0x02
    5b3c:	c7 01       	movw	r24, r14
    5b3e:	19 95       	eicall
    5b40:	11 23       	and	r17, r17
    5b42:	49 f0       	breq	.+18     	; 0x5b56 <_ZN8emstreamlsEd+0x88>
    5b44:	d7 01       	movw	r26, r14
    5b46:	ed 91       	ld	r30, X+
    5b48:	fc 91       	ld	r31, X
    5b4a:	02 80       	ldd	r0, Z+2	; 0x02
    5b4c:	f3 81       	ldd	r31, Z+3	; 0x03
    5b4e:	e0 2d       	mov	r30, r0
    5b50:	6e e2       	ldi	r22, 0x2E	; 46
    5b52:	c7 01       	movw	r24, r14
    5b54:	19 95       	eicall
    5b56:	6e 01       	movw	r12, r28
    5b58:	b3 e0       	ldi	r27, 0x03	; 3
    5b5a:	cb 0e       	add	r12, r27
    5b5c:	d1 1c       	adc	r13, r1
    5b5e:	f6 01       	movw	r30, r12
    5b60:	61 91       	ld	r22, Z+
    5b62:	6f 01       	movw	r12, r30
    5b64:	d7 01       	movw	r26, r14
    5b66:	ed 91       	ld	r30, X+
    5b68:	fc 91       	ld	r31, X
    5b6a:	02 80       	ldd	r0, Z+2	; 0x02
    5b6c:	f3 81       	ldd	r31, Z+3	; 0x03
    5b6e:	e0 2d       	mov	r30, r0
    5b70:	c7 01       	movw	r24, r14
    5b72:	19 95       	eicall
    5b74:	11 50       	subi	r17, 0x01	; 1
    5b76:	99 f0       	breq	.+38     	; 0x5b9e <_ZN8emstreamlsEd+0xd0>
    5b78:	f6 01       	movw	r30, r12
    5b7a:	80 81       	ld	r24, Z
    5b7c:	81 11       	cpse	r24, r1
    5b7e:	ef cf       	rjmp	.-34     	; 0x5b5e <_ZN8emstreamlsEd+0x90>
    5b80:	0e c0       	rjmp	.+28     	; 0x5b9e <_ZN8emstreamlsEd+0xd0>
    5b82:	d7 01       	movw	r26, r14
    5b84:	ed 91       	ld	r30, X+
    5b86:	fc 91       	ld	r31, X
    5b88:	02 80       	ldd	r0, Z+2	; 0x02
    5b8a:	f3 81       	ldd	r31, Z+3	; 0x03
    5b8c:	e0 2d       	mov	r30, r0
    5b8e:	6b e2       	ldi	r22, 0x2B	; 43
    5b90:	c7 01       	movw	r24, r14
    5b92:	19 95       	eicall
    5b94:	b5 01       	movw	r22, r10
    5b96:	c7 01       	movw	r24, r14
    5b98:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <_ZN8emstreamlsEi>
    5b9c:	0d c0       	rjmp	.+26     	; 0x5bb8 <_ZN8emstreamlsEd+0xea>
    5b9e:	d7 01       	movw	r26, r14
    5ba0:	ed 91       	ld	r30, X+
    5ba2:	fc 91       	ld	r31, X
    5ba4:	02 80       	ldd	r0, Z+2	; 0x02
    5ba6:	f3 81       	ldd	r31, Z+3	; 0x03
    5ba8:	e0 2d       	mov	r30, r0
    5baa:	65 e6       	ldi	r22, 0x65	; 101
    5bac:	c7 01       	movw	r24, r14
    5bae:	19 95       	eicall
    5bb0:	1a 14       	cp	r1, r10
    5bb2:	1b 04       	cpc	r1, r11
    5bb4:	34 f3       	brlt	.-52     	; 0x5b82 <_ZN8emstreamlsEd+0xb4>
    5bb6:	ee cf       	rjmp	.-36     	; 0x5b94 <_ZN8emstreamlsEd+0xc6>
    5bb8:	c7 01       	movw	r24, r14
    5bba:	64 96       	adiw	r28, 0x14	; 20
    5bbc:	cd bf       	out	0x3d, r28	; 61
    5bbe:	de bf       	out	0x3e, r29	; 62
    5bc0:	df 91       	pop	r29
    5bc2:	cf 91       	pop	r28
    5bc4:	1f 91       	pop	r17
    5bc6:	0f 91       	pop	r16
    5bc8:	ff 90       	pop	r15
    5bca:	ef 90       	pop	r14
    5bcc:	df 90       	pop	r13
    5bce:	cf 90       	pop	r12
    5bd0:	bf 90       	pop	r11
    5bd2:	af 90       	pop	r10
    5bd4:	08 95       	ret

00005bd6 <_ZN8emstreamlsEi>:
    5bd6:	0f 93       	push	r16
    5bd8:	1f 93       	push	r17
    5bda:	cf 93       	push	r28
    5bdc:	df 93       	push	r29
    5bde:	cd b7       	in	r28, 0x3d	; 61
    5be0:	de b7       	in	r29, 0x3e	; 62
    5be2:	61 97       	sbiw	r28, 0x11	; 17
    5be4:	cd bf       	out	0x3d, r28	; 61
    5be6:	de bf       	out	0x3e, r29	; 62
    5be8:	8c 01       	movw	r16, r24
    5bea:	9b 01       	movw	r18, r22
    5bec:	fc 01       	movw	r30, r24
    5bee:	92 81       	ldd	r25, Z+2	; 0x02
    5bf0:	9a 30       	cpi	r25, 0x0A	; 10
    5bf2:	21 f0       	breq	.+8      	; 0x5bfc <_ZN8emstreamlsEi+0x26>
    5bf4:	c8 01       	movw	r24, r16
    5bf6:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <_ZN8emstreamlsEj>
    5bfa:	0d c0       	rjmp	.+26     	; 0x5c16 <_ZN8emstreamlsEi+0x40>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    5bfc:	4a e0       	ldi	r20, 0x0A	; 10
    5bfe:	be 01       	movw	r22, r28
    5c00:	6f 5f       	subi	r22, 0xFF	; 255
    5c02:	7f 4f       	sbci	r23, 0xFF	; 255
    5c04:	c9 01       	movw	r24, r18
    5c06:	0e 94 90 35 	call	0x6b20	; 0x6b20 <__itoa_ncheck>
    5c0a:	be 01       	movw	r22, r28
    5c0c:	6f 5f       	subi	r22, 0xFF	; 255
    5c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c10:	c8 01       	movw	r24, r16
    5c12:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    5c16:	c8 01       	movw	r24, r16
    5c18:	61 96       	adiw	r28, 0x11	; 17
    5c1a:	cd bf       	out	0x3d, r28	; 61
    5c1c:	de bf       	out	0x3e, r29	; 62
    5c1e:	df 91       	pop	r29
    5c20:	cf 91       	pop	r28
    5c22:	1f 91       	pop	r17
    5c24:	0f 91       	pop	r16
    5c26:	08 95       	ret

00005c28 <_ZN8emstreamlsEl>:
    5c28:	0f 93       	push	r16
    5c2a:	1f 93       	push	r17
    5c2c:	cf 93       	push	r28
    5c2e:	df 93       	push	r29
    5c30:	cd b7       	in	r28, 0x3d	; 61
    5c32:	de b7       	in	r29, 0x3e	; 62
    5c34:	a2 97       	sbiw	r28, 0x22	; 34
    5c36:	cd bf       	out	0x3d, r28	; 61
    5c38:	de bf       	out	0x3e, r29	; 62
    5c3a:	8c 01       	movw	r16, r24
    5c3c:	cb 01       	movw	r24, r22
    5c3e:	ba 01       	movw	r22, r20
    5c40:	f8 01       	movw	r30, r16
    5c42:	22 81       	ldd	r18, Z+2	; 0x02
    5c44:	2a 30       	cpi	r18, 0x0A	; 10
    5c46:	31 f0       	breq	.+12     	; 0x5c54 <_ZN8emstreamlsEl+0x2c>
    5c48:	ab 01       	movw	r20, r22
    5c4a:	bc 01       	movw	r22, r24
    5c4c:	c8 01       	movw	r24, r16
    5c4e:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <_ZN8emstreamlsEm>
    5c52:	0c c0       	rjmp	.+24     	; 0x5c6c <_ZN8emstreamlsEl+0x44>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    5c54:	2a e0       	ldi	r18, 0x0A	; 10
    5c56:	ae 01       	movw	r20, r28
    5c58:	4f 5f       	subi	r20, 0xFF	; 255
    5c5a:	5f 4f       	sbci	r21, 0xFF	; 255
    5c5c:	0e 94 9b 35 	call	0x6b36	; 0x6b36 <__ltoa_ncheck>
    5c60:	be 01       	movw	r22, r28
    5c62:	6f 5f       	subi	r22, 0xFF	; 255
    5c64:	7f 4f       	sbci	r23, 0xFF	; 255
    5c66:	c8 01       	movw	r24, r16
    5c68:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    5c6c:	c8 01       	movw	r24, r16
    5c6e:	a2 96       	adiw	r28, 0x22	; 34
    5c70:	cd bf       	out	0x3d, r28	; 61
    5c72:	de bf       	out	0x3e, r29	; 62
    5c74:	df 91       	pop	r29
    5c76:	cf 91       	pop	r28
    5c78:	1f 91       	pop	r17
    5c7a:	0f 91       	pop	r16
    5c7c:	08 95       	ret

00005c7e <_ZN8emstreamlsEj>:
    5c7e:	ff 92       	push	r15
    5c80:	0f 93       	push	r16
    5c82:	1f 93       	push	r17
    5c84:	cf 93       	push	r28
    5c86:	df 93       	push	r29
    5c88:	cd b7       	in	r28, 0x3d	; 61
    5c8a:	de b7       	in	r29, 0x3e	; 62
    5c8c:	61 97       	sbiw	r28, 0x11	; 17
    5c8e:	cd bf       	out	0x3d, r28	; 61
    5c90:	de bf       	out	0x3e, r29	; 62
    5c92:	8c 01       	movw	r16, r24
    5c94:	f6 2e       	mov	r15, r22
    5c96:	97 2f       	mov	r25, r23
    5c98:	f8 01       	movw	r30, r16
    5c9a:	42 81       	ldd	r20, Z+2	; 0x02
    5c9c:	40 31       	cpi	r20, 0x10	; 16
    5c9e:	21 f0       	breq	.+8      	; 0x5ca8 <_ZN8emstreamlsEj+0x2a>
    5ca0:	48 30       	cpi	r20, 0x08	; 8
    5ca2:	11 f0       	breq	.+4      	; 0x5ca8 <_ZN8emstreamlsEj+0x2a>
    5ca4:	42 30       	cpi	r20, 0x02	; 2
    5ca6:	41 f4       	brne	.+16     	; 0x5cb8 <_ZN8emstreamlsEj+0x3a>
    5ca8:	69 2f       	mov	r22, r25
    5caa:	c8 01       	movw	r24, r16
    5cac:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <_ZN8emstreamlsEh>
    5cb0:	6f 2d       	mov	r22, r15
    5cb2:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <_ZN8emstreamlsEh>
    5cb6:	0d c0       	rjmp	.+26     	; 0x5cd2 <_ZN8emstreamlsEj+0x54>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    5cb8:	50 e0       	ldi	r21, 0x00	; 0
    5cba:	be 01       	movw	r22, r28
    5cbc:	6f 5f       	subi	r22, 0xFF	; 255
    5cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    5cc0:	8f 2d       	mov	r24, r15
    5cc2:	0e 94 d7 35 	call	0x6bae	; 0x6bae <utoa>
    5cc6:	be 01       	movw	r22, r28
    5cc8:	6f 5f       	subi	r22, 0xFF	; 255
    5cca:	7f 4f       	sbci	r23, 0xFF	; 255
    5ccc:	c8 01       	movw	r24, r16
    5cce:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    5cd2:	c8 01       	movw	r24, r16
    5cd4:	61 96       	adiw	r28, 0x11	; 17
    5cd6:	cd bf       	out	0x3d, r28	; 61
    5cd8:	de bf       	out	0x3e, r29	; 62
    5cda:	df 91       	pop	r29
    5cdc:	cf 91       	pop	r28
    5cde:	1f 91       	pop	r17
    5ce0:	0f 91       	pop	r16
    5ce2:	ff 90       	pop	r15
    5ce4:	08 95       	ret

00005ce6 <_ZN8emstreamlsEm>:
    5ce6:	df 92       	push	r13
    5ce8:	ef 92       	push	r14
    5cea:	ff 92       	push	r15
    5cec:	0f 93       	push	r16
    5cee:	1f 93       	push	r17
    5cf0:	cf 93       	push	r28
    5cf2:	df 93       	push	r29
    5cf4:	cd b7       	in	r28, 0x3d	; 61
    5cf6:	de b7       	in	r29, 0x3e	; 62
    5cf8:	a1 97       	sbiw	r28, 0x21	; 33
    5cfa:	cd bf       	out	0x3d, r28	; 61
    5cfc:	de bf       	out	0x3e, r29	; 62
    5cfe:	8c 01       	movw	r16, r24
    5d00:	d4 2e       	mov	r13, r20
    5d02:	e5 2e       	mov	r14, r21
    5d04:	f6 2e       	mov	r15, r22
    5d06:	97 2f       	mov	r25, r23
    5d08:	f8 01       	movw	r30, r16
    5d0a:	22 81       	ldd	r18, Z+2	; 0x02
    5d0c:	20 31       	cpi	r18, 0x10	; 16
    5d0e:	21 f0       	breq	.+8      	; 0x5d18 <_ZN8emstreamlsEm+0x32>
    5d10:	28 30       	cpi	r18, 0x08	; 8
    5d12:	11 f0       	breq	.+4      	; 0x5d18 <_ZN8emstreamlsEm+0x32>
    5d14:	22 30       	cpi	r18, 0x02	; 2
    5d16:	71 f4       	brne	.+28     	; 0x5d34 <_ZN8emstreamlsEm+0x4e>
    5d18:	69 2f       	mov	r22, r25
    5d1a:	c8 01       	movw	r24, r16
    5d1c:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <_ZN8emstreamlsEh>
    5d20:	6f 2d       	mov	r22, r15
    5d22:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <_ZN8emstreamlsEh>
    5d26:	6e 2d       	mov	r22, r14
    5d28:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <_ZN8emstreamlsEh>
    5d2c:	6d 2d       	mov	r22, r13
    5d2e:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <_ZN8emstreamlsEh>
    5d32:	0f c0       	rjmp	.+30     	; 0x5d52 <_ZN8emstreamlsEm+0x6c>
extern __inline__ __ATTR_GNU_INLINE__
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ultoa (unsigned long, char *, int);
	return __ultoa (__val, __s, __radix);
    5d34:	30 e0       	ldi	r19, 0x00	; 0
    5d36:	ae 01       	movw	r20, r28
    5d38:	4f 5f       	subi	r20, 0xFF	; 255
    5d3a:	5f 4f       	sbci	r21, 0xFF	; 255
    5d3c:	6d 2d       	mov	r22, r13
    5d3e:	7e 2d       	mov	r23, r14
    5d40:	8f 2d       	mov	r24, r15
    5d42:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <ultoa>
    5d46:	be 01       	movw	r22, r28
    5d48:	6f 5f       	subi	r22, 0xFF	; 255
    5d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d4c:	c8 01       	movw	r24, r16
    5d4e:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    5d52:	c8 01       	movw	r24, r16
    5d54:	a1 96       	adiw	r28, 0x21	; 33
    5d56:	cd bf       	out	0x3d, r28	; 61
    5d58:	de bf       	out	0x3e, r29	; 62
    5d5a:	df 91       	pop	r29
    5d5c:	cf 91       	pop	r28
    5d5e:	1f 91       	pop	r17
    5d60:	0f 91       	pop	r16
    5d62:	ff 90       	pop	r15
    5d64:	ef 90       	pop	r14
    5d66:	df 90       	pop	r13
    5d68:	08 95       	ret

00005d6a <_ZN8emstreamlsEh>:
    5d6a:	cf 92       	push	r12
    5d6c:	df 92       	push	r13
    5d6e:	ef 92       	push	r14
    5d70:	ff 92       	push	r15
    5d72:	0f 93       	push	r16
    5d74:	1f 93       	push	r17
    5d76:	cf 93       	push	r28
    5d78:	df 93       	push	r29
    5d7a:	cd b7       	in	r28, 0x3d	; 61
    5d7c:	de b7       	in	r29, 0x3e	; 62
    5d7e:	29 97       	sbiw	r28, 0x09	; 9
    5d80:	cd bf       	out	0x3d, r28	; 61
    5d82:	de bf       	out	0x3e, r29	; 62
    5d84:	8c 01       	movw	r16, r24
    5d86:	e6 2e       	mov	r14, r22
    5d88:	dc 01       	movw	r26, r24
    5d8a:	13 96       	adiw	r26, 0x03	; 3
    5d8c:	8c 91       	ld	r24, X
    5d8e:	13 97       	sbiw	r26, 0x03	; 3
    5d90:	88 23       	and	r24, r24
    5d92:	41 f0       	breq	.+16     	; 0x5da4 <_ZN8emstreamlsEh+0x3a>
    5d94:	ed 91       	ld	r30, X+
    5d96:	fc 91       	ld	r31, X
    5d98:	02 80       	ldd	r0, Z+2	; 0x02
    5d9a:	f3 81       	ldd	r31, Z+3	; 0x03
    5d9c:	e0 2d       	mov	r30, r0
    5d9e:	c8 01       	movw	r24, r16
    5da0:	19 95       	eicall
    5da2:	56 c0       	rjmp	.+172    	; 0x5e50 <_ZN8emstreamlsEh+0xe6>
    5da4:	f8 01       	movw	r30, r16
    5da6:	42 81       	ldd	r20, Z+2	; 0x02
    5da8:	42 30       	cpi	r20, 0x02	; 2
    5daa:	19 f5       	brne	.+70     	; 0x5df2 <_ZN8emstreamlsEh+0x88>
    5dac:	68 94       	set
    5dae:	cc 24       	eor	r12, r12
    5db0:	c3 f8       	bld	r12, 3
    5db2:	d1 2c       	mov	r13, r1
    5db4:	68 94       	set
    5db6:	ff 24       	eor	r15, r15
    5db8:	f7 f8       	bld	r15, 7
    5dba:	8e 2d       	mov	r24, r14
    5dbc:	8f 21       	and	r24, r15
    5dbe:	51 f0       	breq	.+20     	; 0x5dd4 <_ZN8emstreamlsEh+0x6a>
    5dc0:	d8 01       	movw	r26, r16
    5dc2:	ed 91       	ld	r30, X+
    5dc4:	fc 91       	ld	r31, X
    5dc6:	02 80       	ldd	r0, Z+2	; 0x02
    5dc8:	f3 81       	ldd	r31, Z+3	; 0x03
    5dca:	e0 2d       	mov	r30, r0
    5dcc:	61 e3       	ldi	r22, 0x31	; 49
    5dce:	c8 01       	movw	r24, r16
    5dd0:	19 95       	eicall
    5dd2:	09 c0       	rjmp	.+18     	; 0x5de6 <_ZN8emstreamlsEh+0x7c>
    5dd4:	d8 01       	movw	r26, r16
    5dd6:	ed 91       	ld	r30, X+
    5dd8:	fc 91       	ld	r31, X
    5dda:	02 80       	ldd	r0, Z+2	; 0x02
    5ddc:	f3 81       	ldd	r31, Z+3	; 0x03
    5dde:	e0 2d       	mov	r30, r0
    5de0:	60 e3       	ldi	r22, 0x30	; 48
    5de2:	c8 01       	movw	r24, r16
    5de4:	19 95       	eicall
    5de6:	f6 94       	lsr	r15
    5de8:	b1 e0       	ldi	r27, 0x01	; 1
    5dea:	cb 1a       	sub	r12, r27
    5dec:	d1 08       	sbc	r13, r1
    5dee:	29 f7       	brne	.-54     	; 0x5dba <_ZN8emstreamlsEh+0x50>
    5df0:	2f c0       	rjmp	.+94     	; 0x5e50 <_ZN8emstreamlsEh+0xe6>
    5df2:	40 31       	cpi	r20, 0x10	; 16
    5df4:	f9 f4       	brne	.+62     	; 0x5e34 <_ZN8emstreamlsEh+0xca>
    5df6:	62 95       	swap	r22
    5df8:	6f 70       	andi	r22, 0x0F	; 15
    5dfa:	01 90       	ld	r0, Z+
    5dfc:	f0 81       	ld	r31, Z
    5dfe:	e0 2d       	mov	r30, r0
    5e00:	02 80       	ldd	r0, Z+2	; 0x02
    5e02:	f3 81       	ldd	r31, Z+3	; 0x03
    5e04:	e0 2d       	mov	r30, r0
    5e06:	6a 30       	cpi	r22, 0x0A	; 10
    5e08:	10 f0       	brcs	.+4      	; 0x5e0e <_ZN8emstreamlsEh+0xa4>
    5e0a:	69 5c       	subi	r22, 0xC9	; 201
    5e0c:	01 c0       	rjmp	.+2      	; 0x5e10 <_ZN8emstreamlsEh+0xa6>
    5e0e:	60 5d       	subi	r22, 0xD0	; 208
    5e10:	c8 01       	movw	r24, r16
    5e12:	19 95       	eicall
    5e14:	6e 2d       	mov	r22, r14
    5e16:	6f 70       	andi	r22, 0x0F	; 15
    5e18:	d8 01       	movw	r26, r16
    5e1a:	ed 91       	ld	r30, X+
    5e1c:	fc 91       	ld	r31, X
    5e1e:	02 80       	ldd	r0, Z+2	; 0x02
    5e20:	f3 81       	ldd	r31, Z+3	; 0x03
    5e22:	e0 2d       	mov	r30, r0
    5e24:	6a 30       	cpi	r22, 0x0A	; 10
    5e26:	10 f0       	brcs	.+4      	; 0x5e2c <_ZN8emstreamlsEh+0xc2>
    5e28:	69 5c       	subi	r22, 0xC9	; 201
    5e2a:	01 c0       	rjmp	.+2      	; 0x5e2e <_ZN8emstreamlsEh+0xc4>
    5e2c:	60 5d       	subi	r22, 0xD0	; 208
    5e2e:	c8 01       	movw	r24, r16
    5e30:	19 95       	eicall
    5e32:	0e c0       	rjmp	.+28     	; 0x5e50 <_ZN8emstreamlsEh+0xe6>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    5e34:	50 e0       	ldi	r21, 0x00	; 0
    5e36:	be 01       	movw	r22, r28
    5e38:	6f 5f       	subi	r22, 0xFF	; 255
    5e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    5e3c:	8e 2d       	mov	r24, r14
    5e3e:	90 e0       	ldi	r25, 0x00	; 0
    5e40:	0e 94 d7 35 	call	0x6bae	; 0x6bae <utoa>
    5e44:	be 01       	movw	r22, r28
    5e46:	6f 5f       	subi	r22, 0xFF	; 255
    5e48:	7f 4f       	sbci	r23, 0xFF	; 255
    5e4a:	c8 01       	movw	r24, r16
    5e4c:	0e 94 5f 2c 	call	0x58be	; 0x58be <_ZN8emstream4putsEPKc>
    5e50:	c8 01       	movw	r24, r16
    5e52:	29 96       	adiw	r28, 0x09	; 9
    5e54:	cd bf       	out	0x3d, r28	; 61
    5e56:	de bf       	out	0x3e, r29	; 62
    5e58:	df 91       	pop	r29
    5e5a:	cf 91       	pop	r28
    5e5c:	1f 91       	pop	r17
    5e5e:	0f 91       	pop	r16
    5e60:	ff 90       	pop	r15
    5e62:	ef 90       	pop	r14
    5e64:	df 90       	pop	r13
    5e66:	cf 90       	pop	r12
    5e68:	08 95       	ret

00005e6a <_ZN5rs2327putcharEc>:
    5e6a:	dc 01       	movw	r26, r24
    5e6c:	50 96       	adiw	r26, 0x10	; 16
    5e6e:	ed 91       	ld	r30, X+
    5e70:	fc 91       	ld	r31, X
    5e72:	51 97       	sbiw	r26, 0x11	; 17
    5e74:	80 81       	ld	r24, Z
    5e76:	54 96       	adiw	r26, 0x14	; 20
    5e78:	4c 91       	ld	r20, X
    5e7a:	54 97       	sbiw	r26, 0x14	; 20
    5e7c:	84 23       	and	r24, r20
    5e7e:	29 f0       	breq	.+10     	; 0x5e8a <_ZN5rs2327putcharEc+0x20>
    5e80:	09 c0       	rjmp	.+18     	; 0x5e94 <_ZN5rs2327putcharEc+0x2a>
    5e82:	21 50       	subi	r18, 0x01	; 1
    5e84:	31 09       	sbc	r19, r1
    5e86:	19 f4       	brne	.+6      	; 0x5e8e <_ZN5rs2327putcharEc+0x24>
    5e88:	12 c0       	rjmp	.+36     	; 0x5eae <_ZN5rs2327putcharEc+0x44>
    5e8a:	21 e2       	ldi	r18, 0x21	; 33
    5e8c:	3e e4       	ldi	r19, 0x4E	; 78
    5e8e:	90 81       	ld	r25, Z
    5e90:	94 23       	and	r25, r20
    5e92:	b9 f3       	breq	.-18     	; 0x5e82 <_ZN5rs2327putcharEc+0x18>
    5e94:	90 81       	ld	r25, Z
    5e96:	56 96       	adiw	r26, 0x16	; 22
    5e98:	8c 91       	ld	r24, X
    5e9a:	56 97       	sbiw	r26, 0x16	; 22
    5e9c:	89 2b       	or	r24, r25
    5e9e:	80 83       	st	Z, r24
    5ea0:	1e 96       	adiw	r26, 0x0e	; 14
    5ea2:	ed 91       	ld	r30, X+
    5ea4:	fc 91       	ld	r31, X
    5ea6:	1f 97       	sbiw	r26, 0x0f	; 15
    5ea8:	60 83       	st	Z, r22
    5eaa:	81 e0       	ldi	r24, 0x01	; 1
    5eac:	08 95       	ret
    5eae:	80 e0       	ldi	r24, 0x00	; 0
    5eb0:	08 95       	ret

00005eb2 <_ZN5rs2327getcharEv>:
    5eb2:	cf 93       	push	r28
    5eb4:	df 93       	push	r29
    5eb6:	fc 01       	movw	r30, r24
    5eb8:	c1 8d       	ldd	r28, Z+25	; 0x19
    5eba:	d2 8d       	ldd	r29, Z+26	; 0x1a
    5ebc:	28 81       	ld	r18, Y
    5ebe:	39 81       	ldd	r19, Y+1	; 0x01
    5ec0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    5ec2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    5ec4:	4d 91       	ld	r20, X+
    5ec6:	5c 91       	ld	r21, X
    5ec8:	24 17       	cp	r18, r20
    5eca:	35 07       	cpc	r19, r21
    5ecc:	e9 f3       	breq	.-6      	; 0x5ec8 <_ZN5rs2327getcharEv+0x16>
    5ece:	a7 89       	ldd	r26, Z+23	; 0x17
    5ed0:	b0 8d       	ldd	r27, Z+24	; 0x18
    5ed2:	0d 90       	ld	r0, X+
    5ed4:	bc 91       	ld	r27, X
    5ed6:	a0 2d       	mov	r26, r0
    5ed8:	a2 0f       	add	r26, r18
    5eda:	b3 1f       	adc	r27, r19
    5edc:	8c 91       	ld	r24, X
    5ede:	2f 5f       	subi	r18, 0xFF	; 255
    5ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    5ee2:	28 83       	st	Y, r18
    5ee4:	39 83       	std	Y+1, r19	; 0x01
    5ee6:	24 36       	cpi	r18, 0x64	; 100
    5ee8:	31 05       	cpc	r19, r1
    5eea:	28 f0       	brcs	.+10     	; 0x5ef6 <_ZN5rs2327getcharEv+0x44>
    5eec:	01 8c       	ldd	r0, Z+25	; 0x19
    5eee:	f2 8d       	ldd	r31, Z+26	; 0x1a
    5ef0:	e0 2d       	mov	r30, r0
    5ef2:	10 82       	st	Z, r1
    5ef4:	11 82       	std	Z+1, r1	; 0x01
    5ef6:	90 e0       	ldi	r25, 0x00	; 0
    5ef8:	df 91       	pop	r29
    5efa:	cf 91       	pop	r28
    5efc:	08 95       	ret

00005efe <_ZN5rs23214check_for_charEv>:
    5efe:	cf 93       	push	r28
    5f00:	df 93       	push	r29
    5f02:	ec 01       	movw	r28, r24
    5f04:	a9 8d       	ldd	r26, Y+25	; 0x19
    5f06:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5f08:	eb 8d       	ldd	r30, Y+27	; 0x1b
    5f0a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    5f0c:	81 e0       	ldi	r24, 0x01	; 1
    5f0e:	4d 91       	ld	r20, X+
    5f10:	5c 91       	ld	r21, X
    5f12:	20 81       	ld	r18, Z
    5f14:	31 81       	ldd	r19, Z+1	; 0x01
    5f16:	42 17       	cp	r20, r18
    5f18:	53 07       	cpc	r21, r19
    5f1a:	09 f4       	brne	.+2      	; 0x5f1e <_ZN5rs23214check_for_charEv+0x20>
    5f1c:	80 e0       	ldi	r24, 0x00	; 0
    5f1e:	df 91       	pop	r29
    5f20:	cf 91       	pop	r28
    5f22:	08 95       	ret

00005f24 <_ZN5rs23212clear_screenEv>:
    5f24:	dc 01       	movw	r26, r24
    5f26:	ed 91       	ld	r30, X+
    5f28:	fc 91       	ld	r31, X
    5f2a:	02 80       	ldd	r0, Z+2	; 0x02
    5f2c:	f3 81       	ldd	r31, Z+3	; 0x03
    5f2e:	e0 2d       	mov	r30, r0
    5f30:	6c e0       	ldi	r22, 0x0C	; 12
    5f32:	19 95       	eicall
    5f34:	08 95       	ret

00005f36 <_ZN5rs232C1EjP12USART_struct>:
    5f36:	ef 92       	push	r14
    5f38:	ff 92       	push	r15
    5f3a:	0f 93       	push	r16
    5f3c:	1f 93       	push	r17
    5f3e:	cf 93       	push	r28
    5f40:	df 93       	push	r29
    5f42:	ec 01       	movw	r28, r24
    5f44:	7b 01       	movw	r14, r22
    5f46:	8a 01       	movw	r16, r20
    5f48:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <_ZN8emstreamC1Ev>
    5f4c:	a8 01       	movw	r20, r16
    5f4e:	b7 01       	movw	r22, r14
    5f50:	ce 01       	movw	r24, r28
    5f52:	08 96       	adiw	r24, 0x08	; 8
    5f54:	0e 94 a5 2b 	call	0x574a	; 0x574a <_ZN7base232C1EjP12USART_struct>
    5f58:	84 ee       	ldi	r24, 0xE4	; 228
    5f5a:	90 e2       	ldi	r25, 0x20	; 32
    5f5c:	88 83       	st	Y, r24
    5f5e:	99 83       	std	Y+1, r25	; 0x01
    5f60:	00 3a       	cpi	r16, 0xA0	; 160
    5f62:	88 e0       	ldi	r24, 0x08	; 8
    5f64:	18 07       	cpc	r17, r24
    5f66:	69 f4       	brne	.+26     	; 0x5f82 <_ZN5rs232C1EjP12USART_struct+0x4c>
    5f68:	89 e0       	ldi	r24, 0x09	; 9
    5f6a:	92 e4       	ldi	r25, 0x42	; 66
    5f6c:	8f 8b       	std	Y+23, r24	; 0x17
    5f6e:	98 8f       	std	Y+24, r25	; 0x18
    5f70:	8d ef       	ldi	r24, 0xFD	; 253
    5f72:	91 e4       	ldi	r25, 0x41	; 65
    5f74:	89 8f       	std	Y+25, r24	; 0x19
    5f76:	9a 8f       	std	Y+26, r25	; 0x1a
    5f78:	81 ef       	ldi	r24, 0xF1	; 241
    5f7a:	91 e4       	ldi	r25, 0x41	; 65
    5f7c:	8b 8f       	std	Y+27, r24	; 0x1b
    5f7e:	9c 8f       	std	Y+28, r25	; 0x1c
    5f80:	53 c0       	rjmp	.+166    	; 0x6028 <__stack+0x29>
    5f82:	00 3b       	cpi	r16, 0xB0	; 176
    5f84:	e8 e0       	ldi	r30, 0x08	; 8
    5f86:	1e 07       	cpc	r17, r30
    5f88:	69 f4       	brne	.+26     	; 0x5fa4 <_ZN5rs232C1EjP12USART_struct+0x6e>
    5f8a:	87 e0       	ldi	r24, 0x07	; 7
    5f8c:	92 e4       	ldi	r25, 0x42	; 66
    5f8e:	8f 8b       	std	Y+23, r24	; 0x17
    5f90:	98 8f       	std	Y+24, r25	; 0x18
    5f92:	8b ef       	ldi	r24, 0xFB	; 251
    5f94:	91 e4       	ldi	r25, 0x41	; 65
    5f96:	89 8f       	std	Y+25, r24	; 0x19
    5f98:	9a 8f       	std	Y+26, r25	; 0x1a
    5f9a:	8f ee       	ldi	r24, 0xEF	; 239
    5f9c:	91 e4       	ldi	r25, 0x41	; 65
    5f9e:	8b 8f       	std	Y+27, r24	; 0x1b
    5fa0:	9c 8f       	std	Y+28, r25	; 0x1c
    5fa2:	42 c0       	rjmp	.+132    	; 0x6028 <__stack+0x29>
    5fa4:	00 3a       	cpi	r16, 0xA0	; 160
    5fa6:	f9 e0       	ldi	r31, 0x09	; 9
    5fa8:	1f 07       	cpc	r17, r31
    5faa:	69 f4       	brne	.+26     	; 0x5fc6 <_ZN5rs232C1EjP12USART_struct+0x90>
    5fac:	85 e0       	ldi	r24, 0x05	; 5
    5fae:	92 e4       	ldi	r25, 0x42	; 66
    5fb0:	8f 8b       	std	Y+23, r24	; 0x17
    5fb2:	98 8f       	std	Y+24, r25	; 0x18
    5fb4:	89 ef       	ldi	r24, 0xF9	; 249
    5fb6:	91 e4       	ldi	r25, 0x41	; 65
    5fb8:	89 8f       	std	Y+25, r24	; 0x19
    5fba:	9a 8f       	std	Y+26, r25	; 0x1a
    5fbc:	8d ee       	ldi	r24, 0xED	; 237
    5fbe:	91 e4       	ldi	r25, 0x41	; 65
    5fc0:	8b 8f       	std	Y+27, r24	; 0x1b
    5fc2:	9c 8f       	std	Y+28, r25	; 0x1c
    5fc4:	31 c0       	rjmp	.+98     	; 0x6028 <__stack+0x29>
    5fc6:	00 3b       	cpi	r16, 0xB0	; 176
    5fc8:	89 e0       	ldi	r24, 0x09	; 9
    5fca:	18 07       	cpc	r17, r24
    5fcc:	69 f4       	brne	.+26     	; 0x5fe8 <_ZN5rs232C1EjP12USART_struct+0xb2>
    5fce:	83 e0       	ldi	r24, 0x03	; 3
    5fd0:	92 e4       	ldi	r25, 0x42	; 66
    5fd2:	8f 8b       	std	Y+23, r24	; 0x17
    5fd4:	98 8f       	std	Y+24, r25	; 0x18
    5fd6:	87 ef       	ldi	r24, 0xF7	; 247
    5fd8:	91 e4       	ldi	r25, 0x41	; 65
    5fda:	89 8f       	std	Y+25, r24	; 0x19
    5fdc:	9a 8f       	std	Y+26, r25	; 0x1a
    5fde:	8b ee       	ldi	r24, 0xEB	; 235
    5fe0:	91 e4       	ldi	r25, 0x41	; 65
    5fe2:	8b 8f       	std	Y+27, r24	; 0x1b
    5fe4:	9c 8f       	std	Y+28, r25	; 0x1c
    5fe6:	20 c0       	rjmp	.+64     	; 0x6028 <__stack+0x29>
    5fe8:	00 3a       	cpi	r16, 0xA0	; 160
    5fea:	ea e0       	ldi	r30, 0x0A	; 10
    5fec:	1e 07       	cpc	r17, r30
    5fee:	69 f4       	brne	.+26     	; 0x600a <__stack+0xb>
    5ff0:	81 e0       	ldi	r24, 0x01	; 1
    5ff2:	92 e4       	ldi	r25, 0x42	; 66
    5ff4:	8f 8b       	std	Y+23, r24	; 0x17
    5ff6:	98 8f       	std	Y+24, r25	; 0x18
    5ff8:	85 ef       	ldi	r24, 0xF5	; 245
    5ffa:	91 e4       	ldi	r25, 0x41	; 65
    5ffc:	89 8f       	std	Y+25, r24	; 0x19
    5ffe:	9a 8f       	std	Y+26, r25	; 0x1a
    6000:	89 ee       	ldi	r24, 0xE9	; 233
    6002:	91 e4       	ldi	r25, 0x41	; 65
    6004:	8b 8f       	std	Y+27, r24	; 0x1b
    6006:	9c 8f       	std	Y+28, r25	; 0x1c
    6008:	0f c0       	rjmp	.+30     	; 0x6028 <__stack+0x29>
    600a:	00 3a       	cpi	r16, 0xA0	; 160
    600c:	1b 40       	sbci	r17, 0x0B	; 11
    600e:	61 f4       	brne	.+24     	; 0x6028 <__stack+0x29>
    6010:	8f ef       	ldi	r24, 0xFF	; 255
    6012:	91 e4       	ldi	r25, 0x41	; 65
    6014:	8f 8b       	std	Y+23, r24	; 0x17
    6016:	98 8f       	std	Y+24, r25	; 0x18
    6018:	83 ef       	ldi	r24, 0xF3	; 243
    601a:	91 e4       	ldi	r25, 0x41	; 65
    601c:	89 8f       	std	Y+25, r24	; 0x19
    601e:	9a 8f       	std	Y+26, r25	; 0x1a
    6020:	87 ee       	ldi	r24, 0xE7	; 231
    6022:	91 e4       	ldi	r25, 0x41	; 65
    6024:	8b 8f       	std	Y+27, r24	; 0x1b
    6026:	9c 8f       	std	Y+28, r25	; 0x1c
    6028:	0f 89       	ldd	r16, Y+23	; 0x17
    602a:	18 8d       	ldd	r17, Y+24	; 0x18
    602c:	84 e6       	ldi	r24, 0x64	; 100
    602e:	90 e0       	ldi	r25, 0x00	; 0
    6030:	0e 94 a1 2b 	call	0x5742	; 0x5742 <_Znaj>
    6034:	f8 01       	movw	r30, r16
    6036:	80 83       	st	Z, r24
    6038:	91 83       	std	Z+1, r25	; 0x01
    603a:	e9 8d       	ldd	r30, Y+25	; 0x19
    603c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    603e:	10 82       	st	Z, r1
    6040:	11 82       	std	Z+1, r1	; 0x01
    6042:	eb 8d       	ldd	r30, Y+27	; 0x1b
    6044:	fc 8d       	ldd	r31, Y+28	; 0x1c
    6046:	10 82       	st	Z, r1
    6048:	11 82       	std	Z+1, r1	; 0x01
    604a:	df 91       	pop	r29
    604c:	cf 91       	pop	r28
    604e:	1f 91       	pop	r17
    6050:	0f 91       	pop	r16
    6052:	ff 90       	pop	r15
    6054:	ef 90       	pop	r14
    6056:	08 95       	ret

00006058 <__vector_25>:
    6058:	1f 92       	push	r1
    605a:	0f 92       	push	r0
    605c:	0f b6       	in	r0, 0x3f	; 63
    605e:	0f 92       	push	r0
    6060:	11 24       	eor	r1, r1
    6062:	0b b6       	in	r0, 0x3b	; 59
    6064:	0f 92       	push	r0
    6066:	2f 93       	push	r18
    6068:	3f 93       	push	r19
    606a:	8f 93       	push	r24
    606c:	9f 93       	push	r25
    606e:	ef 93       	push	r30
    6070:	ff 93       	push	r31
    6072:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    6076:	e0 91 09 42 	lds	r30, 0x4209	; 0x804209 <rcvC0_buffer>
    607a:	f0 91 0a 42 	lds	r31, 0x420A	; 0x80420a <rcvC0_buffer+0x1>
    607e:	80 91 f1 41 	lds	r24, 0x41F1	; 0x8041f1 <rcvC0_write_index>
    6082:	90 91 f2 41 	lds	r25, 0x41F2	; 0x8041f2 <rcvC0_write_index+0x1>
    6086:	e8 0f       	add	r30, r24
    6088:	f9 1f       	adc	r31, r25
    608a:	20 83       	st	Z, r18
    608c:	80 91 f1 41 	lds	r24, 0x41F1	; 0x8041f1 <rcvC0_write_index>
    6090:	90 91 f2 41 	lds	r25, 0x41F2	; 0x8041f2 <rcvC0_write_index+0x1>
    6094:	01 96       	adiw	r24, 0x01	; 1
    6096:	84 36       	cpi	r24, 0x64	; 100
    6098:	91 05       	cpc	r25, r1
    609a:	60 f4       	brcc	.+24     	; 0x60b4 <__vector_25+0x5c>
    609c:	80 93 f1 41 	sts	0x41F1, r24	; 0x8041f1 <rcvC0_write_index>
    60a0:	90 93 f2 41 	sts	0x41F2, r25	; 0x8041f2 <rcvC0_write_index+0x1>
    60a4:	20 91 fd 41 	lds	r18, 0x41FD	; 0x8041fd <rcvC0_read_index>
    60a8:	30 91 fe 41 	lds	r19, 0x41FE	; 0x8041fe <rcvC0_read_index+0x1>
    60ac:	82 17       	cp	r24, r18
    60ae:	93 07       	cpc	r25, r19
    60b0:	f1 f4       	brne	.+60     	; 0x60ee <__vector_25+0x96>
    60b2:	0c c0       	rjmp	.+24     	; 0x60cc <__vector_25+0x74>
    60b4:	10 92 f1 41 	sts	0x41F1, r1	; 0x8041f1 <rcvC0_write_index>
    60b8:	10 92 f2 41 	sts	0x41F2, r1	; 0x8041f2 <rcvC0_write_index+0x1>
    60bc:	80 91 fd 41 	lds	r24, 0x41FD	; 0x8041fd <rcvC0_read_index>
    60c0:	90 91 fe 41 	lds	r25, 0x41FE	; 0x8041fe <rcvC0_read_index+0x1>
    60c4:	18 16       	cp	r1, r24
    60c6:	19 06       	cpc	r1, r25
    60c8:	91 f4       	brne	.+36     	; 0x60ee <__vector_25+0x96>
    60ca:	0e c0       	rjmp	.+28     	; 0x60e8 <__vector_25+0x90>
    60cc:	01 96       	adiw	r24, 0x01	; 1
    60ce:	84 36       	cpi	r24, 0x64	; 100
    60d0:	91 05       	cpc	r25, r1
    60d2:	28 f4       	brcc	.+10     	; 0x60de <__vector_25+0x86>
    60d4:	80 93 fd 41 	sts	0x41FD, r24	; 0x8041fd <rcvC0_read_index>
    60d8:	90 93 fe 41 	sts	0x41FE, r25	; 0x8041fe <rcvC0_read_index+0x1>
    60dc:	08 c0       	rjmp	.+16     	; 0x60ee <__vector_25+0x96>
    60de:	10 92 fd 41 	sts	0x41FD, r1	; 0x8041fd <rcvC0_read_index>
    60e2:	10 92 fe 41 	sts	0x41FE, r1	; 0x8041fe <rcvC0_read_index+0x1>
    60e6:	03 c0       	rjmp	.+6      	; 0x60ee <__vector_25+0x96>
    60e8:	81 e0       	ldi	r24, 0x01	; 1
    60ea:	90 e0       	ldi	r25, 0x00	; 0
    60ec:	f3 cf       	rjmp	.-26     	; 0x60d4 <__vector_25+0x7c>
    60ee:	ff 91       	pop	r31
    60f0:	ef 91       	pop	r30
    60f2:	9f 91       	pop	r25
    60f4:	8f 91       	pop	r24
    60f6:	3f 91       	pop	r19
    60f8:	2f 91       	pop	r18
    60fa:	0f 90       	pop	r0
    60fc:	0b be       	out	0x3b, r0	; 59
    60fe:	0f 90       	pop	r0
    6100:	0f be       	out	0x3f, r0	; 63
    6102:	0f 90       	pop	r0
    6104:	1f 90       	pop	r1
    6106:	18 95       	reti

00006108 <__vector_28>:
    6108:	1f 92       	push	r1
    610a:	0f 92       	push	r0
    610c:	0f b6       	in	r0, 0x3f	; 63
    610e:	0f 92       	push	r0
    6110:	11 24       	eor	r1, r1
    6112:	0b b6       	in	r0, 0x3b	; 59
    6114:	0f 92       	push	r0
    6116:	2f 93       	push	r18
    6118:	3f 93       	push	r19
    611a:	8f 93       	push	r24
    611c:	9f 93       	push	r25
    611e:	ef 93       	push	r30
    6120:	ff 93       	push	r31
    6122:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    6126:	e0 91 07 42 	lds	r30, 0x4207	; 0x804207 <rcvC1_buffer>
    612a:	f0 91 08 42 	lds	r31, 0x4208	; 0x804208 <rcvC1_buffer+0x1>
    612e:	80 91 ef 41 	lds	r24, 0x41EF	; 0x8041ef <rcvC1_write_index>
    6132:	90 91 f0 41 	lds	r25, 0x41F0	; 0x8041f0 <rcvC1_write_index+0x1>
    6136:	e8 0f       	add	r30, r24
    6138:	f9 1f       	adc	r31, r25
    613a:	20 83       	st	Z, r18
    613c:	80 91 ef 41 	lds	r24, 0x41EF	; 0x8041ef <rcvC1_write_index>
    6140:	90 91 f0 41 	lds	r25, 0x41F0	; 0x8041f0 <rcvC1_write_index+0x1>
    6144:	01 96       	adiw	r24, 0x01	; 1
    6146:	84 36       	cpi	r24, 0x64	; 100
    6148:	91 05       	cpc	r25, r1
    614a:	60 f4       	brcc	.+24     	; 0x6164 <__vector_28+0x5c>
    614c:	80 93 ef 41 	sts	0x41EF, r24	; 0x8041ef <rcvC1_write_index>
    6150:	90 93 f0 41 	sts	0x41F0, r25	; 0x8041f0 <rcvC1_write_index+0x1>
    6154:	20 91 fb 41 	lds	r18, 0x41FB	; 0x8041fb <rcvC1_read_index>
    6158:	30 91 fc 41 	lds	r19, 0x41FC	; 0x8041fc <rcvC1_read_index+0x1>
    615c:	82 17       	cp	r24, r18
    615e:	93 07       	cpc	r25, r19
    6160:	f1 f4       	brne	.+60     	; 0x619e <__vector_28+0x96>
    6162:	0c c0       	rjmp	.+24     	; 0x617c <__vector_28+0x74>
    6164:	10 92 ef 41 	sts	0x41EF, r1	; 0x8041ef <rcvC1_write_index>
    6168:	10 92 f0 41 	sts	0x41F0, r1	; 0x8041f0 <rcvC1_write_index+0x1>
    616c:	80 91 fb 41 	lds	r24, 0x41FB	; 0x8041fb <rcvC1_read_index>
    6170:	90 91 fc 41 	lds	r25, 0x41FC	; 0x8041fc <rcvC1_read_index+0x1>
    6174:	18 16       	cp	r1, r24
    6176:	19 06       	cpc	r1, r25
    6178:	91 f4       	brne	.+36     	; 0x619e <__vector_28+0x96>
    617a:	0e c0       	rjmp	.+28     	; 0x6198 <__vector_28+0x90>
    617c:	01 96       	adiw	r24, 0x01	; 1
    617e:	84 36       	cpi	r24, 0x64	; 100
    6180:	91 05       	cpc	r25, r1
    6182:	28 f4       	brcc	.+10     	; 0x618e <__vector_28+0x86>
    6184:	80 93 fb 41 	sts	0x41FB, r24	; 0x8041fb <rcvC1_read_index>
    6188:	90 93 fc 41 	sts	0x41FC, r25	; 0x8041fc <rcvC1_read_index+0x1>
    618c:	08 c0       	rjmp	.+16     	; 0x619e <__vector_28+0x96>
    618e:	10 92 fb 41 	sts	0x41FB, r1	; 0x8041fb <rcvC1_read_index>
    6192:	10 92 fc 41 	sts	0x41FC, r1	; 0x8041fc <rcvC1_read_index+0x1>
    6196:	03 c0       	rjmp	.+6      	; 0x619e <__vector_28+0x96>
    6198:	81 e0       	ldi	r24, 0x01	; 1
    619a:	90 e0       	ldi	r25, 0x00	; 0
    619c:	f3 cf       	rjmp	.-26     	; 0x6184 <__vector_28+0x7c>
    619e:	ff 91       	pop	r31
    61a0:	ef 91       	pop	r30
    61a2:	9f 91       	pop	r25
    61a4:	8f 91       	pop	r24
    61a6:	3f 91       	pop	r19
    61a8:	2f 91       	pop	r18
    61aa:	0f 90       	pop	r0
    61ac:	0b be       	out	0x3b, r0	; 59
    61ae:	0f 90       	pop	r0
    61b0:	0f be       	out	0x3f, r0	; 63
    61b2:	0f 90       	pop	r0
    61b4:	1f 90       	pop	r1
    61b6:	18 95       	reti

000061b8 <__vector_88>:
    61b8:	1f 92       	push	r1
    61ba:	0f 92       	push	r0
    61bc:	0f b6       	in	r0, 0x3f	; 63
    61be:	0f 92       	push	r0
    61c0:	11 24       	eor	r1, r1
    61c2:	0b b6       	in	r0, 0x3b	; 59
    61c4:	0f 92       	push	r0
    61c6:	2f 93       	push	r18
    61c8:	3f 93       	push	r19
    61ca:	8f 93       	push	r24
    61cc:	9f 93       	push	r25
    61ce:	ef 93       	push	r30
    61d0:	ff 93       	push	r31
    61d2:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    61d6:	e0 91 05 42 	lds	r30, 0x4205	; 0x804205 <rcvD0_buffer>
    61da:	f0 91 06 42 	lds	r31, 0x4206	; 0x804206 <rcvD0_buffer+0x1>
    61de:	80 91 f1 41 	lds	r24, 0x41F1	; 0x8041f1 <rcvC0_write_index>
    61e2:	90 91 f2 41 	lds	r25, 0x41F2	; 0x8041f2 <rcvC0_write_index+0x1>
    61e6:	e8 0f       	add	r30, r24
    61e8:	f9 1f       	adc	r31, r25
    61ea:	20 83       	st	Z, r18
    61ec:	80 91 ed 41 	lds	r24, 0x41ED	; 0x8041ed <rcvD0_write_index>
    61f0:	90 91 ee 41 	lds	r25, 0x41EE	; 0x8041ee <rcvD0_write_index+0x1>
    61f4:	01 96       	adiw	r24, 0x01	; 1
    61f6:	84 36       	cpi	r24, 0x64	; 100
    61f8:	91 05       	cpc	r25, r1
    61fa:	60 f4       	brcc	.+24     	; 0x6214 <__vector_88+0x5c>
    61fc:	80 93 ed 41 	sts	0x41ED, r24	; 0x8041ed <rcvD0_write_index>
    6200:	90 93 ee 41 	sts	0x41EE, r25	; 0x8041ee <rcvD0_write_index+0x1>
    6204:	20 91 f9 41 	lds	r18, 0x41F9	; 0x8041f9 <rcvD0_read_index>
    6208:	30 91 fa 41 	lds	r19, 0x41FA	; 0x8041fa <rcvD0_read_index+0x1>
    620c:	82 17       	cp	r24, r18
    620e:	93 07       	cpc	r25, r19
    6210:	f1 f4       	brne	.+60     	; 0x624e <__vector_88+0x96>
    6212:	0c c0       	rjmp	.+24     	; 0x622c <__vector_88+0x74>
    6214:	10 92 ed 41 	sts	0x41ED, r1	; 0x8041ed <rcvD0_write_index>
    6218:	10 92 ee 41 	sts	0x41EE, r1	; 0x8041ee <rcvD0_write_index+0x1>
    621c:	80 91 f9 41 	lds	r24, 0x41F9	; 0x8041f9 <rcvD0_read_index>
    6220:	90 91 fa 41 	lds	r25, 0x41FA	; 0x8041fa <rcvD0_read_index+0x1>
    6224:	18 16       	cp	r1, r24
    6226:	19 06       	cpc	r1, r25
    6228:	91 f4       	brne	.+36     	; 0x624e <__vector_88+0x96>
    622a:	0e c0       	rjmp	.+28     	; 0x6248 <__vector_88+0x90>
    622c:	01 96       	adiw	r24, 0x01	; 1
    622e:	84 36       	cpi	r24, 0x64	; 100
    6230:	91 05       	cpc	r25, r1
    6232:	28 f4       	brcc	.+10     	; 0x623e <__vector_88+0x86>
    6234:	80 93 f9 41 	sts	0x41F9, r24	; 0x8041f9 <rcvD0_read_index>
    6238:	90 93 fa 41 	sts	0x41FA, r25	; 0x8041fa <rcvD0_read_index+0x1>
    623c:	08 c0       	rjmp	.+16     	; 0x624e <__vector_88+0x96>
    623e:	10 92 f9 41 	sts	0x41F9, r1	; 0x8041f9 <rcvD0_read_index>
    6242:	10 92 fa 41 	sts	0x41FA, r1	; 0x8041fa <rcvD0_read_index+0x1>
    6246:	03 c0       	rjmp	.+6      	; 0x624e <__vector_88+0x96>
    6248:	81 e0       	ldi	r24, 0x01	; 1
    624a:	90 e0       	ldi	r25, 0x00	; 0
    624c:	f3 cf       	rjmp	.-26     	; 0x6234 <__vector_88+0x7c>
    624e:	ff 91       	pop	r31
    6250:	ef 91       	pop	r30
    6252:	9f 91       	pop	r25
    6254:	8f 91       	pop	r24
    6256:	3f 91       	pop	r19
    6258:	2f 91       	pop	r18
    625a:	0f 90       	pop	r0
    625c:	0b be       	out	0x3b, r0	; 59
    625e:	0f 90       	pop	r0
    6260:	0f be       	out	0x3f, r0	; 63
    6262:	0f 90       	pop	r0
    6264:	1f 90       	pop	r1
    6266:	18 95       	reti

00006268 <__vector_91>:
    6268:	1f 92       	push	r1
    626a:	0f 92       	push	r0
    626c:	0f b6       	in	r0, 0x3f	; 63
    626e:	0f 92       	push	r0
    6270:	11 24       	eor	r1, r1
    6272:	0b b6       	in	r0, 0x3b	; 59
    6274:	0f 92       	push	r0
    6276:	2f 93       	push	r18
    6278:	3f 93       	push	r19
    627a:	8f 93       	push	r24
    627c:	9f 93       	push	r25
    627e:	ef 93       	push	r30
    6280:	ff 93       	push	r31
    6282:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    6286:	e0 91 03 42 	lds	r30, 0x4203	; 0x804203 <rcvD1_buffer>
    628a:	f0 91 04 42 	lds	r31, 0x4204	; 0x804204 <rcvD1_buffer+0x1>
    628e:	80 91 eb 41 	lds	r24, 0x41EB	; 0x8041eb <rcvD1_write_index>
    6292:	90 91 ec 41 	lds	r25, 0x41EC	; 0x8041ec <rcvD1_write_index+0x1>
    6296:	e8 0f       	add	r30, r24
    6298:	f9 1f       	adc	r31, r25
    629a:	20 83       	st	Z, r18
    629c:	80 91 eb 41 	lds	r24, 0x41EB	; 0x8041eb <rcvD1_write_index>
    62a0:	90 91 ec 41 	lds	r25, 0x41EC	; 0x8041ec <rcvD1_write_index+0x1>
    62a4:	01 96       	adiw	r24, 0x01	; 1
    62a6:	84 36       	cpi	r24, 0x64	; 100
    62a8:	91 05       	cpc	r25, r1
    62aa:	60 f4       	brcc	.+24     	; 0x62c4 <__vector_91+0x5c>
    62ac:	80 93 eb 41 	sts	0x41EB, r24	; 0x8041eb <rcvD1_write_index>
    62b0:	90 93 ec 41 	sts	0x41EC, r25	; 0x8041ec <rcvD1_write_index+0x1>
    62b4:	20 91 f7 41 	lds	r18, 0x41F7	; 0x8041f7 <rcvD1_read_index>
    62b8:	30 91 f8 41 	lds	r19, 0x41F8	; 0x8041f8 <rcvD1_read_index+0x1>
    62bc:	82 17       	cp	r24, r18
    62be:	93 07       	cpc	r25, r19
    62c0:	f1 f4       	brne	.+60     	; 0x62fe <__vector_91+0x96>
    62c2:	0c c0       	rjmp	.+24     	; 0x62dc <__vector_91+0x74>
    62c4:	10 92 eb 41 	sts	0x41EB, r1	; 0x8041eb <rcvD1_write_index>
    62c8:	10 92 ec 41 	sts	0x41EC, r1	; 0x8041ec <rcvD1_write_index+0x1>
    62cc:	80 91 f7 41 	lds	r24, 0x41F7	; 0x8041f7 <rcvD1_read_index>
    62d0:	90 91 f8 41 	lds	r25, 0x41F8	; 0x8041f8 <rcvD1_read_index+0x1>
    62d4:	18 16       	cp	r1, r24
    62d6:	19 06       	cpc	r1, r25
    62d8:	91 f4       	brne	.+36     	; 0x62fe <__vector_91+0x96>
    62da:	0e c0       	rjmp	.+28     	; 0x62f8 <__vector_91+0x90>
    62dc:	01 96       	adiw	r24, 0x01	; 1
    62de:	84 36       	cpi	r24, 0x64	; 100
    62e0:	91 05       	cpc	r25, r1
    62e2:	28 f4       	brcc	.+10     	; 0x62ee <__vector_91+0x86>
    62e4:	80 93 f7 41 	sts	0x41F7, r24	; 0x8041f7 <rcvD1_read_index>
    62e8:	90 93 f8 41 	sts	0x41F8, r25	; 0x8041f8 <rcvD1_read_index+0x1>
    62ec:	08 c0       	rjmp	.+16     	; 0x62fe <__vector_91+0x96>
    62ee:	10 92 f7 41 	sts	0x41F7, r1	; 0x8041f7 <rcvD1_read_index>
    62f2:	10 92 f8 41 	sts	0x41F8, r1	; 0x8041f8 <rcvD1_read_index+0x1>
    62f6:	03 c0       	rjmp	.+6      	; 0x62fe <__vector_91+0x96>
    62f8:	81 e0       	ldi	r24, 0x01	; 1
    62fa:	90 e0       	ldi	r25, 0x00	; 0
    62fc:	f3 cf       	rjmp	.-26     	; 0x62e4 <__vector_91+0x7c>
    62fe:	ff 91       	pop	r31
    6300:	ef 91       	pop	r30
    6302:	9f 91       	pop	r25
    6304:	8f 91       	pop	r24
    6306:	3f 91       	pop	r19
    6308:	2f 91       	pop	r18
    630a:	0f 90       	pop	r0
    630c:	0b be       	out	0x3b, r0	; 59
    630e:	0f 90       	pop	r0
    6310:	0f be       	out	0x3f, r0	; 63
    6312:	0f 90       	pop	r0
    6314:	1f 90       	pop	r1
    6316:	18 95       	reti

00006318 <__vector_58>:
    6318:	1f 92       	push	r1
    631a:	0f 92       	push	r0
    631c:	0f b6       	in	r0, 0x3f	; 63
    631e:	0f 92       	push	r0
    6320:	11 24       	eor	r1, r1
    6322:	0b b6       	in	r0, 0x3b	; 59
    6324:	0f 92       	push	r0
    6326:	2f 93       	push	r18
    6328:	3f 93       	push	r19
    632a:	8f 93       	push	r24
    632c:	9f 93       	push	r25
    632e:	ef 93       	push	r30
    6330:	ff 93       	push	r31
    6332:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    6336:	e0 91 01 42 	lds	r30, 0x4201	; 0x804201 <rcvE0_buffer>
    633a:	f0 91 02 42 	lds	r31, 0x4202	; 0x804202 <rcvE0_buffer+0x1>
    633e:	80 91 e9 41 	lds	r24, 0x41E9	; 0x8041e9 <rcvE0_write_index>
    6342:	90 91 ea 41 	lds	r25, 0x41EA	; 0x8041ea <rcvE0_write_index+0x1>
    6346:	e8 0f       	add	r30, r24
    6348:	f9 1f       	adc	r31, r25
    634a:	20 83       	st	Z, r18
    634c:	80 91 e9 41 	lds	r24, 0x41E9	; 0x8041e9 <rcvE0_write_index>
    6350:	90 91 ea 41 	lds	r25, 0x41EA	; 0x8041ea <rcvE0_write_index+0x1>
    6354:	01 96       	adiw	r24, 0x01	; 1
    6356:	84 36       	cpi	r24, 0x64	; 100
    6358:	91 05       	cpc	r25, r1
    635a:	60 f4       	brcc	.+24     	; 0x6374 <__vector_58+0x5c>
    635c:	80 93 e9 41 	sts	0x41E9, r24	; 0x8041e9 <rcvE0_write_index>
    6360:	90 93 ea 41 	sts	0x41EA, r25	; 0x8041ea <rcvE0_write_index+0x1>
    6364:	20 91 f5 41 	lds	r18, 0x41F5	; 0x8041f5 <rcvE0_read_index>
    6368:	30 91 f6 41 	lds	r19, 0x41F6	; 0x8041f6 <rcvE0_read_index+0x1>
    636c:	82 17       	cp	r24, r18
    636e:	93 07       	cpc	r25, r19
    6370:	f1 f4       	brne	.+60     	; 0x63ae <__vector_58+0x96>
    6372:	0c c0       	rjmp	.+24     	; 0x638c <__vector_58+0x74>
    6374:	10 92 e9 41 	sts	0x41E9, r1	; 0x8041e9 <rcvE0_write_index>
    6378:	10 92 ea 41 	sts	0x41EA, r1	; 0x8041ea <rcvE0_write_index+0x1>
    637c:	80 91 f5 41 	lds	r24, 0x41F5	; 0x8041f5 <rcvE0_read_index>
    6380:	90 91 f6 41 	lds	r25, 0x41F6	; 0x8041f6 <rcvE0_read_index+0x1>
    6384:	18 16       	cp	r1, r24
    6386:	19 06       	cpc	r1, r25
    6388:	91 f4       	brne	.+36     	; 0x63ae <__vector_58+0x96>
    638a:	0e c0       	rjmp	.+28     	; 0x63a8 <__vector_58+0x90>
    638c:	01 96       	adiw	r24, 0x01	; 1
    638e:	84 36       	cpi	r24, 0x64	; 100
    6390:	91 05       	cpc	r25, r1
    6392:	28 f4       	brcc	.+10     	; 0x639e <__vector_58+0x86>
    6394:	80 93 f5 41 	sts	0x41F5, r24	; 0x8041f5 <rcvE0_read_index>
    6398:	90 93 f6 41 	sts	0x41F6, r25	; 0x8041f6 <rcvE0_read_index+0x1>
    639c:	08 c0       	rjmp	.+16     	; 0x63ae <__vector_58+0x96>
    639e:	10 92 f5 41 	sts	0x41F5, r1	; 0x8041f5 <rcvE0_read_index>
    63a2:	10 92 f6 41 	sts	0x41F6, r1	; 0x8041f6 <rcvE0_read_index+0x1>
    63a6:	03 c0       	rjmp	.+6      	; 0x63ae <__vector_58+0x96>
    63a8:	81 e0       	ldi	r24, 0x01	; 1
    63aa:	90 e0       	ldi	r25, 0x00	; 0
    63ac:	f3 cf       	rjmp	.-26     	; 0x6394 <__vector_58+0x7c>
    63ae:	ff 91       	pop	r31
    63b0:	ef 91       	pop	r30
    63b2:	9f 91       	pop	r25
    63b4:	8f 91       	pop	r24
    63b6:	3f 91       	pop	r19
    63b8:	2f 91       	pop	r18
    63ba:	0f 90       	pop	r0
    63bc:	0b be       	out	0x3b, r0	; 59
    63be:	0f 90       	pop	r0
    63c0:	0f be       	out	0x3f, r0	; 63
    63c2:	0f 90       	pop	r0
    63c4:	1f 90       	pop	r1
    63c6:	18 95       	reti

000063c8 <__vector_119>:
    63c8:	1f 92       	push	r1
    63ca:	0f 92       	push	r0
    63cc:	0f b6       	in	r0, 0x3f	; 63
    63ce:	0f 92       	push	r0
    63d0:	11 24       	eor	r1, r1
    63d2:	0b b6       	in	r0, 0x3b	; 59
    63d4:	0f 92       	push	r0
    63d6:	2f 93       	push	r18
    63d8:	3f 93       	push	r19
    63da:	8f 93       	push	r24
    63dc:	9f 93       	push	r25
    63de:	ef 93       	push	r30
    63e0:	ff 93       	push	r31
    63e2:	20 91 a0 0b 	lds	r18, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
    63e6:	e0 91 ff 41 	lds	r30, 0x41FF	; 0x8041ff <rcvF0_buffer>
    63ea:	f0 91 00 42 	lds	r31, 0x4200	; 0x804200 <rcvF0_buffer+0x1>
    63ee:	80 91 e7 41 	lds	r24, 0x41E7	; 0x8041e7 <rcvF0_write_index>
    63f2:	90 91 e8 41 	lds	r25, 0x41E8	; 0x8041e8 <rcvF0_write_index+0x1>
    63f6:	e8 0f       	add	r30, r24
    63f8:	f9 1f       	adc	r31, r25
    63fa:	20 83       	st	Z, r18
    63fc:	80 91 e7 41 	lds	r24, 0x41E7	; 0x8041e7 <rcvF0_write_index>
    6400:	90 91 e8 41 	lds	r25, 0x41E8	; 0x8041e8 <rcvF0_write_index+0x1>
    6404:	01 96       	adiw	r24, 0x01	; 1
    6406:	84 36       	cpi	r24, 0x64	; 100
    6408:	91 05       	cpc	r25, r1
    640a:	60 f4       	brcc	.+24     	; 0x6424 <__vector_119+0x5c>
    640c:	80 93 e7 41 	sts	0x41E7, r24	; 0x8041e7 <rcvF0_write_index>
    6410:	90 93 e8 41 	sts	0x41E8, r25	; 0x8041e8 <rcvF0_write_index+0x1>
    6414:	20 91 f3 41 	lds	r18, 0x41F3	; 0x8041f3 <rcvF0_read_index>
    6418:	30 91 f4 41 	lds	r19, 0x41F4	; 0x8041f4 <rcvF0_read_index+0x1>
    641c:	82 17       	cp	r24, r18
    641e:	93 07       	cpc	r25, r19
    6420:	f1 f4       	brne	.+60     	; 0x645e <__vector_119+0x96>
    6422:	0c c0       	rjmp	.+24     	; 0x643c <__vector_119+0x74>
    6424:	10 92 e7 41 	sts	0x41E7, r1	; 0x8041e7 <rcvF0_write_index>
    6428:	10 92 e8 41 	sts	0x41E8, r1	; 0x8041e8 <rcvF0_write_index+0x1>
    642c:	80 91 f3 41 	lds	r24, 0x41F3	; 0x8041f3 <rcvF0_read_index>
    6430:	90 91 f4 41 	lds	r25, 0x41F4	; 0x8041f4 <rcvF0_read_index+0x1>
    6434:	18 16       	cp	r1, r24
    6436:	19 06       	cpc	r1, r25
    6438:	91 f4       	brne	.+36     	; 0x645e <__vector_119+0x96>
    643a:	0e c0       	rjmp	.+28     	; 0x6458 <__vector_119+0x90>
    643c:	01 96       	adiw	r24, 0x01	; 1
    643e:	84 36       	cpi	r24, 0x64	; 100
    6440:	91 05       	cpc	r25, r1
    6442:	28 f4       	brcc	.+10     	; 0x644e <__vector_119+0x86>
    6444:	80 93 f3 41 	sts	0x41F3, r24	; 0x8041f3 <rcvF0_read_index>
    6448:	90 93 f4 41 	sts	0x41F4, r25	; 0x8041f4 <rcvF0_read_index+0x1>
    644c:	08 c0       	rjmp	.+16     	; 0x645e <__vector_119+0x96>
    644e:	10 92 f3 41 	sts	0x41F3, r1	; 0x8041f3 <rcvF0_read_index>
    6452:	10 92 f4 41 	sts	0x41F4, r1	; 0x8041f4 <rcvF0_read_index+0x1>
    6456:	03 c0       	rjmp	.+6      	; 0x645e <__vector_119+0x96>
    6458:	81 e0       	ldi	r24, 0x01	; 1
    645a:	90 e0       	ldi	r25, 0x00	; 0
    645c:	f3 cf       	rjmp	.-26     	; 0x6444 <__vector_119+0x7c>
    645e:	ff 91       	pop	r31
    6460:	ef 91       	pop	r30
    6462:	9f 91       	pop	r25
    6464:	8f 91       	pop	r24
    6466:	3f 91       	pop	r19
    6468:	2f 91       	pop	r18
    646a:	0f 90       	pop	r0
    646c:	0b be       	out	0x3b, r0	; 59
    646e:	0f 90       	pop	r0
    6470:	0f be       	out	0x3f, r0	; 63
    6472:	0f 90       	pop	r0
    6474:	1f 90       	pop	r1
    6476:	18 95       	reti

00006478 <__subsf3>:
    6478:	50 58       	subi	r21, 0x80	; 128

0000647a <__addsf3>:
    647a:	bb 27       	eor	r27, r27
    647c:	aa 27       	eor	r26, r26
    647e:	0e 94 54 32 	call	0x64a8	; 0x64a8 <__addsf3x>
    6482:	0c 94 9e 33 	jmp	0x673c	; 0x673c <__fp_round>
    6486:	0e 94 90 33 	call	0x6720	; 0x6720 <__fp_pscA>
    648a:	38 f0       	brcs	.+14     	; 0x649a <__addsf3+0x20>
    648c:	0e 94 97 33 	call	0x672e	; 0x672e <__fp_pscB>
    6490:	20 f0       	brcs	.+8      	; 0x649a <__addsf3+0x20>
    6492:	39 f4       	brne	.+14     	; 0x64a2 <__addsf3+0x28>
    6494:	9f 3f       	cpi	r25, 0xFF	; 255
    6496:	19 f4       	brne	.+6      	; 0x649e <__addsf3+0x24>
    6498:	26 f4       	brtc	.+8      	; 0x64a2 <__addsf3+0x28>
    649a:	0c 94 8d 33 	jmp	0x671a	; 0x671a <__fp_nan>
    649e:	0e f4       	brtc	.+2      	; 0x64a2 <__addsf3+0x28>
    64a0:	e0 95       	com	r30
    64a2:	e7 fb       	bst	r30, 7
    64a4:	0c 94 87 33 	jmp	0x670e	; 0x670e <__fp_inf>

000064a8 <__addsf3x>:
    64a8:	e9 2f       	mov	r30, r25
    64aa:	0e 94 af 33 	call	0x675e	; 0x675e <__fp_split3>
    64ae:	58 f3       	brcs	.-42     	; 0x6486 <__addsf3+0xc>
    64b0:	ba 17       	cp	r27, r26
    64b2:	62 07       	cpc	r22, r18
    64b4:	73 07       	cpc	r23, r19
    64b6:	84 07       	cpc	r24, r20
    64b8:	95 07       	cpc	r25, r21
    64ba:	20 f0       	brcs	.+8      	; 0x64c4 <__addsf3x+0x1c>
    64bc:	79 f4       	brne	.+30     	; 0x64dc <__addsf3x+0x34>
    64be:	a6 f5       	brtc	.+104    	; 0x6528 <__addsf3x+0x80>
    64c0:	0c 94 d1 33 	jmp	0x67a2	; 0x67a2 <__fp_zero>
    64c4:	0e f4       	brtc	.+2      	; 0x64c8 <__addsf3x+0x20>
    64c6:	e0 95       	com	r30
    64c8:	0b 2e       	mov	r0, r27
    64ca:	ba 2f       	mov	r27, r26
    64cc:	a0 2d       	mov	r26, r0
    64ce:	0b 01       	movw	r0, r22
    64d0:	b9 01       	movw	r22, r18
    64d2:	90 01       	movw	r18, r0
    64d4:	0c 01       	movw	r0, r24
    64d6:	ca 01       	movw	r24, r20
    64d8:	a0 01       	movw	r20, r0
    64da:	11 24       	eor	r1, r1
    64dc:	ff 27       	eor	r31, r31
    64de:	59 1b       	sub	r21, r25
    64e0:	99 f0       	breq	.+38     	; 0x6508 <__addsf3x+0x60>
    64e2:	59 3f       	cpi	r21, 0xF9	; 249
    64e4:	50 f4       	brcc	.+20     	; 0x64fa <__addsf3x+0x52>
    64e6:	50 3e       	cpi	r21, 0xE0	; 224
    64e8:	68 f1       	brcs	.+90     	; 0x6544 <__addsf3x+0x9c>
    64ea:	1a 16       	cp	r1, r26
    64ec:	f0 40       	sbci	r31, 0x00	; 0
    64ee:	a2 2f       	mov	r26, r18
    64f0:	23 2f       	mov	r18, r19
    64f2:	34 2f       	mov	r19, r20
    64f4:	44 27       	eor	r20, r20
    64f6:	58 5f       	subi	r21, 0xF8	; 248
    64f8:	f3 cf       	rjmp	.-26     	; 0x64e0 <__addsf3x+0x38>
    64fa:	46 95       	lsr	r20
    64fc:	37 95       	ror	r19
    64fe:	27 95       	ror	r18
    6500:	a7 95       	ror	r26
    6502:	f0 40       	sbci	r31, 0x00	; 0
    6504:	53 95       	inc	r21
    6506:	c9 f7       	brne	.-14     	; 0x64fa <__addsf3x+0x52>
    6508:	7e f4       	brtc	.+30     	; 0x6528 <__addsf3x+0x80>
    650a:	1f 16       	cp	r1, r31
    650c:	ba 0b       	sbc	r27, r26
    650e:	62 0b       	sbc	r22, r18
    6510:	73 0b       	sbc	r23, r19
    6512:	84 0b       	sbc	r24, r20
    6514:	ba f0       	brmi	.+46     	; 0x6544 <__addsf3x+0x9c>
    6516:	91 50       	subi	r25, 0x01	; 1
    6518:	a1 f0       	breq	.+40     	; 0x6542 <__addsf3x+0x9a>
    651a:	ff 0f       	add	r31, r31
    651c:	bb 1f       	adc	r27, r27
    651e:	66 1f       	adc	r22, r22
    6520:	77 1f       	adc	r23, r23
    6522:	88 1f       	adc	r24, r24
    6524:	c2 f7       	brpl	.-16     	; 0x6516 <__addsf3x+0x6e>
    6526:	0e c0       	rjmp	.+28     	; 0x6544 <__addsf3x+0x9c>
    6528:	ba 0f       	add	r27, r26
    652a:	62 1f       	adc	r22, r18
    652c:	73 1f       	adc	r23, r19
    652e:	84 1f       	adc	r24, r20
    6530:	48 f4       	brcc	.+18     	; 0x6544 <__addsf3x+0x9c>
    6532:	87 95       	ror	r24
    6534:	77 95       	ror	r23
    6536:	67 95       	ror	r22
    6538:	b7 95       	ror	r27
    653a:	f7 95       	ror	r31
    653c:	9e 3f       	cpi	r25, 0xFE	; 254
    653e:	08 f0       	brcs	.+2      	; 0x6542 <__addsf3x+0x9a>
    6540:	b0 cf       	rjmp	.-160    	; 0x64a2 <__addsf3+0x28>
    6542:	93 95       	inc	r25
    6544:	88 0f       	add	r24, r24
    6546:	08 f0       	brcs	.+2      	; 0x654a <__addsf3x+0xa2>
    6548:	99 27       	eor	r25, r25
    654a:	ee 0f       	add	r30, r30
    654c:	97 95       	ror	r25
    654e:	87 95       	ror	r24
    6550:	08 95       	ret

00006552 <__divsf3>:
    6552:	0e 94 bd 32 	call	0x657a	; 0x657a <__divsf3x>
    6556:	0c 94 9e 33 	jmp	0x673c	; 0x673c <__fp_round>
    655a:	0e 94 97 33 	call	0x672e	; 0x672e <__fp_pscB>
    655e:	58 f0       	brcs	.+22     	; 0x6576 <__divsf3+0x24>
    6560:	0e 94 90 33 	call	0x6720	; 0x6720 <__fp_pscA>
    6564:	40 f0       	brcs	.+16     	; 0x6576 <__divsf3+0x24>
    6566:	29 f4       	brne	.+10     	; 0x6572 <__divsf3+0x20>
    6568:	5f 3f       	cpi	r21, 0xFF	; 255
    656a:	29 f0       	breq	.+10     	; 0x6576 <__divsf3+0x24>
    656c:	0c 94 87 33 	jmp	0x670e	; 0x670e <__fp_inf>
    6570:	51 11       	cpse	r21, r1
    6572:	0c 94 d2 33 	jmp	0x67a4	; 0x67a4 <__fp_szero>
    6576:	0c 94 8d 33 	jmp	0x671a	; 0x671a <__fp_nan>

0000657a <__divsf3x>:
    657a:	0e 94 af 33 	call	0x675e	; 0x675e <__fp_split3>
    657e:	68 f3       	brcs	.-38     	; 0x655a <__divsf3+0x8>

00006580 <__divsf3_pse>:
    6580:	99 23       	and	r25, r25
    6582:	b1 f3       	breq	.-20     	; 0x6570 <__divsf3+0x1e>
    6584:	55 23       	and	r21, r21
    6586:	91 f3       	breq	.-28     	; 0x656c <__divsf3+0x1a>
    6588:	95 1b       	sub	r25, r21
    658a:	55 0b       	sbc	r21, r21
    658c:	bb 27       	eor	r27, r27
    658e:	aa 27       	eor	r26, r26
    6590:	62 17       	cp	r22, r18
    6592:	73 07       	cpc	r23, r19
    6594:	84 07       	cpc	r24, r20
    6596:	38 f0       	brcs	.+14     	; 0x65a6 <__divsf3_pse+0x26>
    6598:	9f 5f       	subi	r25, 0xFF	; 255
    659a:	5f 4f       	sbci	r21, 0xFF	; 255
    659c:	22 0f       	add	r18, r18
    659e:	33 1f       	adc	r19, r19
    65a0:	44 1f       	adc	r20, r20
    65a2:	aa 1f       	adc	r26, r26
    65a4:	a9 f3       	breq	.-22     	; 0x6590 <__divsf3_pse+0x10>
    65a6:	35 d0       	rcall	.+106    	; 0x6612 <__divsf3_pse+0x92>
    65a8:	0e 2e       	mov	r0, r30
    65aa:	3a f0       	brmi	.+14     	; 0x65ba <__divsf3_pse+0x3a>
    65ac:	e0 e8       	ldi	r30, 0x80	; 128
    65ae:	32 d0       	rcall	.+100    	; 0x6614 <__divsf3_pse+0x94>
    65b0:	91 50       	subi	r25, 0x01	; 1
    65b2:	50 40       	sbci	r21, 0x00	; 0
    65b4:	e6 95       	lsr	r30
    65b6:	00 1c       	adc	r0, r0
    65b8:	ca f7       	brpl	.-14     	; 0x65ac <__divsf3_pse+0x2c>
    65ba:	2b d0       	rcall	.+86     	; 0x6612 <__divsf3_pse+0x92>
    65bc:	fe 2f       	mov	r31, r30
    65be:	29 d0       	rcall	.+82     	; 0x6612 <__divsf3_pse+0x92>
    65c0:	66 0f       	add	r22, r22
    65c2:	77 1f       	adc	r23, r23
    65c4:	88 1f       	adc	r24, r24
    65c6:	bb 1f       	adc	r27, r27
    65c8:	26 17       	cp	r18, r22
    65ca:	37 07       	cpc	r19, r23
    65cc:	48 07       	cpc	r20, r24
    65ce:	ab 07       	cpc	r26, r27
    65d0:	b0 e8       	ldi	r27, 0x80	; 128
    65d2:	09 f0       	breq	.+2      	; 0x65d6 <__divsf3_pse+0x56>
    65d4:	bb 0b       	sbc	r27, r27
    65d6:	80 2d       	mov	r24, r0
    65d8:	bf 01       	movw	r22, r30
    65da:	ff 27       	eor	r31, r31
    65dc:	93 58       	subi	r25, 0x83	; 131
    65de:	5f 4f       	sbci	r21, 0xFF	; 255
    65e0:	3a f0       	brmi	.+14     	; 0x65f0 <__divsf3_pse+0x70>
    65e2:	9e 3f       	cpi	r25, 0xFE	; 254
    65e4:	51 05       	cpc	r21, r1
    65e6:	78 f0       	brcs	.+30     	; 0x6606 <__divsf3_pse+0x86>
    65e8:	0c 94 87 33 	jmp	0x670e	; 0x670e <__fp_inf>
    65ec:	0c 94 d2 33 	jmp	0x67a4	; 0x67a4 <__fp_szero>
    65f0:	5f 3f       	cpi	r21, 0xFF	; 255
    65f2:	e4 f3       	brlt	.-8      	; 0x65ec <__divsf3_pse+0x6c>
    65f4:	98 3e       	cpi	r25, 0xE8	; 232
    65f6:	d4 f3       	brlt	.-12     	; 0x65ec <__divsf3_pse+0x6c>
    65f8:	86 95       	lsr	r24
    65fa:	77 95       	ror	r23
    65fc:	67 95       	ror	r22
    65fe:	b7 95       	ror	r27
    6600:	f7 95       	ror	r31
    6602:	9f 5f       	subi	r25, 0xFF	; 255
    6604:	c9 f7       	brne	.-14     	; 0x65f8 <__divsf3_pse+0x78>
    6606:	88 0f       	add	r24, r24
    6608:	91 1d       	adc	r25, r1
    660a:	96 95       	lsr	r25
    660c:	87 95       	ror	r24
    660e:	97 f9       	bld	r25, 7
    6610:	08 95       	ret
    6612:	e1 e0       	ldi	r30, 0x01	; 1
    6614:	66 0f       	add	r22, r22
    6616:	77 1f       	adc	r23, r23
    6618:	88 1f       	adc	r24, r24
    661a:	bb 1f       	adc	r27, r27
    661c:	62 17       	cp	r22, r18
    661e:	73 07       	cpc	r23, r19
    6620:	84 07       	cpc	r24, r20
    6622:	ba 07       	cpc	r27, r26
    6624:	20 f0       	brcs	.+8      	; 0x662e <__divsf3_pse+0xae>
    6626:	62 1b       	sub	r22, r18
    6628:	73 0b       	sbc	r23, r19
    662a:	84 0b       	sbc	r24, r20
    662c:	ba 0b       	sbc	r27, r26
    662e:	ee 1f       	adc	r30, r30
    6630:	88 f7       	brcc	.-30     	; 0x6614 <__divsf3_pse+0x94>
    6632:	e0 95       	com	r30
    6634:	08 95       	ret

00006636 <__fixunssfsi>:
    6636:	0e 94 b7 33 	call	0x676e	; 0x676e <__fp_splitA>
    663a:	88 f0       	brcs	.+34     	; 0x665e <__fixunssfsi+0x28>
    663c:	9f 57       	subi	r25, 0x7F	; 127
    663e:	98 f0       	brcs	.+38     	; 0x6666 <__fixunssfsi+0x30>
    6640:	b9 2f       	mov	r27, r25
    6642:	99 27       	eor	r25, r25
    6644:	b7 51       	subi	r27, 0x17	; 23
    6646:	b0 f0       	brcs	.+44     	; 0x6674 <__fixunssfsi+0x3e>
    6648:	e1 f0       	breq	.+56     	; 0x6682 <__fixunssfsi+0x4c>
    664a:	66 0f       	add	r22, r22
    664c:	77 1f       	adc	r23, r23
    664e:	88 1f       	adc	r24, r24
    6650:	99 1f       	adc	r25, r25
    6652:	1a f0       	brmi	.+6      	; 0x665a <__fixunssfsi+0x24>
    6654:	ba 95       	dec	r27
    6656:	c9 f7       	brne	.-14     	; 0x664a <__fixunssfsi+0x14>
    6658:	14 c0       	rjmp	.+40     	; 0x6682 <__fixunssfsi+0x4c>
    665a:	b1 30       	cpi	r27, 0x01	; 1
    665c:	91 f0       	breq	.+36     	; 0x6682 <__fixunssfsi+0x4c>
    665e:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__fp_zero>
    6662:	b1 e0       	ldi	r27, 0x01	; 1
    6664:	08 95       	ret
    6666:	0c 94 d1 33 	jmp	0x67a2	; 0x67a2 <__fp_zero>
    666a:	67 2f       	mov	r22, r23
    666c:	78 2f       	mov	r23, r24
    666e:	88 27       	eor	r24, r24
    6670:	b8 5f       	subi	r27, 0xF8	; 248
    6672:	39 f0       	breq	.+14     	; 0x6682 <__fixunssfsi+0x4c>
    6674:	b9 3f       	cpi	r27, 0xF9	; 249
    6676:	cc f3       	brlt	.-14     	; 0x666a <__fixunssfsi+0x34>
    6678:	86 95       	lsr	r24
    667a:	77 95       	ror	r23
    667c:	67 95       	ror	r22
    667e:	b3 95       	inc	r27
    6680:	d9 f7       	brne	.-10     	; 0x6678 <__fixunssfsi+0x42>
    6682:	3e f4       	brtc	.+14     	; 0x6692 <__fixunssfsi+0x5c>
    6684:	90 95       	com	r25
    6686:	80 95       	com	r24
    6688:	70 95       	com	r23
    668a:	61 95       	neg	r22
    668c:	7f 4f       	sbci	r23, 0xFF	; 255
    668e:	8f 4f       	sbci	r24, 0xFF	; 255
    6690:	9f 4f       	sbci	r25, 0xFF	; 255
    6692:	08 95       	ret

00006694 <__floatunsisf>:
    6694:	e8 94       	clt
    6696:	09 c0       	rjmp	.+18     	; 0x66aa <__floatsisf+0x12>

00006698 <__floatsisf>:
    6698:	97 fb       	bst	r25, 7
    669a:	3e f4       	brtc	.+14     	; 0x66aa <__floatsisf+0x12>
    669c:	90 95       	com	r25
    669e:	80 95       	com	r24
    66a0:	70 95       	com	r23
    66a2:	61 95       	neg	r22
    66a4:	7f 4f       	sbci	r23, 0xFF	; 255
    66a6:	8f 4f       	sbci	r24, 0xFF	; 255
    66a8:	9f 4f       	sbci	r25, 0xFF	; 255
    66aa:	99 23       	and	r25, r25
    66ac:	a9 f0       	breq	.+42     	; 0x66d8 <__floatsisf+0x40>
    66ae:	f9 2f       	mov	r31, r25
    66b0:	96 e9       	ldi	r25, 0x96	; 150
    66b2:	bb 27       	eor	r27, r27
    66b4:	93 95       	inc	r25
    66b6:	f6 95       	lsr	r31
    66b8:	87 95       	ror	r24
    66ba:	77 95       	ror	r23
    66bc:	67 95       	ror	r22
    66be:	b7 95       	ror	r27
    66c0:	f1 11       	cpse	r31, r1
    66c2:	f8 cf       	rjmp	.-16     	; 0x66b4 <__floatsisf+0x1c>
    66c4:	fa f4       	brpl	.+62     	; 0x6704 <__floatsisf+0x6c>
    66c6:	bb 0f       	add	r27, r27
    66c8:	11 f4       	brne	.+4      	; 0x66ce <__floatsisf+0x36>
    66ca:	60 ff       	sbrs	r22, 0
    66cc:	1b c0       	rjmp	.+54     	; 0x6704 <__floatsisf+0x6c>
    66ce:	6f 5f       	subi	r22, 0xFF	; 255
    66d0:	7f 4f       	sbci	r23, 0xFF	; 255
    66d2:	8f 4f       	sbci	r24, 0xFF	; 255
    66d4:	9f 4f       	sbci	r25, 0xFF	; 255
    66d6:	16 c0       	rjmp	.+44     	; 0x6704 <__floatsisf+0x6c>
    66d8:	88 23       	and	r24, r24
    66da:	11 f0       	breq	.+4      	; 0x66e0 <__floatsisf+0x48>
    66dc:	96 e9       	ldi	r25, 0x96	; 150
    66de:	11 c0       	rjmp	.+34     	; 0x6702 <__floatsisf+0x6a>
    66e0:	77 23       	and	r23, r23
    66e2:	21 f0       	breq	.+8      	; 0x66ec <__floatsisf+0x54>
    66e4:	9e e8       	ldi	r25, 0x8E	; 142
    66e6:	87 2f       	mov	r24, r23
    66e8:	76 2f       	mov	r23, r22
    66ea:	05 c0       	rjmp	.+10     	; 0x66f6 <__floatsisf+0x5e>
    66ec:	66 23       	and	r22, r22
    66ee:	71 f0       	breq	.+28     	; 0x670c <__floatsisf+0x74>
    66f0:	96 e8       	ldi	r25, 0x86	; 134
    66f2:	86 2f       	mov	r24, r22
    66f4:	70 e0       	ldi	r23, 0x00	; 0
    66f6:	60 e0       	ldi	r22, 0x00	; 0
    66f8:	2a f0       	brmi	.+10     	; 0x6704 <__floatsisf+0x6c>
    66fa:	9a 95       	dec	r25
    66fc:	66 0f       	add	r22, r22
    66fe:	77 1f       	adc	r23, r23
    6700:	88 1f       	adc	r24, r24
    6702:	da f7       	brpl	.-10     	; 0x66fa <__floatsisf+0x62>
    6704:	88 0f       	add	r24, r24
    6706:	96 95       	lsr	r25
    6708:	87 95       	ror	r24
    670a:	97 f9       	bld	r25, 7
    670c:	08 95       	ret

0000670e <__fp_inf>:
    670e:	97 f9       	bld	r25, 7
    6710:	9f 67       	ori	r25, 0x7F	; 127
    6712:	80 e8       	ldi	r24, 0x80	; 128
    6714:	70 e0       	ldi	r23, 0x00	; 0
    6716:	60 e0       	ldi	r22, 0x00	; 0
    6718:	08 95       	ret

0000671a <__fp_nan>:
    671a:	9f ef       	ldi	r25, 0xFF	; 255
    671c:	80 ec       	ldi	r24, 0xC0	; 192
    671e:	08 95       	ret

00006720 <__fp_pscA>:
    6720:	00 24       	eor	r0, r0
    6722:	0a 94       	dec	r0
    6724:	16 16       	cp	r1, r22
    6726:	17 06       	cpc	r1, r23
    6728:	18 06       	cpc	r1, r24
    672a:	09 06       	cpc	r0, r25
    672c:	08 95       	ret

0000672e <__fp_pscB>:
    672e:	00 24       	eor	r0, r0
    6730:	0a 94       	dec	r0
    6732:	12 16       	cp	r1, r18
    6734:	13 06       	cpc	r1, r19
    6736:	14 06       	cpc	r1, r20
    6738:	05 06       	cpc	r0, r21
    673a:	08 95       	ret

0000673c <__fp_round>:
    673c:	09 2e       	mov	r0, r25
    673e:	03 94       	inc	r0
    6740:	00 0c       	add	r0, r0
    6742:	11 f4       	brne	.+4      	; 0x6748 <__fp_round+0xc>
    6744:	88 23       	and	r24, r24
    6746:	52 f0       	brmi	.+20     	; 0x675c <__fp_round+0x20>
    6748:	bb 0f       	add	r27, r27
    674a:	40 f4       	brcc	.+16     	; 0x675c <__fp_round+0x20>
    674c:	bf 2b       	or	r27, r31
    674e:	11 f4       	brne	.+4      	; 0x6754 <__fp_round+0x18>
    6750:	60 ff       	sbrs	r22, 0
    6752:	04 c0       	rjmp	.+8      	; 0x675c <__fp_round+0x20>
    6754:	6f 5f       	subi	r22, 0xFF	; 255
    6756:	7f 4f       	sbci	r23, 0xFF	; 255
    6758:	8f 4f       	sbci	r24, 0xFF	; 255
    675a:	9f 4f       	sbci	r25, 0xFF	; 255
    675c:	08 95       	ret

0000675e <__fp_split3>:
    675e:	57 fd       	sbrc	r21, 7
    6760:	90 58       	subi	r25, 0x80	; 128
    6762:	44 0f       	add	r20, r20
    6764:	55 1f       	adc	r21, r21
    6766:	59 f0       	breq	.+22     	; 0x677e <__fp_splitA+0x10>
    6768:	5f 3f       	cpi	r21, 0xFF	; 255
    676a:	71 f0       	breq	.+28     	; 0x6788 <__fp_splitA+0x1a>
    676c:	47 95       	ror	r20

0000676e <__fp_splitA>:
    676e:	88 0f       	add	r24, r24
    6770:	97 fb       	bst	r25, 7
    6772:	99 1f       	adc	r25, r25
    6774:	61 f0       	breq	.+24     	; 0x678e <__fp_splitA+0x20>
    6776:	9f 3f       	cpi	r25, 0xFF	; 255
    6778:	79 f0       	breq	.+30     	; 0x6798 <__fp_splitA+0x2a>
    677a:	87 95       	ror	r24
    677c:	08 95       	ret
    677e:	12 16       	cp	r1, r18
    6780:	13 06       	cpc	r1, r19
    6782:	14 06       	cpc	r1, r20
    6784:	55 1f       	adc	r21, r21
    6786:	f2 cf       	rjmp	.-28     	; 0x676c <__fp_split3+0xe>
    6788:	46 95       	lsr	r20
    678a:	f1 df       	rcall	.-30     	; 0x676e <__fp_splitA>
    678c:	08 c0       	rjmp	.+16     	; 0x679e <__fp_splitA+0x30>
    678e:	16 16       	cp	r1, r22
    6790:	17 06       	cpc	r1, r23
    6792:	18 06       	cpc	r1, r24
    6794:	99 1f       	adc	r25, r25
    6796:	f1 cf       	rjmp	.-30     	; 0x677a <__fp_splitA+0xc>
    6798:	86 95       	lsr	r24
    679a:	71 05       	cpc	r23, r1
    679c:	61 05       	cpc	r22, r1
    679e:	08 94       	sec
    67a0:	08 95       	ret

000067a2 <__fp_zero>:
    67a2:	e8 94       	clt

000067a4 <__fp_szero>:
    67a4:	bb 27       	eor	r27, r27
    67a6:	66 27       	eor	r22, r22
    67a8:	77 27       	eor	r23, r23
    67aa:	cb 01       	movw	r24, r22
    67ac:	97 f9       	bld	r25, 7
    67ae:	08 95       	ret

000067b0 <__mulsf3>:
    67b0:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <__mulsf3x>
    67b4:	0c 94 9e 33 	jmp	0x673c	; 0x673c <__fp_round>
    67b8:	0e 94 90 33 	call	0x6720	; 0x6720 <__fp_pscA>
    67bc:	38 f0       	brcs	.+14     	; 0x67cc <__mulsf3+0x1c>
    67be:	0e 94 97 33 	call	0x672e	; 0x672e <__fp_pscB>
    67c2:	20 f0       	brcs	.+8      	; 0x67cc <__mulsf3+0x1c>
    67c4:	95 23       	and	r25, r21
    67c6:	11 f0       	breq	.+4      	; 0x67cc <__mulsf3+0x1c>
    67c8:	0c 94 87 33 	jmp	0x670e	; 0x670e <__fp_inf>
    67cc:	0c 94 8d 33 	jmp	0x671a	; 0x671a <__fp_nan>
    67d0:	11 24       	eor	r1, r1
    67d2:	0c 94 d2 33 	jmp	0x67a4	; 0x67a4 <__fp_szero>

000067d6 <__mulsf3x>:
    67d6:	0e 94 af 33 	call	0x675e	; 0x675e <__fp_split3>
    67da:	70 f3       	brcs	.-36     	; 0x67b8 <__mulsf3+0x8>

000067dc <__mulsf3_pse>:
    67dc:	95 9f       	mul	r25, r21
    67de:	c1 f3       	breq	.-16     	; 0x67d0 <__mulsf3+0x20>
    67e0:	95 0f       	add	r25, r21
    67e2:	50 e0       	ldi	r21, 0x00	; 0
    67e4:	55 1f       	adc	r21, r21
    67e6:	62 9f       	mul	r22, r18
    67e8:	f0 01       	movw	r30, r0
    67ea:	72 9f       	mul	r23, r18
    67ec:	bb 27       	eor	r27, r27
    67ee:	f0 0d       	add	r31, r0
    67f0:	b1 1d       	adc	r27, r1
    67f2:	63 9f       	mul	r22, r19
    67f4:	aa 27       	eor	r26, r26
    67f6:	f0 0d       	add	r31, r0
    67f8:	b1 1d       	adc	r27, r1
    67fa:	aa 1f       	adc	r26, r26
    67fc:	64 9f       	mul	r22, r20
    67fe:	66 27       	eor	r22, r22
    6800:	b0 0d       	add	r27, r0
    6802:	a1 1d       	adc	r26, r1
    6804:	66 1f       	adc	r22, r22
    6806:	82 9f       	mul	r24, r18
    6808:	22 27       	eor	r18, r18
    680a:	b0 0d       	add	r27, r0
    680c:	a1 1d       	adc	r26, r1
    680e:	62 1f       	adc	r22, r18
    6810:	73 9f       	mul	r23, r19
    6812:	b0 0d       	add	r27, r0
    6814:	a1 1d       	adc	r26, r1
    6816:	62 1f       	adc	r22, r18
    6818:	83 9f       	mul	r24, r19
    681a:	a0 0d       	add	r26, r0
    681c:	61 1d       	adc	r22, r1
    681e:	22 1f       	adc	r18, r18
    6820:	74 9f       	mul	r23, r20
    6822:	33 27       	eor	r19, r19
    6824:	a0 0d       	add	r26, r0
    6826:	61 1d       	adc	r22, r1
    6828:	23 1f       	adc	r18, r19
    682a:	84 9f       	mul	r24, r20
    682c:	60 0d       	add	r22, r0
    682e:	21 1d       	adc	r18, r1
    6830:	82 2f       	mov	r24, r18
    6832:	76 2f       	mov	r23, r22
    6834:	6a 2f       	mov	r22, r26
    6836:	11 24       	eor	r1, r1
    6838:	9f 57       	subi	r25, 0x7F	; 127
    683a:	50 40       	sbci	r21, 0x00	; 0
    683c:	9a f0       	brmi	.+38     	; 0x6864 <__mulsf3_pse+0x88>
    683e:	f1 f0       	breq	.+60     	; 0x687c <__mulsf3_pse+0xa0>
    6840:	88 23       	and	r24, r24
    6842:	4a f0       	brmi	.+18     	; 0x6856 <__mulsf3_pse+0x7a>
    6844:	ee 0f       	add	r30, r30
    6846:	ff 1f       	adc	r31, r31
    6848:	bb 1f       	adc	r27, r27
    684a:	66 1f       	adc	r22, r22
    684c:	77 1f       	adc	r23, r23
    684e:	88 1f       	adc	r24, r24
    6850:	91 50       	subi	r25, 0x01	; 1
    6852:	50 40       	sbci	r21, 0x00	; 0
    6854:	a9 f7       	brne	.-22     	; 0x6840 <__mulsf3_pse+0x64>
    6856:	9e 3f       	cpi	r25, 0xFE	; 254
    6858:	51 05       	cpc	r21, r1
    685a:	80 f0       	brcs	.+32     	; 0x687c <__mulsf3_pse+0xa0>
    685c:	0c 94 87 33 	jmp	0x670e	; 0x670e <__fp_inf>
    6860:	0c 94 d2 33 	jmp	0x67a4	; 0x67a4 <__fp_szero>
    6864:	5f 3f       	cpi	r21, 0xFF	; 255
    6866:	e4 f3       	brlt	.-8      	; 0x6860 <__mulsf3_pse+0x84>
    6868:	98 3e       	cpi	r25, 0xE8	; 232
    686a:	d4 f3       	brlt	.-12     	; 0x6860 <__mulsf3_pse+0x84>
    686c:	86 95       	lsr	r24
    686e:	77 95       	ror	r23
    6870:	67 95       	ror	r22
    6872:	b7 95       	ror	r27
    6874:	f7 95       	ror	r31
    6876:	e7 95       	ror	r30
    6878:	9f 5f       	subi	r25, 0xFF	; 255
    687a:	c1 f7       	brne	.-16     	; 0x686c <__mulsf3_pse+0x90>
    687c:	fe 2b       	or	r31, r30
    687e:	88 0f       	add	r24, r24
    6880:	91 1d       	adc	r25, r1
    6882:	96 95       	lsr	r25
    6884:	87 95       	ror	r24
    6886:	97 f9       	bld	r25, 7
    6888:	08 95       	ret

0000688a <__mulsi3>:
    688a:	db 01       	movw	r26, r22
    688c:	8f 93       	push	r24
    688e:	9f 93       	push	r25
    6890:	0e 94 8e 34 	call	0x691c	; 0x691c <__muluhisi3>
    6894:	bf 91       	pop	r27
    6896:	af 91       	pop	r26
    6898:	a2 9f       	mul	r26, r18
    689a:	80 0d       	add	r24, r0
    689c:	91 1d       	adc	r25, r1
    689e:	a3 9f       	mul	r26, r19
    68a0:	90 0d       	add	r25, r0
    68a2:	b2 9f       	mul	r27, r18
    68a4:	90 0d       	add	r25, r0
    68a6:	11 24       	eor	r1, r1
    68a8:	08 95       	ret

000068aa <__udivmodsi4>:
    68aa:	a1 e2       	ldi	r26, 0x21	; 33
    68ac:	1a 2e       	mov	r1, r26
    68ae:	aa 1b       	sub	r26, r26
    68b0:	bb 1b       	sub	r27, r27
    68b2:	fd 01       	movw	r30, r26
    68b4:	0d c0       	rjmp	.+26     	; 0x68d0 <__udivmodsi4_ep>

000068b6 <__udivmodsi4_loop>:
    68b6:	aa 1f       	adc	r26, r26
    68b8:	bb 1f       	adc	r27, r27
    68ba:	ee 1f       	adc	r30, r30
    68bc:	ff 1f       	adc	r31, r31
    68be:	a2 17       	cp	r26, r18
    68c0:	b3 07       	cpc	r27, r19
    68c2:	e4 07       	cpc	r30, r20
    68c4:	f5 07       	cpc	r31, r21
    68c6:	20 f0       	brcs	.+8      	; 0x68d0 <__udivmodsi4_ep>
    68c8:	a2 1b       	sub	r26, r18
    68ca:	b3 0b       	sbc	r27, r19
    68cc:	e4 0b       	sbc	r30, r20
    68ce:	f5 0b       	sbc	r31, r21

000068d0 <__udivmodsi4_ep>:
    68d0:	66 1f       	adc	r22, r22
    68d2:	77 1f       	adc	r23, r23
    68d4:	88 1f       	adc	r24, r24
    68d6:	99 1f       	adc	r25, r25
    68d8:	1a 94       	dec	r1
    68da:	69 f7       	brne	.-38     	; 0x68b6 <__udivmodsi4_loop>
    68dc:	60 95       	com	r22
    68de:	70 95       	com	r23
    68e0:	80 95       	com	r24
    68e2:	90 95       	com	r25
    68e4:	9b 01       	movw	r18, r22
    68e6:	ac 01       	movw	r20, r24
    68e8:	bd 01       	movw	r22, r26
    68ea:	cf 01       	movw	r24, r30
    68ec:	08 95       	ret

000068ee <__tablejump2__>:
    68ee:	ee 0f       	add	r30, r30
    68f0:	ff 1f       	adc	r31, r31
    68f2:	88 1f       	adc	r24, r24
    68f4:	8b bf       	out	0x3b, r24	; 59
    68f6:	07 90       	elpm	r0, Z+
    68f8:	f6 91       	elpm	r31, Z
    68fa:	e0 2d       	mov	r30, r0
    68fc:	19 94       	eijmp

000068fe <__umulhisi3>:
    68fe:	a2 9f       	mul	r26, r18
    6900:	b0 01       	movw	r22, r0
    6902:	b3 9f       	mul	r27, r19
    6904:	c0 01       	movw	r24, r0
    6906:	a3 9f       	mul	r26, r19
    6908:	70 0d       	add	r23, r0
    690a:	81 1d       	adc	r24, r1
    690c:	11 24       	eor	r1, r1
    690e:	91 1d       	adc	r25, r1
    6910:	b2 9f       	mul	r27, r18
    6912:	70 0d       	add	r23, r0
    6914:	81 1d       	adc	r24, r1
    6916:	11 24       	eor	r1, r1
    6918:	91 1d       	adc	r25, r1
    691a:	08 95       	ret

0000691c <__muluhisi3>:
    691c:	0e 94 7f 34 	call	0x68fe	; 0x68fe <__umulhisi3>
    6920:	a5 9f       	mul	r26, r21
    6922:	90 0d       	add	r25, r0
    6924:	b4 9f       	mul	r27, r20
    6926:	90 0d       	add	r25, r0
    6928:	a4 9f       	mul	r26, r20
    692a:	80 0d       	add	r24, r0
    692c:	91 1d       	adc	r25, r1
    692e:	11 24       	eor	r1, r1
    6930:	08 95       	ret

00006932 <__ftoa_engine>:
    6932:	28 30       	cpi	r18, 0x08	; 8
    6934:	08 f0       	brcs	.+2      	; 0x6938 <__ftoa_engine+0x6>
    6936:	27 e0       	ldi	r18, 0x07	; 7
    6938:	33 27       	eor	r19, r19
    693a:	da 01       	movw	r26, r20
    693c:	99 0f       	add	r25, r25
    693e:	31 1d       	adc	r19, r1
    6940:	87 fd       	sbrc	r24, 7
    6942:	91 60       	ori	r25, 0x01	; 1
    6944:	00 96       	adiw	r24, 0x00	; 0
    6946:	61 05       	cpc	r22, r1
    6948:	71 05       	cpc	r23, r1
    694a:	39 f4       	brne	.+14     	; 0x695a <__ftoa_engine+0x28>
    694c:	32 60       	ori	r19, 0x02	; 2
    694e:	2e 5f       	subi	r18, 0xFE	; 254
    6950:	3d 93       	st	X+, r19
    6952:	30 e3       	ldi	r19, 0x30	; 48
    6954:	2a 95       	dec	r18
    6956:	e1 f7       	brne	.-8      	; 0x6950 <__ftoa_engine+0x1e>
    6958:	08 95       	ret
    695a:	9f 3f       	cpi	r25, 0xFF	; 255
    695c:	30 f0       	brcs	.+12     	; 0x696a <__ftoa_engine+0x38>
    695e:	80 38       	cpi	r24, 0x80	; 128
    6960:	71 05       	cpc	r23, r1
    6962:	61 05       	cpc	r22, r1
    6964:	09 f0       	breq	.+2      	; 0x6968 <__ftoa_engine+0x36>
    6966:	3c 5f       	subi	r19, 0xFC	; 252
    6968:	3c 5f       	subi	r19, 0xFC	; 252
    696a:	3d 93       	st	X+, r19
    696c:	91 30       	cpi	r25, 0x01	; 1
    696e:	08 f0       	brcs	.+2      	; 0x6972 <__ftoa_engine+0x40>
    6970:	80 68       	ori	r24, 0x80	; 128
    6972:	91 1d       	adc	r25, r1
    6974:	df 93       	push	r29
    6976:	cf 93       	push	r28
    6978:	1f 93       	push	r17
    697a:	0f 93       	push	r16
    697c:	ff 92       	push	r15
    697e:	ef 92       	push	r14
    6980:	19 2f       	mov	r17, r25
    6982:	98 7f       	andi	r25, 0xF8	; 248
    6984:	96 95       	lsr	r25
    6986:	e9 2f       	mov	r30, r25
    6988:	96 95       	lsr	r25
    698a:	96 95       	lsr	r25
    698c:	e9 0f       	add	r30, r25
    698e:	ff 27       	eor	r31, r31
    6990:	ec 50       	subi	r30, 0x0C	; 12
    6992:	fa 4f       	sbci	r31, 0xFA	; 250
    6994:	99 27       	eor	r25, r25
    6996:	33 27       	eor	r19, r19
    6998:	ee 24       	eor	r14, r14
    699a:	ff 24       	eor	r15, r15
    699c:	a7 01       	movw	r20, r14
    699e:	e7 01       	movw	r28, r14
    69a0:	05 90       	lpm	r0, Z+
    69a2:	08 94       	sec
    69a4:	07 94       	ror	r0
    69a6:	28 f4       	brcc	.+10     	; 0x69b2 <__ftoa_engine+0x80>
    69a8:	36 0f       	add	r19, r22
    69aa:	e7 1e       	adc	r14, r23
    69ac:	f8 1e       	adc	r15, r24
    69ae:	49 1f       	adc	r20, r25
    69b0:	51 1d       	adc	r21, r1
    69b2:	66 0f       	add	r22, r22
    69b4:	77 1f       	adc	r23, r23
    69b6:	88 1f       	adc	r24, r24
    69b8:	99 1f       	adc	r25, r25
    69ba:	06 94       	lsr	r0
    69bc:	a1 f7       	brne	.-24     	; 0x69a6 <__ftoa_engine+0x74>
    69be:	05 90       	lpm	r0, Z+
    69c0:	07 94       	ror	r0
    69c2:	28 f4       	brcc	.+10     	; 0x69ce <__ftoa_engine+0x9c>
    69c4:	e7 0e       	add	r14, r23
    69c6:	f8 1e       	adc	r15, r24
    69c8:	49 1f       	adc	r20, r25
    69ca:	56 1f       	adc	r21, r22
    69cc:	c1 1d       	adc	r28, r1
    69ce:	77 0f       	add	r23, r23
    69d0:	88 1f       	adc	r24, r24
    69d2:	99 1f       	adc	r25, r25
    69d4:	66 1f       	adc	r22, r22
    69d6:	06 94       	lsr	r0
    69d8:	a1 f7       	brne	.-24     	; 0x69c2 <__ftoa_engine+0x90>
    69da:	05 90       	lpm	r0, Z+
    69dc:	07 94       	ror	r0
    69de:	28 f4       	brcc	.+10     	; 0x69ea <__ftoa_engine+0xb8>
    69e0:	f8 0e       	add	r15, r24
    69e2:	49 1f       	adc	r20, r25
    69e4:	56 1f       	adc	r21, r22
    69e6:	c7 1f       	adc	r28, r23
    69e8:	d1 1d       	adc	r29, r1
    69ea:	88 0f       	add	r24, r24
    69ec:	99 1f       	adc	r25, r25
    69ee:	66 1f       	adc	r22, r22
    69f0:	77 1f       	adc	r23, r23
    69f2:	06 94       	lsr	r0
    69f4:	a1 f7       	brne	.-24     	; 0x69de <__ftoa_engine+0xac>
    69f6:	05 90       	lpm	r0, Z+
    69f8:	07 94       	ror	r0
    69fa:	20 f4       	brcc	.+8      	; 0x6a04 <__ftoa_engine+0xd2>
    69fc:	49 0f       	add	r20, r25
    69fe:	56 1f       	adc	r21, r22
    6a00:	c7 1f       	adc	r28, r23
    6a02:	d8 1f       	adc	r29, r24
    6a04:	99 0f       	add	r25, r25
    6a06:	66 1f       	adc	r22, r22
    6a08:	77 1f       	adc	r23, r23
    6a0a:	88 1f       	adc	r24, r24
    6a0c:	06 94       	lsr	r0
    6a0e:	a9 f7       	brne	.-22     	; 0x69fa <__ftoa_engine+0xc8>
    6a10:	84 91       	lpm	r24, Z
    6a12:	10 95       	com	r17
    6a14:	17 70       	andi	r17, 0x07	; 7
    6a16:	41 f0       	breq	.+16     	; 0x6a28 <__ftoa_engine+0xf6>
    6a18:	d6 95       	lsr	r29
    6a1a:	c7 95       	ror	r28
    6a1c:	57 95       	ror	r21
    6a1e:	47 95       	ror	r20
    6a20:	f7 94       	ror	r15
    6a22:	e7 94       	ror	r14
    6a24:	1a 95       	dec	r17
    6a26:	c1 f7       	brne	.-16     	; 0x6a18 <__ftoa_engine+0xe6>
    6a28:	ea e9       	ldi	r30, 0x9A	; 154
    6a2a:	f5 e0       	ldi	r31, 0x05	; 5
    6a2c:	68 94       	set
    6a2e:	15 90       	lpm	r1, Z+
    6a30:	15 91       	lpm	r17, Z+
    6a32:	35 91       	lpm	r19, Z+
    6a34:	65 91       	lpm	r22, Z+
    6a36:	95 91       	lpm	r25, Z+
    6a38:	05 90       	lpm	r0, Z+
    6a3a:	7f e2       	ldi	r23, 0x2F	; 47
    6a3c:	73 95       	inc	r23
    6a3e:	e1 18       	sub	r14, r1
    6a40:	f1 0a       	sbc	r15, r17
    6a42:	43 0b       	sbc	r20, r19
    6a44:	56 0b       	sbc	r21, r22
    6a46:	c9 0b       	sbc	r28, r25
    6a48:	d0 09       	sbc	r29, r0
    6a4a:	c0 f7       	brcc	.-16     	; 0x6a3c <__ftoa_engine+0x10a>
    6a4c:	e1 0c       	add	r14, r1
    6a4e:	f1 1e       	adc	r15, r17
    6a50:	43 1f       	adc	r20, r19
    6a52:	56 1f       	adc	r21, r22
    6a54:	c9 1f       	adc	r28, r25
    6a56:	d0 1d       	adc	r29, r0
    6a58:	7e f4       	brtc	.+30     	; 0x6a78 <__ftoa_engine+0x146>
    6a5a:	70 33       	cpi	r23, 0x30	; 48
    6a5c:	11 f4       	brne	.+4      	; 0x6a62 <__ftoa_engine+0x130>
    6a5e:	8a 95       	dec	r24
    6a60:	e6 cf       	rjmp	.-52     	; 0x6a2e <__ftoa_engine+0xfc>
    6a62:	e8 94       	clt
    6a64:	01 50       	subi	r16, 0x01	; 1
    6a66:	30 f0       	brcs	.+12     	; 0x6a74 <__ftoa_engine+0x142>
    6a68:	08 0f       	add	r16, r24
    6a6a:	0a f4       	brpl	.+2      	; 0x6a6e <__ftoa_engine+0x13c>
    6a6c:	00 27       	eor	r16, r16
    6a6e:	02 17       	cp	r16, r18
    6a70:	08 f4       	brcc	.+2      	; 0x6a74 <__ftoa_engine+0x142>
    6a72:	20 2f       	mov	r18, r16
    6a74:	23 95       	inc	r18
    6a76:	02 2f       	mov	r16, r18
    6a78:	7a 33       	cpi	r23, 0x3A	; 58
    6a7a:	28 f0       	brcs	.+10     	; 0x6a86 <__ftoa_engine+0x154>
    6a7c:	79 e3       	ldi	r23, 0x39	; 57
    6a7e:	7d 93       	st	X+, r23
    6a80:	2a 95       	dec	r18
    6a82:	e9 f7       	brne	.-6      	; 0x6a7e <__ftoa_engine+0x14c>
    6a84:	10 c0       	rjmp	.+32     	; 0x6aa6 <__ftoa_engine+0x174>
    6a86:	7d 93       	st	X+, r23
    6a88:	2a 95       	dec	r18
    6a8a:	89 f6       	brne	.-94     	; 0x6a2e <__ftoa_engine+0xfc>
    6a8c:	06 94       	lsr	r0
    6a8e:	97 95       	ror	r25
    6a90:	67 95       	ror	r22
    6a92:	37 95       	ror	r19
    6a94:	17 95       	ror	r17
    6a96:	17 94       	ror	r1
    6a98:	e1 18       	sub	r14, r1
    6a9a:	f1 0a       	sbc	r15, r17
    6a9c:	43 0b       	sbc	r20, r19
    6a9e:	56 0b       	sbc	r21, r22
    6aa0:	c9 0b       	sbc	r28, r25
    6aa2:	d0 09       	sbc	r29, r0
    6aa4:	98 f0       	brcs	.+38     	; 0x6acc <__ftoa_engine+0x19a>
    6aa6:	23 95       	inc	r18
    6aa8:	7e 91       	ld	r23, -X
    6aaa:	73 95       	inc	r23
    6aac:	7a 33       	cpi	r23, 0x3A	; 58
    6aae:	08 f0       	brcs	.+2      	; 0x6ab2 <__ftoa_engine+0x180>
    6ab0:	70 e3       	ldi	r23, 0x30	; 48
    6ab2:	7c 93       	st	X, r23
    6ab4:	20 13       	cpse	r18, r16
    6ab6:	b8 f7       	brcc	.-18     	; 0x6aa6 <__ftoa_engine+0x174>
    6ab8:	7e 91       	ld	r23, -X
    6aba:	70 61       	ori	r23, 0x10	; 16
    6abc:	7d 93       	st	X+, r23
    6abe:	30 f0       	brcs	.+12     	; 0x6acc <__ftoa_engine+0x19a>
    6ac0:	83 95       	inc	r24
    6ac2:	71 e3       	ldi	r23, 0x31	; 49
    6ac4:	7d 93       	st	X+, r23
    6ac6:	70 e3       	ldi	r23, 0x30	; 48
    6ac8:	2a 95       	dec	r18
    6aca:	e1 f7       	brne	.-8      	; 0x6ac4 <__ftoa_engine+0x192>
    6acc:	11 24       	eor	r1, r1
    6ace:	ef 90       	pop	r14
    6ad0:	ff 90       	pop	r15
    6ad2:	0f 91       	pop	r16
    6ad4:	1f 91       	pop	r17
    6ad6:	cf 91       	pop	r28
    6ad8:	df 91       	pop	r29
    6ada:	99 27       	eor	r25, r25
    6adc:	87 fd       	sbrc	r24, 7
    6ade:	90 95       	com	r25
    6ae0:	08 95       	ret

00006ae2 <memcpy>:
    6ae2:	fb 01       	movw	r30, r22
    6ae4:	dc 01       	movw	r26, r24
    6ae6:	02 c0       	rjmp	.+4      	; 0x6aec <memcpy+0xa>
    6ae8:	01 90       	ld	r0, Z+
    6aea:	0d 92       	st	X+, r0
    6aec:	41 50       	subi	r20, 0x01	; 1
    6aee:	50 40       	sbci	r21, 0x00	; 0
    6af0:	d8 f7       	brcc	.-10     	; 0x6ae8 <memcpy+0x6>
    6af2:	08 95       	ret

00006af4 <memset>:
    6af4:	dc 01       	movw	r26, r24
    6af6:	01 c0       	rjmp	.+2      	; 0x6afa <memset+0x6>
    6af8:	6d 93       	st	X+, r22
    6afa:	41 50       	subi	r20, 0x01	; 1
    6afc:	50 40       	sbci	r21, 0x00	; 0
    6afe:	e0 f7       	brcc	.-8      	; 0x6af8 <memset+0x4>
    6b00:	08 95       	ret

00006b02 <strncpy>:
    6b02:	fb 01       	movw	r30, r22
    6b04:	dc 01       	movw	r26, r24
    6b06:	41 50       	subi	r20, 0x01	; 1
    6b08:	50 40       	sbci	r21, 0x00	; 0
    6b0a:	48 f0       	brcs	.+18     	; 0x6b1e <strncpy+0x1c>
    6b0c:	01 90       	ld	r0, Z+
    6b0e:	0d 92       	st	X+, r0
    6b10:	00 20       	and	r0, r0
    6b12:	c9 f7       	brne	.-14     	; 0x6b06 <strncpy+0x4>
    6b14:	01 c0       	rjmp	.+2      	; 0x6b18 <strncpy+0x16>
    6b16:	1d 92       	st	X+, r1
    6b18:	41 50       	subi	r20, 0x01	; 1
    6b1a:	50 40       	sbci	r21, 0x00	; 0
    6b1c:	e0 f7       	brcc	.-8      	; 0x6b16 <strncpy+0x14>
    6b1e:	08 95       	ret

00006b20 <__itoa_ncheck>:
    6b20:	bb 27       	eor	r27, r27
    6b22:	4a 30       	cpi	r20, 0x0A	; 10
    6b24:	31 f4       	brne	.+12     	; 0x6b32 <__itoa_ncheck+0x12>
    6b26:	99 23       	and	r25, r25
    6b28:	22 f4       	brpl	.+8      	; 0x6b32 <__itoa_ncheck+0x12>
    6b2a:	bd e2       	ldi	r27, 0x2D	; 45
    6b2c:	90 95       	com	r25
    6b2e:	81 95       	neg	r24
    6b30:	9f 4f       	sbci	r25, 0xFF	; 255
    6b32:	0c 94 e3 35 	jmp	0x6bc6	; 0x6bc6 <__utoa_common>

00006b36 <__ltoa_ncheck>:
    6b36:	bb 27       	eor	r27, r27
    6b38:	2a 30       	cpi	r18, 0x0A	; 10
    6b3a:	51 f4       	brne	.+20     	; 0x6b50 <__ltoa_ncheck+0x1a>
    6b3c:	99 23       	and	r25, r25
    6b3e:	42 f4       	brpl	.+16     	; 0x6b50 <__ltoa_ncheck+0x1a>
    6b40:	bd e2       	ldi	r27, 0x2D	; 45
    6b42:	90 95       	com	r25
    6b44:	80 95       	com	r24
    6b46:	70 95       	com	r23
    6b48:	61 95       	neg	r22
    6b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    6b4c:	8f 4f       	sbci	r24, 0xFF	; 255
    6b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    6b50:	0c 94 b6 35 	jmp	0x6b6c	; 0x6b6c <__ultoa_common>

00006b54 <ultoa>:
    6b54:	25 32       	cpi	r18, 0x25	; 37
    6b56:	31 05       	cpc	r19, r1
    6b58:	20 f4       	brcc	.+8      	; 0x6b62 <ultoa+0xe>
    6b5a:	22 30       	cpi	r18, 0x02	; 2
    6b5c:	10 f0       	brcs	.+4      	; 0x6b62 <ultoa+0xe>
    6b5e:	0c 94 b5 35 	jmp	0x6b6a	; 0x6b6a <__ultoa_ncheck>
    6b62:	fa 01       	movw	r30, r20
    6b64:	10 82       	st	Z, r1
    6b66:	ca 01       	movw	r24, r20
    6b68:	08 95       	ret

00006b6a <__ultoa_ncheck>:
    6b6a:	bb 27       	eor	r27, r27

00006b6c <__ultoa_common>:
    6b6c:	fa 01       	movw	r30, r20
    6b6e:	a6 2f       	mov	r26, r22
    6b70:	62 17       	cp	r22, r18
    6b72:	71 05       	cpc	r23, r1
    6b74:	81 05       	cpc	r24, r1
    6b76:	91 05       	cpc	r25, r1
    6b78:	33 0b       	sbc	r19, r19
    6b7a:	30 fb       	bst	r19, 0
    6b7c:	66 f0       	brts	.+24     	; 0x6b96 <__ultoa_common+0x2a>
    6b7e:	aa 27       	eor	r26, r26
    6b80:	66 0f       	add	r22, r22
    6b82:	77 1f       	adc	r23, r23
    6b84:	88 1f       	adc	r24, r24
    6b86:	99 1f       	adc	r25, r25
    6b88:	aa 1f       	adc	r26, r26
    6b8a:	a2 17       	cp	r26, r18
    6b8c:	10 f0       	brcs	.+4      	; 0x6b92 <__ultoa_common+0x26>
    6b8e:	a2 1b       	sub	r26, r18
    6b90:	63 95       	inc	r22
    6b92:	38 50       	subi	r19, 0x08	; 8
    6b94:	a9 f7       	brne	.-22     	; 0x6b80 <__ultoa_common+0x14>
    6b96:	a0 5d       	subi	r26, 0xD0	; 208
    6b98:	aa 33       	cpi	r26, 0x3A	; 58
    6b9a:	08 f0       	brcs	.+2      	; 0x6b9e <__ultoa_common+0x32>
    6b9c:	a9 5d       	subi	r26, 0xD9	; 217
    6b9e:	a1 93       	st	Z+, r26
    6ba0:	36 f7       	brtc	.-52     	; 0x6b6e <__ultoa_common+0x2>
    6ba2:	b1 11       	cpse	r27, r1
    6ba4:	b1 93       	st	Z+, r27
    6ba6:	10 82       	st	Z, r1
    6ba8:	ca 01       	movw	r24, r20
    6baa:	0c 94 fc 35 	jmp	0x6bf8	; 0x6bf8 <strrev>

00006bae <utoa>:
    6bae:	45 32       	cpi	r20, 0x25	; 37
    6bb0:	51 05       	cpc	r21, r1
    6bb2:	20 f4       	brcc	.+8      	; 0x6bbc <utoa+0xe>
    6bb4:	42 30       	cpi	r20, 0x02	; 2
    6bb6:	10 f0       	brcs	.+4      	; 0x6bbc <utoa+0xe>
    6bb8:	0c 94 e2 35 	jmp	0x6bc4	; 0x6bc4 <__utoa_ncheck>
    6bbc:	fb 01       	movw	r30, r22
    6bbe:	10 82       	st	Z, r1
    6bc0:	cb 01       	movw	r24, r22
    6bc2:	08 95       	ret

00006bc4 <__utoa_ncheck>:
    6bc4:	bb 27       	eor	r27, r27

00006bc6 <__utoa_common>:
    6bc6:	fb 01       	movw	r30, r22
    6bc8:	55 27       	eor	r21, r21
    6bca:	aa 27       	eor	r26, r26
    6bcc:	88 0f       	add	r24, r24
    6bce:	99 1f       	adc	r25, r25
    6bd0:	aa 1f       	adc	r26, r26
    6bd2:	a4 17       	cp	r26, r20
    6bd4:	10 f0       	brcs	.+4      	; 0x6bda <__utoa_common+0x14>
    6bd6:	a4 1b       	sub	r26, r20
    6bd8:	83 95       	inc	r24
    6bda:	50 51       	subi	r21, 0x10	; 16
    6bdc:	b9 f7       	brne	.-18     	; 0x6bcc <__utoa_common+0x6>
    6bde:	a0 5d       	subi	r26, 0xD0	; 208
    6be0:	aa 33       	cpi	r26, 0x3A	; 58
    6be2:	08 f0       	brcs	.+2      	; 0x6be6 <__utoa_common+0x20>
    6be4:	a9 5d       	subi	r26, 0xD9	; 217
    6be6:	a1 93       	st	Z+, r26
    6be8:	00 97       	sbiw	r24, 0x00	; 0
    6bea:	79 f7       	brne	.-34     	; 0x6bca <__utoa_common+0x4>
    6bec:	b1 11       	cpse	r27, r1
    6bee:	b1 93       	st	Z+, r27
    6bf0:	11 92       	st	Z+, r1
    6bf2:	cb 01       	movw	r24, r22
    6bf4:	0c 94 fc 35 	jmp	0x6bf8	; 0x6bf8 <strrev>

00006bf8 <strrev>:
    6bf8:	dc 01       	movw	r26, r24
    6bfa:	fc 01       	movw	r30, r24
    6bfc:	67 2f       	mov	r22, r23
    6bfe:	71 91       	ld	r23, Z+
    6c00:	77 23       	and	r23, r23
    6c02:	e1 f7       	brne	.-8      	; 0x6bfc <strrev+0x4>
    6c04:	32 97       	sbiw	r30, 0x02	; 2
    6c06:	04 c0       	rjmp	.+8      	; 0x6c10 <strrev+0x18>
    6c08:	7c 91       	ld	r23, X
    6c0a:	6d 93       	st	X+, r22
    6c0c:	70 83       	st	Z, r23
    6c0e:	62 91       	ld	r22, -Z
    6c10:	ae 17       	cp	r26, r30
    6c12:	bf 07       	cpc	r27, r31
    6c14:	c8 f3       	brcs	.-14     	; 0x6c08 <strrev+0x10>
    6c16:	08 95       	ret

00006c18 <_exit>:
    6c18:	f8 94       	cli

00006c1a <__stop_program>:
    6c1a:	ff cf       	rjmp	.-2      	; 0x6c1a <__stop_program>
