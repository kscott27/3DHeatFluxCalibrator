
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006c8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  00802000  00006c8a  00006d1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000211d  008020f0  008020f0  00006e0e  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00006e0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00006e70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000970  00000000  00000000  00006eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001d48c  00000000  00000000  00007824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007791  00000000  00000000  00024cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007229  00000000  00000000  0002c441  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ed8  00000000  00000000  0003366c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000077b7  00000000  00000000  00035544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000973f  00000000  00000000  0003ccfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000828  00000000  00000000  0004643a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__ctors_end>
       4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
       8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
       c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      10:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      14:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      18:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      1c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      20:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      24:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      28:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      2c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      30:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      34:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      38:	0c 94 b6 1d 	jmp	0x3b6c	; 0x3b6c <__vector_14>
      3c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      40:	0c 94 85 1d 	jmp	0x3b0a	; 0x3b0a <__vector_16>
      44:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      48:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      4c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      50:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      54:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      58:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      5c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      60:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      64:	0c 94 63 30 	jmp	0x60c6	; 0x60c6 <__vector_25>
      68:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      6c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      70:	0c 94 bb 30 	jmp	0x6176	; 0x6176 <__vector_28>
      74:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      78:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      7c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      80:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      84:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      88:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      8c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      90:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      94:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      98:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      9c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      a0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      a4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      a8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      ac:	0c 94 c3 1b 	jmp	0x3786	; 0x3786 <__vector_43>
      b0:	0c 94 02 1c 	jmp	0x3804	; 0x3804 <__vector_44>
      b4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      b8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      bc:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      c0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      c4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      c8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      cc:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      d0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      d4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      d8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      dc:	0c 94 53 21 	jmp	0x42a6	; 0x42a6 <__vector_55>
      e0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      e4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      e8:	0c 94 c3 31 	jmp	0x6386	; 0x6386 <__vector_58>
      ec:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      f0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      f4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      f8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
      fc:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     100:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     104:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     108:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <__vector_66>
     10c:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__vector_67>
     110:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     114:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     118:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     11c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     120:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     124:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     128:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     12c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     130:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     134:	0c 94 54 1d 	jmp	0x3aa8	; 0x3aa8 <__vector_77>
     138:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     13c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     140:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     144:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     148:	0c 94 23 1d 	jmp	0x3a46	; 0x3a46 <__vector_82>
     14c:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <__vector_83>
     150:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     154:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__vector_85>
     158:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     15c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     160:	0c 94 13 31 	jmp	0x6226	; 0x6226 <__vector_88>
     164:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     168:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     16c:	0c 94 6b 31 	jmp	0x62d6	; 0x62d6 <__vector_91>
     170:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     174:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     178:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     17c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     180:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     184:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     188:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     18c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     190:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     194:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     198:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     19c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1a0:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <__vector_104>
     1a4:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__vector_105>
     1a8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1ac:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1b0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1b4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1b8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1bc:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1c0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1c4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1c8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1cc:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1d0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1d4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1d8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1dc:	0c 94 1b 32 	jmp	0x6436	; 0x6436 <__vector_119>
     1e0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1e4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1e8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1ec:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1f0:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1f4:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1f8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__bad_interrupt>
     1fc:	3c 0a       	sbc	r3, r28
     1fe:	41 0a       	sbc	r4, r17
     200:	6d 0a       	sbc	r6, r29
     202:	98 0a       	sbc	r9, r24
     204:	24 0b       	sbc	r18, r20
     206:	b3 0b       	sbc	r27, r19
     208:	f4 0b       	sbc	r31, r20
     20a:	92 0c       	add	r9, r2
     20c:	b4 0d       	add	r27, r4
     20e:	0c 12       	cpse	r0, r28
     210:	bc 17       	cp	r27, r28
     212:	83 12       	cpse	r8, r19
     214:	9a 12       	cpse	r9, r26
     216:	40 12       	cpse	r4, r16
     218:	bc 17       	cp	r27, r28
     21a:	bc 17       	cp	r27, r28
     21c:	bc 17       	cp	r27, r28
     21e:	6c 12       	cpse	r6, r28
     220:	bc 17       	cp	r27, r28
     222:	bc 17       	cp	r27, r28
     224:	bc 17       	cp	r27, r28
     226:	bc 17       	cp	r27, r28
     228:	bc 17       	cp	r27, r28
     22a:	2a 12       	cpse	r2, r26
     22c:	b6 12       	cpse	r11, r22
     22e:	bc 17       	cp	r27, r28
     230:	a8 12       	cpse	r10, r24
     232:	ad 12       	cpse	r10, r29
     234:	ec 13       	cpse	r30, r28
     236:	bc 17       	cp	r27, r28
     238:	bc 17       	cp	r27, r28
     23a:	bc 17       	cp	r27, r28
     23c:	0e 14       	cp	r0, r14
     23e:	1c 14       	cp	r1, r12
     240:	28 14       	cp	r2, r8
     242:	34 14       	cp	r3, r4
     244:	40 14       	cp	r4, r0
     246:	4c 14       	cp	r4, r12
     248:	58 14       	cp	r5, r8
     24a:	64 14       	cp	r6, r4
     24c:	70 14       	cp	r7, r0
     24e:	7c 14       	cp	r7, r12
     250:	bc 17       	cp	r27, r28
     252:	bc 17       	cp	r27, r28
     254:	bc 17       	cp	r27, r28
     256:	bc 17       	cp	r27, r28
     258:	bc 17       	cp	r27, r28
     25a:	bc 17       	cp	r27, r28
     25c:	bc 17       	cp	r27, r28
     25e:	bc 17       	cp	r27, r28
     260:	bc 17       	cp	r27, r28
     262:	bc 17       	cp	r27, r28
     264:	bc 17       	cp	r27, r28
     266:	bc 17       	cp	r27, r28
     268:	bc 17       	cp	r27, r28
     26a:	bc 17       	cp	r27, r28
     26c:	bc 17       	cp	r27, r28
     26e:	bc 17       	cp	r27, r28
     270:	bc 17       	cp	r27, r28
     272:	bc 17       	cp	r27, r28
     274:	bc 17       	cp	r27, r28
     276:	bc 17       	cp	r27, r28
     278:	bc 17       	cp	r27, r28
     27a:	bc 17       	cp	r27, r28
     27c:	bc 17       	cp	r27, r28
     27e:	bc 17       	cp	r27, r28
     280:	bc 17       	cp	r27, r28
     282:	bc 17       	cp	r27, r28
     284:	bc 17       	cp	r27, r28
     286:	bc 17       	cp	r27, r28
     288:	bc 17       	cp	r27, r28
     28a:	bc 17       	cp	r27, r28
     28c:	bc 17       	cp	r27, r28
     28e:	bc 17       	cp	r27, r28
     290:	bc 17       	cp	r27, r28
     292:	bc 17       	cp	r27, r28
     294:	bc 17       	cp	r27, r28
     296:	bc 17       	cp	r27, r28
     298:	bc 17       	cp	r27, r28
     29a:	bc 17       	cp	r27, r28
     29c:	bc 17       	cp	r27, r28
     29e:	72 13       	cpse	r23, r18
     2a0:	bc 17       	cp	r27, r28
     2a2:	bc 17       	cp	r27, r28
     2a4:	bc 17       	cp	r27, r28
     2a6:	06 13       	cpse	r16, r22
     2a8:	bc 17       	cp	r27, r28
     2aa:	da 13       	cpse	r29, r26
     2ac:	bc 17       	cp	r27, r28
     2ae:	bc 17       	cp	r27, r28
     2b0:	bc 17       	cp	r27, r28
     2b2:	bc 17       	cp	r27, r28
     2b4:	bc 17       	cp	r27, r28
     2b6:	bc 17       	cp	r27, r28
     2b8:	bc 17       	cp	r27, r28
     2ba:	bc 17       	cp	r27, r28
     2bc:	bc 17       	cp	r27, r28
     2be:	bc 17       	cp	r27, r28
     2c0:	01 13       	cpse	r16, r17
     2c2:	bc 17       	cp	r27, r28
     2c4:	bc 17       	cp	r27, r28
     2c6:	bc 17       	cp	r27, r28
     2c8:	bc 17       	cp	r27, r28
     2ca:	bc 17       	cp	r27, r28
     2cc:	89 13       	cpse	r24, r25
     2ce:	a4 13       	cpse	r26, r20
     2d0:	bf 13       	cpse	r27, r31
     2d2:	eb 14       	cp	r14, r11
     2d4:	f8 14       	cp	r15, r8
     2d6:	bc 17       	cp	r27, r28
     2d8:	bc 17       	cp	r27, r28
     2da:	bc 17       	cp	r27, r28
     2dc:	bc 17       	cp	r27, r28
     2de:	bc 17       	cp	r27, r28
     2e0:	bc 17       	cp	r27, r28
     2e2:	bc 17       	cp	r27, r28
     2e4:	bc 17       	cp	r27, r28
     2e6:	bc 17       	cp	r27, r28
     2e8:	bc 17       	cp	r27, r28
     2ea:	bc 17       	cp	r27, r28
     2ec:	22 15       	cp	r18, r2
     2ee:	4c 15       	cp	r20, r12
     2f0:	bc 17       	cp	r27, r28
     2f2:	bc 17       	cp	r27, r28
     2f4:	bc 17       	cp	r27, r28
     2f6:	bc 17       	cp	r27, r28
     2f8:	d9 14       	cp	r13, r9
     2fa:	df 14       	cp	r13, r15
     2fc:	e5 14       	cp	r14, r5
     2fe:	ae 16       	cp	r10, r30
     300:	bc 17       	cp	r27, r28
     302:	bc 17       	cp	r27, r28
     304:	bc 17       	cp	r27, r28
     306:	24 17       	cp	r18, r20
     308:	30 17       	cp	r19, r16
     30a:	3c 17       	cp	r19, r28
     30c:	48 17       	cp	r20, r24
     30e:	54 17       	cp	r21, r20
     310:	60 17       	cp	r22, r16
     312:	6c 17       	cp	r22, r28
     314:	78 17       	cp	r23, r24
     316:	84 17       	cp	r24, r20
     318:	90 17       	cp	r25, r16
     31a:	bc 17       	cp	r27, r28
     31c:	bc 17       	cp	r27, r28
     31e:	bc 17       	cp	r27, r28
     320:	bc 17       	cp	r27, r28
     322:	bc 17       	cp	r27, r28
     324:	bc 17       	cp	r27, r28
     326:	bc 17       	cp	r27, r28
     328:	bc 17       	cp	r27, r28
     32a:	bc 17       	cp	r27, r28
     32c:	bc 17       	cp	r27, r28
     32e:	bc 17       	cp	r27, r28
     330:	bc 17       	cp	r27, r28
     332:	bc 17       	cp	r27, r28
     334:	bc 17       	cp	r27, r28
     336:	bc 17       	cp	r27, r28
     338:	bc 17       	cp	r27, r28
     33a:	bc 17       	cp	r27, r28
     33c:	bc 17       	cp	r27, r28
     33e:	bc 17       	cp	r27, r28
     340:	bc 17       	cp	r27, r28
     342:	bc 17       	cp	r27, r28
     344:	bc 17       	cp	r27, r28
     346:	bc 17       	cp	r27, r28
     348:	bc 17       	cp	r27, r28
     34a:	bc 17       	cp	r27, r28
     34c:	bc 17       	cp	r27, r28
     34e:	bc 17       	cp	r27, r28
     350:	bc 17       	cp	r27, r28
     352:	bc 17       	cp	r27, r28
     354:	bc 17       	cp	r27, r28
     356:	bc 17       	cp	r27, r28
     358:	bc 17       	cp	r27, r28
     35a:	bc 17       	cp	r27, r28
     35c:	bc 17       	cp	r27, r28
     35e:	bc 17       	cp	r27, r28
     360:	bc 17       	cp	r27, r28
     362:	bc 17       	cp	r27, r28
     364:	bc 17       	cp	r27, r28
     366:	bc 17       	cp	r27, r28
     368:	34 16       	cp	r3, r20
     36a:	bc 17       	cp	r27, r28
     36c:	bc 17       	cp	r27, r28
     36e:	bc 17       	cp	r27, r28
     370:	15 16       	cp	r1, r21
     372:	bc 17       	cp	r27, r28
     374:	bc 17       	cp	r27, r28
     376:	bc 17       	cp	r27, r28
     378:	bc 17       	cp	r27, r28
     37a:	bc 17       	cp	r27, r28
     37c:	bc 17       	cp	r27, r28
     37e:	bc 17       	cp	r27, r28
     380:	bc 17       	cp	r27, r28
     382:	0a 17       	cp	r16, r26
     384:	bc 17       	cp	r27, r28
     386:	bc 17       	cp	r27, r28
     388:	bc 17       	cp	r27, r28
     38a:	bc 17       	cp	r27, r28
     38c:	f2 16       	cp	r15, r18
     38e:	bc 17       	cp	r27, r28
     390:	d8 16       	cp	r13, r24
     392:	a6 15       	cp	r26, r6
     394:	bc 17       	cp	r27, r28
     396:	be 15       	cp	r27, r14
     398:	db 15       	cp	r29, r11
     39a:	f8 15       	cp	r31, r8
     39c:	dc 2c       	mov	r13, r12
     39e:	df 2c       	mov	r13, r15
     3a0:	e2 2c       	mov	r14, r2
     3a2:	e5 2c       	mov	r14, r5
     3a4:	e8 2c       	mov	r14, r8
     3a6:	eb 2c       	mov	r14, r11
     3a8:	ed 2c       	mov	r14, r13
     3aa:	fe 2c       	mov	r15, r14
     3ac:	06 2d       	mov	r16, r6
     3ae:	10 2d       	mov	r17, r0
     3b0:	0e 2d       	mov	r16, r14

000003b2 <__trampolines_start>:
     3b2:	0c 94 eb 2c 	jmp	0x59d6	; 0x59d6 <_ZN8emstreamlsE15ser_manipulator+0x3c>
     3b6:	0c 94 e2 2c 	jmp	0x59c4	; 0x59c4 <_ZN8emstreamlsE15ser_manipulator+0x2a>
     3ba:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <_ZN9task_user3runEv+0x596>
     3be:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <_ZN9frt_queueImE3getEv>
     3c2:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <_ZN9task_user3runEv+0x1a6>
     3c6:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <_ZN9task_user3runEv+0xb8e>
     3ca:	0c 94 07 18 	jmp	0x300e	; 0x300e <_ZN9frt_queueImE12ISR_is_emptyEv>
     3ce:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <_ZN9task_user3runEv+0x566>
     3d2:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <_ZN9task_user3runEv+0x8f8>
     3d6:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <_ZN9task_user3runEv+0x936>
     3da:	0c 94 db 2b 	jmp	0x57b6	; 0x57b6 <__cxa_pure_virtual>
     3de:	0c 94 ae 18 	jmp	0x315c	; 0x315c <_ZN9frt_queueImE11ISR_butt_inERKm>
     3e2:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <_ZN9task_user3runEv+0x202>
     3e6:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <_ZN9task_user3runEv+0x122>
     3ea:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <_ZN10FakeDM542T11free_motionEv>
     3ee:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <_ZN9task_user3runEv+0x766>
     3f2:	0c 94 0a 17 	jmp	0x2e14	; 0x2e14 <_ZN9task_user3runEv+0xae2>
     3f6:	0c 94 b6 2f 	jmp	0x5f6c	; 0x5f6c <_ZN5rs23214check_for_charEv>
     3fa:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <_ZN7task_md3runEv+0x3a8>
     3fe:	0c 94 34 14 	jmp	0x2868	; 0x2868 <_ZN9task_user3runEv+0x536>
     402:	0c 94 cf 2a 	jmp	0x559e	; 0x559e <_ZN8frt_task12print_statusER8emstream>
     406:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <_ZN8emstreamlsE15ser_manipulator+0x36>
     40a:	0c 94 89 13 	jmp	0x2712	; 0x2712 <_ZN9task_user3runEv+0x3e0>
     40e:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <_ZN7task_md3runEv>
     412:	0c 94 c6 18 	jmp	0x318c	; 0x318c <_ZN9frt_queueImE7ISR_putERKm>
     416:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <_ZN9task_user3runEv+0x8be>
     41a:	0c 94 40 14 	jmp	0x2880	; 0x2880 <_ZN9task_user3runEv+0x54e>
     41e:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <_ZN9task_user3runEv+0x506>
     422:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <_ZN9task_user3runEv+0xbee>
     426:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <_ZN10FakeDM542T14set_signal_lowEv>
     42a:	0c 94 5f 2b 	jmp	0x56be	; 0x56be <_ZN14frt_text_queue7getcharEv>
     42e:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <_ZN9task_user3runEv+0xe6>
     432:	0c 94 ed 2c 	jmp	0x59da	; 0x59da <_ZN8emstreamlsE15ser_manipulator+0x40>
     436:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <_ZN10FakeDM542T13get_directionEv>
     43a:	0c 94 06 13 	jmp	0x260c	; 0x260c <_ZN9task_user3runEv+0x2da>
     43e:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <_ZN9task_user3runEv+0x6a4>
     442:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <_GLOBAL__sub_I_counter>
     446:	0c 94 e5 2c 	jmp	0x59ca	; 0x59ca <_ZN8emstreamlsE15ser_manipulator+0x30>
     44a:	0c 94 87 2c 	jmp	0x590e	; 0x590e <_ZN8emstream12clear_screenEv>
     44e:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <_ZN9task_user3runEv+0xbd6>
     452:	0c 94 b6 12 	jmp	0x256c	; 0x256c <_ZN9task_user3runEv+0x23a>
     456:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <_ZN9task_user3runEv+0xb2e>
     45a:	0c 94 10 2d 	jmp	0x5a20	; 0x5a20 <_ZN8emstreamlsE15ser_manipulator+0x86>
     45e:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <_ZN9task_user3runEv+0x6be>
     462:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <_call_static_run_method>
     466:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <_ZN9task_user3runEv+0xbbe>
     46a:	0c 94 0e 2d 	jmp	0x5a1c	; 0x5a1c <_ZN8emstreamlsE15ser_manipulator+0x82>
     46e:	0c 94 06 2d 	jmp	0x5a0c	; 0x5a0c <_ZN8emstreamlsE15ser_manipulator+0x72>
     472:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <_ZN9task_user3runEv+0x21e>
     476:	0c 94 e1 17 	jmp	0x2fc2	; 0x2fc2 <_ZN10FakeDM542T8motorOffEv>
     47a:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <_ZN7task_md3runEv+0x728>
     47e:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <_ZN9frt_queueImE7butt_inERKm>
     482:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <_ZN9frt_queueImE13ISR_not_emptyEv>
     486:	0c 94 86 2c 	jmp	0x590c	; 0x590c <_ZN8emstream12transmit_nowEv>
     48a:	0c 94 01 13 	jmp	0x2602	; 0x2602 <_ZN9task_user3runEv+0x2d0>
     48e:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <_ZN9task_user3runEv+0xb46>
     492:	0c 94 88 2b 	jmp	0x5710	; 0x5710 <_ZN14frt_text_queue7putcharEc>
     496:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <_ZN9task_user3runEv+0x5c6>
     49a:	0c 94 dc 2c 	jmp	0x59b8	; 0x59b8 <_ZN8emstreamlsE15ser_manipulator+0x1e>
     49e:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <_ZN9frt_queueImE3putERKm>
     4a2:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <_ZN9task_user3runEv+0x4a6>
     4a6:	0c 94 18 18 	jmp	0x3030	; 0x3030 <_ZN9frt_queueImE9not_emptyEv>
     4aa:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <_ZN9task_user3runEv+0xab2>
     4ae:	0c 94 2d 18 	jmp	0x305a	; 0x305a <_ZN9frt_queueImE10get_a_copyERm>
     4b2:	0c 94 28 14 	jmp	0x2850	; 0x2850 <_ZN9task_user3runEv+0x51e>
     4b6:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <_ZN10FakeDM542T7motorCWEv>
     4ba:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <_ZN9task_user3runEv+0x482>
     4be:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <_ZN9task_user3runEv+0xb76>
     4c2:	0c 94 df 2c 	jmp	0x59be	; 0x59be <_ZN8emstreamlsE15ser_manipulator+0x24>
     4c6:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <_ZN9frt_queueImE3getEPm>
     4ca:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <_ZN10FakeDM542T9disableCWEv>
     4ce:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <_ZN9task_user3runEv+0x884>
     4d2:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <_ZN9task_user3runEv+0xc46>
     4d6:	0c 94 6c 2f 	jmp	0x5ed8	; 0x5ed8 <_ZN5rs2327putcharEc>
     4da:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <_ZN7task_md3runEv+0xf0>
     4de:	0c 94 83 12 	jmp	0x2506	; 0x2506 <_ZN9task_user3runEv+0x1d4>
     4e2:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <_ZN10FakeDM542T8motorCCWEv>
     4e6:	0c 94 48 17 	jmp	0x2e90	; 0x2e90 <_ZN9task_user3runEv+0xb5e>
     4ea:	0c 94 24 17 	jmp	0x2e48	; 0x2e48 <_ZN9task_user3runEv+0xb16>
     4ee:	0c 94 c9 2f 	jmp	0x5f92	; 0x5f92 <_ZN5rs23212clear_screenEv>
     4f2:	0c 94 be 15 	jmp	0x2b7c	; 0x2b7c <_ZN9task_user3runEv+0x84a>
     4f6:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <_ZN9task_user3runEv+0x680>
     4fa:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <_ZN9task_user3runEv+0x712>
     4fe:	0c 94 33 24 	jmp	0x4866	; 0x4866 <prvIdleTask>
     502:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <_ZN9task_user3runEv+0x5ae>
     506:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <_ZN9task_user3runEv+0x81a>
     50a:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <_ZN9task_user3runEv+0xa2a>
     50e:	0c 94 11 18 	jmp	0x3022	; 0x3022 <_ZN9frt_queueImE12num_items_inEv>
     512:	0c 94 7f 2c 	jmp	0x58fe	; 0x58fe <_ZN8emstream13ready_to_sendEv>
     516:	0c 94 92 18 	jmp	0x3124	; 0x3124 <_ZN9frt_queueImE7ISR_getEv>
     51a:	0c 94 81 18 	jmp	0x3102	; 0x3102 <_ZN9frt_queueImE7ISR_getEPm>
     51e:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <_ZN9task_user3runEv+0x416>
     522:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <_ZN7task_md3runEv+0x326>
     526:	0c 94 90 2f 	jmp	0x5f20	; 0x5f20 <_ZN5rs2327getcharEv>
     52a:	0c 94 0e 14 	jmp	0x281c	; 0x281c <_ZN9task_user3runEv+0x4ea>
     52e:	0c 94 39 18 	jmp	0x3072	; 0x3072 <_ZN9frt_queueImE10get_a_copyEv>
     532:	0c 94 99 11 	jmp	0x2332	; 0x2332 <_ZN9task_user3runEv>
     536:	0c 94 ad 12 	jmp	0x255a	; 0x255a <_ZN9task_user3runEv+0x228>
     53a:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <_ZN10FakeDM542T9take_stepEv>
     53e:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <_ZN10FakeDM542T7motorOnEv>
     542:	0c 94 81 2c 	jmp	0x5902	; 0x5902 <_ZN8emstream7getcharEv>
     546:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <_ZN9task_user3runEv+0x57e>
     54a:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <_ZN11task_sensor3runEv>
     54e:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <_ZN10FakeDM542T10disableCCWEv>
     552:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <_ZN7task_md3runEv+0x9a>
     556:	0c 94 40 12 	jmp	0x2480	; 0x2480 <_ZN9task_user3runEv+0x14e>
     55a:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <_ZN7task_md3runEv+0x38>
     55e:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <_ZN9task_user3runEv+0x3b2>
     562:	0c 94 7d 2b 	jmp	0x56fa	; 0x56fa <_ZN14frt_text_queue14check_for_charEv>
     566:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <_ZN9frt_queueImE16ISR_num_items_inEv>
     56a:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <_ZN7task_md3runEv+0x208>
     56e:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <_ZN9task_user3runEv+0xba6>
     572:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <_ZN10FakeDM542T10get_statusEv>
     576:	0c 94 bf 13 	jmp	0x277e	; 0x277e <_ZN9task_user3runEv+0x44c>
     57a:	0c 94 84 2c 	jmp	0x5908	; 0x5908 <_ZN8emstream14check_for_charEv>
     57e:	0c 94 df 14 	jmp	0x29be	; 0x29be <_ZN9task_user3runEv+0x68c>
     582:	0c 94 23 18 	jmp	0x3046	; 0x3046 <_ZN9frt_queueImE8is_emptyEv>
     586:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <_ZN9task_user3runEv+0x698>
     58a:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <_ZN7task_md3runEv+0x42>
     58e:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <_ZN7task_md3runEv+0x4e4>
     592:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <_ZN9task_user3runEv+0xa7e>
     596:	0c 94 fe 2c 	jmp	0x59fc	; 0x59fc <_ZN8emstreamlsE15ser_manipulator+0x62>

0000059a <__trampolines_end>:
     59a:	00 40       	sbci	r16, 0x00	; 0
     59c:	7a 10       	cpse	r7, r10
     59e:	f3 5a       	subi	r31, 0xA3	; 163
     5a0:	00 a0       	ldd	r0, Z+32	; 0x20
     5a2:	72 4e       	sbci	r23, 0xE2	; 226
     5a4:	18 09       	sbc	r17, r8
     5a6:	00 10       	cpse	r0, r0
     5a8:	a5 d4       	rcall	.+2378   	; 0xef4 <__do_copy_data+0xa>
     5aa:	e8 00       	.word	0x00e8	; ????
     5ac:	00 e8       	ldi	r16, 0x80	; 128
     5ae:	76 48       	sbci	r23, 0x86	; 134
     5b0:	17 00       	.word	0x0017	; ????
     5b2:	00 e4       	ldi	r16, 0x40	; 64
     5b4:	0b 54       	subi	r16, 0x4B	; 75
     5b6:	02 00       	.word	0x0002	; ????
     5b8:	00 ca       	rjmp	.-3072   	; 0xfffff9ba <__eeprom_end+0xff7ef9ba>
     5ba:	9a 3b       	cpi	r25, 0xBA	; 186
     5bc:	00 00       	nop
     5be:	00 e1       	ldi	r16, 0x10	; 16
     5c0:	f5 05       	cpc	r31, r5
     5c2:	00 00       	nop
     5c4:	80 96       	adiw	r24, 0x20	; 32
     5c6:	98 00       	.word	0x0098	; ????
     5c8:	00 00       	nop
     5ca:	40 42       	sbci	r20, 0x20	; 32
     5cc:	0f 00       	.word	0x000f	; ????
     5ce:	00 00       	nop
     5d0:	a0 86       	std	Z+8, r10	; 0x08
     5d2:	01 00       	.word	0x0001	; ????
     5d4:	00 00       	nop
     5d6:	10 27       	eor	r17, r16
     5d8:	00 00       	nop
     5da:	00 00       	nop
     5dc:	e8 03       	fmulsu	r22, r16
     5de:	00 00       	nop
     5e0:	00 00       	nop
     5e2:	64 00       	.word	0x0064	; ????
     5e4:	00 00       	nop
     5e6:	00 00       	nop
     5e8:	0a 00       	.word	0x000a	; ????
     5ea:	00 00       	nop
     5ec:	00 00       	nop
     5ee:	01 00       	.word	0x0001	; ????
     5f0:	00 00       	nop
     5f2:	00 00       	nop
     5f4:	2c 76       	andi	r18, 0x6C	; 108
     5f6:	d8 88       	ldd	r13, Y+16	; 0x10
     5f8:	dc 67       	ori	r29, 0x7C	; 124
     5fa:	4f 08       	sbc	r4, r15
     5fc:	23 df       	rcall	.-442    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     5fe:	c1 df       	rcall	.-126    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
     600:	ae 59       	subi	r26, 0x9E	; 158
     602:	e1 b1       	in	r30, 0x01	; 1
     604:	b7 96       	adiw	r30, 0x27	; 39
     606:	e5 e3       	ldi	r30, 0x35	; 53
     608:	e4 53       	subi	r30, 0x34	; 52
     60a:	c6 3a       	cpi	r28, 0xA6	; 166
     60c:	e6 51       	subi	r30, 0x16	; 22
     60e:	99 76       	andi	r25, 0x69	; 105
     610:	96 e8       	ldi	r25, 0x86	; 134
     612:	e6 c2       	rjmp	.+1484   	; 0xbe0 <_ZZN9task_user21print_coord_mode_menuEvE3__c_2+0x2>
     614:	84 26       	eor	r8, r20
     616:	eb 89       	ldd	r30, Y+19	; 0x13
     618:	8c 9b       	sbis	0x11, 4	; 17
     61a:	62 ed       	ldi	r22, 0xD2	; 210
     61c:	40 7c       	andi	r20, 0xC0	; 192
     61e:	6f fc       	.word	0xfc6f	; ????
     620:	ef bc       	out	0x2f, r14	; 47
     622:	9c 9f       	mul	r25, r28
     624:	40 f2       	brcs	.-112    	; 0x5b6 <__trampolines_end+0x1c>
     626:	ba a5       	ldd	r27, Y+42	; 0x2a
     628:	6f a5       	ldd	r22, Y+47	; 0x2f
     62a:	f4 90       	lpm	r15, Z
     62c:	05 5a       	subi	r16, 0xA5	; 165
     62e:	2a f7       	brpl	.-54     	; 0x5fa <__trampolines_end+0x60>
     630:	5c 93       	st	X, r21
     632:	6b 6c       	ori	r22, 0xCB	; 203
     634:	f9 67       	ori	r31, 0x79	; 121
     636:	6d c1       	rjmp	.+730    	; 0x912 <_ZZN9task_user3runEvE3__c_11+0x17>
     638:	1b fc       	.word	0xfc1b	; ????
     63a:	e0 e4       	ldi	r30, 0x40	; 64
     63c:	0d 47       	sbci	r16, 0x7D	; 125
     63e:	fe f5       	brtc	.+126    	; 0x6be <_ZZN7task_md3runEvE3__c_3+0x1>
     640:	20 e6       	ldi	r18, 0x60	; 96
     642:	b5 00       	.word	0x00b5	; ????
     644:	d0 ed       	ldi	r29, 0xD0	; 208
     646:	90 2e       	mov	r9, r16
     648:	03 00       	.word	0x0003	; ????
     64a:	94 35       	cpi	r25, 0x54	; 84
     64c:	77 05       	cpc	r23, r7
     64e:	00 80       	ld	r0, Z
     650:	84 1e       	adc	r8, r20
     652:	08 00       	.word	0x0008	; ????
     654:	00 20       	and	r0, r0
     656:	4e 0a       	sbc	r4, r30
     658:	00 00       	nop
     65a:	00 c8       	rjmp	.-4096   	; 0xfffff65c <__eeprom_end+0xff7ef65c>
     65c:	0c 33       	cpi	r16, 0x3C	; 60
     65e:	33 33       	cpi	r19, 0x33	; 51
     660:	33 0f       	add	r19, r19
     662:	98 6e       	ori	r25, 0xE8	; 232
     664:	12 83       	std	Z+2, r17	; 0x02
     666:	11 41       	sbci	r17, 0x11	; 17
     668:	ef 8d       	ldd	r30, Y+31	; 0x1f
     66a:	21 14       	cp	r2, r1
     66c:	89 3b       	cpi	r24, 0xB9	; 185
     66e:	e6 55       	subi	r30, 0x56	; 86
     670:	16 cf       	rjmp	.-468    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     672:	fe e6       	ldi	r31, 0x6E	; 110
     674:	db 18       	sub	r13, r11
     676:	d1 84       	ldd	r13, Z+9	; 0x09
     678:	4b 38       	cpi	r20, 0x8B	; 139
     67a:	1b f7       	brvc	.-58     	; 0x642 <__trampolines_end+0xa8>
     67c:	7c 1d       	adc	r23, r12
     67e:	90 1d       	adc	r25, r0
     680:	a4 bb       	out	0x14, r26	; 20
     682:	e4 24       	eor	r14, r4
     684:	20 32       	cpi	r18, 0x20	; 32
     686:	84 72       	andi	r24, 0x24	; 36
     688:	5e 22       	and	r5, r30
     68a:	81 00       	.word	0x0081	; ????
     68c:	c9 f1       	breq	.+114    	; 0x700 <_ZZN11task_sensor3runEvE3__c_1>
     68e:	24 ec       	ldi	r18, 0xC4	; 196
     690:	a1 e5       	ldi	r26, 0x51	; 81
     692:	3d 27       	eor	r19, r29

00000694 <_ZZN7task_md12reset_deviceEvE3__c>:
     694:	52 65 73 65 74 74 69 6e 67 20 64 65 76 69 63 65     Resetting device
     6a4:	2e 00                                               ..

000006a6 <_ZZN7task_md7motorOnEvE3__c_0>:
     6a6:	52 00                                               R.

000006a8 <_ZZN7task_md7motorOnEvE3__c>:
     6a8:	46 00                                               F.

000006aa <_ZZN7task_md3runEvE3__c_8>:
     6aa:	6c 6f 63 3a 00                                      loc:.

000006af <_ZZN7task_md3runEvE3__c_7>:
     6af:	6c 6f 63 3a 00                                      loc:.

000006b4 <_ZZN7task_md3runEvE3__c_6>:
     6b4:	53 00                                               S.

000006b6 <_ZZN7task_md3runEvE3__c_5>:
     6b6:	6c 6f 63 3a 00                                      loc:.

000006bb <_ZZN7task_md3runEvE3__c_4>:
     6bb:	53 00                                               S.

000006bd <_ZZN7task_md3runEvE3__c_3>:
     6bd:	76 65 6c 3a 20 00                                   vel: .

000006c3 <_ZZN7task_md3runEvE3__c_2>:
     6c3:	6c 6f 63 3a 00                                      loc:.

000006c8 <_ZZN7task_md3runEvE3__c_1>:
     6c8:	53 00                                               S.

000006ca <_ZZN7task_md3runEvE3__c_0>:
     6ca:	6c 6f 63 3a 00                                      loc:.

000006cf <_ZZN7task_md3runEvE3__c>:
     6cf:	53 32 00                                            S2.

000006d2 <_ZZN11task_sensor12reset_deviceEvE3__c>:
     6d2:	52 65 73 65 74 74 69 6e 67 20 64 65 76 69 63 65     Resetting device
     6e2:	2e 00                                               ..

000006e4 <_ZZN11task_sensor3runEvE3__c_5>:
     6e4:	6d 56 3a 00                                         mV:.

000006e8 <_ZZN11task_sensor3runEvE3__c_4>:
     6e8:	48 46 3a 00                                         HF:.

000006ec <_ZZN11task_sensor3runEvE3__c_3>:
     6ec:	43 00                                               C.

000006ee <_ZZN11task_sensor3runEvE3__c_2>:
     6ee:	52 6f 75 74 69 6e 65 20 63 6f 6d 70 6c 65 74 65     Routine complete
     6fe:	2e 00                                               ..

00000700 <_ZZN11task_sensor3runEvE3__c_1>:
     700:	6d 56 3a 00                                         mV:.

00000704 <_ZZN11task_sensor3runEvE3__c_0>:
     704:	48 46 3a 00                                         HF:.

00000708 <_ZZN11task_sensor3runEvE3__c>:
     708:	53 65 6e 73 6f 72 20 52 65 61 64 69 6e 67 20 00     Sensor Reading .

00000718 <_ZZN9task_user11show_statusEvE3__c_4>:
     718:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

00000723 <_ZZN9task_user11show_statusEvE3__c_3>:
     723:	2f 00                                               /.

00000725 <_ZZN9task_user11show_statusEvE3__c_2>:
     725:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

00000733 <_ZZN9task_user11show_statusEvE3__c_1>:
     733:	54 69 6d 65 3a 20 00                                Time: .

0000073a <_ZZN9task_user11show_statusEvE3__c_0>:
     73a:	4f 63 74 20 31 31 20 32 30 31 38 00                 Oct 11 2018.

00000746 <_ZZN9task_user11show_statusEvE3__c>:
     746:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     756:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

00000765 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     765:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

00000774 <_ZZN9task_user18print_help_messageEvE3__c_9>:
     774:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     784:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

0000078f <_ZZN9task_user18print_help_messageEvE3__c_8>:
     78f:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     79f:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

000007ad <_ZZN9task_user18print_help_messageEvE3__c_7>:
     7ad:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     7bd:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     7cd:	6d 61 74 69 6f 6e 00                                mation.

000007d4 <_ZZN9task_user18print_help_messageEvE3__c_6>:
     7d4:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     7e4:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

000007f5 <_ZZN9task_user18print_help_messageEvE3__c_5>:
     7f5:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     805:	65 20 6f 6e 6c 79 3a 00                             e only:.

0000080d <_ZZN9task_user18print_help_messageEvE3__c_4>:
     80d:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     81d:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

00000829 <_ZZN9task_user18print_help_messageEvE3__c_3>:
     829:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     839:	68 65 20 41 56 52 00                                he AVR.

00000840 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     840:	20 68 65 6c 70 00                                    help.

00000846 <_ZZN9task_user18print_help_messageEvE3__c_1>:
     846:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     856:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

00000865 <_ZZN9task_user18print_help_messageEvE3__c_0>:
     865:	1b 5b 33 30 6d 00                                   .[30m.

0000086b <_ZZN9task_user18print_help_messageEvE3__c>:
     86b:	1b 5b 34 36 6d 00                                   .[46m.

00000871 <_ZZN9task_user3runEvE3__c_17>:
     871:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     881:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

0000088e <_ZZN9task_user3runEvE3__c_16>:
     88e:	53 65 6e 73 6f 72 20 73 61 6d 70 6c 65 20 73 69     Sensor sample si
     89e:	7a 65 20 73 65 74 20 74 6f 3a 00                    ze set to:.

000008a9 <_ZZN9task_user3runEvE3__c_15>:
     8a9:	53 65 6e 73 6f 72 20 64 65 6c 61 79 20 73 65 74     Sensor delay set
     8b9:	20 74 6f 3a 00                                       to:.

000008be <_ZZN9task_user3runEvE3__c_14>:
     8be:	4d 69 63 72 6f 73 74 65 70 20 73 63 61 6c 65 72     Microstep scaler
     8ce:	20 73 65 74 20 74 6f 3a 00                           set to:.

000008d7 <_ZZN9task_user3runEvE3__c_13>:
     8d7:	43 6f 6e 66 69 67 20 65 6e 74 65 72 65 64 3a 00     Config entered:.

000008e7 <_ZZN9task_user3runEvE3__c_12>:
     8e7:	4c 65 61 76 69 6e 67 20 63 6f 6e 66 69 67 20 6d     Leaving config m
     8f7:	6f 64 65 00                                         ode.

000008fb <_ZZN9task_user3runEvE3__c_11>:
     8fb:	5a 2d 61 78 69 73 20 6d 61 78 20 76 65 6c 6f 63     Z-axis max veloc
     90b:	69 74 79 20 73 65 74 20 74 6f 3a 00                 ity set to:.

00000917 <_ZZN9task_user3runEvE3__c_10>:
     917:	59 2d 61 78 69 73 20 6d 61 78 20 76 65 6c 6f 63     Y-axis max veloc
     927:	69 74 79 20 73 65 74 20 74 6f 3a 00                 ity set to:.

00000933 <_ZZN9task_user3runEvE3__c_9>:
     933:	58 2d 61 78 69 73 20 6d 61 78 20 76 65 6c 6f 63     X-axis max veloc
     943:	69 74 79 20 73 65 74 20 74 6f 3a 00                 ity set to:.

0000094f <_ZZN9task_user3runEvE3__c_8>:
     94f:	4d 61 78 20 76 65 6c 6f 63 69 74 79 20 73 65 74     Max velocity set
     95f:	20 74 6f 3a 00                                       to:.

00000964 <_ZZN9task_user3runEvE3__c_7>:
     964:	50 6c 65 61 73 65 20 63 68 6f 6f 73 65 20 74 68     Please choose th
     974:	65 20 6d 6f 74 6f 72 20 79 6f 75 20 77 6f 75 6c     e motor you woul
     984:	64 20 6c 69 6b 65 20 74 6f 20 63 6f 6e 74 72 6f     d like to contro
     994:	6c 2e 00                                            l..

00000997 <_ZZN9task_user3runEvE3__c_6>:
     997:	50 6c 65 61 73 65 20 63 68 6f 6f 73 65 20 74 68     Please choose th
     9a7:	65 20 6d 6f 74 6f 72 20 79 6f 75 20 77 6f 75 6c     e motor you woul
     9b7:	64 20 6c 69 6b 65 20 74 6f 20 63 6f 6e 74 72 6f     d like to contro
     9c7:	6c 2e 00                                            l..

000009ca <_ZZN9task_user3runEvE3__c_5>:
     9ca:	50 6c 65 61 73 65 20 63 68 6f 6f 73 65 20 74 68     Please choose th
     9da:	65 20 6d 6f 74 6f 72 20 79 6f 75 20 77 6f 75 6c     e motor you woul
     9ea:	64 20 6c 69 6b 65 20 74 6f 20 63 6f 6e 74 72 6f     d like to contro
     9fa:	6c 2e 00                                            l..

000009fd <_ZZN9task_user3runEvE3__c_4>:
     9fd:	52 65 63 65 69 76 69 6e 67 20 5a 2d 6c 6f 63 61     Receiving Z-loca
     a0d:	74 69 6f 6e 73 2e 00                                tions..

00000a14 <_ZZN9task_user3runEvE3__c_3>:
     a14:	52 65 63 65 69 76 69 6e 67 20 59 2d 6c 6f 63 61     Receiving Y-loca
     a24:	74 69 6f 6e 73 2e 00                                tions..

00000a2b <_ZZN9task_user3runEvE3__c_2>:
     a2b:	52 65 63 65 69 76 69 6e 67 20 58 2d 6c 6f 63 61     Receiving X-loca
     a3b:	74 69 6f 6e 73 2e 00                                tions..

00000a42 <_ZZN9task_user3runEvE3__c_1>:
     a42:	45 72 72 6f 72 3a 20 55 6e 65 71 75 61 6c 20 61     Error: Unequal a
     a52:	78 69 73 20 63 6f 6f 72 64 69 6e 61 74 65 20 76     xis coordinate v
     a62:	65 63 74 6f 72 73 2e 00                             ectors..

00000a6a <_ZZN9task_user3runEvE3__c_0>:
     a6a:	54 6f 74 61 6c 20 6e 6f 64 65 73 3a 20 00           Total nodes: .

00000a78 <_ZZN9task_user3runEvE3__c>:
     a78:	45 6e 74 65 72 69 6e 67 20 63 6f 6e 66 69 67 20     Entering config 
     a88:	6d 6f 64 65 00                                      mode.

00000a8d <_ZZN9task_user12reset_deviceEvE3__c>:
     a8d:	52 65 73 65 74 74 69 6e 67 20 64 65 76 69 63 65     Resetting device
     a9d:	2e 00                                               ..

00000a9f <_ZZN9task_user24print_dir_motor_commandsEvE3__c_1>:
     a9f:	50 72 65 73 73 20 43 74 72 6c 2d 53 20 74 6f 20     Press Ctrl-S to 
     aaf:	73 74 6f 70 2e 00                                   stop..

00000ab5 <_ZZN9task_user24print_dir_motor_commandsEvE3__c_0>:
     ab5:	50 72 65 73 73 20 43 74 72 6c 2d 52 20 74 6f 20     Press Ctrl-R to 
     ac5:	61 63 74 69 76 61 74 65 20 72 65 76 65 72 73 65     activate reverse
     ad5:	2e 00                                               ..

00000ad7 <_ZZN9task_user24print_dir_motor_commandsEvE3__c>:
     ad7:	50 72 65 73 73 20 43 74 72 6c 2d 46 20 74 6f 20     Press Ctrl-F to 
     ae7:	61 63 74 69 76 61 74 65 20 66 6f 72 77 61 72 64     activate forward
     af7:	2e 00                                               ..

00000af9 <_ZZN9task_user19print_dir_mode_menuEvE3__c_2>:
     af9:	50 72 65 73 73 20 43 74 72 6c 2d 5a 20 66 6f 72     Press Ctrl-Z for
     b09:	20 5a 2d 4d 6f 74 6f 72 20 63 6f 6d 6d 61 6e 64      Z-Motor command
     b19:	73 2e 00                                            s..

00000b1c <_ZZN9task_user19print_dir_mode_menuEvE3__c_1>:
     b1c:	50 72 65 73 73 20 43 74 72 6c 2d 59 20 66 6f 72     Press Ctrl-Y for
     b2c:	20 59 2d 4d 6f 74 6f 72 20 63 6f 6d 6d 61 6e 64      Y-Motor command
     b3c:	73 2e 00                                            s..

00000b3f <_ZZN9task_user19print_dir_mode_menuEvE3__c_0>:
     b3f:	50 72 65 73 73 20 43 74 72 6c 2d 58 20 66 6f 72     Press Ctrl-X for
     b4f:	20 58 2d 4d 6f 74 6f 72 20 63 6f 6d 6d 61 6e 64      X-Motor command
     b5f:	73 2e 00                                            s..

00000b62 <_ZZN9task_user19print_dir_mode_menuEvE3__c>:
     b62:	45 6e 74 65 72 69 6e 67 20 44 69 72 65 63 74 20     Entering Direct 
     b72:	4f 70 65 72 61 74 69 6f 6e 20 4d 6f 64 65 2e 00     Operation Mode..

00000b82 <_ZZN9task_user21print_coord_mode_menuEvE3__c_5>:
     b82:	50 72 65 73 73 20 45 20 74 6f 20 72 65 74 75 72     Press E to retur
     b92:	6e 20 74 6f 20 74 68 65 20 6d 61 69 6e 20 6d 65     n to the main me
     ba2:	6e 75 2e 00                                         nu..

00000ba6 <_ZZN9task_user21print_coord_mode_menuEvE3__c_4>:
     ba6:	50 72 65 73 73 20 52 20 74 6f 20 72 65 73 65 74     Press R to reset
     bb6:	20 74 68 65 20 64 65 76 69 63 65 2e 00               the device..

00000bc3 <_ZZN9task_user21print_coord_mode_menuEvE3__c_3>:
     bc3:	50 72 65 73 73 20 47 20 74 6f 20 72 75 6e 20 74     Press G to run t
     bd3:	68 65 20 64 65 76 69 63 65 2e 00                    he device..

00000bde <_ZZN9task_user21print_coord_mode_menuEvE3__c_2>:
     bde:	50 72 65 73 73 20 5a 20 74 6f 20 65 6e 74 65 72     Press Z to enter
     bee:	20 5a 2d 63 6f 6f 72 64 69 6e 61 74 65 73 2e 00      Z-coordinates..

00000bfe <_ZZN9task_user21print_coord_mode_menuEvE3__c_1>:
     bfe:	50 72 65 73 73 20 59 20 74 6f 20 65 6e 74 65 72     Press Y to enter
     c0e:	20 59 2d 63 6f 6f 72 64 69 6e 61 74 65 73 2e 00      Y-coordinates..

00000c1e <_ZZN9task_user21print_coord_mode_menuEvE3__c_0>:
     c1e:	50 72 65 73 73 20 58 20 74 6f 20 65 6e 74 65 72     Press X to enter
     c2e:	20 58 2d 63 6f 6f 72 64 69 6e 61 74 65 73 2e 00      X-coordinates..

00000c3e <_ZZN9task_user21print_coord_mode_menuEvE3__c>:
     c3e:	45 6e 74 65 72 69 6e 67 20 43 6f 6f 72 64 69 6e     Entering Coordin
     c4e:	61 74 65 20 4d 6f 64 65 2e 00                       ate Mode..

00000c58 <_ZZN9task_user22print_config_mode_menuEvE3__c_4>:
     c58:	50 72 65 73 73 20 45 20 74 6f 20 72 65 74 75 72     Press E to retur
     c68:	6e 20 74 6f 20 74 68 65 20 6d 61 69 6e 20 6d 65     n to the main me
     c78:	6e 75 2e 00                                         nu..

00000c7c <_ZZN9task_user22print_config_mode_menuEvE3__c_3>:
     c7c:	50 72 65 73 73 20 52 20 74 6f 20 72 65 73 65 74     Press R to reset
     c8c:	20 74 68 65 20 64 65 76 69 63 65 2e 00               the device..

00000c99 <_ZZN9task_user22print_config_mode_menuEvE3__c_2>:
     c99:	50 72 65 73 73 20 5a 20 74 6f 20 72 65 74 75 72     Press Z to retur
     ca9:	6e 20 74 68 65 20 64 65 76 69 63 65 20 74 6f 20     n the device to 
     cb9:	74 68 65 20 6f 72 69 67 69 6e 2e 00                 the origin..

00000cc5 <_ZZN9task_user22print_config_mode_menuEvE3__c_1>:
     cc5:	50 72 65 73 73 20 53 20 74 6f 20 63 68 61 6e 67     Press S to chang
     cd5:	65 20 74 68 65 20 64 65 66 61 75 6c 74 20 73 65     e the default se
     ce5:	6e 73 6f 72 20 72 65 61 64 69 6e 67 20 64 65 6c     nsor reading del
     cf5:	61 79 20 74 69 6d 65 2e 00                          ay time..

00000cfe <_ZZN9task_user22print_config_mode_menuEvE3__c_0>:
     cfe:	50 72 65 73 73 20 55 20 74 6f 20 63 68 61 6e 67     Press U to chang
     d0e:	65 20 74 68 65 20 64 65 66 61 75 6c 74 20 6d 6f     e the default mo
     d1e:	74 6f 72 20 6d 69 63 72 6f 73 74 65 70 20 73 63     tor microstep sc
     d2e:	61 6c 65 72 2e 00                                   aler..

00000d34 <_ZZN9task_user22print_config_mode_menuEvE3__c>:
     d34:	45 6e 74 65 72 69 6e 67 20 43 6f 6e 66 69 67 75     Entering Configu
     d44:	72 61 74 69 6f 6e 20 4d 6f 64 65 2e 00              ration Mode..

00000d51 <_ZZN9task_user15print_main_menuEvE3__c_3>:
     d51:	50 72 65 73 73 20 52 20 74 6f 20 72 65 73 65 74     Press R to reset
     d61:	20 74 68 65 20 64 65 76 69 63 65 2e 00               the device..

00000d6e <_ZZN9task_user15print_main_menuEvE3__c_2>:
     d6e:	50 72 65 73 73 20 44 20 66 6f 72 20 44 69 72 65     Press D for Dire
     d7e:	63 74 20 4f 70 65 72 61 74 69 6f 6e 20 4d 6f 64     ct Operation Mod
     d8e:	65 2e 00                                            e..

00000d91 <_ZZN9task_user15print_main_menuEvE3__c_1>:
     d91:	50 72 65 73 73 20 43 20 66 6f 72 20 43 6f 6f 72     Press C for Coor
     da1:	64 69 6e 61 74 65 20 4d 6f 64 65 2e 00              dinate Mode..

00000dae <_ZZN9task_user15print_main_menuEvE3__c_0>:
     dae:	50 72 65 73 73 20 41 20 66 6f 72 20 43 6f 6e 66     Press A for Conf
     dbe:	69 67 75 72 61 74 69 6f 6e 20 4d 6f 64 65 2e 00     iguration Mode..

00000dce <_ZZN9task_user15print_main_menuEvE3__c>:
     dce:	57 65 6c 63 6f 6d 65 20 74 6f 20 74 68 65 20 55     Welcome to the U
     dde:	73 65 72 20 49 6e 74 65 72 66 61 63 65 20 6d 61     ser Interface ma
     dee:	69 6e 20 6d 65 6e 75 20 6f 66 20 74 68 65 20 33     in menu of the 3
     dfe:	44 20 48 65 61 74 20 46 6c 75 78 20 43 61 6c 69     D Heat Flux Cali
     e0e:	62 72 61 74 6f 72 2e 00                             brator..

00000e16 <_ZZN8frt_task15emergency_resetEvE3__c_0>:
     e16:	52 65 73 65 74 74 69 6e 67 00                       Resetting.

00000e20 <_ZZN8frt_task15emergency_resetEvE3__c>:
     e20:	45 52 52 4f 52 20 69 6e 20 74 61 73 6b 20 00        ERROR in task .

00000e2f <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     e2f:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     e3f:	61 73 6b 20 00                                      ask .

00000e44 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     e44:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

00000e52 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     e52:	20 63 72 65 61 74 65 64 00                           created.

00000e5b <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     e5b:	54 61 73 6b 20 00                                   Task .

00000e61 <_ZZ15print_task_listP8emstreamE3__c_9>:
     e61:	09 09 00                                            ...

00000e64 <_ZZ15print_task_listP8emstreamE3__c_8>:
     e64:	2f 00                                               /.

00000e66 <_ZZ15print_task_listP8emstreamE3__c_7>:
     e66:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

00000e71 <_ZZ15print_task_listP8emstreamE3__c_6>:
     e71:	09 2d 2d 2d 2d 00                                   .----.

00000e77 <_ZZ15print_task_listP8emstreamE3__c_5>:
     e77:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

00000e83 <_ZZ15print_task_listP8emstreamE3__c_4>:
     e83:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

00000e94 <_ZZ15print_task_listP8emstreamE3__c_3>:
     e94:	09 52 75 6e 73 00                                   .Runs.

00000e9a <_ZZ15print_task_listP8emstreamE3__c_2>:
     e9a:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

00000ea6 <_ZZ15print_task_listP8emstreamE3__c_1>:
     ea6:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

00000eb7 <_ZZ15print_task_listP8emstreamE3__c_0>:
     eb7:	09 53 74 61 63 6b 00                                .Stack.

00000ebe <_ZZ15print_task_listP8emstreamE3__c>:
     ebe:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

00000ec9 <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     ec9:	09 00                                               ..

00000ecb <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     ecb:	09 00                                               ..

00000ecd <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     ecd:	2f 00                                               /.

00000ecf <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     ecf:	09 00                                               ..

00000ed1 <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     ed1:	09 00 00                                            ...

00000ed4 <_call_static_run_method>:
     ed4:	0e 94 f5 29 	call	0x53ea	; 0x53ea <_ZN8frt_task22_call_users_run_methodEPS_>

00000ed8 <__ctors_start>:
     ed8:	0c 1e       	adc	r0, r28

00000eda <__ctors_end>:
     eda:	11 24       	eor	r1, r1
     edc:	1f be       	out	0x3f, r1	; 63
     ede:	cf ef       	ldi	r28, 0xFF	; 255
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	df e5       	ldi	r29, 0x5F	; 95
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	00 e0       	ldi	r16, 0x00	; 0
     ee8:	0c bf       	out	0x3c, r16	; 60

00000eea <__do_copy_data>:
     eea:	10 e2       	ldi	r17, 0x20	; 32
     eec:	a0 e0       	ldi	r26, 0x00	; 0
     eee:	b0 e2       	ldi	r27, 0x20	; 32
     ef0:	ea e8       	ldi	r30, 0x8A	; 138
     ef2:	fc e6       	ldi	r31, 0x6C	; 108
     ef4:	00 e0       	ldi	r16, 0x00	; 0
     ef6:	0b bf       	out	0x3b, r16	; 59
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <__do_copy_data+0x14>
     efa:	07 90       	elpm	r0, Z+
     efc:	0d 92       	st	X+, r0
     efe:	a0 3f       	cpi	r26, 0xF0	; 240
     f00:	b1 07       	cpc	r27, r17
     f02:	d9 f7       	brne	.-10     	; 0xefa <__do_copy_data+0x10>

00000f04 <__do_clear_bss>:
     f04:	22 e4       	ldi	r18, 0x42	; 66
     f06:	a0 ef       	ldi	r26, 0xF0	; 240
     f08:	b0 e2       	ldi	r27, 0x20	; 32
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <.do_clear_bss_start>

00000f0c <.do_clear_bss_loop>:
     f0c:	1d 92       	st	X+, r1

00000f0e <.do_clear_bss_start>:
     f0e:	ad 30       	cpi	r26, 0x0D	; 13
     f10:	b2 07       	cpc	r27, r18
     f12:	e1 f7       	brne	.-8      	; 0xf0c <.do_clear_bss_loop>

00000f14 <__do_global_ctors>:
     f14:	17 e0       	ldi	r17, 0x07	; 7
     f16:	cd e6       	ldi	r28, 0x6D	; 109
     f18:	d7 e0       	ldi	r29, 0x07	; 7
     f1a:	00 e0       	ldi	r16, 0x00	; 0
     f1c:	06 c0       	rjmp	.+12     	; 0xf2a <__do_global_ctors+0x16>
     f1e:	21 97       	sbiw	r28, 0x01	; 1
     f20:	01 09       	sbc	r16, r1
     f22:	80 2f       	mov	r24, r16
     f24:	fe 01       	movw	r30, r28
     f26:	0e 94 ae 34 	call	0x695c	; 0x695c <__tablejump2__>
     f2a:	cc 36       	cpi	r28, 0x6C	; 108
     f2c:	d1 07       	cpc	r29, r17
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	08 07       	cpc	r16, r24
     f32:	a9 f7       	brne	.-22     	; 0xf1e <__do_global_ctors+0xa>
     f34:	0e 94 59 19 	call	0x32b2	; 0x32b2 <main>
     f38:	0c 94 43 36 	jmp	0x6c86	; 0x6c86 <_exit>

00000f3c <__bad_interrupt>:
     f3c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000f40 <_ZN6DM542T27min_bound_interrupt_handlerEv>:
{
  thisInterruptTimer->low();
}

void DM542T::min_bound_interrupt_handler(void)
{
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	ec 01       	movw	r28, r24
  if (get_direction() == 1)
     f46:	e8 81       	ld	r30, Y
     f48:	f9 81       	ldd	r31, Y+1	; 0x01
     f4a:	06 84       	ldd	r0, Z+14	; 0x0e
     f4c:	f7 85       	ldd	r31, Z+15	; 0x0f
     f4e:	e0 2d       	mov	r30, r0
     f50:	19 95       	eicall
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	59 f4       	brne	.+22     	; 0xf6c <_ZN6DM542T27min_bound_interrupt_handlerEv+0x2c>
  {
    motorOff();
     f56:	e8 81       	ld	r30, Y
     f58:	f9 81       	ldd	r31, Y+1	; 0x01
     f5a:	06 80       	ldd	r0, Z+6	; 0x06
     f5c:	f7 81       	ldd	r31, Z+7	; 0x07
     f5e:	e0 2d       	mov	r30, r0
     f60:	ce 01       	movw	r24, r28
     f62:	19 95       	eicall

  void max_bound_interrupt_handler( ) ;
  
  virtual bool get_status(void);

  void reset_steps( ) { steps = 0 ; }
     f64:	19 a2       	std	Y+33, r1	; 0x21
     f66:	1a a2       	std	Y+34, r1	; 0x22
     f68:	1b a2       	std	Y+35, r1	; 0x23
     f6a:	1c a2       	std	Y+36, r1	; 0x24
    reset_steps();
  }
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <_ZN6DM542T27max_bound_interrupt_handlerEv>:

void DM542T::max_bound_interrupt_handler(void)
{
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	ec 01       	movw	r28, r24
  if (get_direction() == 0)
     f78:	e8 81       	ld	r30, Y
     f7a:	f9 81       	ldd	r31, Y+1	; 0x01
     f7c:	06 84       	ldd	r0, Z+14	; 0x0e
     f7e:	f7 85       	ldd	r31, Z+15	; 0x0f
     f80:	e0 2d       	mov	r30, r0
     f82:	19 95       	eicall
     f84:	81 11       	cpse	r24, r1
     f86:	07 c0       	rjmp	.+14     	; 0xf96 <_ZN6DM542T27max_bound_interrupt_handlerEv+0x24>
  {
    motorOff();
     f88:	e8 81       	ld	r30, Y
     f8a:	f9 81       	ldd	r31, Y+1	; 0x01
     f8c:	06 80       	ldd	r0, Z+6	; 0x06
     f8e:	f7 81       	ldd	r31, Z+7	; 0x07
     f90:	e0 2d       	mov	r30, r0
     f92:	ce 01       	movw	r24, r28
     f94:	19 95       	eicall
  }
}
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	08 95       	ret

00000f9c <_ZN12DeviceDriver11LimitSwitch9getStatusEv>:

namespace DeviceDriver
{

  bool LimitSwitch::getStatus(void)
  {
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	fc 01       	movw	r30, r24
    if ( interrupt_->getInputStatus() ) {
     fa2:	a0 81       	ld	r26, Z
     fa4:	b1 81       	ldd	r27, Z+1	; 0x01
    EventInterrupt ( ) { } ;
    
    EventInterrupt ( PORT_t* port, uint8_t input_bm, uint8_t EVENTCHnMUX, 
      uint8_t PORT_INTnMASK, uint8_t EVSYS_CHMUX_PORTx_PINn_gc );

    bool getInputStatus() { return ( port_->IN & input_bm_ ); }
     fa6:	cd 91       	ld	r28, X+
     fa8:	dc 91       	ld	r29, X
     faa:	11 97       	sbiw	r26, 0x01	; 1
     fac:	98 85       	ldd	r25, Y+8	; 0x08
     fae:	13 96       	adiw	r26, 0x03	; 3
     fb0:	8c 91       	ld	r24, X
     fb2:	89 23       	and	r24, r25
     fb4:	19 f0       	breq	.+6      	; 0xfbc <_ZN12DeviceDriver11LimitSwitch9getStatusEv+0x20>
    engaged_ = false;
  }

  void LimitSwitch::setStatus(void)
  {
    engaged_ = true;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	82 83       	std	Z+2, r24	; 0x02
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <_ZN12DeviceDriver11LimitSwitch9getStatusEv+0x22>
    return engaged_;
  }

  void LimitSwitch::clrStatus(void)
  {
    engaged_ = false;
     fbc:	12 82       	std	Z+2, r1	; 0x02
    if ( interrupt_->getInputStatus() ) {
      setStatus(); }
    else {
      clrStatus(); }
    return engaged_;
  }
     fbe:	82 81       	ldd	r24, Z+2	; 0x02
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <_ZN5SBG018reg_readEv>:
 */
int16_t SBG01::get_voltage_bits (void)
{
	reg_read();
	return read_word;
}
     fc6:	bc 01       	movw	r22, r24
     fc8:	64 5f       	subi	r22, 0xF4	; 244
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	48 ee       	ldi	r20, 0xE8	; 232
     fce:	53 e0       	ldi	r21, 0x03	; 3
     fd0:	fc 01       	movw	r30, r24
     fd2:	80 81       	ld	r24, Z
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	0e 94 0e 09 	call	0x121c	; 0x121c <_ZN3ADC4readEPij>
     fda:	08 95       	ret

00000fdc <_ZN5SBG0111get_voltageEv>:
     fdc:	cf 92       	push	r12
     fde:	df 92       	push	r13
     fe0:	ef 92       	push	r14
     fe2:	ff 92       	push	r15
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	ec 01       	movw	r28, r24
     fee:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <_ZN5SBG018reg_readEv>
     ff2:	0c 85       	ldd	r16, Y+12	; 0x0c
     ff4:	1d 85       	ldd	r17, Y+13	; 0x0d
     ff6:	88 81       	ld	r24, Y
     ff8:	99 81       	ldd	r25, Y+1	; 0x01
     ffa:	0e 94 4a 09 	call	0x1294	; 0x1294 <_ZN3ADC15get_voltage_refEv>
     ffe:	6b 01       	movw	r12, r22
    1000:	7c 01       	movw	r14, r24
    1002:	b8 01       	movw	r22, r16
    1004:	11 0f       	add	r17, r17
    1006:	88 0b       	sbc	r24, r24
    1008:	99 0b       	sbc	r25, r25
    100a:	0e 94 83 33 	call	0x6706	; 0x6706 <__floatsisf>
    100e:	a7 01       	movw	r20, r14
    1010:	96 01       	movw	r18, r12
    1012:	0e 94 0f 34 	call	0x681e	; 0x681e <__mulsf3>
    1016:	6b 01       	movw	r12, r22
    1018:	7c 01       	movw	r14, r24
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	55 e4       	ldi	r21, 0x45	; 69
    1022:	6a 89       	ldd	r22, Y+18	; 0x12
    1024:	7b 89       	ldd	r23, Y+19	; 0x13
    1026:	8c 89       	ldd	r24, Y+20	; 0x14
    1028:	9d 89       	ldd	r25, Y+21	; 0x15
    102a:	0e 94 0f 34 	call	0x681e	; 0x681e <__mulsf3>
    102e:	9b 01       	movw	r18, r22
    1030:	ac 01       	movw	r20, r24
    1032:	c7 01       	movw	r24, r14
    1034:	b6 01       	movw	r22, r12
    1036:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__divsf3>
    103a:	6a 83       	std	Y+2, r22	; 0x02
    103c:	7b 83       	std	Y+3, r23	; 0x03
    103e:	8c 83       	std	Y+4, r24	; 0x04
    1040:	9d 83       	std	Y+5, r25	; 0x05
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	df 90       	pop	r13
    1050:	cf 90       	pop	r12
    1052:	08 95       	ret

00001054 <_ZN5SBG0114get_voltage_mvEv>:

//-------------------------------------------------------------------------------------
/** This method returns the result of get_voltage after converting it to millivolts
 */
float SBG01::get_voltage_mv (void)
{
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	ec 01       	movw	r28, r24
	get_voltage();
    105a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_ZN5SBG0111get_voltageEv>
	voltage_mv = voltage * 1000;
	voltage_mv = voltage_mv * 1.99 + 7.9;
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	4a e7       	ldi	r20, 0x7A	; 122
    1064:	54 e4       	ldi	r21, 0x44	; 68
    1066:	6a 81       	ldd	r22, Y+2	; 0x02
    1068:	7b 81       	ldd	r23, Y+3	; 0x03
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	9d 81       	ldd	r25, Y+5	; 0x05
    106e:	0e 94 0f 34 	call	0x681e	; 0x681e <__mulsf3>
    1072:	22 e5       	ldi	r18, 0x52	; 82
    1074:	38 eb       	ldi	r19, 0xB8	; 184
    1076:	4e ef       	ldi	r20, 0xFE	; 254
    1078:	5f e3       	ldi	r21, 0x3F	; 63
    107a:	0e 94 0f 34 	call	0x681e	; 0x681e <__mulsf3>
    107e:	2d ec       	ldi	r18, 0xCD	; 205
    1080:	3c ec       	ldi	r19, 0xCC	; 204
    1082:	4c ef       	ldi	r20, 0xFC	; 252
    1084:	50 e4       	ldi	r21, 0x40	; 64
    1086:	0e 94 74 32 	call	0x64e8	; 0x64e8 <__addsf3>
    108a:	6e 83       	std	Y+6, r22	; 0x06
    108c:	7f 83       	std	Y+7, r23	; 0x07
    108e:	88 87       	std	Y+8, r24	; 0x08
    1090:	99 87       	std	Y+9, r25	; 0x09
	return voltage_mv;
}
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	08 95       	ret

00001098 <_ZN6Motion13MotionControlC1Ej>:
    {
      ++steps;
    }
    else
    {
      --steps;
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
    109e:	69 83       	std	Y+1, r22	; 0x01
    10a0:	7a 83       	std	Y+2, r23	; 0x02
    10a2:	1b 82       	std	Y+3, r1	; 0x03
    10a4:	1c 82       	std	Y+4, r1	; 0x04
    10a6:	1d 82       	std	Y+5, r1	; 0x05
    10a8:	1e 82       	std	Y+6, r1	; 0x06
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 81 33 	call	0x6702	; 0x6702 <__floatunsisf>
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	46 e1       	ldi	r20, 0x16	; 22
    10b8:	54 e4       	ldi	r21, 0x44	; 68
    10ba:	0e 94 0f 34 	call	0x681e	; 0x681e <__mulsf3>
    10be:	0e 94 52 33 	call	0x66a4	; 0x66a4 <__fixunssfsi>
    10c2:	9b 01       	movw	r18, r22
    10c4:	ac 01       	movw	r20, r24
    10c6:	68 87       	std	Y+8, r22	; 0x08
    10c8:	79 87       	std	Y+9, r23	; 0x09
    10ca:	8a 87       	std	Y+10, r24	; 0x0a
    10cc:	9b 87       	std	Y+11, r25	; 0x0b
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 8c 34 	call	0x6918	; 0x6918 <__udivmodsi4>
    10da:	2c 87       	std	Y+12, r18	; 0x0c
    10dc:	3d 87       	std	Y+13, r19	; 0x0d
    10de:	4e 87       	std	Y+14, r20	; 0x0e
    10e0:	5f 87       	std	Y+15, r21	; 0x0f
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	08 95       	ret

000010e8 <_ZN6Motion13MotionControl13inchesToStepsEm>:
    10e8:	9a 01       	movw	r18, r20
    10ea:	ab 01       	movw	r20, r22
    10ec:	fc 01       	movw	r30, r24
    10ee:	60 85       	ldd	r22, Z+8	; 0x08
    10f0:	71 85       	ldd	r23, Z+9	; 0x09
    10f2:	82 85       	ldd	r24, Z+10	; 0x0a
    10f4:	93 85       	ldd	r25, Z+11	; 0x0b
    10f6:	0e 94 7c 34 	call	0x68f8	; 0x68f8 <__mulsi3>
    10fa:	08 95       	ret

000010fc <_ZN6Motion13MotionControl8getStepsEv>:
  //-------------------------------------------------------------------------------------
  /** This method returns the number of steps that the driver has taken relative to the origin.
   */
  int32_t MotionControl::getSteps(void)
  {
    return steps;
    10fc:	fc 01       	movw	r30, r24
    10fe:	63 81       	ldd	r22, Z+3	; 0x03
    1100:	74 81       	ldd	r23, Z+4	; 0x04
    1102:	85 81       	ldd	r24, Z+5	; 0x05
    1104:	96 81       	ldd	r25, Z+6	; 0x06
  }
    1106:	08 95       	ret

00001108 <_ZN6Motion15VelocityControlC1Ej>:
   *  @param dir_bm A bit-mask indicating which pin on the port is used as the direction pin
   *  @param pwm_bm A bit-mask indicating which pin on the port is used as the pwm signal pin
   *  @param microstep_scaler A bit-mask indicating the factor that the default 200 steps
   *   of the motor is multiplied by
   */
  VelocityControl::VelocityControl ( uint16_t microstepScaler )
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	ec 01       	movw	r28, r24
    : MotionControl ( microstepScaler ), minOperatingFreqHz(500), rampAccel(1.5)
    110e:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN6Motion13MotionControlC1Ej>
    1112:	84 ef       	ldi	r24, 0xF4	; 244
    1114:	91 e0       	ldi	r25, 0x01	; 1
    1116:	a0 e0       	ldi	r26, 0x00	; 0
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	88 8b       	std	Y+16, r24	; 0x10
    111c:	99 8b       	std	Y+17, r25	; 0x11
    111e:	aa 8b       	std	Y+18, r26	; 0x12
    1120:	bb 8b       	std	Y+19, r27	; 0x13
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	a0 ec       	ldi	r26, 0xC0	; 192
    1128:	bf e3       	ldi	r27, 0x3F	; 63
    112a:	8c a3       	std	Y+36, r24	; 0x24
    112c:	9d a3       	std	Y+37, r25	; 0x25
    112e:	ae a3       	std	Y+38, r26	; 0x26
    1130:	bf a3       	std	Y+39, r27	; 0x27
  {
    rampFreqAccel = inchesToSteps ( rampAccel ) ;
    1132:	41 e0       	ldi	r20, 0x01	; 1
    1134:	50 e0       	ldi	r21, 0x00	; 0
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	ce 01       	movw	r24, r28
    113c:	0e 94 74 08 	call	0x10e8	; 0x10e8 <_ZN6Motion13MotionControl13inchesToStepsEm>
    1140:	0e 94 81 33 	call	0x6702	; 0x6702 <__floatunsisf>
    1144:	68 a7       	std	Y+40, r22	; 0x28
    1146:	79 a7       	std	Y+41, r23	; 0x29
    1148:	8a a7       	std	Y+42, r24	; 0x2a
    114a:	9b a7       	std	Y+43, r25	; 0x2b
  }
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	08 95       	ret

00001152 <_ZN6Motion15VelocityControl7setRampEP14InterruptTimermm>:

  //-------------------------------------------------------------------------------------
  /** This method sets the controls for the acceleration of the motor.
   */
  void VelocityControl::setRamp ( InterruptTimer * timer, uint32_t initialFreqHz, uint32_t finalFreqHz )
  {
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	fc 01       	movw	r30, r24
    rampInitialFreqHz = initialFreqHz;
    115c:	20 8f       	std	Z+24, r18	; 0x18
    115e:	31 8f       	std	Z+25, r19	; 0x19
    1160:	42 8f       	std	Z+26, r20	; 0x1a
    1162:	53 8f       	std	Z+27, r21	; 0x1b
    rampFinalFreqHz = finalFreqHz;
    1164:	e4 8e       	std	Z+28, r14	; 0x1c
    1166:	f5 8e       	std	Z+29, r15	; 0x1d
    1168:	06 8f       	std	Z+30, r16	; 0x1e
    116a:	17 8f       	std	Z+31, r17	; 0x1f
    rampCurrentFreqHz = initialFreqHz ;
    116c:	20 a3       	std	Z+32, r18	; 0x20
    116e:	31 a3       	std	Z+33, r19	; 0x21
    1170:	42 a3       	std	Z+34, r20	; 0x22
    1172:	53 a3       	std	Z+35, r21	; 0x23
    handlerCallCount = 0;
    1174:	14 8a       	std	Z+20, r1	; 0x14
    1176:	15 8a       	std	Z+21, r1	; 0x15
    1178:	16 8a       	std	Z+22, r1	; 0x16
    117a:	17 8a       	std	Z+23, r1	; 0x17
    //timer->set_freq_hz(init_freq_hz); 
  }
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	ff 90       	pop	r15
    1182:	ef 90       	pop	r14
    1184:	08 95       	ret

00001186 <_ZN6Motion15VelocityControl11rampHandlerEv>:

  //-------------------------------------------------------------------------------------
  /** This method controls the velocity ramp.
   */
  uint32_t VelocityControl::rampHandler ( )
  {
    1186:	cf 92       	push	r12
    1188:	df 92       	push	r13
    118a:	ef 92       	push	r14
    118c:	ff 92       	push	r15
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	ec 01       	movw	r28, r24
    if ( rampCurrentFreqHz < rampFinalFreqHz )
    1194:	c8 a0       	ldd	r12, Y+32	; 0x20
    1196:	d9 a0       	ldd	r13, Y+33	; 0x21
    1198:	ea a0       	ldd	r14, Y+34	; 0x22
    119a:	fb a0       	ldd	r15, Y+35	; 0x23
    119c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    119e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    11a0:	ae 8d       	ldd	r26, Y+30	; 0x1e
    11a2:	bf 8d       	ldd	r27, Y+31	; 0x1f
    11a4:	c8 16       	cp	r12, r24
    11a6:	d9 06       	cpc	r13, r25
    11a8:	ea 06       	cpc	r14, r26
    11aa:	fb 06       	cpc	r15, r27
    11ac:	18 f5       	brcc	.+70     	; 0x11f4 <_ZN6Motion15VelocityControl11rampHandlerEv+0x6e>
    {
      handlerCallCount++ ;
    11ae:	8c 89       	ldd	r24, Y+20	; 0x14
    11b0:	9d 89       	ldd	r25, Y+21	; 0x15
    11b2:	ae 89       	ldd	r26, Y+22	; 0x16
    11b4:	bf 89       	ldd	r27, Y+23	; 0x17
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	a1 1d       	adc	r26, r1
    11ba:	b1 1d       	adc	r27, r1
    11bc:	8c 8b       	std	Y+20, r24	; 0x14
    11be:	9d 8b       	std	Y+21, r25	; 0x15
    11c0:	ae 8b       	std	Y+22, r26	; 0x16
    11c2:	bf 8b       	std	Y+23, r27	; 0x17
      uint32_t freqDelta = rampFreqAccel / rampHandlerScanFreq ;
      rampCurrentFreqHz = rampCurrentFreqHz + freqDelta ;
    11c4:	6c a5       	ldd	r22, Y+44	; 0x2c
    11c6:	7d a5       	ldd	r23, Y+45	; 0x2d
    11c8:	8e a5       	ldd	r24, Y+46	; 0x2e
    11ca:	9f a5       	ldd	r25, Y+47	; 0x2f
    11cc:	0e 94 81 33 	call	0x6702	; 0x6702 <__floatunsisf>
    11d0:	9b 01       	movw	r18, r22
    11d2:	ac 01       	movw	r20, r24
    11d4:	68 a5       	ldd	r22, Y+40	; 0x28
    11d6:	79 a5       	ldd	r23, Y+41	; 0x29
    11d8:	8a a5       	ldd	r24, Y+42	; 0x2a
    11da:	9b a5       	ldd	r25, Y+43	; 0x2b
    11dc:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__divsf3>
    11e0:	0e 94 52 33 	call	0x66a4	; 0x66a4 <__fixunssfsi>
    11e4:	c6 0e       	add	r12, r22
    11e6:	d7 1e       	adc	r13, r23
    11e8:	e8 1e       	adc	r14, r24
    11ea:	f9 1e       	adc	r15, r25
    11ec:	c8 a2       	std	Y+32, r12	; 0x20
    11ee:	d9 a2       	std	Y+33, r13	; 0x21
    11f0:	ea a2       	std	Y+34, r14	; 0x22
    11f2:	fb a2       	std	Y+35, r15	; 0x23
    }

    return getRampCurrentFreqHz() ; 
    11f4:	68 a1       	ldd	r22, Y+32	; 0x20
    11f6:	79 a1       	ldd	r23, Y+33	; 0x21
    11f8:	8a a1       	ldd	r24, Y+34	; 0x22
    11fa:	9b a1       	ldd	r25, Y+35	; 0x23
  }
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	ff 90       	pop	r15
    1202:	ef 90       	pop	r14
    1204:	df 90       	pop	r13
    1206:	cf 90       	pop	r12
    1208:	08 95       	ret

0000120a <_ZN3ADC10start_convEv>:
    120a:	dc 01       	movw	r26, r24
    120c:	16 96       	adiw	r26, 0x06	; 6
    120e:	ed 91       	ld	r30, X+
    1210:	fc 91       	ld	r31, X
    1212:	17 97       	sbiw	r26, 0x07	; 7
    1214:	80 a1       	ldd	r24, Z+32	; 0x20
    1216:	80 68       	ori	r24, 0x80	; 128
    1218:	80 a3       	std	Z+32, r24	; 0x20
    121a:	08 95       	ret

0000121c <_ZN3ADC4readEPij>:
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	1f 92       	push	r1
    122a:	1f 92       	push	r1
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	8c 01       	movw	r16, r24
    1232:	7b 01       	movw	r14, r22
    1234:	49 83       	std	Y+1, r20	; 0x01
    1236:	5a 83       	std	Y+2, r21	; 0x02
    1238:	0e 94 05 09 	call	0x120a	; 0x120a <_ZN3ADC10start_convEv>
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	9a 83       	std	Y+2, r25	; 0x02
    1246:	89 2b       	or	r24, r25
    1248:	b9 f0       	breq	.+46     	; 0x1278 <_ZN3ADC4readEPij+0x5c>
    124a:	d8 01       	movw	r26, r16
    124c:	16 96       	adiw	r26, 0x06	; 6
    124e:	ed 91       	ld	r30, X+
    1250:	fc 91       	ld	r31, X
    1252:	17 97       	sbiw	r26, 0x07	; 7
    1254:	83 a1       	ldd	r24, Z+35	; 0x23
    1256:	80 ff       	sbrs	r24, 0
    1258:	f1 cf       	rjmp	.-30     	; 0x123c <_ZN3ADC4readEPij+0x20>
    125a:	0e c0       	rjmp	.+28     	; 0x1278 <_ZN3ADC4readEPij+0x5c>
    125c:	d8 01       	movw	r26, r16
    125e:	16 96       	adiw	r26, 0x06	; 6
    1260:	ed 91       	ld	r30, X+
    1262:	fc 91       	ld	r31, X
    1264:	17 97       	sbiw	r26, 0x07	; 7
    1266:	84 a1       	ldd	r24, Z+36	; 0x24
    1268:	95 a1       	ldd	r25, Z+37	; 0x25
    126a:	f7 01       	movw	r30, r14
    126c:	80 83       	st	Z, r24
    126e:	91 83       	std	Z+1, r25	; 0x01
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	07 c0       	rjmp	.+14     	; 0x1282 <_ZN3ADC4readEPij+0x66>
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	05 c0       	rjmp	.+10     	; 0x1282 <_ZN3ADC4readEPij+0x66>
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	89 2b       	or	r24, r25
    127e:	71 f7       	brne	.-36     	; 0x125c <_ZN3ADC4readEPij+0x40>
    1280:	f9 cf       	rjmp	.-14     	; 0x1274 <_ZN3ADC4readEPij+0x58>
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	ff 90       	pop	r15
    1290:	ef 90       	pop	r14
    1292:	08 95       	ret

00001294 <_ZN3ADC15get_voltage_refEv>:
    1294:	fc 01       	movw	r30, r24
    1296:	62 81       	ldd	r22, Z+2	; 0x02
    1298:	73 81       	ldd	r23, Z+3	; 0x03
    129a:	84 81       	ldd	r24, Z+4	; 0x04
    129c:	95 81       	ldd	r25, Z+5	; 0x05
    129e:	08 95       	ret

000012a0 <_ZN7task_mdC1EPKchjP8emstreamP6DM542TPN12DeviceDriver11LimitSwitchES8_P9frt_queueImESB_P11shared_dataIhEPSC_IbEj>:
	md->take_step();
}

void task_md::set_signal_low(void)
{
	md->set_signal_low();
    12a0:	2f 92       	push	r2
    12a2:	3f 92       	push	r3
    12a4:	4f 92       	push	r4
    12a6:	5f 92       	push	r5
    12a8:	6f 92       	push	r6
    12aa:	7f 92       	push	r7
    12ac:	8f 92       	push	r8
    12ae:	9f 92       	push	r9
    12b0:	af 92       	push	r10
    12b2:	bf 92       	push	r11
    12b4:	cf 92       	push	r12
    12b6:	df 92       	push	r13
    12b8:	ef 92       	push	r14
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	3c 01       	movw	r6, r24
    12ca:	2b 01       	movw	r4, r22
    12cc:	2c 8c       	ldd	r2, Y+28	; 0x1c
    12ce:	3d 8c       	ldd	r3, Y+29	; 0x1d
    12d0:	0e 94 08 2a 	call	0x5410	; 0x5410 <_ZN8frt_taskC1EPKchjP8emstream>
    12d4:	8b e0       	ldi	r24, 0x0B	; 11
    12d6:	90 e2       	ldi	r25, 0x20	; 32
    12d8:	f3 01       	movw	r30, r6
    12da:	80 83       	st	Z, r24
    12dc:	91 83       	std	Z+1, r25	; 0x01
    12de:	e2 8a       	std	Z+18, r14	; 0x12
    12e0:	f3 8a       	std	Z+19, r15	; 0x13
    12e2:	c4 8a       	std	Z+20, r12	; 0x14
    12e4:	d5 8a       	std	Z+21, r13	; 0x15
    12e6:	a6 8a       	std	Z+22, r10	; 0x16
    12e8:	b7 8a       	std	Z+23, r11	; 0x17
    12ea:	86 a2       	std	Z+38, r8	; 0x26
    12ec:	97 a2       	std	Z+39, r9	; 0x27
    12ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12f0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12f2:	82 ab       	std	Z+50, r24	; 0x32
    12f4:	93 ab       	std	Z+51, r25	; 0x33
    12f6:	88 8d       	ldd	r24, Y+24	; 0x18
    12f8:	99 8d       	ldd	r25, Y+25	; 0x19
    12fa:	86 ab       	std	Z+54, r24	; 0x36
    12fc:	97 ab       	std	Z+55, r25	; 0x37
    12fe:	8e 89       	ldd	r24, Y+22	; 0x16
    1300:	9f 89       	ldd	r25, Y+23	; 0x17
    1302:	86 af       	std	Z+62, r24	; 0x3e
    1304:	97 af       	std	Z+63, r25	; 0x3f
    1306:	ea 5b       	subi	r30, 0xBA	; 186
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	20 82       	st	Z, r2
    130c:	31 82       	std	Z+1, r3	; 0x01
    130e:	32 96       	adiw	r30, 0x02	; 2
    1310:	40 82       	st	Z, r4
    1312:	51 82       	std	Z+1, r5	; 0x01
    1314:	b1 01       	movw	r22, r2
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 81 33 	call	0x6702	; 0x6702 <__floatunsisf>
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	46 e1       	ldi	r20, 0x16	; 22
    1324:	54 e4       	ldi	r21, 0x44	; 68
    1326:	0e 94 0f 34 	call	0x681e	; 0x681e <__mulsf3>
    132a:	9b 01       	movw	r18, r22
    132c:	ac 01       	movw	r20, r24
    132e:	f3 01       	movw	r30, r6
    1330:	60 a7       	std	Z+40, r22	; 0x28
    1332:	71 a7       	std	Z+41, r23	; 0x29
    1334:	82 a7       	std	Z+42, r24	; 0x2a
    1336:	93 a7       	std	Z+43, r25	; 0x2b
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	80 e8       	ldi	r24, 0x80	; 128
    133e:	9f e3       	ldi	r25, 0x3F	; 63
    1340:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__divsf3>
    1344:	f3 01       	movw	r30, r6
    1346:	64 a7       	std	Z+44, r22	; 0x2c
    1348:	75 a7       	std	Z+45, r23	; 0x2d
    134a:	86 a7       	std	Z+46, r24	; 0x2e
    134c:	97 a7       	std	Z+47, r25	; 0x2f
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	ff 90       	pop	r15
    1358:	ef 90       	pop	r14
    135a:	df 90       	pop	r13
    135c:	cf 90       	pop	r12
    135e:	bf 90       	pop	r11
    1360:	af 90       	pop	r10
    1362:	9f 90       	pop	r9
    1364:	8f 90       	pop	r8
    1366:	7f 90       	pop	r7
    1368:	6f 90       	pop	r6
    136a:	5f 90       	pop	r5
    136c:	4f 90       	pop	r4
    136e:	3f 90       	pop	r3
    1370:	2f 90       	pop	r2
    1372:	08 95       	ret

00001374 <_ZN7task_md7motorOnEv>:
		reset_device();
	}
}

bool task_md::motorOn(void)
{
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	ec 01       	movw	r28, r24
	if (md->get_direction() == 0)
    137e:	8a 89       	ldd	r24, Y+18	; 0x12
    1380:	9b 89       	ldd	r25, Y+19	; 0x13
    1382:	dc 01       	movw	r26, r24
    1384:	ed 91       	ld	r30, X+
    1386:	fc 91       	ld	r31, X
    1388:	06 84       	ldd	r0, Z+14	; 0x0e
    138a:	f7 85       	ldd	r31, Z+15	; 0x0f
    138c:	e0 2d       	mov	r30, r0
    138e:	19 95       	eicall
    1390:	81 11       	cpse	r24, r1
    1392:	27 c0       	rjmp	.+78     	; 0x13e2 <_ZN7task_md7motorOnEv+0x6e>
	{
		if (!(LS_max->getStatus()))
    1394:	8e 89       	ldd	r24, Y+22	; 0x16
    1396:	9f 89       	ldd	r25, Y+23	; 0x17
    1398:	0e 94 ce 07 	call	0xf9c	; 0xf9c <_ZN12DeviceDriver11LimitSwitch9getStatusEv>
    139c:	81 11       	cpse	r24, r1
    139e:	48 c0       	rjmp	.+144    	; 0x1430 <_ZN7task_md7motorOnEv+0xbc>
		{
			md->motorOn();
    13a0:	8a 89       	ldd	r24, Y+18	; 0x12
    13a2:	9b 89       	ldd	r25, Y+19	; 0x13
    13a4:	dc 01       	movw	r26, r24
    13a6:	ed 91       	ld	r30, X+
    13a8:	fc 91       	ld	r31, X
    13aa:	01 90       	ld	r0, Z+
    13ac:	f0 81       	ld	r31, Z
    13ae:	e0 2d       	mov	r30, r0
    13b0:	19 95       	eicall
			*p_serial << task_name << PMS ("F") << endl;
    13b2:	0e 81       	ldd	r16, Y+6	; 0x06
    13b4:	1f 81       	ldd	r17, Y+7	; 0x07
    13b6:	c8 5b       	subi	r28, 0xB8	; 184
    13b8:	df 4f       	sbci	r29, 0xFF	; 255
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    13ba:	68 81       	ld	r22, Y
    13bc:	79 81       	ldd	r23, Y+1	; 0x01
    13be:	c8 01       	movw	r24, r16
    13c0:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    13c4:	6a e0       	ldi	r22, 0x0A	; 10
    13c6:	c8 01       	movw	r24, r16
    13c8:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    13cc:	ec 01       	movw	r28, r24
    13ce:	68 ea       	ldi	r22, 0xA8	; 168
    13d0:	76 e0       	ldi	r23, 0x06	; 6
    13d2:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    13d6:	66 e0       	ldi	r22, 0x06	; 6
    13d8:	ce 01       	movw	r24, r28
    13da:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
			return true;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	2a c0       	rjmp	.+84     	; 0x1436 <_ZN7task_md7motorOnEv+0xc2>
			return false;
		}
	}
	else
	{
		if (!(LS_min->getStatus()))
    13e2:	8c 89       	ldd	r24, Y+20	; 0x14
    13e4:	9d 89       	ldd	r25, Y+21	; 0x15
    13e6:	0e 94 ce 07 	call	0xf9c	; 0xf9c <_ZN12DeviceDriver11LimitSwitch9getStatusEv>
    13ea:	81 11       	cpse	r24, r1
    13ec:	23 c0       	rjmp	.+70     	; 0x1434 <_ZN7task_md7motorOnEv+0xc0>
		{
			md->motorOn();
    13ee:	8a 89       	ldd	r24, Y+18	; 0x12
    13f0:	9b 89       	ldd	r25, Y+19	; 0x13
    13f2:	dc 01       	movw	r26, r24
    13f4:	ed 91       	ld	r30, X+
    13f6:	fc 91       	ld	r31, X
    13f8:	01 90       	ld	r0, Z+
    13fa:	f0 81       	ld	r31, Z
    13fc:	e0 2d       	mov	r30, r0
    13fe:	19 95       	eicall
			*p_serial << task_name << PMS ("R") << endl;
    1400:	0e 81       	ldd	r16, Y+6	; 0x06
    1402:	1f 81       	ldd	r17, Y+7	; 0x07
    1404:	c8 5b       	subi	r28, 0xB8	; 184
    1406:	df 4f       	sbci	r29, 0xFF	; 255
    1408:	68 81       	ld	r22, Y
    140a:	79 81       	ldd	r23, Y+1	; 0x01
    140c:	c8 01       	movw	r24, r16
    140e:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1412:	6a e0       	ldi	r22, 0x0A	; 10
    1414:	c8 01       	movw	r24, r16
    1416:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    141a:	ec 01       	movw	r28, r24
    141c:	66 ea       	ldi	r22, 0xA6	; 166
    141e:	76 e0       	ldi	r23, 0x06	; 6
    1420:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1424:	66 e0       	ldi	r22, 0x06	; 6
    1426:	ce 01       	movw	r24, r28
    1428:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
			return true;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	03 c0       	rjmp	.+6      	; 0x1436 <_ZN7task_md7motorOnEv+0xc2>
			*p_serial << task_name << PMS ("F") << endl;
			return true;
		}
		else
		{
			return false;
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <_ZN7task_md7motorOnEv+0xc2>
			*p_serial << task_name << PMS ("R") << endl;
			return true;
		}
		else
		{
			return false;
    1434:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	08 95       	ret

00001440 <_ZN7task_md3runEv>:
/** This task interacts with the motor driver object in order to control the motors
 *  in ways specified by the user.
 */

void task_md::run (void)
{
    1440:	ec 01       	movw	r28, r24
	char char_in;                           // Character read from serial device
	time_stamp a_time;                      // Holds the time so it can be displayed
	portTickType previous_ticks;
	uint16_t delay_counter = 0;
    1442:	c1 2c       	mov	r12, r1
    1444:	d1 2c       	mov	r13, r1
				{
					md->motorOff();
					transition_to(8);
				}
				
				freq_hz = md->rampHandler();
    1446:	4c 01       	movw	r8, r24
    1448:	80 e4       	ldi	r24, 0x40	; 64
    144a:	88 0e       	add	r8, r24
    144c:	91 1c       	adc	r9, r1
					}
				}
				
				if (++delay_counter == 5)
				{
					*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    144e:	5e 01       	movw	r10, r28
    1450:	a8 e4       	ldi	r26, 0x48	; 72
    1452:	aa 0e       	add	r10, r26
    1454:	b1 1c       	adc	r11, r1
					motorOn();
				}
				else if (steps > step_destination)
				{
					md->motorCW();
					md->setRamp( md->thisInterruptTimer, 500, max_vel );
    1456:	1e 01       	movw	r2, r28
    1458:	b2 e4       	ldi	r27, 0x42	; 66
    145a:	2b 0e       	add	r2, r27
    145c:	31 1c       	adc	r3, r1
			//*p_serial << task_name << state << endl;
			//state_delay_counter = 0;
		//}
		
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
    145e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	89 30       	cpi	r24, 0x09	; 9
    1464:	91 05       	cpc	r25, r1
    1466:	08 f0       	brcs	.+2      	; 0x146a <_ZN7task_md3runEv+0x2a>
    1468:	8f c3       	rjmp	.+1822   	; 0x1b88 <_ZN7task_md3runEv+0x748>
    146a:	fc 01       	movw	r30, r24
    146c:	88 27       	eor	r24, r24
    146e:	e2 50       	subi	r30, 0x02	; 2
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	8f 4f       	sbci	r24, 0xFF	; 255
    1474:	0c 94 ae 34 	jmp	0x695c	; 0x695c <__tablejump2__>
			// In state 0, the motor task is powered CW back to the origin location in order
			// to get a starting location for all subsequent steps.
			case (0):
			
				#ifdef USE_FAKE_DRIVERS
				transition_to( 2 ) ;
    1478:	62 e0       	ldi	r22, 0x02	; 2
    147a:	ce 01       	movw	r24, r28
    147c:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
				#ifndef USE_FAKE_DRIVERS
				motor_operator->put(2);
				transition_to(3);
				#endif
			
			    break;
    1480:	83 c3       	rjmp	.+1798   	; 0x1b88 <_ZN7task_md3runEv+0x748>
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 1, the motor is returning to the origin and waiting for the limit
			// switch to power it off.
			case (1):
				
				md->rampHandler();
    1482:	8a 89       	ldd	r24, Y+18	; 0x12
    1484:	9b 89       	ldd	r25, Y+19	; 0x13
    1486:	4e 96       	adiw	r24, 0x1e	; 30
    1488:	0e 94 c3 08 	call	0x1186	; 0x1186 <_ZN6Motion15VelocityControl11rampHandlerEv>
				
                if (md->get_status())
    148c:	8a 89       	ldd	r24, Y+18	; 0x12
    148e:	9b 89       	ldd	r25, Y+19	; 0x13
    1490:	dc 01       	movw	r26, r24
    1492:	ed 91       	ld	r30, X+
    1494:	fc 91       	ld	r31, X
    1496:	04 88       	ldd	r0, Z+20	; 0x14
    1498:	f5 89       	ldd	r31, Z+21	; 0x15
    149a:	e0 2d       	mov	r30, r0
    149c:	19 95       	eicall
    149e:	88 23       	and	r24, r24
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <_ZN7task_md3runEv+0x64>
    14a2:	72 c3       	rjmp	.+1764   	; 0x1b88 <_ZN7task_md3runEv+0x748>
				{
					motor_operator->put(0);
    14a4:	ee a9       	ldd	r30, Y+54	; 0x36
    14a6:	ff a9       	ldd	r31, Y+55	; 0x37
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	0f 92       	push	r0
			the_data = new_data;
    14ae:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    14b0:	0f 90       	pop	r0
    14b2:	0f be       	out	0x3f, r0	; 63
					*p_serial << PMS ("S2") << endl;
    14b4:	6a e0       	ldi	r22, 0x0A	; 10
    14b6:	8e 81       	ldd	r24, Y+6	; 0x06
    14b8:	9f 81       	ldd	r25, Y+7	; 0x07
    14ba:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    14be:	3c 01       	movw	r6, r24
    14c0:	6f ec       	ldi	r22, 0xCF	; 207
    14c2:	76 e0       	ldi	r23, 0x06	; 6
    14c4:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    14c8:	66 e0       	ldi	r22, 0x06	; 6
    14ca:	c3 01       	movw	r24, r6
    14cc:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
					transition_to(2);
    14d0:	62 e0       	ldi	r22, 0x02	; 2
    14d2:	ce 01       	movw	r24, r28
    14d4:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    14d8:	57 c3       	rjmp	.+1710   	; 0x1b88 <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    14e0:	0f 90       	pop	r0
    14e2:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 2, the motor is idle - waiting for a command to switch it into 
			// a certain mode.
			case (2):
				//*p_serial << task_name << PMS ("S2") << endl;
				if(direct_mode.get())
    14e4:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <direct_mode>
    14e8:	88 23       	and	r24, r24
    14ea:	29 f0       	breq	.+10     	; 0x14f6 <_ZN7task_md3runEv+0xb6>
				{
					transition_to(3);
    14ec:	63 e0       	ldi	r22, 0x03	; 3
    14ee:	ce 01       	movw	r24, r28
    14f0:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    14f4:	49 c3       	rjmp	.+1682   	; 0x1b88 <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    14fc:	0f 90       	pop	r0
    14fe:	0f be       	out	0x3f, r0	; 63
				}
				else if(coordinate_mode.get())
    1500:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    1504:	88 23       	and	r24, r24
    1506:	29 f0       	breq	.+10     	; 0x1512 <_ZN7task_md3runEv+0xd2>
				{
					transition_to(5);
    1508:	65 e0       	ldi	r22, 0x05	; 5
    150a:	ce 01       	movw	r24, r28
    150c:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    1510:	3b c3       	rjmp	.+1654   	; 0x1b88 <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1518:	0f 90       	pop	r0
    151a:	0f be       	out	0x3f, r0	; 63
				}
				else if(incremental_mode.get())
    151c:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <incremental_mode>
    1520:	88 23       	and	r24, r24
    1522:	09 f4       	brne	.+2      	; 0x1526 <_ZN7task_md3runEv+0xe6>
    1524:	31 c3       	rjmp	.+1634   	; 0x1b88 <_ZN7task_md3runEv+0x748>
				{
					transition_to(5);
    1526:	65 e0       	ldi	r22, 0x05	; 5
    1528:	ce 01       	movw	r24, r28
    152a:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    152e:	2c c3       	rjmp	.+1624   	; 0x1b88 <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	0f 92       	push	r0
			temporary_copy = the_data;
    1536:	ee a9       	ldd	r30, Y+54	; 0x36
    1538:	ff a9       	ldd	r31, Y+55	; 0x37
    153a:	80 81       	ld	r24, Z
			portEXIT_CRITICAL ();
    153c:	0f 90       	pop	r0
    153e:	0f be       	out	0x3f, r0	; 63
			
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
			// In State 3, the motor is in the off state of direct operation mode.	
			case (3):
			    
				if (motor_operator->get() == 1)
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	09 f0       	breq	.+2      	; 0x1546 <_ZN7task_md3runEv+0x106>
    1544:	3a c0       	rjmp	.+116    	; 0x15ba <_ZN7task_md3runEv+0x17a>
				{
					md->motorCCW();
    1546:	8a 89       	ldd	r24, Y+18	; 0x12
    1548:	9b 89       	ldd	r25, Y+19	; 0x13
    154a:	dc 01       	movw	r26, r24
    154c:	ed 91       	ld	r30, X+
    154e:	fc 91       	ld	r31, X
    1550:	04 80       	ldd	r0, Z+4	; 0x04
    1552:	f5 81       	ldd	r31, Z+5	; 0x05
    1554:	e0 2d       	mov	r30, r0
    1556:	19 95       	eicall
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    155e:	0f 90       	pop	r0
    1560:	0f be       	out	0x3f, r0	; 63
					md->setRamp( md->thisInterruptTimer, 500, gen_max_v.get() );
    1562:	8a 89       	ldd	r24, Y+18	; 0x12
    1564:	9b 89       	ldd	r25, Y+19	; 0x13
    1566:	e0 90 39 21 	lds	r14, 0x2139	; 0x802139 <gen_max_v>
    156a:	f0 90 3a 21 	lds	r15, 0x213A	; 0x80213a <gen_max_v+0x1>
    156e:	00 91 3b 21 	lds	r16, 0x213B	; 0x80213b <gen_max_v+0x2>
    1572:	10 91 3c 21 	lds	r17, 0x213C	; 0x80213c <gen_max_v+0x3>
    1576:	fc 01       	movw	r30, r24
    1578:	64 8d       	ldd	r22, Z+28	; 0x1c
    157a:	75 8d       	ldd	r23, Z+29	; 0x1d
    157c:	24 ef       	ldi	r18, 0xF4	; 244
    157e:	31 e0       	ldi	r19, 0x01	; 1
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	4e 96       	adiw	r24, 0x1e	; 30
    1586:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN6Motion15VelocityControl7setRampEP14InterruptTimermm>
					motor_on = motorOn();
    158a:	ce 01       	movw	r24, r28
    158c:	0e 94 ba 09 	call	0x1374	; 0x1374 <_ZN7task_md7motorOnEv>
    1590:	8d af       	std	Y+61, r24	; 0x3d
					if (motor_on)
    1592:	88 23       	and	r24, r24
    1594:	29 f0       	breq	.+10     	; 0x15a0 <_ZN7task_md3runEv+0x160>
					{
						transition_to(4);
    1596:	64 e0       	ldi	r22, 0x04	; 4
    1598:	ce 01       	movw	r24, r28
    159a:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    159e:	f4 c2       	rjmp	.+1512   	; 0x1b88 <_ZN7task_md3runEv+0x748>
					}
					else
					{
						motor_operator->put(0);
    15a0:	ee a9       	ldd	r30, Y+54	; 0x36
    15a2:	ff a9       	ldd	r31, Y+55	; 0x37
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	0f 92       	push	r0
			the_data = new_data;
    15aa:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    15ac:	0f 90       	pop	r0
    15ae:	0f be       	out	0x3f, r0	; 63
						transition_to(2);
    15b0:	62 e0       	ldi	r22, 0x02	; 2
    15b2:	ce 01       	movw	r24, r28
    15b4:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    15b8:	e7 c2       	rjmp	.+1486   	; 0x1b88 <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    15c0:	0f 90       	pop	r0
    15c2:	0f be       	out	0x3f, r0	; 63
					}
				}
				else if (motor_operator->get() == 2)
    15c4:	82 30       	cpi	r24, 0x02	; 2
    15c6:	09 f0       	breq	.+2      	; 0x15ca <_ZN7task_md3runEv+0x18a>
    15c8:	3a c0       	rjmp	.+116    	; 0x163e <_ZN7task_md3runEv+0x1fe>
				{
					md->motorCW();
    15ca:	8a 89       	ldd	r24, Y+18	; 0x12
    15cc:	9b 89       	ldd	r25, Y+19	; 0x13
    15ce:	dc 01       	movw	r26, r24
    15d0:	ed 91       	ld	r30, X+
    15d2:	fc 91       	ld	r31, X
    15d4:	02 80       	ldd	r0, Z+2	; 0x02
    15d6:	f3 81       	ldd	r31, Z+3	; 0x03
    15d8:	e0 2d       	mov	r30, r0
    15da:	19 95       	eicall
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    15e2:	0f 90       	pop	r0
    15e4:	0f be       	out	0x3f, r0	; 63
					md->setRamp( md->thisInterruptTimer, 500, gen_max_v.get() );
    15e6:	8a 89       	ldd	r24, Y+18	; 0x12
    15e8:	9b 89       	ldd	r25, Y+19	; 0x13
    15ea:	e0 90 39 21 	lds	r14, 0x2139	; 0x802139 <gen_max_v>
    15ee:	f0 90 3a 21 	lds	r15, 0x213A	; 0x80213a <gen_max_v+0x1>
    15f2:	00 91 3b 21 	lds	r16, 0x213B	; 0x80213b <gen_max_v+0x2>
    15f6:	10 91 3c 21 	lds	r17, 0x213C	; 0x80213c <gen_max_v+0x3>
    15fa:	fc 01       	movw	r30, r24
    15fc:	64 8d       	ldd	r22, Z+28	; 0x1c
    15fe:	75 8d       	ldd	r23, Z+29	; 0x1d
    1600:	24 ef       	ldi	r18, 0xF4	; 244
    1602:	31 e0       	ldi	r19, 0x01	; 1
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	4e 96       	adiw	r24, 0x1e	; 30
    160a:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN6Motion15VelocityControl7setRampEP14InterruptTimermm>
					motor_on = motorOn();
    160e:	ce 01       	movw	r24, r28
    1610:	0e 94 ba 09 	call	0x1374	; 0x1374 <_ZN7task_md7motorOnEv>
    1614:	8d af       	std	Y+61, r24	; 0x3d
					if (motor_on)
    1616:	88 23       	and	r24, r24
    1618:	29 f0       	breq	.+10     	; 0x1624 <_ZN7task_md3runEv+0x1e4>
					{
						transition_to(4);
    161a:	64 e0       	ldi	r22, 0x04	; 4
    161c:	ce 01       	movw	r24, r28
    161e:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    1622:	b2 c2       	rjmp	.+1380   	; 0x1b88 <_ZN7task_md3runEv+0x748>
					}	
					else
					{
						motor_operator->put(0);
    1624:	ee a9       	ldd	r30, Y+54	; 0x36
    1626:	ff a9       	ldd	r31, Y+55	; 0x37
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	0f 92       	push	r0
			the_data = new_data;
    162e:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    1630:	0f 90       	pop	r0
    1632:	0f be       	out	0x3f, r0	; 63
						transition_to(2);
    1634:	62 e0       	ldi	r22, 0x02	; 2
    1636:	ce 01       	movw	r24, r28
    1638:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    163c:	a5 c2       	rjmp	.+1354   	; 0x1b88 <_ZN7task_md3runEv+0x748>
					}	
				}
				else
				{
					transition_to(2);
    163e:	62 e0       	ldi	r22, 0x02	; 2
    1640:	ce 01       	movw	r24, r28
    1642:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    1646:	a0 c2       	rjmp	.+1344   	; 0x1b88 <_ZN7task_md3runEv+0x748>
			
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In State 4, the motor is enabled, waiting for a stop command.
			case (4):
								
				md->rampHandler();
    1648:	8a 89       	ldd	r24, Y+18	; 0x12
    164a:	9b 89       	ldd	r25, Y+19	; 0x13
    164c:	4e 96       	adiw	r24, 0x1e	; 30
    164e:	0e 94 c3 08 	call	0x1186	; 0x1186 <_ZN6Motion15VelocityControl11rampHandlerEv>
				
				if(md->get_status() == false)
    1652:	8a 89       	ldd	r24, Y+18	; 0x12
    1654:	9b 89       	ldd	r25, Y+19	; 0x13
    1656:	dc 01       	movw	r26, r24
    1658:	ed 91       	ld	r30, X+
    165a:	fc 91       	ld	r31, X
    165c:	04 88       	ldd	r0, Z+20	; 0x14
    165e:	f5 89       	ldd	r31, Z+21	; 0x15
    1660:	e0 2d       	mov	r30, r0
    1662:	19 95       	eicall
    1664:	81 11       	cpse	r24, r1
    1666:	08 c0       	rjmp	.+16     	; 0x1678 <_ZN7task_md3runEv+0x238>
				{
					motor_operator->put(0);
    1668:	ee a9       	ldd	r30, Y+54	; 0x36
    166a:	ff a9       	ldd	r31, Y+55	; 0x37
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	0f 92       	push	r0
			the_data = new_data;
    1672:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    1674:	0f 90       	pop	r0
    1676:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
			temporary_copy = the_data;
    1682:	ee a9       	ldd	r30, Y+54	; 0x36
    1684:	ff a9       	ldd	r31, Y+55	; 0x37
				}
				
			    if(motor_operator->get() == 0)
    1686:	80 81       	ld	r24, Z
    1688:	81 11       	cpse	r24, r1
    168a:	42 c0       	rjmp	.+132    	; 0x1710 <_ZN7task_md3runEv+0x2d0>
				{
					md->motorOff();
    168c:	8a 89       	ldd	r24, Y+18	; 0x12
    168e:	9b 89       	ldd	r25, Y+19	; 0x13
    1690:	dc 01       	movw	r26, r24
    1692:	ed 91       	ld	r30, X+
    1694:	fc 91       	ld	r31, X
    1696:	06 80       	ldd	r0, Z+6	; 0x06
    1698:	f7 81       	ldd	r31, Z+7	; 0x07
    169a:	e0 2d       	mov	r30, r0
    169c:	19 95       	eicall
					*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    169e:	8a 89       	ldd	r24, Y+18	; 0x12
    16a0:	9b 89       	ldd	r25, Y+19	; 0x13
    16a2:	4e 96       	adiw	r24, 0x1e	; 30
    16a4:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_ZN6Motion13MotionControl8getStepsEv>
    16a8:	2b 01       	movw	r4, r22
    16aa:	3c 01       	movw	r6, r24
    16ac:	0e 81       	ldd	r16, Y+6	; 0x06
    16ae:	1f 81       	ldd	r17, Y+7	; 0x07
    16b0:	f5 01       	movw	r30, r10
    16b2:	60 81       	ld	r22, Z
    16b4:	71 81       	ldd	r23, Z+1	; 0x01
    16b6:	c8 01       	movw	r24, r16
    16b8:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    16bc:	6a e0       	ldi	r22, 0x0A	; 10
    16be:	c8 01       	movw	r24, r16
    16c0:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    16c4:	8c 01       	movw	r16, r24
    16c6:	6a ec       	ldi	r22, 0xCA	; 202
    16c8:	76 e0       	ldi	r23, 0x06	; 6
    16ca:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    16ce:	b3 01       	movw	r22, r6
    16d0:	a2 01       	movw	r20, r4
    16d2:	c8 01       	movw	r24, r16
    16d4:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <_ZN8emstreamlsEl>
    16d8:	66 e0       	ldi	r22, 0x06	; 6
    16da:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
					*p_serial << task_name << PMS ("S") << endl;
    16de:	0e 81       	ldd	r16, Y+6	; 0x06
    16e0:	1f 81       	ldd	r17, Y+7	; 0x07
    16e2:	d5 01       	movw	r26, r10
    16e4:	6d 91       	ld	r22, X+
    16e6:	7c 91       	ld	r23, X
    16e8:	c8 01       	movw	r24, r16
    16ea:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    16ee:	6a e0       	ldi	r22, 0x0A	; 10
    16f0:	c8 01       	movw	r24, r16
    16f2:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    16f6:	8c 01       	movw	r16, r24
    16f8:	68 ec       	ldi	r22, 0xC8	; 200
    16fa:	76 e0       	ldi	r23, 0x06	; 6
    16fc:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1700:	66 e0       	ldi	r22, 0x06	; 6
    1702:	c8 01       	movw	r24, r16
    1704:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
					transition_to(2);
    1708:	62 e0       	ldi	r22, 0x02	; 2
    170a:	ce 01       	movw	r24, r28
    170c:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
				}
				
				if (++delay_counter == 5)
    1710:	bf ef       	ldi	r27, 0xFF	; 255
    1712:	cb 1a       	sub	r12, r27
    1714:	db 0a       	sbc	r13, r27
    1716:	e5 e0       	ldi	r30, 0x05	; 5
    1718:	ce 16       	cp	r12, r30
    171a:	d1 04       	cpc	r13, r1
    171c:	09 f0       	breq	.+2      	; 0x1720 <_ZN7task_md3runEv+0x2e0>
    171e:	34 c2       	rjmp	.+1128   	; 0x1b88 <_ZN7task_md3runEv+0x748>
				{
					*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    1720:	8a 89       	ldd	r24, Y+18	; 0x12
    1722:	9b 89       	ldd	r25, Y+19	; 0x13
    1724:	4e 96       	adiw	r24, 0x1e	; 30
    1726:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_ZN6Motion13MotionControl8getStepsEv>
    172a:	2b 01       	movw	r4, r22
    172c:	3c 01       	movw	r6, r24
    172e:	0e 81       	ldd	r16, Y+6	; 0x06
    1730:	1f 81       	ldd	r17, Y+7	; 0x07
    1732:	d5 01       	movw	r26, r10
    1734:	6d 91       	ld	r22, X+
    1736:	7c 91       	ld	r23, X
    1738:	c8 01       	movw	r24, r16
    173a:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    173e:	6a e0       	ldi	r22, 0x0A	; 10
    1740:	c8 01       	movw	r24, r16
    1742:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    1746:	8c 01       	movw	r16, r24
    1748:	63 ec       	ldi	r22, 0xC3	; 195
    174a:	76 e0       	ldi	r23, 0x06	; 6
    174c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1750:	b3 01       	movw	r22, r6
    1752:	a2 01       	movw	r20, r4
    1754:	c8 01       	movw	r24, r16
    1756:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <_ZN8emstreamlsEl>
    175a:	66 e0       	ldi	r22, 0x06	; 6
    175c:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
					delay_counter = 0;
    1760:	c1 2c       	mov	r12, r1
    1762:	d1 2c       	mov	r13, r1
    1764:	11 c2       	rjmp	.+1058   	; 0x1b88 <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    176c:	0f 90       	pop	r0
    176e:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In State 5, the motor is disabled, and awaits a signal from the sensor before
			// it begins calculating its operation parameters to reach the next destination.	
			case (5):
							
				if (!(coordinate_mode.get()) && !(incremental_mode.get()) && !(drawing_mode.get()))
    1770:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    1774:	81 11       	cpse	r24, r1
    1776:	17 c0       	rjmp	.+46     	; 0x17a6 <_ZN7task_md3runEv+0x366>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    177e:	0f 90       	pop	r0
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <incremental_mode>
    1786:	81 11       	cpse	r24, r1
    1788:	0e c0       	rjmp	.+28     	; 0x17a6 <_ZN7task_md3runEv+0x366>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1790:	0f 90       	pop	r0
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <drawing_mode>
    1798:	81 11       	cpse	r24, r1
    179a:	05 c0       	rjmp	.+10     	; 0x17a6 <_ZN7task_md3runEv+0x366>
				{
					transition_to(2);
    179c:	62 e0       	ldi	r22, 0x02	; 2
    179e:	ce 01       	movw	r24, r28
    17a0:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    17a4:	f1 c1       	rjmp	.+994    	; 0x1b88 <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    17ac:	0f 90       	pop	r0
    17ae:	0f be       	out	0x3f, r0	; 63
				}	
				else if(next_node.get())
    17b0:	80 91 64 21 	lds	r24, 0x2164	; 0x802164 <next_node>
    17b4:	88 23       	and	r24, r24
    17b6:	09 f4       	brne	.+2      	; 0x17ba <_ZN7task_md3runEv+0x37a>
    17b8:	e7 c1       	rjmp	.+974    	; 0x1b88 <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    17c0:	0f 90       	pop	r0
    17c2:	0f be       	out	0x3f, r0	; 63
				{
					max_vel = gen_max_v.get();
    17c4:	80 91 39 21 	lds	r24, 0x2139	; 0x802139 <gen_max_v>
    17c8:	90 91 3a 21 	lds	r25, 0x213A	; 0x80213a <gen_max_v+0x1>
    17cc:	a0 91 3b 21 	lds	r26, 0x213B	; 0x80213b <gen_max_v+0x2>
    17d0:	b0 91 3c 21 	lds	r27, 0x213C	; 0x80213c <gen_max_v+0x3>
    17d4:	f1 01       	movw	r30, r2
    17d6:	80 83       	st	Z, r24
    17d8:	91 83       	std	Z+1, r25	; 0x01
    17da:	a2 83       	std	Z+2, r26	; 0x02
    17dc:	b3 83       	std	Z+3, r27	; 0x03
					transition_to(6);
    17de:	66 e0       	ldi	r22, 0x06	; 6
    17e0:	ce 01       	movw	r24, r28
    17e2:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    17e6:	d0 c1       	rjmp	.+928    	; 0x1b88 <_ZN7task_md3runEv+0x748>
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In State 6, the motor is calculating how many steps it must take to reach 
			// the desired node.
			case (6):
			    
				steps = md->getSteps();
    17e8:	8a 89       	ldd	r24, Y+18	; 0x12
    17ea:	9b 89       	ldd	r25, Y+19	; 0x13
    17ec:	4e 96       	adiw	r24, 0x1e	; 30
    17ee:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_ZN6Motion13MotionControl8getStepsEv>
    17f2:	6c 8f       	std	Y+28, r22	; 0x1c
    17f4:	7d 8f       	std	Y+29, r23	; 0x1d
    17f6:	8e 8f       	std	Y+30, r24	; 0x1e
    17f8:	9f 8f       	std	Y+31, r25	; 0x1f
				step_destination = locations->get();
    17fa:	8e a1       	ldd	r24, Y+38	; 0x26
    17fc:	9f a1       	ldd	r25, Y+39	; 0x27
    17fe:	dc 01       	movw	r26, r24
    1800:	ed 91       	ld	r30, X+
    1802:	fc 91       	ld	r31, X
    1804:	00 84       	ldd	r0, Z+8	; 0x08
    1806:	f1 85       	ldd	r31, Z+9	; 0x09
    1808:	e0 2d       	mov	r30, r0
    180a:	19 95       	eicall
    180c:	69 af       	std	Y+57, r22	; 0x39
    180e:	7a af       	std	Y+58, r23	; 0x3a
    1810:	8b af       	std	Y+59, r24	; 0x3b
    1812:	9c af       	std	Y+60, r25	; 0x3c
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    181a:	0f 90       	pop	r0
    181c:	0f be       	out	0x3f, r0	; 63
				if (drawing_mode.get())
    181e:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <drawing_mode>
    1822:	88 23       	and	r24, r24
    1824:	49 f1       	breq	.+82     	; 0x1878 <_ZN7task_md3runEv+0x438>
				{
					max_vel = max_velocity->get();
    1826:	8e ad       	ldd	r24, Y+62	; 0x3e
    1828:	9f ad       	ldd	r25, Y+63	; 0x3f
    182a:	dc 01       	movw	r26, r24
    182c:	ed 91       	ld	r30, X+
    182e:	fc 91       	ld	r31, X
    1830:	00 84       	ldd	r0, Z+8	; 0x08
    1832:	f1 85       	ldd	r31, Z+9	; 0x09
    1834:	e0 2d       	mov	r30, r0
    1836:	19 95       	eicall
    1838:	2b 01       	movw	r4, r22
    183a:	3c 01       	movw	r6, r24
    183c:	f1 01       	movw	r30, r2
    183e:	60 83       	st	Z, r22
    1840:	71 83       	std	Z+1, r23	; 0x01
    1842:	82 83       	std	Z+2, r24	; 0x02
    1844:	93 83       	std	Z+3, r25	; 0x03
					*p_serial << task_name << PMS ("vel: ") << max_vel << endl;
    1846:	0e 81       	ldd	r16, Y+6	; 0x06
    1848:	1f 81       	ldd	r17, Y+7	; 0x07
    184a:	d5 01       	movw	r26, r10
    184c:	6d 91       	ld	r22, X+
    184e:	7c 91       	ld	r23, X
    1850:	c8 01       	movw	r24, r16
    1852:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1856:	6a e0       	ldi	r22, 0x0A	; 10
    1858:	c8 01       	movw	r24, r16
    185a:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    185e:	8c 01       	movw	r16, r24
    1860:	6d eb       	ldi	r22, 0xBD	; 189
    1862:	76 e0       	ldi	r23, 0x06	; 6
    1864:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1868:	b3 01       	movw	r22, r6
    186a:	a2 01       	movw	r20, r4
    186c:	c8 01       	movw	r24, r16
    186e:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <_ZN8emstreamlsEm>
    1872:	66 e0       	ldi	r22, 0x06	; 6
    1874:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
				}
							
				if (steps < step_destination)
    1878:	4c 8d       	ldd	r20, Y+28	; 0x1c
    187a:	5d 8d       	ldd	r21, Y+29	; 0x1d
    187c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    187e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1880:	89 ad       	ldd	r24, Y+57	; 0x39
    1882:	9a ad       	ldd	r25, Y+58	; 0x3a
    1884:	ab ad       	ldd	r26, Y+59	; 0x3b
    1886:	bc ad       	ldd	r27, Y+60	; 0x3c
    1888:	48 17       	cp	r20, r24
    188a:	59 07       	cpc	r21, r25
    188c:	6a 07       	cpc	r22, r26
    188e:	7b 07       	cpc	r23, r27
    1890:	04 f5       	brge	.+64     	; 0x18d2 <_ZN7task_md3runEv+0x492>
				{
					md->motorCCW();
    1892:	8a 89       	ldd	r24, Y+18	; 0x12
    1894:	9b 89       	ldd	r25, Y+19	; 0x13
    1896:	dc 01       	movw	r26, r24
    1898:	ed 91       	ld	r30, X+
    189a:	fc 91       	ld	r31, X
    189c:	04 80       	ldd	r0, Z+4	; 0x04
    189e:	f5 81       	ldd	r31, Z+5	; 0x05
    18a0:	e0 2d       	mov	r30, r0
    18a2:	19 95       	eicall
					md->setRamp( md->thisInterruptTimer, 500, max_vel ) ;		
    18a4:	8a 89       	ldd	r24, Y+18	; 0x12
    18a6:	9b 89       	ldd	r25, Y+19	; 0x13
    18a8:	f1 01       	movw	r30, r2
    18aa:	e0 80       	ld	r14, Z
    18ac:	f1 80       	ldd	r15, Z+1	; 0x01
    18ae:	02 81       	ldd	r16, Z+2	; 0x02
    18b0:	13 81       	ldd	r17, Z+3	; 0x03
    18b2:	dc 01       	movw	r26, r24
    18b4:	5c 96       	adiw	r26, 0x1c	; 28
    18b6:	6d 91       	ld	r22, X+
    18b8:	7c 91       	ld	r23, X
    18ba:	5d 97       	sbiw	r26, 0x1d	; 29
    18bc:	24 ef       	ldi	r18, 0xF4	; 244
    18be:	31 e0       	ldi	r19, 0x01	; 1
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	4e 96       	adiw	r24, 0x1e	; 30
    18c6:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN6Motion15VelocityControl7setRampEP14InterruptTimermm>
					motorOn();
    18ca:	ce 01       	movw	r24, r28
    18cc:	0e 94 ba 09 	call	0x1374	; 0x1374 <_ZN7task_md7motorOnEv>
    18d0:	24 c0       	rjmp	.+72     	; 0x191a <_ZN7task_md3runEv+0x4da>
				}
				else if (steps > step_destination)
    18d2:	84 17       	cp	r24, r20
    18d4:	95 07       	cpc	r25, r21
    18d6:	a6 07       	cpc	r26, r22
    18d8:	b7 07       	cpc	r27, r23
    18da:	fc f4       	brge	.+62     	; 0x191a <_ZN7task_md3runEv+0x4da>
				{
					md->motorCW();
    18dc:	8a 89       	ldd	r24, Y+18	; 0x12
    18de:	9b 89       	ldd	r25, Y+19	; 0x13
    18e0:	dc 01       	movw	r26, r24
    18e2:	ed 91       	ld	r30, X+
    18e4:	fc 91       	ld	r31, X
    18e6:	02 80       	ldd	r0, Z+2	; 0x02
    18e8:	f3 81       	ldd	r31, Z+3	; 0x03
    18ea:	e0 2d       	mov	r30, r0
    18ec:	19 95       	eicall
					md->setRamp( md->thisInterruptTimer, 500, max_vel );
    18ee:	8a 89       	ldd	r24, Y+18	; 0x12
    18f0:	9b 89       	ldd	r25, Y+19	; 0x13
    18f2:	f1 01       	movw	r30, r2
    18f4:	e0 80       	ld	r14, Z
    18f6:	f1 80       	ldd	r15, Z+1	; 0x01
    18f8:	02 81       	ldd	r16, Z+2	; 0x02
    18fa:	13 81       	ldd	r17, Z+3	; 0x03
    18fc:	dc 01       	movw	r26, r24
    18fe:	5c 96       	adiw	r26, 0x1c	; 28
    1900:	6d 91       	ld	r22, X+
    1902:	7c 91       	ld	r23, X
    1904:	5d 97       	sbiw	r26, 0x1d	; 29
    1906:	24 ef       	ldi	r18, 0xF4	; 244
    1908:	31 e0       	ldi	r19, 0x01	; 1
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	4e 96       	adiw	r24, 0x1e	; 30
    1910:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN6Motion15VelocityControl7setRampEP14InterruptTimermm>
					motorOn();
    1914:	ce 01       	movw	r24, r28
    1916:	0e 94 ba 09 	call	0x1374	; 0x1374 <_ZN7task_md7motorOnEv>
				}
				
				transition_to(7); 
    191a:	67 e0       	ldi	r22, 0x07	; 7
    191c:	ce 01       	movw	r24, r28
    191e:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
				
				break;
    1922:	32 c1       	rjmp	.+612    	; 0x1b88 <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    192a:	0f 90       	pop	r0
    192c:	0f be       	out	0x3f, r0	; 63
			
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In State 7, the motor is enabled until it reaches its destination.
			case (7):
			
				if (pause.get())
    192e:	80 91 61 21 	lds	r24, 0x2161	; 0x802161 <pause>
    1932:	88 23       	and	r24, r24
    1934:	69 f0       	breq	.+26     	; 0x1950 <_ZN7task_md3runEv+0x510>
				{
					md->motorOff();
    1936:	8a 89       	ldd	r24, Y+18	; 0x12
    1938:	9b 89       	ldd	r25, Y+19	; 0x13
    193a:	dc 01       	movw	r26, r24
    193c:	ed 91       	ld	r30, X+
    193e:	fc 91       	ld	r31, X
    1940:	06 80       	ldd	r0, Z+6	; 0x06
    1942:	f7 81       	ldd	r31, Z+7	; 0x07
    1944:	e0 2d       	mov	r30, r0
    1946:	19 95       	eicall
					transition_to(8);
    1948:	68 e0       	ldi	r22, 0x08	; 8
    194a:	ce 01       	movw	r24, r28
    194c:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
				}
				
				freq_hz = md->rampHandler();
    1950:	8a 89       	ldd	r24, Y+18	; 0x12
    1952:	9b 89       	ldd	r25, Y+19	; 0x13
    1954:	4e 96       	adiw	r24, 0x1e	; 30
    1956:	0e 94 c3 08 	call	0x1186	; 0x1186 <_ZN6Motion15VelocityControl11rampHandlerEv>
    195a:	f4 01       	movw	r30, r8
    195c:	60 83       	st	Z, r22
    195e:	71 83       	std	Z+1, r23	; 0x01
			    
			    if(md->get_direction() == 0)
    1960:	8a 89       	ldd	r24, Y+18	; 0x12
    1962:	9b 89       	ldd	r25, Y+19	; 0x13
    1964:	dc 01       	movw	r26, r24
    1966:	ed 91       	ld	r30, X+
    1968:	fc 91       	ld	r31, X
    196a:	06 84       	ldd	r0, Z+14	; 0x0e
    196c:	f7 85       	ldd	r31, Z+15	; 0x0f
    196e:	e0 2d       	mov	r30, r0
    1970:	19 95       	eicall
    1972:	81 11       	cpse	r24, r1
    1974:	62 c0       	rjmp	.+196    	; 0x1a3a <_ZN7task_md3runEv+0x5fa>
				{
					if(md->getSteps() >= step_destination)
    1976:	8a 89       	ldd	r24, Y+18	; 0x12
    1978:	9b 89       	ldd	r25, Y+19	; 0x13
    197a:	4e 96       	adiw	r24, 0x1e	; 30
    197c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_ZN6Motion13MotionControl8getStepsEv>
    1980:	09 ad       	ldd	r16, Y+57	; 0x39
    1982:	1a ad       	ldd	r17, Y+58	; 0x3a
    1984:	2b ad       	ldd	r18, Y+59	; 0x3b
    1986:	3c ad       	ldd	r19, Y+60	; 0x3c
    1988:	60 17       	cp	r22, r16
    198a:	71 07       	cpc	r23, r17
    198c:	82 07       	cpc	r24, r18
    198e:	93 07       	cpc	r25, r19
    1990:	0c f4       	brge	.+2      	; 0x1994 <_ZN7task_md3runEv+0x554>
    1992:	c0 c0       	rjmp	.+384    	; 0x1b14 <_ZN7task_md3runEv+0x6d4>
					{
						md->motorOff();
    1994:	8a 89       	ldd	r24, Y+18	; 0x12
    1996:	9b 89       	ldd	r25, Y+19	; 0x13
    1998:	dc 01       	movw	r26, r24
    199a:	ed 91       	ld	r30, X+
    199c:	fc 91       	ld	r31, X
    199e:	06 80       	ldd	r0, Z+6	; 0x06
    19a0:	f7 81       	ldd	r31, Z+7	; 0x07
    19a2:	e0 2d       	mov	r30, r0
    19a4:	19 95       	eicall
						*p_serial << task_name << PMS ("S") << endl;
    19a6:	0e 81       	ldd	r16, Y+6	; 0x06
    19a8:	1f 81       	ldd	r17, Y+7	; 0x07
    19aa:	f5 01       	movw	r30, r10
    19ac:	60 81       	ld	r22, Z
    19ae:	71 81       	ldd	r23, Z+1	; 0x01
    19b0:	c8 01       	movw	r24, r16
    19b2:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    19b6:	6a e0       	ldi	r22, 0x0A	; 10
    19b8:	c8 01       	movw	r24, r16
    19ba:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    19be:	8c 01       	movw	r16, r24
    19c0:	6b eb       	ldi	r22, 0xBB	; 187
    19c2:	76 e0       	ldi	r23, 0x06	; 6
    19c4:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    19c8:	66 e0       	ldi	r22, 0x06	; 6
    19ca:	c8 01       	movw	r24, r16
    19cc:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
						*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    19d0:	8a 89       	ldd	r24, Y+18	; 0x12
    19d2:	9b 89       	ldd	r25, Y+19	; 0x13
    19d4:	4e 96       	adiw	r24, 0x1e	; 30
    19d6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_ZN6Motion13MotionControl8getStepsEv>
    19da:	2b 01       	movw	r4, r22
    19dc:	3c 01       	movw	r6, r24
    19de:	0e 81       	ldd	r16, Y+6	; 0x06
    19e0:	1f 81       	ldd	r17, Y+7	; 0x07
    19e2:	d5 01       	movw	r26, r10
    19e4:	6d 91       	ld	r22, X+
    19e6:	7c 91       	ld	r23, X
    19e8:	c8 01       	movw	r24, r16
    19ea:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    19ee:	6a e0       	ldi	r22, 0x0A	; 10
    19f0:	c8 01       	movw	r24, r16
    19f2:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    19f6:	8c 01       	movw	r16, r24
    19f8:	66 eb       	ldi	r22, 0xB6	; 182
    19fa:	76 e0       	ldi	r23, 0x06	; 6
    19fc:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1a00:	b3 01       	movw	r22, r6
    1a02:	a2 01       	movw	r20, r4
    1a04:	c8 01       	movw	r24, r16
    1a06:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <_ZN8emstreamlsEl>
    1a0a:	66 e0       	ldi	r22, 0x06	; 6
    1a0c:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
						motor_complete->put(true);
    1a10:	ea a9       	ldd	r30, Y+50	; 0x32
    1a12:	fb a9       	ldd	r31, Y+51	; 0x33
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	0f 92       	push	r0
			the_data = new_data;
    1a1a:	b1 e0       	ldi	r27, 0x01	; 1
    1a1c:	b0 83       	st	Z, r27
			portEXIT_CRITICAL ();
    1a1e:	0f 90       	pop	r0
    1a20:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	0f 92       	push	r0
			the_data = new_data;
    1a28:	10 92 64 21 	sts	0x2164, r1	; 0x802164 <next_node>
			portEXIT_CRITICAL ();
    1a2c:	0f 90       	pop	r0
    1a2e:	0f be       	out	0x3f, r0	; 63
						next_node.put(false);
						transition_to(5);
    1a30:	65 e0       	ldi	r22, 0x05	; 5
    1a32:	ce 01       	movw	r24, r28
    1a34:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    1a38:	6d c0       	rjmp	.+218    	; 0x1b14 <_ZN7task_md3runEv+0x6d4>
					}
				}
				else if(md->get_direction() == 1)
    1a3a:	8a 89       	ldd	r24, Y+18	; 0x12
    1a3c:	9b 89       	ldd	r25, Y+19	; 0x13
    1a3e:	dc 01       	movw	r26, r24
    1a40:	ed 91       	ld	r30, X+
    1a42:	fc 91       	ld	r31, X
    1a44:	06 84       	ldd	r0, Z+14	; 0x0e
    1a46:	f7 85       	ldd	r31, Z+15	; 0x0f
    1a48:	e0 2d       	mov	r30, r0
    1a4a:	19 95       	eicall
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	09 f0       	breq	.+2      	; 0x1a52 <_ZN7task_md3runEv+0x612>
    1a50:	61 c0       	rjmp	.+194    	; 0x1b14 <_ZN7task_md3runEv+0x6d4>
				{
					if(md->getSteps() <= step_destination)
    1a52:	8a 89       	ldd	r24, Y+18	; 0x12
    1a54:	9b 89       	ldd	r25, Y+19	; 0x13
    1a56:	4e 96       	adiw	r24, 0x1e	; 30
    1a58:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_ZN6Motion13MotionControl8getStepsEv>
    1a5c:	09 ad       	ldd	r16, Y+57	; 0x39
    1a5e:	1a ad       	ldd	r17, Y+58	; 0x3a
    1a60:	2b ad       	ldd	r18, Y+59	; 0x3b
    1a62:	3c ad       	ldd	r19, Y+60	; 0x3c
    1a64:	06 17       	cp	r16, r22
    1a66:	17 07       	cpc	r17, r23
    1a68:	28 07       	cpc	r18, r24
    1a6a:	39 07       	cpc	r19, r25
    1a6c:	0c f4       	brge	.+2      	; 0x1a70 <_ZN7task_md3runEv+0x630>
    1a6e:	52 c0       	rjmp	.+164    	; 0x1b14 <_ZN7task_md3runEv+0x6d4>
					{
						md->motorOff();
    1a70:	8a 89       	ldd	r24, Y+18	; 0x12
    1a72:	9b 89       	ldd	r25, Y+19	; 0x13
    1a74:	dc 01       	movw	r26, r24
    1a76:	ed 91       	ld	r30, X+
    1a78:	fc 91       	ld	r31, X
    1a7a:	06 80       	ldd	r0, Z+6	; 0x06
    1a7c:	f7 81       	ldd	r31, Z+7	; 0x07
    1a7e:	e0 2d       	mov	r30, r0
    1a80:	19 95       	eicall
						*p_serial << task_name << PMS ("S") << endl;
    1a82:	0e 81       	ldd	r16, Y+6	; 0x06
    1a84:	1f 81       	ldd	r17, Y+7	; 0x07
    1a86:	f5 01       	movw	r30, r10
    1a88:	60 81       	ld	r22, Z
    1a8a:	71 81       	ldd	r23, Z+1	; 0x01
    1a8c:	c8 01       	movw	r24, r16
    1a8e:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1a92:	6a e0       	ldi	r22, 0x0A	; 10
    1a94:	c8 01       	movw	r24, r16
    1a96:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    1a9a:	8c 01       	movw	r16, r24
    1a9c:	64 eb       	ldi	r22, 0xB4	; 180
    1a9e:	76 e0       	ldi	r23, 0x06	; 6
    1aa0:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1aa4:	66 e0       	ldi	r22, 0x06	; 6
    1aa6:	c8 01       	movw	r24, r16
    1aa8:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
						*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    1aac:	8a 89       	ldd	r24, Y+18	; 0x12
    1aae:	9b 89       	ldd	r25, Y+19	; 0x13
    1ab0:	4e 96       	adiw	r24, 0x1e	; 30
    1ab2:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_ZN6Motion13MotionControl8getStepsEv>
    1ab6:	2b 01       	movw	r4, r22
    1ab8:	3c 01       	movw	r6, r24
    1aba:	0e 81       	ldd	r16, Y+6	; 0x06
    1abc:	1f 81       	ldd	r17, Y+7	; 0x07
    1abe:	d5 01       	movw	r26, r10
    1ac0:	6d 91       	ld	r22, X+
    1ac2:	7c 91       	ld	r23, X
    1ac4:	c8 01       	movw	r24, r16
    1ac6:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1aca:	6a e0       	ldi	r22, 0x0A	; 10
    1acc:	c8 01       	movw	r24, r16
    1ace:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    1ad2:	8c 01       	movw	r16, r24
    1ad4:	6f ea       	ldi	r22, 0xAF	; 175
    1ad6:	76 e0       	ldi	r23, 0x06	; 6
    1ad8:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1adc:	b3 01       	movw	r22, r6
    1ade:	a2 01       	movw	r20, r4
    1ae0:	c8 01       	movw	r24, r16
    1ae2:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <_ZN8emstreamlsEl>
    1ae6:	66 e0       	ldi	r22, 0x06	; 6
    1ae8:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
						motor_complete->put(true);
    1aec:	ea a9       	ldd	r30, Y+50	; 0x32
    1aee:	fb a9       	ldd	r31, Y+51	; 0x33
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	0f 92       	push	r0
			the_data = new_data;
    1af6:	b1 e0       	ldi	r27, 0x01	; 1
    1af8:	b0 83       	st	Z, r27
			portEXIT_CRITICAL ();
    1afa:	0f 90       	pop	r0
    1afc:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	0f 92       	push	r0
			the_data = new_data;
    1b04:	10 92 64 21 	sts	0x2164, r1	; 0x802164 <next_node>
			portEXIT_CRITICAL ();
    1b08:	0f 90       	pop	r0
    1b0a:	0f be       	out	0x3f, r0	; 63
						next_node.put(false);
						transition_to(5);
    1b0c:	65 e0       	ldi	r22, 0x05	; 5
    1b0e:	ce 01       	movw	r24, r28
    1b10:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>

					}
				}
				
				if (++delay_counter == 5)
    1b14:	ef ef       	ldi	r30, 0xFF	; 255
    1b16:	ce 1a       	sub	r12, r30
    1b18:	de 0a       	sbc	r13, r30
    1b1a:	f5 e0       	ldi	r31, 0x05	; 5
    1b1c:	cf 16       	cp	r12, r31
    1b1e:	d1 04       	cpc	r13, r1
    1b20:	99 f5       	brne	.+102    	; 0x1b88 <_ZN7task_md3runEv+0x748>
				{
					*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    1b22:	8a 89       	ldd	r24, Y+18	; 0x12
    1b24:	9b 89       	ldd	r25, Y+19	; 0x13
    1b26:	4e 96       	adiw	r24, 0x1e	; 30
    1b28:	0e 94 7e 08 	call	0x10fc	; 0x10fc <_ZN6Motion13MotionControl8getStepsEv>
    1b2c:	2b 01       	movw	r4, r22
    1b2e:	3c 01       	movw	r6, r24
    1b30:	0e 81       	ldd	r16, Y+6	; 0x06
    1b32:	1f 81       	ldd	r17, Y+7	; 0x07
    1b34:	d5 01       	movw	r26, r10
    1b36:	6d 91       	ld	r22, X+
    1b38:	7c 91       	ld	r23, X
    1b3a:	c8 01       	movw	r24, r16
    1b3c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1b40:	6a e0       	ldi	r22, 0x0A	; 10
    1b42:	c8 01       	movw	r24, r16
    1b44:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    1b48:	8c 01       	movw	r16, r24
    1b4a:	6a ea       	ldi	r22, 0xAA	; 170
    1b4c:	76 e0       	ldi	r23, 0x06	; 6
    1b4e:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1b52:	b3 01       	movw	r22, r6
    1b54:	a2 01       	movw	r20, r4
    1b56:	c8 01       	movw	r24, r16
    1b58:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <_ZN8emstreamlsEl>
    1b5c:	66 e0       	ldi	r22, 0x06	; 6
    1b5e:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
					//*p_serial << task_name << PMS ("freq: ") << freq_hz << endl;
					
					delay_counter = 0;
    1b62:	c1 2c       	mov	r12, r1
    1b64:	d1 2c       	mov	r13, r1
    1b66:	10 c0       	rjmp	.+32     	; 0x1b88 <_ZN7task_md3runEv+0x748>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
				
				break;	
				
			case (8):
			
				if(!(pause.get()))
    1b72:	80 91 61 21 	lds	r24, 0x2161	; 0x802161 <pause>
    1b76:	81 11       	cpse	r24, r1
    1b78:	07 c0       	rjmp	.+14     	; 0x1b88 <_ZN7task_md3runEv+0x748>
				{
					motorOn();
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	0e 94 ba 09 	call	0x1374	; 0x1374 <_ZN7task_md7motorOnEv>
					transition_to(7);
    1b80:	67 e0       	ldi	r22, 0x07	; 7
    1b82:	ce 01       	movw	r24, r28
    1b84:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
				break;


		} // End switch state

		runs++;                             // Increment counter for debugging
    1b88:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b8c:	a8 89       	ldd	r26, Y+16	; 0x10
    1b8e:	b9 89       	ldd	r27, Y+17	; 0x11
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	a1 1d       	adc	r26, r1
    1b94:	b1 1d       	adc	r27, r1
    1b96:	8e 87       	std	Y+14, r24	; 0x0e
    1b98:	9f 87       	std	Y+15, r25	; 0x0f
    1b9a:	a8 8b       	std	Y+16, r26	; 0x10
    1b9c:	b9 8b       	std	Y+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (20));
    1b9e:	64 e1       	ldi	r22, 0x14	; 20
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <vTaskDelay>
	uint16_t state_delay_counter = 0;
	

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    1baa:	59 cc       	rjmp	.-1870   	; 0x145e <_ZN7task_md3runEv+0x1e>

00001bac <_ZN11task_sensor3runEv>:
/** This task interacts with the heat flux sensor in order to capture readings and relay
 *  that data to the user interface task.
 */

void task_sensor::run (void)
{
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <_ZN11task_sensor3runEv+0x6>
    1bb2:	1f 92       	push	r1
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
    1bb8:	8c 01       	movw	r16, r24
	char char_in;                           // Character read from serial device
	time_stamp a_time;                      // Holds the time so it can be displayed
	portTickType previous_ticks;
	//float sensor_readings[sensor_sample_number.get()];
	samples_taken = 0;
    1bba:	fc 01       	movw	r30, r24
    1bbc:	15 8e       	std	Z+29, r1	; 0x1d
    1bbe:	16 8e       	std	Z+30, r1	; 0x1e
    1bc0:	17 8e       	std	Z+31, r1	; 0x1f
    1bc2:	10 a2       	std	Z+32, r1	; 0x20
	sample_sum = 0;
    1bc4:	11 8e       	std	Z+25, r1	; 0x19
    1bc6:	12 8e       	std	Z+26, r1	; 0x1a
    1bc8:	13 8e       	std	Z+27, r1	; 0x1b
    1bca:	14 8e       	std	Z+28, r1	; 0x1c
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	0f 92       	push	r0
			the_data = new_data;
    1bd2:	10 92 77 21 	sts	0x2177, r1	; 0x802177 <sensor_complete>
			portEXIT_CRITICAL ();
    1bd6:	0f 90       	pop	r0
    1bd8:	0f be       	out	0x3f, r0	; 63
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
			the_data = new_data;
    1bda:	dd 24       	eor	r13, r13
    1bdc:	d3 94       	inc	r13
	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
	{
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
    1bde:	f8 01       	movw	r30, r16
    1be0:	84 85       	ldd	r24, Z+12	; 0x0c
    1be2:	81 30       	cpi	r24, 0x01	; 1
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <_ZN11task_sensor3runEv+0x3c>
    1be6:	4b c0       	rjmp	.+150    	; 0x1c7e <_ZN11task_sensor3runEv+0xd2>
    1be8:	38 f0       	brcs	.+14     	; 0x1bf8 <_ZN11task_sensor3runEv+0x4c>
    1bea:	82 30       	cpi	r24, 0x02	; 2
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <_ZN11task_sensor3runEv+0x44>
    1bee:	13 c1       	rjmp	.+550    	; 0x1e16 <_ZN11task_sensor3runEv+0x26a>
    1bf0:	83 30       	cpi	r24, 0x03	; 3
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <_ZN11task_sensor3runEv+0x4a>
    1bf4:	38 c2       	rjmp	.+1136   	; 0x2066 <_ZN11task_sensor3runEv+0x4ba>
    1bf6:	df c2       	rjmp	.+1470   	; 0x21b6 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1bfe:	0f 90       	pop	r0
    1c00:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 0, the sensor task is waiting for the device to enter a certain mode.
			case (0):
		
				//*p_serial << sbg01->get_voltage_mv() <<  endl;
				if (sensor_reading.get())
    1c02:	80 91 72 21 	lds	r24, 0x2172	; 0x802172 <sensor_reading>
    1c06:	88 23       	and	r24, r24
    1c08:	71 f0       	breq	.+28     	; 0x1c26 <_ZN11task_sensor3runEv+0x7a>
				{
					sample_sum = 0;
    1c0a:	f8 01       	movw	r30, r16
    1c0c:	11 8e       	std	Z+25, r1	; 0x19
    1c0e:	12 8e       	std	Z+26, r1	; 0x1a
    1c10:	13 8e       	std	Z+27, r1	; 0x1b
    1c12:	14 8e       	std	Z+28, r1	; 0x1c
					samples_taken = 0;
    1c14:	15 8e       	std	Z+29, r1	; 0x1d
    1c16:	16 8e       	std	Z+30, r1	; 0x1e
    1c18:	17 8e       	std	Z+31, r1	; 0x1f
    1c1a:	10 a2       	std	Z+32, r1	; 0x20
					transition_to(3);
    1c1c:	63 e0       	ldi	r22, 0x03	; 3
    1c1e:	c8 01       	movw	r24, r16
    1c20:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    1c24:	c8 c2       	rjmp	.+1424   	; 0x21b6 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1c2c:	0f 90       	pop	r0
    1c2e:	0f be       	out	0x3f, r0	; 63
				}
				else if(coordinate_mode.get() || incremental_mode.get() || drawing_mode.get())
    1c30:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    1c34:	81 11       	cpse	r24, r1
    1c36:	13 c0       	rjmp	.+38     	; 0x1c5e <_ZN11task_sensor3runEv+0xb2>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1c3e:	0f 90       	pop	r0
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <incremental_mode>
    1c46:	81 11       	cpse	r24, r1
    1c48:	0a c0       	rjmp	.+20     	; 0x1c5e <_ZN11task_sensor3runEv+0xb2>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1c50:	0f 90       	pop	r0
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <drawing_mode>
    1c58:	88 23       	and	r24, r24
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <_ZN11task_sensor3runEv+0xb2>
    1c5c:	ac c2       	rjmp	.+1368   	; 0x21b6 <_ZN11task_sensor3runEv+0x60a>
				{
					sample_sum = 0;
    1c5e:	f8 01       	movw	r30, r16
    1c60:	11 8e       	std	Z+25, r1	; 0x19
    1c62:	12 8e       	std	Z+26, r1	; 0x1a
    1c64:	13 8e       	std	Z+27, r1	; 0x1b
    1c66:	14 8e       	std	Z+28, r1	; 0x1c
					samples_taken = 0;
    1c68:	15 8e       	std	Z+29, r1	; 0x1d
    1c6a:	16 8e       	std	Z+30, r1	; 0x1e
    1c6c:	17 8e       	std	Z+31, r1	; 0x1f
    1c6e:	10 a2       	std	Z+32, r1	; 0x20
					current_node = 0;
    1c70:	15 8a       	std	Z+21, r1	; 0x15
    1c72:	16 8a       	std	Z+22, r1	; 0x16
					transition_to(1);
    1c74:	6d 2d       	mov	r22, r13
    1c76:	c8 01       	movw	r24, r16
    1c78:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    1c7c:	9c c2       	rjmp	.+1336   	; 0x21b6 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1c84:	0f 90       	pop	r0
    1c86:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 1, the device is in coordinate mode, so the sensor will only take readings
			// after the set delay time has elapsed while the sensor is in the proper position.
			case (1):
			
			if(xmotor_complete.get() && ymotor_complete.get() && zmotor_complete.get())
    1c88:	80 91 7a 21 	lds	r24, 0x217A	; 0x80217a <xmotor_complete>
    1c8c:	88 23       	and	r24, r24
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <_ZN11task_sensor3runEv+0xe6>
    1c90:	92 c2       	rjmp	.+1316   	; 0x21b6 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1c98:	0f 90       	pop	r0
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	80 91 79 21 	lds	r24, 0x2179	; 0x802179 <ymotor_complete>
    1ca0:	88 23       	and	r24, r24
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <_ZN11task_sensor3runEv+0xfa>
    1ca4:	88 c2       	rjmp	.+1296   	; 0x21b6 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1cac:	0f 90       	pop	r0
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	80 91 78 21 	lds	r24, 0x2178	; 0x802178 <zmotor_complete>
    1cb4:	88 23       	and	r24, r24
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <_ZN11task_sensor3runEv+0x10e>
    1cb8:	7e c2       	rjmp	.+1276   	; 0x21b6 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1cc0:	0f 90       	pop	r0
    1cc2:	0f be       	out	0x3f, r0	; 63
			{
				if (incremental_mode.get())
    1cc4:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <incremental_mode>
    1cc8:	88 23       	and	r24, r24
    1cca:	09 f4       	brne	.+2      	; 0x1cce <_ZN11task_sensor3runEv+0x122>
    1ccc:	2f c0       	rjmp	.+94     	; 0x1d2c <_ZN11task_sensor3runEv+0x180>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	0f 92       	push	r0
			the_data = new_data;
    1cd4:	10 92 f3 20 	sts	0x20F3, r1	; 0x8020f3 <incremental_mode>
			portEXIT_CRITICAL ();
    1cd8:	0f 90       	pop	r0
    1cda:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	0f 92       	push	r0
			the_data = new_data;
    1ce2:	d0 92 64 21 	sts	0x2164, r13	; 0x802164 <next_node>
			portEXIT_CRITICAL ();
    1ce6:	0f 90       	pop	r0
    1ce8:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	0f 92       	push	r0
			the_data = new_data;
    1cf0:	10 92 72 21 	sts	0x2172, r1	; 0x802172 <sensor_reading>
			portEXIT_CRITICAL ();
    1cf4:	0f 90       	pop	r0
    1cf6:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	0f 92       	push	r0
			the_data = new_data;
    1cfe:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <xmotor_complete>
			portEXIT_CRITICAL ();
    1d02:	0f 90       	pop	r0
    1d04:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	0f 92       	push	r0
			the_data = new_data;
    1d0c:	10 92 79 21 	sts	0x2179, r1	; 0x802179 <ymotor_complete>
			portEXIT_CRITICAL ();
    1d10:	0f 90       	pop	r0
    1d12:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	0f 92       	push	r0
			the_data = new_data;
    1d1a:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <zmotor_complete>
			portEXIT_CRITICAL ();
    1d1e:	0f 90       	pop	r0
    1d20:	0f be       	out	0x3f, r0	; 63
					next_node.put(true);
					sensor_reading.put(false);
					xmotor_complete.put(false);
					ymotor_complete.put(false);
					zmotor_complete.put(false);
					transition_to(0);
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	c8 01       	movw	r24, r16
    1d26:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    1d2a:	45 c2       	rjmp	.+1162   	; 0x21b6 <_ZN11task_sensor3runEv+0x60a>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	0f 92       	push	r0
			the_data = new_data;
    1d32:	d0 92 72 21 	sts	0x2172, r13	; 0x802172 <sensor_reading>
			portEXIT_CRITICAL ();
    1d36:	0f 90       	pop	r0
    1d38:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	0f 92       	push	r0
			temporary_copy = the_data;
    1d40:	40 90 69 21 	lds	r4, 0x2169	; 0x802169 <sensor_delay>
    1d44:	50 90 6a 21 	lds	r5, 0x216A	; 0x80216a <sensor_delay+0x1>
    1d48:	60 90 6b 21 	lds	r6, 0x216B	; 0x80216b <sensor_delay+0x2>
    1d4c:	70 90 6c 21 	lds	r7, 0x216C	; 0x80216c <sensor_delay+0x3>
			portEXIT_CRITICAL ();
    1d50:	0f 90       	pop	r0
    1d52:	0f be       	out	0x3f, r0	; 63
				}
				else
				{
					sensor_reading.put(true);
					*p_serial <<  PMS ("Sensor Reading ") << ++current_node << " (Delay = " << sensor_delay.get() << " ms)" << endl;
    1d54:	f8 01       	movw	r30, r16
    1d56:	e5 88       	ldd	r14, Z+21	; 0x15
    1d58:	f6 88       	ldd	r15, Z+22	; 0x16
    1d5a:	ff ef       	ldi	r31, 0xFF	; 255
    1d5c:	ef 1a       	sub	r14, r31
    1d5e:	ff 0a       	sbc	r15, r31
    1d60:	f8 01       	movw	r30, r16
    1d62:	e5 8a       	std	Z+21, r14	; 0x15
    1d64:	f6 8a       	std	Z+22, r15	; 0x16
    1d66:	6a e0       	ldi	r22, 0x0A	; 10
    1d68:	86 81       	ldd	r24, Z+6	; 0x06
    1d6a:	97 81       	ldd	r25, Z+7	; 0x07
    1d6c:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    1d70:	5c 01       	movw	r10, r24
    1d72:	68 e0       	ldi	r22, 0x08	; 8
    1d74:	77 e0       	ldi	r23, 0x07	; 7
    1d76:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1d7a:	b7 01       	movw	r22, r14
    1d7c:	c5 01       	movw	r24, r10
    1d7e:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_ZN8emstreamlsEj>
    1d82:	7c 01       	movw	r14, r24
    1d84:	6f e0       	ldi	r22, 0x0F	; 15
    1d86:	70 e2       	ldi	r23, 0x20	; 32
    1d88:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1d8c:	b3 01       	movw	r22, r6
    1d8e:	a2 01       	movw	r20, r4
    1d90:	c7 01       	movw	r24, r14
    1d92:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <_ZN8emstreamlsEm>
    1d96:	7c 01       	movw	r14, r24
    1d98:	6a e1       	ldi	r22, 0x1A	; 26
    1d9a:	70 e2       	ldi	r23, 0x20	; 32
    1d9c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1da0:	66 e0       	ldi	r22, 0x06	; 6
    1da2:	c7 01       	movw	r24, r14
    1da4:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
					node++;
    1da8:	f8 01       	movw	r30, r16
    1daa:	82 89       	ldd	r24, Z+18	; 0x12
    1dac:	8f 5f       	subi	r24, 0xFF	; 255
    1dae:	82 8b       	std	Z+18, r24	; 0x12
					previous_ticks = xTaskGetTickCount();
    1db0:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <xTaskGetTickCount>
    1db4:	69 83       	std	Y+1, r22	; 0x01
    1db6:	7a 83       	std	Y+2, r23	; 0x02
    1db8:	8b 83       	std	Y+3, r24	; 0x03
    1dba:	9c 83       	std	Y+4, r25	; 0x04
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1dc2:	0f 90       	pop	r0
    1dc4:	0f be       	out	0x3f, r0	; 63
		 *                    delay so as to get precise, regular timing
		 *  @param milliseconds The duration of the delay interval in milliseconds
		 */
		void delay_from_to_ms (portTickType& from_ticks, portTickType milliseconds)
		{
			portTickType interval = configMS_TO_TICKS (milliseconds);
    1dc6:	20 91 69 21 	lds	r18, 0x2169	; 0x802169 <sensor_delay>
    1dca:	30 91 6a 21 	lds	r19, 0x216A	; 0x80216a <sensor_delay+0x1>
    1dce:	40 91 6b 21 	lds	r20, 0x216B	; 0x80216b <sensor_delay+0x2>
    1dd2:	50 91 6c 21 	lds	r21, 0x216C	; 0x80216c <sensor_delay+0x3>
    1dd6:	a8 ee       	ldi	r26, 0xE8	; 232
    1dd8:	b3 e0       	ldi	r27, 0x03	; 3
    1dda:	0e 94 c5 34 	call	0x698a	; 0x698a <__muluhisi3>
    1dde:	68 3e       	cpi	r22, 0xE8	; 232
    1de0:	f3 e0       	ldi	r31, 0x03	; 3
    1de2:	7f 07       	cpc	r23, r31
    1de4:	81 05       	cpc	r24, r1
    1de6:	91 05       	cpc	r25, r1
    1de8:	48 f0       	brcs	.+18     	; 0x1dfc <_ZN11task_sensor3runEv+0x250>
    1dea:	28 ee       	ldi	r18, 0xE8	; 232
    1dec:	33 e0       	ldi	r19, 0x03	; 3
    1dee:	40 e0       	ldi	r20, 0x00	; 0
    1df0:	50 e0       	ldi	r21, 0x00	; 0
    1df2:	0e 94 8c 34 	call	0x6918	; 0x6918 <__udivmodsi4>
    1df6:	ba 01       	movw	r22, r20
    1df8:	a9 01       	movw	r20, r18
    1dfa:	04 c0       	rjmp	.+8      	; 0x1e04 <_ZN11task_sensor3runEv+0x258>
    1dfc:	41 e0       	ldi	r20, 0x01	; 1
    1dfe:	50 e0       	ldi	r21, 0x00	; 0
    1e00:	60 e0       	ldi	r22, 0x00	; 0
    1e02:	70 e0       	ldi	r23, 0x00	; 0
			vTaskDelayUntil (&from_ticks, interval);
    1e04:	ce 01       	movw	r24, r28
    1e06:	01 96       	adiw	r24, 0x01	; 1
    1e08:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <vTaskDelayUntil>
					delay_from_to_ms(previous_ticks, sensor_delay.get());
					transition_to(2);
    1e0c:	62 e0       	ldi	r22, 0x02	; 2
    1e0e:	c8 01       	movw	r24, r16
    1e10:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    1e14:	d0 c1       	rjmp	.+928    	; 0x21b6 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	0f 92       	push	r0
			temporary_copy = the_data;
    1e1c:	60 91 6e 21 	lds	r22, 0x216E	; 0x80216e <sensor_sample_number>
    1e20:	70 91 6f 21 	lds	r23, 0x216F	; 0x80216f <sensor_sample_number+0x1>
    1e24:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <sensor_sample_number+0x2>
    1e28:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    1e2c:	0f 90       	pop	r0
    1e2e:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 3, the device has waited for the heat flux gage to get a steady reading, and will
			// now take a number of samples to be averaged and then sent back to the interface.
			case (2):
									
			if(samples_taken < sensor_sample_number.get())
    1e30:	f8 01       	movw	r30, r16
    1e32:	45 8c       	ldd	r4, Z+29	; 0x1d
    1e34:	56 8c       	ldd	r5, Z+30	; 0x1e
    1e36:	67 8c       	ldd	r6, Z+31	; 0x1f
    1e38:	70 a0       	ldd	r7, Z+32	; 0x20
    1e3a:	46 16       	cp	r4, r22
    1e3c:	57 06       	cpc	r5, r23
    1e3e:	68 06       	cpc	r6, r24
    1e40:	79 06       	cpc	r7, r25
    1e42:	f0 f4       	brcc	.+60     	; 0x1e80 <_ZN11task_sensor3runEv+0x2d4>
			{
				//sensor_readings[samples_taken] = sbg01->get_voltage_mv();
				sample_sum += sbg01->get_voltage_mv();
    1e44:	83 89       	ldd	r24, Z+19	; 0x13
    1e46:	94 89       	ldd	r25, Z+20	; 0x14
    1e48:	0e 94 2a 08 	call	0x1054	; 0x1054 <_ZN5SBG0114get_voltage_mvEv>
    1e4c:	9b 01       	movw	r18, r22
    1e4e:	ac 01       	movw	r20, r24
    1e50:	f8 01       	movw	r30, r16
    1e52:	61 8d       	ldd	r22, Z+25	; 0x19
    1e54:	72 8d       	ldd	r23, Z+26	; 0x1a
    1e56:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e58:	94 8d       	ldd	r25, Z+28	; 0x1c
    1e5a:	0e 94 74 32 	call	0x64e8	; 0x64e8 <__addsf3>
    1e5e:	f8 01       	movw	r30, r16
    1e60:	61 8f       	std	Z+25, r22	; 0x19
    1e62:	72 8f       	std	Z+26, r23	; 0x1a
    1e64:	83 8f       	std	Z+27, r24	; 0x1b
    1e66:	94 8f       	std	Z+28, r25	; 0x1c
				samples_taken++;
    1e68:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e6a:	96 8d       	ldd	r25, Z+30	; 0x1e
    1e6c:	a7 8d       	ldd	r26, Z+31	; 0x1f
    1e6e:	b0 a1       	ldd	r27, Z+32	; 0x20
    1e70:	01 96       	adiw	r24, 0x01	; 1
    1e72:	a1 1d       	adc	r26, r1
    1e74:	b1 1d       	adc	r27, r1
    1e76:	85 8f       	std	Z+29, r24	; 0x1d
    1e78:	96 8f       	std	Z+30, r25	; 0x1e
    1e7a:	a7 8f       	std	Z+31, r26	; 0x1f
    1e7c:	b0 a3       	std	Z+32, r27	; 0x20
    1e7e:	9b c1       	rjmp	.+822    	; 0x21b6 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	f8 94       	cli
    1e84:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1e86:	0f 90       	pop	r0
    1e88:	0f be       	out	0x3f, r0	; 63
			}
			else
			{
				heat_flux.put(sample_sum/sensor_sample_number.get());
    1e8a:	0e 94 81 33 	call	0x6702	; 0x6702 <__floatunsisf>
    1e8e:	9b 01       	movw	r18, r22
    1e90:	ac 01       	movw	r20, r24
    1e92:	f8 01       	movw	r30, r16
    1e94:	61 8d       	ldd	r22, Z+25	; 0x19
    1e96:	72 8d       	ldd	r23, Z+26	; 0x1a
    1e98:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e9a:	94 8d       	ldd	r25, Z+28	; 0x1c
    1e9c:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__divsf3>
    1ea0:	2b 01       	movw	r4, r22
    1ea2:	3c 01       	movw	r6, r24
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	0f 92       	push	r0
			the_data = new_data;
    1eaa:	60 93 73 21 	sts	0x2173, r22	; 0x802173 <heat_flux>
    1eae:	70 93 74 21 	sts	0x2174, r23	; 0x802174 <heat_flux+0x1>
    1eb2:	80 93 75 21 	sts	0x2175, r24	; 0x802175 <heat_flux+0x2>
    1eb6:	90 93 76 21 	sts	0x2176, r25	; 0x802176 <heat_flux+0x3>
			portEXIT_CRITICAL ();
    1eba:	0f 90       	pop	r0
    1ebc:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1ec4:	0f 90       	pop	r0
    1ec6:	0f be       	out	0x3f, r0	; 63
				*p_serial << PMS ("HF:") << heat_flux.get()*6.289 << endl;
    1ec8:	6a e0       	ldi	r22, 0x0A	; 10
    1eca:	f8 01       	movw	r30, r16
    1ecc:	86 81       	ldd	r24, Z+6	; 0x06
    1ece:	97 81       	ldd	r25, Z+7	; 0x07
    1ed0:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    1ed4:	7c 01       	movw	r14, r24
    1ed6:	64 e0       	ldi	r22, 0x04	; 4
    1ed8:	77 e0       	ldi	r23, 0x07	; 7
    1eda:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1ede:	2d e7       	ldi	r18, 0x7D	; 125
    1ee0:	3f e3       	ldi	r19, 0x3F	; 63
    1ee2:	49 ec       	ldi	r20, 0xC9	; 201
    1ee4:	50 e4       	ldi	r21, 0x40	; 64
    1ee6:	c3 01       	movw	r24, r6
    1ee8:	b2 01       	movw	r22, r4
    1eea:	0e 94 0f 34 	call	0x681e	; 0x681e <__mulsf3>
    1eee:	ab 01       	movw	r20, r22
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	c7 01       	movw	r24, r14
    1ef4:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <_ZN8emstreamlsEd>
    1ef8:	66 e0       	ldi	r22, 0x06	; 6
    1efa:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	0f 92       	push	r0
			temporary_copy = the_data;
    1f04:	40 90 73 21 	lds	r4, 0x2173	; 0x802173 <heat_flux>
    1f08:	50 90 74 21 	lds	r5, 0x2174	; 0x802174 <heat_flux+0x1>
    1f0c:	60 90 75 21 	lds	r6, 0x2175	; 0x802175 <heat_flux+0x2>
    1f10:	70 90 76 21 	lds	r7, 0x2176	; 0x802176 <heat_flux+0x3>
			portEXIT_CRITICAL ();
    1f14:	0f 90       	pop	r0
    1f16:	0f be       	out	0x3f, r0	; 63
				*p_serial << PMS ("mV:") << heat_flux.get() << endl;
    1f18:	6a e0       	ldi	r22, 0x0A	; 10
    1f1a:	f8 01       	movw	r30, r16
    1f1c:	86 81       	ldd	r24, Z+6	; 0x06
    1f1e:	97 81       	ldd	r25, Z+7	; 0x07
    1f20:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    1f24:	7c 01       	movw	r14, r24
    1f26:	60 e0       	ldi	r22, 0x00	; 0
    1f28:	77 e0       	ldi	r23, 0x07	; 7
    1f2a:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1f2e:	b3 01       	movw	r22, r6
    1f30:	a2 01       	movw	r20, r4
    1f32:	c7 01       	movw	r24, r14
    1f34:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <_ZN8emstreamlsEf>
    1f38:	66 e0       	ldi	r22, 0x06	; 6
    1f3a:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
				//*p_serial << PMS ("Sample std dev: ") << get_std_dev(heat_flux.get(), sensor_sample_number.get(), sensor_readings) << endl;
				sample_sum = 0;
    1f3e:	f8 01       	movw	r30, r16
    1f40:	11 8e       	std	Z+25, r1	; 0x19
    1f42:	12 8e       	std	Z+26, r1	; 0x1a
    1f44:	13 8e       	std	Z+27, r1	; 0x1b
    1f46:	14 8e       	std	Z+28, r1	; 0x1c
				samples_taken = 0;
    1f48:	15 8e       	std	Z+29, r1	; 0x1d
    1f4a:	16 8e       	std	Z+30, r1	; 0x1e
    1f4c:	17 8e       	std	Z+31, r1	; 0x1f
    1f4e:	10 a2       	std	Z+32, r1	; 0x20
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1f56:	0f 90       	pop	r0
    1f58:	0f be       	out	0x3f, r0	; 63
				if (current_node < total_nodes.get())
    1f5a:	20 91 62 21 	lds	r18, 0x2162	; 0x802162 <total_nodes>
    1f5e:	30 91 63 21 	lds	r19, 0x2163	; 0x802163 <total_nodes+0x1>
    1f62:	85 89       	ldd	r24, Z+21	; 0x15
    1f64:	96 89       	ldd	r25, Z+22	; 0x16
    1f66:	82 17       	cp	r24, r18
    1f68:	93 07       	cpc	r25, r19
    1f6a:	08 f0       	brcs	.+2      	; 0x1f6e <_ZN11task_sensor3runEv+0x3c2>
    1f6c:	28 c0       	rjmp	.+80     	; 0x1fbe <_ZN11task_sensor3runEv+0x412>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	0f 92       	push	r0
			the_data = new_data;
    1f74:	d0 92 64 21 	sts	0x2164, r13	; 0x802164 <next_node>
			portEXIT_CRITICAL ();
    1f78:	0f 90       	pop	r0
    1f7a:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	0f 92       	push	r0
			the_data = new_data;
    1f82:	10 92 72 21 	sts	0x2172, r1	; 0x802172 <sensor_reading>
			portEXIT_CRITICAL ();
    1f86:	0f 90       	pop	r0
    1f88:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	0f 92       	push	r0
			the_data = new_data;
    1f90:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <xmotor_complete>
			portEXIT_CRITICAL ();
    1f94:	0f 90       	pop	r0
    1f96:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	0f 92       	push	r0
			the_data = new_data;
    1f9e:	10 92 79 21 	sts	0x2179, r1	; 0x802179 <ymotor_complete>
			portEXIT_CRITICAL ();
    1fa2:	0f 90       	pop	r0
    1fa4:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	0f 92       	push	r0
			the_data = new_data;
    1fac:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <zmotor_complete>
			portEXIT_CRITICAL ();
    1fb0:	0f 90       	pop	r0
    1fb2:	0f be       	out	0x3f, r0	; 63
					next_node.put(true);
					sensor_reading.put(false);
					xmotor_complete.put(false);
					ymotor_complete.put(false);
					zmotor_complete.put(false);
					transition_to(1);
    1fb4:	6d 2d       	mov	r22, r13
    1fb6:	c8 01       	movw	r24, r16
    1fb8:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    1fbc:	fc c0       	rjmp	.+504    	; 0x21b6 <_ZN11task_sensor3runEv+0x60a>
				}
				else
				{
					*p_serial << PMS ("Routine complete.") << endl;	
    1fbe:	6a e0       	ldi	r22, 0x0A	; 10
    1fc0:	f8 01       	movw	r30, r16
    1fc2:	86 81       	ldd	r24, Z+6	; 0x06
    1fc4:	97 81       	ldd	r25, Z+7	; 0x07
    1fc6:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    1fca:	7c 01       	movw	r14, r24
    1fcc:	6e ee       	ldi	r22, 0xEE	; 238
    1fce:	76 e0       	ldi	r23, 0x06	; 6
    1fd0:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    1fd4:	66 e0       	ldi	r22, 0x06	; 6
    1fd6:	c7 01       	movw	r24, r14
    1fd8:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
					transition_to(0);
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	c8 01       	movw	r24, r16
    1fe0:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	0f 92       	push	r0
			the_data = new_data;
    1fea:	10 92 f5 20 	sts	0x20F5, r1	; 0x8020f5 <coordinate_mode>
			portEXIT_CRITICAL ();
    1fee:	0f 90       	pop	r0
    1ff0:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	0f 92       	push	r0
			the_data = new_data;
    1ff8:	10 92 3d 21 	sts	0x213D, r1	; 0x80213d <drawing_mode>
			portEXIT_CRITICAL ();
    1ffc:	0f 90       	pop	r0
    1ffe:	0f be       	out	0x3f, r0	; 63
					coordinate_mode.put(false);
					drawing_mode.put(false);
					*p_serial << PMS ("C") << endl;
    2000:	6a e0       	ldi	r22, 0x0A	; 10
    2002:	f8 01       	movw	r30, r16
    2004:	86 81       	ldd	r24, Z+6	; 0x06
    2006:	97 81       	ldd	r25, Z+7	; 0x07
    2008:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    200c:	7c 01       	movw	r14, r24
    200e:	6c ee       	ldi	r22, 0xEC	; 236
    2010:	76 e0       	ldi	r23, 0x06	; 6
    2012:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2016:	66 e0       	ldi	r22, 0x06	; 6
    2018:	c7 01       	movw	r24, r14
    201a:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	0f 92       	push	r0
			the_data = new_data;
    2024:	10 92 64 21 	sts	0x2164, r1	; 0x802164 <next_node>
			portEXIT_CRITICAL ();
    2028:	0f 90       	pop	r0
    202a:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	0f 92       	push	r0
			the_data = new_data;
    2032:	10 92 72 21 	sts	0x2172, r1	; 0x802172 <sensor_reading>
			portEXIT_CRITICAL ();
    2036:	0f 90       	pop	r0
    2038:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	0f 92       	push	r0
			the_data = new_data;
    2040:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <xmotor_complete>
			portEXIT_CRITICAL ();
    2044:	0f 90       	pop	r0
    2046:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	0f 92       	push	r0
			the_data = new_data;
    204e:	10 92 79 21 	sts	0x2179, r1	; 0x802179 <ymotor_complete>
			portEXIT_CRITICAL ();
    2052:	0f 90       	pop	r0
    2054:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	0f 92       	push	r0
			the_data = new_data;
    205c:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <zmotor_complete>
			portEXIT_CRITICAL ();
    2060:	0f 90       	pop	r0
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	a8 c0       	rjmp	.+336    	; 0x21b6 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	0f 92       	push	r0
			temporary_copy = the_data;
    206c:	60 91 6e 21 	lds	r22, 0x216E	; 0x80216e <sensor_sample_number>
    2070:	70 91 6f 21 	lds	r23, 0x216F	; 0x80216f <sensor_sample_number+0x1>
    2074:	80 91 70 21 	lds	r24, 0x2170	; 0x802170 <sensor_sample_number+0x2>
    2078:	90 91 71 21 	lds	r25, 0x2171	; 0x802171 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    207c:	0f 90       	pop	r0
    207e:	0f be       	out	0x3f, r0	; 63
			// In state 4, the interface has requested a sensor reading. The ADC will sample
			// a set number of readings and then take the average and send the result back
			// over serial.
			case (3):
			
			if(samples_taken < sensor_sample_number.get())
    2080:	f8 01       	movw	r30, r16
    2082:	45 8c       	ldd	r4, Z+29	; 0x1d
    2084:	56 8c       	ldd	r5, Z+30	; 0x1e
    2086:	67 8c       	ldd	r6, Z+31	; 0x1f
    2088:	70 a0       	ldd	r7, Z+32	; 0x20
    208a:	46 16       	cp	r4, r22
    208c:	57 06       	cpc	r5, r23
    208e:	68 06       	cpc	r6, r24
    2090:	79 06       	cpc	r7, r25
    2092:	f0 f4       	brcc	.+60     	; 0x20d0 <_ZN11task_sensor3runEv+0x524>
			{
				sample_sum += sbg01->get_voltage_mv();
    2094:	83 89       	ldd	r24, Z+19	; 0x13
    2096:	94 89       	ldd	r25, Z+20	; 0x14
    2098:	0e 94 2a 08 	call	0x1054	; 0x1054 <_ZN5SBG0114get_voltage_mvEv>
    209c:	9b 01       	movw	r18, r22
    209e:	ac 01       	movw	r20, r24
    20a0:	f8 01       	movw	r30, r16
    20a2:	61 8d       	ldd	r22, Z+25	; 0x19
    20a4:	72 8d       	ldd	r23, Z+26	; 0x1a
    20a6:	83 8d       	ldd	r24, Z+27	; 0x1b
    20a8:	94 8d       	ldd	r25, Z+28	; 0x1c
    20aa:	0e 94 74 32 	call	0x64e8	; 0x64e8 <__addsf3>
    20ae:	f8 01       	movw	r30, r16
    20b0:	61 8f       	std	Z+25, r22	; 0x19
    20b2:	72 8f       	std	Z+26, r23	; 0x1a
    20b4:	83 8f       	std	Z+27, r24	; 0x1b
    20b6:	94 8f       	std	Z+28, r25	; 0x1c
				samples_taken++;
    20b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    20ba:	96 8d       	ldd	r25, Z+30	; 0x1e
    20bc:	a7 8d       	ldd	r26, Z+31	; 0x1f
    20be:	b0 a1       	ldd	r27, Z+32	; 0x20
    20c0:	01 96       	adiw	r24, 0x01	; 1
    20c2:	a1 1d       	adc	r26, r1
    20c4:	b1 1d       	adc	r27, r1
    20c6:	85 8f       	std	Z+29, r24	; 0x1d
    20c8:	96 8f       	std	Z+30, r25	; 0x1e
    20ca:	a7 8f       	std	Z+31, r26	; 0x1f
    20cc:	b0 a3       	std	Z+32, r27	; 0x20
    20ce:	73 c0       	rjmp	.+230    	; 0x21b6 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    20d6:	0f 90       	pop	r0
    20d8:	0f be       	out	0x3f, r0	; 63
			}
			else
			{
				heat_flux.put(sample_sum/sensor_sample_number.get());
    20da:	0e 94 81 33 	call	0x6702	; 0x6702 <__floatunsisf>
    20de:	9b 01       	movw	r18, r22
    20e0:	ac 01       	movw	r20, r24
    20e2:	f8 01       	movw	r30, r16
    20e4:	61 8d       	ldd	r22, Z+25	; 0x19
    20e6:	72 8d       	ldd	r23, Z+26	; 0x1a
    20e8:	83 8d       	ldd	r24, Z+27	; 0x1b
    20ea:	94 8d       	ldd	r25, Z+28	; 0x1c
    20ec:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__divsf3>
    20f0:	2b 01       	movw	r4, r22
    20f2:	3c 01       	movw	r6, r24
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	f8 94       	cli
    20f8:	0f 92       	push	r0
			the_data = new_data;
    20fa:	60 93 73 21 	sts	0x2173, r22	; 0x802173 <heat_flux>
    20fe:	70 93 74 21 	sts	0x2174, r23	; 0x802174 <heat_flux+0x1>
    2102:	80 93 75 21 	sts	0x2175, r24	; 0x802175 <heat_flux+0x2>
    2106:	90 93 76 21 	sts	0x2176, r25	; 0x802176 <heat_flux+0x3>
			portEXIT_CRITICAL ();
    210a:	0f 90       	pop	r0
    210c:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    2114:	0f 90       	pop	r0
    2116:	0f be       	out	0x3f, r0	; 63
				*p_serial << PMS ("HF:") << heat_flux.get()*6.289 << endl;
    2118:	6a e0       	ldi	r22, 0x0A	; 10
    211a:	f8 01       	movw	r30, r16
    211c:	86 81       	ldd	r24, Z+6	; 0x06
    211e:	97 81       	ldd	r25, Z+7	; 0x07
    2120:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2124:	7c 01       	movw	r14, r24
    2126:	68 ee       	ldi	r22, 0xE8	; 232
    2128:	76 e0       	ldi	r23, 0x06	; 6
    212a:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    212e:	2d e7       	ldi	r18, 0x7D	; 125
    2130:	3f e3       	ldi	r19, 0x3F	; 63
    2132:	49 ec       	ldi	r20, 0xC9	; 201
    2134:	50 e4       	ldi	r21, 0x40	; 64
    2136:	c3 01       	movw	r24, r6
    2138:	b2 01       	movw	r22, r4
    213a:	0e 94 0f 34 	call	0x681e	; 0x681e <__mulsf3>
    213e:	ab 01       	movw	r20, r22
    2140:	bc 01       	movw	r22, r24
    2142:	c7 01       	movw	r24, r14
    2144:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <_ZN8emstreamlsEd>
    2148:	66 e0       	ldi	r22, 0x06	; 6
    214a:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	f8 94       	cli
    2152:	0f 92       	push	r0
			temporary_copy = the_data;
    2154:	40 90 73 21 	lds	r4, 0x2173	; 0x802173 <heat_flux>
    2158:	50 90 74 21 	lds	r5, 0x2174	; 0x802174 <heat_flux+0x1>
    215c:	60 90 75 21 	lds	r6, 0x2175	; 0x802175 <heat_flux+0x2>
    2160:	70 90 76 21 	lds	r7, 0x2176	; 0x802176 <heat_flux+0x3>
			portEXIT_CRITICAL ();
    2164:	0f 90       	pop	r0
    2166:	0f be       	out	0x3f, r0	; 63
				*p_serial << PMS ("mV:") << heat_flux.get() << endl;
    2168:	6a e0       	ldi	r22, 0x0A	; 10
    216a:	f8 01       	movw	r30, r16
    216c:	86 81       	ldd	r24, Z+6	; 0x06
    216e:	97 81       	ldd	r25, Z+7	; 0x07
    2170:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2174:	7c 01       	movw	r14, r24
    2176:	64 ee       	ldi	r22, 0xE4	; 228
    2178:	76 e0       	ldi	r23, 0x06	; 6
    217a:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    217e:	b3 01       	movw	r22, r6
    2180:	a2 01       	movw	r20, r4
    2182:	c7 01       	movw	r24, r14
    2184:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <_ZN8emstreamlsEf>
    2188:	66 e0       	ldi	r22, 0x06	; 6
    218a:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
				//*p_serial << PMS ("Sample std dev: ") << get_std_dev(heat_flux.get(), sensor_sample_number.get(), sensor_readings) << endl;
				sample_sum = 0;
    218e:	f8 01       	movw	r30, r16
    2190:	11 8e       	std	Z+25, r1	; 0x19
    2192:	12 8e       	std	Z+26, r1	; 0x1a
    2194:	13 8e       	std	Z+27, r1	; 0x1b
    2196:	14 8e       	std	Z+28, r1	; 0x1c
				samples_taken = 0;
    2198:	15 8e       	std	Z+29, r1	; 0x1d
    219a:	16 8e       	std	Z+30, r1	; 0x1e
    219c:	17 8e       	std	Z+31, r1	; 0x1f
    219e:	10 a2       	std	Z+32, r1	; 0x20
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	0f 92       	push	r0
			the_data = new_data;
    21a6:	10 92 72 21 	sts	0x2172, r1	; 0x802172 <sensor_reading>
			portEXIT_CRITICAL ();
    21aa:	0f 90       	pop	r0
    21ac:	0f be       	out	0x3f, r0	; 63
				sensor_reading.put(false);
				transition_to(0);
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	c8 01       	movw	r24, r16
    21b2:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
			
			break;

		} // End switch state

		runs++;                             // Increment counter for debugging
    21b6:	f8 01       	movw	r30, r16
    21b8:	86 85       	ldd	r24, Z+14	; 0x0e
    21ba:	97 85       	ldd	r25, Z+15	; 0x0f
    21bc:	a0 89       	ldd	r26, Z+16	; 0x10
    21be:	b1 89       	ldd	r27, Z+17	; 0x11
    21c0:	01 96       	adiw	r24, 0x01	; 1
    21c2:	a1 1d       	adc	r26, r1
    21c4:	b1 1d       	adc	r27, r1
    21c6:	86 87       	std	Z+14, r24	; 0x0e
    21c8:	97 87       	std	Z+15, r25	; 0x0f
    21ca:	a0 8b       	std	Z+16, r26	; 0x10
    21cc:	b1 8b       	std	Z+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (1));
    21ce:	61 e0       	ldi	r22, 0x01	; 1
    21d0:	70 e0       	ldi	r23, 0x00	; 0
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <vTaskDelay>
	sensor_complete.put(false);
	

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    21da:	01 cd       	rjmp	.-1534   	; 0x1bde <_ZN11task_sensor3runEv+0x32>

000021dc <_ZN11task_sensorC1EPKchjP8emstreamP5SBG01>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

task_sensor::task_sensor (const char* a_name, 
    21dc:	cf 92       	push	r12
    21de:	df 92       	push	r13
    21e0:	ef 92       	push	r14
    21e2:	ff 92       	push	r15
    21e4:	0f 93       	push	r16
    21e6:	1f 93       	push	r17
    21e8:	cf 93       	push	r28
    21ea:	df 93       	push	r29
    21ec:	ec 01       	movw	r28, r24
    21ee:	6b 01       	movw	r12, r22
					  unsigned portBASE_TYPE a_priority, 
					  size_t a_stack_size,
					  emstream* p_ser_dev,
					  SBG01* sbg01
					 )
	: frt_task (a_name, a_priority, a_stack_size, p_ser_dev), sbg01(sbg01)
    21f0:	0e 94 08 2a 	call	0x5410	; 0x5410 <_ZN8frt_taskC1EPKchjP8emstream>
    21f4:	83 e2       	ldi	r24, 0x23	; 35
    21f6:	90 e2       	ldi	r25, 0x20	; 32
    21f8:	88 83       	st	Y, r24
    21fa:	99 83       	std	Y+1, r25	; 0x01
    21fc:	eb 8a       	std	Y+19, r14	; 0x13
    21fe:	fc 8a       	std	Y+20, r15	; 0x14
{
	task_name = a_name;	
    2200:	c9 a2       	std	Y+33, r12	; 0x21
    2202:	da a2       	std	Y+34, r13	; 0x22
}
    2204:	df 91       	pop	r29
    2206:	cf 91       	pop	r28
    2208:	1f 91       	pop	r17
    220a:	0f 91       	pop	r16
    220c:	ff 90       	pop	r15
    220e:	ef 90       	pop	r14
    2210:	df 90       	pop	r13
    2212:	cf 90       	pop	r12
    2214:	08 95       	ret

00002216 <_ZN9task_userC1EPKchjP8emstream>:
	// Show how the timer/counter is set up to cause RTOS timer ticks
	*p_serial << PMS (", TCC0CCA=") << TCC0.CCA << endl << endl;

	// Have the tasks print their status
	print_task_list (p_serial);
}
    2216:	ef 92       	push	r14
    2218:	ff 92       	push	r15
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	ec 01       	movw	r28, r24
    2224:	7b 01       	movw	r14, r22
    2226:	0e 94 08 2a 	call	0x5410	; 0x5410 <_ZN8frt_taskC1EPKchjP8emstream>
    222a:	8b e2       	ldi	r24, 0x2B	; 43
    222c:	90 e2       	ldi	r25, 0x20	; 32
    222e:	88 83       	st	Y, r24
    2230:	99 83       	std	Y+1, r25	; 0x01
    2232:	fe 01       	movw	r30, r28
    2234:	e0 5e       	subi	r30, 0xE0	; 224
    2236:	fe 4f       	sbci	r31, 0xFE	; 254
    2238:	e0 82       	st	Z, r14
    223a:	f1 82       	std	Z+1, r15	; 0x01
    223c:	ce 5e       	subi	r28, 0xEE	; 238
    223e:	de 4f       	sbci	r29, 0xFE	; 254
    2240:	18 82       	st	Y, r1
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	ff 90       	pop	r15
    224c:	ef 90       	pop	r14
    224e:	08 95       	ret

00002250 <_ZN9task_user10str_to_intEv>:
    2250:	bf 92       	push	r11
    2252:	cf 92       	push	r12
    2254:	df 92       	push	r13
    2256:	ef 92       	push	r14
    2258:	ff 92       	push	r15
    225a:	0f 93       	push	r16
    225c:	1f 93       	push	r17
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	fc 01       	movw	r30, r24
    2264:	dc 01       	movw	r26, r24
    2266:	ae 5e       	subi	r26, 0xEE	; 238
    2268:	be 4f       	sbci	r27, 0xFE	; 254
    226a:	2c 91       	ld	r18, X
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	21 50       	subi	r18, 0x01	; 1
    2270:	31 09       	sbc	r19, r1
    2272:	12 16       	cp	r1, r18
    2274:	13 06       	cpc	r1, r19
    2276:	a4 f5       	brge	.+104    	; 0x22e0 <_ZN9task_user10str_to_intEv+0x90>
    2278:	40 e0       	ldi	r20, 0x00	; 0
    227a:	50 e0       	ldi	r21, 0x00	; 0
    227c:	b1 2c       	mov	r11, r1
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	cb 01       	movw	r24, r22
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	88 0f       	add	r24, r24
    228a:	99 1f       	adc	r25, r25
    228c:	aa 1f       	adc	r26, r26
    228e:	bb 1f       	adc	r27, r27
    2290:	6c 01       	movw	r12, r24
    2292:	7d 01       	movw	r14, r26
    2294:	cc 0c       	add	r12, r12
    2296:	dd 1c       	adc	r13, r13
    2298:	ee 1c       	adc	r14, r14
    229a:	ff 1c       	adc	r15, r15
    229c:	cc 0c       	add	r12, r12
    229e:	dd 1c       	adc	r13, r13
    22a0:	ee 1c       	adc	r14, r14
    22a2:	ff 1c       	adc	r15, r15
    22a4:	8c 0d       	add	r24, r12
    22a6:	9d 1d       	adc	r25, r13
    22a8:	ae 1d       	adc	r26, r14
    22aa:	bf 1d       	adc	r27, r15
    22ac:	4e 0f       	add	r20, r30
    22ae:	5f 1f       	adc	r21, r31
    22b0:	ea 01       	movw	r28, r20
    22b2:	4a 89       	ldd	r20, Y+18	; 0x12
    22b4:	50 e0       	ldi	r21, 0x00	; 0
    22b6:	40 53       	subi	r20, 0x30	; 48
    22b8:	51 09       	sbc	r21, r1
    22ba:	05 2e       	mov	r0, r21
    22bc:	00 0c       	add	r0, r0
    22be:	66 0b       	sbc	r22, r22
    22c0:	77 0b       	sbc	r23, r23
    22c2:	7a 01       	movw	r14, r20
    22c4:	8b 01       	movw	r16, r22
    22c6:	e8 0e       	add	r14, r24
    22c8:	f9 1e       	adc	r15, r25
    22ca:	0a 1f       	adc	r16, r26
    22cc:	1b 1f       	adc	r17, r27
    22ce:	c8 01       	movw	r24, r16
    22d0:	b7 01       	movw	r22, r14
    22d2:	b3 94       	inc	r11
    22d4:	4b 2d       	mov	r20, r11
    22d6:	50 e0       	ldi	r21, 0x00	; 0
    22d8:	42 17       	cp	r20, r18
    22da:	53 07       	cpc	r21, r19
    22dc:	9c f2       	brlt	.-90     	; 0x2284 <_ZN9task_user10str_to_intEv+0x34>
    22de:	03 c0       	rjmp	.+6      	; 0x22e6 <_ZN9task_user10str_to_intEv+0x96>
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	70 e0       	ldi	r23, 0x00	; 0
    22e4:	cb 01       	movw	r24, r22
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	ff 90       	pop	r15
    22f0:	ef 90       	pop	r14
    22f2:	df 90       	pop	r13
    22f4:	cf 90       	pop	r12
    22f6:	bf 90       	pop	r11
    22f8:	08 95       	ret

000022fa <_ZN9task_user12reset_deviceEv>:
    22fa:	6a e0       	ldi	r22, 0x0A	; 10
    22fc:	fc 01       	movw	r30, r24
    22fe:	86 81       	ldd	r24, Z+6	; 0x06
    2300:	97 81       	ldd	r25, Z+7	; 0x07
    2302:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2306:	ec 01       	movw	r28, r24
    2308:	6d e8       	ldi	r22, 0x8D	; 141
    230a:	7a e0       	ldi	r23, 0x0A	; 10
    230c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2310:	66 e0       	ldi	r22, 0x06	; 6
    2312:	ce 01       	movw	r24, r28
    2314:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2318:	93 e0       	ldi	r25, 0x03	; 3
    231a:	88 ed       	ldi	r24, 0xD8	; 216
    231c:	08 b6       	in	r0, 0x38	; 56
    231e:	18 be       	out	0x38, r1	; 56
    2320:	84 bf       	out	0x34, r24	; 52
    2322:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2326:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    232a:	81 fd       	sbrc	r24, 1
    232c:	fc cf       	rjmp	.-8      	; 0x2326 <_ZN9task_user12reset_deviceEv+0x2c>
    232e:	08 be       	out	0x38, r0	; 56
    2330:	ff cf       	rjmp	.-2      	; 0x2330 <_ZN9task_user12reset_deviceEv+0x36>

00002332 <_ZN9task_user3runEv>:
/** This task interacts with the user by transmitting and receiving bytes over USB to 
 *  and from a computer.
 */

void task_user::run (void)
{
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	00 d0       	rcall	.+0      	; 0x2338 <_ZN9task_user3runEv+0x6>
    2338:	00 d0       	rcall	.+0      	; 0x233a <_ZN9task_user3runEv+0x8>
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	89 83       	std	Y+1, r24	; 0x01
    2340:	9a 83       	std	Y+2, r25	; 0x02
			// coordinates of the device and then activates the device upon the user's command.
            case (1):
				if (p_serial->check_for_char ())        // If the user typed a
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
					atoi_buf[atoi_index] = char_in;
    2342:	8c 01       	movw	r16, r24
    2344:	0e 5e       	subi	r16, 0xEE	; 238
    2346:	1e 4f       	sbci	r17, 0xFE	; 254
						*p_serial << endl;
						break;
						
						case (','):
						*p_serial << char_in;
						conv_int = str_to_int();
    2348:	7c 01       	movw	r14, r24
    234a:	8d ee       	ldi	r24, 0xED	; 237
    234c:	e8 1a       	sub	r14, r24
    234e:	8e ef       	ldi	r24, 0xFE	; 254
    2350:	f8 0a       	sbc	r15, r24
						location_queue->put(conv_int);
    2352:	89 80       	ldd	r8, Y+1	; 0x01
    2354:	9a 80       	ldd	r9, Y+2	; 0x02
    2356:	99 ee       	ldi	r25, 0xE9	; 233
    2358:	89 1a       	sub	r8, r25
    235a:	9e ef       	ldi	r25, 0xFE	; 254
    235c:	99 0a       	sbc	r9, r25
							}
							
							break;
							
						case ('s'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    235e:	a9 80       	ldd	r10, Y+1	; 0x01
    2360:	ba 80       	ldd	r11, Y+2	; 0x02
    2362:	a3 ee       	ldi	r26, 0xE3	; 227
    2364:	aa 1a       	sub	r10, r26
    2366:	ae ef       	ldi	r26, 0xFE	; 254
    2368:	ba 0a       	sbc	r11, r26
							break;
							
						case ('n'):
							*p_serial << PMS ("Sensor sample size set to:") << endl;
							atoi_index = 0;
							data_config = &sensor_sample_number;
    236a:	69 80       	ldd	r6, Y+1	; 0x01
    236c:	7a 80       	ldd	r7, Y+2	; 0x02
    236e:	b7 ee       	ldi	r27, 0xE7	; 231
    2370:	6b 1a       	sub	r6, r27
    2372:	be ef       	ldi	r27, 0xFE	; 254
    2374:	7b 0a       	sbc	r7, r27
						case (','):
							*p_serial << char_in;
							
							conv_int = str_to_int();
							conv_int = conv_int * 1000;
							v_config->put(conv_int);
    2376:	49 80       	ldd	r4, Y+1	; 0x01
    2378:	5a 80       	ldd	r5, Y+2	; 0x02
    237a:	e5 ee       	ldi	r30, 0xE5	; 229
    237c:	4e 1a       	sub	r4, r30
    237e:	ee ef       	ldi	r30, 0xFE	; 254
    2380:	5e 0a       	sbc	r5, r30
							transition_to(0);
							break;
							
						case('a'):
							conv_int = str_to_int();
							if (queue_indicator)
    2382:	29 80       	ldd	r2, Y+1	; 0x01
    2384:	3a 80       	ldd	r3, Y+2	; 0x02
    2386:	fe ed       	ldi	r31, 0xDE	; 222
    2388:	2f 1a       	sub	r2, r31
    238a:	fe ef       	ldi	r31, 0xFE	; 254
    238c:	3f 0a       	sbc	r3, r31
							}
							else
							{
								if (data_config == &ramp_run_span)
								{
									conv_int = 100 / conv_int;
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	8d 83       	std	Y+5, r24	; 0x05
    2394:	9e 83       	std	Y+6, r25	; 0x06
			//*p_serial << PMS ("interrupt reset") << endl;
			//reset_device();
		//}
		
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
    2396:	ad 81       	ldd	r26, Y+5	; 0x05
    2398:	be 81       	ldd	r27, Y+6	; 0x06
    239a:	1c 96       	adiw	r26, 0x0c	; 12
    239c:	8c 91       	ld	r24, X
    239e:	1c 97       	sbiw	r26, 0x0c	; 12
    23a0:	81 30       	cpi	r24, 0x01	; 1
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <_ZN9task_user3runEv+0x74>
    23a4:	fd c0       	rjmp	.+506    	; 0x25a0 <_ZN9task_user3runEv+0x26e>
    23a6:	38 f0       	brcs	.+14     	; 0x23b6 <_ZN9task_user3runEv+0x84>
    23a8:	82 30       	cpi	r24, 0x02	; 2
    23aa:	09 f4       	brne	.+2      	; 0x23ae <_ZN9task_user3runEv+0x7c>
    23ac:	cf c2       	rjmp	.+1438   	; 0x294c <_ZN9task_user3runEv+0x61a>
    23ae:	83 30       	cpi	r24, 0x03	; 3
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <_ZN9task_user3runEv+0x82>
    23b2:	9b c3       	rjmp	.+1846   	; 0x2aea <_ZN9task_user3runEv+0x7b8>
    23b4:	c1 c5       	rjmp	.+2946   	; 0x2f38 <_ZN9task_user3runEv+0xc06>
		{
			// In Case 0, the interface is in the main menu.
			case (0):
			
				if (p_serial->check_for_char ())        // If the user typed a
    23b6:	ed 81       	ldd	r30, Y+5	; 0x05
    23b8:	fe 81       	ldd	r31, Y+6	; 0x06
    23ba:	86 81       	ldd	r24, Z+6	; 0x06
    23bc:	97 81       	ldd	r25, Z+7	; 0x07
    23be:	dc 01       	movw	r26, r24
    23c0:	ed 91       	ld	r30, X+
    23c2:	fc 91       	ld	r31, X
    23c4:	04 80       	ldd	r0, Z+4	; 0x04
    23c6:	f5 81       	ldd	r31, Z+5	; 0x05
    23c8:	e0 2d       	mov	r30, r0
    23ca:	19 95       	eicall
    23cc:	88 23       	and	r24, r24
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <_ZN9task_user3runEv+0xa0>
    23d0:	d3 c5       	rjmp	.+2982   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    23d2:	ed 81       	ldd	r30, Y+5	; 0x05
    23d4:	fe 81       	ldd	r31, Y+6	; 0x06
    23d6:	86 81       	ldd	r24, Z+6	; 0x06
    23d8:	97 81       	ldd	r25, Z+7	; 0x07
    23da:	dc 01       	movw	r26, r24
    23dc:	ed 91       	ld	r30, X+
    23de:	fc 91       	ld	r31, X
    23e0:	06 80       	ldd	r0, Z+6	; 0x06
    23e2:	f7 81       	ldd	r31, Z+7	; 0x07
    23e4:	e0 2d       	mov	r30, r0
    23e6:	19 95       	eicall
					atoi_buf[atoi_index] = char_in;
    23e8:	f8 01       	movw	r30, r16
    23ea:	20 81       	ld	r18, Z
    23ec:	ed 81       	ldd	r30, Y+5	; 0x05
    23ee:	fe 81       	ldd	r31, Y+6	; 0x06
    23f0:	e2 0f       	add	r30, r18
    23f2:	f1 1d       	adc	r31, r1
    23f4:	82 8b       	std	Z+18, r24	; 0x12
					atoi_index++;
    23f6:	2f 5f       	subi	r18, 0xFF	; 255
    23f8:	d8 01       	movw	r26, r16
    23fa:	2c 93       	st	X, r18
					switch(char_in)
    23fc:	99 27       	eor	r25, r25
    23fe:	fc 01       	movw	r30, r24
    2400:	e1 56       	subi	r30, 0x61	; 97
    2402:	f1 09       	sbc	r31, r1
    2404:	e3 31       	cpi	r30, 0x13	; 19
    2406:	f1 05       	cpc	r31, r1
    2408:	08 f0       	brcs	.+2      	; 0x240c <_ZN9task_user3runEv+0xda>
    240a:	b6 c5       	rjmp	.+2924   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
    240c:	88 27       	eor	r24, r24
    240e:	e9 5f       	subi	r30, 0xF9	; 249
    2410:	fe 4f       	sbci	r31, 0xFE	; 254
    2412:	8f 4f       	sbci	r24, 0xFF	; 255
    2414:	0c 94 ae 34 	jmp	0x695c	; 0x695c <__tablejump2__>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	f8 94       	cli
    241c:	0f 92       	push	r0
			the_data = new_data;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	80 93 f6 20 	sts	0x20F6, r24	; 0x8020f6 <configuration_mode>
			portEXIT_CRITICAL ();
    2424:	0f 90       	pop	r0
    2426:	0f be       	out	0x3f, r0	; 63
					{
						case(CMD_CONFIG_MODE):
						
							//print_config_mode_menu();
							configuration_mode.put(true);
							*p_serial << PMS ("Entering config mode") << endl;
    2428:	6a e0       	ldi	r22, 0x0A	; 10
    242a:	ed 81       	ldd	r30, Y+5	; 0x05
    242c:	fe 81       	ldd	r31, Y+6	; 0x06
    242e:	86 81       	ldd	r24, Z+6	; 0x06
    2430:	97 81       	ldd	r25, Z+7	; 0x07
    2432:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2436:	6c 01       	movw	r12, r24
    2438:	68 e7       	ldi	r22, 0x78	; 120
    243a:	7a e0       	ldi	r23, 0x0A	; 10
    243c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2440:	66 e0       	ldi	r22, 0x06	; 6
    2442:	c6 01       	movw	r24, r12
    2444:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
							transition_to(3);
    2448:	63 e0       	ldi	r22, 0x03	; 3
    244a:	8d 81       	ldd	r24, Y+5	; 0x05
    244c:	9e 81       	ldd	r25, Y+6	; 0x06
    244e:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
							break;
    2452:	92 c5       	rjmp	.+2852   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	0f 92       	push	r0
			the_data = new_data;
    245a:	10 92 f2 20 	sts	0x20F2, r1	; 0x8020f2 <xmotor_on>
			portEXIT_CRITICAL ();
    245e:	0f 90       	pop	r0
    2460:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	0f 92       	push	r0
			the_data = new_data;
    2468:	10 92 f1 20 	sts	0x20F1, r1	; 0x8020f1 <ymotor_on>
			portEXIT_CRITICAL ();
    246c:	0f 90       	pop	r0
    246e:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	f8 94       	cli
    2474:	0f 92       	push	r0
			the_data = new_data;
    2476:	10 92 f0 20 	sts	0x20F0, r1	; 0x8020f0 <__data_end>
			portEXIT_CRITICAL ();
    247a:	0f 90       	pop	r0
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	7c c5       	rjmp	.+2808   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	0f 92       	push	r0
			the_data = new_data;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	80 93 3d 21 	sts	0x213D, r24	; 0x80213d <drawing_mode>
			portEXIT_CRITICAL ();
    248c:	0f 90       	pop	r0
    248e:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	0f 92       	push	r0
			the_data = new_data;
    2496:	10 92 69 21 	sts	0x2169, r1	; 0x802169 <sensor_delay>
    249a:	10 92 6a 21 	sts	0x216A, r1	; 0x80216a <sensor_delay+0x1>
    249e:	10 92 6b 21 	sts	0x216B, r1	; 0x80216b <sensor_delay+0x2>
    24a2:	10 92 6c 21 	sts	0x216C, r1	; 0x80216c <sensor_delay+0x3>
			portEXIT_CRITICAL ();
    24a6:	0f 90       	pop	r0
    24a8:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	0f 92       	push	r0
			the_data = new_data;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a0 e0       	ldi	r26, 0x00	; 0
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	80 93 6e 21 	sts	0x216E, r24	; 0x80216e <sensor_sample_number>
    24bc:	90 93 6f 21 	sts	0x216F, r25	; 0x80216f <sensor_sample_number+0x1>
    24c0:	a0 93 70 21 	sts	0x2170, r26	; 0x802170 <sensor_sample_number+0x2>
    24c4:	b0 93 71 21 	sts	0x2171, r27	; 0x802171 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    24c8:	0f 90       	pop	r0
    24ca:	0f be       	out	0x3f, r0	; 63
							
						case('e'):
							drawing_mode.put(true);
							sensor_delay.put(0);
							sensor_sample_number.put(1);
							transition_to(1);
    24cc:	61 e0       	ldi	r22, 0x01	; 1
    24ce:	8d 81       	ldd	r24, Y+5	; 0x05
    24d0:	9e 81       	ldd	r25, Y+6	; 0x06
    24d2:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
							break ;
    24d6:	50 c5       	rjmp	.+2720   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    24de:	0f 90       	pop	r0
    24e0:	0f be       	out	0x3f, r0	; 63
							
						case('i'):
							if (!(incremental_mode.get()))
    24e2:	80 91 f3 20 	lds	r24, 0x20F3	; 0x8020f3 <incremental_mode>
    24e6:	81 11       	cpse	r24, r1
    24e8:	47 c5       	rjmp	.+2702   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	0f 92       	push	r0
			the_data = new_data;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	80 93 f3 20 	sts	0x20F3, r24	; 0x8020f3 <incremental_mode>
			portEXIT_CRITICAL ();
    24f6:	0f 90       	pop	r0
    24f8:	0f be       	out	0x3f, r0	; 63
							{
								incremental_mode.put(true);
								transition_to(1);
    24fa:	61 e0       	ldi	r22, 0x01	; 1
    24fc:	8d 81       	ldd	r24, Y+5	; 0x05
    24fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2500:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    2504:	39 c5       	rjmp	.+2674   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    250c:	0f 90       	pop	r0
    250e:	0f be       	out	0x3f, r0	; 63
							
							break;
							
						case('c'):
						
							if (!(coordinate_mode.get()))
    2510:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    2514:	81 11       	cpse	r24, r1
    2516:	30 c5       	rjmp	.+2656   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	0f 92       	push	r0
			the_data = new_data;
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	80 93 f5 20 	sts	0x20F5, r24	; 0x8020f5 <coordinate_mode>
			portEXIT_CRITICAL ();
    2524:	0f 90       	pop	r0
    2526:	0f be       	out	0x3f, r0	; 63
							{
								coordinate_mode.put(true);
								transition_to(1);
    2528:	61 e0       	ldi	r22, 0x01	; 1
    252a:	8d 81       	ldd	r24, Y+5	; 0x05
    252c:	9e 81       	ldd	r25, Y+6	; 0x06
    252e:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
    2532:	22 c5       	rjmp	.+2628   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	0f 92       	push	r0
			the_data = new_data;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <direct_mode>
			portEXIT_CRITICAL ();
    2540:	0f 90       	pop	r0
    2542:	0f be       	out	0x3f, r0	; 63
						
						case('d'):
						
							//print_dir_mode_menu();
							direct_mode.put(true);
							transition_to(2);
    2544:	62 e0       	ldi	r22, 0x02	; 2
    2546:	8d 81       	ldd	r24, Y+5	; 0x05
    2548:	9e 81       	ldd	r25, Y+6	; 0x06
    254a:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
							break;
    254e:	14 c5       	rjmp	.+2600   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
    2550:	ad 81       	ldd	r26, Y+5	; 0x05
    2552:	be 81       	ldd	r27, Y+6	; 0x06
							
						case('r'):
							
							reset_device();
    2554:	cd 01       	movw	r24, r26
    2556:	0e 94 7d 11 	call	0x22fa	; 0x22fa <_ZN9task_user12reset_deviceEv>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	0f 92       	push	r0
			the_data = new_data;
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	80 93 72 21 	sts	0x2172, r24	; 0x802172 <sensor_reading>
			portEXIT_CRITICAL ();
    2566:	0f 90       	pop	r0
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	06 c5       	rjmp	.+2572   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	f8 94       	cli
    2570:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    2572:	0f 90       	pop	r0
    2574:	0f be       	out	0x3f, r0	; 63
							sensor_reading.put(true);
							break;
							
						case('p'):
							
							if(!(pause.get()))
    2576:	80 91 61 21 	lds	r24, 0x2161	; 0x802161 <pause>
    257a:	81 11       	cpse	r24, r1
    257c:	09 c0       	rjmp	.+18     	; 0x2590 <_ZN9task_user3runEv+0x25e>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	0f 92       	push	r0
			the_data = new_data;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	80 93 61 21 	sts	0x2161, r24	; 0x802161 <pause>
			portEXIT_CRITICAL ();
    258a:	0f 90       	pop	r0
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	f4 c4       	rjmp	.+2536   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	0f 92       	push	r0
			the_data = new_data;
    2596:	10 92 61 21 	sts	0x2161, r1	; 0x802161 <pause>
			portEXIT_CRITICAL ();
    259a:	0f 90       	pop	r0
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	ec c4       	rjmp	.+2520   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
				
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In Case 1, the UI is in Coordinate Mode. It waits for the user to specify the x, y, z 
			// coordinates of the device and then activates the device upon the user's command.
            case (1):
				if (p_serial->check_for_char ())        // If the user typed a
    25a0:	ed 81       	ldd	r30, Y+5	; 0x05
    25a2:	fe 81       	ldd	r31, Y+6	; 0x06
    25a4:	86 81       	ldd	r24, Z+6	; 0x06
    25a6:	97 81       	ldd	r25, Z+7	; 0x07
    25a8:	dc 01       	movw	r26, r24
    25aa:	ed 91       	ld	r30, X+
    25ac:	fc 91       	ld	r31, X
    25ae:	04 80       	ldd	r0, Z+4	; 0x04
    25b0:	f5 81       	ldd	r31, Z+5	; 0x05
    25b2:	e0 2d       	mov	r30, r0
    25b4:	19 95       	eicall
    25b6:	88 23       	and	r24, r24
    25b8:	09 f4       	brne	.+2      	; 0x25bc <_ZN9task_user3runEv+0x28a>
    25ba:	aa c1       	rjmp	.+852    	; 0x2910 <_ZN9task_user3runEv+0x5de>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    25bc:	ed 81       	ldd	r30, Y+5	; 0x05
    25be:	fe 81       	ldd	r31, Y+6	; 0x06
    25c0:	86 81       	ldd	r24, Z+6	; 0x06
    25c2:	97 81       	ldd	r25, Z+7	; 0x07
    25c4:	dc 01       	movw	r26, r24
    25c6:	ed 91       	ld	r30, X+
    25c8:	fc 91       	ld	r31, X
    25ca:	06 80       	ldd	r0, Z+6	; 0x06
    25cc:	f7 81       	ldd	r31, Z+7	; 0x07
    25ce:	e0 2d       	mov	r30, r0
    25d0:	19 95       	eicall
    25d2:	bc 01       	movw	r22, r24
					atoi_buf[atoi_index] = char_in;
    25d4:	f8 01       	movw	r30, r16
    25d6:	80 81       	ld	r24, Z
    25d8:	ed 81       	ldd	r30, Y+5	; 0x05
    25da:	fe 81       	ldd	r31, Y+6	; 0x06
    25dc:	e8 0f       	add	r30, r24
    25de:	f1 1d       	adc	r31, r1
    25e0:	62 8b       	std	Z+18, r22	; 0x12
					atoi_index++;
    25e2:	8f 5f       	subi	r24, 0xFF	; 255
    25e4:	d8 01       	movw	r26, r16
    25e6:	8c 93       	st	X, r24
					switch (char_in)
    25e8:	fb 01       	movw	r30, r22
    25ea:	ff 27       	eor	r31, r31
    25ec:	bc 97       	sbiw	r30, 0x2c	; 44
    25ee:	ef 34       	cpi	r30, 0x4F	; 79
    25f0:	f1 05       	cpc	r31, r1
    25f2:	08 f0       	brcs	.+2      	; 0x25f6 <_ZN9task_user3runEv+0x2c4>
    25f4:	c1 c4       	rjmp	.+2434   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
    25f6:	88 27       	eor	r24, r24
    25f8:	e6 5e       	subi	r30, 0xE6	; 230
    25fa:	fe 4f       	sbci	r31, 0xFE	; 254
    25fc:	8f 4f       	sbci	r24, 0xFF	; 255
    25fe:	0c 94 ae 34 	jmp	0x695c	; 0x695c <__tablejump2__>
    2602:	ed 81       	ldd	r30, Y+5	; 0x05
    2604:	fe 81       	ldd	r31, Y+6	; 0x06
					{
						case('r'):
						
							reset_device();
    2606:	cf 01       	movw	r24, r30
    2608:	0e 94 7d 11 	call	0x22fa	; 0x22fa <_ZN9task_user12reset_deviceEv>
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    260c:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <xlocations+0x4>
    2610:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <xlocations+0x5>
    2614:	0e 94 28 24 	call	0x4850	; 0x4850 <uxQueueMessagesWaiting>
    2618:	d8 2e       	mov	r13, r24
    261a:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <ylocations+0x4>
    261e:	90 91 06 21 	lds	r25, 0x2106	; 0x802106 <ylocations+0x5>
    2622:	0e 94 28 24 	call	0x4850	; 0x4850 <uxQueueMessagesWaiting>
							break;
						
						case ('e'):
						//print_main_menu();
						//coordinate_mode.put(false);
						if (xlocations.num_items_in() == ylocations.num_items_in() && xlocations.num_items_in() == zlocations.num_items_in())
    2626:	d8 12       	cpse	r13, r24
    2628:	45 c0       	rjmp	.+138    	; 0x26b4 <_ZN9task_user3runEv+0x382>
    262a:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <xlocations+0x4>
    262e:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <xlocations+0x5>
    2632:	0e 94 28 24 	call	0x4850	; 0x4850 <uxQueueMessagesWaiting>
    2636:	d8 2e       	mov	r13, r24
    2638:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <zlocations+0x4>
    263c:	90 91 fc 20 	lds	r25, 0x20FC	; 0x8020fc <zlocations+0x5>
    2640:	0e 94 28 24 	call	0x4850	; 0x4850 <uxQueueMessagesWaiting>
    2644:	d8 12       	cpse	r13, r24
    2646:	36 c0       	rjmp	.+108    	; 0x26b4 <_ZN9task_user3runEv+0x382>
    2648:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <xlocations+0x4>
    264c:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <xlocations+0x5>
    2650:	0e 94 28 24 	call	0x4850	; 0x4850 <uxQueueMessagesWaiting>
    2654:	c8 2e       	mov	r12, r24
    2656:	d1 2c       	mov	r13, r1
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	f8 94       	cli
    265c:	0f 92       	push	r0
			the_data = new_data;
    265e:	c0 92 62 21 	sts	0x2162, r12	; 0x802162 <total_nodes>
    2662:	d0 92 63 21 	sts	0x2163, r13	; 0x802163 <total_nodes+0x1>
			portEXIT_CRITICAL ();
    2666:	0f 90       	pop	r0
    2668:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    2670:	0f 90       	pop	r0
    2672:	0f be       	out	0x3f, r0	; 63
						{
							total_nodes.put(xlocations.num_items_in());
							*p_serial << PMS ("Total nodes: ") << total_nodes.get() << endl;
    2674:	6a e0       	ldi	r22, 0x0A	; 10
    2676:	ad 81       	ldd	r26, Y+5	; 0x05
    2678:	be 81       	ldd	r27, Y+6	; 0x06
    267a:	16 96       	adiw	r26, 0x06	; 6
    267c:	8d 91       	ld	r24, X+
    267e:	9c 91       	ld	r25, X
    2680:	17 97       	sbiw	r26, 0x07	; 7
    2682:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	9a 83       	std	Y+2, r25	; 0x02
    268a:	6a e6       	ldi	r22, 0x6A	; 106
    268c:	7a e0       	ldi	r23, 0x0A	; 10
    268e:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2692:	b6 01       	movw	r22, r12
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	9a 81       	ldd	r25, Y+2	; 0x02
    2698:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_ZN8emstreamlsEj>
    269c:	66 e0       	ldi	r22, 0x06	; 6
    269e:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	0f 92       	push	r0
			the_data = new_data;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	80 93 64 21 	sts	0x2164, r24	; 0x802164 <next_node>
			portEXIT_CRITICAL ();
    26ae:	0f 90       	pop	r0
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	10 c0       	rjmp	.+32     	; 0x26d4 <_ZN9task_user3runEv+0x3a2>
							next_node.put(true);
						}
						else
						{
							*p_serial << PMS ("Error: Unequal axis coordinate vectors.") << endl;
    26b4:	6a e0       	ldi	r22, 0x0A	; 10
    26b6:	ed 81       	ldd	r30, Y+5	; 0x05
    26b8:	fe 81       	ldd	r31, Y+6	; 0x06
    26ba:	86 81       	ldd	r24, Z+6	; 0x06
    26bc:	97 81       	ldd	r25, Z+7	; 0x07
    26be:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    26c2:	6c 01       	movw	r12, r24
    26c4:	62 e4       	ldi	r22, 0x42	; 66
    26c6:	7a e0       	ldi	r23, 0x0A	; 10
    26c8:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    26cc:	66 e0       	ldi	r22, 0x06	; 6
    26ce:	c6 01       	movw	r24, r12
    26d0:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
						}
						atoi_index = 0;
    26d4:	d8 01       	movw	r26, r16
    26d6:	1c 92       	st	X, r1
						transition_to(0);
    26d8:	60 e0       	ldi	r22, 0x00	; 0
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	9e 81       	ldd	r25, Y+6	; 0x06
    26de:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
						break;
    26e2:	4a c4       	rjmp	.+2196   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						
						// This character acts as an enter which the python file can more easily send.
						case('a'):
						conv_int = str_to_int();
    26e4:	8d 81       	ldd	r24, Y+5	; 0x05
    26e6:	9e 81       	ldd	r25, Y+6	; 0x06
    26e8:	0e 94 28 11 	call	0x2250	; 0x2250 <_ZN9task_user10str_to_intEv>
    26ec:	f7 01       	movw	r30, r14
    26ee:	60 83       	st	Z, r22
    26f0:	71 83       	std	Z+1, r23	; 0x01
    26f2:	82 83       	std	Z+2, r24	; 0x02
    26f4:	93 83       	std	Z+3, r25	; 0x03
						location_queue->put(conv_int);
    26f6:	d4 01       	movw	r26, r8
    26f8:	8d 91       	ld	r24, X+
    26fa:	9c 91       	ld	r25, X
    26fc:	dc 01       	movw	r26, r24
    26fe:	ed 91       	ld	r30, X+
    2700:	fc 91       	ld	r31, X
    2702:	01 90       	ld	r0, Z+
    2704:	f0 81       	ld	r31, Z
    2706:	e0 2d       	mov	r30, r0
    2708:	b7 01       	movw	r22, r14
    270a:	19 95       	eicall
						atoi_index = 0;
    270c:	f8 01       	movw	r30, r16
    270e:	10 82       	st	Z, r1
						//*p_serial << endl << PMS ("Locations stored in memory location: ") << location_queue << endl;
						break;
    2710:	33 c4       	rjmp	.+2150   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						
						case ('x'):
						atoi_index = 0;
    2712:	d8 01       	movw	r26, r16
    2714:	1c 92       	st	X, r1
						*p_serial << endl << PMS ("Receiving X-locations.") << endl;
    2716:	66 e0       	ldi	r22, 0x06	; 6
    2718:	ed 81       	ldd	r30, Y+5	; 0x05
    271a:	fe 81       	ldd	r31, Y+6	; 0x06
    271c:	86 81       	ldd	r24, Z+6	; 0x06
    271e:	97 81       	ldd	r25, Z+7	; 0x07
    2720:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2724:	6a e0       	ldi	r22, 0x0A	; 10
    2726:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    272a:	6c 01       	movw	r12, r24
    272c:	6b e2       	ldi	r22, 0x2B	; 43
    272e:	7a e0       	ldi	r23, 0x0A	; 10
    2730:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2734:	66 e0       	ldi	r22, 0x06	; 6
    2736:	c6 01       	movw	r24, r12
    2738:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
						location_queue = &xlocations;
    273c:	eb e0       	ldi	r30, 0x0B	; 11
    273e:	f1 e2       	ldi	r31, 0x21	; 33
    2740:	d4 01       	movw	r26, r8
    2742:	ed 93       	st	X+, r30
    2744:	fc 93       	st	X, r31
						break;
    2746:	18 c4       	rjmp	.+2096   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						
						case ('y'):
						atoi_index = 0;
    2748:	d8 01       	movw	r26, r16
    274a:	1c 92       	st	X, r1
						*p_serial << endl << PMS ("Receiving Y-locations.") << endl;
    274c:	66 e0       	ldi	r22, 0x06	; 6
    274e:	ed 81       	ldd	r30, Y+5	; 0x05
    2750:	fe 81       	ldd	r31, Y+6	; 0x06
    2752:	86 81       	ldd	r24, Z+6	; 0x06
    2754:	97 81       	ldd	r25, Z+7	; 0x07
    2756:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    275a:	6a e0       	ldi	r22, 0x0A	; 10
    275c:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2760:	6c 01       	movw	r12, r24
    2762:	64 e1       	ldi	r22, 0x14	; 20
    2764:	7a e0       	ldi	r23, 0x0A	; 10
    2766:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    276a:	66 e0       	ldi	r22, 0x06	; 6
    276c:	c6 01       	movw	r24, r12
    276e:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
						location_queue = &ylocations;
    2772:	e1 e0       	ldi	r30, 0x01	; 1
    2774:	f1 e2       	ldi	r31, 0x21	; 33
    2776:	d4 01       	movw	r26, r8
    2778:	ed 93       	st	X+, r30
    277a:	fc 93       	st	X, r31
						break;
    277c:	fd c3       	rjmp	.+2042   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						
						case ('z'):
						atoi_index = 0;
    277e:	d8 01       	movw	r26, r16
    2780:	1c 92       	st	X, r1
						*p_serial << endl << PMS ("Receiving Z-locations.") << endl;
    2782:	66 e0       	ldi	r22, 0x06	; 6
    2784:	ed 81       	ldd	r30, Y+5	; 0x05
    2786:	fe 81       	ldd	r31, Y+6	; 0x06
    2788:	86 81       	ldd	r24, Z+6	; 0x06
    278a:	97 81       	ldd	r25, Z+7	; 0x07
    278c:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2790:	6a e0       	ldi	r22, 0x0A	; 10
    2792:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2796:	6c 01       	movw	r12, r24
    2798:	6d ef       	ldi	r22, 0xFD	; 253
    279a:	79 e0       	ldi	r23, 0x09	; 9
    279c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    27a0:	66 e0       	ldi	r22, 0x06	; 6
    27a2:	c6 01       	movw	r24, r12
    27a4:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
						location_queue = &zlocations;
    27a8:	e7 ef       	ldi	r30, 0xF7	; 247
    27aa:	f0 e2       	ldi	r31, 0x20	; 32
    27ac:	d4 01       	movw	r26, r8
    27ae:	ed 93       	st	X+, r30
    27b0:	fc 93       	st	X, r31
						break;
    27b2:	e2 c3       	rjmp	.+1988   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	0f 92       	push	r0
			the_data = new_data;
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	80 93 6d 21 	sts	0x216D, r24	; 0x80216d <initialization_complete>
			portEXIT_CRITICAL ();
    27c0:	0f 90       	pop	r0
    27c2:	0f be       	out	0x3f, r0	; 63
						
						case ('g'):
						initialization_complete.put(true);
						*p_serial << endl;
    27c4:	66 e0       	ldi	r22, 0x06	; 6
    27c6:	ad 81       	ldd	r26, Y+5	; 0x05
    27c8:	be 81       	ldd	r27, Y+6	; 0x06
    27ca:	16 96       	adiw	r26, 0x06	; 6
    27cc:	8d 91       	ld	r24, X+
    27ce:	9c 91       	ld	r25, X
    27d0:	17 97       	sbiw	r26, 0x07	; 7
    27d2:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
						break;
    27d6:	d0 c3       	rjmp	.+1952   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						
						case (','):
						*p_serial << char_in;
    27d8:	ed 81       	ldd	r30, Y+5	; 0x05
    27da:	fe 81       	ldd	r31, Y+6	; 0x06
    27dc:	86 81       	ldd	r24, Z+6	; 0x06
    27de:	97 81       	ldd	r25, Z+7	; 0x07
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    27e0:	dc 01       	movw	r26, r24
    27e2:	ed 91       	ld	r30, X+
    27e4:	fc 91       	ld	r31, X
    27e6:	02 80       	ldd	r0, Z+2	; 0x02
    27e8:	f3 81       	ldd	r31, Z+3	; 0x03
    27ea:	e0 2d       	mov	r30, r0
    27ec:	19 95       	eicall
						conv_int = str_to_int();
    27ee:	8d 81       	ldd	r24, Y+5	; 0x05
    27f0:	9e 81       	ldd	r25, Y+6	; 0x06
    27f2:	0e 94 28 11 	call	0x2250	; 0x2250 <_ZN9task_user10str_to_intEv>
    27f6:	f7 01       	movw	r30, r14
    27f8:	60 83       	st	Z, r22
    27fa:	71 83       	std	Z+1, r23	; 0x01
    27fc:	82 83       	std	Z+2, r24	; 0x02
    27fe:	93 83       	std	Z+3, r25	; 0x03
						location_queue->put(conv_int);
    2800:	d4 01       	movw	r26, r8
    2802:	8d 91       	ld	r24, X+
    2804:	9c 91       	ld	r25, X
    2806:	dc 01       	movw	r26, r24
    2808:	ed 91       	ld	r30, X+
    280a:	fc 91       	ld	r31, X
    280c:	01 90       	ld	r0, Z+
    280e:	f0 81       	ld	r31, Z
    2810:	e0 2d       	mov	r30, r0
    2812:	b7 01       	movw	r22, r14
    2814:	19 95       	eicall
						atoi_index = 0;
    2816:	f8 01       	movw	r30, r16
    2818:	10 82       	st	Z, r1

						break;
    281a:	ae c3       	rjmp	.+1884   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						
						case('0'):
						
						*p_serial << char_in;
    281c:	ad 81       	ldd	r26, Y+5	; 0x05
    281e:	be 81       	ldd	r27, Y+6	; 0x06
    2820:	16 96       	adiw	r26, 0x06	; 6
    2822:	8d 91       	ld	r24, X+
    2824:	9c 91       	ld	r25, X
    2826:	17 97       	sbiw	r26, 0x07	; 7
    2828:	dc 01       	movw	r26, r24
    282a:	ed 91       	ld	r30, X+
    282c:	fc 91       	ld	r31, X
    282e:	02 80       	ldd	r0, Z+2	; 0x02
    2830:	f3 81       	ldd	r31, Z+3	; 0x03
    2832:	e0 2d       	mov	r30, r0
    2834:	19 95       	eicall
    2836:	a0 c3       	rjmp	.+1856   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('1'):
						
						*p_serial << char_in;
    2838:	ed 81       	ldd	r30, Y+5	; 0x05
    283a:	fe 81       	ldd	r31, Y+6	; 0x06
    283c:	86 81       	ldd	r24, Z+6	; 0x06
    283e:	97 81       	ldd	r25, Z+7	; 0x07
    2840:	dc 01       	movw	r26, r24
    2842:	ed 91       	ld	r30, X+
    2844:	fc 91       	ld	r31, X
    2846:	02 80       	ldd	r0, Z+2	; 0x02
    2848:	f3 81       	ldd	r31, Z+3	; 0x03
    284a:	e0 2d       	mov	r30, r0
    284c:	19 95       	eicall
    284e:	94 c3       	rjmp	.+1832   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('2'):
						
						*p_serial << char_in;
    2850:	ed 81       	ldd	r30, Y+5	; 0x05
    2852:	fe 81       	ldd	r31, Y+6	; 0x06
    2854:	86 81       	ldd	r24, Z+6	; 0x06
    2856:	97 81       	ldd	r25, Z+7	; 0x07
    2858:	dc 01       	movw	r26, r24
    285a:	ed 91       	ld	r30, X+
    285c:	fc 91       	ld	r31, X
    285e:	02 80       	ldd	r0, Z+2	; 0x02
    2860:	f3 81       	ldd	r31, Z+3	; 0x03
    2862:	e0 2d       	mov	r30, r0
    2864:	19 95       	eicall
    2866:	88 c3       	rjmp	.+1808   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('3'):
						
						*p_serial << char_in;
    2868:	ed 81       	ldd	r30, Y+5	; 0x05
    286a:	fe 81       	ldd	r31, Y+6	; 0x06
    286c:	86 81       	ldd	r24, Z+6	; 0x06
    286e:	97 81       	ldd	r25, Z+7	; 0x07
    2870:	dc 01       	movw	r26, r24
    2872:	ed 91       	ld	r30, X+
    2874:	fc 91       	ld	r31, X
    2876:	02 80       	ldd	r0, Z+2	; 0x02
    2878:	f3 81       	ldd	r31, Z+3	; 0x03
    287a:	e0 2d       	mov	r30, r0
    287c:	19 95       	eicall
    287e:	7c c3       	rjmp	.+1784   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('4'):
						
						*p_serial << char_in;
    2880:	ed 81       	ldd	r30, Y+5	; 0x05
    2882:	fe 81       	ldd	r31, Y+6	; 0x06
    2884:	86 81       	ldd	r24, Z+6	; 0x06
    2886:	97 81       	ldd	r25, Z+7	; 0x07
    2888:	dc 01       	movw	r26, r24
    288a:	ed 91       	ld	r30, X+
    288c:	fc 91       	ld	r31, X
    288e:	02 80       	ldd	r0, Z+2	; 0x02
    2890:	f3 81       	ldd	r31, Z+3	; 0x03
    2892:	e0 2d       	mov	r30, r0
    2894:	19 95       	eicall
    2896:	70 c3       	rjmp	.+1760   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('5'):
						
						*p_serial << char_in;
    2898:	ed 81       	ldd	r30, Y+5	; 0x05
    289a:	fe 81       	ldd	r31, Y+6	; 0x06
    289c:	86 81       	ldd	r24, Z+6	; 0x06
    289e:	97 81       	ldd	r25, Z+7	; 0x07
    28a0:	dc 01       	movw	r26, r24
    28a2:	ed 91       	ld	r30, X+
    28a4:	fc 91       	ld	r31, X
    28a6:	02 80       	ldd	r0, Z+2	; 0x02
    28a8:	f3 81       	ldd	r31, Z+3	; 0x03
    28aa:	e0 2d       	mov	r30, r0
    28ac:	19 95       	eicall
    28ae:	64 c3       	rjmp	.+1736   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('6'):
						
						*p_serial << char_in;
    28b0:	ed 81       	ldd	r30, Y+5	; 0x05
    28b2:	fe 81       	ldd	r31, Y+6	; 0x06
    28b4:	86 81       	ldd	r24, Z+6	; 0x06
    28b6:	97 81       	ldd	r25, Z+7	; 0x07
    28b8:	dc 01       	movw	r26, r24
    28ba:	ed 91       	ld	r30, X+
    28bc:	fc 91       	ld	r31, X
    28be:	02 80       	ldd	r0, Z+2	; 0x02
    28c0:	f3 81       	ldd	r31, Z+3	; 0x03
    28c2:	e0 2d       	mov	r30, r0
    28c4:	19 95       	eicall
    28c6:	58 c3       	rjmp	.+1712   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('7'):
						
						*p_serial << char_in;
    28c8:	ed 81       	ldd	r30, Y+5	; 0x05
    28ca:	fe 81       	ldd	r31, Y+6	; 0x06
    28cc:	86 81       	ldd	r24, Z+6	; 0x06
    28ce:	97 81       	ldd	r25, Z+7	; 0x07
    28d0:	dc 01       	movw	r26, r24
    28d2:	ed 91       	ld	r30, X+
    28d4:	fc 91       	ld	r31, X
    28d6:	02 80       	ldd	r0, Z+2	; 0x02
    28d8:	f3 81       	ldd	r31, Z+3	; 0x03
    28da:	e0 2d       	mov	r30, r0
    28dc:	19 95       	eicall
    28de:	4c c3       	rjmp	.+1688   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('8'):
						
						*p_serial << char_in;
    28e0:	ed 81       	ldd	r30, Y+5	; 0x05
    28e2:	fe 81       	ldd	r31, Y+6	; 0x06
    28e4:	86 81       	ldd	r24, Z+6	; 0x06
    28e6:	97 81       	ldd	r25, Z+7	; 0x07
    28e8:	dc 01       	movw	r26, r24
    28ea:	ed 91       	ld	r30, X+
    28ec:	fc 91       	ld	r31, X
    28ee:	02 80       	ldd	r0, Z+2	; 0x02
    28f0:	f3 81       	ldd	r31, Z+3	; 0x03
    28f2:	e0 2d       	mov	r30, r0
    28f4:	19 95       	eicall
    28f6:	40 c3       	rjmp	.+1664   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('9'):
						
						*p_serial << char_in;
    28f8:	ed 81       	ldd	r30, Y+5	; 0x05
    28fa:	fe 81       	ldd	r31, Y+6	; 0x06
    28fc:	86 81       	ldd	r24, Z+6	; 0x06
    28fe:	97 81       	ldd	r25, Z+7	; 0x07
    2900:	dc 01       	movw	r26, r24
    2902:	ed 91       	ld	r30, X+
    2904:	fc 91       	ld	r31, X
    2906:	02 80       	ldd	r0, Z+2	; 0x02
    2908:	f3 81       	ldd	r31, Z+3	; 0x03
    290a:	e0 2d       	mov	r30, r0
    290c:	19 95       	eicall
    290e:	34 c3       	rjmp	.+1640   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
					}
				}

				// Check the print queue to see if another task has sent this task
				// something to be printed
				else if (print_ser_queue.check_for_char ())
    2910:	85 e1       	ldi	r24, 0x15	; 21
    2912:	91 e2       	ldi	r25, 0x21	; 33
    2914:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <_ZN14frt_text_queue14check_for_charEv>
    2918:	88 23       	and	r24, r24
    291a:	09 f4       	brne	.+2      	; 0x291e <_ZN9task_user3runEv+0x5ec>
    291c:	2d c3       	rjmp	.+1626   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
				{
					p_serial->putchar (print_ser_queue.getchar ());
    291e:	ad 81       	ldd	r26, Y+5	; 0x05
    2920:	be 81       	ldd	r27, Y+6	; 0x06
    2922:	16 96       	adiw	r26, 0x06	; 6
    2924:	ed 91       	ld	r30, X+
    2926:	fc 91       	ld	r31, X
    2928:	17 97       	sbiw	r26, 0x07	; 7
    292a:	01 90       	ld	r0, Z+
    292c:	f0 81       	ld	r31, Z
    292e:	e0 2d       	mov	r30, r0
    2930:	c2 80       	ldd	r12, Z+2	; 0x02
    2932:	d3 80       	ldd	r13, Z+3	; 0x03
    2934:	85 e1       	ldi	r24, 0x15	; 21
    2936:	91 e2       	ldi	r25, 0x21	; 33
    2938:	0e 94 5f 2b 	call	0x56be	; 0x56be <_ZN14frt_text_queue7getcharEv>
    293c:	68 2f       	mov	r22, r24
    293e:	ed 81       	ldd	r30, Y+5	; 0x05
    2940:	fe 81       	ldd	r31, Y+6	; 0x06
    2942:	86 81       	ldd	r24, Z+6	; 0x06
    2944:	97 81       	ldd	r25, Z+7	; 0x07
    2946:	f6 01       	movw	r30, r12
    2948:	19 95       	eicall
    294a:	16 c3       	rjmp	.+1580   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
			// State 2 is Direct Operation Mode. Here, the user can enter commands that directly turn the motors on
			// and off, as well as control their direction.
				
			case (2):
				if (p_serial->check_for_char ())        // If the user typed a
    294c:	ad 81       	ldd	r26, Y+5	; 0x05
    294e:	be 81       	ldd	r27, Y+6	; 0x06
    2950:	16 96       	adiw	r26, 0x06	; 6
    2952:	8d 91       	ld	r24, X+
    2954:	9c 91       	ld	r25, X
    2956:	17 97       	sbiw	r26, 0x07	; 7
    2958:	dc 01       	movw	r26, r24
    295a:	ed 91       	ld	r30, X+
    295c:	fc 91       	ld	r31, X
    295e:	04 80       	ldd	r0, Z+4	; 0x04
    2960:	f5 81       	ldd	r31, Z+5	; 0x05
    2962:	e0 2d       	mov	r30, r0
    2964:	19 95       	eicall
    2966:	88 23       	and	r24, r24
    2968:	09 f4       	brne	.+2      	; 0x296c <_ZN9task_user3runEv+0x63a>
    296a:	06 c3       	rjmp	.+1548   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    296c:	ed 81       	ldd	r30, Y+5	; 0x05
    296e:	fe 81       	ldd	r31, Y+6	; 0x06
    2970:	86 81       	ldd	r24, Z+6	; 0x06
    2972:	97 81       	ldd	r25, Z+7	; 0x07
    2974:	dc 01       	movw	r26, r24
    2976:	ed 91       	ld	r30, X+
    2978:	fc 91       	ld	r31, X
    297a:	06 80       	ldd	r0, Z+6	; 0x06
    297c:	f7 81       	ldd	r31, Z+7	; 0x07
    297e:	e0 2d       	mov	r30, r0
    2980:	19 95       	eicall
					atoi_buf[atoi_index] = char_in;
    2982:	f8 01       	movw	r30, r16
    2984:	20 81       	ld	r18, Z
    2986:	ed 81       	ldd	r30, Y+5	; 0x05
    2988:	fe 81       	ldd	r31, Y+6	; 0x06
    298a:	e2 0f       	add	r30, r18
    298c:	f1 1d       	adc	r31, r1
    298e:	82 8b       	std	Z+18, r24	; 0x12
					atoi_index++;
    2990:	2f 5f       	subi	r18, 0xFF	; 255
    2992:	d8 01       	movw	r26, r16
    2994:	2c 93       	st	X, r18
					switch (char_in)
    2996:	99 27       	eor	r25, r25
    2998:	fc 01       	movw	r30, r24
    299a:	e5 56       	subi	r30, 0x65	; 101
    299c:	f1 09       	sbc	r31, r1
    299e:	e6 31       	cpi	r30, 0x16	; 22
    29a0:	f1 05       	cpc	r31, r1
    29a2:	08 f0       	brcs	.+2      	; 0x29a6 <_ZN9task_user3runEv+0x674>
    29a4:	e9 c2       	rjmp	.+1490   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
    29a6:	88 27       	eor	r24, r24
    29a8:	e7 59       	subi	r30, 0x97	; 151
    29aa:	fe 4f       	sbci	r31, 0xFE	; 254
    29ac:	8f 4f       	sbci	r24, 0xFF	; 255
    29ae:	0c 94 ae 34 	jmp	0x695c	; 0x695c <__tablejump2__>
					{
						case ('x'):
							pmotor_operator = &xmotor_on;
    29b2:	82 ef       	ldi	r24, 0xF2	; 242
    29b4:	90 e2       	ldi	r25, 0x20	; 32
    29b6:	f5 01       	movw	r30, r10
    29b8:	80 83       	st	Z, r24
    29ba:	91 83       	std	Z+1, r25	; 0x01
							//*p_serial << endl << PMS ("Press Ctrl-E to return to the main menu.") << endl << endl;
							//*p_serial << PMS ("X-Motor Controls:") << endl;
							
							break;
    29bc:	dd c2       	rjmp	.+1466   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						case ('y'):
							pmotor_operator = &ymotor_on;
    29be:	81 ef       	ldi	r24, 0xF1	; 241
    29c0:	90 e2       	ldi	r25, 0x20	; 32
    29c2:	d5 01       	movw	r26, r10
    29c4:	8d 93       	st	X+, r24
    29c6:	9c 93       	st	X, r25
							//*p_serial << endl << PMS ("Press Ctrl-E to return to the main menu.") << endl << endl;
							//*p_serial << PMS ("Y-Motor Controls:") << endl;
							//*p_serial << PMS ("Press Ctrl-F to activate forward.") << endl;
							//*p_serial << PMS ("Press Ctrl-R to activate reverse.") << endl;
							//*p_serial << PMS ("Press Ctrl-S to stop.") << endl;
							break;
    29c8:	d7 c2       	rjmp	.+1454   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						case ('z'):
							pmotor_operator = &zmotor_on;
    29ca:	80 ef       	ldi	r24, 0xF0	; 240
    29cc:	90 e2       	ldi	r25, 0x20	; 32
    29ce:	f5 01       	movw	r30, r10
    29d0:	80 83       	st	Z, r24
    29d2:	91 83       	std	Z+1, r25	; 0x01
							//*p_serial << endl << PMS ("Press Ctrl-E to return to the main menu.") << endl << endl;
							//*p_serial << PMS ("Z-Motor Controls:") << endl;
							//*p_serial << PMS ("Press Ctrl-F to activate forward.") << endl;
							//*p_serial << PMS ("Press Ctrl-R to activate reverse.") << endl;
							//*p_serial << PMS ("Press Ctrl-S to stop.") << endl;
							break;
    29d4:	d1 c2       	rjmp	.+1442   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	f8 94       	cli
    29da:	0f 92       	push	r0
			the_data = new_data;
    29dc:	10 92 f4 20 	sts	0x20F4, r1	; 0x8020f4 <direct_mode>
			portEXIT_CRITICAL ();
    29e0:	0f 90       	pop	r0
    29e2:	0f be       	out	0x3f, r0	; 63
							//*p_serial << PMS ("Press Ctrl-B for Coordinate Mode") << endl;
							//*p_serial << PMS ("Press Ctrl-D for Direct Operation Mode") << endl;
							//*p_serial << PMS ("Press Ctrl-R for Routine Operation Mode") << endl;
						
							direct_mode.put(false);
							transition_to(0);
    29e4:	60 e0       	ldi	r22, 0x00	; 0
    29e6:	8d 81       	ldd	r24, Y+5	; 0x05
    29e8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ea:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
							break;
    29ee:	c4 c2       	rjmp	.+1416   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						
						case ('f'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    29f0:	d5 01       	movw	r26, r10
    29f2:	ed 91       	ld	r30, X+
    29f4:	fc 91       	ld	r31, X
    29f6:	b0 e2       	ldi	r27, 0x20	; 32
    29f8:	e2 3f       	cpi	r30, 0xF2	; 242
    29fa:	fb 07       	cpc	r31, r27
    29fc:	41 f0       	breq	.+16     	; 0x2a0e <_ZN9task_user3runEv+0x6dc>
    29fe:	80 e2       	ldi	r24, 0x20	; 32
    2a00:	e1 3f       	cpi	r30, 0xF1	; 241
    2a02:	f8 07       	cpc	r31, r24
    2a04:	21 f0       	breq	.+8      	; 0x2a0e <_ZN9task_user3runEv+0x6dc>
    2a06:	90 e2       	ldi	r25, 0x20	; 32
    2a08:	e0 3f       	cpi	r30, 0xF0	; 240
    2a0a:	f9 07       	cpc	r31, r25
    2a0c:	41 f4       	brne	.+16     	; 0x2a1e <_ZN9task_user3runEv+0x6ec>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	f8 94       	cli
    2a12:	0f 92       	push	r0
			the_data = new_data;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	80 83       	st	Z, r24
			portEXIT_CRITICAL ();
    2a18:	0f 90       	pop	r0
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	ad c2       	rjmp	.+1370   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
								pmotor_operator->put(1);
								
							}
							else
							{
								*p_serial << PMS ("Please choose the motor you would like to control.") << endl;
    2a1e:	6a e0       	ldi	r22, 0x0A	; 10
    2a20:	ad 81       	ldd	r26, Y+5	; 0x05
    2a22:	be 81       	ldd	r27, Y+6	; 0x06
    2a24:	16 96       	adiw	r26, 0x06	; 6
    2a26:	8d 91       	ld	r24, X+
    2a28:	9c 91       	ld	r25, X
    2a2a:	17 97       	sbiw	r26, 0x07	; 7
    2a2c:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2a30:	6c 01       	movw	r12, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    2a32:	6a ec       	ldi	r22, 0xCA	; 202
    2a34:	79 e0       	ldi	r23, 0x09	; 9
    2a36:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2a3a:	66 e0       	ldi	r22, 0x06	; 6
    2a3c:	c6 01       	movw	r24, r12
    2a3e:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2a42:	9a c2       	rjmp	.+1332   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
							}
							
							break;
							
						case ('r'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    2a44:	d5 01       	movw	r26, r10
    2a46:	ed 91       	ld	r30, X+
    2a48:	fc 91       	ld	r31, X
    2a4a:	b0 e2       	ldi	r27, 0x20	; 32
    2a4c:	e2 3f       	cpi	r30, 0xF2	; 242
    2a4e:	fb 07       	cpc	r31, r27
    2a50:	41 f0       	breq	.+16     	; 0x2a62 <_ZN9task_user3runEv+0x730>
    2a52:	80 e2       	ldi	r24, 0x20	; 32
    2a54:	e1 3f       	cpi	r30, 0xF1	; 241
    2a56:	f8 07       	cpc	r31, r24
    2a58:	21 f0       	breq	.+8      	; 0x2a62 <_ZN9task_user3runEv+0x730>
    2a5a:	90 e2       	ldi	r25, 0x20	; 32
    2a5c:	e0 3f       	cpi	r30, 0xF0	; 240
    2a5e:	f9 07       	cpc	r31, r25
    2a60:	41 f4       	brne	.+16     	; 0x2a72 <_ZN9task_user3runEv+0x740>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	0f 92       	push	r0
			the_data = new_data;
    2a68:	82 e0       	ldi	r24, 0x02	; 2
    2a6a:	80 83       	st	Z, r24
			portEXIT_CRITICAL ();
    2a6c:	0f 90       	pop	r0
    2a6e:	0f be       	out	0x3f, r0	; 63
    2a70:	83 c2       	rjmp	.+1286   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
								pmotor_operator->put(2);
								
							}
							else
							{
								*p_serial << PMS ("Please choose the motor you would like to control.") << endl;
    2a72:	6a e0       	ldi	r22, 0x0A	; 10
    2a74:	ad 81       	ldd	r26, Y+5	; 0x05
    2a76:	be 81       	ldd	r27, Y+6	; 0x06
    2a78:	16 96       	adiw	r26, 0x06	; 6
    2a7a:	8d 91       	ld	r24, X+
    2a7c:	9c 91       	ld	r25, X
    2a7e:	17 97       	sbiw	r26, 0x07	; 7
    2a80:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2a84:	6c 01       	movw	r12, r24
    2a86:	67 e9       	ldi	r22, 0x97	; 151
    2a88:	79 e0       	ldi	r23, 0x09	; 9
    2a8a:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2a8e:	66 e0       	ldi	r22, 0x06	; 6
    2a90:	c6 01       	movw	r24, r12
    2a92:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2a96:	70 c2       	rjmp	.+1248   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
							}
							
							break;
							
						case ('s'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    2a98:	d5 01       	movw	r26, r10
    2a9a:	ed 91       	ld	r30, X+
    2a9c:	fc 91       	ld	r31, X
    2a9e:	b0 e2       	ldi	r27, 0x20	; 32
    2aa0:	e2 3f       	cpi	r30, 0xF2	; 242
    2aa2:	fb 07       	cpc	r31, r27
    2aa4:	41 f0       	breq	.+16     	; 0x2ab6 <_ZN9task_user3runEv+0x784>
    2aa6:	80 e2       	ldi	r24, 0x20	; 32
    2aa8:	e1 3f       	cpi	r30, 0xF1	; 241
    2aaa:	f8 07       	cpc	r31, r24
    2aac:	21 f0       	breq	.+8      	; 0x2ab6 <_ZN9task_user3runEv+0x784>
    2aae:	90 e2       	ldi	r25, 0x20	; 32
    2ab0:	e0 3f       	cpi	r30, 0xF0	; 240
    2ab2:	f9 07       	cpc	r31, r25
    2ab4:	39 f4       	brne	.+14     	; 0x2ac4 <_ZN9task_user3runEv+0x792>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	f8 94       	cli
    2aba:	0f 92       	push	r0
			the_data = new_data;
    2abc:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    2abe:	0f 90       	pop	r0
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	5a c2       	rjmp	.+1204   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
								pmotor_operator->put(0);
								
							}
							else
							{
								*p_serial << PMS ("Please choose the motor you would like to control.") << endl;
    2ac4:	6a e0       	ldi	r22, 0x0A	; 10
    2ac6:	ad 81       	ldd	r26, Y+5	; 0x05
    2ac8:	be 81       	ldd	r27, Y+6	; 0x06
    2aca:	16 96       	adiw	r26, 0x06	; 6
    2acc:	8d 91       	ld	r24, X+
    2ace:	9c 91       	ld	r25, X
    2ad0:	17 97       	sbiw	r26, 0x07	; 7
    2ad2:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2ad6:	6c 01       	movw	r12, r24
    2ad8:	64 e6       	ldi	r22, 0x64	; 100
    2ada:	79 e0       	ldi	r23, 0x09	; 9
    2adc:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2ae0:	66 e0       	ldi	r22, 0x06	; 6
    2ae2:	c6 01       	movw	r24, r12
    2ae4:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2ae8:	47 c2       	rjmp	.+1166   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
			/** In State 3, the interface task is in configuration mode. In this mode, it has the ability to change the
			 *	default values of certain system parameters.
			 */			
				
			case (3):
				if (p_serial->check_for_char ())        // If the user typed a
    2aea:	ed 81       	ldd	r30, Y+5	; 0x05
    2aec:	fe 81       	ldd	r31, Y+6	; 0x06
    2aee:	86 81       	ldd	r24, Z+6	; 0x06
    2af0:	97 81       	ldd	r25, Z+7	; 0x07
    2af2:	dc 01       	movw	r26, r24
    2af4:	ed 91       	ld	r30, X+
    2af6:	fc 91       	ld	r31, X
    2af8:	04 80       	ldd	r0, Z+4	; 0x04
    2afa:	f5 81       	ldd	r31, Z+5	; 0x05
    2afc:	e0 2d       	mov	r30, r0
    2afe:	19 95       	eicall
    2b00:	88 23       	and	r24, r24
    2b02:	09 f4       	brne	.+2      	; 0x2b06 <_ZN9task_user3runEv+0x7d4>
    2b04:	39 c2       	rjmp	.+1138   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    2b06:	ed 81       	ldd	r30, Y+5	; 0x05
    2b08:	fe 81       	ldd	r31, Y+6	; 0x06
    2b0a:	86 81       	ldd	r24, Z+6	; 0x06
    2b0c:	97 81       	ldd	r25, Z+7	; 0x07
    2b0e:	dc 01       	movw	r26, r24
    2b10:	ed 91       	ld	r30, X+
    2b12:	fc 91       	ld	r31, X
    2b14:	06 80       	ldd	r0, Z+6	; 0x06
    2b16:	f7 81       	ldd	r31, Z+7	; 0x07
    2b18:	e0 2d       	mov	r30, r0
    2b1a:	19 95       	eicall
    2b1c:	bc 01       	movw	r22, r24
					atoi_buf[atoi_index] = char_in;
    2b1e:	f8 01       	movw	r30, r16
    2b20:	80 81       	ld	r24, Z
    2b22:	ed 81       	ldd	r30, Y+5	; 0x05
    2b24:	fe 81       	ldd	r31, Y+6	; 0x06
    2b26:	e8 0f       	add	r30, r24
    2b28:	f1 1d       	adc	r31, r1
    2b2a:	62 8b       	std	Z+18, r22	; 0x12
					atoi_index++;
    2b2c:	8f 5f       	subi	r24, 0xFF	; 255
    2b2e:	d8 01       	movw	r26, r16
    2b30:	8c 93       	st	X, r24
					switch (char_in)
    2b32:	fb 01       	movw	r30, r22
    2b34:	ff 27       	eor	r31, r31
    2b36:	bc 97       	sbiw	r30, 0x2c	; 44
    2b38:	ef 34       	cpi	r30, 0x4F	; 79
    2b3a:	f1 05       	cpc	r31, r1
    2b3c:	08 f0       	brcs	.+2      	; 0x2b40 <_ZN9task_user3runEv+0x80e>
    2b3e:	1c c2       	rjmp	.+1080   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
    2b40:	88 27       	eor	r24, r24
    2b42:	e1 58       	subi	r30, 0x81	; 129
    2b44:	fe 4f       	sbci	r31, 0xFE	; 254
    2b46:	8f 4f       	sbci	r24, 0xFF	; 255
    2b48:	0c 94 ae 34 	jmp	0x695c	; 0x695c <__tablejump2__>
							//atoi_index = 0;
							//data_config = &ramp_run_span;
							//break;
							
						case ('v'):
							*p_serial << PMS ("Max velocity set to:") << endl;
    2b4c:	6a e0       	ldi	r22, 0x0A	; 10
    2b4e:	ed 81       	ldd	r30, Y+5	; 0x05
    2b50:	fe 81       	ldd	r31, Y+6	; 0x06
    2b52:	86 81       	ldd	r24, Z+6	; 0x06
    2b54:	97 81       	ldd	r25, Z+7	; 0x07
    2b56:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2b5a:	6c 01       	movw	r12, r24
    2b5c:	6f e4       	ldi	r22, 0x4F	; 79
    2b5e:	79 e0       	ldi	r23, 0x09	; 9
    2b60:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2b64:	66 e0       	ldi	r22, 0x06	; 6
    2b66:	c6 01       	movw	r24, r12
    2b68:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    2b6c:	d8 01       	movw	r26, r16
    2b6e:	1c 92       	st	X, r1
							data_config = &gen_max_v;
    2b70:	89 e3       	ldi	r24, 0x39	; 57
    2b72:	91 e2       	ldi	r25, 0x21	; 33
    2b74:	f3 01       	movw	r30, r6
    2b76:	80 83       	st	Z, r24
    2b78:	91 83       	std	Z+1, r25	; 0x01
							break;
    2b7a:	fe c1       	rjmp	.+1020   	; 0x2f78 <_ZN9task_user3runEv+0xc46>
							
						case ('x'):
							*p_serial << PMS ("X-axis max velocity set to:") << endl;
    2b7c:	6a e0       	ldi	r22, 0x0A	; 10
    2b7e:	ad 81       	ldd	r26, Y+5	; 0x05
    2b80:	be 81       	ldd	r27, Y+6	; 0x06
    2b82:	16 96       	adiw	r26, 0x06	; 6
    2b84:	8d 91       	ld	r24, X+
    2b86:	9c 91       	ld	r25, X
    2b88:	17 97       	sbiw	r26, 0x07	; 7
    2b8a:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2b8e:	6c 01       	movw	r12, r24
    2b90:	63 e3       	ldi	r22, 0x33	; 51
    2b92:	79 e0       	ldi	r23, 0x09	; 9
    2b94:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2b98:	66 e0       	ldi	r22, 0x06	; 6
    2b9a:	c6 01       	movw	r24, r12
    2b9c:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    2ba0:	f8 01       	movw	r30, r16
    2ba2:	10 82       	st	Z, r1
							v_config = &x_max_velocity;
    2ba4:	87 e5       	ldi	r24, 0x57	; 87
    2ba6:	91 e2       	ldi	r25, 0x21	; 33
    2ba8:	d2 01       	movw	r26, r4
    2baa:	8d 93       	st	X+, r24
    2bac:	9c 93       	st	X, r25
							queue_indicator = true;
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	f1 01       	movw	r30, r2
    2bb2:	80 83       	st	Z, r24
							break;
    2bb4:	e1 c1       	rjmp	.+962    	; 0x2f78 <_ZN9task_user3runEv+0xc46>
							
						case ('y'):
							*p_serial << PMS ("Y-axis max velocity set to:") << endl;
    2bb6:	6a e0       	ldi	r22, 0x0A	; 10
    2bb8:	ad 81       	ldd	r26, Y+5	; 0x05
    2bba:	be 81       	ldd	r27, Y+6	; 0x06
    2bbc:	16 96       	adiw	r26, 0x06	; 6
    2bbe:	8d 91       	ld	r24, X+
    2bc0:	9c 91       	ld	r25, X
    2bc2:	17 97       	sbiw	r26, 0x07	; 7
    2bc4:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2bc8:	6c 01       	movw	r12, r24
    2bca:	67 e1       	ldi	r22, 0x17	; 23
    2bcc:	79 e0       	ldi	r23, 0x09	; 9
    2bce:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2bd2:	66 e0       	ldi	r22, 0x06	; 6
    2bd4:	c6 01       	movw	r24, r12
    2bd6:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    2bda:	f8 01       	movw	r30, r16
    2bdc:	10 82       	st	Z, r1
							v_config = &y_max_velocity;
    2bde:	8d e4       	ldi	r24, 0x4D	; 77
    2be0:	91 e2       	ldi	r25, 0x21	; 33
    2be2:	d2 01       	movw	r26, r4
    2be4:	8d 93       	st	X+, r24
    2be6:	9c 93       	st	X, r25
							queue_indicator = true;
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	f1 01       	movw	r30, r2
    2bec:	80 83       	st	Z, r24
							break;
    2bee:	c4 c1       	rjmp	.+904    	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						
						case ('z'):
							*p_serial << PMS ("Z-axis max velocity set to:") << endl;
    2bf0:	6a e0       	ldi	r22, 0x0A	; 10
    2bf2:	ad 81       	ldd	r26, Y+5	; 0x05
    2bf4:	be 81       	ldd	r27, Y+6	; 0x06
    2bf6:	16 96       	adiw	r26, 0x06	; 6
    2bf8:	8d 91       	ld	r24, X+
    2bfa:	9c 91       	ld	r25, X
    2bfc:	17 97       	sbiw	r26, 0x07	; 7
    2bfe:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2c02:	6c 01       	movw	r12, r24
    2c04:	6b ef       	ldi	r22, 0xFB	; 251
    2c06:	78 e0       	ldi	r23, 0x08	; 8
    2c08:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2c0c:	66 e0       	ldi	r22, 0x06	; 6
    2c0e:	c6 01       	movw	r24, r12
    2c10:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    2c14:	f8 01       	movw	r30, r16
    2c16:	10 82       	st	Z, r1
							v_config = &z_max_velocity;
    2c18:	83 e4       	ldi	r24, 0x43	; 67
    2c1a:	91 e2       	ldi	r25, 0x21	; 33
    2c1c:	d2 01       	movw	r26, r4
    2c1e:	8d 93       	st	X+, r24
    2c20:	9c 93       	st	X, r25
							queue_indicator = true;
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	f1 01       	movw	r30, r2
    2c26:	80 83       	st	Z, r24
							break;
    2c28:	a7 c1       	rjmp	.+846    	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						
						case ('e'):
							*p_serial << PMS ("Leaving config mode") << endl;
    2c2a:	6a e0       	ldi	r22, 0x0A	; 10
    2c2c:	ad 81       	ldd	r26, Y+5	; 0x05
    2c2e:	be 81       	ldd	r27, Y+6	; 0x06
    2c30:	16 96       	adiw	r26, 0x06	; 6
    2c32:	8d 91       	ld	r24, X+
    2c34:	9c 91       	ld	r25, X
    2c36:	17 97       	sbiw	r26, 0x07	; 7
    2c38:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2c3c:	6c 01       	movw	r12, r24
    2c3e:	67 ee       	ldi	r22, 0xE7	; 231
    2c40:	78 e0       	ldi	r23, 0x08	; 8
    2c42:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2c46:	66 e0       	ldi	r22, 0x06	; 6
    2c48:	c6 01       	movw	r24, r12
    2c4a:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	0f 92       	push	r0
			the_data = new_data;
    2c54:	10 92 f6 20 	sts	0x20F6, r1	; 0x8020f6 <configuration_mode>
			portEXIT_CRITICAL ();
    2c58:	0f 90       	pop	r0
    2c5a:	0f be       	out	0x3f, r0	; 63
							configuration_mode.put(false);
							transition_to(0);
    2c5c:	60 e0       	ldi	r22, 0x00	; 0
    2c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c60:	9e 81       	ldd	r25, Y+6	; 0x06
    2c62:	0e 94 04 2a 	call	0x5408	; 0x5408 <_ZN8frt_task13transition_toEh>
							break;
    2c66:	88 c1       	rjmp	.+784    	; 0x2f78 <_ZN9task_user3runEv+0xc46>
							
						case('a'):
							conv_int = str_to_int();
    2c68:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6c:	0e 94 28 11 	call	0x2250	; 0x2250 <_ZN9task_user10str_to_intEv>
    2c70:	9b 01       	movw	r18, r22
    2c72:	ac 01       	movw	r20, r24
    2c74:	f7 01       	movw	r30, r14
    2c76:	60 83       	st	Z, r22
    2c78:	71 83       	std	Z+1, r23	; 0x01
    2c7a:	82 83       	std	Z+2, r24	; 0x02
    2c7c:	93 83       	std	Z+3, r25	; 0x03
							if (queue_indicator)
    2c7e:	d1 01       	movw	r26, r2
    2c80:	8c 91       	ld	r24, X
    2c82:	88 23       	and	r24, r24
    2c84:	b1 f0       	breq	.+44     	; 0x2cb2 <_ZN9task_user3runEv+0x980>
							{
								conv_int = 1000 * conv_int;
    2c86:	a8 ee       	ldi	r26, 0xE8	; 232
    2c88:	b3 e0       	ldi	r27, 0x03	; 3
    2c8a:	0e 94 c5 34 	call	0x698a	; 0x698a <__muluhisi3>
    2c8e:	60 83       	st	Z, r22
    2c90:	71 83       	std	Z+1, r23	; 0x01
    2c92:	82 83       	std	Z+2, r24	; 0x02
    2c94:	93 83       	std	Z+3, r25	; 0x03
								v_config->put(conv_int);
    2c96:	d2 01       	movw	r26, r4
    2c98:	8d 91       	ld	r24, X+
    2c9a:	9c 91       	ld	r25, X
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	ed 91       	ld	r30, X+
    2ca0:	fc 91       	ld	r31, X
    2ca2:	01 90       	ld	r0, Z+
    2ca4:	f0 81       	ld	r31, Z
    2ca6:	e0 2d       	mov	r30, r0
    2ca8:	b7 01       	movw	r22, r14
    2caa:	19 95       	eicall
								queue_indicator = false;
    2cac:	f1 01       	movw	r30, r2
    2cae:	10 82       	st	Z, r1
    2cb0:	32 c0       	rjmp	.+100    	; 0x2d16 <_ZN9task_user3runEv+0x9e4>
							}
							else
							{
								if (data_config == &ramp_run_span)
    2cb2:	d3 01       	movw	r26, r6
    2cb4:	cd 90       	ld	r12, X+
    2cb6:	dc 90       	ld	r13, X
    2cb8:	bf e3       	ldi	r27, 0x3F	; 63
    2cba:	cb 16       	cp	r12, r27
    2cbc:	b1 e2       	ldi	r27, 0x21	; 33
    2cbe:	db 06       	cpc	r13, r27
    2cc0:	61 f4       	brne	.+24     	; 0x2cda <_ZN9task_user3runEv+0x9a8>
								{
									conv_int = 100 / conv_int;
    2cc2:	64 e6       	ldi	r22, 0x64	; 100
    2cc4:	70 e0       	ldi	r23, 0x00	; 0
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	0e 94 8c 34 	call	0x6918	; 0x6918 <__udivmodsi4>
    2cce:	f7 01       	movw	r30, r14
    2cd0:	20 83       	st	Z, r18
    2cd2:	31 83       	std	Z+1, r19	; 0x01
    2cd4:	42 83       	std	Z+2, r20	; 0x02
    2cd6:	53 83       	std	Z+3, r21	; 0x03
    2cd8:	0f c0       	rjmp	.+30     	; 0x2cf8 <_ZN9task_user3runEv+0x9c6>
								}
								else if (data_config == &gen_max_v)
    2cda:	f9 e3       	ldi	r31, 0x39	; 57
    2cdc:	cf 16       	cp	r12, r31
    2cde:	f1 e2       	ldi	r31, 0x21	; 33
    2ce0:	df 06       	cpc	r13, r31
    2ce2:	51 f4       	brne	.+20     	; 0x2cf8 <_ZN9task_user3runEv+0x9c6>
								{
									conv_int = 1500 * conv_int;
    2ce4:	ac ed       	ldi	r26, 0xDC	; 220
    2ce6:	b5 e0       	ldi	r27, 0x05	; 5
    2ce8:	0e 94 c5 34 	call	0x698a	; 0x698a <__muluhisi3>
    2cec:	d7 01       	movw	r26, r14
    2cee:	6d 93       	st	X+, r22
    2cf0:	7d 93       	st	X+, r23
    2cf2:	8d 93       	st	X+, r24
    2cf4:	9c 93       	st	X, r25
    2cf6:	13 97       	sbiw	r26, 0x03	; 3
								}
								data_config->put(conv_int);
    2cf8:	f7 01       	movw	r30, r14
    2cfa:	80 81       	ld	r24, Z
    2cfc:	91 81       	ldd	r25, Z+1	; 0x01
    2cfe:	a2 81       	ldd	r26, Z+2	; 0x02
    2d00:	b3 81       	ldd	r27, Z+3	; 0x03
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	f8 94       	cli
    2d06:	0f 92       	push	r0
			the_data = new_data;
    2d08:	f6 01       	movw	r30, r12
    2d0a:	80 83       	st	Z, r24
    2d0c:	91 83       	std	Z+1, r25	; 0x01
    2d0e:	a2 83       	std	Z+2, r26	; 0x02
    2d10:	b3 83       	std	Z+3, r27	; 0x03
			portEXIT_CRITICAL ();
    2d12:	0f 90       	pop	r0
    2d14:	0f be       	out	0x3f, r0	; 63
							}
									
							atoi_index = 0;
    2d16:	d8 01       	movw	r26, r16
    2d18:	1c 92       	st	X, r1
							*p_serial << PMS ("Config entered:") << conv_int << endl;
    2d1a:	d7 01       	movw	r26, r14
    2d1c:	8d 91       	ld	r24, X+
    2d1e:	9d 91       	ld	r25, X+
    2d20:	0d 90       	ld	r0, X+
    2d22:	bc 91       	ld	r27, X
    2d24:	a0 2d       	mov	r26, r0
    2d26:	89 83       	std	Y+1, r24	; 0x01
    2d28:	9a 83       	std	Y+2, r25	; 0x02
    2d2a:	ab 83       	std	Y+3, r26	; 0x03
    2d2c:	bc 83       	std	Y+4, r27	; 0x04
    2d2e:	6a e0       	ldi	r22, 0x0A	; 10
    2d30:	ed 81       	ldd	r30, Y+5	; 0x05
    2d32:	fe 81       	ldd	r31, Y+6	; 0x06
    2d34:	86 81       	ldd	r24, Z+6	; 0x06
    2d36:	97 81       	ldd	r25, Z+7	; 0x07
    2d38:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2d3c:	6c 01       	movw	r12, r24
    2d3e:	67 ed       	ldi	r22, 0xD7	; 215
    2d40:	78 e0       	ldi	r23, 0x08	; 8
    2d42:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2d46:	49 81       	ldd	r20, Y+1	; 0x01
    2d48:	5a 81       	ldd	r21, Y+2	; 0x02
    2d4a:	6b 81       	ldd	r22, Y+3	; 0x03
    2d4c:	7c 81       	ldd	r23, Y+4	; 0x04
    2d4e:	c6 01       	movw	r24, r12
    2d50:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <_ZN8emstreamlsEm>
    2d54:	66 e0       	ldi	r22, 0x06	; 6
    2d56:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
							break;
    2d5a:	0e c1       	rjmp	.+540    	; 0x2f78 <_ZN9task_user3runEv+0xc46>
							
						case (','):
							*p_serial << char_in;
    2d5c:	ad 81       	ldd	r26, Y+5	; 0x05
    2d5e:	be 81       	ldd	r27, Y+6	; 0x06
    2d60:	16 96       	adiw	r26, 0x06	; 6
    2d62:	8d 91       	ld	r24, X+
    2d64:	9c 91       	ld	r25, X
    2d66:	17 97       	sbiw	r26, 0x07	; 7
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    2d68:	dc 01       	movw	r26, r24
    2d6a:	ed 91       	ld	r30, X+
    2d6c:	fc 91       	ld	r31, X
    2d6e:	02 80       	ldd	r0, Z+2	; 0x02
    2d70:	f3 81       	ldd	r31, Z+3	; 0x03
    2d72:	e0 2d       	mov	r30, r0
    2d74:	19 95       	eicall
							
							conv_int = str_to_int();
    2d76:	8d 81       	ldd	r24, Y+5	; 0x05
    2d78:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7a:	0e 94 28 11 	call	0x2250	; 0x2250 <_ZN9task_user10str_to_intEv>
    2d7e:	9b 01       	movw	r18, r22
    2d80:	ac 01       	movw	r20, r24
							conv_int = conv_int * 1000;
    2d82:	a8 ee       	ldi	r26, 0xE8	; 232
    2d84:	b3 e0       	ldi	r27, 0x03	; 3
    2d86:	0e 94 c5 34 	call	0x698a	; 0x698a <__muluhisi3>
    2d8a:	f7 01       	movw	r30, r14
    2d8c:	60 83       	st	Z, r22
    2d8e:	71 83       	std	Z+1, r23	; 0x01
    2d90:	82 83       	std	Z+2, r24	; 0x02
    2d92:	93 83       	std	Z+3, r25	; 0x03
							v_config->put(conv_int);
    2d94:	d2 01       	movw	r26, r4
    2d96:	8d 91       	ld	r24, X+
    2d98:	9c 91       	ld	r25, X
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	ed 91       	ld	r30, X+
    2d9e:	fc 91       	ld	r31, X
    2da0:	01 90       	ld	r0, Z+
    2da2:	f0 81       	ld	r31, Z
    2da4:	e0 2d       	mov	r30, r0
    2da6:	b7 01       	movw	r22, r14
    2da8:	19 95       	eicall
							atoi_index = 0;
    2daa:	f8 01       	movw	r30, r16
    2dac:	10 82       	st	Z, r1
							break;
    2dae:	e4 c0       	rjmp	.+456    	; 0x2f78 <_ZN9task_user3runEv+0xc46>
							
						case ('u'):
							*p_serial << PMS ("Microstep scaler set to:") << endl;
    2db0:	6a e0       	ldi	r22, 0x0A	; 10
    2db2:	ad 81       	ldd	r26, Y+5	; 0x05
    2db4:	be 81       	ldd	r27, Y+6	; 0x06
    2db6:	16 96       	adiw	r26, 0x06	; 6
    2db8:	8d 91       	ld	r24, X+
    2dba:	9c 91       	ld	r25, X
    2dbc:	17 97       	sbiw	r26, 0x07	; 7
    2dbe:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2dc2:	6c 01       	movw	r12, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    2dc4:	6e eb       	ldi	r22, 0xBE	; 190
    2dc6:	78 e0       	ldi	r23, 0x08	; 8
    2dc8:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2dcc:	66 e0       	ldi	r22, 0x06	; 6
    2dce:	c6 01       	movw	r24, r12
    2dd0:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    2dd4:	f8 01       	movw	r30, r16
    2dd6:	10 82       	st	Z, r1
							data_config = &microstep_scaler;
    2dd8:	85 e6       	ldi	r24, 0x65	; 101
    2dda:	91 e2       	ldi	r25, 0x21	; 33
    2ddc:	d3 01       	movw	r26, r6
    2dde:	8d 93       	st	X+, r24
    2de0:	9c 93       	st	X, r25
							break;
    2de2:	ca c0       	rjmp	.+404    	; 0x2f78 <_ZN9task_user3runEv+0xc46>
							
						case ('s'):
							*p_serial << PMS ("Sensor delay set to:") << endl;
    2de4:	6a e0       	ldi	r22, 0x0A	; 10
    2de6:	ed 81       	ldd	r30, Y+5	; 0x05
    2de8:	fe 81       	ldd	r31, Y+6	; 0x06
    2dea:	86 81       	ldd	r24, Z+6	; 0x06
    2dec:	97 81       	ldd	r25, Z+7	; 0x07
    2dee:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2df2:	6c 01       	movw	r12, r24
    2df4:	69 ea       	ldi	r22, 0xA9	; 169
    2df6:	78 e0       	ldi	r23, 0x08	; 8
    2df8:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2dfc:	66 e0       	ldi	r22, 0x06	; 6
    2dfe:	c6 01       	movw	r24, r12
    2e00:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    2e04:	d8 01       	movw	r26, r16
    2e06:	1c 92       	st	X, r1
							data_config = &sensor_delay;
    2e08:	89 e6       	ldi	r24, 0x69	; 105
    2e0a:	91 e2       	ldi	r25, 0x21	; 33
    2e0c:	f3 01       	movw	r30, r6
    2e0e:	80 83       	st	Z, r24
    2e10:	91 83       	std	Z+1, r25	; 0x01
							break;
    2e12:	b2 c0       	rjmp	.+356    	; 0x2f78 <_ZN9task_user3runEv+0xc46>
							
						case ('n'):
							*p_serial << PMS ("Sensor sample size set to:") << endl;
    2e14:	6a e0       	ldi	r22, 0x0A	; 10
    2e16:	ad 81       	ldd	r26, Y+5	; 0x05
    2e18:	be 81       	ldd	r27, Y+6	; 0x06
    2e1a:	16 96       	adiw	r26, 0x06	; 6
    2e1c:	8d 91       	ld	r24, X+
    2e1e:	9c 91       	ld	r25, X
    2e20:	17 97       	sbiw	r26, 0x07	; 7
    2e22:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2e26:	6c 01       	movw	r12, r24
    2e28:	6e e8       	ldi	r22, 0x8E	; 142
    2e2a:	78 e0       	ldi	r23, 0x08	; 8
    2e2c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2e30:	66 e0       	ldi	r22, 0x06	; 6
    2e32:	c6 01       	movw	r24, r12
    2e34:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    2e38:	f8 01       	movw	r30, r16
    2e3a:	10 82       	st	Z, r1
							data_config = &sensor_sample_number;
    2e3c:	8e e6       	ldi	r24, 0x6E	; 110
    2e3e:	91 e2       	ldi	r25, 0x21	; 33
    2e40:	d3 01       	movw	r26, r6
    2e42:	8d 93       	st	X+, r24
    2e44:	9c 93       	st	X, r25
							break;
    2e46:	98 c0       	rjmp	.+304    	; 0x2f78 <_ZN9task_user3runEv+0xc46>
							
						case('0'):
						
						*p_serial << char_in;
    2e48:	ed 81       	ldd	r30, Y+5	; 0x05
    2e4a:	fe 81       	ldd	r31, Y+6	; 0x06
    2e4c:	86 81       	ldd	r24, Z+6	; 0x06
    2e4e:	97 81       	ldd	r25, Z+7	; 0x07
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    2e50:	dc 01       	movw	r26, r24
    2e52:	ed 91       	ld	r30, X+
    2e54:	fc 91       	ld	r31, X
    2e56:	02 80       	ldd	r0, Z+2	; 0x02
    2e58:	f3 81       	ldd	r31, Z+3	; 0x03
    2e5a:	e0 2d       	mov	r30, r0
    2e5c:	19 95       	eicall
    2e5e:	8c c0       	rjmp	.+280    	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('1'):
						
						*p_serial << char_in;
    2e60:	ed 81       	ldd	r30, Y+5	; 0x05
    2e62:	fe 81       	ldd	r31, Y+6	; 0x06
    2e64:	86 81       	ldd	r24, Z+6	; 0x06
    2e66:	97 81       	ldd	r25, Z+7	; 0x07
    2e68:	dc 01       	movw	r26, r24
    2e6a:	ed 91       	ld	r30, X+
    2e6c:	fc 91       	ld	r31, X
    2e6e:	02 80       	ldd	r0, Z+2	; 0x02
    2e70:	f3 81       	ldd	r31, Z+3	; 0x03
    2e72:	e0 2d       	mov	r30, r0
    2e74:	19 95       	eicall
    2e76:	80 c0       	rjmp	.+256    	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('2'):
						
						*p_serial << char_in;
    2e78:	ed 81       	ldd	r30, Y+5	; 0x05
    2e7a:	fe 81       	ldd	r31, Y+6	; 0x06
    2e7c:	86 81       	ldd	r24, Z+6	; 0x06
    2e7e:	97 81       	ldd	r25, Z+7	; 0x07
    2e80:	dc 01       	movw	r26, r24
    2e82:	ed 91       	ld	r30, X+
    2e84:	fc 91       	ld	r31, X
    2e86:	02 80       	ldd	r0, Z+2	; 0x02
    2e88:	f3 81       	ldd	r31, Z+3	; 0x03
    2e8a:	e0 2d       	mov	r30, r0
    2e8c:	19 95       	eicall
    2e8e:	74 c0       	rjmp	.+232    	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('3'):
						
						*p_serial << char_in;
    2e90:	ed 81       	ldd	r30, Y+5	; 0x05
    2e92:	fe 81       	ldd	r31, Y+6	; 0x06
    2e94:	86 81       	ldd	r24, Z+6	; 0x06
    2e96:	97 81       	ldd	r25, Z+7	; 0x07
    2e98:	dc 01       	movw	r26, r24
    2e9a:	ed 91       	ld	r30, X+
    2e9c:	fc 91       	ld	r31, X
    2e9e:	02 80       	ldd	r0, Z+2	; 0x02
    2ea0:	f3 81       	ldd	r31, Z+3	; 0x03
    2ea2:	e0 2d       	mov	r30, r0
    2ea4:	19 95       	eicall
    2ea6:	68 c0       	rjmp	.+208    	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('4'):
						
						*p_serial << char_in;
    2ea8:	ed 81       	ldd	r30, Y+5	; 0x05
    2eaa:	fe 81       	ldd	r31, Y+6	; 0x06
    2eac:	86 81       	ldd	r24, Z+6	; 0x06
    2eae:	97 81       	ldd	r25, Z+7	; 0x07
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	ed 91       	ld	r30, X+
    2eb4:	fc 91       	ld	r31, X
    2eb6:	02 80       	ldd	r0, Z+2	; 0x02
    2eb8:	f3 81       	ldd	r31, Z+3	; 0x03
    2eba:	e0 2d       	mov	r30, r0
    2ebc:	19 95       	eicall
    2ebe:	5c c0       	rjmp	.+184    	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('5'):
						
						*p_serial << char_in;
    2ec0:	ed 81       	ldd	r30, Y+5	; 0x05
    2ec2:	fe 81       	ldd	r31, Y+6	; 0x06
    2ec4:	86 81       	ldd	r24, Z+6	; 0x06
    2ec6:	97 81       	ldd	r25, Z+7	; 0x07
    2ec8:	dc 01       	movw	r26, r24
    2eca:	ed 91       	ld	r30, X+
    2ecc:	fc 91       	ld	r31, X
    2ece:	02 80       	ldd	r0, Z+2	; 0x02
    2ed0:	f3 81       	ldd	r31, Z+3	; 0x03
    2ed2:	e0 2d       	mov	r30, r0
    2ed4:	19 95       	eicall
    2ed6:	50 c0       	rjmp	.+160    	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('6'):
						
						*p_serial << char_in;
    2ed8:	ed 81       	ldd	r30, Y+5	; 0x05
    2eda:	fe 81       	ldd	r31, Y+6	; 0x06
    2edc:	86 81       	ldd	r24, Z+6	; 0x06
    2ede:	97 81       	ldd	r25, Z+7	; 0x07
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	ed 91       	ld	r30, X+
    2ee4:	fc 91       	ld	r31, X
    2ee6:	02 80       	ldd	r0, Z+2	; 0x02
    2ee8:	f3 81       	ldd	r31, Z+3	; 0x03
    2eea:	e0 2d       	mov	r30, r0
    2eec:	19 95       	eicall
    2eee:	44 c0       	rjmp	.+136    	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('7'):
						
						*p_serial << char_in;
    2ef0:	ed 81       	ldd	r30, Y+5	; 0x05
    2ef2:	fe 81       	ldd	r31, Y+6	; 0x06
    2ef4:	86 81       	ldd	r24, Z+6	; 0x06
    2ef6:	97 81       	ldd	r25, Z+7	; 0x07
    2ef8:	dc 01       	movw	r26, r24
    2efa:	ed 91       	ld	r30, X+
    2efc:	fc 91       	ld	r31, X
    2efe:	02 80       	ldd	r0, Z+2	; 0x02
    2f00:	f3 81       	ldd	r31, Z+3	; 0x03
    2f02:	e0 2d       	mov	r30, r0
    2f04:	19 95       	eicall
    2f06:	38 c0       	rjmp	.+112    	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('8'):
						
						*p_serial << char_in;
    2f08:	ed 81       	ldd	r30, Y+5	; 0x05
    2f0a:	fe 81       	ldd	r31, Y+6	; 0x06
    2f0c:	86 81       	ldd	r24, Z+6	; 0x06
    2f0e:	97 81       	ldd	r25, Z+7	; 0x07
    2f10:	dc 01       	movw	r26, r24
    2f12:	ed 91       	ld	r30, X+
    2f14:	fc 91       	ld	r31, X
    2f16:	02 80       	ldd	r0, Z+2	; 0x02
    2f18:	f3 81       	ldd	r31, Z+3	; 0x03
    2f1a:	e0 2d       	mov	r30, r0
    2f1c:	19 95       	eicall
    2f1e:	2c c0       	rjmp	.+88     	; 0x2f78 <_ZN9task_user3runEv+0xc46>
						break;

						case('9'):
						
						*p_serial << char_in;
    2f20:	ed 81       	ldd	r30, Y+5	; 0x05
    2f22:	fe 81       	ldd	r31, Y+6	; 0x06
    2f24:	86 81       	ldd	r24, Z+6	; 0x06
    2f26:	97 81       	ldd	r25, Z+7	; 0x07
    2f28:	dc 01       	movw	r26, r24
    2f2a:	ed 91       	ld	r30, X+
    2f2c:	fc 91       	ld	r31, X
    2f2e:	02 80       	ldd	r0, Z+2	; 0x02
    2f30:	f3 81       	ldd	r31, Z+3	; 0x03
    2f32:	e0 2d       	mov	r30, r0
    2f34:	19 95       	eicall
    2f36:	20 c0       	rjmp	.+64     	; 0x2f78 <_ZN9task_user3runEv+0xc46>
    2f38:	a9 83       	std	Y+1, r26	; 0x01
    2f3a:	ba 83       	std	Y+2, r27	; 0x02
				break;

			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// We should never get to the default state. If we do, complain and restart
			default:
				*p_serial << PMS ("Illegal state! Resetting AVR") << endl;
    2f3c:	6a e0       	ldi	r22, 0x0A	; 10
    2f3e:	fd 01       	movw	r30, r26
    2f40:	86 81       	ldd	r24, Z+6	; 0x06
    2f42:	97 81       	ldd	r25, Z+7	; 0x07
    2f44:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    2f48:	89 83       	std	Y+1, r24	; 0x01
    2f4a:	9a 83       	std	Y+2, r25	; 0x02
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    2f4c:	61 e7       	ldi	r22, 0x71	; 113
    2f4e:	78 e0       	ldi	r23, 0x08	; 8
    2f50:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    2f54:	66 e0       	ldi	r22, 0x06	; 6
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
    2f58:	9a 81       	ldd	r25, Y+2	; 0x02
    2f5a:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
				wdt_enable (WDTO_120MS);
    2f5e:	93 e0       	ldi	r25, 0x03	; 3
    2f60:	88 ed       	ldi	r24, 0xD8	; 216
    2f62:	08 b6       	in	r0, 0x38	; 56
    2f64:	18 be       	out	0x38, r1	; 56
    2f66:	84 bf       	out	0x34, r24	; 52
    2f68:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2f6c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    2f70:	81 fd       	sbrc	r24, 1
    2f72:	fc cf       	rjmp	.-8      	; 0x2f6c <_ZN9task_user3runEv+0xc3a>
    2f74:	08 be       	out	0x38, r0	; 56
    2f76:	ff cf       	rjmp	.-2      	; 0x2f76 <_ZN9task_user3runEv+0xc44>
				for (;;);
				break;

		} // End switch state

		runs++;                             // Increment counter for debugging
    2f78:	ed 81       	ldd	r30, Y+5	; 0x05
    2f7a:	fe 81       	ldd	r31, Y+6	; 0x06
    2f7c:	86 85       	ldd	r24, Z+14	; 0x0e
    2f7e:	97 85       	ldd	r25, Z+15	; 0x0f
    2f80:	a0 89       	ldd	r26, Z+16	; 0x10
    2f82:	b1 89       	ldd	r27, Z+17	; 0x11
    2f84:	01 96       	adiw	r24, 0x01	; 1
    2f86:	a1 1d       	adc	r26, r1
    2f88:	b1 1d       	adc	r27, r1
    2f8a:	86 87       	std	Z+14, r24	; 0x0e
    2f8c:	97 87       	std	Z+15, r25	; 0x0f
    2f8e:	a0 8b       	std	Z+16, r26	; 0x10
    2f90:	b1 8b       	std	Z+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (1));
    2f92:	61 e0       	ldi	r22, 0x01	; 1
    2f94:	70 e0       	ldi	r23, 0x00	; 0
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <vTaskDelay>

	//print_main_menu();

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    2f9e:	fb c9       	rjmp	.-3082   	; 0x2396 <_ZN9task_user3runEv+0x64>

00002fa0 <_ZN10FakeDM542T7motorOnEv>:
		 */
		virtual bool ISR_butt_in (const data_type& item)
		{
			(void) item;                    // This just shuts up a compiler warning
			return (false);
		}
    2fa0:	80 55       	subi	r24, 0x50	; 80
    2fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa4:	21 e0       	ldi	r18, 0x01	; 1
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	20 83       	st	Z, r18
    2faa:	08 95       	ret

00002fac <_ZN10FakeDM542T7motorCWEv>:
    2fac:	8f 54       	subi	r24, 0x4F	; 79
    2fae:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb0:	21 e0       	ldi	r18, 0x01	; 1
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	20 83       	st	Z, r18
    2fb6:	08 95       	ret

00002fb8 <_ZN10FakeDM542T8motorCCWEv>:
    2fb8:	8f 54       	subi	r24, 0x4F	; 79
    2fba:	9f 4f       	sbci	r25, 0xFF	; 255
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	10 82       	st	Z, r1
    2fc0:	08 95       	ret

00002fc2 <_ZN10FakeDM542T8motorOffEv>:
    2fc2:	80 55       	subi	r24, 0x50	; 80
    2fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	10 82       	st	Z, r1
    2fca:	08 95       	ret

00002fcc <_ZN10FakeDM542T9disableCWEv>:
    2fcc:	08 95       	ret

00002fce <_ZN10FakeDM542T10disableCCWEv>:
    2fce:	08 95       	ret

00002fd0 <_ZN10FakeDM542T11free_motionEv>:
    2fd0:	08 95       	ret

00002fd2 <_ZN10FakeDM542T13get_directionEv>:
    2fd2:	8f 54       	subi	r24, 0x4F	; 79
    2fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd6:	fc 01       	movw	r30, r24
    2fd8:	80 81       	ld	r24, Z
    2fda:	08 95       	ret

00002fdc <_ZN10FakeDM542T9take_stepEv>:
    2fdc:	08 95       	ret

00002fde <_ZN10FakeDM542T14set_signal_lowEv>:
    2fde:	08 95       	ret

00002fe0 <_ZN10FakeDM542T10get_statusEv>:
    2fe0:	80 55       	subi	r24, 0x50	; 80
    2fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	80 81       	ld	r24, Z
    2fe8:	08 95       	ret

00002fea <_ZN9frt_queueImE16ISR_num_items_inEv>:
		 *  called only from within an interrupt service routine.
		 *  @return The number of items in the queue
		 */
		size_t ISR_num_items_in (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle));
    2fea:	fc 01       	movw	r30, r24
    2fec:	84 81       	ldd	r24, Z+4	; 0x04
    2fee:	95 81       	ldd	r25, Z+5	; 0x05
    2ff0:	0e 94 30 24 	call	0x4860	; 0x4860 <uxQueueMessagesWaitingFromISR>
		}
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	08 95       	ret

00002ff8 <_ZN9frt_queueImE13ISR_not_emptyEv>:
		 *  an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool ISR_not_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) != 0);
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	84 81       	ldd	r24, Z+4	; 0x04
    2ffc:	95 81       	ldd	r25, Z+5	; 0x05
    2ffe:	0e 94 30 24 	call	0x4860	; 0x4860 <uxQueueMessagesWaitingFromISR>
    3002:	91 e0       	ldi	r25, 0x01	; 1
    3004:	81 11       	cpse	r24, r1
    3006:	01 c0       	rjmp	.+2      	; 0x300a <_ZN9frt_queueImE13ISR_not_emptyEv+0x12>
    3008:	90 e0       	ldi	r25, 0x00	; 0
		}
    300a:	89 2f       	mov	r24, r25
    300c:	08 95       	ret

0000300e <_ZN9frt_queueImE12ISR_is_emptyEv>:
		 *  routine. It must not be used in normal non-ISR code. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool ISR_is_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) == 0);
    300e:	fc 01       	movw	r30, r24
    3010:	84 81       	ldd	r24, Z+4	; 0x04
    3012:	95 81       	ldd	r25, Z+5	; 0x05
    3014:	0e 94 30 24 	call	0x4860	; 0x4860 <uxQueueMessagesWaitingFromISR>
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	81 11       	cpse	r24, r1
    301c:	90 e0       	ldi	r25, 0x00	; 0
		}
    301e:	89 2f       	mov	r24, r25
    3020:	08 95       	ret

00003022 <_ZN9frt_queueImE12num_items_inEv>:
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    3022:	fc 01       	movw	r30, r24
    3024:	84 81       	ldd	r24, Z+4	; 0x04
    3026:	95 81       	ldd	r25, Z+5	; 0x05
    3028:	0e 94 28 24 	call	0x4850	; 0x4850 <uxQueueMessagesWaiting>
		}
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	08 95       	ret

00003030 <_ZN9frt_queueImE9not_emptyEv>:
		 *  \b not be called from within an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool not_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) != 0);
    3030:	fc 01       	movw	r30, r24
    3032:	84 81       	ldd	r24, Z+4	; 0x04
    3034:	95 81       	ldd	r25, Z+5	; 0x05
    3036:	0e 94 28 24 	call	0x4850	; 0x4850 <uxQueueMessagesWaiting>
    303a:	91 e0       	ldi	r25, 0x01	; 1
    303c:	81 11       	cpse	r24, r1
    303e:	01 c0       	rjmp	.+2      	; 0x3042 <_ZN9frt_queueImE9not_emptyEv+0x12>
    3040:	90 e0       	ldi	r25, 0x00	; 0
		}
    3042:	89 2f       	mov	r24, r25
    3044:	08 95       	ret

00003046 <_ZN9frt_queueImE8is_emptyEv>:
		/** This method checks if the queue is empty. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool is_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) == 0);
    3046:	fc 01       	movw	r30, r24
    3048:	84 81       	ldd	r24, Z+4	; 0x04
    304a:	95 81       	ldd	r25, Z+5	; 0x05
    304c:	0e 94 28 24 	call	0x4850	; 0x4850 <uxQueueMessagesWaiting>
    3050:	91 e0       	ldi	r25, 0x01	; 1
    3052:	81 11       	cpse	r24, r1
    3054:	90 e0       	ldi	r25, 0x00	; 0
		}
    3056:	89 2f       	mov	r24, r25
    3058:	08 95       	ret

0000305a <_ZN9frt_queueImE10get_a_copyERm>:
 *  \c xQueuePeekFromISR() which would allow copying items from a queue in an ISR. 
 *  @param item A reference to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get_a_copy (data_type& item)
    305a:	0f 93       	push	r16
{
	xQueuePeek (handle, &item, portMAX_DELAY);
    305c:	01 e0       	ldi	r16, 0x01	; 1
    305e:	2f ef       	ldi	r18, 0xFF	; 255
    3060:	3f ef       	ldi	r19, 0xFF	; 255
    3062:	a9 01       	movw	r20, r18
    3064:	fc 01       	movw	r30, r24
    3066:	84 81       	ldd	r24, Z+4	; 0x04
    3068:	95 81       	ldd	r25, Z+5	; 0x05
    306a:	0e 94 37 23 	call	0x466e	; 0x466e <xQueueGenericReceive>
}
    306e:	0f 91       	pop	r16
    3070:	08 95       	ret

00003072 <_ZN9frt_queueImE10get_a_copyEv>:
 *          data type if we couldn't get any data from the queue and the attempt
 *          timed out
 */

template <class data_type>
inline data_type frt_queue<data_type>::get_a_copy (void)
    3072:	0f 93       	push	r16
    3074:	cf 93       	push	r28
    3076:	df 93       	push	r29
    3078:	00 d0       	rcall	.+0      	; 0x307a <_ZN9frt_queueImE10get_a_copyEv+0x8>
    307a:	1f 92       	push	r1
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueuePeek (handle, &recv_item, portMAX_DELAY);
    3080:	01 e0       	ldi	r16, 0x01	; 1
    3082:	2f ef       	ldi	r18, 0xFF	; 255
    3084:	3f ef       	ldi	r19, 0xFF	; 255
    3086:	a9 01       	movw	r20, r18
    3088:	be 01       	movw	r22, r28
    308a:	6f 5f       	subi	r22, 0xFF	; 255
    308c:	7f 4f       	sbci	r23, 0xFF	; 255
    308e:	fc 01       	movw	r30, r24
    3090:	84 81       	ldd	r24, Z+4	; 0x04
    3092:	95 81       	ldd	r25, Z+5	; 0x05
    3094:	0e 94 37 23 	call	0x466e	; 0x466e <xQueueGenericReceive>
	return (recv_item);
    3098:	69 81       	ldd	r22, Y+1	; 0x01
    309a:	7a 81       	ldd	r23, Y+2	; 0x02
    309c:	8b 81       	ldd	r24, Y+3	; 0x03
    309e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    30a0:	24 96       	adiw	r28, 0x04	; 4
    30a2:	cd bf       	out	0x3d, r28	; 61
    30a4:	de bf       	out	0x3e, r29	; 62
    30a6:	df 91       	pop	r29
    30a8:	cf 91       	pop	r28
    30aa:	0f 91       	pop	r16
    30ac:	08 95       	ret

000030ae <_ZN9frt_queueImE3getEPm>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get (data_type* p_item)
    30ae:	0f 93       	push	r16
{
	xQueueReceive (handle, p_item, portMAX_DELAY);
    30b0:	00 e0       	ldi	r16, 0x00	; 0
    30b2:	2f ef       	ldi	r18, 0xFF	; 255
    30b4:	3f ef       	ldi	r19, 0xFF	; 255
    30b6:	a9 01       	movw	r20, r18
    30b8:	fc 01       	movw	r30, r24
    30ba:	84 81       	ldd	r24, Z+4	; 0x04
    30bc:	95 81       	ldd	r25, Z+5	; 0x05
    30be:	0e 94 37 23 	call	0x466e	; 0x466e <xQueueGenericReceive>
}
    30c2:	0f 91       	pop	r16
    30c4:	08 95       	ret

000030c6 <_ZN9frt_queueImE3getEv>:
 *  up. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::get (void)
    30c6:	0f 93       	push	r16
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29
    30cc:	00 d0       	rcall	.+0      	; 0x30ce <_ZN9frt_queueImE3getEv+0x8>
    30ce:	1f 92       	push	r1
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceive (handle, &recv_item, portMAX_DELAY);
    30d4:	00 e0       	ldi	r16, 0x00	; 0
    30d6:	2f ef       	ldi	r18, 0xFF	; 255
    30d8:	3f ef       	ldi	r19, 0xFF	; 255
    30da:	a9 01       	movw	r20, r18
    30dc:	be 01       	movw	r22, r28
    30de:	6f 5f       	subi	r22, 0xFF	; 255
    30e0:	7f 4f       	sbci	r23, 0xFF	; 255
    30e2:	fc 01       	movw	r30, r24
    30e4:	84 81       	ldd	r24, Z+4	; 0x04
    30e6:	95 81       	ldd	r25, Z+5	; 0x05
    30e8:	0e 94 37 23 	call	0x466e	; 0x466e <xQueueGenericReceive>
	return (recv_item);
    30ec:	69 81       	ldd	r22, Y+1	; 0x01
    30ee:	7a 81       	ldd	r23, Y+2	; 0x02
    30f0:	8b 81       	ldd	r24, Y+3	; 0x03
    30f2:	9c 81       	ldd	r25, Y+4	; 0x04
}
    30f4:	24 96       	adiw	r28, 0x04	; 4
    30f6:	cd bf       	out	0x3d, r28	; 61
    30f8:	de bf       	out	0x3e, r29	; 62
    30fa:	df 91       	pop	r29
    30fc:	cf 91       	pop	r28
    30fe:	0f 91       	pop	r16
    3100:	08 95       	ret

00003102 <_ZN9frt_queueImE7ISR_getEPm>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::ISR_get (data_type* p_item)
    3102:	cf 93       	push	r28
    3104:	df 93       	push	r29
    3106:	1f 92       	push	r1
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
{
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, and
	// nothing will actually be copied
	xQueueReceiveFromISR (handle, p_item, &task_awakened);
    310c:	ae 01       	movw	r20, r28
    310e:	4f 5f       	subi	r20, 0xFF	; 255
    3110:	5f 4f       	sbci	r21, 0xFF	; 255
    3112:	fc 01       	movw	r30, r24
    3114:	84 81       	ldd	r24, Z+4	; 0x04
    3116:	95 81       	ldd	r25, Z+5	; 0x05
    3118:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <xQueueReceiveFromISR>
}
    311c:	0f 90       	pop	r0
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	08 95       	ret

00003124 <_ZN9frt_queueImE7ISR_getEv>:
 *  service routine. This method must not be called from within normal non-ISR code. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::ISR_get (void)
    3124:	cf 93       	push	r28
    3126:	df 93       	push	r29
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
    312c:	25 97       	sbiw	r28, 0x05	; 5
    312e:	cd bf       	out	0x3d, r28	; 61
    3130:	de bf       	out	0x3e, r29	; 62
	data_type recv_item;                    // Data item read from the queue
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceiveFromISR (handle, &recv_item, &task_awakened);
    3132:	ae 01       	movw	r20, r28
    3134:	4b 5f       	subi	r20, 0xFB	; 251
    3136:	5f 4f       	sbci	r21, 0xFF	; 255
    3138:	be 01       	movw	r22, r28
    313a:	6f 5f       	subi	r22, 0xFF	; 255
    313c:	7f 4f       	sbci	r23, 0xFF	; 255
    313e:	fc 01       	movw	r30, r24
    3140:	84 81       	ldd	r24, Z+4	; 0x04
    3142:	95 81       	ldd	r25, Z+5	; 0x05
    3144:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <xQueueReceiveFromISR>
	return (recv_item);
    3148:	69 81       	ldd	r22, Y+1	; 0x01
    314a:	7a 81       	ldd	r23, Y+2	; 0x02
    314c:	8b 81       	ldd	r24, Y+3	; 0x03
    314e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3150:	25 96       	adiw	r28, 0x05	; 5
    3152:	cd bf       	out	0x3d, r28	; 61
    3154:	de bf       	out	0x3e, r29	; 62
    3156:	df 91       	pop	r29
    3158:	cf 91       	pop	r28
    315a:	08 95       	ret

0000315c <_ZN9frt_queueImE11ISR_butt_inERKm>:
 *              the front of the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
bool frt_queue<data_type>::ISR_butt_in (const data_type& item)
    315c:	cf 93       	push	r28
    315e:	df 93       	push	r29
    3160:	1f 92       	push	r1
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    3166:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;                      // Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToFrontFromISR (handle, &item, &shouldSwitch));
    3168:	21 e0       	ldi	r18, 0x01	; 1
    316a:	ae 01       	movw	r20, r28
    316c:	4f 5f       	subi	r20, 0xFF	; 255
    316e:	5f 4f       	sbci	r21, 0xFF	; 255
    3170:	fc 01       	movw	r30, r24
    3172:	84 81       	ldd	r24, Z+4	; 0x04
    3174:	95 81       	ldd	r25, Z+5	; 0x05
    3176:	0e 94 0b 23 	call	0x4616	; 0x4616 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    317a:	91 e0       	ldi	r25, 0x01	; 1
    317c:	81 11       	cpse	r24, r1
    317e:	01 c0       	rjmp	.+2      	; 0x3182 <_ZN9frt_queueImE11ISR_butt_inERKm+0x26>
    3180:	90 e0       	ldi	r25, 0x00	; 0
}
    3182:	89 2f       	mov	r24, r25
    3184:	0f 90       	pop	r0
    3186:	df 91       	pop	r29
    3188:	cf 91       	pop	r28
    318a:	08 95       	ret

0000318c <_ZN9frt_queueImE7ISR_putERKm>:
 *  @param item Reference to the item which is going to be put into the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
inline bool frt_queue<data_type>::ISR_put (const data_type& item)
    318c:	cf 93       	push	r28
    318e:	df 93       	push	r29
    3190:	1f 92       	push	r1
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    3196:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;						// Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToBackFromISR (handle, &item, &shouldSwitch));
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	ae 01       	movw	r20, r28
    319c:	4f 5f       	subi	r20, 0xFF	; 255
    319e:	5f 4f       	sbci	r21, 0xFF	; 255
    31a0:	fc 01       	movw	r30, r24
    31a2:	84 81       	ldd	r24, Z+4	; 0x04
    31a4:	95 81       	ldd	r25, Z+5	; 0x05
    31a6:	0e 94 0b 23 	call	0x4616	; 0x4616 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    31aa:	91 e0       	ldi	r25, 0x01	; 1
    31ac:	81 11       	cpse	r24, r1
    31ae:	01 c0       	rjmp	.+2      	; 0x31b2 <_ZN9frt_queueImE7ISR_putERKm+0x26>
    31b0:	90 e0       	ldi	r25, 0x00	; 0
}
    31b2:	89 2f       	mov	r24, r25
    31b4:	0f 90       	pop	r0
    31b6:	df 91       	pop	r29
    31b8:	cf 91       	pop	r28
    31ba:	08 95       	ret

000031bc <_ZN9frt_queueImE7butt_inERKm>:
		 *  \b not be used within an interrupt service routine. 
		 *  @param item Reference to the item which is going to be (rudely) put into 
		 *              the front of the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool butt_in (const data_type& item)
    31bc:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToFront (handle, &item, ticks_to_wait)));
    31be:	fc 01       	movw	r30, r24
    31c0:	26 81       	ldd	r18, Z+6	; 0x06
    31c2:	37 81       	ldd	r19, Z+7	; 0x07
    31c4:	40 85       	ldd	r20, Z+8	; 0x08
    31c6:	51 85       	ldd	r21, Z+9	; 0x09
    31c8:	01 e0       	ldi	r16, 0x01	; 1
    31ca:	84 81       	ldd	r24, Z+4	; 0x04
    31cc:	95 81       	ldd	r25, Z+5	; 0x05
    31ce:	0e 94 70 22 	call	0x44e0	; 0x44e0 <xQueueGenericSend>
    31d2:	91 e0       	ldi	r25, 0x01	; 1
    31d4:	81 11       	cpse	r24, r1
    31d6:	01 c0       	rjmp	.+2      	; 0x31da <_ZN9frt_queueImE7butt_inERKm+0x1e>
    31d8:	90 e0       	ldi	r25, 0x00	; 0
		}
    31da:	89 2f       	mov	r24, r25
    31dc:	0f 91       	pop	r16
    31de:	08 95       	ret

000031e0 <_ZN9frt_queueImE3putERKm>:
		 *  an item into the front of the queue so it will be retreived first, use 
		 *  \c butt_in() instead. This method must \b not be used within an ISR.
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
    31e0:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
    31e2:	fc 01       	movw	r30, r24
    31e4:	26 81       	ldd	r18, Z+6	; 0x06
    31e6:	37 81       	ldd	r19, Z+7	; 0x07
    31e8:	40 85       	ldd	r20, Z+8	; 0x08
    31ea:	51 85       	ldd	r21, Z+9	; 0x09
    31ec:	00 e0       	ldi	r16, 0x00	; 0
    31ee:	84 81       	ldd	r24, Z+4	; 0x04
    31f0:	95 81       	ldd	r25, Z+5	; 0x05
    31f2:	0e 94 70 22 	call	0x44e0	; 0x44e0 <xQueueGenericSend>
    31f6:	91 e0       	ldi	r25, 0x01	; 1
    31f8:	81 11       	cpse	r24, r1
    31fa:	01 c0       	rjmp	.+2      	; 0x31fe <_ZN9frt_queueImE3putERKm+0x1e>
    31fc:	90 e0       	ldi	r25, 0x00	; 0
		}
    31fe:	89 2f       	mov	r24, r25
    3200:	0f 91       	pop	r16
    3202:	08 95       	ret

00003204 <_ZN10FakeDM542TC1Ej>:
  
  public:
  
  // (Timer* timer, PORT_t* logic_port, uint8_t ena_bm, uint8_t dir_bm, uint8_t microstep_scaler);
  
  FakeDM542T ( uint16_t microstep_scaler )
    3204:	cf 93       	push	r28
    3206:	df 93       	push	r29
    3208:	ec 01       	movw	r28, r24
  public:
  
  // (Timer* timer, PORT_t* logic_port, uint8_t ena_bm, uint8_t dir_bm, uint8_t microstep_scaler);
  
  DM542T ( uint16_t microstep_scaler )
    : VelocityControl( microstep_scaler ) 
    320a:	4e 96       	adiw	r24, 0x1e	; 30
    320c:	0e 94 84 08 	call	0x1108	; 0x1108 <_ZN6Motion15VelocityControlC1Ej>
    3210:	fe 01       	movw	r30, r28
    3212:	e5 58       	subi	r30, 0x85	; 133
    3214:	ff 4f       	sbci	r31, 0xFF	; 255
    3216:	10 82       	st	Z, r1
    3218:	11 82       	std	Z+1, r1	; 0x01
    321a:	12 82       	std	Z+2, r1	; 0x02
    321c:	13 82       	std	Z+3, r1	; 0x03
    321e:	34 96       	adiw	r30, 0x04	; 4
    3220:	10 82       	st	Z, r1
    3222:	11 82       	std	Z+1, r1	; 0x01
    3224:	12 82       	std	Z+2, r1	; 0x02
    3226:	13 82       	std	Z+3, r1	; 0x03
    3228:	34 96       	adiw	r30, 0x04	; 4
    322a:	10 82       	st	Z, r1
    322c:	11 82       	std	Z+1, r1	; 0x01
    322e:	12 82       	std	Z+2, r1	; 0x02
    3230:	13 82       	std	Z+3, r1	; 0x03
    3232:	34 96       	adiw	r30, 0x04	; 4
    3234:	10 82       	st	Z, r1
    3236:	11 82       	std	Z+1, r1	; 0x01
    3238:	12 82       	std	Z+2, r1	; 0x02
    323a:	13 82       	std	Z+3, r1	; 0x03
    323c:	34 96       	adiw	r30, 0x04	; 4
    323e:	10 82       	st	Z, r1
    3240:	11 82       	std	Z+1, r1	; 0x01
    3242:	12 82       	std	Z+2, r1	; 0x02
    3244:	13 82       	std	Z+3, r1	; 0x03
    : DM542T( microstep_scaler ) 
    3246:	83 e7       	ldi	r24, 0x73	; 115
    3248:	90 e2       	ldi	r25, 0x20	; 32
    324a:	88 83       	st	Y, r24
    324c:	99 83       	std	Y+1, r25	; 0x01
    324e:	b9 96       	adiw	r30, 0x29	; 41
    3250:	10 82       	st	Z, r1
    3252:	11 82       	std	Z+1, r1	; 0x01
    3254:	12 82       	std	Z+2, r1	; 0x02
    3256:	13 82       	std	Z+3, r1	; 0x03
    3258:	34 96       	adiw	r30, 0x04	; 4
    325a:	10 82       	st	Z, r1
    325c:	11 82       	std	Z+1, r1	; 0x01
    325e:	12 82       	std	Z+2, r1	; 0x02
    3260:	13 82       	std	Z+3, r1	; 0x03
    3262:	34 96       	adiw	r30, 0x04	; 4
    3264:	10 82       	st	Z, r1
    3266:	11 82       	std	Z+1, r1	; 0x01
    3268:	12 82       	std	Z+2, r1	; 0x02
    326a:	13 82       	std	Z+3, r1	; 0x03
    326c:	34 96       	adiw	r30, 0x04	; 4
    326e:	10 82       	st	Z, r1
    3270:	11 82       	std	Z+1, r1	; 0x01
    3272:	12 82       	std	Z+2, r1	; 0x02
    3274:	13 82       	std	Z+3, r1	; 0x03
    3276:	cc 53       	subi	r28, 0x3C	; 60
    3278:	df 4f       	sbci	r29, 0xFF	; 255
    327a:	18 82       	st	Y, r1
    327c:	19 82       	std	Y+1, r1	; 0x01
    327e:	1a 82       	std	Y+2, r1	; 0x02
    3280:	1b 82       	std	Y+3, r1	; 0x03
    { }
    3282:	df 91       	pop	r29
    3284:	cf 91       	pop	r28
    3286:	08 95       	ret

00003288 <_Z8CCPWritePVhh>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3288:	0f 93       	push	r16
    328a:	cf 93       	push	r28
    328c:	df 93       	push	r29
    328e:	1f 92       	push	r1
    3290:	cd b7       	in	r28, 0x3d	; 61
    3292:	de b7       	in	r29, 0x3e	; 62
  #if defined __GNUC__
  uint8_t volatile saved_sreg = SREG;
    3294:	2f b7       	in	r18, 0x3f	; 63
    3296:	29 83       	std	Y+1, r18	; 0x01
  cli();
    3298:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
  #ifdef RAMPZ
  RAMPZ = 0;
    329a:	1b be       	out	0x3b, r1	; 59
  "out   %3, r16"       "\n\t"
  "st     Z,  %1"       "\n\t"
  :
  : "r" (tmpAddr), "r" (value), "M" (0xD8), "i" (&CCP)
  : "r16", "r30", "r31"
  );
    329c:	fc 01       	movw	r30, r24
    329e:	08 ed       	ldi	r16, 0xD8	; 216
    32a0:	04 bf       	out	0x34, r16	; 52
    32a2:	60 83       	st	Z, r22

  SREG = saved_sreg;
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	8f bf       	out	0x3f, r24	; 63
  #endif
}
    32a8:	0f 90       	pop	r0
    32aa:	df 91       	pop	r29
    32ac:	cf 91       	pop	r28
    32ae:	0f 91       	pop	r16
    32b0:	08 95       	ret

000032b2 <main>:
 *  reset.
 *  @return This is a real-time microcontroller program which doesn't return. Ever.
 */

int main (void)
{
    32b2:	6f 92       	push	r6
    32b4:	7f 92       	push	r7
    32b6:	8f 92       	push	r8
    32b8:	9f 92       	push	r9
    32ba:	af 92       	push	r10
    32bc:	bf 92       	push	r11
    32be:	cf 92       	push	r12
    32c0:	df 92       	push	r13
    32c2:	ef 92       	push	r14
    32c4:	ff 92       	push	r15
    32c6:	0f 93       	push	r16
    32c8:	1f 93       	push	r17
    32ca:	cf 93       	push	r28
    32cc:	df 93       	push	r29
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
    32d2:	6d 97       	sbiw	r28, 0x1d	; 29
    32d4:	cd bf       	out	0x3d, r28	; 61
    32d6:	de bf       	out	0x3e, r29	; 62
  cli();
    32d8:	f8 94       	cli
  // Configure the system clock
  { 
    // Enable the 32MHz internal RC oscillator and the external 32KHz oscillator
    OSC.CTRL |= (1 << OSC_RC32MEN_bp);
    32da:	e0 e5       	ldi	r30, 0x50	; 80
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	80 81       	ld	r24, Z
    32e0:	82 60       	ori	r24, 0x02	; 2
    32e2:	80 83       	st	Z, r24
    do {} while((OSC.STATUS & (1 << OSC_RC32MRDY_bp)) != (1 << OSC_RC32MRDY_bp));
    32e4:	81 81       	ldd	r24, Z+1	; 0x01
    32e6:	81 ff       	sbrs	r24, 1
    32e8:	fd cf       	rjmp	.-6      	; 0x32e4 <main+0x32>

    // Select the clock
    CCPWrite(&(CLK.CTRL),((CLK.CTRL & ~CLK_SCLKSEL_gm) | (1 << CLK_SCLKSEL0_bp)));
    32ea:	60 91 40 00 	lds	r22, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    32ee:	68 7f       	andi	r22, 0xF8	; 248
    32f0:	61 60       	ori	r22, 0x01	; 1
    32f2:	80 e4       	ldi	r24, 0x40	; 64
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	0e 94 44 19 	call	0x3288	; 0x3288 <_Z8CCPWritePVhh>
    
    // Disable the 2MHz internal RC oscillator
    OSC.CTRL &= ~(1 << OSC_RC2MEN_bp);
    32fa:	e0 e5       	ldi	r30, 0x50	; 80
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	80 81       	ld	r24, Z
    3300:	8e 7f       	andi	r24, 0xFE	; 254
    3302:	80 83       	st	Z, r24
  }
  
  // Disable the watchdog timer unless it's needed later. This is important because
  // sometimes the watchdog timer may have been left on...and it tends to stay on  
  wdt_disable ();
    3304:	9d ef       	ldi	r25, 0xFD	; 253
    3306:	88 ed       	ldi	r24, 0xD8	; 216
    3308:	08 b6       	in	r0, 0x38	; 56
    330a:	18 be       	out	0x38, r1	; 56
    330c:	84 bf       	out	0x34, r24	; 52
    330e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3312:	08 be       	out	0x38, r0	; 56

  // Configure a serial port which can be used by a task to print debugging infor-
  // mation, or to allow user interaction, or for whatever use is appropriate.  The
  // serial port will be used by the user interface task after setup is complete and
  // the task scheduler has been started by the function vTaskStartScheduler()
  rs232 ser_dev(0,&USARTE0); // Create a serial device on USART E0
    3314:	40 ea       	ldi	r20, 0xA0	; 160
    3316:	5a e0       	ldi	r21, 0x0A	; 10
    3318:	60 e0       	ldi	r22, 0x00	; 0
    331a:	70 e0       	ldi	r23, 0x00	; 0
    331c:	ce 01       	movw	r24, r28
    331e:	01 96       	adiw	r24, 0x01	; 1
    3320:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <_ZN5rs232C1EjP12USART_struct>
  ser_dev << clrscr << "FreeRTOS Xmega Testing Program" << endl << endl;
    3324:	67 e0       	ldi	r22, 0x07	; 7
    3326:	ce 01       	movw	r24, r28
    3328:	01 96       	adiw	r24, 0x01	; 1
    332a:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    332e:	3c 01       	movw	r6, r24
    3330:	6f e2       	ldi	r22, 0x2F	; 47
    3332:	70 e2       	ldi	r23, 0x20	; 32
    3334:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    3338:	66 e0       	ldi	r22, 0x06	; 6
    333a:	c3 01       	movw	r24, r6
    333c:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    3340:	66 e0       	ldi	r22, 0x06	; 6
    3342:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    3346:	0f b6       	in	r0, 0x3f	; 63
    3348:	f8 94       	cli
    334a:	0f 92       	push	r0
			the_data = new_data;
    334c:	82 e0       	ldi	r24, 0x02	; 2
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	a0 e0       	ldi	r26, 0x00	; 0
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	80 93 69 21 	sts	0x2169, r24	; 0x802169 <sensor_delay>
    3358:	90 93 6a 21 	sts	0x216A, r25	; 0x80216a <sensor_delay+0x1>
    335c:	a0 93 6b 21 	sts	0x216B, r26	; 0x80216b <sensor_delay+0x2>
    3360:	b0 93 6c 21 	sts	0x216C, r27	; 0x80216c <sensor_delay+0x3>
			portEXIT_CRITICAL ();
    3364:	0f 90       	pop	r0
    3366:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    3368:	0f b6       	in	r0, 0x3f	; 63
    336a:	f8 94       	cli
    336c:	0f 92       	push	r0
			the_data = new_data;
    336e:	88 e0       	ldi	r24, 0x08	; 8
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	a0 e0       	ldi	r26, 0x00	; 0
    3374:	b0 e0       	ldi	r27, 0x00	; 0
    3376:	80 93 65 21 	sts	0x2165, r24	; 0x802165 <microstep_scaler>
    337a:	90 93 66 21 	sts	0x2166, r25	; 0x802166 <microstep_scaler+0x1>
    337e:	a0 93 67 21 	sts	0x2167, r26	; 0x802167 <microstep_scaler+0x2>
    3382:	b0 93 68 21 	sts	0x2168, r27	; 0x802168 <microstep_scaler+0x3>
			portEXIT_CRITICAL ();
    3386:	0f 90       	pop	r0
    3388:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    338a:	0f b6       	in	r0, 0x3f	; 63
    338c:	f8 94       	cli
    338e:	0f 92       	push	r0
			the_data = new_data;
    3390:	88 ee       	ldi	r24, 0xE8	; 232
    3392:	93 e0       	ldi	r25, 0x03	; 3
    3394:	a0 e0       	ldi	r26, 0x00	; 0
    3396:	b0 e0       	ldi	r27, 0x00	; 0
    3398:	80 93 6e 21 	sts	0x216E, r24	; 0x80216e <sensor_sample_number>
    339c:	90 93 6f 21 	sts	0x216F, r25	; 0x80216f <sensor_sample_number+0x1>
    33a0:	a0 93 70 21 	sts	0x2170, r26	; 0x802170 <sensor_sample_number+0x2>
    33a4:	b0 93 71 21 	sts	0x2171, r27	; 0x802171 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    33a8:	0f 90       	pop	r0
    33aa:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	0f 92       	push	r0
			the_data = new_data;
    33b2:	82 e3       	ldi	r24, 0x32	; 50
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	a0 e0       	ldi	r26, 0x00	; 0
    33b8:	b0 e0       	ldi	r27, 0x00	; 0
    33ba:	80 93 3f 21 	sts	0x213F, r24	; 0x80213f <ramp_run_span>
    33be:	90 93 40 21 	sts	0x2140, r25	; 0x802140 <ramp_run_span+0x1>
    33c2:	a0 93 41 21 	sts	0x2141, r26	; 0x802141 <ramp_run_span+0x2>
    33c6:	b0 93 42 21 	sts	0x2142, r27	; 0x802142 <ramp_run_span+0x3>
			portEXIT_CRITICAL ();
    33ca:	0f 90       	pop	r0
    33cc:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    33ce:	0f b6       	in	r0, 0x3f	; 63
    33d0:	f8 94       	cli
    33d2:	0f 92       	push	r0
			the_data = new_data;
    33d4:	8c e4       	ldi	r24, 0x4C	; 76
    33d6:	9d e1       	ldi	r25, 0x1D	; 29
    33d8:	a0 e0       	ldi	r26, 0x00	; 0
    33da:	b0 e0       	ldi	r27, 0x00	; 0
    33dc:	80 93 39 21 	sts	0x2139, r24	; 0x802139 <gen_max_v>
    33e0:	90 93 3a 21 	sts	0x213A, r25	; 0x80213a <gen_max_v+0x1>
    33e4:	a0 93 3b 21 	sts	0x213B, r26	; 0x80213b <gen_max_v+0x2>
    33e8:	b0 93 3c 21 	sts	0x213C, r27	; 0x80213c <gen_max_v+0x3>
			portEXIT_CRITICAL ();
    33ec:	0f 90       	pop	r0
    33ee:	0f be       	out	0x3f, r0	; 63
  adc = new ADC(&ADCB, &(ADCB.CH0));
  sbg01 = new SBG01(adc, 6.28930818);
  #endif

  #ifdef USE_FAKE_DRIVERS
  sbg01 = new SBG01 ( ) ;
    33f0:	8a e1       	ldi	r24, 0x1A	; 26
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    33f8:	80 93 37 21 	sts	0x2137, r24	; 0x802137 <sbg01>
    33fc:	90 93 38 21 	sts	0x2138, r25	; 0x802138 <sbg01+0x1>
  md_y = new DM542T ( &PORTA, PIN4_bm, PIN5_bm, 8, &PORTD, &TCD0, PIN3_bm, TC_CCDINTLVL_HI_gc );
  md_z = new DM542T ( &PORTA, PIN6_bm, PIN7_bm, 8, &PORTC, &TCC0, PIN0_bm, TC_CCAINTLVL_HI_gc );
  #endif

  #ifdef USE_FAKE_DRIVERS
  md_x = new FakeDM542T ( 8 ) ;
    3400:	88 ec       	ldi	r24, 0xC8	; 200
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    3408:	3c 01       	movw	r6, r24
    340a:	68 e0       	ldi	r22, 0x08	; 8
    340c:	70 e0       	ldi	r23, 0x00	; 0
    340e:	0e 94 02 19 	call	0x3204	; 0x3204 <_ZN10FakeDM542TC1Ej>
    3412:	60 92 29 21 	sts	0x2129, r6	; 0x802129 <md_x>
    3416:	70 92 2a 21 	sts	0x212A, r7	; 0x80212a <md_x+0x1>
  md_y = new FakeDM542T ( 8 ) ;
    341a:	88 ec       	ldi	r24, 0xC8	; 200
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    3422:	3c 01       	movw	r6, r24
    3424:	68 e0       	ldi	r22, 0x08	; 8
    3426:	70 e0       	ldi	r23, 0x00	; 0
    3428:	0e 94 02 19 	call	0x3204	; 0x3204 <_ZN10FakeDM542TC1Ej>
    342c:	60 92 27 21 	sts	0x2127, r6	; 0x802127 <md_y>
    3430:	70 92 28 21 	sts	0x2128, r7	; 0x802128 <md_y+0x1>
  md_z = new FakeDM542T ( 8 ) ;
    3434:	88 ec       	ldi	r24, 0xC8	; 200
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    343c:	3c 01       	movw	r6, r24
    343e:	68 e0       	ldi	r22, 0x08	; 8
    3440:	70 e0       	ldi	r23, 0x00	; 0
    3442:	0e 94 02 19 	call	0x3204	; 0x3204 <_ZN10FakeDM542TC1Ej>
    3446:	60 92 25 21 	sts	0x2125, r6	; 0x802125 <md_z>
    344a:	70 92 26 21 	sts	0x2126, r7	; 0x802126 <md_z+0x1>
  lim_z1 = new DeviceDriver::LimitSwitch ( &PORTF, PIN1_bm, 0, 0, EVSYS_CHMUX_PORTF_PIN1_gc);
  lim_z2 = new DeviceDriver::LimitSwitch ( &PORTF, PIN2_bm, 0, 1, EVSYS_CHMUX_PORTF_PIN2_gc);
  #endif

  #ifdef USE_FAKE_DRIVERS
  lim_x1 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    344e:	87 e0       	ldi	r24, 0x07	; 7
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    3456:	7c 01       	movw	r14, r24
    3458:	83 e0       	ldi	r24, 0x03	; 3
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
  {  
  public:
    typedef PeripheralDriver::EventInterrupt EventInterrupt;

    inline LimitSwitch( EventInterrupt * i )
      : interrupt_(i)
    3460:	fc 01       	movw	r30, r24
    3462:	e0 82       	st	Z, r14
    3464:	f1 82       	std	Z+1, r15	; 0x01
    3466:	80 93 35 21 	sts	0x2135, r24	; 0x802135 <lim_x1>
    346a:	90 93 36 21 	sts	0x2136, r25	; 0x802136 <lim_x1+0x1>
  lim_x2 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    346e:	87 e0       	ldi	r24, 0x07	; 7
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    3476:	7c 01       	movw	r14, r24
    3478:	83 e0       	ldi	r24, 0x03	; 3
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    3480:	fc 01       	movw	r30, r24
    3482:	e0 82       	st	Z, r14
    3484:	f1 82       	std	Z+1, r15	; 0x01
    3486:	80 93 33 21 	sts	0x2133, r24	; 0x802133 <lim_x2>
    348a:	90 93 34 21 	sts	0x2134, r25	; 0x802134 <lim_x2+0x1>
  lim_y1 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    348e:	87 e0       	ldi	r24, 0x07	; 7
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    3496:	7c 01       	movw	r14, r24
    3498:	83 e0       	ldi	r24, 0x03	; 3
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    34a0:	fc 01       	movw	r30, r24
    34a2:	e0 82       	st	Z, r14
    34a4:	f1 82       	std	Z+1, r15	; 0x01
    34a6:	80 93 31 21 	sts	0x2131, r24	; 0x802131 <lim_y1>
    34aa:	90 93 32 21 	sts	0x2132, r25	; 0x802132 <lim_y1+0x1>
  lim_y2 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    34ae:	87 e0       	ldi	r24, 0x07	; 7
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    34b6:	7c 01       	movw	r14, r24
    34b8:	83 e0       	ldi	r24, 0x03	; 3
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    34c0:	fc 01       	movw	r30, r24
    34c2:	e0 82       	st	Z, r14
    34c4:	f1 82       	std	Z+1, r15	; 0x01
    34c6:	80 93 2f 21 	sts	0x212F, r24	; 0x80212f <lim_y2>
    34ca:	90 93 30 21 	sts	0x2130, r25	; 0x802130 <lim_y2+0x1>
  lim_z1 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    34ce:	87 e0       	ldi	r24, 0x07	; 7
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    34d6:	7c 01       	movw	r14, r24
    34d8:	83 e0       	ldi	r24, 0x03	; 3
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    34e0:	fc 01       	movw	r30, r24
    34e2:	e0 82       	st	Z, r14
    34e4:	f1 82       	std	Z+1, r15	; 0x01
    34e6:	80 93 2d 21 	sts	0x212D, r24	; 0x80212d <lim_z1>
    34ea:	90 93 2e 21 	sts	0x212E, r25	; 0x80212e <lim_z1+0x1>
  lim_z2 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    34ee:	87 e0       	ldi	r24, 0x07	; 7
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    34f6:	7c 01       	movw	r14, r24
    34f8:	83 e0       	ldi	r24, 0x03	; 3
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    3500:	fc 01       	movw	r30, r24
    3502:	e0 82       	st	Z, r14
    3504:	f1 82       	std	Z+1, r15	; 0x01
    3506:	80 93 2b 21 	sts	0x212B, r24	; 0x80212b <lim_z2>
    350a:	90 93 2c 21 	sts	0x212C, r25	; 0x80212c <lim_z2+0x1>
  #endif
  
  
  // The user interface is at low priority; it could have been run in the idle task
  // but it is desired to exercise the RTOS more thoroughly in this test program
  new task_user ( "UserInt", task_priority (0), 128, &ser_dev ) ;
    350e:	83 e2       	ldi	r24, 0x23	; 35
    3510:	91 e0       	ldi	r25, 0x01	; 1
    3512:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    3516:	8e 01       	movw	r16, r28
    3518:	0f 5f       	subi	r16, 0xFF	; 255
    351a:	1f 4f       	sbci	r17, 0xFF	; 255
    351c:	20 e8       	ldi	r18, 0x80	; 128
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	40 e0       	ldi	r20, 0x00	; 0
    3522:	6e e4       	ldi	r22, 0x4E	; 78
    3524:	70 e2       	ldi	r23, 0x20	; 32
    3526:	0e 94 0b 11 	call	0x2216	; 0x2216 <_ZN9task_userC1EPKchjP8emstream>
  
  new task_md ("MDX", task_priority(8), 128, &ser_dev, md_x, lim_x1, lim_x2, &xlocations,
  &x_max_velocity, &xmotor_on, &xmotor_complete, 8);
    352a:	8a e4       	ldi	r24, 0x4A	; 74
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    3532:	a0 90 33 21 	lds	r10, 0x2133	; 0x802133 <lim_x2>
    3536:	b0 90 34 21 	lds	r11, 0x2134	; 0x802134 <lim_x2+0x1>
    353a:	c0 90 35 21 	lds	r12, 0x2135	; 0x802135 <lim_x1>
    353e:	d0 90 36 21 	lds	r13, 0x2136	; 0x802136 <lim_x1+0x1>
    3542:	e0 90 29 21 	lds	r14, 0x2129	; 0x802129 <md_x>
    3546:	f0 90 2a 21 	lds	r15, 0x212A	; 0x80212a <md_x+0x1>
    354a:	1f 92       	push	r1
    354c:	68 94       	set
    354e:	77 24       	eor	r7, r7
    3550:	73 f8       	bld	r7, 3
    3552:	7f 92       	push	r7
    3554:	2a e7       	ldi	r18, 0x7A	; 122
    3556:	31 e2       	ldi	r19, 0x21	; 33
    3558:	3f 93       	push	r19
    355a:	2f 93       	push	r18
    355c:	22 ef       	ldi	r18, 0xF2	; 242
    355e:	30 e2       	ldi	r19, 0x20	; 32
    3560:	3f 93       	push	r19
    3562:	2f 93       	push	r18
    3564:	27 e5       	ldi	r18, 0x57	; 87
    3566:	31 e2       	ldi	r19, 0x21	; 33
    3568:	3f 93       	push	r19
    356a:	2f 93       	push	r18
    356c:	0f 2e       	mov	r0, r31
    356e:	fb e0       	ldi	r31, 0x0B	; 11
    3570:	8f 2e       	mov	r8, r31
    3572:	f1 e2       	ldi	r31, 0x21	; 33
    3574:	9f 2e       	mov	r9, r31
    3576:	f0 2d       	mov	r31, r0
    3578:	20 e8       	ldi	r18, 0x80	; 128
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	44 e0       	ldi	r20, 0x04	; 4
    357e:	66 e5       	ldi	r22, 0x56	; 86
    3580:	70 e2       	ldi	r23, 0x20	; 32
    3582:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_ZN7task_mdC1EPKchjP8emstreamP6DM542TPN12DeviceDriver11LimitSwitchES8_P9frt_queueImESB_P11shared_dataIhEPSC_IbEj>
  
  new task_md ("MDY", task_priority(8), 128, &ser_dev, md_y, lim_y1, lim_y2, &ylocations,
  &y_max_velocity, &ymotor_on, &ymotor_complete, 8);
    3586:	8a e4       	ldi	r24, 0x4A	; 74
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    358e:	a0 90 2f 21 	lds	r10, 0x212F	; 0x80212f <lim_y2>
    3592:	b0 90 30 21 	lds	r11, 0x2130	; 0x802130 <lim_y2+0x1>
    3596:	c0 90 31 21 	lds	r12, 0x2131	; 0x802131 <lim_y1>
    359a:	d0 90 32 21 	lds	r13, 0x2132	; 0x802132 <lim_y1+0x1>
    359e:	e0 90 27 21 	lds	r14, 0x2127	; 0x802127 <md_y>
    35a2:	f0 90 28 21 	lds	r15, 0x2128	; 0x802128 <md_y+0x1>
    35a6:	1f 92       	push	r1
    35a8:	7f 92       	push	r7
    35aa:	29 e7       	ldi	r18, 0x79	; 121
    35ac:	31 e2       	ldi	r19, 0x21	; 33
    35ae:	3f 93       	push	r19
    35b0:	2f 93       	push	r18
    35b2:	21 ef       	ldi	r18, 0xF1	; 241
    35b4:	30 e2       	ldi	r19, 0x20	; 32
    35b6:	3f 93       	push	r19
    35b8:	2f 93       	push	r18
    35ba:	2d e4       	ldi	r18, 0x4D	; 77
    35bc:	31 e2       	ldi	r19, 0x21	; 33
    35be:	3f 93       	push	r19
    35c0:	2f 93       	push	r18
    35c2:	0f 2e       	mov	r0, r31
    35c4:	f1 e0       	ldi	r31, 0x01	; 1
    35c6:	8f 2e       	mov	r8, r31
    35c8:	f1 e2       	ldi	r31, 0x21	; 33
    35ca:	9f 2e       	mov	r9, r31
    35cc:	f0 2d       	mov	r31, r0
    35ce:	20 e8       	ldi	r18, 0x80	; 128
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	44 e0       	ldi	r20, 0x04	; 4
    35d4:	6a e5       	ldi	r22, 0x5A	; 90
    35d6:	70 e2       	ldi	r23, 0x20	; 32
    35d8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_ZN7task_mdC1EPKchjP8emstreamP6DM542TPN12DeviceDriver11LimitSwitchES8_P9frt_queueImESB_P11shared_dataIhEPSC_IbEj>
  
  new task_md ("MDZ", task_priority(8), 128, &ser_dev, md_z, lim_z1, lim_z2, &zlocations,
  &z_max_velocity, &zmotor_on, &zmotor_complete, 8);
    35dc:	8a e4       	ldi	r24, 0x4A	; 74
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    35e4:	a0 90 2b 21 	lds	r10, 0x212B	; 0x80212b <lim_z2>
    35e8:	b0 90 2c 21 	lds	r11, 0x212C	; 0x80212c <lim_z2+0x1>
    35ec:	c0 90 2d 21 	lds	r12, 0x212D	; 0x80212d <lim_z1>
    35f0:	d0 90 2e 21 	lds	r13, 0x212E	; 0x80212e <lim_z1+0x1>
    35f4:	e0 90 25 21 	lds	r14, 0x2125	; 0x802125 <md_z>
    35f8:	f0 90 26 21 	lds	r15, 0x2126	; 0x802126 <md_z+0x1>
    35fc:	1f 92       	push	r1
    35fe:	7f 92       	push	r7
    3600:	28 e7       	ldi	r18, 0x78	; 120
    3602:	31 e2       	ldi	r19, 0x21	; 33
    3604:	3f 93       	push	r19
    3606:	2f 93       	push	r18
    3608:	20 ef       	ldi	r18, 0xF0	; 240
    360a:	30 e2       	ldi	r19, 0x20	; 32
    360c:	3f 93       	push	r19
    360e:	2f 93       	push	r18
    3610:	23 e4       	ldi	r18, 0x43	; 67
    3612:	31 e2       	ldi	r19, 0x21	; 33
    3614:	3f 93       	push	r19
    3616:	2f 93       	push	r18
    3618:	0f 2e       	mov	r0, r31
    361a:	f7 ef       	ldi	r31, 0xF7	; 247
    361c:	8f 2e       	mov	r8, r31
    361e:	f0 e2       	ldi	r31, 0x20	; 32
    3620:	9f 2e       	mov	r9, r31
    3622:	f0 2d       	mov	r31, r0
    3624:	20 e8       	ldi	r18, 0x80	; 128
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	44 e0       	ldi	r20, 0x04	; 4
    362a:	6e e5       	ldi	r22, 0x5E	; 94
    362c:	70 e2       	ldi	r23, 0x20	; 32
    362e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_ZN7task_mdC1EPKchjP8emstreamP6DM542TPN12DeviceDriver11LimitSwitchES8_P9frt_queueImESB_P11shared_dataIhEPSC_IbEj>
  //   8 );
  
  // new task_md ("MDZ", task_priority(8), 128, &ser_dev, 
  //   8 );
  
  new task_sensor ("Gardon_Gauge", task_priority(9), 500, &ser_dev, sbg01);
    3632:	83 e2       	ldi	r24, 0x23	; 35
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <_Znwj>
    363a:	e0 90 37 21 	lds	r14, 0x2137	; 0x802137 <sbg01>
    363e:	f0 90 38 21 	lds	r15, 0x2138	; 0x802138 <sbg01+0x1>
    3642:	24 ef       	ldi	r18, 0xF4	; 244
    3644:	31 e0       	ldi	r19, 0x01	; 1
    3646:	44 e0       	ldi	r20, 0x04	; 4
    3648:	62 e6       	ldi	r22, 0x62	; 98
    364a:	70 e2       	ldi	r23, 0x20	; 32
    364c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <_ZN11task_sensorC1EPKchjP8emstreamP5SBG01>
  //new task_thermocouple ("Therm9", task_priority(6), 128, &ser_dev, therm9);
  //
  //new task_thermocouple ("Therm10", task_priority(6), 128, &ser_dev, therm10);
  
  // Enable high level interrupts and global interrupts
  PMIC_CTRL = (1 << PMIC_HILVLEN_bp | 1 << PMIC_MEDLVLEN_bp | 1 << PMIC_LOLVLEN_bp);
    3650:	87 e0       	ldi	r24, 0x07	; 7
    3652:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
  sei();
    3656:	78 94       	sei

    //initialization_complete.put(false);
  
  // Here's where the RTOS scheduler is started up. It should never exit as long as
  // power is on and the microcontroller isn't rebooted
  vTaskStartScheduler ();
    3658:	0e 94 99 25 	call	0x4b32	; 0x4b32 <vTaskStartScheduler>
}
    365c:	cd bf       	out	0x3d, r28	; 61
    365e:	de bf       	out	0x3e, r29	; 62
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	6d 96       	adiw	r28, 0x1d	; 29
    3666:	cd bf       	out	0x3d, r28	; 61
    3668:	de bf       	out	0x3e, r29	; 62
    366a:	df 91       	pop	r29
    366c:	cf 91       	pop	r28
    366e:	1f 91       	pop	r17
    3670:	0f 91       	pop	r16
    3672:	ff 90       	pop	r15
    3674:	ef 90       	pop	r14
    3676:	df 90       	pop	r13
    3678:	cf 90       	pop	r12
    367a:	bf 90       	pop	r11
    367c:	af 90       	pop	r10
    367e:	9f 90       	pop	r9
    3680:	8f 90       	pop	r8
    3682:	7f 90       	pop	r7
    3684:	6f 90       	pop	r6
    3686:	08 95       	ret

00003688 <__vector_66>:

ISR(PORTA_INT0_vect)
{
    3688:	1f 92       	push	r1
    368a:	0f 92       	push	r0
    368c:	0f b6       	in	r0, 0x3f	; 63
    368e:	0f 92       	push	r0
    3690:	11 24       	eor	r1, r1
    3692:	0b b6       	in	r0, 0x3b	; 59
    3694:	0f 92       	push	r0
    3696:	2f 93       	push	r18
    3698:	3f 93       	push	r19
    369a:	4f 93       	push	r20
    369c:	5f 93       	push	r21
    369e:	6f 93       	push	r22
    36a0:	7f 93       	push	r23
    36a2:	8f 93       	push	r24
    36a4:	9f 93       	push	r25
    36a6:	af 93       	push	r26
    36a8:	bf 93       	push	r27
    36aa:	ef 93       	push	r30
    36ac:	ff 93       	push	r31
  md_x->min_bound_interrupt_handler();
    36ae:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <md_x>
    36b2:	90 91 2a 21 	lds	r25, 0x212A	; 0x80212a <md_x+0x1>
    36b6:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN6DM542T27min_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_x->get_direction() == 1)
    36ba:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    36be:	88 23       	and	r24, r24
    36c0:	79 f0       	breq	.+30     	; 0x36e0 <__vector_66+0x58>
    36c2:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <md_x>
    36c6:	90 91 2a 21 	lds	r25, 0x212A	; 0x80212a <md_x+0x1>
    36ca:	dc 01       	movw	r26, r24
    36cc:	ed 91       	ld	r30, X+
    36ce:	fc 91       	ld	r31, X
    36d0:	06 84       	ldd	r0, Z+14	; 0x0e
    36d2:	f7 85       	ldd	r31, Z+15	; 0x0f
    36d4:	e0 2d       	mov	r30, r0
    36d6:	19 95       	eicall
    36d8:	81 30       	cpi	r24, 0x01	; 1
    36da:	11 f4       	brne	.+4      	; 0x36e0 <__vector_66+0x58>
		*  default case on most small microcontrollers. 
		*  @param new_data The data which is to be written into the shared data item
		*/
		void ISR_put (data_type new_data)
		{
			the_data = new_data;
    36dc:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <reset>
  {
    reset.ISR_put(true);
  }
}
    36e0:	ff 91       	pop	r31
    36e2:	ef 91       	pop	r30
    36e4:	bf 91       	pop	r27
    36e6:	af 91       	pop	r26
    36e8:	9f 91       	pop	r25
    36ea:	8f 91       	pop	r24
    36ec:	7f 91       	pop	r23
    36ee:	6f 91       	pop	r22
    36f0:	5f 91       	pop	r21
    36f2:	4f 91       	pop	r20
    36f4:	3f 91       	pop	r19
    36f6:	2f 91       	pop	r18
    36f8:	0f 90       	pop	r0
    36fa:	0b be       	out	0x3b, r0	; 59
    36fc:	0f 90       	pop	r0
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	0f 90       	pop	r0
    3702:	1f 90       	pop	r1
    3704:	18 95       	reti

00003706 <__vector_67>:

ISR(PORTA_INT1_vect)
{
    3706:	1f 92       	push	r1
    3708:	0f 92       	push	r0
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	0f 92       	push	r0
    370e:	11 24       	eor	r1, r1
    3710:	0b b6       	in	r0, 0x3b	; 59
    3712:	0f 92       	push	r0
    3714:	2f 93       	push	r18
    3716:	3f 93       	push	r19
    3718:	4f 93       	push	r20
    371a:	5f 93       	push	r21
    371c:	6f 93       	push	r22
    371e:	7f 93       	push	r23
    3720:	8f 93       	push	r24
    3722:	9f 93       	push	r25
    3724:	af 93       	push	r26
    3726:	bf 93       	push	r27
    3728:	ef 93       	push	r30
    372a:	ff 93       	push	r31
  md_x->max_bound_interrupt_handler();
    372c:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <md_x>
    3730:	90 91 2a 21 	lds	r25, 0x212A	; 0x80212a <md_x+0x1>
    3734:	0e 94 b9 07 	call	0xf72	; 0xf72 <_ZN6DM542T27max_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_x->get_direction() == 0)
    3738:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    373c:	88 23       	and	r24, r24
    373e:	81 f0       	breq	.+32     	; 0x3760 <__vector_67+0x5a>
    3740:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <md_x>
    3744:	90 91 2a 21 	lds	r25, 0x212A	; 0x80212a <md_x+0x1>
    3748:	dc 01       	movw	r26, r24
    374a:	ed 91       	ld	r30, X+
    374c:	fc 91       	ld	r31, X
    374e:	06 84       	ldd	r0, Z+14	; 0x0e
    3750:	f7 85       	ldd	r31, Z+15	; 0x0f
    3752:	e0 2d       	mov	r30, r0
    3754:	19 95       	eicall
    3756:	81 11       	cpse	r24, r1
    3758:	03 c0       	rjmp	.+6      	; 0x3760 <__vector_67+0x5a>
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <reset>
  {
    reset.ISR_put(true);
  }
}
    3760:	ff 91       	pop	r31
    3762:	ef 91       	pop	r30
    3764:	bf 91       	pop	r27
    3766:	af 91       	pop	r26
    3768:	9f 91       	pop	r25
    376a:	8f 91       	pop	r24
    376c:	7f 91       	pop	r23
    376e:	6f 91       	pop	r22
    3770:	5f 91       	pop	r21
    3772:	4f 91       	pop	r20
    3774:	3f 91       	pop	r19
    3776:	2f 91       	pop	r18
    3778:	0f 90       	pop	r0
    377a:	0b be       	out	0x3b, r0	; 59
    377c:	0f 90       	pop	r0
    377e:	0f be       	out	0x3f, r0	; 63
    3780:	0f 90       	pop	r0
    3782:	1f 90       	pop	r1
    3784:	18 95       	reti

00003786 <__vector_43>:

ISR(PORTE_INT0_vect)
{
    3786:	1f 92       	push	r1
    3788:	0f 92       	push	r0
    378a:	0f b6       	in	r0, 0x3f	; 63
    378c:	0f 92       	push	r0
    378e:	11 24       	eor	r1, r1
    3790:	0b b6       	in	r0, 0x3b	; 59
    3792:	0f 92       	push	r0
    3794:	2f 93       	push	r18
    3796:	3f 93       	push	r19
    3798:	4f 93       	push	r20
    379a:	5f 93       	push	r21
    379c:	6f 93       	push	r22
    379e:	7f 93       	push	r23
    37a0:	8f 93       	push	r24
    37a2:	9f 93       	push	r25
    37a4:	af 93       	push	r26
    37a6:	bf 93       	push	r27
    37a8:	ef 93       	push	r30
    37aa:	ff 93       	push	r31
  md_y->min_bound_interrupt_handler();
    37ac:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <md_y>
    37b0:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <md_y+0x1>
    37b4:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN6DM542T27min_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_y->get_direction() == 1)
    37b8:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    37bc:	88 23       	and	r24, r24
    37be:	79 f0       	breq	.+30     	; 0x37de <__vector_43+0x58>
    37c0:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <md_y>
    37c4:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <md_y+0x1>
    37c8:	dc 01       	movw	r26, r24
    37ca:	ed 91       	ld	r30, X+
    37cc:	fc 91       	ld	r31, X
    37ce:	06 84       	ldd	r0, Z+14	; 0x0e
    37d0:	f7 85       	ldd	r31, Z+15	; 0x0f
    37d2:	e0 2d       	mov	r30, r0
    37d4:	19 95       	eicall
    37d6:	81 30       	cpi	r24, 0x01	; 1
    37d8:	11 f4       	brne	.+4      	; 0x37de <__vector_43+0x58>
    37da:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <reset>
  {
    reset.ISR_put(true);
  }
}
    37de:	ff 91       	pop	r31
    37e0:	ef 91       	pop	r30
    37e2:	bf 91       	pop	r27
    37e4:	af 91       	pop	r26
    37e6:	9f 91       	pop	r25
    37e8:	8f 91       	pop	r24
    37ea:	7f 91       	pop	r23
    37ec:	6f 91       	pop	r22
    37ee:	5f 91       	pop	r21
    37f0:	4f 91       	pop	r20
    37f2:	3f 91       	pop	r19
    37f4:	2f 91       	pop	r18
    37f6:	0f 90       	pop	r0
    37f8:	0b be       	out	0x3b, r0	; 59
    37fa:	0f 90       	pop	r0
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	0f 90       	pop	r0
    3800:	1f 90       	pop	r1
    3802:	18 95       	reti

00003804 <__vector_44>:

ISR(PORTE_INT1_vect)
{
    3804:	1f 92       	push	r1
    3806:	0f 92       	push	r0
    3808:	0f b6       	in	r0, 0x3f	; 63
    380a:	0f 92       	push	r0
    380c:	11 24       	eor	r1, r1
    380e:	0b b6       	in	r0, 0x3b	; 59
    3810:	0f 92       	push	r0
    3812:	2f 93       	push	r18
    3814:	3f 93       	push	r19
    3816:	4f 93       	push	r20
    3818:	5f 93       	push	r21
    381a:	6f 93       	push	r22
    381c:	7f 93       	push	r23
    381e:	8f 93       	push	r24
    3820:	9f 93       	push	r25
    3822:	af 93       	push	r26
    3824:	bf 93       	push	r27
    3826:	ef 93       	push	r30
    3828:	ff 93       	push	r31
  md_y->max_bound_interrupt_handler();
    382a:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <md_y>
    382e:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <md_y+0x1>
    3832:	0e 94 b9 07 	call	0xf72	; 0xf72 <_ZN6DM542T27max_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_y->get_direction() == 0)
    3836:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    383a:	88 23       	and	r24, r24
    383c:	81 f0       	breq	.+32     	; 0x385e <__vector_44+0x5a>
    383e:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <md_y>
    3842:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <md_y+0x1>
    3846:	dc 01       	movw	r26, r24
    3848:	ed 91       	ld	r30, X+
    384a:	fc 91       	ld	r31, X
    384c:	06 84       	ldd	r0, Z+14	; 0x0e
    384e:	f7 85       	ldd	r31, Z+15	; 0x0f
    3850:	e0 2d       	mov	r30, r0
    3852:	19 95       	eicall
    3854:	81 11       	cpse	r24, r1
    3856:	03 c0       	rjmp	.+6      	; 0x385e <__vector_44+0x5a>
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <reset>
  {
    reset.ISR_put(true);
  }
}
    385e:	ff 91       	pop	r31
    3860:	ef 91       	pop	r30
    3862:	bf 91       	pop	r27
    3864:	af 91       	pop	r26
    3866:	9f 91       	pop	r25
    3868:	8f 91       	pop	r24
    386a:	7f 91       	pop	r23
    386c:	6f 91       	pop	r22
    386e:	5f 91       	pop	r21
    3870:	4f 91       	pop	r20
    3872:	3f 91       	pop	r19
    3874:	2f 91       	pop	r18
    3876:	0f 90       	pop	r0
    3878:	0b be       	out	0x3b, r0	; 59
    387a:	0f 90       	pop	r0
    387c:	0f be       	out	0x3f, r0	; 63
    387e:	0f 90       	pop	r0
    3880:	1f 90       	pop	r1
    3882:	18 95       	reti

00003884 <__vector_104>:

ISR(PORTF_INT0_vect)
{
    3884:	1f 92       	push	r1
    3886:	0f 92       	push	r0
    3888:	0f b6       	in	r0, 0x3f	; 63
    388a:	0f 92       	push	r0
    388c:	11 24       	eor	r1, r1
    388e:	0b b6       	in	r0, 0x3b	; 59
    3890:	0f 92       	push	r0
    3892:	2f 93       	push	r18
    3894:	3f 93       	push	r19
    3896:	4f 93       	push	r20
    3898:	5f 93       	push	r21
    389a:	6f 93       	push	r22
    389c:	7f 93       	push	r23
    389e:	8f 93       	push	r24
    38a0:	9f 93       	push	r25
    38a2:	af 93       	push	r26
    38a4:	bf 93       	push	r27
    38a6:	ef 93       	push	r30
    38a8:	ff 93       	push	r31
  md_z->min_bound_interrupt_handler();
    38aa:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <md_z>
    38ae:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <md_z+0x1>
    38b2:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN6DM542T27min_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_z->get_direction() == 1)
    38b6:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    38ba:	88 23       	and	r24, r24
    38bc:	79 f0       	breq	.+30     	; 0x38dc <__vector_104+0x58>
    38be:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <md_z>
    38c2:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <md_z+0x1>
    38c6:	dc 01       	movw	r26, r24
    38c8:	ed 91       	ld	r30, X+
    38ca:	fc 91       	ld	r31, X
    38cc:	06 84       	ldd	r0, Z+14	; 0x0e
    38ce:	f7 85       	ldd	r31, Z+15	; 0x0f
    38d0:	e0 2d       	mov	r30, r0
    38d2:	19 95       	eicall
    38d4:	81 30       	cpi	r24, 0x01	; 1
    38d6:	11 f4       	brne	.+4      	; 0x38dc <__vector_104+0x58>
    38d8:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <reset>
  {
    reset.ISR_put(true);
  }
}
    38dc:	ff 91       	pop	r31
    38de:	ef 91       	pop	r30
    38e0:	bf 91       	pop	r27
    38e2:	af 91       	pop	r26
    38e4:	9f 91       	pop	r25
    38e6:	8f 91       	pop	r24
    38e8:	7f 91       	pop	r23
    38ea:	6f 91       	pop	r22
    38ec:	5f 91       	pop	r21
    38ee:	4f 91       	pop	r20
    38f0:	3f 91       	pop	r19
    38f2:	2f 91       	pop	r18
    38f4:	0f 90       	pop	r0
    38f6:	0b be       	out	0x3b, r0	; 59
    38f8:	0f 90       	pop	r0
    38fa:	0f be       	out	0x3f, r0	; 63
    38fc:	0f 90       	pop	r0
    38fe:	1f 90       	pop	r1
    3900:	18 95       	reti

00003902 <__vector_105>:

ISR(PORTF_INT1_vect)
{
    3902:	1f 92       	push	r1
    3904:	0f 92       	push	r0
    3906:	0f b6       	in	r0, 0x3f	; 63
    3908:	0f 92       	push	r0
    390a:	11 24       	eor	r1, r1
    390c:	0b b6       	in	r0, 0x3b	; 59
    390e:	0f 92       	push	r0
    3910:	2f 93       	push	r18
    3912:	3f 93       	push	r19
    3914:	4f 93       	push	r20
    3916:	5f 93       	push	r21
    3918:	6f 93       	push	r22
    391a:	7f 93       	push	r23
    391c:	8f 93       	push	r24
    391e:	9f 93       	push	r25
    3920:	af 93       	push	r26
    3922:	bf 93       	push	r27
    3924:	ef 93       	push	r30
    3926:	ff 93       	push	r31
  md_z->max_bound_interrupt_handler();
    3928:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <md_z>
    392c:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <md_z+0x1>
    3930:	0e 94 b9 07 	call	0xf72	; 0xf72 <_ZN6DM542T27max_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_z->get_direction() == 0)
    3934:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <coordinate_mode>
    3938:	88 23       	and	r24, r24
    393a:	81 f0       	breq	.+32     	; 0x395c <__vector_105+0x5a>
    393c:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <md_z>
    3940:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <md_z+0x1>
    3944:	dc 01       	movw	r26, r24
    3946:	ed 91       	ld	r30, X+
    3948:	fc 91       	ld	r31, X
    394a:	06 84       	ldd	r0, Z+14	; 0x0e
    394c:	f7 85       	ldd	r31, Z+15	; 0x0f
    394e:	e0 2d       	mov	r30, r0
    3950:	19 95       	eicall
    3952:	81 11       	cpse	r24, r1
    3954:	03 c0       	rjmp	.+6      	; 0x395c <__vector_105+0x5a>
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <reset>
  {
    reset.ISR_put(true);
  }
}
    395c:	ff 91       	pop	r31
    395e:	ef 91       	pop	r30
    3960:	bf 91       	pop	r27
    3962:	af 91       	pop	r26
    3964:	9f 91       	pop	r25
    3966:	8f 91       	pop	r24
    3968:	7f 91       	pop	r23
    396a:	6f 91       	pop	r22
    396c:	5f 91       	pop	r21
    396e:	4f 91       	pop	r20
    3970:	3f 91       	pop	r19
    3972:	2f 91       	pop	r18
    3974:	0f 90       	pop	r0
    3976:	0b be       	out	0x3b, r0	; 59
    3978:	0f 90       	pop	r0
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	0f 90       	pop	r0
    397e:	1f 90       	pop	r1
    3980:	18 95       	reti

00003982 <__vector_85>:

ISR(TCD1_CCA_vect)
{
    3982:	1f 92       	push	r1
    3984:	0f 92       	push	r0
    3986:	0f b6       	in	r0, 0x3f	; 63
    3988:	0f 92       	push	r0
    398a:	11 24       	eor	r1, r1
    398c:	0b b6       	in	r0, 0x3b	; 59
    398e:	0f 92       	push	r0
    3990:	2f 93       	push	r18
    3992:	3f 93       	push	r19
    3994:	4f 93       	push	r20
    3996:	5f 93       	push	r21
    3998:	6f 93       	push	r22
    399a:	7f 93       	push	r23
    399c:	8f 93       	push	r24
    399e:	9f 93       	push	r25
    39a0:	af 93       	push	r26
    39a2:	bf 93       	push	r27
    39a4:	ef 93       	push	r30
    39a6:	ff 93       	push	r31
  md_x->set_signal_low();
    39a8:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <md_x>
    39ac:	90 91 2a 21 	lds	r25, 0x212A	; 0x80212a <md_x+0x1>
    39b0:	dc 01       	movw	r26, r24
    39b2:	ed 91       	ld	r30, X+
    39b4:	fc 91       	ld	r31, X
    39b6:	02 88       	ldd	r0, Z+18	; 0x12
    39b8:	f3 89       	ldd	r31, Z+19	; 0x13
    39ba:	e0 2d       	mov	r30, r0
    39bc:	19 95       	eicall
}
    39be:	ff 91       	pop	r31
    39c0:	ef 91       	pop	r30
    39c2:	bf 91       	pop	r27
    39c4:	af 91       	pop	r26
    39c6:	9f 91       	pop	r25
    39c8:	8f 91       	pop	r24
    39ca:	7f 91       	pop	r23
    39cc:	6f 91       	pop	r22
    39ce:	5f 91       	pop	r21
    39d0:	4f 91       	pop	r20
    39d2:	3f 91       	pop	r19
    39d4:	2f 91       	pop	r18
    39d6:	0f 90       	pop	r0
    39d8:	0b be       	out	0x3b, r0	; 59
    39da:	0f 90       	pop	r0
    39dc:	0f be       	out	0x3f, r0	; 63
    39de:	0f 90       	pop	r0
    39e0:	1f 90       	pop	r1
    39e2:	18 95       	reti

000039e4 <__vector_83>:

ISR(TCD1_OVF_vect)
{
    39e4:	1f 92       	push	r1
    39e6:	0f 92       	push	r0
    39e8:	0f b6       	in	r0, 0x3f	; 63
    39ea:	0f 92       	push	r0
    39ec:	11 24       	eor	r1, r1
    39ee:	0b b6       	in	r0, 0x3b	; 59
    39f0:	0f 92       	push	r0
    39f2:	2f 93       	push	r18
    39f4:	3f 93       	push	r19
    39f6:	4f 93       	push	r20
    39f8:	5f 93       	push	r21
    39fa:	6f 93       	push	r22
    39fc:	7f 93       	push	r23
    39fe:	8f 93       	push	r24
    3a00:	9f 93       	push	r25
    3a02:	af 93       	push	r26
    3a04:	bf 93       	push	r27
    3a06:	ef 93       	push	r30
    3a08:	ff 93       	push	r31
  md_x->take_step();
    3a0a:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <md_x>
    3a0e:	90 91 2a 21 	lds	r25, 0x212A	; 0x80212a <md_x+0x1>
    3a12:	dc 01       	movw	r26, r24
    3a14:	ed 91       	ld	r30, X+
    3a16:	fc 91       	ld	r31, X
    3a18:	00 88       	ldd	r0, Z+16	; 0x10
    3a1a:	f1 89       	ldd	r31, Z+17	; 0x11
    3a1c:	e0 2d       	mov	r30, r0
    3a1e:	19 95       	eicall
}
    3a20:	ff 91       	pop	r31
    3a22:	ef 91       	pop	r30
    3a24:	bf 91       	pop	r27
    3a26:	af 91       	pop	r26
    3a28:	9f 91       	pop	r25
    3a2a:	8f 91       	pop	r24
    3a2c:	7f 91       	pop	r23
    3a2e:	6f 91       	pop	r22
    3a30:	5f 91       	pop	r21
    3a32:	4f 91       	pop	r20
    3a34:	3f 91       	pop	r19
    3a36:	2f 91       	pop	r18
    3a38:	0f 90       	pop	r0
    3a3a:	0b be       	out	0x3b, r0	; 59
    3a3c:	0f 90       	pop	r0
    3a3e:	0f be       	out	0x3f, r0	; 63
    3a40:	0f 90       	pop	r0
    3a42:	1f 90       	pop	r1
    3a44:	18 95       	reti

00003a46 <__vector_82>:

ISR(TCD0_CCD_vect)
{
    3a46:	1f 92       	push	r1
    3a48:	0f 92       	push	r0
    3a4a:	0f b6       	in	r0, 0x3f	; 63
    3a4c:	0f 92       	push	r0
    3a4e:	11 24       	eor	r1, r1
    3a50:	0b b6       	in	r0, 0x3b	; 59
    3a52:	0f 92       	push	r0
    3a54:	2f 93       	push	r18
    3a56:	3f 93       	push	r19
    3a58:	4f 93       	push	r20
    3a5a:	5f 93       	push	r21
    3a5c:	6f 93       	push	r22
    3a5e:	7f 93       	push	r23
    3a60:	8f 93       	push	r24
    3a62:	9f 93       	push	r25
    3a64:	af 93       	push	r26
    3a66:	bf 93       	push	r27
    3a68:	ef 93       	push	r30
    3a6a:	ff 93       	push	r31
  md_y->set_signal_low();
    3a6c:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <md_y>
    3a70:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <md_y+0x1>
    3a74:	dc 01       	movw	r26, r24
    3a76:	ed 91       	ld	r30, X+
    3a78:	fc 91       	ld	r31, X
    3a7a:	02 88       	ldd	r0, Z+18	; 0x12
    3a7c:	f3 89       	ldd	r31, Z+19	; 0x13
    3a7e:	e0 2d       	mov	r30, r0
    3a80:	19 95       	eicall
}
    3a82:	ff 91       	pop	r31
    3a84:	ef 91       	pop	r30
    3a86:	bf 91       	pop	r27
    3a88:	af 91       	pop	r26
    3a8a:	9f 91       	pop	r25
    3a8c:	8f 91       	pop	r24
    3a8e:	7f 91       	pop	r23
    3a90:	6f 91       	pop	r22
    3a92:	5f 91       	pop	r21
    3a94:	4f 91       	pop	r20
    3a96:	3f 91       	pop	r19
    3a98:	2f 91       	pop	r18
    3a9a:	0f 90       	pop	r0
    3a9c:	0b be       	out	0x3b, r0	; 59
    3a9e:	0f 90       	pop	r0
    3aa0:	0f be       	out	0x3f, r0	; 63
    3aa2:	0f 90       	pop	r0
    3aa4:	1f 90       	pop	r1
    3aa6:	18 95       	reti

00003aa8 <__vector_77>:

ISR(TCD0_OVF_vect)
{
    3aa8:	1f 92       	push	r1
    3aaa:	0f 92       	push	r0
    3aac:	0f b6       	in	r0, 0x3f	; 63
    3aae:	0f 92       	push	r0
    3ab0:	11 24       	eor	r1, r1
    3ab2:	0b b6       	in	r0, 0x3b	; 59
    3ab4:	0f 92       	push	r0
    3ab6:	2f 93       	push	r18
    3ab8:	3f 93       	push	r19
    3aba:	4f 93       	push	r20
    3abc:	5f 93       	push	r21
    3abe:	6f 93       	push	r22
    3ac0:	7f 93       	push	r23
    3ac2:	8f 93       	push	r24
    3ac4:	9f 93       	push	r25
    3ac6:	af 93       	push	r26
    3ac8:	bf 93       	push	r27
    3aca:	ef 93       	push	r30
    3acc:	ff 93       	push	r31
  md_y->take_step();
    3ace:	80 91 27 21 	lds	r24, 0x2127	; 0x802127 <md_y>
    3ad2:	90 91 28 21 	lds	r25, 0x2128	; 0x802128 <md_y+0x1>
    3ad6:	dc 01       	movw	r26, r24
    3ad8:	ed 91       	ld	r30, X+
    3ada:	fc 91       	ld	r31, X
    3adc:	00 88       	ldd	r0, Z+16	; 0x10
    3ade:	f1 89       	ldd	r31, Z+17	; 0x11
    3ae0:	e0 2d       	mov	r30, r0
    3ae2:	19 95       	eicall
}
    3ae4:	ff 91       	pop	r31
    3ae6:	ef 91       	pop	r30
    3ae8:	bf 91       	pop	r27
    3aea:	af 91       	pop	r26
    3aec:	9f 91       	pop	r25
    3aee:	8f 91       	pop	r24
    3af0:	7f 91       	pop	r23
    3af2:	6f 91       	pop	r22
    3af4:	5f 91       	pop	r21
    3af6:	4f 91       	pop	r20
    3af8:	3f 91       	pop	r19
    3afa:	2f 91       	pop	r18
    3afc:	0f 90       	pop	r0
    3afe:	0b be       	out	0x3b, r0	; 59
    3b00:	0f 90       	pop	r0
    3b02:	0f be       	out	0x3f, r0	; 63
    3b04:	0f 90       	pop	r0
    3b06:	1f 90       	pop	r1
    3b08:	18 95       	reti

00003b0a <__vector_16>:

ISR(TCC0_CCA_vect)
{
    3b0a:	1f 92       	push	r1
    3b0c:	0f 92       	push	r0
    3b0e:	0f b6       	in	r0, 0x3f	; 63
    3b10:	0f 92       	push	r0
    3b12:	11 24       	eor	r1, r1
    3b14:	0b b6       	in	r0, 0x3b	; 59
    3b16:	0f 92       	push	r0
    3b18:	2f 93       	push	r18
    3b1a:	3f 93       	push	r19
    3b1c:	4f 93       	push	r20
    3b1e:	5f 93       	push	r21
    3b20:	6f 93       	push	r22
    3b22:	7f 93       	push	r23
    3b24:	8f 93       	push	r24
    3b26:	9f 93       	push	r25
    3b28:	af 93       	push	r26
    3b2a:	bf 93       	push	r27
    3b2c:	ef 93       	push	r30
    3b2e:	ff 93       	push	r31
  md_z->set_signal_low();
    3b30:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <md_z>
    3b34:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <md_z+0x1>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	ed 91       	ld	r30, X+
    3b3c:	fc 91       	ld	r31, X
    3b3e:	02 88       	ldd	r0, Z+18	; 0x12
    3b40:	f3 89       	ldd	r31, Z+19	; 0x13
    3b42:	e0 2d       	mov	r30, r0
    3b44:	19 95       	eicall
}
    3b46:	ff 91       	pop	r31
    3b48:	ef 91       	pop	r30
    3b4a:	bf 91       	pop	r27
    3b4c:	af 91       	pop	r26
    3b4e:	9f 91       	pop	r25
    3b50:	8f 91       	pop	r24
    3b52:	7f 91       	pop	r23
    3b54:	6f 91       	pop	r22
    3b56:	5f 91       	pop	r21
    3b58:	4f 91       	pop	r20
    3b5a:	3f 91       	pop	r19
    3b5c:	2f 91       	pop	r18
    3b5e:	0f 90       	pop	r0
    3b60:	0b be       	out	0x3b, r0	; 59
    3b62:	0f 90       	pop	r0
    3b64:	0f be       	out	0x3f, r0	; 63
    3b66:	0f 90       	pop	r0
    3b68:	1f 90       	pop	r1
    3b6a:	18 95       	reti

00003b6c <__vector_14>:

ISR(TCC0_OVF_vect)
{
    3b6c:	1f 92       	push	r1
    3b6e:	0f 92       	push	r0
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	0f 92       	push	r0
    3b74:	11 24       	eor	r1, r1
    3b76:	0b b6       	in	r0, 0x3b	; 59
    3b78:	0f 92       	push	r0
    3b7a:	2f 93       	push	r18
    3b7c:	3f 93       	push	r19
    3b7e:	4f 93       	push	r20
    3b80:	5f 93       	push	r21
    3b82:	6f 93       	push	r22
    3b84:	7f 93       	push	r23
    3b86:	8f 93       	push	r24
    3b88:	9f 93       	push	r25
    3b8a:	af 93       	push	r26
    3b8c:	bf 93       	push	r27
    3b8e:	ef 93       	push	r30
    3b90:	ff 93       	push	r31
  md_z->take_step();
    3b92:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <md_z>
    3b96:	90 91 26 21 	lds	r25, 0x2126	; 0x802126 <md_z+0x1>
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	ed 91       	ld	r30, X+
    3b9e:	fc 91       	ld	r31, X
    3ba0:	00 88       	ldd	r0, Z+16	; 0x10
    3ba2:	f1 89       	ldd	r31, Z+17	; 0x11
    3ba4:	e0 2d       	mov	r30, r0
    3ba6:	19 95       	eicall
    3ba8:	ff 91       	pop	r31
    3baa:	ef 91       	pop	r30
    3bac:	bf 91       	pop	r27
    3bae:	af 91       	pop	r26
    3bb0:	9f 91       	pop	r25
    3bb2:	8f 91       	pop	r24
    3bb4:	7f 91       	pop	r23
    3bb6:	6f 91       	pop	r22
    3bb8:	5f 91       	pop	r21
    3bba:	4f 91       	pop	r20
    3bbc:	3f 91       	pop	r19
    3bbe:	2f 91       	pop	r18
    3bc0:	0f 90       	pop	r0
    3bc2:	0b be       	out	0x3b, r0	; 59
    3bc4:	0f 90       	pop	r0
    3bc6:	0f be       	out	0x3f, r0	; 63
    3bc8:	0f 90       	pop	r0
    3bca:	1f 90       	pop	r1
    3bcc:	18 95       	reti

00003bce <_ZN9frt_queueImEC1EhP8emstreamm>:
 *  @param p_ser_dev Pointer to a serial device to be used for debugging printouts
 *                   (Default: NULL)
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
    3bce:	cf 92       	push	r12
    3bd0:	df 92       	push	r13
    3bd2:	ef 92       	push	r14
    3bd4:	ff 92       	push	r15
    3bd6:	0f 93       	push	r16
    3bd8:	1f 93       	push	r17
    3bda:	cf 93       	push	r28
    3bdc:	df 93       	push	r29
    3bde:	ec 01       	movw	r28, r24
    3be0:	86 2f       	mov	r24, r22
    3be2:	68 01       	movw	r12, r16
    3be4:	79 01       	movw	r14, r18

template <class data_type>
frt_base_queue<data_type>::frt_base_queue (emstream* p_ser_dev)
{
	// Save the pointer to a serial devide so it may be used for debugging
	p_serial = p_ser_dev;
    3be6:	4a 83       	std	Y+2, r20	; 0x02
    3be8:	5b 83       	std	Y+3, r21	; 0x03
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    3bea:	2d e8       	ldi	r18, 0x8D	; 141
    3bec:	30 e2       	ldi	r19, 0x20	; 32
    3bee:	28 83       	st	Y, r18
    3bf0:	39 83       	std	Y+1, r19	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    3bf2:	40 e0       	ldi	r20, 0x00	; 0
    3bf4:	64 e0       	ldi	r22, 0x04	; 4
    3bf6:	0e 94 42 22 	call	0x4484	; 0x4484 <xQueueGenericCreate>
    3bfa:	8c 83       	std	Y+4, r24	; 0x04
    3bfc:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    3bfe:	ce 82       	std	Y+6, r12	; 0x06
    3c00:	df 82       	std	Y+7, r13	; 0x07
    3c02:	e8 86       	std	Y+8, r14	; 0x08
    3c04:	f9 86       	std	Y+9, r15	; 0x09
	if (handle == 0)
	{
		DBG (p_ser_dev, PMS ("ERROR creating ") << queue_size << PMS("x") 
			 << sizeof (data_type) << PMS ("B queue #") << handle << endl);
	}
}
    3c06:	df 91       	pop	r29
    3c08:	cf 91       	pop	r28
    3c0a:	1f 91       	pop	r17
    3c0c:	0f 91       	pop	r16
    3c0e:	ff 90       	pop	r15
    3c10:	ef 90       	pop	r14
    3c12:	df 90       	pop	r13
    3c14:	cf 90       	pop	r12
    3c16:	08 95       	ret

00003c18 <_GLOBAL__sub_I_counter>:
    3c18:	0f 93       	push	r16
    3c1a:	1f 93       	push	r17
shared_data<bool> emergency_shutdown;
shared_data<bool> next_node;
shared_data<uint16_t> current_node;
shared_data<uint16_t> total_nodes;
shared_data<bool> pause;
frt_queue<uint32_t> x_max_velocity(50,NULL,10);
    3c1c:	0a e0       	ldi	r16, 0x0A	; 10
    3c1e:	10 e0       	ldi	r17, 0x00	; 0
    3c20:	20 e0       	ldi	r18, 0x00	; 0
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	40 e0       	ldi	r20, 0x00	; 0
    3c26:	50 e0       	ldi	r21, 0x00	; 0
    3c28:	62 e3       	ldi	r22, 0x32	; 50
    3c2a:	87 e5       	ldi	r24, 0x57	; 87
    3c2c:	91 e2       	ldi	r25, 0x21	; 33
    3c2e:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> y_max_velocity(50,NULL,10);
    3c32:	0a e0       	ldi	r16, 0x0A	; 10
    3c34:	10 e0       	ldi	r17, 0x00	; 0
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	40 e0       	ldi	r20, 0x00	; 0
    3c3c:	50 e0       	ldi	r21, 0x00	; 0
    3c3e:	62 e3       	ldi	r22, 0x32	; 50
    3c40:	8d e4       	ldi	r24, 0x4D	; 77
    3c42:	91 e2       	ldi	r25, 0x21	; 33
    3c44:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> z_max_velocity(50,NULL,10);
    3c48:	0a e0       	ldi	r16, 0x0A	; 10
    3c4a:	10 e0       	ldi	r17, 0x00	; 0
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	40 e0       	ldi	r20, 0x00	; 0
    3c52:	50 e0       	ldi	r21, 0x00	; 0
    3c54:	62 e3       	ldi	r22, 0x32	; 50
    3c56:	83 e4       	ldi	r24, 0x43	; 67
    3c58:	91 e2       	ldi	r25, 0x21	; 33
    3c5a:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <_ZN9frt_queueImEC1EhP8emstreamm>
InterruptTimer* timer_C0_pin0;
DM542T* md_x;
DM542T* md_y;
DM542T* md_z;

frt_text_queue print_ser_queue (32, NULL, 10);
    3c5e:	0a e0       	ldi	r16, 0x0A	; 10
    3c60:	10 e0       	ldi	r17, 0x00	; 0
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	40 e0       	ldi	r20, 0x00	; 0
    3c68:	50 e0       	ldi	r21, 0x00	; 0
    3c6a:	60 e2       	ldi	r22, 0x20	; 32
    3c6c:	70 e0       	ldi	r23, 0x00	; 0
    3c6e:	85 e1       	ldi	r24, 0x15	; 21
    3c70:	91 e2       	ldi	r25, 0x21	; 33
    3c72:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN14frt_text_queueC1EjP8emstreamm>

frt_queue<uint32_t> xlocations(50,NULL,10);
    3c76:	0a e0       	ldi	r16, 0x0A	; 10
    3c78:	10 e0       	ldi	r17, 0x00	; 0
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	40 e0       	ldi	r20, 0x00	; 0
    3c80:	50 e0       	ldi	r21, 0x00	; 0
    3c82:	62 e3       	ldi	r22, 0x32	; 50
    3c84:	8b e0       	ldi	r24, 0x0B	; 11
    3c86:	91 e2       	ldi	r25, 0x21	; 33
    3c88:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> ylocations(50,NULL,10);
    3c8c:	0a e0       	ldi	r16, 0x0A	; 10
    3c8e:	10 e0       	ldi	r17, 0x00	; 0
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	40 e0       	ldi	r20, 0x00	; 0
    3c96:	50 e0       	ldi	r21, 0x00	; 0
    3c98:	62 e3       	ldi	r22, 0x32	; 50
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	91 e2       	ldi	r25, 0x21	; 33
    3c9e:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> zlocations(50,NULL,10);
    3ca2:	0a e0       	ldi	r16, 0x0A	; 10
    3ca4:	10 e0       	ldi	r17, 0x00	; 0
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	40 e0       	ldi	r20, 0x00	; 0
    3cac:	50 e0       	ldi	r21, 0x00	; 0
    3cae:	62 e3       	ldi	r22, 0x32	; 50
    3cb0:	87 ef       	ldi	r24, 0xF7	; 247
    3cb2:	90 e2       	ldi	r25, 0x20	; 32
    3cb4:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <_ZN9frt_queueImEC1EhP8emstreamm>
}

ISR(TCC0_OVF_vect)
{
  md_z->take_step();
    3cb8:	1f 91       	pop	r17
    3cba:	0f 91       	pop	r16
    3cbc:	08 95       	ret

00003cbe <pvPortMalloc>:
    3cbe:	0f 93       	push	r16
    3cc0:	1f 93       	push	r17
    3cc2:	cf 93       	push	r28
    3cc4:	df 93       	push	r29
    3cc6:	ec 01       	movw	r28, r24
    3cc8:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <vTaskSuspendAll>
    3ccc:	80 91 7b 21 	lds	r24, 0x217B	; 0x80217b <xHeapHasBeenInitialised.4146>
    3cd0:	81 11       	cpse	r24, r1
    3cd2:	1d c0       	rjmp	.+58     	; 0x3d0e <pvPortMalloc+0x50>
    3cd4:	a0 e8       	ldi	r26, 0x80	; 128
    3cd6:	b1 e2       	ldi	r27, 0x21	; 33
    3cd8:	e4 e8       	ldi	r30, 0x84	; 132
    3cda:	f1 e2       	ldi	r31, 0x21	; 33
    3cdc:	ed 93       	st	X+, r30
    3cde:	fc 93       	st	X, r31
    3ce0:	11 97       	sbiw	r26, 0x01	; 1
    3ce2:	12 96       	adiw	r26, 0x02	; 2
    3ce4:	1d 92       	st	X+, r1
    3ce6:	1c 92       	st	X, r1
    3ce8:	13 97       	sbiw	r26, 0x03	; 3
    3cea:	ac e7       	ldi	r26, 0x7C	; 124
    3cec:	b1 e2       	ldi	r27, 0x21	; 33
    3cee:	8f ef       	ldi	r24, 0xFF	; 255
    3cf0:	9f e1       	ldi	r25, 0x1F	; 31
    3cf2:	12 96       	adiw	r26, 0x02	; 2
    3cf4:	8d 93       	st	X+, r24
    3cf6:	9c 93       	st	X, r25
    3cf8:	13 97       	sbiw	r26, 0x03	; 3
    3cfa:	1d 92       	st	X+, r1
    3cfc:	1c 92       	st	X, r1
    3cfe:	11 97       	sbiw	r26, 0x01	; 1
    3d00:	82 83       	std	Z+2, r24	; 0x02
    3d02:	93 83       	std	Z+3, r25	; 0x03
    3d04:	a0 83       	st	Z, r26
    3d06:	b1 83       	std	Z+1, r27	; 0x01
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	80 93 7b 21 	sts	0x217B, r24	; 0x80217b <xHeapHasBeenInitialised.4146>
    3d0e:	20 97       	sbiw	r28, 0x00	; 0
    3d10:	09 f4       	brne	.+2      	; 0x3d14 <pvPortMalloc+0x56>
    3d12:	5f c0       	rjmp	.+190    	; 0x3dd2 <pvPortMalloc+0x114>
    3d14:	9e 01       	movw	r18, r28
    3d16:	2b 5f       	subi	r18, 0xFB	; 251
    3d18:	3f 4f       	sbci	r19, 0xFF	; 255
    3d1a:	24 96       	adiw	r28, 0x04	; 4
    3d1c:	ce 3f       	cpi	r28, 0xFE	; 254
    3d1e:	df 41       	sbci	r29, 0x1F	; 31
    3d20:	08 f0       	brcs	.+2      	; 0x3d24 <pvPortMalloc+0x66>
    3d22:	5a c0       	rjmp	.+180    	; 0x3dd8 <pvPortMalloc+0x11a>
    3d24:	e0 91 80 21 	lds	r30, 0x2180	; 0x802180 <xStart>
    3d28:	f0 91 81 21 	lds	r31, 0x2181	; 0x802181 <xStart+0x1>
    3d2c:	a0 e8       	ldi	r26, 0x80	; 128
    3d2e:	b1 e2       	ldi	r27, 0x21	; 33
    3d30:	02 c0       	rjmp	.+4      	; 0x3d36 <pvPortMalloc+0x78>
    3d32:	df 01       	movw	r26, r30
    3d34:	fc 01       	movw	r30, r24
    3d36:	82 81       	ldd	r24, Z+2	; 0x02
    3d38:	93 81       	ldd	r25, Z+3	; 0x03
    3d3a:	82 17       	cp	r24, r18
    3d3c:	93 07       	cpc	r25, r19
    3d3e:	20 f4       	brcc	.+8      	; 0x3d48 <pvPortMalloc+0x8a>
    3d40:	80 81       	ld	r24, Z
    3d42:	91 81       	ldd	r25, Z+1	; 0x01
    3d44:	00 97       	sbiw	r24, 0x00	; 0
    3d46:	a9 f7       	brne	.-22     	; 0x3d32 <pvPortMalloc+0x74>
    3d48:	c1 e2       	ldi	r28, 0x21	; 33
    3d4a:	ec 37       	cpi	r30, 0x7C	; 124
    3d4c:	fc 07       	cpc	r31, r28
    3d4e:	09 f4       	brne	.+2      	; 0x3d52 <pvPortMalloc+0x94>
    3d50:	46 c0       	rjmp	.+140    	; 0x3dde <pvPortMalloc+0x120>
    3d52:	cd 91       	ld	r28, X+
    3d54:	dc 91       	ld	r29, X
    3d56:	11 97       	sbiw	r26, 0x01	; 1
    3d58:	8e 01       	movw	r16, r28
    3d5a:	0b 5f       	subi	r16, 0xFB	; 251
    3d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d5e:	80 81       	ld	r24, Z
    3d60:	91 81       	ldd	r25, Z+1	; 0x01
    3d62:	8d 93       	st	X+, r24
    3d64:	9c 93       	st	X, r25
    3d66:	82 81       	ldd	r24, Z+2	; 0x02
    3d68:	93 81       	ldd	r25, Z+3	; 0x03
    3d6a:	82 1b       	sub	r24, r18
    3d6c:	93 0b       	sbc	r25, r19
    3d6e:	8b 30       	cpi	r24, 0x0B	; 11
    3d70:	91 05       	cpc	r25, r1
    3d72:	10 f1       	brcs	.+68     	; 0x3db8 <pvPortMalloc+0xfa>
    3d74:	bf 01       	movw	r22, r30
    3d76:	62 0f       	add	r22, r18
    3d78:	73 1f       	adc	r23, r19
    3d7a:	db 01       	movw	r26, r22
    3d7c:	12 96       	adiw	r26, 0x02	; 2
    3d7e:	8d 93       	st	X+, r24
    3d80:	9c 93       	st	X, r25
    3d82:	13 97       	sbiw	r26, 0x03	; 3
    3d84:	22 83       	std	Z+2, r18	; 0x02
    3d86:	33 83       	std	Z+3, r19	; 0x03
    3d88:	12 96       	adiw	r26, 0x02	; 2
    3d8a:	4d 91       	ld	r20, X+
    3d8c:	5c 91       	ld	r21, X
    3d8e:	13 97       	sbiw	r26, 0x03	; 3
    3d90:	80 e8       	ldi	r24, 0x80	; 128
    3d92:	91 e2       	ldi	r25, 0x21	; 33
    3d94:	01 c0       	rjmp	.+2      	; 0x3d98 <pvPortMalloc+0xda>
    3d96:	cd 01       	movw	r24, r26
    3d98:	ec 01       	movw	r28, r24
    3d9a:	a8 81       	ld	r26, Y
    3d9c:	b9 81       	ldd	r27, Y+1	; 0x01
    3d9e:	12 96       	adiw	r26, 0x02	; 2
    3da0:	2d 91       	ld	r18, X+
    3da2:	3c 91       	ld	r19, X
    3da4:	13 97       	sbiw	r26, 0x03	; 3
    3da6:	24 17       	cp	r18, r20
    3da8:	35 07       	cpc	r19, r21
    3daa:	a8 f3       	brcs	.-22     	; 0x3d96 <pvPortMalloc+0xd8>
    3dac:	eb 01       	movw	r28, r22
    3dae:	a8 83       	st	Y, r26
    3db0:	b9 83       	std	Y+1, r27	; 0x01
    3db2:	dc 01       	movw	r26, r24
    3db4:	6d 93       	st	X+, r22
    3db6:	7c 93       	st	X, r23
    3db8:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    3dbc:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    3dc0:	22 81       	ldd	r18, Z+2	; 0x02
    3dc2:	33 81       	ldd	r19, Z+3	; 0x03
    3dc4:	82 1b       	sub	r24, r18
    3dc6:	93 0b       	sbc	r25, r19
    3dc8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    3dcc:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    3dd0:	08 c0       	rjmp	.+16     	; 0x3de2 <pvPortMalloc+0x124>
    3dd2:	00 e0       	ldi	r16, 0x00	; 0
    3dd4:	10 e0       	ldi	r17, 0x00	; 0
    3dd6:	05 c0       	rjmp	.+10     	; 0x3de2 <pvPortMalloc+0x124>
    3dd8:	00 e0       	ldi	r16, 0x00	; 0
    3dda:	10 e0       	ldi	r17, 0x00	; 0
    3ddc:	02 c0       	rjmp	.+4      	; 0x3de2 <pvPortMalloc+0x124>
    3dde:	00 e0       	ldi	r16, 0x00	; 0
    3de0:	10 e0       	ldi	r17, 0x00	; 0
    3de2:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <xTaskResumeAll>
    3de6:	c8 01       	movw	r24, r16
    3de8:	df 91       	pop	r29
    3dea:	cf 91       	pop	r28
    3dec:	1f 91       	pop	r17
    3dee:	0f 91       	pop	r16
    3df0:	08 95       	ret

00003df2 <vPortFree>:
    3df2:	0f 93       	push	r16
    3df4:	1f 93       	push	r17
    3df6:	cf 93       	push	r28
    3df8:	df 93       	push	r29
    3dfa:	00 97       	sbiw	r24, 0x00	; 0
    3dfc:	41 f1       	breq	.+80     	; 0x3e4e <vPortFree+0x5c>
    3dfe:	ec 01       	movw	r28, r24
    3e00:	8c 01       	movw	r16, r24
    3e02:	05 50       	subi	r16, 0x05	; 5
    3e04:	11 09       	sbc	r17, r1
    3e06:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <vTaskSuspendAll>
    3e0a:	f8 01       	movw	r30, r16
    3e0c:	42 81       	ldd	r20, Z+2	; 0x02
    3e0e:	53 81       	ldd	r21, Z+3	; 0x03
    3e10:	a0 e8       	ldi	r26, 0x80	; 128
    3e12:	b1 e2       	ldi	r27, 0x21	; 33
    3e14:	01 c0       	rjmp	.+2      	; 0x3e18 <vPortFree+0x26>
    3e16:	df 01       	movw	r26, r30
    3e18:	ed 91       	ld	r30, X+
    3e1a:	fc 91       	ld	r31, X
    3e1c:	11 97       	sbiw	r26, 0x01	; 1
    3e1e:	22 81       	ldd	r18, Z+2	; 0x02
    3e20:	33 81       	ldd	r19, Z+3	; 0x03
    3e22:	24 17       	cp	r18, r20
    3e24:	35 07       	cpc	r19, r21
    3e26:	b8 f3       	brcs	.-18     	; 0x3e16 <vPortFree+0x24>
    3e28:	25 97       	sbiw	r28, 0x05	; 5
    3e2a:	e8 83       	st	Y, r30
    3e2c:	f9 83       	std	Y+1, r31	; 0x01
    3e2e:	0d 93       	st	X+, r16
    3e30:	1c 93       	st	X, r17
    3e32:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    3e36:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    3e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e3e:	82 0f       	add	r24, r18
    3e40:	93 1f       	adc	r25, r19
    3e42:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    3e46:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    3e4a:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <xTaskResumeAll>
    3e4e:	df 91       	pop	r29
    3e50:	cf 91       	pop	r28
    3e52:	1f 91       	pop	r17
    3e54:	0f 91       	pop	r16
    3e56:	08 95       	ret

00003e58 <vListInitialise>:
    3e58:	fc 01       	movw	r30, r24
    3e5a:	03 96       	adiw	r24, 0x03	; 3
    3e5c:	81 83       	std	Z+1, r24	; 0x01
    3e5e:	92 83       	std	Z+2, r25	; 0x02
    3e60:	4f ef       	ldi	r20, 0xFF	; 255
    3e62:	5f ef       	ldi	r21, 0xFF	; 255
    3e64:	ba 01       	movw	r22, r20
    3e66:	43 83       	std	Z+3, r20	; 0x03
    3e68:	54 83       	std	Z+4, r21	; 0x04
    3e6a:	65 83       	std	Z+5, r22	; 0x05
    3e6c:	76 83       	std	Z+6, r23	; 0x06
    3e6e:	87 83       	std	Z+7, r24	; 0x07
    3e70:	90 87       	std	Z+8, r25	; 0x08
    3e72:	81 87       	std	Z+9, r24	; 0x09
    3e74:	92 87       	std	Z+10, r25	; 0x0a
    3e76:	10 82       	st	Z, r1
    3e78:	08 95       	ret

00003e7a <vListInitialiseItem>:
    3e7a:	fc 01       	movw	r30, r24
    3e7c:	12 86       	std	Z+10, r1	; 0x0a
    3e7e:	13 86       	std	Z+11, r1	; 0x0b
    3e80:	08 95       	ret

00003e82 <vListInsertEnd>:
    3e82:	cf 93       	push	r28
    3e84:	df 93       	push	r29
    3e86:	fc 01       	movw	r30, r24
    3e88:	db 01       	movw	r26, r22
    3e8a:	21 81       	ldd	r18, Z+1	; 0x01
    3e8c:	32 81       	ldd	r19, Z+2	; 0x02
    3e8e:	e9 01       	movw	r28, r18
    3e90:	8c 81       	ldd	r24, Y+4	; 0x04
    3e92:	9d 81       	ldd	r25, Y+5	; 0x05
    3e94:	14 96       	adiw	r26, 0x04	; 4
    3e96:	8d 93       	st	X+, r24
    3e98:	9c 93       	st	X, r25
    3e9a:	15 97       	sbiw	r26, 0x05	; 5
    3e9c:	81 81       	ldd	r24, Z+1	; 0x01
    3e9e:	92 81       	ldd	r25, Z+2	; 0x02
    3ea0:	16 96       	adiw	r26, 0x06	; 6
    3ea2:	8d 93       	st	X+, r24
    3ea4:	9c 93       	st	X, r25
    3ea6:	17 97       	sbiw	r26, 0x07	; 7
    3ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    3eaa:	9d 81       	ldd	r25, Y+5	; 0x05
    3eac:	ec 01       	movw	r28, r24
    3eae:	6e 83       	std	Y+6, r22	; 0x06
    3eb0:	7f 83       	std	Y+7, r23	; 0x07
    3eb2:	e9 01       	movw	r28, r18
    3eb4:	6c 83       	std	Y+4, r22	; 0x04
    3eb6:	7d 83       	std	Y+5, r23	; 0x05
    3eb8:	61 83       	std	Z+1, r22	; 0x01
    3eba:	72 83       	std	Z+2, r23	; 0x02
    3ebc:	1a 96       	adiw	r26, 0x0a	; 10
    3ebe:	ed 93       	st	X+, r30
    3ec0:	fc 93       	st	X, r31
    3ec2:	1b 97       	sbiw	r26, 0x0b	; 11
    3ec4:	80 81       	ld	r24, Z
    3ec6:	8f 5f       	subi	r24, 0xFF	; 255
    3ec8:	80 83       	st	Z, r24
    3eca:	df 91       	pop	r29
    3ecc:	cf 91       	pop	r28
    3ece:	08 95       	ret

00003ed0 <vListInsert>:
    3ed0:	0f 93       	push	r16
    3ed2:	1f 93       	push	r17
    3ed4:	cf 93       	push	r28
    3ed6:	df 93       	push	r29
    3ed8:	eb 01       	movw	r28, r22
    3eda:	08 81       	ld	r16, Y
    3edc:	19 81       	ldd	r17, Y+1	; 0x01
    3ede:	2a 81       	ldd	r18, Y+2	; 0x02
    3ee0:	3b 81       	ldd	r19, Y+3	; 0x03
    3ee2:	0f 3f       	cpi	r16, 0xFF	; 255
    3ee4:	4f ef       	ldi	r20, 0xFF	; 255
    3ee6:	14 07       	cpc	r17, r20
    3ee8:	24 07       	cpc	r18, r20
    3eea:	34 07       	cpc	r19, r20
    3eec:	31 f4       	brne	.+12     	; 0x3efa <vListInsert+0x2a>
    3eee:	dc 01       	movw	r26, r24
    3ef0:	19 96       	adiw	r26, 0x09	; 9
    3ef2:	ed 91       	ld	r30, X+
    3ef4:	fc 91       	ld	r31, X
    3ef6:	1a 97       	sbiw	r26, 0x0a	; 10
    3ef8:	1f c0       	rjmp	.+62     	; 0x3f38 <vListInsert+0x68>
    3efa:	fc 01       	movw	r30, r24
    3efc:	33 96       	adiw	r30, 0x03	; 3
    3efe:	dc 01       	movw	r26, r24
    3f00:	17 96       	adiw	r26, 0x07	; 7
    3f02:	4d 91       	ld	r20, X+
    3f04:	5c 91       	ld	r21, X
    3f06:	18 97       	sbiw	r26, 0x08	; 8
    3f08:	da 01       	movw	r26, r20
    3f0a:	4d 91       	ld	r20, X+
    3f0c:	5d 91       	ld	r21, X+
    3f0e:	6d 91       	ld	r22, X+
    3f10:	7c 91       	ld	r23, X
    3f12:	04 17       	cp	r16, r20
    3f14:	15 07       	cpc	r17, r21
    3f16:	26 07       	cpc	r18, r22
    3f18:	37 07       	cpc	r19, r23
    3f1a:	70 f0       	brcs	.+28     	; 0x3f38 <vListInsert+0x68>
    3f1c:	04 80       	ldd	r0, Z+4	; 0x04
    3f1e:	f5 81       	ldd	r31, Z+5	; 0x05
    3f20:	e0 2d       	mov	r30, r0
    3f22:	a4 81       	ldd	r26, Z+4	; 0x04
    3f24:	b5 81       	ldd	r27, Z+5	; 0x05
    3f26:	4d 91       	ld	r20, X+
    3f28:	5d 91       	ld	r21, X+
    3f2a:	6d 91       	ld	r22, X+
    3f2c:	7c 91       	ld	r23, X
    3f2e:	04 17       	cp	r16, r20
    3f30:	15 07       	cpc	r17, r21
    3f32:	26 07       	cpc	r18, r22
    3f34:	37 07       	cpc	r19, r23
    3f36:	90 f7       	brcc	.-28     	; 0x3f1c <vListInsert+0x4c>
    3f38:	a4 81       	ldd	r26, Z+4	; 0x04
    3f3a:	b5 81       	ldd	r27, Z+5	; 0x05
    3f3c:	ac 83       	std	Y+4, r26	; 0x04
    3f3e:	bd 83       	std	Y+5, r27	; 0x05
    3f40:	16 96       	adiw	r26, 0x06	; 6
    3f42:	cd 93       	st	X+, r28
    3f44:	dc 93       	st	X, r29
    3f46:	17 97       	sbiw	r26, 0x07	; 7
    3f48:	ee 83       	std	Y+6, r30	; 0x06
    3f4a:	ff 83       	std	Y+7, r31	; 0x07
    3f4c:	c4 83       	std	Z+4, r28	; 0x04
    3f4e:	d5 83       	std	Z+5, r29	; 0x05
    3f50:	8a 87       	std	Y+10, r24	; 0x0a
    3f52:	9b 87       	std	Y+11, r25	; 0x0b
    3f54:	fc 01       	movw	r30, r24
    3f56:	20 81       	ld	r18, Z
    3f58:	2f 5f       	subi	r18, 0xFF	; 255
    3f5a:	20 83       	st	Z, r18
    3f5c:	df 91       	pop	r29
    3f5e:	cf 91       	pop	r28
    3f60:	1f 91       	pop	r17
    3f62:	0f 91       	pop	r16
    3f64:	08 95       	ret

00003f66 <vListRemove>:
    3f66:	fc 01       	movw	r30, r24
    3f68:	a4 81       	ldd	r26, Z+4	; 0x04
    3f6a:	b5 81       	ldd	r27, Z+5	; 0x05
    3f6c:	86 81       	ldd	r24, Z+6	; 0x06
    3f6e:	97 81       	ldd	r25, Z+7	; 0x07
    3f70:	16 96       	adiw	r26, 0x06	; 6
    3f72:	8d 93       	st	X+, r24
    3f74:	9c 93       	st	X, r25
    3f76:	17 97       	sbiw	r26, 0x07	; 7
    3f78:	a6 81       	ldd	r26, Z+6	; 0x06
    3f7a:	b7 81       	ldd	r27, Z+7	; 0x07
    3f7c:	84 81       	ldd	r24, Z+4	; 0x04
    3f7e:	95 81       	ldd	r25, Z+5	; 0x05
    3f80:	14 96       	adiw	r26, 0x04	; 4
    3f82:	8d 93       	st	X+, r24
    3f84:	9c 93       	st	X, r25
    3f86:	15 97       	sbiw	r26, 0x05	; 5
    3f88:	a2 85       	ldd	r26, Z+10	; 0x0a
    3f8a:	b3 85       	ldd	r27, Z+11	; 0x0b
    3f8c:	11 96       	adiw	r26, 0x01	; 1
    3f8e:	8d 91       	ld	r24, X+
    3f90:	9c 91       	ld	r25, X
    3f92:	12 97       	sbiw	r26, 0x02	; 2
    3f94:	e8 17       	cp	r30, r24
    3f96:	f9 07       	cpc	r31, r25
    3f98:	31 f4       	brne	.+12     	; 0x3fa6 <vListRemove+0x40>
    3f9a:	86 81       	ldd	r24, Z+6	; 0x06
    3f9c:	97 81       	ldd	r25, Z+7	; 0x07
    3f9e:	11 96       	adiw	r26, 0x01	; 1
    3fa0:	8d 93       	st	X+, r24
    3fa2:	9c 93       	st	X, r25
    3fa4:	12 97       	sbiw	r26, 0x02	; 2
    3fa6:	12 86       	std	Z+10, r1	; 0x0a
    3fa8:	13 86       	std	Z+11, r1	; 0x0b
    3faa:	8c 91       	ld	r24, X
    3fac:	81 50       	subi	r24, 0x01	; 1
    3fae:	8c 93       	st	X, r24
    3fb0:	08 95       	ret

00003fb2 <pxPortInitialiseStack>:
    3fb2:	80 93 0b 42 	sts	0x420B, r24	; 0x80420b <portStackTopForTask>
    3fb6:	90 93 0c 42 	sts	0x420C, r25	; 0x80420c <portStackTopForTask+0x1>
    3fba:	31 e1       	ldi	r19, 0x11	; 17
    3fbc:	fc 01       	movw	r30, r24
    3fbe:	30 83       	st	Z, r19
    3fc0:	31 97       	sbiw	r30, 0x01	; 1
    3fc2:	22 e2       	ldi	r18, 0x22	; 34
    3fc4:	20 83       	st	Z, r18
    3fc6:	31 97       	sbiw	r30, 0x01	; 1
    3fc8:	a3 e3       	ldi	r26, 0x33	; 51
    3fca:	a0 83       	st	Z, r26
    3fcc:	31 97       	sbiw	r30, 0x01	; 1
    3fce:	60 83       	st	Z, r22
    3fd0:	31 97       	sbiw	r30, 0x01	; 1
    3fd2:	70 83       	st	Z, r23
    3fd4:	31 97       	sbiw	r30, 0x01	; 1
    3fd6:	10 82       	st	Z, r1
    3fd8:	31 97       	sbiw	r30, 0x01	; 1
    3fda:	10 82       	st	Z, r1
    3fdc:	31 97       	sbiw	r30, 0x01	; 1
    3fde:	60 e8       	ldi	r22, 0x80	; 128
    3fe0:	60 83       	st	Z, r22
    3fe2:	31 97       	sbiw	r30, 0x01	; 1
    3fe4:	10 82       	st	Z, r1
    3fe6:	31 97       	sbiw	r30, 0x01	; 1
    3fe8:	10 82       	st	Z, r1
    3fea:	31 97       	sbiw	r30, 0x01	; 1
    3fec:	10 82       	st	Z, r1
    3fee:	31 97       	sbiw	r30, 0x01	; 1
    3ff0:	62 e0       	ldi	r22, 0x02	; 2
    3ff2:	60 83       	st	Z, r22
    3ff4:	31 97       	sbiw	r30, 0x01	; 1
    3ff6:	63 e0       	ldi	r22, 0x03	; 3
    3ff8:	60 83       	st	Z, r22
    3ffa:	31 97       	sbiw	r30, 0x01	; 1
    3ffc:	64 e0       	ldi	r22, 0x04	; 4
    3ffe:	60 83       	st	Z, r22
    4000:	31 97       	sbiw	r30, 0x01	; 1
    4002:	65 e0       	ldi	r22, 0x05	; 5
    4004:	60 83       	st	Z, r22
    4006:	31 97       	sbiw	r30, 0x01	; 1
    4008:	66 e0       	ldi	r22, 0x06	; 6
    400a:	60 83       	st	Z, r22
    400c:	31 97       	sbiw	r30, 0x01	; 1
    400e:	67 e0       	ldi	r22, 0x07	; 7
    4010:	60 83       	st	Z, r22
    4012:	31 97       	sbiw	r30, 0x01	; 1
    4014:	68 e0       	ldi	r22, 0x08	; 8
    4016:	60 83       	st	Z, r22
    4018:	31 97       	sbiw	r30, 0x01	; 1
    401a:	69 e0       	ldi	r22, 0x09	; 9
    401c:	60 83       	st	Z, r22
    401e:	31 97       	sbiw	r30, 0x01	; 1
    4020:	60 e1       	ldi	r22, 0x10	; 16
    4022:	60 83       	st	Z, r22
    4024:	31 97       	sbiw	r30, 0x01	; 1
    4026:	30 83       	st	Z, r19
    4028:	31 97       	sbiw	r30, 0x01	; 1
    402a:	32 e1       	ldi	r19, 0x12	; 18
    402c:	30 83       	st	Z, r19
    402e:	31 97       	sbiw	r30, 0x01	; 1
    4030:	33 e1       	ldi	r19, 0x13	; 19
    4032:	30 83       	st	Z, r19
    4034:	31 97       	sbiw	r30, 0x01	; 1
    4036:	34 e1       	ldi	r19, 0x14	; 20
    4038:	30 83       	st	Z, r19
    403a:	31 97       	sbiw	r30, 0x01	; 1
    403c:	35 e1       	ldi	r19, 0x15	; 21
    403e:	30 83       	st	Z, r19
    4040:	31 97       	sbiw	r30, 0x01	; 1
    4042:	36 e1       	ldi	r19, 0x16	; 22
    4044:	30 83       	st	Z, r19
    4046:	31 97       	sbiw	r30, 0x01	; 1
    4048:	37 e1       	ldi	r19, 0x17	; 23
    404a:	30 83       	st	Z, r19
    404c:	31 97       	sbiw	r30, 0x01	; 1
    404e:	38 e1       	ldi	r19, 0x18	; 24
    4050:	30 83       	st	Z, r19
    4052:	31 97       	sbiw	r30, 0x01	; 1
    4054:	39 e1       	ldi	r19, 0x19	; 25
    4056:	30 83       	st	Z, r19
    4058:	31 97       	sbiw	r30, 0x01	; 1
    405a:	30 e2       	ldi	r19, 0x20	; 32
    405c:	30 83       	st	Z, r19
    405e:	31 97       	sbiw	r30, 0x01	; 1
    4060:	31 e2       	ldi	r19, 0x21	; 33
    4062:	30 83       	st	Z, r19
    4064:	31 97       	sbiw	r30, 0x01	; 1
    4066:	20 83       	st	Z, r18
    4068:	31 97       	sbiw	r30, 0x01	; 1
    406a:	23 e2       	ldi	r18, 0x23	; 35
    406c:	20 83       	st	Z, r18
    406e:	31 97       	sbiw	r30, 0x01	; 1
    4070:	40 83       	st	Z, r20
    4072:	31 97       	sbiw	r30, 0x01	; 1
    4074:	50 83       	st	Z, r21
    4076:	31 97       	sbiw	r30, 0x01	; 1
    4078:	26 e2       	ldi	r18, 0x26	; 38
    407a:	20 83       	st	Z, r18
    407c:	31 97       	sbiw	r30, 0x01	; 1
    407e:	27 e2       	ldi	r18, 0x27	; 39
    4080:	20 83       	st	Z, r18
    4082:	31 97       	sbiw	r30, 0x01	; 1
    4084:	28 e2       	ldi	r18, 0x28	; 40
    4086:	20 83       	st	Z, r18
    4088:	31 97       	sbiw	r30, 0x01	; 1
    408a:	29 e2       	ldi	r18, 0x29	; 41
    408c:	20 83       	st	Z, r18
    408e:	31 97       	sbiw	r30, 0x01	; 1
    4090:	20 e3       	ldi	r18, 0x30	; 48
    4092:	20 83       	st	Z, r18
    4094:	31 97       	sbiw	r30, 0x01	; 1
    4096:	21 e3       	ldi	r18, 0x31	; 49
    4098:	20 83       	st	Z, r18
    409a:	89 97       	sbiw	r24, 0x29	; 41
    409c:	08 95       	ret

0000409e <xPortStartScheduler>:
    409e:	8c e7       	ldi	r24, 0x7C	; 124
    40a0:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <__TEXT_REGION_LENGTH__+0x700a69>
    40a4:	8f ef       	ldi	r24, 0xFF	; 255
    40a6:	80 93 68 0a 	sts	0x0A68, r24	; 0x800a68 <__TEXT_REGION_LENGTH__+0x700a68>
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
    40b0:	81 e1       	ldi	r24, 0x11	; 17
    40b2:	80 93 41 0a 	sts	0x0A41, r24	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
    40b6:	83 e0       	ldi	r24, 0x03	; 3
    40b8:	80 93 47 0a 	sts	0x0A47, r24	; 0x800a47 <__TEXT_REGION_LENGTH__+0x700a47>
    40bc:	a0 91 e3 41 	lds	r26, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    40c0:	b0 91 e4 41 	lds	r27, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    40c4:	cd 91       	ld	r28, X+
    40c6:	cd bf       	out	0x3d, r28	; 61
    40c8:	dd 91       	ld	r29, X+
    40ca:	de bf       	out	0x3e, r29	; 62
    40cc:	ff 91       	pop	r31
    40ce:	ef 91       	pop	r30
    40d0:	df 91       	pop	r29
    40d2:	cf 91       	pop	r28
    40d4:	bf 91       	pop	r27
    40d6:	af 91       	pop	r26
    40d8:	9f 91       	pop	r25
    40da:	8f 91       	pop	r24
    40dc:	7f 91       	pop	r23
    40de:	6f 91       	pop	r22
    40e0:	5f 91       	pop	r21
    40e2:	4f 91       	pop	r20
    40e4:	3f 91       	pop	r19
    40e6:	2f 91       	pop	r18
    40e8:	1f 91       	pop	r17
    40ea:	0f 91       	pop	r16
    40ec:	ff 90       	pop	r15
    40ee:	ef 90       	pop	r14
    40f0:	df 90       	pop	r13
    40f2:	cf 90       	pop	r12
    40f4:	bf 90       	pop	r11
    40f6:	af 90       	pop	r10
    40f8:	9f 90       	pop	r9
    40fa:	8f 90       	pop	r8
    40fc:	7f 90       	pop	r7
    40fe:	6f 90       	pop	r6
    4100:	5f 90       	pop	r5
    4102:	4f 90       	pop	r4
    4104:	3f 90       	pop	r3
    4106:	2f 90       	pop	r2
    4108:	1f 90       	pop	r1
    410a:	0f 90       	pop	r0
    410c:	0c be       	out	0x3c, r0	; 60
    410e:	0f 90       	pop	r0
    4110:	0b be       	out	0x3b, r0	; 59
    4112:	0f 90       	pop	r0
    4114:	0f be       	out	0x3f, r0	; 63
    4116:	0f 90       	pop	r0
    4118:	08 95       	ret
    411a:	81 e0       	ldi	r24, 0x01	; 1
    411c:	08 95       	ret

0000411e <vPortYield>:
    411e:	0f 92       	push	r0
    4120:	0f b6       	in	r0, 0x3f	; 63
    4122:	f8 94       	cli
    4124:	0f 92       	push	r0
    4126:	0b b6       	in	r0, 0x3b	; 59
    4128:	0f 92       	push	r0
    412a:	0c b6       	in	r0, 0x3c	; 60
    412c:	0f 92       	push	r0
    412e:	1f 92       	push	r1
    4130:	11 24       	eor	r1, r1
    4132:	2f 92       	push	r2
    4134:	3f 92       	push	r3
    4136:	4f 92       	push	r4
    4138:	5f 92       	push	r5
    413a:	6f 92       	push	r6
    413c:	7f 92       	push	r7
    413e:	8f 92       	push	r8
    4140:	9f 92       	push	r9
    4142:	af 92       	push	r10
    4144:	bf 92       	push	r11
    4146:	cf 92       	push	r12
    4148:	df 92       	push	r13
    414a:	ef 92       	push	r14
    414c:	ff 92       	push	r15
    414e:	0f 93       	push	r16
    4150:	1f 93       	push	r17
    4152:	2f 93       	push	r18
    4154:	3f 93       	push	r19
    4156:	4f 93       	push	r20
    4158:	5f 93       	push	r21
    415a:	6f 93       	push	r22
    415c:	7f 93       	push	r23
    415e:	8f 93       	push	r24
    4160:	9f 93       	push	r25
    4162:	af 93       	push	r26
    4164:	bf 93       	push	r27
    4166:	cf 93       	push	r28
    4168:	df 93       	push	r29
    416a:	ef 93       	push	r30
    416c:	ff 93       	push	r31
    416e:	a0 91 e3 41 	lds	r26, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4172:	b0 91 e4 41 	lds	r27, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4176:	0d b6       	in	r0, 0x3d	; 61
    4178:	0d 92       	st	X+, r0
    417a:	0e b6       	in	r0, 0x3e	; 62
    417c:	0d 92       	st	X+, r0
    417e:	0e 94 06 28 	call	0x500c	; 0x500c <vTaskSwitchContext>
    4182:	a0 91 e3 41 	lds	r26, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4186:	b0 91 e4 41 	lds	r27, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    418a:	cd 91       	ld	r28, X+
    418c:	cd bf       	out	0x3d, r28	; 61
    418e:	dd 91       	ld	r29, X+
    4190:	de bf       	out	0x3e, r29	; 62
    4192:	ff 91       	pop	r31
    4194:	ef 91       	pop	r30
    4196:	df 91       	pop	r29
    4198:	cf 91       	pop	r28
    419a:	bf 91       	pop	r27
    419c:	af 91       	pop	r26
    419e:	9f 91       	pop	r25
    41a0:	8f 91       	pop	r24
    41a2:	7f 91       	pop	r23
    41a4:	6f 91       	pop	r22
    41a6:	5f 91       	pop	r21
    41a8:	4f 91       	pop	r20
    41aa:	3f 91       	pop	r19
    41ac:	2f 91       	pop	r18
    41ae:	1f 91       	pop	r17
    41b0:	0f 91       	pop	r16
    41b2:	ff 90       	pop	r15
    41b4:	ef 90       	pop	r14
    41b6:	df 90       	pop	r13
    41b8:	cf 90       	pop	r12
    41ba:	bf 90       	pop	r11
    41bc:	af 90       	pop	r10
    41be:	9f 90       	pop	r9
    41c0:	8f 90       	pop	r8
    41c2:	7f 90       	pop	r7
    41c4:	6f 90       	pop	r6
    41c6:	5f 90       	pop	r5
    41c8:	4f 90       	pop	r4
    41ca:	3f 90       	pop	r3
    41cc:	2f 90       	pop	r2
    41ce:	1f 90       	pop	r1
    41d0:	0f 90       	pop	r0
    41d2:	0c be       	out	0x3c, r0	; 60
    41d4:	0f 90       	pop	r0
    41d6:	0b be       	out	0x3b, r0	; 59
    41d8:	0f 90       	pop	r0
    41da:	0f be       	out	0x3f, r0	; 63
    41dc:	0f 90       	pop	r0
    41de:	08 95       	ret

000041e0 <vPortYieldFromTick>:
    41e0:	0f 92       	push	r0
    41e2:	0f b6       	in	r0, 0x3f	; 63
    41e4:	f8 94       	cli
    41e6:	0f 92       	push	r0
    41e8:	0b b6       	in	r0, 0x3b	; 59
    41ea:	0f 92       	push	r0
    41ec:	0c b6       	in	r0, 0x3c	; 60
    41ee:	0f 92       	push	r0
    41f0:	1f 92       	push	r1
    41f2:	11 24       	eor	r1, r1
    41f4:	2f 92       	push	r2
    41f6:	3f 92       	push	r3
    41f8:	4f 92       	push	r4
    41fa:	5f 92       	push	r5
    41fc:	6f 92       	push	r6
    41fe:	7f 92       	push	r7
    4200:	8f 92       	push	r8
    4202:	9f 92       	push	r9
    4204:	af 92       	push	r10
    4206:	bf 92       	push	r11
    4208:	cf 92       	push	r12
    420a:	df 92       	push	r13
    420c:	ef 92       	push	r14
    420e:	ff 92       	push	r15
    4210:	0f 93       	push	r16
    4212:	1f 93       	push	r17
    4214:	2f 93       	push	r18
    4216:	3f 93       	push	r19
    4218:	4f 93       	push	r20
    421a:	5f 93       	push	r21
    421c:	6f 93       	push	r22
    421e:	7f 93       	push	r23
    4220:	8f 93       	push	r24
    4222:	9f 93       	push	r25
    4224:	af 93       	push	r26
    4226:	bf 93       	push	r27
    4228:	cf 93       	push	r28
    422a:	df 93       	push	r29
    422c:	ef 93       	push	r30
    422e:	ff 93       	push	r31
    4230:	a0 91 e3 41 	lds	r26, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4234:	b0 91 e4 41 	lds	r27, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4238:	0d b6       	in	r0, 0x3d	; 61
    423a:	0d 92       	st	X+, r0
    423c:	0e b6       	in	r0, 0x3e	; 62
    423e:	0d 92       	st	X+, r0
    4240:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <vTaskIncrementTick>
    4244:	0e 94 06 28 	call	0x500c	; 0x500c <vTaskSwitchContext>
    4248:	a0 91 e3 41 	lds	r26, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    424c:	b0 91 e4 41 	lds	r27, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4250:	cd 91       	ld	r28, X+
    4252:	cd bf       	out	0x3d, r28	; 61
    4254:	dd 91       	ld	r29, X+
    4256:	de bf       	out	0x3e, r29	; 62
    4258:	ff 91       	pop	r31
    425a:	ef 91       	pop	r30
    425c:	df 91       	pop	r29
    425e:	cf 91       	pop	r28
    4260:	bf 91       	pop	r27
    4262:	af 91       	pop	r26
    4264:	9f 91       	pop	r25
    4266:	8f 91       	pop	r24
    4268:	7f 91       	pop	r23
    426a:	6f 91       	pop	r22
    426c:	5f 91       	pop	r21
    426e:	4f 91       	pop	r20
    4270:	3f 91       	pop	r19
    4272:	2f 91       	pop	r18
    4274:	1f 91       	pop	r17
    4276:	0f 91       	pop	r16
    4278:	ff 90       	pop	r15
    427a:	ef 90       	pop	r14
    427c:	df 90       	pop	r13
    427e:	cf 90       	pop	r12
    4280:	bf 90       	pop	r11
    4282:	af 90       	pop	r10
    4284:	9f 90       	pop	r9
    4286:	8f 90       	pop	r8
    4288:	7f 90       	pop	r7
    428a:	6f 90       	pop	r6
    428c:	5f 90       	pop	r5
    428e:	4f 90       	pop	r4
    4290:	3f 90       	pop	r3
    4292:	2f 90       	pop	r2
    4294:	1f 90       	pop	r1
    4296:	0f 90       	pop	r0
    4298:	0c be       	out	0x3c, r0	; 60
    429a:	0f 90       	pop	r0
    429c:	0b be       	out	0x3b, r0	; 59
    429e:	0f 90       	pop	r0
    42a0:	0f be       	out	0x3f, r0	; 63
    42a2:	0f 90       	pop	r0
    42a4:	08 95       	ret

000042a6 <__vector_55>:
    42a6:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <vPortYieldFromTick>
    42aa:	18 95       	reti

000042ac <prvCopyDataToQueue>:
    42ac:	cf 93       	push	r28
    42ae:	df 93       	push	r29
    42b0:	ec 01       	movw	r28, r24
    42b2:	88 a1       	ldd	r24, Y+32	; 0x20
    42b4:	81 11       	cpse	r24, r1
    42b6:	0b c0       	rjmp	.+22     	; 0x42ce <prvCopyDataToQueue+0x22>
    42b8:	88 81       	ld	r24, Y
    42ba:	99 81       	ldd	r25, Y+1	; 0x01
    42bc:	89 2b       	or	r24, r25
    42be:	e1 f5       	brne	.+120    	; 0x4338 <prvCopyDataToQueue+0x8c>
    42c0:	8a 81       	ldd	r24, Y+2	; 0x02
    42c2:	9b 81       	ldd	r25, Y+3	; 0x03
    42c4:	0e 94 c1 29 	call	0x5382	; 0x5382 <vTaskPriorityDisinherit>
    42c8:	1a 82       	std	Y+2, r1	; 0x02
    42ca:	1b 82       	std	Y+3, r1	; 0x03
    42cc:	35 c0       	rjmp	.+106    	; 0x4338 <prvCopyDataToQueue+0x8c>
    42ce:	41 11       	cpse	r20, r1
    42d0:	17 c0       	rjmp	.+46     	; 0x4300 <prvCopyDataToQueue+0x54>
    42d2:	48 2f       	mov	r20, r24
    42d4:	50 e0       	ldi	r21, 0x00	; 0
    42d6:	8c 81       	ldd	r24, Y+4	; 0x04
    42d8:	9d 81       	ldd	r25, Y+5	; 0x05
    42da:	0e 94 a8 35 	call	0x6b50	; 0x6b50 <memcpy>
    42de:	28 a1       	ldd	r18, Y+32	; 0x20
    42e0:	8c 81       	ldd	r24, Y+4	; 0x04
    42e2:	9d 81       	ldd	r25, Y+5	; 0x05
    42e4:	82 0f       	add	r24, r18
    42e6:	91 1d       	adc	r25, r1
    42e8:	8c 83       	std	Y+4, r24	; 0x04
    42ea:	9d 83       	std	Y+5, r25	; 0x05
    42ec:	2a 81       	ldd	r18, Y+2	; 0x02
    42ee:	3b 81       	ldd	r19, Y+3	; 0x03
    42f0:	82 17       	cp	r24, r18
    42f2:	93 07       	cpc	r25, r19
    42f4:	08 f1       	brcs	.+66     	; 0x4338 <prvCopyDataToQueue+0x8c>
    42f6:	88 81       	ld	r24, Y
    42f8:	99 81       	ldd	r25, Y+1	; 0x01
    42fa:	8c 83       	std	Y+4, r24	; 0x04
    42fc:	9d 83       	std	Y+5, r25	; 0x05
    42fe:	1c c0       	rjmp	.+56     	; 0x4338 <prvCopyDataToQueue+0x8c>
    4300:	48 2f       	mov	r20, r24
    4302:	50 e0       	ldi	r21, 0x00	; 0
    4304:	8e 81       	ldd	r24, Y+6	; 0x06
    4306:	9f 81       	ldd	r25, Y+7	; 0x07
    4308:	0e 94 a8 35 	call	0x6b50	; 0x6b50 <memcpy>
    430c:	88 a1       	ldd	r24, Y+32	; 0x20
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	91 95       	neg	r25
    4312:	81 95       	neg	r24
    4314:	91 09       	sbc	r25, r1
    4316:	2e 81       	ldd	r18, Y+6	; 0x06
    4318:	3f 81       	ldd	r19, Y+7	; 0x07
    431a:	28 0f       	add	r18, r24
    431c:	39 1f       	adc	r19, r25
    431e:	2e 83       	std	Y+6, r18	; 0x06
    4320:	3f 83       	std	Y+7, r19	; 0x07
    4322:	48 81       	ld	r20, Y
    4324:	59 81       	ldd	r21, Y+1	; 0x01
    4326:	24 17       	cp	r18, r20
    4328:	35 07       	cpc	r19, r21
    432a:	30 f4       	brcc	.+12     	; 0x4338 <prvCopyDataToQueue+0x8c>
    432c:	2a 81       	ldd	r18, Y+2	; 0x02
    432e:	3b 81       	ldd	r19, Y+3	; 0x03
    4330:	82 0f       	add	r24, r18
    4332:	93 1f       	adc	r25, r19
    4334:	8e 83       	std	Y+6, r24	; 0x06
    4336:	9f 83       	std	Y+7, r25	; 0x07
    4338:	8e 8d       	ldd	r24, Y+30	; 0x1e
    433a:	8f 5f       	subi	r24, 0xFF	; 255
    433c:	8e 8f       	std	Y+30, r24	; 0x1e
    433e:	df 91       	pop	r29
    4340:	cf 91       	pop	r28
    4342:	08 95       	ret

00004344 <prvCopyDataFromQueue>:
    4344:	fc 01       	movw	r30, r24
    4346:	80 81       	ld	r24, Z
    4348:	91 81       	ldd	r25, Z+1	; 0x01
    434a:	00 97       	sbiw	r24, 0x00	; 0
    434c:	a1 f0       	breq	.+40     	; 0x4376 <prvCopyDataFromQueue+0x32>
    434e:	40 a1       	ldd	r20, Z+32	; 0x20
    4350:	50 e0       	ldi	r21, 0x00	; 0
    4352:	26 81       	ldd	r18, Z+6	; 0x06
    4354:	37 81       	ldd	r19, Z+7	; 0x07
    4356:	24 0f       	add	r18, r20
    4358:	35 1f       	adc	r19, r21
    435a:	26 83       	std	Z+6, r18	; 0x06
    435c:	37 83       	std	Z+7, r19	; 0x07
    435e:	a2 81       	ldd	r26, Z+2	; 0x02
    4360:	b3 81       	ldd	r27, Z+3	; 0x03
    4362:	2a 17       	cp	r18, r26
    4364:	3b 07       	cpc	r19, r27
    4366:	10 f0       	brcs	.+4      	; 0x436c <prvCopyDataFromQueue+0x28>
    4368:	86 83       	std	Z+6, r24	; 0x06
    436a:	97 83       	std	Z+7, r25	; 0x07
    436c:	cb 01       	movw	r24, r22
    436e:	66 81       	ldd	r22, Z+6	; 0x06
    4370:	77 81       	ldd	r23, Z+7	; 0x07
    4372:	0e 94 a8 35 	call	0x6b50	; 0x6b50 <memcpy>
    4376:	08 95       	ret

00004378 <prvUnlockQueue>:
    4378:	0f 93       	push	r16
    437a:	1f 93       	push	r17
    437c:	cf 93       	push	r28
    437e:	df 93       	push	r29
    4380:	ec 01       	movw	r28, r24
    4382:	0f b6       	in	r0, 0x3f	; 63
    4384:	f8 94       	cli
    4386:	0f 92       	push	r0
    4388:	8a a1       	ldd	r24, Y+34	; 0x22
    438a:	18 16       	cp	r1, r24
    438c:	b4 f4       	brge	.+44     	; 0x43ba <prvUnlockQueue+0x42>
    438e:	8b 89       	ldd	r24, Y+19	; 0x13
    4390:	81 11       	cpse	r24, r1
    4392:	05 c0       	rjmp	.+10     	; 0x439e <prvUnlockQueue+0x26>
    4394:	12 c0       	rjmp	.+36     	; 0x43ba <prvUnlockQueue+0x42>
    4396:	8b 89       	ldd	r24, Y+19	; 0x13
    4398:	81 11       	cpse	r24, r1
    439a:	04 c0       	rjmp	.+8      	; 0x43a4 <prvUnlockQueue+0x2c>
    439c:	0e c0       	rjmp	.+28     	; 0x43ba <prvUnlockQueue+0x42>
    439e:	8e 01       	movw	r16, r28
    43a0:	0d 5e       	subi	r16, 0xED	; 237
    43a2:	1f 4f       	sbci	r17, 0xFF	; 255
    43a4:	c8 01       	movw	r24, r16
    43a6:	0e 94 8d 28 	call	0x511a	; 0x511a <xTaskRemoveFromEventList>
    43aa:	81 11       	cpse	r24, r1
    43ac:	0e 94 4a 29 	call	0x5294	; 0x5294 <vTaskMissedYield>
    43b0:	8a a1       	ldd	r24, Y+34	; 0x22
    43b2:	81 50       	subi	r24, 0x01	; 1
    43b4:	8a a3       	std	Y+34, r24	; 0x22
    43b6:	18 16       	cp	r1, r24
    43b8:	74 f3       	brlt	.-36     	; 0x4396 <prvUnlockQueue+0x1e>
    43ba:	8f ef       	ldi	r24, 0xFF	; 255
    43bc:	8a a3       	std	Y+34, r24	; 0x22
    43be:	0f 90       	pop	r0
    43c0:	0f be       	out	0x3f, r0	; 63
    43c2:	0f b6       	in	r0, 0x3f	; 63
    43c4:	f8 94       	cli
    43c6:	0f 92       	push	r0
    43c8:	89 a1       	ldd	r24, Y+33	; 0x21
    43ca:	18 16       	cp	r1, r24
    43cc:	b4 f4       	brge	.+44     	; 0x43fa <prvUnlockQueue+0x82>
    43ce:	88 85       	ldd	r24, Y+8	; 0x08
    43d0:	81 11       	cpse	r24, r1
    43d2:	05 c0       	rjmp	.+10     	; 0x43de <prvUnlockQueue+0x66>
    43d4:	12 c0       	rjmp	.+36     	; 0x43fa <prvUnlockQueue+0x82>
    43d6:	88 85       	ldd	r24, Y+8	; 0x08
    43d8:	81 11       	cpse	r24, r1
    43da:	04 c0       	rjmp	.+8      	; 0x43e4 <prvUnlockQueue+0x6c>
    43dc:	0e c0       	rjmp	.+28     	; 0x43fa <prvUnlockQueue+0x82>
    43de:	8e 01       	movw	r16, r28
    43e0:	08 5f       	subi	r16, 0xF8	; 248
    43e2:	1f 4f       	sbci	r17, 0xFF	; 255
    43e4:	c8 01       	movw	r24, r16
    43e6:	0e 94 8d 28 	call	0x511a	; 0x511a <xTaskRemoveFromEventList>
    43ea:	81 11       	cpse	r24, r1
    43ec:	0e 94 4a 29 	call	0x5294	; 0x5294 <vTaskMissedYield>
    43f0:	89 a1       	ldd	r24, Y+33	; 0x21
    43f2:	81 50       	subi	r24, 0x01	; 1
    43f4:	89 a3       	std	Y+33, r24	; 0x21
    43f6:	18 16       	cp	r1, r24
    43f8:	74 f3       	brlt	.-36     	; 0x43d6 <prvUnlockQueue+0x5e>
    43fa:	8f ef       	ldi	r24, 0xFF	; 255
    43fc:	89 a3       	std	Y+33, r24	; 0x21
    43fe:	0f 90       	pop	r0
    4400:	0f be       	out	0x3f, r0	; 63
    4402:	df 91       	pop	r29
    4404:	cf 91       	pop	r28
    4406:	1f 91       	pop	r17
    4408:	0f 91       	pop	r16
    440a:	08 95       	ret

0000440c <xQueueGenericReset>:
    440c:	1f 93       	push	r17
    440e:	cf 93       	push	r28
    4410:	df 93       	push	r29
    4412:	61 30       	cpi	r22, 0x01	; 1
    4414:	59 f0       	breq	.+22     	; 0x442c <xQueueGenericReset+0x20>
    4416:	fc 01       	movw	r30, r24
    4418:	23 89       	ldd	r18, Z+19	; 0x13
    441a:	30 85       	ldd	r19, Z+8	; 0x08
    441c:	31 11       	cpse	r19, r1
    441e:	2c c0       	rjmp	.+88     	; 0x4478 <xQueueGenericReset+0x6c>
    4420:	11 e0       	ldi	r17, 0x01	; 1
    4422:	21 11       	cpse	r18, r1
    4424:	10 e0       	ldi	r17, 0x00	; 0
    4426:	21 11       	cpse	r18, r1
    4428:	28 c0       	rjmp	.+80     	; 0x447a <xQueueGenericReset+0x6e>
    442a:	01 c0       	rjmp	.+2      	; 0x442e <xQueueGenericReset+0x22>
    442c:	11 e0       	ldi	r17, 0x01	; 1
    442e:	ec 01       	movw	r28, r24
    4430:	48 81       	ld	r20, Y
    4432:	59 81       	ldd	r21, Y+1	; 0x01
    4434:	28 a1       	ldd	r18, Y+32	; 0x20
    4436:	30 e0       	ldi	r19, 0x00	; 0
    4438:	6f 8d       	ldd	r22, Y+31	; 0x1f
    443a:	62 9f       	mul	r22, r18
    443c:	c0 01       	movw	r24, r0
    443e:	63 9f       	mul	r22, r19
    4440:	90 0d       	add	r25, r0
    4442:	11 24       	eor	r1, r1
    4444:	ba 01       	movw	r22, r20
    4446:	68 0f       	add	r22, r24
    4448:	79 1f       	adc	r23, r25
    444a:	6a 83       	std	Y+2, r22	; 0x02
    444c:	7b 83       	std	Y+3, r23	; 0x03
    444e:	1e 8e       	std	Y+30, r1	; 0x1e
    4450:	4c 83       	std	Y+4, r20	; 0x04
    4452:	5d 83       	std	Y+5, r21	; 0x05
    4454:	82 1b       	sub	r24, r18
    4456:	93 0b       	sbc	r25, r19
    4458:	84 0f       	add	r24, r20
    445a:	95 1f       	adc	r25, r21
    445c:	8e 83       	std	Y+6, r24	; 0x06
    445e:	9f 83       	std	Y+7, r25	; 0x07
    4460:	8f ef       	ldi	r24, 0xFF	; 255
    4462:	89 a3       	std	Y+33, r24	; 0x21
    4464:	8a a3       	std	Y+34, r24	; 0x22
    4466:	ce 01       	movw	r24, r28
    4468:	08 96       	adiw	r24, 0x08	; 8
    446a:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <vListInitialise>
    446e:	ce 01       	movw	r24, r28
    4470:	43 96       	adiw	r24, 0x13	; 19
    4472:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <vListInitialise>
    4476:	01 c0       	rjmp	.+2      	; 0x447a <xQueueGenericReset+0x6e>
    4478:	10 e0       	ldi	r17, 0x00	; 0
    447a:	81 2f       	mov	r24, r17
    447c:	df 91       	pop	r29
    447e:	cf 91       	pop	r28
    4480:	1f 91       	pop	r17
    4482:	08 95       	ret

00004484 <xQueueGenericCreate>:
    4484:	0f 93       	push	r16
    4486:	1f 93       	push	r17
    4488:	cf 93       	push	r28
    448a:	df 93       	push	r29
    448c:	88 23       	and	r24, r24
    448e:	01 f1       	breq	.+64     	; 0x44d0 <xQueueGenericCreate+0x4c>
    4490:	06 2f       	mov	r16, r22
    4492:	18 2f       	mov	r17, r24
    4494:	83 e2       	ldi	r24, 0x23	; 35
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <pvPortMalloc>
    449c:	ec 01       	movw	r28, r24
    449e:	89 2b       	or	r24, r25
    44a0:	c9 f0       	breq	.+50     	; 0x44d4 <xQueueGenericCreate+0x50>
    44a2:	10 9f       	mul	r17, r16
    44a4:	c0 01       	movw	r24, r0
    44a6:	11 24       	eor	r1, r1
    44a8:	01 96       	adiw	r24, 0x01	; 1
    44aa:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <pvPortMalloc>
    44ae:	88 83       	st	Y, r24
    44b0:	99 83       	std	Y+1, r25	; 0x01
    44b2:	89 2b       	or	r24, r25
    44b4:	39 f0       	breq	.+14     	; 0x44c4 <xQueueGenericCreate+0x40>
    44b6:	1f 8f       	std	Y+31, r17	; 0x1f
    44b8:	08 a3       	std	Y+32, r16	; 0x20
    44ba:	61 e0       	ldi	r22, 0x01	; 1
    44bc:	ce 01       	movw	r24, r28
    44be:	0e 94 06 22 	call	0x440c	; 0x440c <xQueueGenericReset>
    44c2:	08 c0       	rjmp	.+16     	; 0x44d4 <xQueueGenericCreate+0x50>
    44c4:	ce 01       	movw	r24, r28
    44c6:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <vPortFree>
    44ca:	c0 e0       	ldi	r28, 0x00	; 0
    44cc:	d0 e0       	ldi	r29, 0x00	; 0
    44ce:	02 c0       	rjmp	.+4      	; 0x44d4 <xQueueGenericCreate+0x50>
    44d0:	c0 e0       	ldi	r28, 0x00	; 0
    44d2:	d0 e0       	ldi	r29, 0x00	; 0
    44d4:	ce 01       	movw	r24, r28
    44d6:	df 91       	pop	r29
    44d8:	cf 91       	pop	r28
    44da:	1f 91       	pop	r17
    44dc:	0f 91       	pop	r16
    44de:	08 95       	ret

000044e0 <xQueueGenericSend>:
    44e0:	af 92       	push	r10
    44e2:	bf 92       	push	r11
    44e4:	cf 92       	push	r12
    44e6:	df 92       	push	r13
    44e8:	ef 92       	push	r14
    44ea:	ff 92       	push	r15
    44ec:	0f 93       	push	r16
    44ee:	1f 93       	push	r17
    44f0:	cf 93       	push	r28
    44f2:	df 93       	push	r29
    44f4:	cd b7       	in	r28, 0x3d	; 61
    44f6:	de b7       	in	r29, 0x3e	; 62
    44f8:	29 97       	sbiw	r28, 0x09	; 9
    44fa:	cd bf       	out	0x3d, r28	; 61
    44fc:	de bf       	out	0x3e, r29	; 62
    44fe:	7c 01       	movw	r14, r24
    4500:	5b 01       	movw	r10, r22
    4502:	2e 83       	std	Y+6, r18	; 0x06
    4504:	3f 83       	std	Y+7, r19	; 0x07
    4506:	48 87       	std	Y+8, r20	; 0x08
    4508:	59 87       	std	Y+9, r21	; 0x09
    450a:	10 e0       	ldi	r17, 0x00	; 0
    450c:	6c 01       	movw	r12, r24
    450e:	88 e0       	ldi	r24, 0x08	; 8
    4510:	c8 0e       	add	r12, r24
    4512:	d1 1c       	adc	r13, r1
    4514:	0f b6       	in	r0, 0x3f	; 63
    4516:	f8 94       	cli
    4518:	0f 92       	push	r0
    451a:	f7 01       	movw	r30, r14
    451c:	96 8d       	ldd	r25, Z+30	; 0x1e
    451e:	87 8d       	ldd	r24, Z+31	; 0x1f
    4520:	98 17       	cp	r25, r24
    4522:	a8 f4       	brcc	.+42     	; 0x454e <xQueueGenericSend+0x6e>
    4524:	40 2f       	mov	r20, r16
    4526:	b5 01       	movw	r22, r10
    4528:	c7 01       	movw	r24, r14
    452a:	0e 94 56 21 	call	0x42ac	; 0x42ac <prvCopyDataToQueue>
    452e:	f7 01       	movw	r30, r14
    4530:	83 89       	ldd	r24, Z+19	; 0x13
    4532:	88 23       	and	r24, r24
    4534:	41 f0       	breq	.+16     	; 0x4546 <xQueueGenericSend+0x66>
    4536:	c7 01       	movw	r24, r14
    4538:	43 96       	adiw	r24, 0x13	; 19
    453a:	0e 94 8d 28 	call	0x511a	; 0x511a <xTaskRemoveFromEventList>
    453e:	81 30       	cpi	r24, 0x01	; 1
    4540:	11 f4       	brne	.+4      	; 0x4546 <xQueueGenericSend+0x66>
    4542:	0e 94 8f 20 	call	0x411e	; 0x411e <vPortYield>
    4546:	0f 90       	pop	r0
    4548:	0f be       	out	0x3f, r0	; 63
    454a:	81 e0       	ldi	r24, 0x01	; 1
    454c:	56 c0       	rjmp	.+172    	; 0x45fa <xQueueGenericSend+0x11a>
    454e:	8e 81       	ldd	r24, Y+6	; 0x06
    4550:	9f 81       	ldd	r25, Y+7	; 0x07
    4552:	a8 85       	ldd	r26, Y+8	; 0x08
    4554:	b9 85       	ldd	r27, Y+9	; 0x09
    4556:	89 2b       	or	r24, r25
    4558:	8a 2b       	or	r24, r26
    455a:	8b 2b       	or	r24, r27
    455c:	21 f4       	brne	.+8      	; 0x4566 <xQueueGenericSend+0x86>
    455e:	0f 90       	pop	r0
    4560:	0f be       	out	0x3f, r0	; 63
    4562:	80 e0       	ldi	r24, 0x00	; 0
    4564:	4a c0       	rjmp	.+148    	; 0x45fa <xQueueGenericSend+0x11a>
    4566:	11 11       	cpse	r17, r1
    4568:	05 c0       	rjmp	.+10     	; 0x4574 <xQueueGenericSend+0x94>
    456a:	ce 01       	movw	r24, r28
    456c:	01 96       	adiw	r24, 0x01	; 1
    456e:	0e 94 cc 28 	call	0x5198	; 0x5198 <vTaskSetTimeOutState>
    4572:	11 e0       	ldi	r17, 0x01	; 1
    4574:	0f 90       	pop	r0
    4576:	0f be       	out	0x3f, r0	; 63
    4578:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <vTaskSuspendAll>
    457c:	0f b6       	in	r0, 0x3f	; 63
    457e:	f8 94       	cli
    4580:	0f 92       	push	r0
    4582:	f7 01       	movw	r30, r14
    4584:	81 a1       	ldd	r24, Z+33	; 0x21
    4586:	8f 3f       	cpi	r24, 0xFF	; 255
    4588:	09 f4       	brne	.+2      	; 0x458c <xQueueGenericSend+0xac>
    458a:	11 a2       	std	Z+33, r1	; 0x21
    458c:	f7 01       	movw	r30, r14
    458e:	82 a1       	ldd	r24, Z+34	; 0x22
    4590:	8f 3f       	cpi	r24, 0xFF	; 255
    4592:	09 f4       	brne	.+2      	; 0x4596 <xQueueGenericSend+0xb6>
    4594:	12 a2       	std	Z+34, r1	; 0x22
    4596:	0f 90       	pop	r0
    4598:	0f be       	out	0x3f, r0	; 63
    459a:	be 01       	movw	r22, r28
    459c:	6a 5f       	subi	r22, 0xFA	; 250
    459e:	7f 4f       	sbci	r23, 0xFF	; 255
    45a0:	ce 01       	movw	r24, r28
    45a2:	01 96       	adiw	r24, 0x01	; 1
    45a4:	0e 94 dd 28 	call	0x51ba	; 0x51ba <xTaskCheckForTimeOut>
    45a8:	81 11       	cpse	r24, r1
    45aa:	21 c0       	rjmp	.+66     	; 0x45ee <xQueueGenericSend+0x10e>
    45ac:	0f b6       	in	r0, 0x3f	; 63
    45ae:	f8 94       	cli
    45b0:	0f 92       	push	r0
    45b2:	f7 01       	movw	r30, r14
    45b4:	96 8d       	ldd	r25, Z+30	; 0x1e
    45b6:	0f 90       	pop	r0
    45b8:	0f be       	out	0x3f, r0	; 63
    45ba:	87 8d       	ldd	r24, Z+31	; 0x1f
    45bc:	98 13       	cpse	r25, r24
    45be:	11 c0       	rjmp	.+34     	; 0x45e2 <xQueueGenericSend+0x102>
    45c0:	4e 81       	ldd	r20, Y+6	; 0x06
    45c2:	5f 81       	ldd	r21, Y+7	; 0x07
    45c4:	68 85       	ldd	r22, Y+8	; 0x08
    45c6:	79 85       	ldd	r23, Y+9	; 0x09
    45c8:	c6 01       	movw	r24, r12
    45ca:	0e 94 63 28 	call	0x50c6	; 0x50c6 <vTaskPlaceOnEventList>
    45ce:	c7 01       	movw	r24, r14
    45d0:	0e 94 bc 21 	call	0x4378	; 0x4378 <prvUnlockQueue>
    45d4:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <xTaskResumeAll>
    45d8:	81 11       	cpse	r24, r1
    45da:	9c cf       	rjmp	.-200    	; 0x4514 <xQueueGenericSend+0x34>
    45dc:	0e 94 8f 20 	call	0x411e	; 0x411e <vPortYield>
    45e0:	99 cf       	rjmp	.-206    	; 0x4514 <xQueueGenericSend+0x34>
    45e2:	c7 01       	movw	r24, r14
    45e4:	0e 94 bc 21 	call	0x4378	; 0x4378 <prvUnlockQueue>
    45e8:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <xTaskResumeAll>
    45ec:	93 cf       	rjmp	.-218    	; 0x4514 <xQueueGenericSend+0x34>
    45ee:	c7 01       	movw	r24, r14
    45f0:	0e 94 bc 21 	call	0x4378	; 0x4378 <prvUnlockQueue>
    45f4:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <xTaskResumeAll>
    45f8:	80 e0       	ldi	r24, 0x00	; 0
    45fa:	29 96       	adiw	r28, 0x09	; 9
    45fc:	cd bf       	out	0x3d, r28	; 61
    45fe:	de bf       	out	0x3e, r29	; 62
    4600:	df 91       	pop	r29
    4602:	cf 91       	pop	r28
    4604:	1f 91       	pop	r17
    4606:	0f 91       	pop	r16
    4608:	ff 90       	pop	r15
    460a:	ef 90       	pop	r14
    460c:	df 90       	pop	r13
    460e:	cf 90       	pop	r12
    4610:	bf 90       	pop	r11
    4612:	af 90       	pop	r10
    4614:	08 95       	ret

00004616 <xQueueGenericSendFromISR>:
    4616:	0f 93       	push	r16
    4618:	1f 93       	push	r17
    461a:	cf 93       	push	r28
    461c:	df 93       	push	r29
    461e:	8a 01       	movw	r16, r20
    4620:	fc 01       	movw	r30, r24
    4622:	56 8d       	ldd	r21, Z+30	; 0x1e
    4624:	37 8d       	ldd	r19, Z+31	; 0x1f
    4626:	53 17       	cp	r21, r19
    4628:	c0 f4       	brcc	.+48     	; 0x465a <xQueueGenericSendFromISR+0x44>
    462a:	42 2f       	mov	r20, r18
    462c:	ec 01       	movw	r28, r24
    462e:	0e 94 56 21 	call	0x42ac	; 0x42ac <prvCopyDataToQueue>
    4632:	8a a1       	ldd	r24, Y+34	; 0x22
    4634:	8f 3f       	cpi	r24, 0xFF	; 255
    4636:	69 f4       	brne	.+26     	; 0x4652 <xQueueGenericSendFromISR+0x3c>
    4638:	8b 89       	ldd	r24, Y+19	; 0x13
    463a:	88 23       	and	r24, r24
    463c:	81 f0       	breq	.+32     	; 0x465e <xQueueGenericSendFromISR+0x48>
    463e:	ce 01       	movw	r24, r28
    4640:	43 96       	adiw	r24, 0x13	; 19
    4642:	0e 94 8d 28 	call	0x511a	; 0x511a <xTaskRemoveFromEventList>
    4646:	88 23       	and	r24, r24
    4648:	61 f0       	breq	.+24     	; 0x4662 <xQueueGenericSendFromISR+0x4c>
    464a:	81 e0       	ldi	r24, 0x01	; 1
    464c:	f8 01       	movw	r30, r16
    464e:	80 83       	st	Z, r24
    4650:	09 c0       	rjmp	.+18     	; 0x4664 <xQueueGenericSendFromISR+0x4e>
    4652:	8f 5f       	subi	r24, 0xFF	; 255
    4654:	8a a3       	std	Y+34, r24	; 0x22
    4656:	81 e0       	ldi	r24, 0x01	; 1
    4658:	05 c0       	rjmp	.+10     	; 0x4664 <xQueueGenericSendFromISR+0x4e>
    465a:	80 e0       	ldi	r24, 0x00	; 0
    465c:	03 c0       	rjmp	.+6      	; 0x4664 <xQueueGenericSendFromISR+0x4e>
    465e:	81 e0       	ldi	r24, 0x01	; 1
    4660:	01 c0       	rjmp	.+2      	; 0x4664 <xQueueGenericSendFromISR+0x4e>
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	df 91       	pop	r29
    4666:	cf 91       	pop	r28
    4668:	1f 91       	pop	r17
    466a:	0f 91       	pop	r16
    466c:	08 95       	ret

0000466e <xQueueGenericReceive>:
    466e:	af 92       	push	r10
    4670:	bf 92       	push	r11
    4672:	cf 92       	push	r12
    4674:	df 92       	push	r13
    4676:	ef 92       	push	r14
    4678:	ff 92       	push	r15
    467a:	0f 93       	push	r16
    467c:	1f 93       	push	r17
    467e:	cf 93       	push	r28
    4680:	df 93       	push	r29
    4682:	cd b7       	in	r28, 0x3d	; 61
    4684:	de b7       	in	r29, 0x3e	; 62
    4686:	29 97       	sbiw	r28, 0x09	; 9
    4688:	cd bf       	out	0x3d, r28	; 61
    468a:	de bf       	out	0x3e, r29	; 62
    468c:	7c 01       	movw	r14, r24
    468e:	5b 01       	movw	r10, r22
    4690:	2e 83       	std	Y+6, r18	; 0x06
    4692:	3f 83       	std	Y+7, r19	; 0x07
    4694:	48 87       	std	Y+8, r20	; 0x08
    4696:	59 87       	std	Y+9, r21	; 0x09
    4698:	10 e0       	ldi	r17, 0x00	; 0
    469a:	6c 01       	movw	r12, r24
    469c:	83 e1       	ldi	r24, 0x13	; 19
    469e:	c8 0e       	add	r12, r24
    46a0:	d1 1c       	adc	r13, r1
    46a2:	0f b6       	in	r0, 0x3f	; 63
    46a4:	f8 94       	cli
    46a6:	0f 92       	push	r0
    46a8:	f7 01       	movw	r30, r14
    46aa:	86 8d       	ldd	r24, Z+30	; 0x1e
    46ac:	88 23       	and	r24, r24
    46ae:	99 f1       	breq	.+102    	; 0x4716 <xQueueGenericReceive+0xa8>
    46b0:	c6 80       	ldd	r12, Z+6	; 0x06
    46b2:	d7 80       	ldd	r13, Z+7	; 0x07
    46b4:	b5 01       	movw	r22, r10
    46b6:	c7 01       	movw	r24, r14
    46b8:	0e 94 a2 21 	call	0x4344	; 0x4344 <prvCopyDataFromQueue>
    46bc:	01 11       	cpse	r16, r1
    46be:	1a c0       	rjmp	.+52     	; 0x46f4 <xQueueGenericReceive+0x86>
    46c0:	f7 01       	movw	r30, r14
    46c2:	86 8d       	ldd	r24, Z+30	; 0x1e
    46c4:	81 50       	subi	r24, 0x01	; 1
    46c6:	86 8f       	std	Z+30, r24	; 0x1e
    46c8:	80 81       	ld	r24, Z
    46ca:	91 81       	ldd	r25, Z+1	; 0x01
    46cc:	89 2b       	or	r24, r25
    46ce:	29 f4       	brne	.+10     	; 0x46da <xQueueGenericReceive+0x6c>
    46d0:	0e 94 67 29 	call	0x52ce	; 0x52ce <xTaskGetCurrentTaskHandle>
    46d4:	f7 01       	movw	r30, r14
    46d6:	82 83       	std	Z+2, r24	; 0x02
    46d8:	93 83       	std	Z+3, r25	; 0x03
    46da:	f7 01       	movw	r30, r14
    46dc:	80 85       	ldd	r24, Z+8	; 0x08
    46de:	88 23       	and	r24, r24
    46e0:	b1 f0       	breq	.+44     	; 0x470e <xQueueGenericReceive+0xa0>
    46e2:	c7 01       	movw	r24, r14
    46e4:	08 96       	adiw	r24, 0x08	; 8
    46e6:	0e 94 8d 28 	call	0x511a	; 0x511a <xTaskRemoveFromEventList>
    46ea:	81 30       	cpi	r24, 0x01	; 1
    46ec:	81 f4       	brne	.+32     	; 0x470e <xQueueGenericReceive+0xa0>
    46ee:	0e 94 8f 20 	call	0x411e	; 0x411e <vPortYield>
    46f2:	0d c0       	rjmp	.+26     	; 0x470e <xQueueGenericReceive+0xa0>
    46f4:	f7 01       	movw	r30, r14
    46f6:	c6 82       	std	Z+6, r12	; 0x06
    46f8:	d7 82       	std	Z+7, r13	; 0x07
    46fa:	83 89       	ldd	r24, Z+19	; 0x13
    46fc:	88 23       	and	r24, r24
    46fe:	39 f0       	breq	.+14     	; 0x470e <xQueueGenericReceive+0xa0>
    4700:	c7 01       	movw	r24, r14
    4702:	43 96       	adiw	r24, 0x13	; 19
    4704:	0e 94 8d 28 	call	0x511a	; 0x511a <xTaskRemoveFromEventList>
    4708:	81 11       	cpse	r24, r1
    470a:	0e 94 8f 20 	call	0x411e	; 0x411e <vPortYield>
    470e:	0f 90       	pop	r0
    4710:	0f be       	out	0x3f, r0	; 63
    4712:	81 e0       	ldi	r24, 0x01	; 1
    4714:	62 c0       	rjmp	.+196    	; 0x47da <xQueueGenericReceive+0x16c>
    4716:	8e 81       	ldd	r24, Y+6	; 0x06
    4718:	9f 81       	ldd	r25, Y+7	; 0x07
    471a:	a8 85       	ldd	r26, Y+8	; 0x08
    471c:	b9 85       	ldd	r27, Y+9	; 0x09
    471e:	89 2b       	or	r24, r25
    4720:	8a 2b       	or	r24, r26
    4722:	8b 2b       	or	r24, r27
    4724:	21 f4       	brne	.+8      	; 0x472e <xQueueGenericReceive+0xc0>
    4726:	0f 90       	pop	r0
    4728:	0f be       	out	0x3f, r0	; 63
    472a:	80 e0       	ldi	r24, 0x00	; 0
    472c:	56 c0       	rjmp	.+172    	; 0x47da <xQueueGenericReceive+0x16c>
    472e:	11 11       	cpse	r17, r1
    4730:	05 c0       	rjmp	.+10     	; 0x473c <xQueueGenericReceive+0xce>
    4732:	ce 01       	movw	r24, r28
    4734:	01 96       	adiw	r24, 0x01	; 1
    4736:	0e 94 cc 28 	call	0x5198	; 0x5198 <vTaskSetTimeOutState>
    473a:	11 e0       	ldi	r17, 0x01	; 1
    473c:	0f 90       	pop	r0
    473e:	0f be       	out	0x3f, r0	; 63
    4740:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <vTaskSuspendAll>
    4744:	0f b6       	in	r0, 0x3f	; 63
    4746:	f8 94       	cli
    4748:	0f 92       	push	r0
    474a:	f7 01       	movw	r30, r14
    474c:	81 a1       	ldd	r24, Z+33	; 0x21
    474e:	8f 3f       	cpi	r24, 0xFF	; 255
    4750:	09 f4       	brne	.+2      	; 0x4754 <xQueueGenericReceive+0xe6>
    4752:	11 a2       	std	Z+33, r1	; 0x21
    4754:	f7 01       	movw	r30, r14
    4756:	82 a1       	ldd	r24, Z+34	; 0x22
    4758:	8f 3f       	cpi	r24, 0xFF	; 255
    475a:	09 f4       	brne	.+2      	; 0x475e <xQueueGenericReceive+0xf0>
    475c:	12 a2       	std	Z+34, r1	; 0x22
    475e:	0f 90       	pop	r0
    4760:	0f be       	out	0x3f, r0	; 63
    4762:	be 01       	movw	r22, r28
    4764:	6a 5f       	subi	r22, 0xFA	; 250
    4766:	7f 4f       	sbci	r23, 0xFF	; 255
    4768:	ce 01       	movw	r24, r28
    476a:	01 96       	adiw	r24, 0x01	; 1
    476c:	0e 94 dd 28 	call	0x51ba	; 0x51ba <xTaskCheckForTimeOut>
    4770:	81 11       	cpse	r24, r1
    4772:	2d c0       	rjmp	.+90     	; 0x47ce <xQueueGenericReceive+0x160>
    4774:	0f b6       	in	r0, 0x3f	; 63
    4776:	f8 94       	cli
    4778:	0f 92       	push	r0
    477a:	f7 01       	movw	r30, r14
    477c:	86 8d       	ldd	r24, Z+30	; 0x1e
    477e:	0f 90       	pop	r0
    4780:	0f be       	out	0x3f, r0	; 63
    4782:	81 11       	cpse	r24, r1
    4784:	1e c0       	rjmp	.+60     	; 0x47c2 <xQueueGenericReceive+0x154>
    4786:	80 81       	ld	r24, Z
    4788:	91 81       	ldd	r25, Z+1	; 0x01
    478a:	89 2b       	or	r24, r25
    478c:	49 f4       	brne	.+18     	; 0x47a0 <xQueueGenericReceive+0x132>
    478e:	0f b6       	in	r0, 0x3f	; 63
    4790:	f8 94       	cli
    4792:	0f 92       	push	r0
    4794:	82 81       	ldd	r24, Z+2	; 0x02
    4796:	93 81       	ldd	r25, Z+3	; 0x03
    4798:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <vTaskPriorityInherit>
    479c:	0f 90       	pop	r0
    479e:	0f be       	out	0x3f, r0	; 63
    47a0:	4e 81       	ldd	r20, Y+6	; 0x06
    47a2:	5f 81       	ldd	r21, Y+7	; 0x07
    47a4:	68 85       	ldd	r22, Y+8	; 0x08
    47a6:	79 85       	ldd	r23, Y+9	; 0x09
    47a8:	c6 01       	movw	r24, r12
    47aa:	0e 94 63 28 	call	0x50c6	; 0x50c6 <vTaskPlaceOnEventList>
    47ae:	c7 01       	movw	r24, r14
    47b0:	0e 94 bc 21 	call	0x4378	; 0x4378 <prvUnlockQueue>
    47b4:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <xTaskResumeAll>
    47b8:	81 11       	cpse	r24, r1
    47ba:	73 cf       	rjmp	.-282    	; 0x46a2 <xQueueGenericReceive+0x34>
    47bc:	0e 94 8f 20 	call	0x411e	; 0x411e <vPortYield>
    47c0:	70 cf       	rjmp	.-288    	; 0x46a2 <xQueueGenericReceive+0x34>
    47c2:	c7 01       	movw	r24, r14
    47c4:	0e 94 bc 21 	call	0x4378	; 0x4378 <prvUnlockQueue>
    47c8:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <xTaskResumeAll>
    47cc:	6a cf       	rjmp	.-300    	; 0x46a2 <xQueueGenericReceive+0x34>
    47ce:	c7 01       	movw	r24, r14
    47d0:	0e 94 bc 21 	call	0x4378	; 0x4378 <prvUnlockQueue>
    47d4:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <xTaskResumeAll>
    47d8:	80 e0       	ldi	r24, 0x00	; 0
    47da:	29 96       	adiw	r28, 0x09	; 9
    47dc:	cd bf       	out	0x3d, r28	; 61
    47de:	de bf       	out	0x3e, r29	; 62
    47e0:	df 91       	pop	r29
    47e2:	cf 91       	pop	r28
    47e4:	1f 91       	pop	r17
    47e6:	0f 91       	pop	r16
    47e8:	ff 90       	pop	r15
    47ea:	ef 90       	pop	r14
    47ec:	df 90       	pop	r13
    47ee:	cf 90       	pop	r12
    47f0:	bf 90       	pop	r11
    47f2:	af 90       	pop	r10
    47f4:	08 95       	ret

000047f6 <xQueueReceiveFromISR>:
    47f6:	0f 93       	push	r16
    47f8:	1f 93       	push	r17
    47fa:	cf 93       	push	r28
    47fc:	df 93       	push	r29
    47fe:	fc 01       	movw	r30, r24
    4800:	26 8d       	ldd	r18, Z+30	; 0x1e
    4802:	22 23       	and	r18, r18
    4804:	d9 f0       	breq	.+54     	; 0x483c <xQueueReceiveFromISR+0x46>
    4806:	8a 01       	movw	r16, r20
    4808:	ec 01       	movw	r28, r24
    480a:	0e 94 a2 21 	call	0x4344	; 0x4344 <prvCopyDataFromQueue>
    480e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4810:	81 50       	subi	r24, 0x01	; 1
    4812:	8e 8f       	std	Y+30, r24	; 0x1e
    4814:	89 a1       	ldd	r24, Y+33	; 0x21
    4816:	8f 3f       	cpi	r24, 0xFF	; 255
    4818:	69 f4       	brne	.+26     	; 0x4834 <xQueueReceiveFromISR+0x3e>
    481a:	88 85       	ldd	r24, Y+8	; 0x08
    481c:	88 23       	and	r24, r24
    481e:	81 f0       	breq	.+32     	; 0x4840 <xQueueReceiveFromISR+0x4a>
    4820:	ce 01       	movw	r24, r28
    4822:	08 96       	adiw	r24, 0x08	; 8
    4824:	0e 94 8d 28 	call	0x511a	; 0x511a <xTaskRemoveFromEventList>
    4828:	88 23       	and	r24, r24
    482a:	61 f0       	breq	.+24     	; 0x4844 <xQueueReceiveFromISR+0x4e>
    482c:	81 e0       	ldi	r24, 0x01	; 1
    482e:	f8 01       	movw	r30, r16
    4830:	80 83       	st	Z, r24
    4832:	09 c0       	rjmp	.+18     	; 0x4846 <xQueueReceiveFromISR+0x50>
    4834:	8f 5f       	subi	r24, 0xFF	; 255
    4836:	89 a3       	std	Y+33, r24	; 0x21
    4838:	81 e0       	ldi	r24, 0x01	; 1
    483a:	05 c0       	rjmp	.+10     	; 0x4846 <xQueueReceiveFromISR+0x50>
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	03 c0       	rjmp	.+6      	; 0x4846 <xQueueReceiveFromISR+0x50>
    4840:	81 e0       	ldi	r24, 0x01	; 1
    4842:	01 c0       	rjmp	.+2      	; 0x4846 <xQueueReceiveFromISR+0x50>
    4844:	81 e0       	ldi	r24, 0x01	; 1
    4846:	df 91       	pop	r29
    4848:	cf 91       	pop	r28
    484a:	1f 91       	pop	r17
    484c:	0f 91       	pop	r16
    484e:	08 95       	ret

00004850 <uxQueueMessagesWaiting>:
    4850:	0f b6       	in	r0, 0x3f	; 63
    4852:	f8 94       	cli
    4854:	0f 92       	push	r0
    4856:	fc 01       	movw	r30, r24
    4858:	86 8d       	ldd	r24, Z+30	; 0x1e
    485a:	0f 90       	pop	r0
    485c:	0f be       	out	0x3f, r0	; 63
    485e:	08 95       	ret

00004860 <uxQueueMessagesWaitingFromISR>:
    4860:	fc 01       	movw	r30, r24
    4862:	86 8d       	ldd	r24, Z+30	; 0x1e
    4864:	08 95       	ret

00004866 <prvIdleTask>:
    4866:	c7 eb       	ldi	r28, 0xB7	; 183
    4868:	d1 e4       	ldi	r29, 0x41	; 65
    486a:	88 81       	ld	r24, Y
    486c:	82 30       	cpi	r24, 0x02	; 2
    486e:	e8 f3       	brcs	.-6      	; 0x486a <prvIdleTask+0x4>
    4870:	0e 94 8f 20 	call	0x411e	; 0x411e <vPortYield>
    4874:	fa cf       	rjmp	.-12     	; 0x486a <prvIdleTask+0x4>

00004876 <prvAddCurrentTaskToDelayedList>:
    4876:	cf 92       	push	r12
    4878:	df 92       	push	r13
    487a:	ef 92       	push	r14
    487c:	ff 92       	push	r15
    487e:	6b 01       	movw	r12, r22
    4880:	7c 01       	movw	r14, r24
    4882:	e0 91 e3 41 	lds	r30, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4886:	f0 91 e4 41 	lds	r31, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    488a:	62 83       	std	Z+2, r22	; 0x02
    488c:	73 83       	std	Z+3, r23	; 0x03
    488e:	84 83       	std	Z+4, r24	; 0x04
    4890:	95 83       	std	Z+5, r25	; 0x05
    4892:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    4896:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    489a:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    489e:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    48a2:	c8 16       	cp	r12, r24
    48a4:	d9 06       	cpc	r13, r25
    48a6:	ea 06       	cpc	r14, r26
    48a8:	fb 06       	cpc	r15, r27
    48aa:	68 f4       	brcc	.+26     	; 0x48c6 <prvAddCurrentTaskToDelayedList+0x50>
    48ac:	60 91 e3 41 	lds	r22, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    48b0:	70 91 e4 41 	lds	r23, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    48b4:	80 91 9d 41 	lds	r24, 0x419D	; 0x80419d <pxOverflowDelayedTaskList>
    48b8:	90 91 9e 41 	lds	r25, 0x419E	; 0x80419e <pxOverflowDelayedTaskList+0x1>
    48bc:	6e 5f       	subi	r22, 0xFE	; 254
    48be:	7f 4f       	sbci	r23, 0xFF	; 255
    48c0:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <vListInsert>
    48c4:	21 c0       	rjmp	.+66     	; 0x4908 <prvAddCurrentTaskToDelayedList+0x92>
    48c6:	60 91 e3 41 	lds	r22, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    48ca:	70 91 e4 41 	lds	r23, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    48ce:	80 91 9f 41 	lds	r24, 0x419F	; 0x80419f <pxDelayedTaskList>
    48d2:	90 91 a0 41 	lds	r25, 0x41A0	; 0x8041a0 <pxDelayedTaskList+0x1>
    48d6:	6e 5f       	subi	r22, 0xFE	; 254
    48d8:	7f 4f       	sbci	r23, 0xFF	; 255
    48da:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <vListInsert>
    48de:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    48e2:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    48e6:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    48ea:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    48ee:	c8 16       	cp	r12, r24
    48f0:	d9 06       	cpc	r13, r25
    48f2:	ea 06       	cpc	r14, r26
    48f4:	fb 06       	cpc	r15, r27
    48f6:	40 f4       	brcc	.+16     	; 0x4908 <prvAddCurrentTaskToDelayedList+0x92>
    48f8:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    48fc:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    4900:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    4904:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    4908:	ff 90       	pop	r15
    490a:	ef 90       	pop	r14
    490c:	df 90       	pop	r13
    490e:	cf 90       	pop	r12
    4910:	08 95       	ret

00004912 <xTaskGenericCreate>:
    4912:	4f 92       	push	r4
    4914:	5f 92       	push	r5
    4916:	6f 92       	push	r6
    4918:	7f 92       	push	r7
    491a:	8f 92       	push	r8
    491c:	9f 92       	push	r9
    491e:	af 92       	push	r10
    4920:	bf 92       	push	r11
    4922:	cf 92       	push	r12
    4924:	df 92       	push	r13
    4926:	ef 92       	push	r14
    4928:	ff 92       	push	r15
    492a:	0f 93       	push	r16
    492c:	1f 93       	push	r17
    492e:	cf 93       	push	r28
    4930:	df 93       	push	r29
    4932:	5c 01       	movw	r10, r24
    4934:	4b 01       	movw	r8, r22
    4936:	3a 01       	movw	r6, r20
    4938:	29 01       	movw	r4, r18
    493a:	88 e2       	ldi	r24, 0x28	; 40
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <pvPortMalloc>
    4942:	ec 01       	movw	r28, r24
    4944:	89 2b       	or	r24, r25
    4946:	09 f4       	brne	.+2      	; 0x494a <xTaskGenericCreate+0x38>
    4948:	d4 c0       	rjmp	.+424    	; 0x4af2 <xTaskGenericCreate+0x1e0>
    494a:	c1 14       	cp	r12, r1
    494c:	d1 04       	cpc	r13, r1
    494e:	09 f0       	breq	.+2      	; 0x4952 <xTaskGenericCreate+0x40>
    4950:	cc c0       	rjmp	.+408    	; 0x4aea <xTaskGenericCreate+0x1d8>
    4952:	c3 01       	movw	r24, r6
    4954:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <pvPortMalloc>
    4958:	8b 8f       	std	Y+27, r24	; 0x1b
    495a:	9c 8f       	std	Y+28, r25	; 0x1c
    495c:	00 97       	sbiw	r24, 0x00	; 0
    495e:	21 f4       	brne	.+8      	; 0x4968 <xTaskGenericCreate+0x56>
    4960:	ce 01       	movw	r24, r28
    4962:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <vPortFree>
    4966:	c5 c0       	rjmp	.+394    	; 0x4af2 <xTaskGenericCreate+0x1e0>
    4968:	a3 01       	movw	r20, r6
    496a:	61 e1       	ldi	r22, 0x11	; 17
    496c:	70 e0       	ldi	r23, 0x00	; 0
    496e:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <memset>
    4972:	93 01       	movw	r18, r6
    4974:	21 50       	subi	r18, 0x01	; 1
    4976:	31 09       	sbc	r19, r1
    4978:	8b 8d       	ldd	r24, Y+27	; 0x1b
    497a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    497c:	3c 01       	movw	r6, r24
    497e:	62 0e       	add	r6, r18
    4980:	73 1e       	adc	r7, r19
    4982:	4a e0       	ldi	r20, 0x0A	; 10
    4984:	50 e0       	ldi	r21, 0x00	; 0
    4986:	b4 01       	movw	r22, r8
    4988:	ce 01       	movw	r24, r28
    498a:	4d 96       	adiw	r24, 0x1d	; 29
    498c:	0e 94 b8 35 	call	0x6b70	; 0x6b70 <strncpy>
    4990:	1e a2       	std	Y+38, r1	; 0x26
    4992:	10 2f       	mov	r17, r16
    4994:	04 30       	cpi	r16, 0x04	; 4
    4996:	08 f0       	brcs	.+2      	; 0x499a <xTaskGenericCreate+0x88>
    4998:	13 e0       	ldi	r17, 0x03	; 3
    499a:	1a 8f       	std	Y+26, r17	; 0x1a
    499c:	1f a3       	std	Y+39, r17	; 0x27
    499e:	6e 01       	movw	r12, r28
    49a0:	22 e0       	ldi	r18, 0x02	; 2
    49a2:	c2 0e       	add	r12, r18
    49a4:	d1 1c       	adc	r13, r1
    49a6:	c6 01       	movw	r24, r12
    49a8:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <vListInitialiseItem>
    49ac:	ce 01       	movw	r24, r28
    49ae:	0e 96       	adiw	r24, 0x0e	; 14
    49b0:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <vListInitialiseItem>
    49b4:	ca 87       	std	Y+10, r28	; 0x0a
    49b6:	db 87       	std	Y+11, r29	; 0x0b
    49b8:	84 e0       	ldi	r24, 0x04	; 4
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	a0 e0       	ldi	r26, 0x00	; 0
    49be:	b0 e0       	ldi	r27, 0x00	; 0
    49c0:	81 1b       	sub	r24, r17
    49c2:	91 09       	sbc	r25, r1
    49c4:	a1 09       	sbc	r26, r1
    49c6:	b1 09       	sbc	r27, r1
    49c8:	8e 87       	std	Y+14, r24	; 0x0e
    49ca:	9f 87       	std	Y+15, r25	; 0x0f
    49cc:	a8 8b       	std	Y+16, r26	; 0x10
    49ce:	b9 8b       	std	Y+17, r27	; 0x11
    49d0:	ce 8b       	std	Y+22, r28	; 0x16
    49d2:	df 8b       	std	Y+23, r29	; 0x17
    49d4:	a2 01       	movw	r20, r4
    49d6:	b5 01       	movw	r22, r10
    49d8:	c3 01       	movw	r24, r6
    49da:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <pxPortInitialiseStack>
    49de:	88 83       	st	Y, r24
    49e0:	99 83       	std	Y+1, r25	; 0x01
    49e2:	e1 14       	cp	r14, r1
    49e4:	f1 04       	cpc	r15, r1
    49e6:	19 f0       	breq	.+6      	; 0x49ee <xTaskGenericCreate+0xdc>
    49e8:	f7 01       	movw	r30, r14
    49ea:	c0 83       	st	Z, r28
    49ec:	d1 83       	std	Z+1, r29	; 0x01
    49ee:	0f b6       	in	r0, 0x3f	; 63
    49f0:	f8 94       	cli
    49f2:	0f 92       	push	r0
    49f4:	80 91 8f 41 	lds	r24, 0x418F	; 0x80418f <uxCurrentNumberOfTasks>
    49f8:	8f 5f       	subi	r24, 0xFF	; 255
    49fa:	80 93 8f 41 	sts	0x418F, r24	; 0x80418f <uxCurrentNumberOfTasks>
    49fe:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4a02:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4a06:	89 2b       	or	r24, r25
    4a08:	89 f5       	brne	.+98     	; 0x4a6c <xTaskGenericCreate+0x15a>
    4a0a:	c0 93 e3 41 	sts	0x41E3, r28	; 0x8041e3 <pxCurrentTCB>
    4a0e:	d0 93 e4 41 	sts	0x41E4, r29	; 0x8041e4 <pxCurrentTCB+0x1>
    4a12:	80 91 8f 41 	lds	r24, 0x418F	; 0x80418f <uxCurrentNumberOfTasks>
    4a16:	81 30       	cpi	r24, 0x01	; 1
    4a18:	c1 f5       	brne	.+112    	; 0x4a8a <xTaskGenericCreate+0x178>
    4a1a:	87 eb       	ldi	r24, 0xB7	; 183
    4a1c:	91 e4       	ldi	r25, 0x41	; 65
    4a1e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <vListInitialise>
    4a22:	82 ec       	ldi	r24, 0xC2	; 194
    4a24:	91 e4       	ldi	r25, 0x41	; 65
    4a26:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <vListInitialise>
    4a2a:	8d ec       	ldi	r24, 0xCD	; 205
    4a2c:	91 e4       	ldi	r25, 0x41	; 65
    4a2e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <vListInitialise>
    4a32:	88 ed       	ldi	r24, 0xD8	; 216
    4a34:	91 e4       	ldi	r25, 0x41	; 65
    4a36:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <vListInitialise>
    4a3a:	8c ea       	ldi	r24, 0xAC	; 172
    4a3c:	91 e4       	ldi	r25, 0x41	; 65
    4a3e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <vListInitialise>
    4a42:	81 ea       	ldi	r24, 0xA1	; 161
    4a44:	91 e4       	ldi	r25, 0x41	; 65
    4a46:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <vListInitialise>
    4a4a:	82 e9       	ldi	r24, 0x92	; 146
    4a4c:	91 e4       	ldi	r25, 0x41	; 65
    4a4e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <vListInitialise>
    4a52:	8c ea       	ldi	r24, 0xAC	; 172
    4a54:	91 e4       	ldi	r25, 0x41	; 65
    4a56:	80 93 9f 41 	sts	0x419F, r24	; 0x80419f <pxDelayedTaskList>
    4a5a:	90 93 a0 41 	sts	0x41A0, r25	; 0x8041a0 <pxDelayedTaskList+0x1>
    4a5e:	81 ea       	ldi	r24, 0xA1	; 161
    4a60:	91 e4       	ldi	r25, 0x41	; 65
    4a62:	80 93 9d 41 	sts	0x419D, r24	; 0x80419d <pxOverflowDelayedTaskList>
    4a66:	90 93 9e 41 	sts	0x419E, r25	; 0x80419e <pxOverflowDelayedTaskList+0x1>
    4a6a:	0f c0       	rjmp	.+30     	; 0x4a8a <xTaskGenericCreate+0x178>
    4a6c:	80 91 88 41 	lds	r24, 0x4188	; 0x804188 <xSchedulerRunning>
    4a70:	81 11       	cpse	r24, r1
    4a72:	0b c0       	rjmp	.+22     	; 0x4a8a <xTaskGenericCreate+0x178>
    4a74:	e0 91 e3 41 	lds	r30, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4a78:	f0 91 e4 41 	lds	r31, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4a7c:	82 8d       	ldd	r24, Z+26	; 0x1a
    4a7e:	08 17       	cp	r16, r24
    4a80:	20 f0       	brcs	.+8      	; 0x4a8a <xTaskGenericCreate+0x178>
    4a82:	c0 93 e3 41 	sts	0x41E3, r28	; 0x8041e3 <pxCurrentTCB>
    4a86:	d0 93 e4 41 	sts	0x41E4, r29	; 0x8041e4 <pxCurrentTCB+0x1>
    4a8a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4a8c:	90 91 8a 41 	lds	r25, 0x418A	; 0x80418a <uxTopUsedPriority>
    4a90:	98 17       	cp	r25, r24
    4a92:	10 f4       	brcc	.+4      	; 0x4a98 <xTaskGenericCreate+0x186>
    4a94:	80 93 8a 41 	sts	0x418A, r24	; 0x80418a <uxTopUsedPriority>
    4a98:	90 91 83 41 	lds	r25, 0x4183	; 0x804183 <uxTaskNumber>
    4a9c:	9f 5f       	subi	r25, 0xFF	; 255
    4a9e:	90 93 83 41 	sts	0x4183, r25	; 0x804183 <uxTaskNumber>
    4aa2:	90 91 89 41 	lds	r25, 0x4189	; 0x804189 <uxTopReadyPriority>
    4aa6:	98 17       	cp	r25, r24
    4aa8:	10 f4       	brcc	.+4      	; 0x4aae <xTaskGenericCreate+0x19c>
    4aaa:	80 93 89 41 	sts	0x4189, r24	; 0x804189 <uxTopReadyPriority>
    4aae:	fb e0       	ldi	r31, 0x0B	; 11
    4ab0:	8f 9f       	mul	r24, r31
    4ab2:	c0 01       	movw	r24, r0
    4ab4:	11 24       	eor	r1, r1
    4ab6:	b6 01       	movw	r22, r12
    4ab8:	89 54       	subi	r24, 0x49	; 73
    4aba:	9e 4b       	sbci	r25, 0xBE	; 190
    4abc:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <vListInsertEnd>
    4ac0:	0f 90       	pop	r0
    4ac2:	0f be       	out	0x3f, r0	; 63
    4ac4:	80 91 88 41 	lds	r24, 0x4188	; 0x804188 <xSchedulerRunning>
    4ac8:	88 23       	and	r24, r24
    4aca:	59 f0       	breq	.+22     	; 0x4ae2 <xTaskGenericCreate+0x1d0>
    4acc:	e0 91 e3 41 	lds	r30, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4ad0:	f0 91 e4 41 	lds	r31, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4ad4:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ad6:	80 17       	cp	r24, r16
    4ad8:	30 f4       	brcc	.+12     	; 0x4ae6 <xTaskGenericCreate+0x1d4>
    4ada:	0e 94 8f 20 	call	0x411e	; 0x411e <vPortYield>
    4ade:	81 e0       	ldi	r24, 0x01	; 1
    4ae0:	09 c0       	rjmp	.+18     	; 0x4af4 <xTaskGenericCreate+0x1e2>
    4ae2:	81 e0       	ldi	r24, 0x01	; 1
    4ae4:	07 c0       	rjmp	.+14     	; 0x4af4 <xTaskGenericCreate+0x1e2>
    4ae6:	81 e0       	ldi	r24, 0x01	; 1
    4ae8:	05 c0       	rjmp	.+10     	; 0x4af4 <xTaskGenericCreate+0x1e2>
    4aea:	cb 8e       	std	Y+27, r12	; 0x1b
    4aec:	dc 8e       	std	Y+28, r13	; 0x1c
    4aee:	c6 01       	movw	r24, r12
    4af0:	3b cf       	rjmp	.-394    	; 0x4968 <xTaskGenericCreate+0x56>
    4af2:	8f ef       	ldi	r24, 0xFF	; 255
    4af4:	df 91       	pop	r29
    4af6:	cf 91       	pop	r28
    4af8:	1f 91       	pop	r17
    4afa:	0f 91       	pop	r16
    4afc:	ff 90       	pop	r15
    4afe:	ef 90       	pop	r14
    4b00:	df 90       	pop	r13
    4b02:	cf 90       	pop	r12
    4b04:	bf 90       	pop	r11
    4b06:	af 90       	pop	r10
    4b08:	9f 90       	pop	r9
    4b0a:	8f 90       	pop	r8
    4b0c:	7f 90       	pop	r7
    4b0e:	6f 90       	pop	r6
    4b10:	5f 90       	pop	r5
    4b12:	4f 90       	pop	r4
    4b14:	08 95       	ret

00004b16 <uxTaskPriorityGet>:
    4b16:	0f b6       	in	r0, 0x3f	; 63
    4b18:	f8 94       	cli
    4b1a:	0f 92       	push	r0
    4b1c:	00 97       	sbiw	r24, 0x00	; 0
    4b1e:	21 f4       	brne	.+8      	; 0x4b28 <uxTaskPriorityGet+0x12>
    4b20:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4b24:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4b28:	0f 90       	pop	r0
    4b2a:	0f be       	out	0x3f, r0	; 63
    4b2c:	fc 01       	movw	r30, r24
    4b2e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4b30:	08 95       	ret

00004b32 <vTaskStartScheduler>:
    4b32:	af 92       	push	r10
    4b34:	bf 92       	push	r11
    4b36:	cf 92       	push	r12
    4b38:	df 92       	push	r13
    4b3a:	ef 92       	push	r14
    4b3c:	ff 92       	push	r15
    4b3e:	0f 93       	push	r16
    4b40:	a1 2c       	mov	r10, r1
    4b42:	b1 2c       	mov	r11, r1
    4b44:	c1 2c       	mov	r12, r1
    4b46:	d1 2c       	mov	r13, r1
    4b48:	0f 2e       	mov	r0, r31
    4b4a:	f0 e9       	ldi	r31, 0x90	; 144
    4b4c:	ef 2e       	mov	r14, r31
    4b4e:	f1 e4       	ldi	r31, 0x41	; 65
    4b50:	ff 2e       	mov	r15, r31
    4b52:	f0 2d       	mov	r31, r0
    4b54:	00 e0       	ldi	r16, 0x00	; 0
    4b56:	20 e0       	ldi	r18, 0x00	; 0
    4b58:	30 e0       	ldi	r19, 0x00	; 0
    4b5a:	44 e6       	ldi	r20, 0x64	; 100
    4b5c:	50 e0       	ldi	r21, 0x00	; 0
    4b5e:	6d ea       	ldi	r22, 0xAD	; 173
    4b60:	70 e2       	ldi	r23, 0x20	; 32
    4b62:	83 e3       	ldi	r24, 0x33	; 51
    4b64:	94 e2       	ldi	r25, 0x24	; 36
    4b66:	0e 94 89 24 	call	0x4912	; 0x4912 <xTaskGenericCreate>
    4b6a:	81 30       	cpi	r24, 0x01	; 1
    4b6c:	69 f4       	brne	.+26     	; 0x4b88 <vTaskStartScheduler+0x56>
    4b6e:	f8 94       	cli
    4b70:	80 93 88 41 	sts	0x4188, r24	; 0x804188 <xSchedulerRunning>
    4b74:	10 92 8b 41 	sts	0x418B, r1	; 0x80418b <xTickCount>
    4b78:	10 92 8c 41 	sts	0x418C, r1	; 0x80418c <xTickCount+0x1>
    4b7c:	10 92 8d 41 	sts	0x418D, r1	; 0x80418d <xTickCount+0x2>
    4b80:	10 92 8e 41 	sts	0x418E, r1	; 0x80418e <xTickCount+0x3>
    4b84:	0e 94 4f 20 	call	0x409e	; 0x409e <xPortStartScheduler>
    4b88:	0f 91       	pop	r16
    4b8a:	ff 90       	pop	r15
    4b8c:	ef 90       	pop	r14
    4b8e:	df 90       	pop	r13
    4b90:	cf 90       	pop	r12
    4b92:	bf 90       	pop	r11
    4b94:	af 90       	pop	r10
    4b96:	08 95       	ret

00004b98 <vTaskSuspendAll>:
    4b98:	80 91 87 41 	lds	r24, 0x4187	; 0x804187 <uxSchedulerSuspended>
    4b9c:	8f 5f       	subi	r24, 0xFF	; 255
    4b9e:	80 93 87 41 	sts	0x4187, r24	; 0x804187 <uxSchedulerSuspended>
    4ba2:	08 95       	ret

00004ba4 <xTaskGetTickCount>:
    4ba4:	0f b6       	in	r0, 0x3f	; 63
    4ba6:	f8 94       	cli
    4ba8:	0f 92       	push	r0
    4baa:	60 91 8b 41 	lds	r22, 0x418B	; 0x80418b <xTickCount>
    4bae:	70 91 8c 41 	lds	r23, 0x418C	; 0x80418c <xTickCount+0x1>
    4bb2:	80 91 8d 41 	lds	r24, 0x418D	; 0x80418d <xTickCount+0x2>
    4bb6:	90 91 8e 41 	lds	r25, 0x418E	; 0x80418e <xTickCount+0x3>
    4bba:	0f 90       	pop	r0
    4bbc:	0f be       	out	0x3f, r0	; 63
    4bbe:	08 95       	ret

00004bc0 <pcTaskGetTaskName>:
    4bc0:	00 97       	sbiw	r24, 0x00	; 0
    4bc2:	21 f4       	brne	.+8      	; 0x4bcc <pcTaskGetTaskName+0xc>
    4bc4:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4bc8:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4bcc:	4d 96       	adiw	r24, 0x1d	; 29
    4bce:	08 95       	ret

00004bd0 <vTaskIncrementTick>:
    4bd0:	ff 92       	push	r15
    4bd2:	0f 93       	push	r16
    4bd4:	1f 93       	push	r17
    4bd6:	cf 93       	push	r28
    4bd8:	df 93       	push	r29
    4bda:	80 91 87 41 	lds	r24, 0x4187	; 0x804187 <uxSchedulerSuspended>
    4bde:	81 11       	cpse	r24, r1
    4be0:	ed c0       	rjmp	.+474    	; 0x4dbc <vTaskIncrementTick+0x1ec>
    4be2:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    4be6:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    4bea:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    4bee:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    4bf2:	01 96       	adiw	r24, 0x01	; 1
    4bf4:	a1 1d       	adc	r26, r1
    4bf6:	b1 1d       	adc	r27, r1
    4bf8:	80 93 8b 41 	sts	0x418B, r24	; 0x80418b <xTickCount>
    4bfc:	90 93 8c 41 	sts	0x418C, r25	; 0x80418c <xTickCount+0x1>
    4c00:	a0 93 8d 41 	sts	0x418D, r26	; 0x80418d <xTickCount+0x2>
    4c04:	b0 93 8e 41 	sts	0x418E, r27	; 0x80418e <xTickCount+0x3>
    4c08:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    4c0c:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    4c10:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    4c14:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    4c18:	89 2b       	or	r24, r25
    4c1a:	8a 2b       	or	r24, r26
    4c1c:	8b 2b       	or	r24, r27
    4c1e:	f1 f5       	brne	.+124    	; 0x4c9c <vTaskIncrementTick+0xcc>
    4c20:	80 91 9f 41 	lds	r24, 0x419F	; 0x80419f <pxDelayedTaskList>
    4c24:	90 91 a0 41 	lds	r25, 0x41A0	; 0x8041a0 <pxDelayedTaskList+0x1>
    4c28:	20 91 9d 41 	lds	r18, 0x419D	; 0x80419d <pxOverflowDelayedTaskList>
    4c2c:	30 91 9e 41 	lds	r19, 0x419E	; 0x80419e <pxOverflowDelayedTaskList+0x1>
    4c30:	20 93 9f 41 	sts	0x419F, r18	; 0x80419f <pxDelayedTaskList>
    4c34:	30 93 a0 41 	sts	0x41A0, r19	; 0x8041a0 <pxDelayedTaskList+0x1>
    4c38:	80 93 9d 41 	sts	0x419D, r24	; 0x80419d <pxOverflowDelayedTaskList>
    4c3c:	90 93 9e 41 	sts	0x419E, r25	; 0x80419e <pxOverflowDelayedTaskList+0x1>
    4c40:	80 91 84 41 	lds	r24, 0x4184	; 0x804184 <xNumOfOverflows>
    4c44:	8f 5f       	subi	r24, 0xFF	; 255
    4c46:	80 93 84 41 	sts	0x4184, r24	; 0x804184 <xNumOfOverflows>
    4c4a:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <pxDelayedTaskList>
    4c4e:	f0 91 a0 41 	lds	r31, 0x41A0	; 0x8041a0 <pxDelayedTaskList+0x1>
    4c52:	80 81       	ld	r24, Z
    4c54:	81 11       	cpse	r24, r1
    4c56:	0c c0       	rjmp	.+24     	; 0x4c70 <vTaskIncrementTick+0xa0>
    4c58:	8f ef       	ldi	r24, 0xFF	; 255
    4c5a:	9f ef       	ldi	r25, 0xFF	; 255
    4c5c:	dc 01       	movw	r26, r24
    4c5e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    4c62:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    4c66:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    4c6a:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    4c6e:	16 c0       	rjmp	.+44     	; 0x4c9c <vTaskIncrementTick+0xcc>
    4c70:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <pxDelayedTaskList>
    4c74:	f0 91 a0 41 	lds	r31, 0x41A0	; 0x8041a0 <pxDelayedTaskList+0x1>
    4c78:	07 80       	ldd	r0, Z+7	; 0x07
    4c7a:	f0 85       	ldd	r31, Z+8	; 0x08
    4c7c:	e0 2d       	mov	r30, r0
    4c7e:	00 84       	ldd	r0, Z+8	; 0x08
    4c80:	f1 85       	ldd	r31, Z+9	; 0x09
    4c82:	e0 2d       	mov	r30, r0
    4c84:	82 81       	ldd	r24, Z+2	; 0x02
    4c86:	93 81       	ldd	r25, Z+3	; 0x03
    4c88:	a4 81       	ldd	r26, Z+4	; 0x04
    4c8a:	b5 81       	ldd	r27, Z+5	; 0x05
    4c8c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    4c90:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    4c94:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    4c98:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    4c9c:	40 91 8b 41 	lds	r20, 0x418B	; 0x80418b <xTickCount>
    4ca0:	50 91 8c 41 	lds	r21, 0x418C	; 0x80418c <xTickCount+0x1>
    4ca4:	60 91 8d 41 	lds	r22, 0x418D	; 0x80418d <xTickCount+0x2>
    4ca8:	70 91 8e 41 	lds	r23, 0x418E	; 0x80418e <xTickCount+0x3>
    4cac:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    4cb0:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    4cb4:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    4cb8:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    4cbc:	48 17       	cp	r20, r24
    4cbe:	59 07       	cpc	r21, r25
    4cc0:	6a 07       	cpc	r22, r26
    4cc2:	7b 07       	cpc	r23, r27
    4cc4:	08 f4       	brcc	.+2      	; 0x4cc8 <vTaskIncrementTick+0xf8>
    4cc6:	7f c0       	rjmp	.+254    	; 0x4dc6 <vTaskIncrementTick+0x1f6>
    4cc8:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <pxDelayedTaskList>
    4ccc:	f0 91 a0 41 	lds	r31, 0x41A0	; 0x8041a0 <pxDelayedTaskList+0x1>
    4cd0:	80 81       	ld	r24, Z
    4cd2:	88 23       	and	r24, r24
    4cd4:	f9 f0       	breq	.+62     	; 0x4d14 <vTaskIncrementTick+0x144>
    4cd6:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <pxDelayedTaskList>
    4cda:	f0 91 a0 41 	lds	r31, 0x41A0	; 0x8041a0 <pxDelayedTaskList+0x1>
    4cde:	07 80       	ldd	r0, Z+7	; 0x07
    4ce0:	f0 85       	ldd	r31, Z+8	; 0x08
    4ce2:	e0 2d       	mov	r30, r0
    4ce4:	c0 85       	ldd	r28, Z+8	; 0x08
    4ce6:	d1 85       	ldd	r29, Z+9	; 0x09
    4ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    4cea:	9b 81       	ldd	r25, Y+3	; 0x03
    4cec:	ac 81       	ldd	r26, Y+4	; 0x04
    4cee:	bd 81       	ldd	r27, Y+5	; 0x05
    4cf0:	40 91 8b 41 	lds	r20, 0x418B	; 0x80418b <xTickCount>
    4cf4:	50 91 8c 41 	lds	r21, 0x418C	; 0x80418c <xTickCount+0x1>
    4cf8:	60 91 8d 41 	lds	r22, 0x418D	; 0x80418d <xTickCount+0x2>
    4cfc:	70 91 8e 41 	lds	r23, 0x418E	; 0x80418e <xTickCount+0x3>
    4d00:	48 17       	cp	r20, r24
    4d02:	59 07       	cpc	r21, r25
    4d04:	6a 07       	cpc	r22, r26
    4d06:	7b 07       	cpc	r23, r27
    4d08:	58 f1       	brcs	.+86     	; 0x4d60 <vTaskIncrementTick+0x190>
    4d0a:	0f 2e       	mov	r0, r31
    4d0c:	fb e0       	ldi	r31, 0x0B	; 11
    4d0e:	ff 2e       	mov	r15, r31
    4d10:	f0 2d       	mov	r31, r0
    4d12:	2f c0       	rjmp	.+94     	; 0x4d72 <vTaskIncrementTick+0x1a2>
    4d14:	8f ef       	ldi	r24, 0xFF	; 255
    4d16:	9f ef       	ldi	r25, 0xFF	; 255
    4d18:	dc 01       	movw	r26, r24
    4d1a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    4d1e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    4d22:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    4d26:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    4d2a:	4d c0       	rjmp	.+154    	; 0x4dc6 <vTaskIncrementTick+0x1f6>
    4d2c:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <pxDelayedTaskList>
    4d30:	f0 91 a0 41 	lds	r31, 0x41A0	; 0x8041a0 <pxDelayedTaskList+0x1>
    4d34:	07 80       	ldd	r0, Z+7	; 0x07
    4d36:	f0 85       	ldd	r31, Z+8	; 0x08
    4d38:	e0 2d       	mov	r30, r0
    4d3a:	c0 85       	ldd	r28, Z+8	; 0x08
    4d3c:	d1 85       	ldd	r29, Z+9	; 0x09
    4d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d40:	9b 81       	ldd	r25, Y+3	; 0x03
    4d42:	ac 81       	ldd	r26, Y+4	; 0x04
    4d44:	bd 81       	ldd	r27, Y+5	; 0x05
    4d46:	40 91 8b 41 	lds	r20, 0x418B	; 0x80418b <xTickCount>
    4d4a:	50 91 8c 41 	lds	r21, 0x418C	; 0x80418c <xTickCount+0x1>
    4d4e:	60 91 8d 41 	lds	r22, 0x418D	; 0x80418d <xTickCount+0x2>
    4d52:	70 91 8e 41 	lds	r23, 0x418E	; 0x80418e <xTickCount+0x3>
    4d56:	48 17       	cp	r20, r24
    4d58:	59 07       	cpc	r21, r25
    4d5a:	6a 07       	cpc	r22, r26
    4d5c:	7b 07       	cpc	r23, r27
    4d5e:	48 f4       	brcc	.+18     	; 0x4d72 <vTaskIncrementTick+0x1a2>
    4d60:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    4d64:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    4d68:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    4d6c:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    4d70:	2a c0       	rjmp	.+84     	; 0x4dc6 <vTaskIncrementTick+0x1f6>
    4d72:	8e 01       	movw	r16, r28
    4d74:	0e 5f       	subi	r16, 0xFE	; 254
    4d76:	1f 4f       	sbci	r17, 0xFF	; 255
    4d78:	c8 01       	movw	r24, r16
    4d7a:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <vListRemove>
    4d7e:	88 8d       	ldd	r24, Y+24	; 0x18
    4d80:	99 8d       	ldd	r25, Y+25	; 0x19
    4d82:	89 2b       	or	r24, r25
    4d84:	21 f0       	breq	.+8      	; 0x4d8e <vTaskIncrementTick+0x1be>
    4d86:	ce 01       	movw	r24, r28
    4d88:	0e 96       	adiw	r24, 0x0e	; 14
    4d8a:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <vListRemove>
    4d8e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4d90:	90 91 89 41 	lds	r25, 0x4189	; 0x804189 <uxTopReadyPriority>
    4d94:	98 17       	cp	r25, r24
    4d96:	10 f4       	brcc	.+4      	; 0x4d9c <vTaskIncrementTick+0x1cc>
    4d98:	80 93 89 41 	sts	0x4189, r24	; 0x804189 <uxTopReadyPriority>
    4d9c:	f8 9e       	mul	r15, r24
    4d9e:	c0 01       	movw	r24, r0
    4da0:	11 24       	eor	r1, r1
    4da2:	b8 01       	movw	r22, r16
    4da4:	89 54       	subi	r24, 0x49	; 73
    4da6:	9e 4b       	sbci	r25, 0xBE	; 190
    4da8:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <vListInsertEnd>
    4dac:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <pxDelayedTaskList>
    4db0:	f0 91 a0 41 	lds	r31, 0x41A0	; 0x8041a0 <pxDelayedTaskList+0x1>
    4db4:	80 81       	ld	r24, Z
    4db6:	81 11       	cpse	r24, r1
    4db8:	b9 cf       	rjmp	.-142    	; 0x4d2c <vTaskIncrementTick+0x15c>
    4dba:	ac cf       	rjmp	.-168    	; 0x4d14 <vTaskIncrementTick+0x144>
    4dbc:	80 91 86 41 	lds	r24, 0x4186	; 0x804186 <uxMissedTicks>
    4dc0:	8f 5f       	subi	r24, 0xFF	; 255
    4dc2:	80 93 86 41 	sts	0x4186, r24	; 0x804186 <uxMissedTicks>
    4dc6:	df 91       	pop	r29
    4dc8:	cf 91       	pop	r28
    4dca:	1f 91       	pop	r17
    4dcc:	0f 91       	pop	r16
    4dce:	ff 90       	pop	r15
    4dd0:	08 95       	ret

00004dd2 <xTaskResumeAll>:
    4dd2:	cf 92       	push	r12
    4dd4:	df 92       	push	r13
    4dd6:	ef 92       	push	r14
    4dd8:	ff 92       	push	r15
    4dda:	0f 93       	push	r16
    4ddc:	1f 93       	push	r17
    4dde:	cf 93       	push	r28
    4de0:	df 93       	push	r29
    4de2:	0f b6       	in	r0, 0x3f	; 63
    4de4:	f8 94       	cli
    4de6:	0f 92       	push	r0
    4de8:	80 91 87 41 	lds	r24, 0x4187	; 0x804187 <uxSchedulerSuspended>
    4dec:	81 50       	subi	r24, 0x01	; 1
    4dee:	80 93 87 41 	sts	0x4187, r24	; 0x804187 <uxSchedulerSuspended>
    4df2:	80 91 87 41 	lds	r24, 0x4187	; 0x804187 <uxSchedulerSuspended>
    4df6:	81 11       	cpse	r24, r1
    4df8:	60 c0       	rjmp	.+192    	; 0x4eba <xTaskResumeAll+0xe8>
    4dfa:	80 91 8f 41 	lds	r24, 0x418F	; 0x80418f <uxCurrentNumberOfTasks>
    4dfe:	81 11       	cpse	r24, r1
    4e00:	2c c0       	rjmp	.+88     	; 0x4e5a <xTaskResumeAll+0x88>
    4e02:	5e c0       	rjmp	.+188    	; 0x4ec0 <xTaskResumeAll+0xee>
    4e04:	d7 01       	movw	r26, r14
    4e06:	17 96       	adiw	r26, 0x07	; 7
    4e08:	ed 91       	ld	r30, X+
    4e0a:	fc 91       	ld	r31, X
    4e0c:	18 97       	sbiw	r26, 0x08	; 8
    4e0e:	c0 85       	ldd	r28, Z+8	; 0x08
    4e10:	d1 85       	ldd	r29, Z+9	; 0x09
    4e12:	ce 01       	movw	r24, r28
    4e14:	0e 96       	adiw	r24, 0x0e	; 14
    4e16:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <vListRemove>
    4e1a:	8e 01       	movw	r16, r28
    4e1c:	0e 5f       	subi	r16, 0xFE	; 254
    4e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e20:	c8 01       	movw	r24, r16
    4e22:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <vListRemove>
    4e26:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4e28:	90 91 89 41 	lds	r25, 0x4189	; 0x804189 <uxTopReadyPriority>
    4e2c:	98 17       	cp	r25, r24
    4e2e:	10 f4       	brcc	.+4      	; 0x4e34 <xTaskResumeAll+0x62>
    4e30:	80 93 89 41 	sts	0x4189, r24	; 0x804189 <uxTopReadyPriority>
    4e34:	d8 9e       	mul	r13, r24
    4e36:	c0 01       	movw	r24, r0
    4e38:	11 24       	eor	r1, r1
    4e3a:	b8 01       	movw	r22, r16
    4e3c:	89 54       	subi	r24, 0x49	; 73
    4e3e:	9e 4b       	sbci	r25, 0xBE	; 190
    4e40:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <vListInsertEnd>
    4e44:	e0 91 e3 41 	lds	r30, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4e48:	f0 91 e4 41 	lds	r31, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4e4c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4e4e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4e50:	98 17       	cp	r25, r24
    4e52:	70 f0       	brcs	.+28     	; 0x4e70 <xTaskResumeAll+0x9e>
    4e54:	cc 24       	eor	r12, r12
    4e56:	c3 94       	inc	r12
    4e58:	0b c0       	rjmp	.+22     	; 0x4e70 <xTaskResumeAll+0x9e>
    4e5a:	c1 2c       	mov	r12, r1
    4e5c:	0f 2e       	mov	r0, r31
    4e5e:	f2 e9       	ldi	r31, 0x92	; 146
    4e60:	ef 2e       	mov	r14, r31
    4e62:	f1 e4       	ldi	r31, 0x41	; 65
    4e64:	ff 2e       	mov	r15, r31
    4e66:	f0 2d       	mov	r31, r0
    4e68:	0f 2e       	mov	r0, r31
    4e6a:	fb e0       	ldi	r31, 0x0B	; 11
    4e6c:	df 2e       	mov	r13, r31
    4e6e:	f0 2d       	mov	r31, r0
    4e70:	f7 01       	movw	r30, r14
    4e72:	80 81       	ld	r24, Z
    4e74:	81 11       	cpse	r24, r1
    4e76:	c6 cf       	rjmp	.-116    	; 0x4e04 <xTaskResumeAll+0x32>
    4e78:	80 91 86 41 	lds	r24, 0x4186	; 0x804186 <uxMissedTicks>
    4e7c:	88 23       	and	r24, r24
    4e7e:	81 f0       	breq	.+32     	; 0x4ea0 <xTaskResumeAll+0xce>
    4e80:	80 91 86 41 	lds	r24, 0x4186	; 0x804186 <uxMissedTicks>
    4e84:	88 23       	and	r24, r24
    4e86:	99 f0       	breq	.+38     	; 0x4eae <xTaskResumeAll+0xdc>
    4e88:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <vTaskIncrementTick>
    4e8c:	80 91 86 41 	lds	r24, 0x4186	; 0x804186 <uxMissedTicks>
    4e90:	81 50       	subi	r24, 0x01	; 1
    4e92:	80 93 86 41 	sts	0x4186, r24	; 0x804186 <uxMissedTicks>
    4e96:	80 91 86 41 	lds	r24, 0x4186	; 0x804186 <uxMissedTicks>
    4e9a:	81 11       	cpse	r24, r1
    4e9c:	f5 cf       	rjmp	.-22     	; 0x4e88 <xTaskResumeAll+0xb6>
    4e9e:	07 c0       	rjmp	.+14     	; 0x4eae <xTaskResumeAll+0xdc>
    4ea0:	f1 e0       	ldi	r31, 0x01	; 1
    4ea2:	cf 16       	cp	r12, r31
    4ea4:	21 f0       	breq	.+8      	; 0x4eae <xTaskResumeAll+0xdc>
    4ea6:	80 91 85 41 	lds	r24, 0x4185	; 0x804185 <xMissedYield>
    4eaa:	81 30       	cpi	r24, 0x01	; 1
    4eac:	41 f4       	brne	.+16     	; 0x4ebe <xTaskResumeAll+0xec>
    4eae:	10 92 85 41 	sts	0x4185, r1	; 0x804185 <xMissedYield>
    4eb2:	0e 94 8f 20 	call	0x411e	; 0x411e <vPortYield>
    4eb6:	81 e0       	ldi	r24, 0x01	; 1
    4eb8:	03 c0       	rjmp	.+6      	; 0x4ec0 <xTaskResumeAll+0xee>
    4eba:	80 e0       	ldi	r24, 0x00	; 0
    4ebc:	01 c0       	rjmp	.+2      	; 0x4ec0 <xTaskResumeAll+0xee>
    4ebe:	80 e0       	ldi	r24, 0x00	; 0
    4ec0:	0f 90       	pop	r0
    4ec2:	0f be       	out	0x3f, r0	; 63
    4ec4:	df 91       	pop	r29
    4ec6:	cf 91       	pop	r28
    4ec8:	1f 91       	pop	r17
    4eca:	0f 91       	pop	r16
    4ecc:	ff 90       	pop	r15
    4ece:	ef 90       	pop	r14
    4ed0:	df 90       	pop	r13
    4ed2:	cf 90       	pop	r12
    4ed4:	08 95       	ret

00004ed6 <vTaskDelayUntil>:
    4ed6:	cf 92       	push	r12
    4ed8:	df 92       	push	r13
    4eda:	ef 92       	push	r14
    4edc:	ff 92       	push	r15
    4ede:	cf 93       	push	r28
    4ee0:	df 93       	push	r29
    4ee2:	ec 01       	movw	r28, r24
    4ee4:	6a 01       	movw	r12, r20
    4ee6:	7b 01       	movw	r14, r22
    4ee8:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <vTaskSuspendAll>
    4eec:	88 81       	ld	r24, Y
    4eee:	99 81       	ldd	r25, Y+1	; 0x01
    4ef0:	aa 81       	ldd	r26, Y+2	; 0x02
    4ef2:	bb 81       	ldd	r27, Y+3	; 0x03
    4ef4:	c8 0e       	add	r12, r24
    4ef6:	d9 1e       	adc	r13, r25
    4ef8:	ea 1e       	adc	r14, r26
    4efa:	fb 1e       	adc	r15, r27
    4efc:	40 91 8b 41 	lds	r20, 0x418B	; 0x80418b <xTickCount>
    4f00:	50 91 8c 41 	lds	r21, 0x418C	; 0x80418c <xTickCount+0x1>
    4f04:	60 91 8d 41 	lds	r22, 0x418D	; 0x80418d <xTickCount+0x2>
    4f08:	70 91 8e 41 	lds	r23, 0x418E	; 0x80418e <xTickCount+0x3>
    4f0c:	48 17       	cp	r20, r24
    4f0e:	59 07       	cpc	r21, r25
    4f10:	6a 07       	cpc	r22, r26
    4f12:	7b 07       	cpc	r23, r27
    4f14:	b8 f4       	brcc	.+46     	; 0x4f44 <vTaskDelayUntil+0x6e>
    4f16:	c8 16       	cp	r12, r24
    4f18:	d9 06       	cpc	r13, r25
    4f1a:	ea 06       	cpc	r14, r26
    4f1c:	fb 06       	cpc	r15, r27
    4f1e:	e0 f5       	brcc	.+120    	; 0x4f98 <vTaskDelayUntil+0xc2>
    4f20:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    4f24:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    4f28:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    4f2c:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    4f30:	c8 82       	st	Y, r12
    4f32:	d9 82       	std	Y+1, r13	; 0x01
    4f34:	ea 82       	std	Y+2, r14	; 0x02
    4f36:	fb 82       	std	Y+3, r15	; 0x03
    4f38:	8c 15       	cp	r24, r12
    4f3a:	9d 05       	cpc	r25, r13
    4f3c:	ae 05       	cpc	r26, r14
    4f3e:	bf 05       	cpc	r27, r15
    4f40:	f8 f4       	brcc	.+62     	; 0x4f80 <vTaskDelayUntil+0xaa>
    4f42:	13 c0       	rjmp	.+38     	; 0x4f6a <vTaskDelayUntil+0x94>
    4f44:	c8 16       	cp	r12, r24
    4f46:	d9 06       	cpc	r13, r25
    4f48:	ea 06       	cpc	r14, r26
    4f4a:	fb 06       	cpc	r15, r27
    4f4c:	00 f1       	brcs	.+64     	; 0x4f8e <vTaskDelayUntil+0xb8>
    4f4e:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    4f52:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    4f56:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    4f5a:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    4f5e:	8c 15       	cp	r24, r12
    4f60:	9d 05       	cpc	r25, r13
    4f62:	ae 05       	cpc	r26, r14
    4f64:	bf 05       	cpc	r27, r15
    4f66:	98 f0       	brcs	.+38     	; 0x4f8e <vTaskDelayUntil+0xb8>
    4f68:	17 c0       	rjmp	.+46     	; 0x4f98 <vTaskDelayUntil+0xc2>
    4f6a:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4f6e:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4f72:	02 96       	adiw	r24, 0x02	; 2
    4f74:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <vListRemove>
    4f78:	c7 01       	movw	r24, r14
    4f7a:	b6 01       	movw	r22, r12
    4f7c:	0e 94 3b 24 	call	0x4876	; 0x4876 <prvAddCurrentTaskToDelayedList>
    4f80:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <xTaskResumeAll>
    4f84:	81 11       	cpse	r24, r1
    4f86:	0d c0       	rjmp	.+26     	; 0x4fa2 <vTaskDelayUntil+0xcc>
    4f88:	0e 94 8f 20 	call	0x411e	; 0x411e <vPortYield>
    4f8c:	0a c0       	rjmp	.+20     	; 0x4fa2 <vTaskDelayUntil+0xcc>
    4f8e:	c8 82       	st	Y, r12
    4f90:	d9 82       	std	Y+1, r13	; 0x01
    4f92:	ea 82       	std	Y+2, r14	; 0x02
    4f94:	fb 82       	std	Y+3, r15	; 0x03
    4f96:	e9 cf       	rjmp	.-46     	; 0x4f6a <vTaskDelayUntil+0x94>
    4f98:	c8 82       	st	Y, r12
    4f9a:	d9 82       	std	Y+1, r13	; 0x01
    4f9c:	ea 82       	std	Y+2, r14	; 0x02
    4f9e:	fb 82       	std	Y+3, r15	; 0x03
    4fa0:	ef cf       	rjmp	.-34     	; 0x4f80 <vTaskDelayUntil+0xaa>
    4fa2:	df 91       	pop	r29
    4fa4:	cf 91       	pop	r28
    4fa6:	ff 90       	pop	r15
    4fa8:	ef 90       	pop	r14
    4faa:	df 90       	pop	r13
    4fac:	cf 90       	pop	r12
    4fae:	08 95       	ret

00004fb0 <vTaskDelay>:
    4fb0:	cf 92       	push	r12
    4fb2:	df 92       	push	r13
    4fb4:	ef 92       	push	r14
    4fb6:	ff 92       	push	r15
    4fb8:	6b 01       	movw	r12, r22
    4fba:	7c 01       	movw	r14, r24
    4fbc:	67 2b       	or	r22, r23
    4fbe:	68 2b       	or	r22, r24
    4fc0:	69 2b       	or	r22, r25
    4fc2:	e9 f0       	breq	.+58     	; 0x4ffe <vTaskDelay+0x4e>
    4fc4:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <vTaskSuspendAll>
    4fc8:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    4fcc:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    4fd0:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    4fd4:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    4fd8:	c8 0e       	add	r12, r24
    4fda:	d9 1e       	adc	r13, r25
    4fdc:	ea 1e       	adc	r14, r26
    4fde:	fb 1e       	adc	r15, r27
    4fe0:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    4fe4:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    4fe8:	02 96       	adiw	r24, 0x02	; 2
    4fea:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <vListRemove>
    4fee:	c7 01       	movw	r24, r14
    4ff0:	b6 01       	movw	r22, r12
    4ff2:	0e 94 3b 24 	call	0x4876	; 0x4876 <prvAddCurrentTaskToDelayedList>
    4ff6:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <xTaskResumeAll>
    4ffa:	81 11       	cpse	r24, r1
    4ffc:	02 c0       	rjmp	.+4      	; 0x5002 <vTaskDelay+0x52>
    4ffe:	0e 94 8f 20 	call	0x411e	; 0x411e <vPortYield>
    5002:	ff 90       	pop	r15
    5004:	ef 90       	pop	r14
    5006:	df 90       	pop	r13
    5008:	cf 90       	pop	r12
    500a:	08 95       	ret

0000500c <vTaskSwitchContext>:
    500c:	80 91 87 41 	lds	r24, 0x4187	; 0x804187 <uxSchedulerSuspended>
    5010:	81 11       	cpse	r24, r1
    5012:	0c c0       	rjmp	.+24     	; 0x502c <vTaskSwitchContext+0x20>
    5014:	e0 91 89 41 	lds	r30, 0x4189	; 0x804189 <uxTopReadyPriority>
    5018:	4b e0       	ldi	r20, 0x0B	; 11
    501a:	e4 9f       	mul	r30, r20
    501c:	f0 01       	movw	r30, r0
    501e:	11 24       	eor	r1, r1
    5020:	e9 54       	subi	r30, 0x49	; 73
    5022:	fe 4b       	sbci	r31, 0xBE	; 190
    5024:	80 81       	ld	r24, Z
    5026:	88 23       	and	r24, r24
    5028:	29 f0       	breq	.+10     	; 0x5034 <vTaskSwitchContext+0x28>
    502a:	14 c0       	rjmp	.+40     	; 0x5054 <vTaskSwitchContext+0x48>
    502c:	81 e0       	ldi	r24, 0x01	; 1
    502e:	80 93 85 41 	sts	0x4185, r24	; 0x804185 <xMissedYield>
    5032:	08 95       	ret
    5034:	9b e0       	ldi	r25, 0x0B	; 11
    5036:	80 91 89 41 	lds	r24, 0x4189	; 0x804189 <uxTopReadyPriority>
    503a:	81 50       	subi	r24, 0x01	; 1
    503c:	80 93 89 41 	sts	0x4189, r24	; 0x804189 <uxTopReadyPriority>
    5040:	e0 91 89 41 	lds	r30, 0x4189	; 0x804189 <uxTopReadyPriority>
    5044:	9e 9f       	mul	r25, r30
    5046:	f0 01       	movw	r30, r0
    5048:	11 24       	eor	r1, r1
    504a:	e9 54       	subi	r30, 0x49	; 73
    504c:	fe 4b       	sbci	r31, 0xBE	; 190
    504e:	80 81       	ld	r24, Z
    5050:	88 23       	and	r24, r24
    5052:	89 f3       	breq	.-30     	; 0x5036 <vTaskSwitchContext+0x2a>
    5054:	80 91 89 41 	lds	r24, 0x4189	; 0x804189 <uxTopReadyPriority>
    5058:	28 2f       	mov	r18, r24
    505a:	30 e0       	ldi	r19, 0x00	; 0
    505c:	4b e0       	ldi	r20, 0x0B	; 11
    505e:	84 9f       	mul	r24, r20
    5060:	c0 01       	movw	r24, r0
    5062:	11 24       	eor	r1, r1
    5064:	dc 01       	movw	r26, r24
    5066:	a9 54       	subi	r26, 0x49	; 73
    5068:	be 4b       	sbci	r27, 0xBE	; 190
    506a:	11 96       	adiw	r26, 0x01	; 1
    506c:	ed 91       	ld	r30, X+
    506e:	fc 91       	ld	r31, X
    5070:	12 97       	sbiw	r26, 0x02	; 2
    5072:	04 80       	ldd	r0, Z+4	; 0x04
    5074:	f5 81       	ldd	r31, Z+5	; 0x05
    5076:	e0 2d       	mov	r30, r0
    5078:	11 96       	adiw	r26, 0x01	; 1
    507a:	ed 93       	st	X+, r30
    507c:	fc 93       	st	X, r31
    507e:	12 97       	sbiw	r26, 0x02	; 2
    5080:	86 54       	subi	r24, 0x46	; 70
    5082:	9e 4b       	sbci	r25, 0xBE	; 190
    5084:	e8 17       	cp	r30, r24
    5086:	f9 07       	cpc	r31, r25
    5088:	61 f4       	brne	.+24     	; 0x50a2 <vTaskSwitchContext+0x96>
    508a:	84 81       	ldd	r24, Z+4	; 0x04
    508c:	95 81       	ldd	r25, Z+5	; 0x05
    508e:	4b e0       	ldi	r20, 0x0B	; 11
    5090:	42 9f       	mul	r20, r18
    5092:	f0 01       	movw	r30, r0
    5094:	43 9f       	mul	r20, r19
    5096:	f0 0d       	add	r31, r0
    5098:	11 24       	eor	r1, r1
    509a:	e9 54       	subi	r30, 0x49	; 73
    509c:	fe 4b       	sbci	r31, 0xBE	; 190
    509e:	81 83       	std	Z+1, r24	; 0x01
    50a0:	92 83       	std	Z+2, r25	; 0x02
    50a2:	8b e0       	ldi	r24, 0x0B	; 11
    50a4:	82 9f       	mul	r24, r18
    50a6:	f0 01       	movw	r30, r0
    50a8:	83 9f       	mul	r24, r19
    50aa:	f0 0d       	add	r31, r0
    50ac:	11 24       	eor	r1, r1
    50ae:	e9 54       	subi	r30, 0x49	; 73
    50b0:	fe 4b       	sbci	r31, 0xBE	; 190
    50b2:	01 80       	ldd	r0, Z+1	; 0x01
    50b4:	f2 81       	ldd	r31, Z+2	; 0x02
    50b6:	e0 2d       	mov	r30, r0
    50b8:	80 85       	ldd	r24, Z+8	; 0x08
    50ba:	91 85       	ldd	r25, Z+9	; 0x09
    50bc:	80 93 e3 41 	sts	0x41E3, r24	; 0x8041e3 <pxCurrentTCB>
    50c0:	90 93 e4 41 	sts	0x41E4, r25	; 0x8041e4 <pxCurrentTCB+0x1>
    50c4:	08 95       	ret

000050c6 <vTaskPlaceOnEventList>:
    50c6:	cf 92       	push	r12
    50c8:	df 92       	push	r13
    50ca:	ef 92       	push	r14
    50cc:	ff 92       	push	r15
    50ce:	6a 01       	movw	r12, r20
    50d0:	7b 01       	movw	r14, r22
    50d2:	60 91 e3 41 	lds	r22, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    50d6:	70 91 e4 41 	lds	r23, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    50da:	62 5f       	subi	r22, 0xF2	; 242
    50dc:	7f 4f       	sbci	r23, 0xFF	; 255
    50de:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <vListInsert>
    50e2:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    50e6:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    50ea:	02 96       	adiw	r24, 0x02	; 2
    50ec:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <vListRemove>
    50f0:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    50f4:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    50f8:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    50fc:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    5100:	bc 01       	movw	r22, r24
    5102:	cd 01       	movw	r24, r26
    5104:	6c 0d       	add	r22, r12
    5106:	7d 1d       	adc	r23, r13
    5108:	8e 1d       	adc	r24, r14
    510a:	9f 1d       	adc	r25, r15
    510c:	0e 94 3b 24 	call	0x4876	; 0x4876 <prvAddCurrentTaskToDelayedList>
    5110:	ff 90       	pop	r15
    5112:	ef 90       	pop	r14
    5114:	df 90       	pop	r13
    5116:	cf 90       	pop	r12
    5118:	08 95       	ret

0000511a <xTaskRemoveFromEventList>:
    511a:	0f 93       	push	r16
    511c:	1f 93       	push	r17
    511e:	cf 93       	push	r28
    5120:	df 93       	push	r29
    5122:	dc 01       	movw	r26, r24
    5124:	17 96       	adiw	r26, 0x07	; 7
    5126:	ed 91       	ld	r30, X+
    5128:	fc 91       	ld	r31, X
    512a:	18 97       	sbiw	r26, 0x08	; 8
    512c:	c0 85       	ldd	r28, Z+8	; 0x08
    512e:	d1 85       	ldd	r29, Z+9	; 0x09
    5130:	8e 01       	movw	r16, r28
    5132:	02 5f       	subi	r16, 0xF2	; 242
    5134:	1f 4f       	sbci	r17, 0xFF	; 255
    5136:	c8 01       	movw	r24, r16
    5138:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <vListRemove>
    513c:	80 91 87 41 	lds	r24, 0x4187	; 0x804187 <uxSchedulerSuspended>
    5140:	81 11       	cpse	r24, r1
    5142:	16 c0       	rjmp	.+44     	; 0x5170 <xTaskRemoveFromEventList+0x56>
    5144:	0c 50       	subi	r16, 0x0C	; 12
    5146:	11 09       	sbc	r17, r1
    5148:	c8 01       	movw	r24, r16
    514a:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <vListRemove>
    514e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5150:	90 91 89 41 	lds	r25, 0x4189	; 0x804189 <uxTopReadyPriority>
    5154:	98 17       	cp	r25, r24
    5156:	10 f4       	brcc	.+4      	; 0x515c <xTaskRemoveFromEventList+0x42>
    5158:	80 93 89 41 	sts	0x4189, r24	; 0x804189 <uxTopReadyPriority>
    515c:	bb e0       	ldi	r27, 0x0B	; 11
    515e:	8b 9f       	mul	r24, r27
    5160:	c0 01       	movw	r24, r0
    5162:	11 24       	eor	r1, r1
    5164:	b8 01       	movw	r22, r16
    5166:	89 54       	subi	r24, 0x49	; 73
    5168:	9e 4b       	sbci	r25, 0xBE	; 190
    516a:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <vListInsertEnd>
    516e:	05 c0       	rjmp	.+10     	; 0x517a <xTaskRemoveFromEventList+0x60>
    5170:	b8 01       	movw	r22, r16
    5172:	82 e9       	ldi	r24, 0x92	; 146
    5174:	91 e4       	ldi	r25, 0x41	; 65
    5176:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <vListInsertEnd>
    517a:	e0 91 e3 41 	lds	r30, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    517e:	f0 91 e4 41 	lds	r31, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    5182:	81 e0       	ldi	r24, 0x01	; 1
    5184:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5186:	92 8d       	ldd	r25, Z+26	; 0x1a
    5188:	29 17       	cp	r18, r25
    518a:	08 f4       	brcc	.+2      	; 0x518e <xTaskRemoveFromEventList+0x74>
    518c:	80 e0       	ldi	r24, 0x00	; 0
    518e:	df 91       	pop	r29
    5190:	cf 91       	pop	r28
    5192:	1f 91       	pop	r17
    5194:	0f 91       	pop	r16
    5196:	08 95       	ret

00005198 <vTaskSetTimeOutState>:
    5198:	20 91 84 41 	lds	r18, 0x4184	; 0x804184 <xNumOfOverflows>
    519c:	fc 01       	movw	r30, r24
    519e:	20 83       	st	Z, r18
    51a0:	40 91 8b 41 	lds	r20, 0x418B	; 0x80418b <xTickCount>
    51a4:	50 91 8c 41 	lds	r21, 0x418C	; 0x80418c <xTickCount+0x1>
    51a8:	60 91 8d 41 	lds	r22, 0x418D	; 0x80418d <xTickCount+0x2>
    51ac:	70 91 8e 41 	lds	r23, 0x418E	; 0x80418e <xTickCount+0x3>
    51b0:	41 83       	std	Z+1, r20	; 0x01
    51b2:	52 83       	std	Z+2, r21	; 0x02
    51b4:	63 83       	std	Z+3, r22	; 0x03
    51b6:	74 83       	std	Z+4, r23	; 0x04
    51b8:	08 95       	ret

000051ba <xTaskCheckForTimeOut>:
    51ba:	8f 92       	push	r8
    51bc:	9f 92       	push	r9
    51be:	af 92       	push	r10
    51c0:	bf 92       	push	r11
    51c2:	cf 92       	push	r12
    51c4:	df 92       	push	r13
    51c6:	ef 92       	push	r14
    51c8:	ff 92       	push	r15
    51ca:	0f 93       	push	r16
    51cc:	1f 93       	push	r17
    51ce:	cf 93       	push	r28
    51d0:	df 93       	push	r29
    51d2:	fc 01       	movw	r30, r24
    51d4:	0f b6       	in	r0, 0x3f	; 63
    51d6:	f8 94       	cli
    51d8:	0f 92       	push	r0
    51da:	80 91 84 41 	lds	r24, 0x4184	; 0x804184 <xNumOfOverflows>
    51de:	90 81       	ld	r25, Z
    51e0:	98 17       	cp	r25, r24
    51e2:	89 f0       	breq	.+34     	; 0x5206 <xTaskCheckForTimeOut+0x4c>
    51e4:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    51e8:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    51ec:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    51f0:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    51f4:	01 81       	ldd	r16, Z+1	; 0x01
    51f6:	12 81       	ldd	r17, Z+2	; 0x02
    51f8:	23 81       	ldd	r18, Z+3	; 0x03
    51fa:	34 81       	ldd	r19, Z+4	; 0x04
    51fc:	80 17       	cp	r24, r16
    51fe:	91 07       	cpc	r25, r17
    5200:	a2 07       	cpc	r26, r18
    5202:	b3 07       	cpc	r27, r19
    5204:	a8 f5       	brcc	.+106    	; 0x5270 <xTaskCheckForTimeOut+0xb6>
    5206:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <xTickCount>
    520a:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <xTickCount+0x1>
    520e:	a0 91 8d 41 	lds	r26, 0x418D	; 0x80418d <xTickCount+0x2>
    5212:	b0 91 8e 41 	lds	r27, 0x418E	; 0x80418e <xTickCount+0x3>
    5216:	c1 80       	ldd	r12, Z+1	; 0x01
    5218:	d2 80       	ldd	r13, Z+2	; 0x02
    521a:	e3 80       	ldd	r14, Z+3	; 0x03
    521c:	f4 80       	ldd	r15, Z+4	; 0x04
    521e:	eb 01       	movw	r28, r22
    5220:	08 81       	ld	r16, Y
    5222:	19 81       	ldd	r17, Y+1	; 0x01
    5224:	2a 81       	ldd	r18, Y+2	; 0x02
    5226:	3b 81       	ldd	r19, Y+3	; 0x03
    5228:	8c 19       	sub	r24, r12
    522a:	9d 09       	sbc	r25, r13
    522c:	ae 09       	sbc	r26, r14
    522e:	bf 09       	sbc	r27, r15
    5230:	80 17       	cp	r24, r16
    5232:	91 07       	cpc	r25, r17
    5234:	a2 07       	cpc	r26, r18
    5236:	b3 07       	cpc	r27, r19
    5238:	e8 f4       	brcc	.+58     	; 0x5274 <xTaskCheckForTimeOut+0xba>
    523a:	cf 01       	movw	r24, r30
    523c:	80 90 8b 41 	lds	r8, 0x418B	; 0x80418b <xTickCount>
    5240:	90 90 8c 41 	lds	r9, 0x418C	; 0x80418c <xTickCount+0x1>
    5244:	a0 90 8d 41 	lds	r10, 0x418D	; 0x80418d <xTickCount+0x2>
    5248:	b0 90 8e 41 	lds	r11, 0x418E	; 0x80418e <xTickCount+0x3>
    524c:	b5 01       	movw	r22, r10
    524e:	a4 01       	movw	r20, r8
    5250:	4c 19       	sub	r20, r12
    5252:	5d 09       	sbc	r21, r13
    5254:	6e 09       	sbc	r22, r14
    5256:	7f 09       	sbc	r23, r15
    5258:	04 1b       	sub	r16, r20
    525a:	15 0b       	sbc	r17, r21
    525c:	26 0b       	sbc	r18, r22
    525e:	37 0b       	sbc	r19, r23
    5260:	08 83       	st	Y, r16
    5262:	19 83       	std	Y+1, r17	; 0x01
    5264:	2a 83       	std	Y+2, r18	; 0x02
    5266:	3b 83       	std	Y+3, r19	; 0x03
    5268:	0e 94 cc 28 	call	0x5198	; 0x5198 <vTaskSetTimeOutState>
    526c:	80 e0       	ldi	r24, 0x00	; 0
    526e:	03 c0       	rjmp	.+6      	; 0x5276 <xTaskCheckForTimeOut+0xbc>
    5270:	81 e0       	ldi	r24, 0x01	; 1
    5272:	01 c0       	rjmp	.+2      	; 0x5276 <xTaskCheckForTimeOut+0xbc>
    5274:	81 e0       	ldi	r24, 0x01	; 1
    5276:	0f 90       	pop	r0
    5278:	0f be       	out	0x3f, r0	; 63
    527a:	df 91       	pop	r29
    527c:	cf 91       	pop	r28
    527e:	1f 91       	pop	r17
    5280:	0f 91       	pop	r16
    5282:	ff 90       	pop	r15
    5284:	ef 90       	pop	r14
    5286:	df 90       	pop	r13
    5288:	cf 90       	pop	r12
    528a:	bf 90       	pop	r11
    528c:	af 90       	pop	r10
    528e:	9f 90       	pop	r9
    5290:	8f 90       	pop	r8
    5292:	08 95       	ret

00005294 <vTaskMissedYield>:
    5294:	81 e0       	ldi	r24, 0x01	; 1
    5296:	80 93 85 41 	sts	0x4185, r24	; 0x804185 <xMissedYield>
    529a:	08 95       	ret

0000529c <uxTaskGetStackHighWaterMark>:
    529c:	00 97       	sbiw	r24, 0x00	; 0
    529e:	21 f4       	brne	.+8      	; 0x52a8 <uxTaskGetStackHighWaterMark+0xc>
    52a0:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    52a4:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    52a8:	dc 01       	movw	r26, r24
    52aa:	5b 96       	adiw	r26, 0x1b	; 27
    52ac:	ed 91       	ld	r30, X+
    52ae:	fc 91       	ld	r31, X
    52b0:	5c 97       	sbiw	r26, 0x1c	; 28
    52b2:	80 81       	ld	r24, Z
    52b4:	81 31       	cpi	r24, 0x11	; 17
    52b6:	41 f4       	brne	.+16     	; 0x52c8 <uxTaskGetStackHighWaterMark+0x2c>
    52b8:	31 96       	adiw	r30, 0x01	; 1
    52ba:	80 e0       	ldi	r24, 0x00	; 0
    52bc:	90 e0       	ldi	r25, 0x00	; 0
    52be:	01 96       	adiw	r24, 0x01	; 1
    52c0:	21 91       	ld	r18, Z+
    52c2:	21 31       	cpi	r18, 0x11	; 17
    52c4:	e1 f3       	breq	.-8      	; 0x52be <uxTaskGetStackHighWaterMark+0x22>
    52c6:	08 95       	ret
    52c8:	80 e0       	ldi	r24, 0x00	; 0
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	08 95       	ret

000052ce <xTaskGetCurrentTaskHandle>:
    52ce:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    52d2:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    52d6:	08 95       	ret

000052d8 <vTaskPriorityInherit>:
    52d8:	0f 93       	push	r16
    52da:	1f 93       	push	r17
    52dc:	cf 93       	push	r28
    52de:	df 93       	push	r29
    52e0:	fc 01       	movw	r30, r24
    52e2:	22 8d       	ldd	r18, Z+26	; 0x1a
    52e4:	a0 91 e3 41 	lds	r26, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    52e8:	b0 91 e4 41 	lds	r27, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    52ec:	5a 96       	adiw	r26, 0x1a	; 26
    52ee:	8c 91       	ld	r24, X
    52f0:	28 17       	cp	r18, r24
    52f2:	08 f0       	brcs	.+2      	; 0x52f6 <vTaskPriorityInherit+0x1e>
    52f4:	41 c0       	rjmp	.+130    	; 0x5378 <vTaskPriorityInherit+0xa0>
    52f6:	a0 91 e3 41 	lds	r26, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    52fa:	b0 91 e4 41 	lds	r27, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    52fe:	5a 96       	adiw	r26, 0x1a	; 26
    5300:	3c 91       	ld	r19, X
    5302:	84 e0       	ldi	r24, 0x04	; 4
    5304:	90 e0       	ldi	r25, 0x00	; 0
    5306:	a0 e0       	ldi	r26, 0x00	; 0
    5308:	b0 e0       	ldi	r27, 0x00	; 0
    530a:	83 1b       	sub	r24, r19
    530c:	91 09       	sbc	r25, r1
    530e:	a1 09       	sbc	r26, r1
    5310:	b1 09       	sbc	r27, r1
    5312:	86 87       	std	Z+14, r24	; 0x0e
    5314:	97 87       	std	Z+15, r25	; 0x0f
    5316:	a0 8b       	std	Z+16, r26	; 0x10
    5318:	b1 8b       	std	Z+17, r27	; 0x11
    531a:	8b e0       	ldi	r24, 0x0B	; 11
    531c:	28 9f       	mul	r18, r24
    531e:	90 01       	movw	r18, r0
    5320:	11 24       	eor	r1, r1
    5322:	29 54       	subi	r18, 0x49	; 73
    5324:	3e 4b       	sbci	r19, 0xBE	; 190
    5326:	84 85       	ldd	r24, Z+12	; 0x0c
    5328:	95 85       	ldd	r25, Z+13	; 0x0d
    532a:	82 17       	cp	r24, r18
    532c:	93 07       	cpc	r25, r19
    532e:	e9 f4       	brne	.+58     	; 0x536a <vTaskPriorityInherit+0x92>
    5330:	8f 01       	movw	r16, r30
    5332:	ef 01       	movw	r28, r30
    5334:	22 96       	adiw	r28, 0x02	; 2
    5336:	ce 01       	movw	r24, r28
    5338:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <vListRemove>
    533c:	e0 91 e3 41 	lds	r30, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    5340:	f0 91 e4 41 	lds	r31, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    5344:	82 8d       	ldd	r24, Z+26	; 0x1a
    5346:	f8 01       	movw	r30, r16
    5348:	82 8f       	std	Z+26, r24	; 0x1a
    534a:	90 91 89 41 	lds	r25, 0x4189	; 0x804189 <uxTopReadyPriority>
    534e:	98 17       	cp	r25, r24
    5350:	10 f4       	brcc	.+4      	; 0x5356 <vTaskPriorityInherit+0x7e>
    5352:	80 93 89 41 	sts	0x4189, r24	; 0x804189 <uxTopReadyPriority>
    5356:	fb e0       	ldi	r31, 0x0B	; 11
    5358:	8f 9f       	mul	r24, r31
    535a:	c0 01       	movw	r24, r0
    535c:	11 24       	eor	r1, r1
    535e:	be 01       	movw	r22, r28
    5360:	89 54       	subi	r24, 0x49	; 73
    5362:	9e 4b       	sbci	r25, 0xBE	; 190
    5364:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <vListInsertEnd>
    5368:	07 c0       	rjmp	.+14     	; 0x5378 <vTaskPriorityInherit+0xa0>
    536a:	a0 91 e3 41 	lds	r26, 0x41E3	; 0x8041e3 <pxCurrentTCB>
    536e:	b0 91 e4 41 	lds	r27, 0x41E4	; 0x8041e4 <pxCurrentTCB+0x1>
    5372:	5a 96       	adiw	r26, 0x1a	; 26
    5374:	8c 91       	ld	r24, X
    5376:	82 8f       	std	Z+26, r24	; 0x1a
    5378:	df 91       	pop	r29
    537a:	cf 91       	pop	r28
    537c:	1f 91       	pop	r17
    537e:	0f 91       	pop	r16
    5380:	08 95       	ret

00005382 <vTaskPriorityDisinherit>:
    5382:	0f 93       	push	r16
    5384:	1f 93       	push	r17
    5386:	cf 93       	push	r28
    5388:	df 93       	push	r29
    538a:	00 97       	sbiw	r24, 0x00	; 0
    538c:	49 f1       	breq	.+82     	; 0x53e0 <vTaskPriorityDisinherit+0x5e>
    538e:	fc 01       	movw	r30, r24
    5390:	32 8d       	ldd	r19, Z+26	; 0x1a
    5392:	27 a1       	ldd	r18, Z+39	; 0x27
    5394:	32 17       	cp	r19, r18
    5396:	21 f1       	breq	.+72     	; 0x53e0 <vTaskPriorityDisinherit+0x5e>
    5398:	ec 01       	movw	r28, r24
    539a:	8c 01       	movw	r16, r24
    539c:	0e 5f       	subi	r16, 0xFE	; 254
    539e:	1f 4f       	sbci	r17, 0xFF	; 255
    53a0:	c8 01       	movw	r24, r16
    53a2:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <vListRemove>
    53a6:	8f a1       	ldd	r24, Y+39	; 0x27
    53a8:	8a 8f       	std	Y+26, r24	; 0x1a
    53aa:	44 e0       	ldi	r20, 0x04	; 4
    53ac:	50 e0       	ldi	r21, 0x00	; 0
    53ae:	60 e0       	ldi	r22, 0x00	; 0
    53b0:	70 e0       	ldi	r23, 0x00	; 0
    53b2:	48 1b       	sub	r20, r24
    53b4:	51 09       	sbc	r21, r1
    53b6:	61 09       	sbc	r22, r1
    53b8:	71 09       	sbc	r23, r1
    53ba:	4e 87       	std	Y+14, r20	; 0x0e
    53bc:	5f 87       	std	Y+15, r21	; 0x0f
    53be:	68 8b       	std	Y+16, r22	; 0x10
    53c0:	79 8b       	std	Y+17, r23	; 0x11
    53c2:	90 91 89 41 	lds	r25, 0x4189	; 0x804189 <uxTopReadyPriority>
    53c6:	98 17       	cp	r25, r24
    53c8:	10 f4       	brcc	.+4      	; 0x53ce <vTaskPriorityDisinherit+0x4c>
    53ca:	80 93 89 41 	sts	0x4189, r24	; 0x804189 <uxTopReadyPriority>
    53ce:	fb e0       	ldi	r31, 0x0B	; 11
    53d0:	8f 9f       	mul	r24, r31
    53d2:	c0 01       	movw	r24, r0
    53d4:	11 24       	eor	r1, r1
    53d6:	b8 01       	movw	r22, r16
    53d8:	89 54       	subi	r24, 0x49	; 73
    53da:	9e 4b       	sbci	r25, 0xBE	; 190
    53dc:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <vListInsertEnd>
    53e0:	df 91       	pop	r29
    53e2:	cf 91       	pop	r28
    53e4:	1f 91       	pop	r17
    53e6:	0f 91       	pop	r16
    53e8:	08 95       	ret

000053ea <_ZN8frt_task22_call_users_run_methodEPS_>:
    53ea:	ec 01       	movw	r28, r24
    53ec:	e8 81       	ld	r30, Y
    53ee:	f9 81       	ldd	r31, Y+1	; 0x01
    53f0:	01 90       	ld	r0, Z+
    53f2:	f0 81       	ld	r31, Z
    53f4:	e0 2d       	mov	r30, r0
    53f6:	19 95       	eicall
    53f8:	1a 82       	std	Y+2, r1	; 0x02
    53fa:	1b 82       	std	Y+3, r1	; 0x03
    53fc:	6f ef       	ldi	r22, 0xFF	; 255
    53fe:	7f ef       	ldi	r23, 0xFF	; 255
    5400:	cb 01       	movw	r24, r22
    5402:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <vTaskDelay>
    5406:	fa cf       	rjmp	.-12     	; 0x53fc <_ZN8frt_task22_call_users_run_methodEPS_+0x12>

00005408 <_ZN8frt_task13transition_toEh>:
    5408:	fc 01       	movw	r30, r24
    540a:	64 87       	std	Z+12, r22	; 0x0c
    540c:	65 87       	std	Z+13, r22	; 0x0d
    540e:	08 95       	ret

00005410 <_ZN8frt_taskC1EPKchjP8emstream>:
    5410:	4f 92       	push	r4
    5412:	5f 92       	push	r5
    5414:	6f 92       	push	r6
    5416:	7f 92       	push	r7
    5418:	8f 92       	push	r8
    541a:	9f 92       	push	r9
    541c:	af 92       	push	r10
    541e:	bf 92       	push	r11
    5420:	cf 92       	push	r12
    5422:	df 92       	push	r13
    5424:	ef 92       	push	r14
    5426:	ff 92       	push	r15
    5428:	0f 93       	push	r16
    542a:	1f 93       	push	r17
    542c:	cf 93       	push	r28
    542e:	df 93       	push	r29
    5430:	cd b7       	in	r28, 0x3d	; 61
    5432:	de b7       	in	r29, 0x3e	; 62
    5434:	2a 97       	sbiw	r28, 0x0a	; 10
    5436:	cd bf       	out	0x3d, r28	; 61
    5438:	de bf       	out	0x3e, r29	; 62
    543a:	4c 01       	movw	r8, r24
    543c:	29 01       	movw	r4, r18
    543e:	38 01       	movw	r6, r16
    5440:	86 eb       	ldi	r24, 0xB6	; 182
    5442:	90 e2       	ldi	r25, 0x20	; 32
    5444:	f4 01       	movw	r30, r8
    5446:	80 83       	st	Z, r24
    5448:	91 83       	std	Z+1, r25	; 0x01
    544a:	fb 01       	movw	r30, r22
    544c:	80 81       	ld	r24, Z
    544e:	88 23       	and	r24, r24
    5450:	69 f0       	breq	.+26     	; 0x546c <_ZN8frt_taskC1EPKchjP8emstream+0x5c>
    5452:	de 01       	movw	r26, r28
    5454:	11 96       	adiw	r26, 0x01	; 1
    5456:	31 96       	adiw	r30, 0x01	; 1
    5458:	90 e0       	ldi	r25, 0x00	; 0
    545a:	02 c0       	rjmp	.+4      	; 0x5460 <_ZN8frt_taskC1EPKchjP8emstream+0x50>
    545c:	99 30       	cpi	r25, 0x09	; 9
    545e:	39 f0       	breq	.+14     	; 0x546e <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
    5460:	9f 5f       	subi	r25, 0xFF	; 255
    5462:	8d 93       	st	X+, r24
    5464:	81 91       	ld	r24, Z+
    5466:	81 11       	cpse	r24, r1
    5468:	f9 cf       	rjmp	.-14     	; 0x545c <_ZN8frt_taskC1EPKchjP8emstream+0x4c>
    546a:	01 c0       	rjmp	.+2      	; 0x546e <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
    546c:	90 e0       	ldi	r25, 0x00	; 0
    546e:	e1 e0       	ldi	r30, 0x01	; 1
    5470:	f0 e0       	ldi	r31, 0x00	; 0
    5472:	ec 0f       	add	r30, r28
    5474:	fd 1f       	adc	r31, r29
    5476:	e9 0f       	add	r30, r25
    5478:	f1 1d       	adc	r31, r1
    547a:	10 82       	st	Z, r1
    547c:	74 01       	movw	r14, r8
    547e:	f2 e0       	ldi	r31, 0x02	; 2
    5480:	ef 0e       	add	r14, r31
    5482:	f1 1c       	adc	r15, r1
    5484:	a1 2c       	mov	r10, r1
    5486:	b1 2c       	mov	r11, r1
    5488:	c1 2c       	mov	r12, r1
    548a:	d1 2c       	mov	r13, r1
    548c:	04 2f       	mov	r16, r20
    548e:	94 01       	movw	r18, r8
    5490:	a2 01       	movw	r20, r4
    5492:	be 01       	movw	r22, r28
    5494:	6f 5f       	subi	r22, 0xFF	; 255
    5496:	7f 4f       	sbci	r23, 0xFF	; 255
    5498:	8a e6       	ldi	r24, 0x6A	; 106
    549a:	97 e0       	ldi	r25, 0x07	; 7
    549c:	0e 94 89 24 	call	0x4912	; 0x4912 <xTaskGenericCreate>
    54a0:	f4 01       	movw	r30, r8
    54a2:	66 82       	std	Z+6, r6	; 0x06
    54a4:	77 82       	std	Z+7, r7	; 0x07
    54a6:	40 86       	std	Z+8, r4	; 0x08
    54a8:	51 86       	std	Z+9, r5	; 0x09
    54aa:	20 91 e5 41 	lds	r18, 0x41E5	; 0x8041e5 <last_created_task_pointer>
    54ae:	30 91 e6 41 	lds	r19, 0x41E6	; 0x8041e6 <last_created_task_pointer+0x1>
    54b2:	24 83       	std	Z+4, r18	; 0x04
    54b4:	35 83       	std	Z+5, r19	; 0x05
    54b6:	80 92 e5 41 	sts	0x41E5, r8	; 0x8041e5 <last_created_task_pointer>
    54ba:	90 92 e6 41 	sts	0x41E6, r9	; 0x8041e6 <last_created_task_pointer+0x1>
    54be:	14 86       	std	Z+12, r1	; 0x0c
    54c0:	15 86       	std	Z+13, r1	; 0x0d
    54c2:	40 90 0b 42 	lds	r4, 0x420B	; 0x80420b <portStackTopForTask>
    54c6:	50 90 0c 42 	lds	r5, 0x420C	; 0x80420c <portStackTopForTask+0x1>
    54ca:	ff ef       	ldi	r31, 0xFF	; 255
    54cc:	4f 1a       	sub	r4, r31
    54ce:	5f 0a       	sbc	r5, r31
    54d0:	40 92 0b 42 	sts	0x420B, r4	; 0x80420b <portStackTopForTask>
    54d4:	50 92 0c 42 	sts	0x420C, r5	; 0x80420c <portStackTopForTask+0x1>
    54d8:	f4 01       	movw	r30, r8
    54da:	42 86       	std	Z+10, r4	; 0x0a
    54dc:	53 86       	std	Z+11, r5	; 0x0b
    54de:	16 86       	std	Z+14, r1	; 0x0e
    54e0:	17 86       	std	Z+15, r1	; 0x0f
    54e2:	10 8a       	std	Z+16, r1	; 0x10
    54e4:	11 8a       	std	Z+17, r1	; 0x11
    54e6:	61 14       	cp	r6, r1
    54e8:	71 04       	cpc	r7, r1
    54ea:	09 f4       	brne	.+2      	; 0x54ee <_ZN8frt_taskC1EPKchjP8emstream+0xde>
    54ec:	44 c0       	rjmp	.+136    	; 0x5576 <_ZN8frt_taskC1EPKchjP8emstream+0x166>
    54ee:	81 30       	cpi	r24, 0x01	; 1
    54f0:	79 f5       	brne	.+94     	; 0x5550 <_ZN8frt_taskC1EPKchjP8emstream+0x140>
    54f2:	6a e0       	ldi	r22, 0x0A	; 10
    54f4:	c3 01       	movw	r24, r6
    54f6:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    54fa:	7c 01       	movw	r14, r24
    54fc:	6b e5       	ldi	r22, 0x5B	; 91
    54fe:	7e e0       	ldi	r23, 0x0E	; 14
    5500:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    5504:	be 01       	movw	r22, r28
    5506:	6f 5f       	subi	r22, 0xFF	; 255
    5508:	7f 4f       	sbci	r23, 0xFF	; 255
    550a:	c7 01       	movw	r24, r14
    550c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    5510:	6a e0       	ldi	r22, 0x0A	; 10
    5512:	c7 01       	movw	r24, r14
    5514:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    5518:	7c 01       	movw	r14, r24
    551a:	62 e5       	ldi	r22, 0x52	; 82
    551c:	7e e0       	ldi	r23, 0x0E	; 14
    551e:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    5522:	6a e0       	ldi	r22, 0x0A	; 10
    5524:	c7 01       	movw	r24, r14
    5526:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    552a:	7c 01       	movw	r14, r24
    552c:	64 e4       	ldi	r22, 0x44	; 68
    552e:	7e e0       	ldi	r23, 0x0E	; 14
    5530:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    5534:	63 e0       	ldi	r22, 0x03	; 3
    5536:	c7 01       	movw	r24, r14
    5538:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    553c:	b2 01       	movw	r22, r4
    553e:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_ZN8emstreamlsEj>
    5542:	62 e0       	ldi	r22, 0x02	; 2
    5544:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    5548:	66 e0       	ldi	r22, 0x06	; 6
    554a:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    554e:	13 c0       	rjmp	.+38     	; 0x5576 <_ZN8frt_taskC1EPKchjP8emstream+0x166>
    5550:	6a e0       	ldi	r22, 0x0A	; 10
    5552:	c3 01       	movw	r24, r6
    5554:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    5558:	4c 01       	movw	r8, r24
    555a:	6f e2       	ldi	r22, 0x2F	; 47
    555c:	7e e0       	ldi	r23, 0x0E	; 14
    555e:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    5562:	be 01       	movw	r22, r28
    5564:	6f 5f       	subi	r22, 0xFF	; 255
    5566:	7f 4f       	sbci	r23, 0xFF	; 255
    5568:	c4 01       	movw	r24, r8
    556a:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    556e:	66 e0       	ldi	r22, 0x06	; 6
    5570:	c4 01       	movw	r24, r8
    5572:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    5576:	2a 96       	adiw	r28, 0x0a	; 10
    5578:	cd bf       	out	0x3d, r28	; 61
    557a:	de bf       	out	0x3e, r29	; 62
    557c:	df 91       	pop	r29
    557e:	cf 91       	pop	r28
    5580:	1f 91       	pop	r17
    5582:	0f 91       	pop	r16
    5584:	ff 90       	pop	r15
    5586:	ef 90       	pop	r14
    5588:	df 90       	pop	r13
    558a:	cf 90       	pop	r12
    558c:	bf 90       	pop	r11
    558e:	af 90       	pop	r10
    5590:	9f 90       	pop	r9
    5592:	8f 90       	pop	r8
    5594:	7f 90       	pop	r7
    5596:	6f 90       	pop	r6
    5598:	5f 90       	pop	r5
    559a:	4f 90       	pop	r4
    559c:	08 95       	ret

0000559e <_ZN8frt_task12print_statusER8emstream>:
    559e:	8f 92       	push	r8
    55a0:	9f 92       	push	r9
    55a2:	af 92       	push	r10
    55a4:	bf 92       	push	r11
    55a6:	cf 92       	push	r12
    55a8:	df 92       	push	r13
    55aa:	ef 92       	push	r14
    55ac:	ff 92       	push	r15
    55ae:	0f 93       	push	r16
    55b0:	1f 93       	push	r17
    55b2:	cf 93       	push	r28
    55b4:	df 93       	push	r29
    55b6:	ec 01       	movw	r28, r24
    55b8:	8b 01       	movw	r16, r22
    55ba:	8a 81       	ldd	r24, Y+2	; 0x02
    55bc:	9b 81       	ldd	r25, Y+3	; 0x03
    55be:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <pcTaskGetTaskName>
    55c2:	bc 01       	movw	r22, r24
    55c4:	c8 01       	movw	r24, r16
    55c6:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    55ca:	d8 01       	movw	r26, r16
    55cc:	ed 91       	ld	r30, X+
    55ce:	fc 91       	ld	r31, X
    55d0:	02 80       	ldd	r0, Z+2	; 0x02
    55d2:	f3 81       	ldd	r31, Z+3	; 0x03
    55d4:	e0 2d       	mov	r30, r0
    55d6:	69 e0       	ldi	r22, 0x09	; 9
    55d8:	c8 01       	movw	r24, r16
    55da:	19 95       	eicall
    55dc:	8a 81       	ldd	r24, Y+2	; 0x02
    55de:	9b 81       	ldd	r25, Y+3	; 0x03
    55e0:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <pcTaskGetTaskName>
    55e4:	fc 01       	movw	r30, r24
    55e6:	01 90       	ld	r0, Z+
    55e8:	00 20       	and	r0, r0
    55ea:	e9 f7       	brne	.-6      	; 0x55e6 <_ZN8frt_task12print_statusER8emstream+0x48>
    55ec:	31 97       	sbiw	r30, 0x01	; 1
    55ee:	e8 1b       	sub	r30, r24
    55f0:	f9 0b       	sbc	r31, r25
    55f2:	38 97       	sbiw	r30, 0x08	; 8
    55f4:	48 f4       	brcc	.+18     	; 0x5608 <_ZN8frt_task12print_statusER8emstream+0x6a>
    55f6:	d8 01       	movw	r26, r16
    55f8:	ed 91       	ld	r30, X+
    55fa:	fc 91       	ld	r31, X
    55fc:	02 80       	ldd	r0, Z+2	; 0x02
    55fe:	f3 81       	ldd	r31, Z+3	; 0x03
    5600:	e0 2d       	mov	r30, r0
    5602:	69 e0       	ldi	r22, 0x09	; 9
    5604:	c8 01       	movw	r24, r16
    5606:	19 95       	eicall
    5608:	ce 84       	ldd	r12, Y+14	; 0x0e
    560a:	df 84       	ldd	r13, Y+15	; 0x0f
    560c:	e8 88       	ldd	r14, Y+16	; 0x10
    560e:	f9 88       	ldd	r15, Y+17	; 0x11
    5610:	a8 84       	ldd	r10, Y+8	; 0x08
    5612:	b9 84       	ldd	r11, Y+9	; 0x09
    5614:	8a 81       	ldd	r24, Y+2	; 0x02
    5616:	9b 81       	ldd	r25, Y+3	; 0x03
    5618:	0e 94 4e 29 	call	0x529c	; 0x529c <uxTaskGetStackHighWaterMark>
    561c:	98 2e       	mov	r9, r24
    561e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5620:	8a 81       	ldd	r24, Y+2	; 0x02
    5622:	9b 81       	ldd	r25, Y+3	; 0x03
    5624:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <uxTaskPriorityGet>
    5628:	68 2f       	mov	r22, r24
    562a:	c8 01       	movw	r24, r16
    562c:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <_ZN8emstreamlsEh>
    5630:	6a e0       	ldi	r22, 0x0A	; 10
    5632:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    5636:	ec 01       	movw	r28, r24
    5638:	61 ed       	ldi	r22, 0xD1	; 209
    563a:	7e e0       	ldi	r23, 0x0E	; 14
    563c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    5640:	68 2d       	mov	r22, r8
    5642:	ce 01       	movw	r24, r28
    5644:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <_ZN8emstreamlsEh>
    5648:	6a e0       	ldi	r22, 0x0A	; 10
    564a:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    564e:	ec 01       	movw	r28, r24
    5650:	6f ec       	ldi	r22, 0xCF	; 207
    5652:	7e e0       	ldi	r23, 0x0E	; 14
    5654:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    5658:	69 2d       	mov	r22, r9
    565a:	ce 01       	movw	r24, r28
    565c:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <_ZN8emstreamlsEh>
    5660:	6a e0       	ldi	r22, 0x0A	; 10
    5662:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    5666:	ec 01       	movw	r28, r24
    5668:	6d ec       	ldi	r22, 0xCD	; 205
    566a:	7e e0       	ldi	r23, 0x0E	; 14
    566c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    5670:	b5 01       	movw	r22, r10
    5672:	ce 01       	movw	r24, r28
    5674:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_ZN8emstreamlsEj>
    5678:	6a e0       	ldi	r22, 0x0A	; 10
    567a:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    567e:	ec 01       	movw	r28, r24
    5680:	6b ec       	ldi	r22, 0xCB	; 203
    5682:	7e e0       	ldi	r23, 0x0E	; 14
    5684:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    5688:	6a e0       	ldi	r22, 0x0A	; 10
    568a:	ce 01       	movw	r24, r28
    568c:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN8emstreamlsE15ser_manipulator>
    5690:	ec 01       	movw	r28, r24
    5692:	69 ec       	ldi	r22, 0xC9	; 201
    5694:	7e e0       	ldi	r23, 0x0E	; 14
    5696:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    569a:	b7 01       	movw	r22, r14
    569c:	a6 01       	movw	r20, r12
    569e:	ce 01       	movw	r24, r28
    56a0:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <_ZN8emstreamlsEm>
    56a4:	df 91       	pop	r29
    56a6:	cf 91       	pop	r28
    56a8:	1f 91       	pop	r17
    56aa:	0f 91       	pop	r16
    56ac:	ff 90       	pop	r15
    56ae:	ef 90       	pop	r14
    56b0:	df 90       	pop	r13
    56b2:	cf 90       	pop	r12
    56b4:	bf 90       	pop	r11
    56b6:	af 90       	pop	r10
    56b8:	9f 90       	pop	r9
    56ba:	8f 90       	pop	r8
    56bc:	08 95       	ret

000056be <_ZN14frt_text_queue7getcharEv>:
    56be:	0f 93       	push	r16
    56c0:	cf 93       	push	r28
    56c2:	df 93       	push	r29
    56c4:	1f 92       	push	r1
    56c6:	cd b7       	in	r28, 0x3d	; 61
    56c8:	de b7       	in	r29, 0x3e	; 62
    56ca:	00 e0       	ldi	r16, 0x00	; 0
    56cc:	2f ef       	ldi	r18, 0xFF	; 255
    56ce:	3f ef       	ldi	r19, 0xFF	; 255
    56d0:	a9 01       	movw	r20, r18
    56d2:	be 01       	movw	r22, r28
    56d4:	6f 5f       	subi	r22, 0xFF	; 255
    56d6:	7f 4f       	sbci	r23, 0xFF	; 255
    56d8:	fc 01       	movw	r30, r24
    56da:	80 85       	ldd	r24, Z+8	; 0x08
    56dc:	91 85       	ldd	r25, Z+9	; 0x09
    56de:	0e 94 37 23 	call	0x466e	; 0x466e <xQueueGenericReceive>
    56e2:	81 30       	cpi	r24, 0x01	; 1
    56e4:	19 f4       	brne	.+6      	; 0x56ec <_ZN14frt_text_queue7getcharEv+0x2e>
    56e6:	89 81       	ldd	r24, Y+1	; 0x01
    56e8:	90 e0       	ldi	r25, 0x00	; 0
    56ea:	02 c0       	rjmp	.+4      	; 0x56f0 <_ZN14frt_text_queue7getcharEv+0x32>
    56ec:	8f ef       	ldi	r24, 0xFF	; 255
    56ee:	9f ef       	ldi	r25, 0xFF	; 255
    56f0:	0f 90       	pop	r0
    56f2:	df 91       	pop	r29
    56f4:	cf 91       	pop	r28
    56f6:	0f 91       	pop	r16
    56f8:	08 95       	ret

000056fa <_ZN14frt_text_queue14check_for_charEv>:
    56fa:	fc 01       	movw	r30, r24
    56fc:	80 85       	ldd	r24, Z+8	; 0x08
    56fe:	91 85       	ldd	r25, Z+9	; 0x09
    5700:	0e 94 28 24 	call	0x4850	; 0x4850 <uxQueueMessagesWaiting>
    5704:	91 e0       	ldi	r25, 0x01	; 1
    5706:	81 11       	cpse	r24, r1
    5708:	01 c0       	rjmp	.+2      	; 0x570c <_ZN14frt_text_queue14check_for_charEv+0x12>
    570a:	90 e0       	ldi	r25, 0x00	; 0
    570c:	89 2f       	mov	r24, r25
    570e:	08 95       	ret

00005710 <_ZN14frt_text_queue7putcharEc>:
    5710:	0f 93       	push	r16
    5712:	cf 93       	push	r28
    5714:	df 93       	push	r29
    5716:	1f 92       	push	r1
    5718:	cd b7       	in	r28, 0x3d	; 61
    571a:	de b7       	in	r29, 0x3e	; 62
    571c:	69 83       	std	Y+1, r22	; 0x01
    571e:	fc 01       	movw	r30, r24
    5720:	22 85       	ldd	r18, Z+10	; 0x0a
    5722:	33 85       	ldd	r19, Z+11	; 0x0b
    5724:	44 85       	ldd	r20, Z+12	; 0x0c
    5726:	55 85       	ldd	r21, Z+13	; 0x0d
    5728:	00 e0       	ldi	r16, 0x00	; 0
    572a:	be 01       	movw	r22, r28
    572c:	6f 5f       	subi	r22, 0xFF	; 255
    572e:	7f 4f       	sbci	r23, 0xFF	; 255
    5730:	80 85       	ldd	r24, Z+8	; 0x08
    5732:	91 85       	ldd	r25, Z+9	; 0x09
    5734:	0e 94 70 22 	call	0x44e0	; 0x44e0 <xQueueGenericSend>
    5738:	91 e0       	ldi	r25, 0x01	; 1
    573a:	81 11       	cpse	r24, r1
    573c:	01 c0       	rjmp	.+2      	; 0x5740 <_ZN14frt_text_queue7putcharEc+0x30>
    573e:	90 e0       	ldi	r25, 0x00	; 0
    5740:	89 2f       	mov	r24, r25
    5742:	0f 90       	pop	r0
    5744:	df 91       	pop	r29
    5746:	cf 91       	pop	r28
    5748:	0f 91       	pop	r16
    574a:	08 95       	ret

0000574c <_ZN14frt_text_queueC1EjP8emstreamm>:
    574c:	8f 92       	push	r8
    574e:	9f 92       	push	r9
    5750:	bf 92       	push	r11
    5752:	cf 92       	push	r12
    5754:	df 92       	push	r13
    5756:	ef 92       	push	r14
    5758:	ff 92       	push	r15
    575a:	0f 93       	push	r16
    575c:	1f 93       	push	r17
    575e:	cf 93       	push	r28
    5760:	df 93       	push	r29
    5762:	ec 01       	movw	r28, r24
    5764:	b6 2e       	mov	r11, r22
    5766:	4a 01       	movw	r8, r20
    5768:	68 01       	movw	r12, r16
    576a:	79 01       	movw	r14, r18
    576c:	0e 94 88 2c 	call	0x5910	; 0x5910 <_ZN8emstreamC1Ev>
    5770:	8e eb       	ldi	r24, 0xBE	; 190
    5772:	90 e2       	ldi	r25, 0x20	; 32
    5774:	88 83       	st	Y, r24
    5776:	99 83       	std	Y+1, r25	; 0x01
    5778:	8e 86       	std	Y+14, r8	; 0x0e
    577a:	9f 86       	std	Y+15, r9	; 0x0f
    577c:	40 e0       	ldi	r20, 0x00	; 0
    577e:	61 e0       	ldi	r22, 0x01	; 1
    5780:	8b 2d       	mov	r24, r11
    5782:	0e 94 42 22 	call	0x4484	; 0x4484 <xQueueGenericCreate>
    5786:	88 87       	std	Y+8, r24	; 0x08
    5788:	99 87       	std	Y+9, r25	; 0x09
    578a:	ca 86       	std	Y+10, r12	; 0x0a
    578c:	db 86       	std	Y+11, r13	; 0x0b
    578e:	ec 86       	std	Y+12, r14	; 0x0c
    5790:	fd 86       	std	Y+13, r15	; 0x0d
    5792:	df 91       	pop	r29
    5794:	cf 91       	pop	r28
    5796:	1f 91       	pop	r17
    5798:	0f 91       	pop	r16
    579a:	ff 90       	pop	r15
    579c:	ef 90       	pop	r14
    579e:	df 90       	pop	r13
    57a0:	cf 90       	pop	r12
    57a2:	bf 90       	pop	r11
    57a4:	9f 90       	pop	r9
    57a6:	8f 90       	pop	r8
    57a8:	08 95       	ret

000057aa <_Znwj>:
    57aa:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <pvPortMalloc>
    57ae:	08 95       	ret

000057b0 <_Znaj>:
    57b0:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <pvPortMalloc>
    57b4:	08 95       	ret

000057b6 <__cxa_pure_virtual>:
    57b6:	08 95       	ret

000057b8 <_ZN7base232C1EjP12USART_struct>:
    57b8:	cf 93       	push	r28
    57ba:	df 93       	push	r29
    57bc:	fc 01       	movw	r30, r24
    57be:	da 01       	movw	r26, r20
    57c0:	40 3a       	cpi	r20, 0xA0	; 160
    57c2:	68 e0       	ldi	r22, 0x08	; 8
    57c4:	56 07       	cpc	r21, r22
    57c6:	49 f4       	brne	.+18     	; 0x57da <_ZN7base232C1EjP12USART_struct+0x22>
    57c8:	80 e4       	ldi	r24, 0x40	; 64
    57ca:	96 e0       	ldi	r25, 0x06	; 6
    57cc:	82 83       	std	Z+2, r24	; 0x02
    57ce:	93 83       	std	Z+3, r25	; 0x03
    57d0:	82 e0       	ldi	r24, 0x02	; 2
    57d2:	84 83       	std	Z+4, r24	; 0x04
    57d4:	83 e0       	ldi	r24, 0x03	; 3
    57d6:	85 83       	std	Z+5, r24	; 0x05
    57d8:	3f c0       	rjmp	.+126    	; 0x5858 <_ZN7base232C1EjP12USART_struct+0xa0>
    57da:	40 3b       	cpi	r20, 0xB0	; 176
    57dc:	78 e0       	ldi	r23, 0x08	; 8
    57de:	57 07       	cpc	r21, r23
    57e0:	49 f4       	brne	.+18     	; 0x57f4 <_ZN7base232C1EjP12USART_struct+0x3c>
    57e2:	80 e4       	ldi	r24, 0x40	; 64
    57e4:	96 e0       	ldi	r25, 0x06	; 6
    57e6:	82 83       	std	Z+2, r24	; 0x02
    57e8:	93 83       	std	Z+3, r25	; 0x03
    57ea:	86 e0       	ldi	r24, 0x06	; 6
    57ec:	84 83       	std	Z+4, r24	; 0x04
    57ee:	87 e0       	ldi	r24, 0x07	; 7
    57f0:	85 83       	std	Z+5, r24	; 0x05
    57f2:	32 c0       	rjmp	.+100    	; 0x5858 <_ZN7base232C1EjP12USART_struct+0xa0>
    57f4:	40 3a       	cpi	r20, 0xA0	; 160
    57f6:	89 e0       	ldi	r24, 0x09	; 9
    57f8:	58 07       	cpc	r21, r24
    57fa:	49 f4       	brne	.+18     	; 0x580e <_ZN7base232C1EjP12USART_struct+0x56>
    57fc:	80 e6       	ldi	r24, 0x60	; 96
    57fe:	96 e0       	ldi	r25, 0x06	; 6
    5800:	82 83       	std	Z+2, r24	; 0x02
    5802:	93 83       	std	Z+3, r25	; 0x03
    5804:	82 e0       	ldi	r24, 0x02	; 2
    5806:	84 83       	std	Z+4, r24	; 0x04
    5808:	83 e0       	ldi	r24, 0x03	; 3
    580a:	85 83       	std	Z+5, r24	; 0x05
    580c:	25 c0       	rjmp	.+74     	; 0x5858 <_ZN7base232C1EjP12USART_struct+0xa0>
    580e:	40 3b       	cpi	r20, 0xB0	; 176
    5810:	69 e0       	ldi	r22, 0x09	; 9
    5812:	56 07       	cpc	r21, r22
    5814:	49 f4       	brne	.+18     	; 0x5828 <_ZN7base232C1EjP12USART_struct+0x70>
    5816:	80 e6       	ldi	r24, 0x60	; 96
    5818:	96 e0       	ldi	r25, 0x06	; 6
    581a:	82 83       	std	Z+2, r24	; 0x02
    581c:	93 83       	std	Z+3, r25	; 0x03
    581e:	86 e0       	ldi	r24, 0x06	; 6
    5820:	84 83       	std	Z+4, r24	; 0x04
    5822:	87 e0       	ldi	r24, 0x07	; 7
    5824:	85 83       	std	Z+5, r24	; 0x05
    5826:	18 c0       	rjmp	.+48     	; 0x5858 <_ZN7base232C1EjP12USART_struct+0xa0>
    5828:	40 3a       	cpi	r20, 0xA0	; 160
    582a:	7a e0       	ldi	r23, 0x0A	; 10
    582c:	57 07       	cpc	r21, r23
    582e:	49 f4       	brne	.+18     	; 0x5842 <_ZN7base232C1EjP12USART_struct+0x8a>
    5830:	80 e8       	ldi	r24, 0x80	; 128
    5832:	96 e0       	ldi	r25, 0x06	; 6
    5834:	82 83       	std	Z+2, r24	; 0x02
    5836:	93 83       	std	Z+3, r25	; 0x03
    5838:	82 e0       	ldi	r24, 0x02	; 2
    583a:	84 83       	std	Z+4, r24	; 0x04
    583c:	83 e0       	ldi	r24, 0x03	; 3
    583e:	85 83       	std	Z+5, r24	; 0x05
    5840:	0b c0       	rjmp	.+22     	; 0x5858 <_ZN7base232C1EjP12USART_struct+0xa0>
    5842:	40 3a       	cpi	r20, 0xA0	; 160
    5844:	5b 40       	sbci	r21, 0x0B	; 11
    5846:	41 f4       	brne	.+16     	; 0x5858 <_ZN7base232C1EjP12USART_struct+0xa0>
    5848:	80 ea       	ldi	r24, 0xA0	; 160
    584a:	96 e0       	ldi	r25, 0x06	; 6
    584c:	82 83       	std	Z+2, r24	; 0x02
    584e:	93 83       	std	Z+3, r25	; 0x03
    5850:	82 e0       	ldi	r24, 0x02	; 2
    5852:	84 83       	std	Z+4, r24	; 0x04
    5854:	83 e0       	ldi	r24, 0x03	; 3
    5856:	85 83       	std	Z+5, r24	; 0x05
    5858:	a6 83       	std	Z+6, r26	; 0x06
    585a:	b7 83       	std	Z+7, r27	; 0x07
    585c:	cd 01       	movw	r24, r26
    585e:	01 96       	adiw	r24, 0x01	; 1
    5860:	80 87       	std	Z+8, r24	; 0x08
    5862:	91 87       	std	Z+9, r25	; 0x09
    5864:	03 96       	adiw	r24, 0x03	; 3
    5866:	82 87       	std	Z+10, r24	; 0x0a
    5868:	93 87       	std	Z+11, r25	; 0x0b
    586a:	25 81       	ldd	r18, Z+5	; 0x05
    586c:	c2 81       	ldd	r28, Z+2	; 0x02
    586e:	d3 81       	ldd	r29, Z+3	; 0x03
    5870:	4c 81       	ldd	r20, Y+4	; 0x04
    5872:	81 e0       	ldi	r24, 0x01	; 1
    5874:	90 e0       	ldi	r25, 0x00	; 0
    5876:	bc 01       	movw	r22, r24
    5878:	02 c0       	rjmp	.+4      	; 0x587e <_ZN7base232C1EjP12USART_struct+0xc6>
    587a:	66 0f       	add	r22, r22
    587c:	77 1f       	adc	r23, r23
    587e:	2a 95       	dec	r18
    5880:	e2 f7       	brpl	.-8      	; 0x587a <_ZN7base232C1EjP12USART_struct+0xc2>
    5882:	9b 01       	movw	r18, r22
    5884:	24 2b       	or	r18, r20
    5886:	2c 83       	std	Y+4, r18	; 0x04
    5888:	25 81       	ldd	r18, Z+5	; 0x05
    588a:	c2 81       	ldd	r28, Z+2	; 0x02
    588c:	d3 81       	ldd	r29, Z+3	; 0x03
    588e:	48 81       	ld	r20, Y
    5890:	bc 01       	movw	r22, r24
    5892:	02 c0       	rjmp	.+4      	; 0x5898 <_ZN7base232C1EjP12USART_struct+0xe0>
    5894:	66 0f       	add	r22, r22
    5896:	77 1f       	adc	r23, r23
    5898:	2a 95       	dec	r18
    589a:	e2 f7       	brpl	.-8      	; 0x5894 <_ZN7base232C1EjP12USART_struct+0xdc>
    589c:	9b 01       	movw	r18, r22
    589e:	24 2b       	or	r18, r20
    58a0:	28 83       	st	Y, r18
    58a2:	34 81       	ldd	r19, Z+4	; 0x04
    58a4:	c2 81       	ldd	r28, Z+2	; 0x02
    58a6:	d3 81       	ldd	r29, Z+3	; 0x03
    58a8:	28 81       	ld	r18, Y
    58aa:	02 c0       	rjmp	.+4      	; 0x58b0 <_ZN7base232C1EjP12USART_struct+0xf8>
    58ac:	88 0f       	add	r24, r24
    58ae:	99 1f       	adc	r25, r25
    58b0:	3a 95       	dec	r19
    58b2:	e2 f7       	brpl	.-8      	; 0x58ac <_ZN7base232C1EjP12USART_struct+0xf4>
    58b4:	80 95       	com	r24
    58b6:	90 95       	com	r25
    58b8:	82 23       	and	r24, r18
    58ba:	88 83       	st	Y, r24
    58bc:	80 e1       	ldi	r24, 0x10	; 16
    58be:	13 96       	adiw	r26, 0x03	; 3
    58c0:	8c 93       	st	X, r24
    58c2:	13 97       	sbiw	r26, 0x03	; 3
    58c4:	83 e0       	ldi	r24, 0x03	; 3
    58c6:	15 96       	adiw	r26, 0x05	; 5
    58c8:	8c 93       	st	X, r24
    58ca:	15 97       	sbiw	r26, 0x05	; 5
    58cc:	80 ef       	ldi	r24, 0xF0	; 240
    58ce:	17 96       	adiw	r26, 0x07	; 7
    58d0:	8c 93       	st	X, r24
    58d2:	17 97       	sbiw	r26, 0x07	; 7
    58d4:	81 e2       	ldi	r24, 0x21	; 33
    58d6:	16 96       	adiw	r26, 0x06	; 6
    58d8:	8c 93       	st	X, r24
    58da:	16 97       	sbiw	r26, 0x06	; 6
    58dc:	88 e1       	ldi	r24, 0x18	; 24
    58de:	14 96       	adiw	r26, 0x04	; 4
    58e0:	8c 93       	st	X, r24
    58e2:	80 e8       	ldi	r24, 0x80	; 128
    58e4:	85 87       	std	Z+13, r24	; 0x0d
    58e6:	80 e4       	ldi	r24, 0x40	; 64
    58e8:	86 87       	std	Z+14, r24	; 0x0e
    58ea:	80 e2       	ldi	r24, 0x20	; 32
    58ec:	84 87       	std	Z+12, r24	; 0x0c
    58ee:	06 80       	ldd	r0, Z+6	; 0x06
    58f0:	f7 81       	ldd	r31, Z+7	; 0x07
    58f2:	e0 2d       	mov	r30, r0
    58f4:	80 81       	ld	r24, Z
    58f6:	80 81       	ld	r24, Z
    58f8:	df 91       	pop	r29
    58fa:	cf 91       	pop	r28
    58fc:	08 95       	ret

000058fe <_ZN8emstream13ready_to_sendEv>:
    58fe:	81 e0       	ldi	r24, 0x01	; 1
    5900:	08 95       	ret

00005902 <_ZN8emstream7getcharEv>:
    5902:	80 e0       	ldi	r24, 0x00	; 0
    5904:	90 e0       	ldi	r25, 0x00	; 0
    5906:	08 95       	ret

00005908 <_ZN8emstream14check_for_charEv>:
    5908:	80 e0       	ldi	r24, 0x00	; 0
    590a:	08 95       	ret

0000590c <_ZN8emstream12transmit_nowEv>:
    590c:	08 95       	ret

0000590e <_ZN8emstream12clear_screenEv>:
    590e:	08 95       	ret

00005910 <_ZN8emstreamC1Ev>:
    5910:	fc 01       	movw	r30, r24
    5912:	8e ec       	ldi	r24, 0xCE	; 206
    5914:	90 e2       	ldi	r25, 0x20	; 32
    5916:	80 83       	st	Z, r24
    5918:	91 83       	std	Z+1, r25	; 0x01
    591a:	8a e0       	ldi	r24, 0x0A	; 10
    591c:	82 83       	std	Z+2, r24	; 0x02
    591e:	13 82       	std	Z+3, r1	; 0x03
    5920:	83 e0       	ldi	r24, 0x03	; 3
    5922:	85 83       	std	Z+5, r24	; 0x05
    5924:	14 82       	std	Z+4, r1	; 0x04
    5926:	16 82       	std	Z+6, r1	; 0x06
    5928:	17 82       	std	Z+7, r1	; 0x07
    592a:	08 95       	ret

0000592c <_ZN8emstream4putsEPKc>:
    592c:	0f 93       	push	r16
    592e:	1f 93       	push	r17
    5930:	cf 93       	push	r28
    5932:	df 93       	push	r29
    5934:	8c 01       	movw	r16, r24
    5936:	fb 01       	movw	r30, r22
    5938:	dc 01       	movw	r26, r24
    593a:	14 96       	adiw	r26, 0x04	; 4
    593c:	8c 91       	ld	r24, X
    593e:	81 11       	cpse	r24, r1
    5940:	04 c0       	rjmp	.+8      	; 0x594a <_ZN8emstream4putsEPKc+0x1e>
    5942:	60 81       	ld	r22, Z
    5944:	61 11       	cpse	r22, r1
    5946:	17 c0       	rjmp	.+46     	; 0x5976 <_ZN8emstream4putsEPKc+0x4a>
    5948:	23 c0       	rjmp	.+70     	; 0x5990 <_ZN8emstream4putsEPKc+0x64>
    594a:	d8 01       	movw	r26, r16
    594c:	14 96       	adiw	r26, 0x04	; 4
    594e:	1c 92       	st	X, r1
    5950:	eb 01       	movw	r28, r22
    5952:	21 96       	adiw	r28, 0x01	; 1
    5954:	64 91       	lpm	r22, Z
    5956:	66 23       	and	r22, r22
    5958:	d9 f0       	breq	.+54     	; 0x5990 <_ZN8emstream4putsEPKc+0x64>
    595a:	d8 01       	movw	r26, r16
    595c:	ed 91       	ld	r30, X+
    595e:	fc 91       	ld	r31, X
    5960:	02 80       	ldd	r0, Z+2	; 0x02
    5962:	f3 81       	ldd	r31, Z+3	; 0x03
    5964:	e0 2d       	mov	r30, r0
    5966:	c8 01       	movw	r24, r16
    5968:	19 95       	eicall
    596a:	fe 01       	movw	r30, r28
    596c:	64 91       	lpm	r22, Z
    596e:	21 96       	adiw	r28, 0x01	; 1
    5970:	61 11       	cpse	r22, r1
    5972:	f3 cf       	rjmp	.-26     	; 0x595a <_ZN8emstream4putsEPKc+0x2e>
    5974:	0d c0       	rjmp	.+26     	; 0x5990 <_ZN8emstream4putsEPKc+0x64>
    5976:	ef 01       	movw	r28, r30
    5978:	21 96       	adiw	r28, 0x01	; 1
    597a:	d8 01       	movw	r26, r16
    597c:	ed 91       	ld	r30, X+
    597e:	fc 91       	ld	r31, X
    5980:	02 80       	ldd	r0, Z+2	; 0x02
    5982:	f3 81       	ldd	r31, Z+3	; 0x03
    5984:	e0 2d       	mov	r30, r0
    5986:	c8 01       	movw	r24, r16
    5988:	19 95       	eicall
    598a:	69 91       	ld	r22, Y+
    598c:	61 11       	cpse	r22, r1
    598e:	f5 cf       	rjmp	.-22     	; 0x597a <_ZN8emstream4putsEPKc+0x4e>
    5990:	df 91       	pop	r29
    5992:	cf 91       	pop	r28
    5994:	1f 91       	pop	r17
    5996:	0f 91       	pop	r16
    5998:	08 95       	ret

0000599a <_ZN8emstreamlsE15ser_manipulator>:
    599a:	cf 93       	push	r28
    599c:	df 93       	push	r29
    599e:	ec 01       	movw	r28, r24
    59a0:	86 2f       	mov	r24, r22
    59a2:	90 e0       	ldi	r25, 0x00	; 0
    59a4:	8b 30       	cpi	r24, 0x0B	; 11
    59a6:	91 05       	cpc	r25, r1
    59a8:	d8 f5       	brcc	.+118    	; 0x5a20 <_ZN8emstreamlsE15ser_manipulator+0x86>
    59aa:	fc 01       	movw	r30, r24
    59ac:	88 27       	eor	r24, r24
    59ae:	e2 53       	subi	r30, 0x32	; 50
    59b0:	fe 4f       	sbci	r31, 0xFE	; 254
    59b2:	8f 4f       	sbci	r24, 0xFF	; 255
    59b4:	0c 94 ae 34 	jmp	0x695c	; 0x695c <__tablejump2__>
    59b8:	82 e0       	ldi	r24, 0x02	; 2
    59ba:	8a 83       	std	Y+2, r24	; 0x02
    59bc:	31 c0       	rjmp	.+98     	; 0x5a20 <_ZN8emstreamlsE15ser_manipulator+0x86>
    59be:	88 e0       	ldi	r24, 0x08	; 8
    59c0:	8a 83       	std	Y+2, r24	; 0x02
    59c2:	2e c0       	rjmp	.+92     	; 0x5a20 <_ZN8emstreamlsE15ser_manipulator+0x86>
    59c4:	8a e0       	ldi	r24, 0x0A	; 10
    59c6:	8a 83       	std	Y+2, r24	; 0x02
    59c8:	2b c0       	rjmp	.+86     	; 0x5a20 <_ZN8emstreamlsE15ser_manipulator+0x86>
    59ca:	80 e1       	ldi	r24, 0x10	; 16
    59cc:	8a 83       	std	Y+2, r24	; 0x02
    59ce:	28 c0       	rjmp	.+80     	; 0x5a20 <_ZN8emstreamlsE15ser_manipulator+0x86>
    59d0:	81 e0       	ldi	r24, 0x01	; 1
    59d2:	8b 83       	std	Y+3, r24	; 0x03
    59d4:	25 c0       	rjmp	.+74     	; 0x5a20 <_ZN8emstreamlsE15ser_manipulator+0x86>
    59d6:	1b 82       	std	Y+3, r1	; 0x03
    59d8:	23 c0       	rjmp	.+70     	; 0x5a20 <_ZN8emstreamlsE15ser_manipulator+0x86>
    59da:	e8 81       	ld	r30, Y
    59dc:	f9 81       	ldd	r31, Y+1	; 0x01
    59de:	02 80       	ldd	r0, Z+2	; 0x02
    59e0:	f3 81       	ldd	r31, Z+3	; 0x03
    59e2:	e0 2d       	mov	r30, r0
    59e4:	6d e0       	ldi	r22, 0x0D	; 13
    59e6:	ce 01       	movw	r24, r28
    59e8:	19 95       	eicall
    59ea:	e8 81       	ld	r30, Y
    59ec:	f9 81       	ldd	r31, Y+1	; 0x01
    59ee:	02 80       	ldd	r0, Z+2	; 0x02
    59f0:	f3 81       	ldd	r31, Z+3	; 0x03
    59f2:	e0 2d       	mov	r30, r0
    59f4:	6a e0       	ldi	r22, 0x0A	; 10
    59f6:	ce 01       	movw	r24, r28
    59f8:	19 95       	eicall
    59fa:	12 c0       	rjmp	.+36     	; 0x5a20 <_ZN8emstreamlsE15ser_manipulator+0x86>
    59fc:	e8 81       	ld	r30, Y
    59fe:	f9 81       	ldd	r31, Y+1	; 0x01
    5a00:	02 84       	ldd	r0, Z+10	; 0x0a
    5a02:	f3 85       	ldd	r31, Z+11	; 0x0b
    5a04:	e0 2d       	mov	r30, r0
    5a06:	ce 01       	movw	r24, r28
    5a08:	19 95       	eicall
    5a0a:	0a c0       	rjmp	.+20     	; 0x5a20 <_ZN8emstreamlsE15ser_manipulator+0x86>
    5a0c:	e8 81       	ld	r30, Y
    5a0e:	f9 81       	ldd	r31, Y+1	; 0x01
    5a10:	00 84       	ldd	r0, Z+8	; 0x08
    5a12:	f1 85       	ldd	r31, Z+9	; 0x09
    5a14:	e0 2d       	mov	r30, r0
    5a16:	ce 01       	movw	r24, r28
    5a18:	19 95       	eicall
    5a1a:	02 c0       	rjmp	.+4      	; 0x5a20 <_ZN8emstreamlsE15ser_manipulator+0x86>
    5a1c:	81 e0       	ldi	r24, 0x01	; 1
    5a1e:	8c 83       	std	Y+4, r24	; 0x04
    5a20:	ce 01       	movw	r24, r28
    5a22:	df 91       	pop	r29
    5a24:	cf 91       	pop	r28
    5a26:	08 95       	ret

00005a28 <_ZN8emstreamlsEf>:
    5a28:	af 92       	push	r10
    5a2a:	bf 92       	push	r11
    5a2c:	cf 92       	push	r12
    5a2e:	df 92       	push	r13
    5a30:	ef 92       	push	r14
    5a32:	ff 92       	push	r15
    5a34:	0f 93       	push	r16
    5a36:	1f 93       	push	r17
    5a38:	cf 93       	push	r28
    5a3a:	df 93       	push	r29
    5a3c:	cd b7       	in	r28, 0x3d	; 61
    5a3e:	de b7       	in	r29, 0x3e	; 62
    5a40:	64 97       	sbiw	r28, 0x14	; 20
    5a42:	cd bf       	out	0x3d, r28	; 61
    5a44:	de bf       	out	0x3e, r29	; 62
    5a46:	7c 01       	movw	r14, r24
    5a48:	cb 01       	movw	r24, r22
    5a4a:	ba 01       	movw	r22, r20
    5a4c:	d0 90 06 20 	lds	r13, 0x2006	; 0x802006 <bts_glob_prec>
    5a50:	00 e1       	ldi	r16, 0x10	; 16
    5a52:	2d 2d       	mov	r18, r13
    5a54:	ae 01       	movw	r20, r28
    5a56:	4f 5f       	subi	r20, 0xFF	; 255
    5a58:	5f 4f       	sbci	r21, 0xFF	; 255
    5a5a:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <__ftoa_engine>
    5a5e:	5c 01       	movw	r10, r24
    5a60:	89 81       	ldd	r24, Y+1	; 0x01
    5a62:	83 ff       	sbrs	r24, 3
    5a64:	06 c0       	rjmp	.+12     	; 0x5a72 <_ZN8emstreamlsEf+0x4a>
    5a66:	6c ed       	ldi	r22, 0xDC	; 220
    5a68:	70 e2       	ldi	r23, 0x20	; 32
    5a6a:	c7 01       	movw	r24, r14
    5a6c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    5a70:	56 c0       	rjmp	.+172    	; 0x5b1e <_ZN8emstreamlsEf+0xf6>
    5a72:	80 ff       	sbrs	r24, 0
    5a74:	09 c0       	rjmp	.+18     	; 0x5a88 <_ZN8emstreamlsEf+0x60>
    5a76:	d7 01       	movw	r26, r14
    5a78:	ed 91       	ld	r30, X+
    5a7a:	fc 91       	ld	r31, X
    5a7c:	02 80       	ldd	r0, Z+2	; 0x02
    5a7e:	f3 81       	ldd	r31, Z+3	; 0x03
    5a80:	e0 2d       	mov	r30, r0
    5a82:	6d e2       	ldi	r22, 0x2D	; 45
    5a84:	c7 01       	movw	r24, r14
    5a86:	19 95       	eicall
    5a88:	d7 01       	movw	r26, r14
    5a8a:	ed 91       	ld	r30, X+
    5a8c:	fc 91       	ld	r31, X
    5a8e:	02 80       	ldd	r0, Z+2	; 0x02
    5a90:	f3 81       	ldd	r31, Z+3	; 0x03
    5a92:	e0 2d       	mov	r30, r0
    5a94:	6a 81       	ldd	r22, Y+2	; 0x02
    5a96:	c7 01       	movw	r24, r14
    5a98:	19 95       	eicall
    5a9a:	dd 20       	and	r13, r13
    5a9c:	49 f0       	breq	.+18     	; 0x5ab0 <_ZN8emstreamlsEf+0x88>
    5a9e:	d7 01       	movw	r26, r14
    5aa0:	ed 91       	ld	r30, X+
    5aa2:	fc 91       	ld	r31, X
    5aa4:	02 80       	ldd	r0, Z+2	; 0x02
    5aa6:	f3 81       	ldd	r31, Z+3	; 0x03
    5aa8:	e0 2d       	mov	r30, r0
    5aaa:	6e e2       	ldi	r22, 0x2E	; 46
    5aac:	c7 01       	movw	r24, r14
    5aae:	19 95       	eicall
    5ab0:	8e 01       	movw	r16, r28
    5ab2:	0d 5f       	subi	r16, 0xFD	; 253
    5ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ab6:	ce 01       	movw	r24, r28
    5ab8:	8d 0d       	add	r24, r13
    5aba:	91 1d       	adc	r25, r1
    5abc:	fc 01       	movw	r30, r24
    5abe:	33 96       	adiw	r30, 0x03	; 3
    5ac0:	6f 01       	movw	r12, r30
    5ac2:	0c 15       	cp	r16, r12
    5ac4:	1d 05       	cpc	r17, r13
    5ac6:	99 f0       	breq	.+38     	; 0x5aee <_ZN8emstreamlsEf+0xc6>
    5ac8:	d8 01       	movw	r26, r16
    5aca:	6c 91       	ld	r22, X
    5acc:	61 11       	cpse	r22, r1
    5ace:	1c c0       	rjmp	.+56     	; 0x5b08 <_ZN8emstreamlsEf+0xe0>
    5ad0:	0e c0       	rjmp	.+28     	; 0x5aee <_ZN8emstreamlsEf+0xc6>
    5ad2:	d7 01       	movw	r26, r14
    5ad4:	ed 91       	ld	r30, X+
    5ad6:	fc 91       	ld	r31, X
    5ad8:	02 80       	ldd	r0, Z+2	; 0x02
    5ada:	f3 81       	ldd	r31, Z+3	; 0x03
    5adc:	e0 2d       	mov	r30, r0
    5ade:	6b e2       	ldi	r22, 0x2B	; 43
    5ae0:	c7 01       	movw	r24, r14
    5ae2:	19 95       	eicall
    5ae4:	b5 01       	movw	r22, r10
    5ae6:	c7 01       	movw	r24, r14
    5ae8:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <_ZN8emstreamlsEi>
    5aec:	18 c0       	rjmp	.+48     	; 0x5b1e <_ZN8emstreamlsEf+0xf6>
    5aee:	d7 01       	movw	r26, r14
    5af0:	ed 91       	ld	r30, X+
    5af2:	fc 91       	ld	r31, X
    5af4:	02 80       	ldd	r0, Z+2	; 0x02
    5af6:	f3 81       	ldd	r31, Z+3	; 0x03
    5af8:	e0 2d       	mov	r30, r0
    5afa:	65 e4       	ldi	r22, 0x45	; 69
    5afc:	c7 01       	movw	r24, r14
    5afe:	19 95       	eicall
    5b00:	1a 14       	cp	r1, r10
    5b02:	1b 04       	cpc	r1, r11
    5b04:	34 f3       	brlt	.-52     	; 0x5ad2 <_ZN8emstreamlsEf+0xaa>
    5b06:	ee cf       	rjmp	.-36     	; 0x5ae4 <_ZN8emstreamlsEf+0xbc>
    5b08:	0f 5f       	subi	r16, 0xFF	; 255
    5b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    5b0c:	d7 01       	movw	r26, r14
    5b0e:	ed 91       	ld	r30, X+
    5b10:	fc 91       	ld	r31, X
    5b12:	02 80       	ldd	r0, Z+2	; 0x02
    5b14:	f3 81       	ldd	r31, Z+3	; 0x03
    5b16:	e0 2d       	mov	r30, r0
    5b18:	c7 01       	movw	r24, r14
    5b1a:	19 95       	eicall
    5b1c:	d2 cf       	rjmp	.-92     	; 0x5ac2 <_ZN8emstreamlsEf+0x9a>
    5b1e:	c7 01       	movw	r24, r14
    5b20:	64 96       	adiw	r28, 0x14	; 20
    5b22:	cd bf       	out	0x3d, r28	; 61
    5b24:	de bf       	out	0x3e, r29	; 62
    5b26:	df 91       	pop	r29
    5b28:	cf 91       	pop	r28
    5b2a:	1f 91       	pop	r17
    5b2c:	0f 91       	pop	r16
    5b2e:	ff 90       	pop	r15
    5b30:	ef 90       	pop	r14
    5b32:	df 90       	pop	r13
    5b34:	cf 90       	pop	r12
    5b36:	bf 90       	pop	r11
    5b38:	af 90       	pop	r10
    5b3a:	08 95       	ret

00005b3c <_ZN8emstreamlsEd>:
    5b3c:	af 92       	push	r10
    5b3e:	bf 92       	push	r11
    5b40:	cf 92       	push	r12
    5b42:	df 92       	push	r13
    5b44:	ef 92       	push	r14
    5b46:	ff 92       	push	r15
    5b48:	0f 93       	push	r16
    5b4a:	1f 93       	push	r17
    5b4c:	cf 93       	push	r28
    5b4e:	df 93       	push	r29
    5b50:	cd b7       	in	r28, 0x3d	; 61
    5b52:	de b7       	in	r29, 0x3e	; 62
    5b54:	64 97       	sbiw	r28, 0x14	; 20
    5b56:	cd bf       	out	0x3d, r28	; 61
    5b58:	de bf       	out	0x3e, r29	; 62
    5b5a:	7c 01       	movw	r14, r24
    5b5c:	cb 01       	movw	r24, r22
    5b5e:	ba 01       	movw	r22, r20
    5b60:	10 91 06 20 	lds	r17, 0x2006	; 0x802006 <bts_glob_prec>
    5b64:	00 e1       	ldi	r16, 0x10	; 16
    5b66:	21 2f       	mov	r18, r17
    5b68:	ae 01       	movw	r20, r28
    5b6a:	4f 5f       	subi	r20, 0xFF	; 255
    5b6c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b6e:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <__ftoa_engine>
    5b72:	5c 01       	movw	r10, r24
    5b74:	89 81       	ldd	r24, Y+1	; 0x01
    5b76:	83 ff       	sbrs	r24, 3
    5b78:	06 c0       	rjmp	.+12     	; 0x5b86 <_ZN8emstreamlsEd+0x4a>
    5b7a:	6a ed       	ldi	r22, 0xDA	; 218
    5b7c:	70 e2       	ldi	r23, 0x20	; 32
    5b7e:	c7 01       	movw	r24, r14
    5b80:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    5b84:	50 c0       	rjmp	.+160    	; 0x5c26 <_ZN8emstreamlsEd+0xea>
    5b86:	80 ff       	sbrs	r24, 0
    5b88:	09 c0       	rjmp	.+18     	; 0x5b9c <_ZN8emstreamlsEd+0x60>
    5b8a:	d7 01       	movw	r26, r14
    5b8c:	ed 91       	ld	r30, X+
    5b8e:	fc 91       	ld	r31, X
    5b90:	02 80       	ldd	r0, Z+2	; 0x02
    5b92:	f3 81       	ldd	r31, Z+3	; 0x03
    5b94:	e0 2d       	mov	r30, r0
    5b96:	6d e2       	ldi	r22, 0x2D	; 45
    5b98:	c7 01       	movw	r24, r14
    5b9a:	19 95       	eicall
    5b9c:	d7 01       	movw	r26, r14
    5b9e:	ed 91       	ld	r30, X+
    5ba0:	fc 91       	ld	r31, X
    5ba2:	02 80       	ldd	r0, Z+2	; 0x02
    5ba4:	f3 81       	ldd	r31, Z+3	; 0x03
    5ba6:	e0 2d       	mov	r30, r0
    5ba8:	6a 81       	ldd	r22, Y+2	; 0x02
    5baa:	c7 01       	movw	r24, r14
    5bac:	19 95       	eicall
    5bae:	11 23       	and	r17, r17
    5bb0:	49 f0       	breq	.+18     	; 0x5bc4 <_ZN8emstreamlsEd+0x88>
    5bb2:	d7 01       	movw	r26, r14
    5bb4:	ed 91       	ld	r30, X+
    5bb6:	fc 91       	ld	r31, X
    5bb8:	02 80       	ldd	r0, Z+2	; 0x02
    5bba:	f3 81       	ldd	r31, Z+3	; 0x03
    5bbc:	e0 2d       	mov	r30, r0
    5bbe:	6e e2       	ldi	r22, 0x2E	; 46
    5bc0:	c7 01       	movw	r24, r14
    5bc2:	19 95       	eicall
    5bc4:	6e 01       	movw	r12, r28
    5bc6:	b3 e0       	ldi	r27, 0x03	; 3
    5bc8:	cb 0e       	add	r12, r27
    5bca:	d1 1c       	adc	r13, r1
    5bcc:	f6 01       	movw	r30, r12
    5bce:	61 91       	ld	r22, Z+
    5bd0:	6f 01       	movw	r12, r30
    5bd2:	d7 01       	movw	r26, r14
    5bd4:	ed 91       	ld	r30, X+
    5bd6:	fc 91       	ld	r31, X
    5bd8:	02 80       	ldd	r0, Z+2	; 0x02
    5bda:	f3 81       	ldd	r31, Z+3	; 0x03
    5bdc:	e0 2d       	mov	r30, r0
    5bde:	c7 01       	movw	r24, r14
    5be0:	19 95       	eicall
    5be2:	11 50       	subi	r17, 0x01	; 1
    5be4:	99 f0       	breq	.+38     	; 0x5c0c <_ZN8emstreamlsEd+0xd0>
    5be6:	f6 01       	movw	r30, r12
    5be8:	80 81       	ld	r24, Z
    5bea:	81 11       	cpse	r24, r1
    5bec:	ef cf       	rjmp	.-34     	; 0x5bcc <_ZN8emstreamlsEd+0x90>
    5bee:	0e c0       	rjmp	.+28     	; 0x5c0c <_ZN8emstreamlsEd+0xd0>
    5bf0:	d7 01       	movw	r26, r14
    5bf2:	ed 91       	ld	r30, X+
    5bf4:	fc 91       	ld	r31, X
    5bf6:	02 80       	ldd	r0, Z+2	; 0x02
    5bf8:	f3 81       	ldd	r31, Z+3	; 0x03
    5bfa:	e0 2d       	mov	r30, r0
    5bfc:	6b e2       	ldi	r22, 0x2B	; 43
    5bfe:	c7 01       	movw	r24, r14
    5c00:	19 95       	eicall
    5c02:	b5 01       	movw	r22, r10
    5c04:	c7 01       	movw	r24, r14
    5c06:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <_ZN8emstreamlsEi>
    5c0a:	0d c0       	rjmp	.+26     	; 0x5c26 <_ZN8emstreamlsEd+0xea>
    5c0c:	d7 01       	movw	r26, r14
    5c0e:	ed 91       	ld	r30, X+
    5c10:	fc 91       	ld	r31, X
    5c12:	02 80       	ldd	r0, Z+2	; 0x02
    5c14:	f3 81       	ldd	r31, Z+3	; 0x03
    5c16:	e0 2d       	mov	r30, r0
    5c18:	65 e6       	ldi	r22, 0x65	; 101
    5c1a:	c7 01       	movw	r24, r14
    5c1c:	19 95       	eicall
    5c1e:	1a 14       	cp	r1, r10
    5c20:	1b 04       	cpc	r1, r11
    5c22:	34 f3       	brlt	.-52     	; 0x5bf0 <_ZN8emstreamlsEd+0xb4>
    5c24:	ee cf       	rjmp	.-36     	; 0x5c02 <_ZN8emstreamlsEd+0xc6>
    5c26:	c7 01       	movw	r24, r14
    5c28:	64 96       	adiw	r28, 0x14	; 20
    5c2a:	cd bf       	out	0x3d, r28	; 61
    5c2c:	de bf       	out	0x3e, r29	; 62
    5c2e:	df 91       	pop	r29
    5c30:	cf 91       	pop	r28
    5c32:	1f 91       	pop	r17
    5c34:	0f 91       	pop	r16
    5c36:	ff 90       	pop	r15
    5c38:	ef 90       	pop	r14
    5c3a:	df 90       	pop	r13
    5c3c:	cf 90       	pop	r12
    5c3e:	bf 90       	pop	r11
    5c40:	af 90       	pop	r10
    5c42:	08 95       	ret

00005c44 <_ZN8emstreamlsEi>:
    5c44:	0f 93       	push	r16
    5c46:	1f 93       	push	r17
    5c48:	cf 93       	push	r28
    5c4a:	df 93       	push	r29
    5c4c:	cd b7       	in	r28, 0x3d	; 61
    5c4e:	de b7       	in	r29, 0x3e	; 62
    5c50:	61 97       	sbiw	r28, 0x11	; 17
    5c52:	cd bf       	out	0x3d, r28	; 61
    5c54:	de bf       	out	0x3e, r29	; 62
    5c56:	8c 01       	movw	r16, r24
    5c58:	9b 01       	movw	r18, r22
    5c5a:	fc 01       	movw	r30, r24
    5c5c:	92 81       	ldd	r25, Z+2	; 0x02
    5c5e:	9a 30       	cpi	r25, 0x0A	; 10
    5c60:	21 f0       	breq	.+8      	; 0x5c6a <_ZN8emstreamlsEi+0x26>
    5c62:	c8 01       	movw	r24, r16
    5c64:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_ZN8emstreamlsEj>
    5c68:	0d c0       	rjmp	.+26     	; 0x5c84 <_ZN8emstreamlsEi+0x40>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    5c6a:	4a e0       	ldi	r20, 0x0A	; 10
    5c6c:	be 01       	movw	r22, r28
    5c6e:	6f 5f       	subi	r22, 0xFF	; 255
    5c70:	7f 4f       	sbci	r23, 0xFF	; 255
    5c72:	c9 01       	movw	r24, r18
    5c74:	0e 94 c7 35 	call	0x6b8e	; 0x6b8e <__itoa_ncheck>
    5c78:	be 01       	movw	r22, r28
    5c7a:	6f 5f       	subi	r22, 0xFF	; 255
    5c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c7e:	c8 01       	movw	r24, r16
    5c80:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    5c84:	c8 01       	movw	r24, r16
    5c86:	61 96       	adiw	r28, 0x11	; 17
    5c88:	cd bf       	out	0x3d, r28	; 61
    5c8a:	de bf       	out	0x3e, r29	; 62
    5c8c:	df 91       	pop	r29
    5c8e:	cf 91       	pop	r28
    5c90:	1f 91       	pop	r17
    5c92:	0f 91       	pop	r16
    5c94:	08 95       	ret

00005c96 <_ZN8emstreamlsEl>:
    5c96:	0f 93       	push	r16
    5c98:	1f 93       	push	r17
    5c9a:	cf 93       	push	r28
    5c9c:	df 93       	push	r29
    5c9e:	cd b7       	in	r28, 0x3d	; 61
    5ca0:	de b7       	in	r29, 0x3e	; 62
    5ca2:	a2 97       	sbiw	r28, 0x22	; 34
    5ca4:	cd bf       	out	0x3d, r28	; 61
    5ca6:	de bf       	out	0x3e, r29	; 62
    5ca8:	8c 01       	movw	r16, r24
    5caa:	cb 01       	movw	r24, r22
    5cac:	ba 01       	movw	r22, r20
    5cae:	f8 01       	movw	r30, r16
    5cb0:	22 81       	ldd	r18, Z+2	; 0x02
    5cb2:	2a 30       	cpi	r18, 0x0A	; 10
    5cb4:	31 f0       	breq	.+12     	; 0x5cc2 <_ZN8emstreamlsEl+0x2c>
    5cb6:	ab 01       	movw	r20, r22
    5cb8:	bc 01       	movw	r22, r24
    5cba:	c8 01       	movw	r24, r16
    5cbc:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <_ZN8emstreamlsEm>
    5cc0:	0c c0       	rjmp	.+24     	; 0x5cda <_ZN8emstreamlsEl+0x44>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    5cc2:	2a e0       	ldi	r18, 0x0A	; 10
    5cc4:	ae 01       	movw	r20, r28
    5cc6:	4f 5f       	subi	r20, 0xFF	; 255
    5cc8:	5f 4f       	sbci	r21, 0xFF	; 255
    5cca:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <__ltoa_ncheck>
    5cce:	be 01       	movw	r22, r28
    5cd0:	6f 5f       	subi	r22, 0xFF	; 255
    5cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    5cd4:	c8 01       	movw	r24, r16
    5cd6:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    5cda:	c8 01       	movw	r24, r16
    5cdc:	a2 96       	adiw	r28, 0x22	; 34
    5cde:	cd bf       	out	0x3d, r28	; 61
    5ce0:	de bf       	out	0x3e, r29	; 62
    5ce2:	df 91       	pop	r29
    5ce4:	cf 91       	pop	r28
    5ce6:	1f 91       	pop	r17
    5ce8:	0f 91       	pop	r16
    5cea:	08 95       	ret

00005cec <_ZN8emstreamlsEj>:
    5cec:	ff 92       	push	r15
    5cee:	0f 93       	push	r16
    5cf0:	1f 93       	push	r17
    5cf2:	cf 93       	push	r28
    5cf4:	df 93       	push	r29
    5cf6:	cd b7       	in	r28, 0x3d	; 61
    5cf8:	de b7       	in	r29, 0x3e	; 62
    5cfa:	61 97       	sbiw	r28, 0x11	; 17
    5cfc:	cd bf       	out	0x3d, r28	; 61
    5cfe:	de bf       	out	0x3e, r29	; 62
    5d00:	8c 01       	movw	r16, r24
    5d02:	f6 2e       	mov	r15, r22
    5d04:	97 2f       	mov	r25, r23
    5d06:	f8 01       	movw	r30, r16
    5d08:	42 81       	ldd	r20, Z+2	; 0x02
    5d0a:	40 31       	cpi	r20, 0x10	; 16
    5d0c:	21 f0       	breq	.+8      	; 0x5d16 <_ZN8emstreamlsEj+0x2a>
    5d0e:	48 30       	cpi	r20, 0x08	; 8
    5d10:	11 f0       	breq	.+4      	; 0x5d16 <_ZN8emstreamlsEj+0x2a>
    5d12:	42 30       	cpi	r20, 0x02	; 2
    5d14:	41 f4       	brne	.+16     	; 0x5d26 <_ZN8emstreamlsEj+0x3a>
    5d16:	69 2f       	mov	r22, r25
    5d18:	c8 01       	movw	r24, r16
    5d1a:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <_ZN8emstreamlsEh>
    5d1e:	6f 2d       	mov	r22, r15
    5d20:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <_ZN8emstreamlsEh>
    5d24:	0d c0       	rjmp	.+26     	; 0x5d40 <_ZN8emstreamlsEj+0x54>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    5d26:	50 e0       	ldi	r21, 0x00	; 0
    5d28:	be 01       	movw	r22, r28
    5d2a:	6f 5f       	subi	r22, 0xFF	; 255
    5d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    5d2e:	8f 2d       	mov	r24, r15
    5d30:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <utoa>
    5d34:	be 01       	movw	r22, r28
    5d36:	6f 5f       	subi	r22, 0xFF	; 255
    5d38:	7f 4f       	sbci	r23, 0xFF	; 255
    5d3a:	c8 01       	movw	r24, r16
    5d3c:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    5d40:	c8 01       	movw	r24, r16
    5d42:	61 96       	adiw	r28, 0x11	; 17
    5d44:	cd bf       	out	0x3d, r28	; 61
    5d46:	de bf       	out	0x3e, r29	; 62
    5d48:	df 91       	pop	r29
    5d4a:	cf 91       	pop	r28
    5d4c:	1f 91       	pop	r17
    5d4e:	0f 91       	pop	r16
    5d50:	ff 90       	pop	r15
    5d52:	08 95       	ret

00005d54 <_ZN8emstreamlsEm>:
    5d54:	df 92       	push	r13
    5d56:	ef 92       	push	r14
    5d58:	ff 92       	push	r15
    5d5a:	0f 93       	push	r16
    5d5c:	1f 93       	push	r17
    5d5e:	cf 93       	push	r28
    5d60:	df 93       	push	r29
    5d62:	cd b7       	in	r28, 0x3d	; 61
    5d64:	de b7       	in	r29, 0x3e	; 62
    5d66:	a1 97       	sbiw	r28, 0x21	; 33
    5d68:	cd bf       	out	0x3d, r28	; 61
    5d6a:	de bf       	out	0x3e, r29	; 62
    5d6c:	8c 01       	movw	r16, r24
    5d6e:	d4 2e       	mov	r13, r20
    5d70:	e5 2e       	mov	r14, r21
    5d72:	f6 2e       	mov	r15, r22
    5d74:	97 2f       	mov	r25, r23
    5d76:	f8 01       	movw	r30, r16
    5d78:	22 81       	ldd	r18, Z+2	; 0x02
    5d7a:	20 31       	cpi	r18, 0x10	; 16
    5d7c:	21 f0       	breq	.+8      	; 0x5d86 <_ZN8emstreamlsEm+0x32>
    5d7e:	28 30       	cpi	r18, 0x08	; 8
    5d80:	11 f0       	breq	.+4      	; 0x5d86 <_ZN8emstreamlsEm+0x32>
    5d82:	22 30       	cpi	r18, 0x02	; 2
    5d84:	71 f4       	brne	.+28     	; 0x5da2 <_ZN8emstreamlsEm+0x4e>
    5d86:	69 2f       	mov	r22, r25
    5d88:	c8 01       	movw	r24, r16
    5d8a:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <_ZN8emstreamlsEh>
    5d8e:	6f 2d       	mov	r22, r15
    5d90:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <_ZN8emstreamlsEh>
    5d94:	6e 2d       	mov	r22, r14
    5d96:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <_ZN8emstreamlsEh>
    5d9a:	6d 2d       	mov	r22, r13
    5d9c:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <_ZN8emstreamlsEh>
    5da0:	0f c0       	rjmp	.+30     	; 0x5dc0 <_ZN8emstreamlsEm+0x6c>
extern __inline__ __ATTR_GNU_INLINE__
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ultoa (unsigned long, char *, int);
	return __ultoa (__val, __s, __radix);
    5da2:	30 e0       	ldi	r19, 0x00	; 0
    5da4:	ae 01       	movw	r20, r28
    5da6:	4f 5f       	subi	r20, 0xFF	; 255
    5da8:	5f 4f       	sbci	r21, 0xFF	; 255
    5daa:	6d 2d       	mov	r22, r13
    5dac:	7e 2d       	mov	r23, r14
    5dae:	8f 2d       	mov	r24, r15
    5db0:	0e 94 e1 35 	call	0x6bc2	; 0x6bc2 <ultoa>
    5db4:	be 01       	movw	r22, r28
    5db6:	6f 5f       	subi	r22, 0xFF	; 255
    5db8:	7f 4f       	sbci	r23, 0xFF	; 255
    5dba:	c8 01       	movw	r24, r16
    5dbc:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    5dc0:	c8 01       	movw	r24, r16
    5dc2:	a1 96       	adiw	r28, 0x21	; 33
    5dc4:	cd bf       	out	0x3d, r28	; 61
    5dc6:	de bf       	out	0x3e, r29	; 62
    5dc8:	df 91       	pop	r29
    5dca:	cf 91       	pop	r28
    5dcc:	1f 91       	pop	r17
    5dce:	0f 91       	pop	r16
    5dd0:	ff 90       	pop	r15
    5dd2:	ef 90       	pop	r14
    5dd4:	df 90       	pop	r13
    5dd6:	08 95       	ret

00005dd8 <_ZN8emstreamlsEh>:
    5dd8:	cf 92       	push	r12
    5dda:	df 92       	push	r13
    5ddc:	ef 92       	push	r14
    5dde:	ff 92       	push	r15
    5de0:	0f 93       	push	r16
    5de2:	1f 93       	push	r17
    5de4:	cf 93       	push	r28
    5de6:	df 93       	push	r29
    5de8:	cd b7       	in	r28, 0x3d	; 61
    5dea:	de b7       	in	r29, 0x3e	; 62
    5dec:	29 97       	sbiw	r28, 0x09	; 9
    5dee:	cd bf       	out	0x3d, r28	; 61
    5df0:	de bf       	out	0x3e, r29	; 62
    5df2:	8c 01       	movw	r16, r24
    5df4:	e6 2e       	mov	r14, r22
    5df6:	dc 01       	movw	r26, r24
    5df8:	13 96       	adiw	r26, 0x03	; 3
    5dfa:	8c 91       	ld	r24, X
    5dfc:	13 97       	sbiw	r26, 0x03	; 3
    5dfe:	88 23       	and	r24, r24
    5e00:	41 f0       	breq	.+16     	; 0x5e12 <_ZN8emstreamlsEh+0x3a>
    5e02:	ed 91       	ld	r30, X+
    5e04:	fc 91       	ld	r31, X
    5e06:	02 80       	ldd	r0, Z+2	; 0x02
    5e08:	f3 81       	ldd	r31, Z+3	; 0x03
    5e0a:	e0 2d       	mov	r30, r0
    5e0c:	c8 01       	movw	r24, r16
    5e0e:	19 95       	eicall
    5e10:	56 c0       	rjmp	.+172    	; 0x5ebe <_ZN8emstreamlsEh+0xe6>
    5e12:	f8 01       	movw	r30, r16
    5e14:	42 81       	ldd	r20, Z+2	; 0x02
    5e16:	42 30       	cpi	r20, 0x02	; 2
    5e18:	19 f5       	brne	.+70     	; 0x5e60 <_ZN8emstreamlsEh+0x88>
    5e1a:	68 94       	set
    5e1c:	cc 24       	eor	r12, r12
    5e1e:	c3 f8       	bld	r12, 3
    5e20:	d1 2c       	mov	r13, r1
    5e22:	68 94       	set
    5e24:	ff 24       	eor	r15, r15
    5e26:	f7 f8       	bld	r15, 7
    5e28:	8e 2d       	mov	r24, r14
    5e2a:	8f 21       	and	r24, r15
    5e2c:	51 f0       	breq	.+20     	; 0x5e42 <_ZN8emstreamlsEh+0x6a>
    5e2e:	d8 01       	movw	r26, r16
    5e30:	ed 91       	ld	r30, X+
    5e32:	fc 91       	ld	r31, X
    5e34:	02 80       	ldd	r0, Z+2	; 0x02
    5e36:	f3 81       	ldd	r31, Z+3	; 0x03
    5e38:	e0 2d       	mov	r30, r0
    5e3a:	61 e3       	ldi	r22, 0x31	; 49
    5e3c:	c8 01       	movw	r24, r16
    5e3e:	19 95       	eicall
    5e40:	09 c0       	rjmp	.+18     	; 0x5e54 <_ZN8emstreamlsEh+0x7c>
    5e42:	d8 01       	movw	r26, r16
    5e44:	ed 91       	ld	r30, X+
    5e46:	fc 91       	ld	r31, X
    5e48:	02 80       	ldd	r0, Z+2	; 0x02
    5e4a:	f3 81       	ldd	r31, Z+3	; 0x03
    5e4c:	e0 2d       	mov	r30, r0
    5e4e:	60 e3       	ldi	r22, 0x30	; 48
    5e50:	c8 01       	movw	r24, r16
    5e52:	19 95       	eicall
    5e54:	f6 94       	lsr	r15
    5e56:	b1 e0       	ldi	r27, 0x01	; 1
    5e58:	cb 1a       	sub	r12, r27
    5e5a:	d1 08       	sbc	r13, r1
    5e5c:	29 f7       	brne	.-54     	; 0x5e28 <_ZN8emstreamlsEh+0x50>
    5e5e:	2f c0       	rjmp	.+94     	; 0x5ebe <_ZN8emstreamlsEh+0xe6>
    5e60:	40 31       	cpi	r20, 0x10	; 16
    5e62:	f9 f4       	brne	.+62     	; 0x5ea2 <_ZN8emstreamlsEh+0xca>
    5e64:	62 95       	swap	r22
    5e66:	6f 70       	andi	r22, 0x0F	; 15
    5e68:	01 90       	ld	r0, Z+
    5e6a:	f0 81       	ld	r31, Z
    5e6c:	e0 2d       	mov	r30, r0
    5e6e:	02 80       	ldd	r0, Z+2	; 0x02
    5e70:	f3 81       	ldd	r31, Z+3	; 0x03
    5e72:	e0 2d       	mov	r30, r0
    5e74:	6a 30       	cpi	r22, 0x0A	; 10
    5e76:	10 f0       	brcs	.+4      	; 0x5e7c <_ZN8emstreamlsEh+0xa4>
    5e78:	69 5c       	subi	r22, 0xC9	; 201
    5e7a:	01 c0       	rjmp	.+2      	; 0x5e7e <_ZN8emstreamlsEh+0xa6>
    5e7c:	60 5d       	subi	r22, 0xD0	; 208
    5e7e:	c8 01       	movw	r24, r16
    5e80:	19 95       	eicall
    5e82:	6e 2d       	mov	r22, r14
    5e84:	6f 70       	andi	r22, 0x0F	; 15
    5e86:	d8 01       	movw	r26, r16
    5e88:	ed 91       	ld	r30, X+
    5e8a:	fc 91       	ld	r31, X
    5e8c:	02 80       	ldd	r0, Z+2	; 0x02
    5e8e:	f3 81       	ldd	r31, Z+3	; 0x03
    5e90:	e0 2d       	mov	r30, r0
    5e92:	6a 30       	cpi	r22, 0x0A	; 10
    5e94:	10 f0       	brcs	.+4      	; 0x5e9a <_ZN8emstreamlsEh+0xc2>
    5e96:	69 5c       	subi	r22, 0xC9	; 201
    5e98:	01 c0       	rjmp	.+2      	; 0x5e9c <_ZN8emstreamlsEh+0xc4>
    5e9a:	60 5d       	subi	r22, 0xD0	; 208
    5e9c:	c8 01       	movw	r24, r16
    5e9e:	19 95       	eicall
    5ea0:	0e c0       	rjmp	.+28     	; 0x5ebe <_ZN8emstreamlsEh+0xe6>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    5ea2:	50 e0       	ldi	r21, 0x00	; 0
    5ea4:	be 01       	movw	r22, r28
    5ea6:	6f 5f       	subi	r22, 0xFF	; 255
    5ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    5eaa:	8e 2d       	mov	r24, r14
    5eac:	90 e0       	ldi	r25, 0x00	; 0
    5eae:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <utoa>
    5eb2:	be 01       	movw	r22, r28
    5eb4:	6f 5f       	subi	r22, 0xFF	; 255
    5eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    5eb8:	c8 01       	movw	r24, r16
    5eba:	0e 94 96 2c 	call	0x592c	; 0x592c <_ZN8emstream4putsEPKc>
    5ebe:	c8 01       	movw	r24, r16
    5ec0:	29 96       	adiw	r28, 0x09	; 9
    5ec2:	cd bf       	out	0x3d, r28	; 61
    5ec4:	de bf       	out	0x3e, r29	; 62
    5ec6:	df 91       	pop	r29
    5ec8:	cf 91       	pop	r28
    5eca:	1f 91       	pop	r17
    5ecc:	0f 91       	pop	r16
    5ece:	ff 90       	pop	r15
    5ed0:	ef 90       	pop	r14
    5ed2:	df 90       	pop	r13
    5ed4:	cf 90       	pop	r12
    5ed6:	08 95       	ret

00005ed8 <_ZN5rs2327putcharEc>:
    5ed8:	dc 01       	movw	r26, r24
    5eda:	50 96       	adiw	r26, 0x10	; 16
    5edc:	ed 91       	ld	r30, X+
    5ede:	fc 91       	ld	r31, X
    5ee0:	51 97       	sbiw	r26, 0x11	; 17
    5ee2:	80 81       	ld	r24, Z
    5ee4:	54 96       	adiw	r26, 0x14	; 20
    5ee6:	4c 91       	ld	r20, X
    5ee8:	54 97       	sbiw	r26, 0x14	; 20
    5eea:	84 23       	and	r24, r20
    5eec:	29 f0       	breq	.+10     	; 0x5ef8 <_ZN5rs2327putcharEc+0x20>
    5eee:	09 c0       	rjmp	.+18     	; 0x5f02 <_ZN5rs2327putcharEc+0x2a>
    5ef0:	21 50       	subi	r18, 0x01	; 1
    5ef2:	31 09       	sbc	r19, r1
    5ef4:	19 f4       	brne	.+6      	; 0x5efc <_ZN5rs2327putcharEc+0x24>
    5ef6:	12 c0       	rjmp	.+36     	; 0x5f1c <_ZN5rs2327putcharEc+0x44>
    5ef8:	21 e2       	ldi	r18, 0x21	; 33
    5efa:	3e e4       	ldi	r19, 0x4E	; 78
    5efc:	90 81       	ld	r25, Z
    5efe:	94 23       	and	r25, r20
    5f00:	b9 f3       	breq	.-18     	; 0x5ef0 <_ZN5rs2327putcharEc+0x18>
    5f02:	90 81       	ld	r25, Z
    5f04:	56 96       	adiw	r26, 0x16	; 22
    5f06:	8c 91       	ld	r24, X
    5f08:	56 97       	sbiw	r26, 0x16	; 22
    5f0a:	89 2b       	or	r24, r25
    5f0c:	80 83       	st	Z, r24
    5f0e:	1e 96       	adiw	r26, 0x0e	; 14
    5f10:	ed 91       	ld	r30, X+
    5f12:	fc 91       	ld	r31, X
    5f14:	1f 97       	sbiw	r26, 0x0f	; 15
    5f16:	60 83       	st	Z, r22
    5f18:	81 e0       	ldi	r24, 0x01	; 1
    5f1a:	08 95       	ret
    5f1c:	80 e0       	ldi	r24, 0x00	; 0
    5f1e:	08 95       	ret

00005f20 <_ZN5rs2327getcharEv>:
    5f20:	cf 93       	push	r28
    5f22:	df 93       	push	r29
    5f24:	fc 01       	movw	r30, r24
    5f26:	c1 8d       	ldd	r28, Z+25	; 0x19
    5f28:	d2 8d       	ldd	r29, Z+26	; 0x1a
    5f2a:	28 81       	ld	r18, Y
    5f2c:	39 81       	ldd	r19, Y+1	; 0x01
    5f2e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    5f30:	b4 8d       	ldd	r27, Z+28	; 0x1c
    5f32:	4d 91       	ld	r20, X+
    5f34:	5c 91       	ld	r21, X
    5f36:	24 17       	cp	r18, r20
    5f38:	35 07       	cpc	r19, r21
    5f3a:	e9 f3       	breq	.-6      	; 0x5f36 <_ZN5rs2327getcharEv+0x16>
    5f3c:	a7 89       	ldd	r26, Z+23	; 0x17
    5f3e:	b0 8d       	ldd	r27, Z+24	; 0x18
    5f40:	0d 90       	ld	r0, X+
    5f42:	bc 91       	ld	r27, X
    5f44:	a0 2d       	mov	r26, r0
    5f46:	a2 0f       	add	r26, r18
    5f48:	b3 1f       	adc	r27, r19
    5f4a:	8c 91       	ld	r24, X
    5f4c:	2f 5f       	subi	r18, 0xFF	; 255
    5f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    5f50:	28 83       	st	Y, r18
    5f52:	39 83       	std	Y+1, r19	; 0x01
    5f54:	24 36       	cpi	r18, 0x64	; 100
    5f56:	31 05       	cpc	r19, r1
    5f58:	28 f0       	brcs	.+10     	; 0x5f64 <_ZN5rs2327getcharEv+0x44>
    5f5a:	01 8c       	ldd	r0, Z+25	; 0x19
    5f5c:	f2 8d       	ldd	r31, Z+26	; 0x1a
    5f5e:	e0 2d       	mov	r30, r0
    5f60:	10 82       	st	Z, r1
    5f62:	11 82       	std	Z+1, r1	; 0x01
    5f64:	90 e0       	ldi	r25, 0x00	; 0
    5f66:	df 91       	pop	r29
    5f68:	cf 91       	pop	r28
    5f6a:	08 95       	ret

00005f6c <_ZN5rs23214check_for_charEv>:
    5f6c:	cf 93       	push	r28
    5f6e:	df 93       	push	r29
    5f70:	ec 01       	movw	r28, r24
    5f72:	a9 8d       	ldd	r26, Y+25	; 0x19
    5f74:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5f76:	eb 8d       	ldd	r30, Y+27	; 0x1b
    5f78:	fc 8d       	ldd	r31, Y+28	; 0x1c
    5f7a:	81 e0       	ldi	r24, 0x01	; 1
    5f7c:	4d 91       	ld	r20, X+
    5f7e:	5c 91       	ld	r21, X
    5f80:	20 81       	ld	r18, Z
    5f82:	31 81       	ldd	r19, Z+1	; 0x01
    5f84:	42 17       	cp	r20, r18
    5f86:	53 07       	cpc	r21, r19
    5f88:	09 f4       	brne	.+2      	; 0x5f8c <_ZN5rs23214check_for_charEv+0x20>
    5f8a:	80 e0       	ldi	r24, 0x00	; 0
    5f8c:	df 91       	pop	r29
    5f8e:	cf 91       	pop	r28
    5f90:	08 95       	ret

00005f92 <_ZN5rs23212clear_screenEv>:
    5f92:	dc 01       	movw	r26, r24
    5f94:	ed 91       	ld	r30, X+
    5f96:	fc 91       	ld	r31, X
    5f98:	02 80       	ldd	r0, Z+2	; 0x02
    5f9a:	f3 81       	ldd	r31, Z+3	; 0x03
    5f9c:	e0 2d       	mov	r30, r0
    5f9e:	6c e0       	ldi	r22, 0x0C	; 12
    5fa0:	19 95       	eicall
    5fa2:	08 95       	ret

00005fa4 <_ZN5rs232C1EjP12USART_struct>:
    5fa4:	ef 92       	push	r14
    5fa6:	ff 92       	push	r15
    5fa8:	0f 93       	push	r16
    5faa:	1f 93       	push	r17
    5fac:	cf 93       	push	r28
    5fae:	df 93       	push	r29
    5fb0:	ec 01       	movw	r28, r24
    5fb2:	7b 01       	movw	r14, r22
    5fb4:	8a 01       	movw	r16, r20
    5fb6:	0e 94 88 2c 	call	0x5910	; 0x5910 <_ZN8emstreamC1Ev>
    5fba:	a8 01       	movw	r20, r16
    5fbc:	b7 01       	movw	r22, r14
    5fbe:	ce 01       	movw	r24, r28
    5fc0:	08 96       	adiw	r24, 0x08	; 8
    5fc2:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <_ZN7base232C1EjP12USART_struct>
    5fc6:	84 ee       	ldi	r24, 0xE4	; 228
    5fc8:	90 e2       	ldi	r25, 0x20	; 32
    5fca:	88 83       	st	Y, r24
    5fcc:	99 83       	std	Y+1, r25	; 0x01
    5fce:	00 3a       	cpi	r16, 0xA0	; 160
    5fd0:	88 e0       	ldi	r24, 0x08	; 8
    5fd2:	18 07       	cpc	r17, r24
    5fd4:	69 f4       	brne	.+26     	; 0x5ff0 <_ZN5rs232C1EjP12USART_struct+0x4c>
    5fd6:	89 e0       	ldi	r24, 0x09	; 9
    5fd8:	92 e4       	ldi	r25, 0x42	; 66
    5fda:	8f 8b       	std	Y+23, r24	; 0x17
    5fdc:	98 8f       	std	Y+24, r25	; 0x18
    5fde:	8d ef       	ldi	r24, 0xFD	; 253
    5fe0:	91 e4       	ldi	r25, 0x41	; 65
    5fe2:	89 8f       	std	Y+25, r24	; 0x19
    5fe4:	9a 8f       	std	Y+26, r25	; 0x1a
    5fe6:	81 ef       	ldi	r24, 0xF1	; 241
    5fe8:	91 e4       	ldi	r25, 0x41	; 65
    5fea:	8b 8f       	std	Y+27, r24	; 0x1b
    5fec:	9c 8f       	std	Y+28, r25	; 0x1c
    5fee:	53 c0       	rjmp	.+166    	; 0x6096 <__stack+0x97>
    5ff0:	00 3b       	cpi	r16, 0xB0	; 176
    5ff2:	e8 e0       	ldi	r30, 0x08	; 8
    5ff4:	1e 07       	cpc	r17, r30
    5ff6:	69 f4       	brne	.+26     	; 0x6012 <__stack+0x13>
    5ff8:	87 e0       	ldi	r24, 0x07	; 7
    5ffa:	92 e4       	ldi	r25, 0x42	; 66
    5ffc:	8f 8b       	std	Y+23, r24	; 0x17
    5ffe:	98 8f       	std	Y+24, r25	; 0x18
    6000:	8b ef       	ldi	r24, 0xFB	; 251
    6002:	91 e4       	ldi	r25, 0x41	; 65
    6004:	89 8f       	std	Y+25, r24	; 0x19
    6006:	9a 8f       	std	Y+26, r25	; 0x1a
    6008:	8f ee       	ldi	r24, 0xEF	; 239
    600a:	91 e4       	ldi	r25, 0x41	; 65
    600c:	8b 8f       	std	Y+27, r24	; 0x1b
    600e:	9c 8f       	std	Y+28, r25	; 0x1c
    6010:	42 c0       	rjmp	.+132    	; 0x6096 <__stack+0x97>
    6012:	00 3a       	cpi	r16, 0xA0	; 160
    6014:	f9 e0       	ldi	r31, 0x09	; 9
    6016:	1f 07       	cpc	r17, r31
    6018:	69 f4       	brne	.+26     	; 0x6034 <__stack+0x35>
    601a:	85 e0       	ldi	r24, 0x05	; 5
    601c:	92 e4       	ldi	r25, 0x42	; 66
    601e:	8f 8b       	std	Y+23, r24	; 0x17
    6020:	98 8f       	std	Y+24, r25	; 0x18
    6022:	89 ef       	ldi	r24, 0xF9	; 249
    6024:	91 e4       	ldi	r25, 0x41	; 65
    6026:	89 8f       	std	Y+25, r24	; 0x19
    6028:	9a 8f       	std	Y+26, r25	; 0x1a
    602a:	8d ee       	ldi	r24, 0xED	; 237
    602c:	91 e4       	ldi	r25, 0x41	; 65
    602e:	8b 8f       	std	Y+27, r24	; 0x1b
    6030:	9c 8f       	std	Y+28, r25	; 0x1c
    6032:	31 c0       	rjmp	.+98     	; 0x6096 <__stack+0x97>
    6034:	00 3b       	cpi	r16, 0xB0	; 176
    6036:	89 e0       	ldi	r24, 0x09	; 9
    6038:	18 07       	cpc	r17, r24
    603a:	69 f4       	brne	.+26     	; 0x6056 <__stack+0x57>
    603c:	83 e0       	ldi	r24, 0x03	; 3
    603e:	92 e4       	ldi	r25, 0x42	; 66
    6040:	8f 8b       	std	Y+23, r24	; 0x17
    6042:	98 8f       	std	Y+24, r25	; 0x18
    6044:	87 ef       	ldi	r24, 0xF7	; 247
    6046:	91 e4       	ldi	r25, 0x41	; 65
    6048:	89 8f       	std	Y+25, r24	; 0x19
    604a:	9a 8f       	std	Y+26, r25	; 0x1a
    604c:	8b ee       	ldi	r24, 0xEB	; 235
    604e:	91 e4       	ldi	r25, 0x41	; 65
    6050:	8b 8f       	std	Y+27, r24	; 0x1b
    6052:	9c 8f       	std	Y+28, r25	; 0x1c
    6054:	20 c0       	rjmp	.+64     	; 0x6096 <__stack+0x97>
    6056:	00 3a       	cpi	r16, 0xA0	; 160
    6058:	ea e0       	ldi	r30, 0x0A	; 10
    605a:	1e 07       	cpc	r17, r30
    605c:	69 f4       	brne	.+26     	; 0x6078 <__stack+0x79>
    605e:	81 e0       	ldi	r24, 0x01	; 1
    6060:	92 e4       	ldi	r25, 0x42	; 66
    6062:	8f 8b       	std	Y+23, r24	; 0x17
    6064:	98 8f       	std	Y+24, r25	; 0x18
    6066:	85 ef       	ldi	r24, 0xF5	; 245
    6068:	91 e4       	ldi	r25, 0x41	; 65
    606a:	89 8f       	std	Y+25, r24	; 0x19
    606c:	9a 8f       	std	Y+26, r25	; 0x1a
    606e:	89 ee       	ldi	r24, 0xE9	; 233
    6070:	91 e4       	ldi	r25, 0x41	; 65
    6072:	8b 8f       	std	Y+27, r24	; 0x1b
    6074:	9c 8f       	std	Y+28, r25	; 0x1c
    6076:	0f c0       	rjmp	.+30     	; 0x6096 <__stack+0x97>
    6078:	00 3a       	cpi	r16, 0xA0	; 160
    607a:	1b 40       	sbci	r17, 0x0B	; 11
    607c:	61 f4       	brne	.+24     	; 0x6096 <__stack+0x97>
    607e:	8f ef       	ldi	r24, 0xFF	; 255
    6080:	91 e4       	ldi	r25, 0x41	; 65
    6082:	8f 8b       	std	Y+23, r24	; 0x17
    6084:	98 8f       	std	Y+24, r25	; 0x18
    6086:	83 ef       	ldi	r24, 0xF3	; 243
    6088:	91 e4       	ldi	r25, 0x41	; 65
    608a:	89 8f       	std	Y+25, r24	; 0x19
    608c:	9a 8f       	std	Y+26, r25	; 0x1a
    608e:	87 ee       	ldi	r24, 0xE7	; 231
    6090:	91 e4       	ldi	r25, 0x41	; 65
    6092:	8b 8f       	std	Y+27, r24	; 0x1b
    6094:	9c 8f       	std	Y+28, r25	; 0x1c
    6096:	0f 89       	ldd	r16, Y+23	; 0x17
    6098:	18 8d       	ldd	r17, Y+24	; 0x18
    609a:	84 e6       	ldi	r24, 0x64	; 100
    609c:	90 e0       	ldi	r25, 0x00	; 0
    609e:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <_Znaj>
    60a2:	f8 01       	movw	r30, r16
    60a4:	80 83       	st	Z, r24
    60a6:	91 83       	std	Z+1, r25	; 0x01
    60a8:	e9 8d       	ldd	r30, Y+25	; 0x19
    60aa:	fa 8d       	ldd	r31, Y+26	; 0x1a
    60ac:	10 82       	st	Z, r1
    60ae:	11 82       	std	Z+1, r1	; 0x01
    60b0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    60b2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    60b4:	10 82       	st	Z, r1
    60b6:	11 82       	std	Z+1, r1	; 0x01
    60b8:	df 91       	pop	r29
    60ba:	cf 91       	pop	r28
    60bc:	1f 91       	pop	r17
    60be:	0f 91       	pop	r16
    60c0:	ff 90       	pop	r15
    60c2:	ef 90       	pop	r14
    60c4:	08 95       	ret

000060c6 <__vector_25>:
    60c6:	1f 92       	push	r1
    60c8:	0f 92       	push	r0
    60ca:	0f b6       	in	r0, 0x3f	; 63
    60cc:	0f 92       	push	r0
    60ce:	11 24       	eor	r1, r1
    60d0:	0b b6       	in	r0, 0x3b	; 59
    60d2:	0f 92       	push	r0
    60d4:	2f 93       	push	r18
    60d6:	3f 93       	push	r19
    60d8:	8f 93       	push	r24
    60da:	9f 93       	push	r25
    60dc:	ef 93       	push	r30
    60de:	ff 93       	push	r31
    60e0:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    60e4:	e0 91 09 42 	lds	r30, 0x4209	; 0x804209 <rcvC0_buffer>
    60e8:	f0 91 0a 42 	lds	r31, 0x420A	; 0x80420a <rcvC0_buffer+0x1>
    60ec:	80 91 f1 41 	lds	r24, 0x41F1	; 0x8041f1 <rcvC0_write_index>
    60f0:	90 91 f2 41 	lds	r25, 0x41F2	; 0x8041f2 <rcvC0_write_index+0x1>
    60f4:	e8 0f       	add	r30, r24
    60f6:	f9 1f       	adc	r31, r25
    60f8:	20 83       	st	Z, r18
    60fa:	80 91 f1 41 	lds	r24, 0x41F1	; 0x8041f1 <rcvC0_write_index>
    60fe:	90 91 f2 41 	lds	r25, 0x41F2	; 0x8041f2 <rcvC0_write_index+0x1>
    6102:	01 96       	adiw	r24, 0x01	; 1
    6104:	84 36       	cpi	r24, 0x64	; 100
    6106:	91 05       	cpc	r25, r1
    6108:	60 f4       	brcc	.+24     	; 0x6122 <__vector_25+0x5c>
    610a:	80 93 f1 41 	sts	0x41F1, r24	; 0x8041f1 <rcvC0_write_index>
    610e:	90 93 f2 41 	sts	0x41F2, r25	; 0x8041f2 <rcvC0_write_index+0x1>
    6112:	20 91 fd 41 	lds	r18, 0x41FD	; 0x8041fd <rcvC0_read_index>
    6116:	30 91 fe 41 	lds	r19, 0x41FE	; 0x8041fe <rcvC0_read_index+0x1>
    611a:	82 17       	cp	r24, r18
    611c:	93 07       	cpc	r25, r19
    611e:	f1 f4       	brne	.+60     	; 0x615c <__vector_25+0x96>
    6120:	0c c0       	rjmp	.+24     	; 0x613a <__vector_25+0x74>
    6122:	10 92 f1 41 	sts	0x41F1, r1	; 0x8041f1 <rcvC0_write_index>
    6126:	10 92 f2 41 	sts	0x41F2, r1	; 0x8041f2 <rcvC0_write_index+0x1>
    612a:	80 91 fd 41 	lds	r24, 0x41FD	; 0x8041fd <rcvC0_read_index>
    612e:	90 91 fe 41 	lds	r25, 0x41FE	; 0x8041fe <rcvC0_read_index+0x1>
    6132:	18 16       	cp	r1, r24
    6134:	19 06       	cpc	r1, r25
    6136:	91 f4       	brne	.+36     	; 0x615c <__vector_25+0x96>
    6138:	0e c0       	rjmp	.+28     	; 0x6156 <__vector_25+0x90>
    613a:	01 96       	adiw	r24, 0x01	; 1
    613c:	84 36       	cpi	r24, 0x64	; 100
    613e:	91 05       	cpc	r25, r1
    6140:	28 f4       	brcc	.+10     	; 0x614c <__vector_25+0x86>
    6142:	80 93 fd 41 	sts	0x41FD, r24	; 0x8041fd <rcvC0_read_index>
    6146:	90 93 fe 41 	sts	0x41FE, r25	; 0x8041fe <rcvC0_read_index+0x1>
    614a:	08 c0       	rjmp	.+16     	; 0x615c <__vector_25+0x96>
    614c:	10 92 fd 41 	sts	0x41FD, r1	; 0x8041fd <rcvC0_read_index>
    6150:	10 92 fe 41 	sts	0x41FE, r1	; 0x8041fe <rcvC0_read_index+0x1>
    6154:	03 c0       	rjmp	.+6      	; 0x615c <__vector_25+0x96>
    6156:	81 e0       	ldi	r24, 0x01	; 1
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	f3 cf       	rjmp	.-26     	; 0x6142 <__vector_25+0x7c>
    615c:	ff 91       	pop	r31
    615e:	ef 91       	pop	r30
    6160:	9f 91       	pop	r25
    6162:	8f 91       	pop	r24
    6164:	3f 91       	pop	r19
    6166:	2f 91       	pop	r18
    6168:	0f 90       	pop	r0
    616a:	0b be       	out	0x3b, r0	; 59
    616c:	0f 90       	pop	r0
    616e:	0f be       	out	0x3f, r0	; 63
    6170:	0f 90       	pop	r0
    6172:	1f 90       	pop	r1
    6174:	18 95       	reti

00006176 <__vector_28>:
    6176:	1f 92       	push	r1
    6178:	0f 92       	push	r0
    617a:	0f b6       	in	r0, 0x3f	; 63
    617c:	0f 92       	push	r0
    617e:	11 24       	eor	r1, r1
    6180:	0b b6       	in	r0, 0x3b	; 59
    6182:	0f 92       	push	r0
    6184:	2f 93       	push	r18
    6186:	3f 93       	push	r19
    6188:	8f 93       	push	r24
    618a:	9f 93       	push	r25
    618c:	ef 93       	push	r30
    618e:	ff 93       	push	r31
    6190:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    6194:	e0 91 07 42 	lds	r30, 0x4207	; 0x804207 <rcvC1_buffer>
    6198:	f0 91 08 42 	lds	r31, 0x4208	; 0x804208 <rcvC1_buffer+0x1>
    619c:	80 91 ef 41 	lds	r24, 0x41EF	; 0x8041ef <rcvC1_write_index>
    61a0:	90 91 f0 41 	lds	r25, 0x41F0	; 0x8041f0 <rcvC1_write_index+0x1>
    61a4:	e8 0f       	add	r30, r24
    61a6:	f9 1f       	adc	r31, r25
    61a8:	20 83       	st	Z, r18
    61aa:	80 91 ef 41 	lds	r24, 0x41EF	; 0x8041ef <rcvC1_write_index>
    61ae:	90 91 f0 41 	lds	r25, 0x41F0	; 0x8041f0 <rcvC1_write_index+0x1>
    61b2:	01 96       	adiw	r24, 0x01	; 1
    61b4:	84 36       	cpi	r24, 0x64	; 100
    61b6:	91 05       	cpc	r25, r1
    61b8:	60 f4       	brcc	.+24     	; 0x61d2 <__vector_28+0x5c>
    61ba:	80 93 ef 41 	sts	0x41EF, r24	; 0x8041ef <rcvC1_write_index>
    61be:	90 93 f0 41 	sts	0x41F0, r25	; 0x8041f0 <rcvC1_write_index+0x1>
    61c2:	20 91 fb 41 	lds	r18, 0x41FB	; 0x8041fb <rcvC1_read_index>
    61c6:	30 91 fc 41 	lds	r19, 0x41FC	; 0x8041fc <rcvC1_read_index+0x1>
    61ca:	82 17       	cp	r24, r18
    61cc:	93 07       	cpc	r25, r19
    61ce:	f1 f4       	brne	.+60     	; 0x620c <__vector_28+0x96>
    61d0:	0c c0       	rjmp	.+24     	; 0x61ea <__vector_28+0x74>
    61d2:	10 92 ef 41 	sts	0x41EF, r1	; 0x8041ef <rcvC1_write_index>
    61d6:	10 92 f0 41 	sts	0x41F0, r1	; 0x8041f0 <rcvC1_write_index+0x1>
    61da:	80 91 fb 41 	lds	r24, 0x41FB	; 0x8041fb <rcvC1_read_index>
    61de:	90 91 fc 41 	lds	r25, 0x41FC	; 0x8041fc <rcvC1_read_index+0x1>
    61e2:	18 16       	cp	r1, r24
    61e4:	19 06       	cpc	r1, r25
    61e6:	91 f4       	brne	.+36     	; 0x620c <__vector_28+0x96>
    61e8:	0e c0       	rjmp	.+28     	; 0x6206 <__vector_28+0x90>
    61ea:	01 96       	adiw	r24, 0x01	; 1
    61ec:	84 36       	cpi	r24, 0x64	; 100
    61ee:	91 05       	cpc	r25, r1
    61f0:	28 f4       	brcc	.+10     	; 0x61fc <__vector_28+0x86>
    61f2:	80 93 fb 41 	sts	0x41FB, r24	; 0x8041fb <rcvC1_read_index>
    61f6:	90 93 fc 41 	sts	0x41FC, r25	; 0x8041fc <rcvC1_read_index+0x1>
    61fa:	08 c0       	rjmp	.+16     	; 0x620c <__vector_28+0x96>
    61fc:	10 92 fb 41 	sts	0x41FB, r1	; 0x8041fb <rcvC1_read_index>
    6200:	10 92 fc 41 	sts	0x41FC, r1	; 0x8041fc <rcvC1_read_index+0x1>
    6204:	03 c0       	rjmp	.+6      	; 0x620c <__vector_28+0x96>
    6206:	81 e0       	ldi	r24, 0x01	; 1
    6208:	90 e0       	ldi	r25, 0x00	; 0
    620a:	f3 cf       	rjmp	.-26     	; 0x61f2 <__vector_28+0x7c>
    620c:	ff 91       	pop	r31
    620e:	ef 91       	pop	r30
    6210:	9f 91       	pop	r25
    6212:	8f 91       	pop	r24
    6214:	3f 91       	pop	r19
    6216:	2f 91       	pop	r18
    6218:	0f 90       	pop	r0
    621a:	0b be       	out	0x3b, r0	; 59
    621c:	0f 90       	pop	r0
    621e:	0f be       	out	0x3f, r0	; 63
    6220:	0f 90       	pop	r0
    6222:	1f 90       	pop	r1
    6224:	18 95       	reti

00006226 <__vector_88>:
    6226:	1f 92       	push	r1
    6228:	0f 92       	push	r0
    622a:	0f b6       	in	r0, 0x3f	; 63
    622c:	0f 92       	push	r0
    622e:	11 24       	eor	r1, r1
    6230:	0b b6       	in	r0, 0x3b	; 59
    6232:	0f 92       	push	r0
    6234:	2f 93       	push	r18
    6236:	3f 93       	push	r19
    6238:	8f 93       	push	r24
    623a:	9f 93       	push	r25
    623c:	ef 93       	push	r30
    623e:	ff 93       	push	r31
    6240:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    6244:	e0 91 05 42 	lds	r30, 0x4205	; 0x804205 <rcvD0_buffer>
    6248:	f0 91 06 42 	lds	r31, 0x4206	; 0x804206 <rcvD0_buffer+0x1>
    624c:	80 91 f1 41 	lds	r24, 0x41F1	; 0x8041f1 <rcvC0_write_index>
    6250:	90 91 f2 41 	lds	r25, 0x41F2	; 0x8041f2 <rcvC0_write_index+0x1>
    6254:	e8 0f       	add	r30, r24
    6256:	f9 1f       	adc	r31, r25
    6258:	20 83       	st	Z, r18
    625a:	80 91 ed 41 	lds	r24, 0x41ED	; 0x8041ed <rcvD0_write_index>
    625e:	90 91 ee 41 	lds	r25, 0x41EE	; 0x8041ee <rcvD0_write_index+0x1>
    6262:	01 96       	adiw	r24, 0x01	; 1
    6264:	84 36       	cpi	r24, 0x64	; 100
    6266:	91 05       	cpc	r25, r1
    6268:	60 f4       	brcc	.+24     	; 0x6282 <__vector_88+0x5c>
    626a:	80 93 ed 41 	sts	0x41ED, r24	; 0x8041ed <rcvD0_write_index>
    626e:	90 93 ee 41 	sts	0x41EE, r25	; 0x8041ee <rcvD0_write_index+0x1>
    6272:	20 91 f9 41 	lds	r18, 0x41F9	; 0x8041f9 <rcvD0_read_index>
    6276:	30 91 fa 41 	lds	r19, 0x41FA	; 0x8041fa <rcvD0_read_index+0x1>
    627a:	82 17       	cp	r24, r18
    627c:	93 07       	cpc	r25, r19
    627e:	f1 f4       	brne	.+60     	; 0x62bc <__vector_88+0x96>
    6280:	0c c0       	rjmp	.+24     	; 0x629a <__vector_88+0x74>
    6282:	10 92 ed 41 	sts	0x41ED, r1	; 0x8041ed <rcvD0_write_index>
    6286:	10 92 ee 41 	sts	0x41EE, r1	; 0x8041ee <rcvD0_write_index+0x1>
    628a:	80 91 f9 41 	lds	r24, 0x41F9	; 0x8041f9 <rcvD0_read_index>
    628e:	90 91 fa 41 	lds	r25, 0x41FA	; 0x8041fa <rcvD0_read_index+0x1>
    6292:	18 16       	cp	r1, r24
    6294:	19 06       	cpc	r1, r25
    6296:	91 f4       	brne	.+36     	; 0x62bc <__vector_88+0x96>
    6298:	0e c0       	rjmp	.+28     	; 0x62b6 <__vector_88+0x90>
    629a:	01 96       	adiw	r24, 0x01	; 1
    629c:	84 36       	cpi	r24, 0x64	; 100
    629e:	91 05       	cpc	r25, r1
    62a0:	28 f4       	brcc	.+10     	; 0x62ac <__vector_88+0x86>
    62a2:	80 93 f9 41 	sts	0x41F9, r24	; 0x8041f9 <rcvD0_read_index>
    62a6:	90 93 fa 41 	sts	0x41FA, r25	; 0x8041fa <rcvD0_read_index+0x1>
    62aa:	08 c0       	rjmp	.+16     	; 0x62bc <__vector_88+0x96>
    62ac:	10 92 f9 41 	sts	0x41F9, r1	; 0x8041f9 <rcvD0_read_index>
    62b0:	10 92 fa 41 	sts	0x41FA, r1	; 0x8041fa <rcvD0_read_index+0x1>
    62b4:	03 c0       	rjmp	.+6      	; 0x62bc <__vector_88+0x96>
    62b6:	81 e0       	ldi	r24, 0x01	; 1
    62b8:	90 e0       	ldi	r25, 0x00	; 0
    62ba:	f3 cf       	rjmp	.-26     	; 0x62a2 <__vector_88+0x7c>
    62bc:	ff 91       	pop	r31
    62be:	ef 91       	pop	r30
    62c0:	9f 91       	pop	r25
    62c2:	8f 91       	pop	r24
    62c4:	3f 91       	pop	r19
    62c6:	2f 91       	pop	r18
    62c8:	0f 90       	pop	r0
    62ca:	0b be       	out	0x3b, r0	; 59
    62cc:	0f 90       	pop	r0
    62ce:	0f be       	out	0x3f, r0	; 63
    62d0:	0f 90       	pop	r0
    62d2:	1f 90       	pop	r1
    62d4:	18 95       	reti

000062d6 <__vector_91>:
    62d6:	1f 92       	push	r1
    62d8:	0f 92       	push	r0
    62da:	0f b6       	in	r0, 0x3f	; 63
    62dc:	0f 92       	push	r0
    62de:	11 24       	eor	r1, r1
    62e0:	0b b6       	in	r0, 0x3b	; 59
    62e2:	0f 92       	push	r0
    62e4:	2f 93       	push	r18
    62e6:	3f 93       	push	r19
    62e8:	8f 93       	push	r24
    62ea:	9f 93       	push	r25
    62ec:	ef 93       	push	r30
    62ee:	ff 93       	push	r31
    62f0:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    62f4:	e0 91 03 42 	lds	r30, 0x4203	; 0x804203 <rcvD1_buffer>
    62f8:	f0 91 04 42 	lds	r31, 0x4204	; 0x804204 <rcvD1_buffer+0x1>
    62fc:	80 91 eb 41 	lds	r24, 0x41EB	; 0x8041eb <rcvD1_write_index>
    6300:	90 91 ec 41 	lds	r25, 0x41EC	; 0x8041ec <rcvD1_write_index+0x1>
    6304:	e8 0f       	add	r30, r24
    6306:	f9 1f       	adc	r31, r25
    6308:	20 83       	st	Z, r18
    630a:	80 91 eb 41 	lds	r24, 0x41EB	; 0x8041eb <rcvD1_write_index>
    630e:	90 91 ec 41 	lds	r25, 0x41EC	; 0x8041ec <rcvD1_write_index+0x1>
    6312:	01 96       	adiw	r24, 0x01	; 1
    6314:	84 36       	cpi	r24, 0x64	; 100
    6316:	91 05       	cpc	r25, r1
    6318:	60 f4       	brcc	.+24     	; 0x6332 <__vector_91+0x5c>
    631a:	80 93 eb 41 	sts	0x41EB, r24	; 0x8041eb <rcvD1_write_index>
    631e:	90 93 ec 41 	sts	0x41EC, r25	; 0x8041ec <rcvD1_write_index+0x1>
    6322:	20 91 f7 41 	lds	r18, 0x41F7	; 0x8041f7 <rcvD1_read_index>
    6326:	30 91 f8 41 	lds	r19, 0x41F8	; 0x8041f8 <rcvD1_read_index+0x1>
    632a:	82 17       	cp	r24, r18
    632c:	93 07       	cpc	r25, r19
    632e:	f1 f4       	brne	.+60     	; 0x636c <__vector_91+0x96>
    6330:	0c c0       	rjmp	.+24     	; 0x634a <__vector_91+0x74>
    6332:	10 92 eb 41 	sts	0x41EB, r1	; 0x8041eb <rcvD1_write_index>
    6336:	10 92 ec 41 	sts	0x41EC, r1	; 0x8041ec <rcvD1_write_index+0x1>
    633a:	80 91 f7 41 	lds	r24, 0x41F7	; 0x8041f7 <rcvD1_read_index>
    633e:	90 91 f8 41 	lds	r25, 0x41F8	; 0x8041f8 <rcvD1_read_index+0x1>
    6342:	18 16       	cp	r1, r24
    6344:	19 06       	cpc	r1, r25
    6346:	91 f4       	brne	.+36     	; 0x636c <__vector_91+0x96>
    6348:	0e c0       	rjmp	.+28     	; 0x6366 <__vector_91+0x90>
    634a:	01 96       	adiw	r24, 0x01	; 1
    634c:	84 36       	cpi	r24, 0x64	; 100
    634e:	91 05       	cpc	r25, r1
    6350:	28 f4       	brcc	.+10     	; 0x635c <__vector_91+0x86>
    6352:	80 93 f7 41 	sts	0x41F7, r24	; 0x8041f7 <rcvD1_read_index>
    6356:	90 93 f8 41 	sts	0x41F8, r25	; 0x8041f8 <rcvD1_read_index+0x1>
    635a:	08 c0       	rjmp	.+16     	; 0x636c <__vector_91+0x96>
    635c:	10 92 f7 41 	sts	0x41F7, r1	; 0x8041f7 <rcvD1_read_index>
    6360:	10 92 f8 41 	sts	0x41F8, r1	; 0x8041f8 <rcvD1_read_index+0x1>
    6364:	03 c0       	rjmp	.+6      	; 0x636c <__vector_91+0x96>
    6366:	81 e0       	ldi	r24, 0x01	; 1
    6368:	90 e0       	ldi	r25, 0x00	; 0
    636a:	f3 cf       	rjmp	.-26     	; 0x6352 <__vector_91+0x7c>
    636c:	ff 91       	pop	r31
    636e:	ef 91       	pop	r30
    6370:	9f 91       	pop	r25
    6372:	8f 91       	pop	r24
    6374:	3f 91       	pop	r19
    6376:	2f 91       	pop	r18
    6378:	0f 90       	pop	r0
    637a:	0b be       	out	0x3b, r0	; 59
    637c:	0f 90       	pop	r0
    637e:	0f be       	out	0x3f, r0	; 63
    6380:	0f 90       	pop	r0
    6382:	1f 90       	pop	r1
    6384:	18 95       	reti

00006386 <__vector_58>:
    6386:	1f 92       	push	r1
    6388:	0f 92       	push	r0
    638a:	0f b6       	in	r0, 0x3f	; 63
    638c:	0f 92       	push	r0
    638e:	11 24       	eor	r1, r1
    6390:	0b b6       	in	r0, 0x3b	; 59
    6392:	0f 92       	push	r0
    6394:	2f 93       	push	r18
    6396:	3f 93       	push	r19
    6398:	8f 93       	push	r24
    639a:	9f 93       	push	r25
    639c:	ef 93       	push	r30
    639e:	ff 93       	push	r31
    63a0:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    63a4:	e0 91 01 42 	lds	r30, 0x4201	; 0x804201 <rcvE0_buffer>
    63a8:	f0 91 02 42 	lds	r31, 0x4202	; 0x804202 <rcvE0_buffer+0x1>
    63ac:	80 91 e9 41 	lds	r24, 0x41E9	; 0x8041e9 <rcvE0_write_index>
    63b0:	90 91 ea 41 	lds	r25, 0x41EA	; 0x8041ea <rcvE0_write_index+0x1>
    63b4:	e8 0f       	add	r30, r24
    63b6:	f9 1f       	adc	r31, r25
    63b8:	20 83       	st	Z, r18
    63ba:	80 91 e9 41 	lds	r24, 0x41E9	; 0x8041e9 <rcvE0_write_index>
    63be:	90 91 ea 41 	lds	r25, 0x41EA	; 0x8041ea <rcvE0_write_index+0x1>
    63c2:	01 96       	adiw	r24, 0x01	; 1
    63c4:	84 36       	cpi	r24, 0x64	; 100
    63c6:	91 05       	cpc	r25, r1
    63c8:	60 f4       	brcc	.+24     	; 0x63e2 <__vector_58+0x5c>
    63ca:	80 93 e9 41 	sts	0x41E9, r24	; 0x8041e9 <rcvE0_write_index>
    63ce:	90 93 ea 41 	sts	0x41EA, r25	; 0x8041ea <rcvE0_write_index+0x1>
    63d2:	20 91 f5 41 	lds	r18, 0x41F5	; 0x8041f5 <rcvE0_read_index>
    63d6:	30 91 f6 41 	lds	r19, 0x41F6	; 0x8041f6 <rcvE0_read_index+0x1>
    63da:	82 17       	cp	r24, r18
    63dc:	93 07       	cpc	r25, r19
    63de:	f1 f4       	brne	.+60     	; 0x641c <__vector_58+0x96>
    63e0:	0c c0       	rjmp	.+24     	; 0x63fa <__vector_58+0x74>
    63e2:	10 92 e9 41 	sts	0x41E9, r1	; 0x8041e9 <rcvE0_write_index>
    63e6:	10 92 ea 41 	sts	0x41EA, r1	; 0x8041ea <rcvE0_write_index+0x1>
    63ea:	80 91 f5 41 	lds	r24, 0x41F5	; 0x8041f5 <rcvE0_read_index>
    63ee:	90 91 f6 41 	lds	r25, 0x41F6	; 0x8041f6 <rcvE0_read_index+0x1>
    63f2:	18 16       	cp	r1, r24
    63f4:	19 06       	cpc	r1, r25
    63f6:	91 f4       	brne	.+36     	; 0x641c <__vector_58+0x96>
    63f8:	0e c0       	rjmp	.+28     	; 0x6416 <__vector_58+0x90>
    63fa:	01 96       	adiw	r24, 0x01	; 1
    63fc:	84 36       	cpi	r24, 0x64	; 100
    63fe:	91 05       	cpc	r25, r1
    6400:	28 f4       	brcc	.+10     	; 0x640c <__vector_58+0x86>
    6402:	80 93 f5 41 	sts	0x41F5, r24	; 0x8041f5 <rcvE0_read_index>
    6406:	90 93 f6 41 	sts	0x41F6, r25	; 0x8041f6 <rcvE0_read_index+0x1>
    640a:	08 c0       	rjmp	.+16     	; 0x641c <__vector_58+0x96>
    640c:	10 92 f5 41 	sts	0x41F5, r1	; 0x8041f5 <rcvE0_read_index>
    6410:	10 92 f6 41 	sts	0x41F6, r1	; 0x8041f6 <rcvE0_read_index+0x1>
    6414:	03 c0       	rjmp	.+6      	; 0x641c <__vector_58+0x96>
    6416:	81 e0       	ldi	r24, 0x01	; 1
    6418:	90 e0       	ldi	r25, 0x00	; 0
    641a:	f3 cf       	rjmp	.-26     	; 0x6402 <__vector_58+0x7c>
    641c:	ff 91       	pop	r31
    641e:	ef 91       	pop	r30
    6420:	9f 91       	pop	r25
    6422:	8f 91       	pop	r24
    6424:	3f 91       	pop	r19
    6426:	2f 91       	pop	r18
    6428:	0f 90       	pop	r0
    642a:	0b be       	out	0x3b, r0	; 59
    642c:	0f 90       	pop	r0
    642e:	0f be       	out	0x3f, r0	; 63
    6430:	0f 90       	pop	r0
    6432:	1f 90       	pop	r1
    6434:	18 95       	reti

00006436 <__vector_119>:
    6436:	1f 92       	push	r1
    6438:	0f 92       	push	r0
    643a:	0f b6       	in	r0, 0x3f	; 63
    643c:	0f 92       	push	r0
    643e:	11 24       	eor	r1, r1
    6440:	0b b6       	in	r0, 0x3b	; 59
    6442:	0f 92       	push	r0
    6444:	2f 93       	push	r18
    6446:	3f 93       	push	r19
    6448:	8f 93       	push	r24
    644a:	9f 93       	push	r25
    644c:	ef 93       	push	r30
    644e:	ff 93       	push	r31
    6450:	20 91 a0 0b 	lds	r18, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
    6454:	e0 91 ff 41 	lds	r30, 0x41FF	; 0x8041ff <rcvF0_buffer>
    6458:	f0 91 00 42 	lds	r31, 0x4200	; 0x804200 <rcvF0_buffer+0x1>
    645c:	80 91 e7 41 	lds	r24, 0x41E7	; 0x8041e7 <rcvF0_write_index>
    6460:	90 91 e8 41 	lds	r25, 0x41E8	; 0x8041e8 <rcvF0_write_index+0x1>
    6464:	e8 0f       	add	r30, r24
    6466:	f9 1f       	adc	r31, r25
    6468:	20 83       	st	Z, r18
    646a:	80 91 e7 41 	lds	r24, 0x41E7	; 0x8041e7 <rcvF0_write_index>
    646e:	90 91 e8 41 	lds	r25, 0x41E8	; 0x8041e8 <rcvF0_write_index+0x1>
    6472:	01 96       	adiw	r24, 0x01	; 1
    6474:	84 36       	cpi	r24, 0x64	; 100
    6476:	91 05       	cpc	r25, r1
    6478:	60 f4       	brcc	.+24     	; 0x6492 <__vector_119+0x5c>
    647a:	80 93 e7 41 	sts	0x41E7, r24	; 0x8041e7 <rcvF0_write_index>
    647e:	90 93 e8 41 	sts	0x41E8, r25	; 0x8041e8 <rcvF0_write_index+0x1>
    6482:	20 91 f3 41 	lds	r18, 0x41F3	; 0x8041f3 <rcvF0_read_index>
    6486:	30 91 f4 41 	lds	r19, 0x41F4	; 0x8041f4 <rcvF0_read_index+0x1>
    648a:	82 17       	cp	r24, r18
    648c:	93 07       	cpc	r25, r19
    648e:	f1 f4       	brne	.+60     	; 0x64cc <__vector_119+0x96>
    6490:	0c c0       	rjmp	.+24     	; 0x64aa <__vector_119+0x74>
    6492:	10 92 e7 41 	sts	0x41E7, r1	; 0x8041e7 <rcvF0_write_index>
    6496:	10 92 e8 41 	sts	0x41E8, r1	; 0x8041e8 <rcvF0_write_index+0x1>
    649a:	80 91 f3 41 	lds	r24, 0x41F3	; 0x8041f3 <rcvF0_read_index>
    649e:	90 91 f4 41 	lds	r25, 0x41F4	; 0x8041f4 <rcvF0_read_index+0x1>
    64a2:	18 16       	cp	r1, r24
    64a4:	19 06       	cpc	r1, r25
    64a6:	91 f4       	brne	.+36     	; 0x64cc <__vector_119+0x96>
    64a8:	0e c0       	rjmp	.+28     	; 0x64c6 <__vector_119+0x90>
    64aa:	01 96       	adiw	r24, 0x01	; 1
    64ac:	84 36       	cpi	r24, 0x64	; 100
    64ae:	91 05       	cpc	r25, r1
    64b0:	28 f4       	brcc	.+10     	; 0x64bc <__vector_119+0x86>
    64b2:	80 93 f3 41 	sts	0x41F3, r24	; 0x8041f3 <rcvF0_read_index>
    64b6:	90 93 f4 41 	sts	0x41F4, r25	; 0x8041f4 <rcvF0_read_index+0x1>
    64ba:	08 c0       	rjmp	.+16     	; 0x64cc <__vector_119+0x96>
    64bc:	10 92 f3 41 	sts	0x41F3, r1	; 0x8041f3 <rcvF0_read_index>
    64c0:	10 92 f4 41 	sts	0x41F4, r1	; 0x8041f4 <rcvF0_read_index+0x1>
    64c4:	03 c0       	rjmp	.+6      	; 0x64cc <__vector_119+0x96>
    64c6:	81 e0       	ldi	r24, 0x01	; 1
    64c8:	90 e0       	ldi	r25, 0x00	; 0
    64ca:	f3 cf       	rjmp	.-26     	; 0x64b2 <__vector_119+0x7c>
    64cc:	ff 91       	pop	r31
    64ce:	ef 91       	pop	r30
    64d0:	9f 91       	pop	r25
    64d2:	8f 91       	pop	r24
    64d4:	3f 91       	pop	r19
    64d6:	2f 91       	pop	r18
    64d8:	0f 90       	pop	r0
    64da:	0b be       	out	0x3b, r0	; 59
    64dc:	0f 90       	pop	r0
    64de:	0f be       	out	0x3f, r0	; 63
    64e0:	0f 90       	pop	r0
    64e2:	1f 90       	pop	r1
    64e4:	18 95       	reti

000064e6 <__subsf3>:
    64e6:	50 58       	subi	r21, 0x80	; 128

000064e8 <__addsf3>:
    64e8:	bb 27       	eor	r27, r27
    64ea:	aa 27       	eor	r26, r26
    64ec:	0e 94 8b 32 	call	0x6516	; 0x6516 <__addsf3x>
    64f0:	0c 94 d5 33 	jmp	0x67aa	; 0x67aa <__fp_round>
    64f4:	0e 94 c7 33 	call	0x678e	; 0x678e <__fp_pscA>
    64f8:	38 f0       	brcs	.+14     	; 0x6508 <__addsf3+0x20>
    64fa:	0e 94 ce 33 	call	0x679c	; 0x679c <__fp_pscB>
    64fe:	20 f0       	brcs	.+8      	; 0x6508 <__addsf3+0x20>
    6500:	39 f4       	brne	.+14     	; 0x6510 <__addsf3+0x28>
    6502:	9f 3f       	cpi	r25, 0xFF	; 255
    6504:	19 f4       	brne	.+6      	; 0x650c <__addsf3+0x24>
    6506:	26 f4       	brtc	.+8      	; 0x6510 <__addsf3+0x28>
    6508:	0c 94 c4 33 	jmp	0x6788	; 0x6788 <__fp_nan>
    650c:	0e f4       	brtc	.+2      	; 0x6510 <__addsf3+0x28>
    650e:	e0 95       	com	r30
    6510:	e7 fb       	bst	r30, 7
    6512:	0c 94 be 33 	jmp	0x677c	; 0x677c <__fp_inf>

00006516 <__addsf3x>:
    6516:	e9 2f       	mov	r30, r25
    6518:	0e 94 e6 33 	call	0x67cc	; 0x67cc <__fp_split3>
    651c:	58 f3       	brcs	.-42     	; 0x64f4 <__addsf3+0xc>
    651e:	ba 17       	cp	r27, r26
    6520:	62 07       	cpc	r22, r18
    6522:	73 07       	cpc	r23, r19
    6524:	84 07       	cpc	r24, r20
    6526:	95 07       	cpc	r25, r21
    6528:	20 f0       	brcs	.+8      	; 0x6532 <__addsf3x+0x1c>
    652a:	79 f4       	brne	.+30     	; 0x654a <__addsf3x+0x34>
    652c:	a6 f5       	brtc	.+104    	; 0x6596 <__addsf3x+0x80>
    652e:	0c 94 08 34 	jmp	0x6810	; 0x6810 <__fp_zero>
    6532:	0e f4       	brtc	.+2      	; 0x6536 <__addsf3x+0x20>
    6534:	e0 95       	com	r30
    6536:	0b 2e       	mov	r0, r27
    6538:	ba 2f       	mov	r27, r26
    653a:	a0 2d       	mov	r26, r0
    653c:	0b 01       	movw	r0, r22
    653e:	b9 01       	movw	r22, r18
    6540:	90 01       	movw	r18, r0
    6542:	0c 01       	movw	r0, r24
    6544:	ca 01       	movw	r24, r20
    6546:	a0 01       	movw	r20, r0
    6548:	11 24       	eor	r1, r1
    654a:	ff 27       	eor	r31, r31
    654c:	59 1b       	sub	r21, r25
    654e:	99 f0       	breq	.+38     	; 0x6576 <__addsf3x+0x60>
    6550:	59 3f       	cpi	r21, 0xF9	; 249
    6552:	50 f4       	brcc	.+20     	; 0x6568 <__addsf3x+0x52>
    6554:	50 3e       	cpi	r21, 0xE0	; 224
    6556:	68 f1       	brcs	.+90     	; 0x65b2 <__addsf3x+0x9c>
    6558:	1a 16       	cp	r1, r26
    655a:	f0 40       	sbci	r31, 0x00	; 0
    655c:	a2 2f       	mov	r26, r18
    655e:	23 2f       	mov	r18, r19
    6560:	34 2f       	mov	r19, r20
    6562:	44 27       	eor	r20, r20
    6564:	58 5f       	subi	r21, 0xF8	; 248
    6566:	f3 cf       	rjmp	.-26     	; 0x654e <__addsf3x+0x38>
    6568:	46 95       	lsr	r20
    656a:	37 95       	ror	r19
    656c:	27 95       	ror	r18
    656e:	a7 95       	ror	r26
    6570:	f0 40       	sbci	r31, 0x00	; 0
    6572:	53 95       	inc	r21
    6574:	c9 f7       	brne	.-14     	; 0x6568 <__addsf3x+0x52>
    6576:	7e f4       	brtc	.+30     	; 0x6596 <__addsf3x+0x80>
    6578:	1f 16       	cp	r1, r31
    657a:	ba 0b       	sbc	r27, r26
    657c:	62 0b       	sbc	r22, r18
    657e:	73 0b       	sbc	r23, r19
    6580:	84 0b       	sbc	r24, r20
    6582:	ba f0       	brmi	.+46     	; 0x65b2 <__addsf3x+0x9c>
    6584:	91 50       	subi	r25, 0x01	; 1
    6586:	a1 f0       	breq	.+40     	; 0x65b0 <__addsf3x+0x9a>
    6588:	ff 0f       	add	r31, r31
    658a:	bb 1f       	adc	r27, r27
    658c:	66 1f       	adc	r22, r22
    658e:	77 1f       	adc	r23, r23
    6590:	88 1f       	adc	r24, r24
    6592:	c2 f7       	brpl	.-16     	; 0x6584 <__addsf3x+0x6e>
    6594:	0e c0       	rjmp	.+28     	; 0x65b2 <__addsf3x+0x9c>
    6596:	ba 0f       	add	r27, r26
    6598:	62 1f       	adc	r22, r18
    659a:	73 1f       	adc	r23, r19
    659c:	84 1f       	adc	r24, r20
    659e:	48 f4       	brcc	.+18     	; 0x65b2 <__addsf3x+0x9c>
    65a0:	87 95       	ror	r24
    65a2:	77 95       	ror	r23
    65a4:	67 95       	ror	r22
    65a6:	b7 95       	ror	r27
    65a8:	f7 95       	ror	r31
    65aa:	9e 3f       	cpi	r25, 0xFE	; 254
    65ac:	08 f0       	brcs	.+2      	; 0x65b0 <__addsf3x+0x9a>
    65ae:	b0 cf       	rjmp	.-160    	; 0x6510 <__addsf3+0x28>
    65b0:	93 95       	inc	r25
    65b2:	88 0f       	add	r24, r24
    65b4:	08 f0       	brcs	.+2      	; 0x65b8 <__addsf3x+0xa2>
    65b6:	99 27       	eor	r25, r25
    65b8:	ee 0f       	add	r30, r30
    65ba:	97 95       	ror	r25
    65bc:	87 95       	ror	r24
    65be:	08 95       	ret

000065c0 <__divsf3>:
    65c0:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <__divsf3x>
    65c4:	0c 94 d5 33 	jmp	0x67aa	; 0x67aa <__fp_round>
    65c8:	0e 94 ce 33 	call	0x679c	; 0x679c <__fp_pscB>
    65cc:	58 f0       	brcs	.+22     	; 0x65e4 <__divsf3+0x24>
    65ce:	0e 94 c7 33 	call	0x678e	; 0x678e <__fp_pscA>
    65d2:	40 f0       	brcs	.+16     	; 0x65e4 <__divsf3+0x24>
    65d4:	29 f4       	brne	.+10     	; 0x65e0 <__divsf3+0x20>
    65d6:	5f 3f       	cpi	r21, 0xFF	; 255
    65d8:	29 f0       	breq	.+10     	; 0x65e4 <__divsf3+0x24>
    65da:	0c 94 be 33 	jmp	0x677c	; 0x677c <__fp_inf>
    65de:	51 11       	cpse	r21, r1
    65e0:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__fp_szero>
    65e4:	0c 94 c4 33 	jmp	0x6788	; 0x6788 <__fp_nan>

000065e8 <__divsf3x>:
    65e8:	0e 94 e6 33 	call	0x67cc	; 0x67cc <__fp_split3>
    65ec:	68 f3       	brcs	.-38     	; 0x65c8 <__divsf3+0x8>

000065ee <__divsf3_pse>:
    65ee:	99 23       	and	r25, r25
    65f0:	b1 f3       	breq	.-20     	; 0x65de <__divsf3+0x1e>
    65f2:	55 23       	and	r21, r21
    65f4:	91 f3       	breq	.-28     	; 0x65da <__divsf3+0x1a>
    65f6:	95 1b       	sub	r25, r21
    65f8:	55 0b       	sbc	r21, r21
    65fa:	bb 27       	eor	r27, r27
    65fc:	aa 27       	eor	r26, r26
    65fe:	62 17       	cp	r22, r18
    6600:	73 07       	cpc	r23, r19
    6602:	84 07       	cpc	r24, r20
    6604:	38 f0       	brcs	.+14     	; 0x6614 <__divsf3_pse+0x26>
    6606:	9f 5f       	subi	r25, 0xFF	; 255
    6608:	5f 4f       	sbci	r21, 0xFF	; 255
    660a:	22 0f       	add	r18, r18
    660c:	33 1f       	adc	r19, r19
    660e:	44 1f       	adc	r20, r20
    6610:	aa 1f       	adc	r26, r26
    6612:	a9 f3       	breq	.-22     	; 0x65fe <__divsf3_pse+0x10>
    6614:	35 d0       	rcall	.+106    	; 0x6680 <__divsf3_pse+0x92>
    6616:	0e 2e       	mov	r0, r30
    6618:	3a f0       	brmi	.+14     	; 0x6628 <__divsf3_pse+0x3a>
    661a:	e0 e8       	ldi	r30, 0x80	; 128
    661c:	32 d0       	rcall	.+100    	; 0x6682 <__divsf3_pse+0x94>
    661e:	91 50       	subi	r25, 0x01	; 1
    6620:	50 40       	sbci	r21, 0x00	; 0
    6622:	e6 95       	lsr	r30
    6624:	00 1c       	adc	r0, r0
    6626:	ca f7       	brpl	.-14     	; 0x661a <__divsf3_pse+0x2c>
    6628:	2b d0       	rcall	.+86     	; 0x6680 <__divsf3_pse+0x92>
    662a:	fe 2f       	mov	r31, r30
    662c:	29 d0       	rcall	.+82     	; 0x6680 <__divsf3_pse+0x92>
    662e:	66 0f       	add	r22, r22
    6630:	77 1f       	adc	r23, r23
    6632:	88 1f       	adc	r24, r24
    6634:	bb 1f       	adc	r27, r27
    6636:	26 17       	cp	r18, r22
    6638:	37 07       	cpc	r19, r23
    663a:	48 07       	cpc	r20, r24
    663c:	ab 07       	cpc	r26, r27
    663e:	b0 e8       	ldi	r27, 0x80	; 128
    6640:	09 f0       	breq	.+2      	; 0x6644 <__divsf3_pse+0x56>
    6642:	bb 0b       	sbc	r27, r27
    6644:	80 2d       	mov	r24, r0
    6646:	bf 01       	movw	r22, r30
    6648:	ff 27       	eor	r31, r31
    664a:	93 58       	subi	r25, 0x83	; 131
    664c:	5f 4f       	sbci	r21, 0xFF	; 255
    664e:	3a f0       	brmi	.+14     	; 0x665e <__divsf3_pse+0x70>
    6650:	9e 3f       	cpi	r25, 0xFE	; 254
    6652:	51 05       	cpc	r21, r1
    6654:	78 f0       	brcs	.+30     	; 0x6674 <__divsf3_pse+0x86>
    6656:	0c 94 be 33 	jmp	0x677c	; 0x677c <__fp_inf>
    665a:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__fp_szero>
    665e:	5f 3f       	cpi	r21, 0xFF	; 255
    6660:	e4 f3       	brlt	.-8      	; 0x665a <__divsf3_pse+0x6c>
    6662:	98 3e       	cpi	r25, 0xE8	; 232
    6664:	d4 f3       	brlt	.-12     	; 0x665a <__divsf3_pse+0x6c>
    6666:	86 95       	lsr	r24
    6668:	77 95       	ror	r23
    666a:	67 95       	ror	r22
    666c:	b7 95       	ror	r27
    666e:	f7 95       	ror	r31
    6670:	9f 5f       	subi	r25, 0xFF	; 255
    6672:	c9 f7       	brne	.-14     	; 0x6666 <__divsf3_pse+0x78>
    6674:	88 0f       	add	r24, r24
    6676:	91 1d       	adc	r25, r1
    6678:	96 95       	lsr	r25
    667a:	87 95       	ror	r24
    667c:	97 f9       	bld	r25, 7
    667e:	08 95       	ret
    6680:	e1 e0       	ldi	r30, 0x01	; 1
    6682:	66 0f       	add	r22, r22
    6684:	77 1f       	adc	r23, r23
    6686:	88 1f       	adc	r24, r24
    6688:	bb 1f       	adc	r27, r27
    668a:	62 17       	cp	r22, r18
    668c:	73 07       	cpc	r23, r19
    668e:	84 07       	cpc	r24, r20
    6690:	ba 07       	cpc	r27, r26
    6692:	20 f0       	brcs	.+8      	; 0x669c <__divsf3_pse+0xae>
    6694:	62 1b       	sub	r22, r18
    6696:	73 0b       	sbc	r23, r19
    6698:	84 0b       	sbc	r24, r20
    669a:	ba 0b       	sbc	r27, r26
    669c:	ee 1f       	adc	r30, r30
    669e:	88 f7       	brcc	.-30     	; 0x6682 <__divsf3_pse+0x94>
    66a0:	e0 95       	com	r30
    66a2:	08 95       	ret

000066a4 <__fixunssfsi>:
    66a4:	0e 94 ee 33 	call	0x67dc	; 0x67dc <__fp_splitA>
    66a8:	88 f0       	brcs	.+34     	; 0x66cc <__fixunssfsi+0x28>
    66aa:	9f 57       	subi	r25, 0x7F	; 127
    66ac:	98 f0       	brcs	.+38     	; 0x66d4 <__fixunssfsi+0x30>
    66ae:	b9 2f       	mov	r27, r25
    66b0:	99 27       	eor	r25, r25
    66b2:	b7 51       	subi	r27, 0x17	; 23
    66b4:	b0 f0       	brcs	.+44     	; 0x66e2 <__fixunssfsi+0x3e>
    66b6:	e1 f0       	breq	.+56     	; 0x66f0 <__fixunssfsi+0x4c>
    66b8:	66 0f       	add	r22, r22
    66ba:	77 1f       	adc	r23, r23
    66bc:	88 1f       	adc	r24, r24
    66be:	99 1f       	adc	r25, r25
    66c0:	1a f0       	brmi	.+6      	; 0x66c8 <__fixunssfsi+0x24>
    66c2:	ba 95       	dec	r27
    66c4:	c9 f7       	brne	.-14     	; 0x66b8 <__fixunssfsi+0x14>
    66c6:	14 c0       	rjmp	.+40     	; 0x66f0 <__fixunssfsi+0x4c>
    66c8:	b1 30       	cpi	r27, 0x01	; 1
    66ca:	91 f0       	breq	.+36     	; 0x66f0 <__fixunssfsi+0x4c>
    66cc:	0e 94 08 34 	call	0x6810	; 0x6810 <__fp_zero>
    66d0:	b1 e0       	ldi	r27, 0x01	; 1
    66d2:	08 95       	ret
    66d4:	0c 94 08 34 	jmp	0x6810	; 0x6810 <__fp_zero>
    66d8:	67 2f       	mov	r22, r23
    66da:	78 2f       	mov	r23, r24
    66dc:	88 27       	eor	r24, r24
    66de:	b8 5f       	subi	r27, 0xF8	; 248
    66e0:	39 f0       	breq	.+14     	; 0x66f0 <__fixunssfsi+0x4c>
    66e2:	b9 3f       	cpi	r27, 0xF9	; 249
    66e4:	cc f3       	brlt	.-14     	; 0x66d8 <__fixunssfsi+0x34>
    66e6:	86 95       	lsr	r24
    66e8:	77 95       	ror	r23
    66ea:	67 95       	ror	r22
    66ec:	b3 95       	inc	r27
    66ee:	d9 f7       	brne	.-10     	; 0x66e6 <__fixunssfsi+0x42>
    66f0:	3e f4       	brtc	.+14     	; 0x6700 <__fixunssfsi+0x5c>
    66f2:	90 95       	com	r25
    66f4:	80 95       	com	r24
    66f6:	70 95       	com	r23
    66f8:	61 95       	neg	r22
    66fa:	7f 4f       	sbci	r23, 0xFF	; 255
    66fc:	8f 4f       	sbci	r24, 0xFF	; 255
    66fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6700:	08 95       	ret

00006702 <__floatunsisf>:
    6702:	e8 94       	clt
    6704:	09 c0       	rjmp	.+18     	; 0x6718 <__floatsisf+0x12>

00006706 <__floatsisf>:
    6706:	97 fb       	bst	r25, 7
    6708:	3e f4       	brtc	.+14     	; 0x6718 <__floatsisf+0x12>
    670a:	90 95       	com	r25
    670c:	80 95       	com	r24
    670e:	70 95       	com	r23
    6710:	61 95       	neg	r22
    6712:	7f 4f       	sbci	r23, 0xFF	; 255
    6714:	8f 4f       	sbci	r24, 0xFF	; 255
    6716:	9f 4f       	sbci	r25, 0xFF	; 255
    6718:	99 23       	and	r25, r25
    671a:	a9 f0       	breq	.+42     	; 0x6746 <__floatsisf+0x40>
    671c:	f9 2f       	mov	r31, r25
    671e:	96 e9       	ldi	r25, 0x96	; 150
    6720:	bb 27       	eor	r27, r27
    6722:	93 95       	inc	r25
    6724:	f6 95       	lsr	r31
    6726:	87 95       	ror	r24
    6728:	77 95       	ror	r23
    672a:	67 95       	ror	r22
    672c:	b7 95       	ror	r27
    672e:	f1 11       	cpse	r31, r1
    6730:	f8 cf       	rjmp	.-16     	; 0x6722 <__floatsisf+0x1c>
    6732:	fa f4       	brpl	.+62     	; 0x6772 <__floatsisf+0x6c>
    6734:	bb 0f       	add	r27, r27
    6736:	11 f4       	brne	.+4      	; 0x673c <__floatsisf+0x36>
    6738:	60 ff       	sbrs	r22, 0
    673a:	1b c0       	rjmp	.+54     	; 0x6772 <__floatsisf+0x6c>
    673c:	6f 5f       	subi	r22, 0xFF	; 255
    673e:	7f 4f       	sbci	r23, 0xFF	; 255
    6740:	8f 4f       	sbci	r24, 0xFF	; 255
    6742:	9f 4f       	sbci	r25, 0xFF	; 255
    6744:	16 c0       	rjmp	.+44     	; 0x6772 <__floatsisf+0x6c>
    6746:	88 23       	and	r24, r24
    6748:	11 f0       	breq	.+4      	; 0x674e <__floatsisf+0x48>
    674a:	96 e9       	ldi	r25, 0x96	; 150
    674c:	11 c0       	rjmp	.+34     	; 0x6770 <__floatsisf+0x6a>
    674e:	77 23       	and	r23, r23
    6750:	21 f0       	breq	.+8      	; 0x675a <__floatsisf+0x54>
    6752:	9e e8       	ldi	r25, 0x8E	; 142
    6754:	87 2f       	mov	r24, r23
    6756:	76 2f       	mov	r23, r22
    6758:	05 c0       	rjmp	.+10     	; 0x6764 <__floatsisf+0x5e>
    675a:	66 23       	and	r22, r22
    675c:	71 f0       	breq	.+28     	; 0x677a <__floatsisf+0x74>
    675e:	96 e8       	ldi	r25, 0x86	; 134
    6760:	86 2f       	mov	r24, r22
    6762:	70 e0       	ldi	r23, 0x00	; 0
    6764:	60 e0       	ldi	r22, 0x00	; 0
    6766:	2a f0       	brmi	.+10     	; 0x6772 <__floatsisf+0x6c>
    6768:	9a 95       	dec	r25
    676a:	66 0f       	add	r22, r22
    676c:	77 1f       	adc	r23, r23
    676e:	88 1f       	adc	r24, r24
    6770:	da f7       	brpl	.-10     	; 0x6768 <__floatsisf+0x62>
    6772:	88 0f       	add	r24, r24
    6774:	96 95       	lsr	r25
    6776:	87 95       	ror	r24
    6778:	97 f9       	bld	r25, 7
    677a:	08 95       	ret

0000677c <__fp_inf>:
    677c:	97 f9       	bld	r25, 7
    677e:	9f 67       	ori	r25, 0x7F	; 127
    6780:	80 e8       	ldi	r24, 0x80	; 128
    6782:	70 e0       	ldi	r23, 0x00	; 0
    6784:	60 e0       	ldi	r22, 0x00	; 0
    6786:	08 95       	ret

00006788 <__fp_nan>:
    6788:	9f ef       	ldi	r25, 0xFF	; 255
    678a:	80 ec       	ldi	r24, 0xC0	; 192
    678c:	08 95       	ret

0000678e <__fp_pscA>:
    678e:	00 24       	eor	r0, r0
    6790:	0a 94       	dec	r0
    6792:	16 16       	cp	r1, r22
    6794:	17 06       	cpc	r1, r23
    6796:	18 06       	cpc	r1, r24
    6798:	09 06       	cpc	r0, r25
    679a:	08 95       	ret

0000679c <__fp_pscB>:
    679c:	00 24       	eor	r0, r0
    679e:	0a 94       	dec	r0
    67a0:	12 16       	cp	r1, r18
    67a2:	13 06       	cpc	r1, r19
    67a4:	14 06       	cpc	r1, r20
    67a6:	05 06       	cpc	r0, r21
    67a8:	08 95       	ret

000067aa <__fp_round>:
    67aa:	09 2e       	mov	r0, r25
    67ac:	03 94       	inc	r0
    67ae:	00 0c       	add	r0, r0
    67b0:	11 f4       	brne	.+4      	; 0x67b6 <__fp_round+0xc>
    67b2:	88 23       	and	r24, r24
    67b4:	52 f0       	brmi	.+20     	; 0x67ca <__fp_round+0x20>
    67b6:	bb 0f       	add	r27, r27
    67b8:	40 f4       	brcc	.+16     	; 0x67ca <__fp_round+0x20>
    67ba:	bf 2b       	or	r27, r31
    67bc:	11 f4       	brne	.+4      	; 0x67c2 <__fp_round+0x18>
    67be:	60 ff       	sbrs	r22, 0
    67c0:	04 c0       	rjmp	.+8      	; 0x67ca <__fp_round+0x20>
    67c2:	6f 5f       	subi	r22, 0xFF	; 255
    67c4:	7f 4f       	sbci	r23, 0xFF	; 255
    67c6:	8f 4f       	sbci	r24, 0xFF	; 255
    67c8:	9f 4f       	sbci	r25, 0xFF	; 255
    67ca:	08 95       	ret

000067cc <__fp_split3>:
    67cc:	57 fd       	sbrc	r21, 7
    67ce:	90 58       	subi	r25, 0x80	; 128
    67d0:	44 0f       	add	r20, r20
    67d2:	55 1f       	adc	r21, r21
    67d4:	59 f0       	breq	.+22     	; 0x67ec <__fp_splitA+0x10>
    67d6:	5f 3f       	cpi	r21, 0xFF	; 255
    67d8:	71 f0       	breq	.+28     	; 0x67f6 <__fp_splitA+0x1a>
    67da:	47 95       	ror	r20

000067dc <__fp_splitA>:
    67dc:	88 0f       	add	r24, r24
    67de:	97 fb       	bst	r25, 7
    67e0:	99 1f       	adc	r25, r25
    67e2:	61 f0       	breq	.+24     	; 0x67fc <__fp_splitA+0x20>
    67e4:	9f 3f       	cpi	r25, 0xFF	; 255
    67e6:	79 f0       	breq	.+30     	; 0x6806 <__fp_splitA+0x2a>
    67e8:	87 95       	ror	r24
    67ea:	08 95       	ret
    67ec:	12 16       	cp	r1, r18
    67ee:	13 06       	cpc	r1, r19
    67f0:	14 06       	cpc	r1, r20
    67f2:	55 1f       	adc	r21, r21
    67f4:	f2 cf       	rjmp	.-28     	; 0x67da <__fp_split3+0xe>
    67f6:	46 95       	lsr	r20
    67f8:	f1 df       	rcall	.-30     	; 0x67dc <__fp_splitA>
    67fa:	08 c0       	rjmp	.+16     	; 0x680c <__fp_splitA+0x30>
    67fc:	16 16       	cp	r1, r22
    67fe:	17 06       	cpc	r1, r23
    6800:	18 06       	cpc	r1, r24
    6802:	99 1f       	adc	r25, r25
    6804:	f1 cf       	rjmp	.-30     	; 0x67e8 <__fp_splitA+0xc>
    6806:	86 95       	lsr	r24
    6808:	71 05       	cpc	r23, r1
    680a:	61 05       	cpc	r22, r1
    680c:	08 94       	sec
    680e:	08 95       	ret

00006810 <__fp_zero>:
    6810:	e8 94       	clt

00006812 <__fp_szero>:
    6812:	bb 27       	eor	r27, r27
    6814:	66 27       	eor	r22, r22
    6816:	77 27       	eor	r23, r23
    6818:	cb 01       	movw	r24, r22
    681a:	97 f9       	bld	r25, 7
    681c:	08 95       	ret

0000681e <__mulsf3>:
    681e:	0e 94 22 34 	call	0x6844	; 0x6844 <__mulsf3x>
    6822:	0c 94 d5 33 	jmp	0x67aa	; 0x67aa <__fp_round>
    6826:	0e 94 c7 33 	call	0x678e	; 0x678e <__fp_pscA>
    682a:	38 f0       	brcs	.+14     	; 0x683a <__mulsf3+0x1c>
    682c:	0e 94 ce 33 	call	0x679c	; 0x679c <__fp_pscB>
    6830:	20 f0       	brcs	.+8      	; 0x683a <__mulsf3+0x1c>
    6832:	95 23       	and	r25, r21
    6834:	11 f0       	breq	.+4      	; 0x683a <__mulsf3+0x1c>
    6836:	0c 94 be 33 	jmp	0x677c	; 0x677c <__fp_inf>
    683a:	0c 94 c4 33 	jmp	0x6788	; 0x6788 <__fp_nan>
    683e:	11 24       	eor	r1, r1
    6840:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__fp_szero>

00006844 <__mulsf3x>:
    6844:	0e 94 e6 33 	call	0x67cc	; 0x67cc <__fp_split3>
    6848:	70 f3       	brcs	.-36     	; 0x6826 <__mulsf3+0x8>

0000684a <__mulsf3_pse>:
    684a:	95 9f       	mul	r25, r21
    684c:	c1 f3       	breq	.-16     	; 0x683e <__mulsf3+0x20>
    684e:	95 0f       	add	r25, r21
    6850:	50 e0       	ldi	r21, 0x00	; 0
    6852:	55 1f       	adc	r21, r21
    6854:	62 9f       	mul	r22, r18
    6856:	f0 01       	movw	r30, r0
    6858:	72 9f       	mul	r23, r18
    685a:	bb 27       	eor	r27, r27
    685c:	f0 0d       	add	r31, r0
    685e:	b1 1d       	adc	r27, r1
    6860:	63 9f       	mul	r22, r19
    6862:	aa 27       	eor	r26, r26
    6864:	f0 0d       	add	r31, r0
    6866:	b1 1d       	adc	r27, r1
    6868:	aa 1f       	adc	r26, r26
    686a:	64 9f       	mul	r22, r20
    686c:	66 27       	eor	r22, r22
    686e:	b0 0d       	add	r27, r0
    6870:	a1 1d       	adc	r26, r1
    6872:	66 1f       	adc	r22, r22
    6874:	82 9f       	mul	r24, r18
    6876:	22 27       	eor	r18, r18
    6878:	b0 0d       	add	r27, r0
    687a:	a1 1d       	adc	r26, r1
    687c:	62 1f       	adc	r22, r18
    687e:	73 9f       	mul	r23, r19
    6880:	b0 0d       	add	r27, r0
    6882:	a1 1d       	adc	r26, r1
    6884:	62 1f       	adc	r22, r18
    6886:	83 9f       	mul	r24, r19
    6888:	a0 0d       	add	r26, r0
    688a:	61 1d       	adc	r22, r1
    688c:	22 1f       	adc	r18, r18
    688e:	74 9f       	mul	r23, r20
    6890:	33 27       	eor	r19, r19
    6892:	a0 0d       	add	r26, r0
    6894:	61 1d       	adc	r22, r1
    6896:	23 1f       	adc	r18, r19
    6898:	84 9f       	mul	r24, r20
    689a:	60 0d       	add	r22, r0
    689c:	21 1d       	adc	r18, r1
    689e:	82 2f       	mov	r24, r18
    68a0:	76 2f       	mov	r23, r22
    68a2:	6a 2f       	mov	r22, r26
    68a4:	11 24       	eor	r1, r1
    68a6:	9f 57       	subi	r25, 0x7F	; 127
    68a8:	50 40       	sbci	r21, 0x00	; 0
    68aa:	9a f0       	brmi	.+38     	; 0x68d2 <__mulsf3_pse+0x88>
    68ac:	f1 f0       	breq	.+60     	; 0x68ea <__mulsf3_pse+0xa0>
    68ae:	88 23       	and	r24, r24
    68b0:	4a f0       	brmi	.+18     	; 0x68c4 <__mulsf3_pse+0x7a>
    68b2:	ee 0f       	add	r30, r30
    68b4:	ff 1f       	adc	r31, r31
    68b6:	bb 1f       	adc	r27, r27
    68b8:	66 1f       	adc	r22, r22
    68ba:	77 1f       	adc	r23, r23
    68bc:	88 1f       	adc	r24, r24
    68be:	91 50       	subi	r25, 0x01	; 1
    68c0:	50 40       	sbci	r21, 0x00	; 0
    68c2:	a9 f7       	brne	.-22     	; 0x68ae <__mulsf3_pse+0x64>
    68c4:	9e 3f       	cpi	r25, 0xFE	; 254
    68c6:	51 05       	cpc	r21, r1
    68c8:	80 f0       	brcs	.+32     	; 0x68ea <__mulsf3_pse+0xa0>
    68ca:	0c 94 be 33 	jmp	0x677c	; 0x677c <__fp_inf>
    68ce:	0c 94 09 34 	jmp	0x6812	; 0x6812 <__fp_szero>
    68d2:	5f 3f       	cpi	r21, 0xFF	; 255
    68d4:	e4 f3       	brlt	.-8      	; 0x68ce <__mulsf3_pse+0x84>
    68d6:	98 3e       	cpi	r25, 0xE8	; 232
    68d8:	d4 f3       	brlt	.-12     	; 0x68ce <__mulsf3_pse+0x84>
    68da:	86 95       	lsr	r24
    68dc:	77 95       	ror	r23
    68de:	67 95       	ror	r22
    68e0:	b7 95       	ror	r27
    68e2:	f7 95       	ror	r31
    68e4:	e7 95       	ror	r30
    68e6:	9f 5f       	subi	r25, 0xFF	; 255
    68e8:	c1 f7       	brne	.-16     	; 0x68da <__mulsf3_pse+0x90>
    68ea:	fe 2b       	or	r31, r30
    68ec:	88 0f       	add	r24, r24
    68ee:	91 1d       	adc	r25, r1
    68f0:	96 95       	lsr	r25
    68f2:	87 95       	ror	r24
    68f4:	97 f9       	bld	r25, 7
    68f6:	08 95       	ret

000068f8 <__mulsi3>:
    68f8:	db 01       	movw	r26, r22
    68fa:	8f 93       	push	r24
    68fc:	9f 93       	push	r25
    68fe:	0e 94 c5 34 	call	0x698a	; 0x698a <__muluhisi3>
    6902:	bf 91       	pop	r27
    6904:	af 91       	pop	r26
    6906:	a2 9f       	mul	r26, r18
    6908:	80 0d       	add	r24, r0
    690a:	91 1d       	adc	r25, r1
    690c:	a3 9f       	mul	r26, r19
    690e:	90 0d       	add	r25, r0
    6910:	b2 9f       	mul	r27, r18
    6912:	90 0d       	add	r25, r0
    6914:	11 24       	eor	r1, r1
    6916:	08 95       	ret

00006918 <__udivmodsi4>:
    6918:	a1 e2       	ldi	r26, 0x21	; 33
    691a:	1a 2e       	mov	r1, r26
    691c:	aa 1b       	sub	r26, r26
    691e:	bb 1b       	sub	r27, r27
    6920:	fd 01       	movw	r30, r26
    6922:	0d c0       	rjmp	.+26     	; 0x693e <__udivmodsi4_ep>

00006924 <__udivmodsi4_loop>:
    6924:	aa 1f       	adc	r26, r26
    6926:	bb 1f       	adc	r27, r27
    6928:	ee 1f       	adc	r30, r30
    692a:	ff 1f       	adc	r31, r31
    692c:	a2 17       	cp	r26, r18
    692e:	b3 07       	cpc	r27, r19
    6930:	e4 07       	cpc	r30, r20
    6932:	f5 07       	cpc	r31, r21
    6934:	20 f0       	brcs	.+8      	; 0x693e <__udivmodsi4_ep>
    6936:	a2 1b       	sub	r26, r18
    6938:	b3 0b       	sbc	r27, r19
    693a:	e4 0b       	sbc	r30, r20
    693c:	f5 0b       	sbc	r31, r21

0000693e <__udivmodsi4_ep>:
    693e:	66 1f       	adc	r22, r22
    6940:	77 1f       	adc	r23, r23
    6942:	88 1f       	adc	r24, r24
    6944:	99 1f       	adc	r25, r25
    6946:	1a 94       	dec	r1
    6948:	69 f7       	brne	.-38     	; 0x6924 <__udivmodsi4_loop>
    694a:	60 95       	com	r22
    694c:	70 95       	com	r23
    694e:	80 95       	com	r24
    6950:	90 95       	com	r25
    6952:	9b 01       	movw	r18, r22
    6954:	ac 01       	movw	r20, r24
    6956:	bd 01       	movw	r22, r26
    6958:	cf 01       	movw	r24, r30
    695a:	08 95       	ret

0000695c <__tablejump2__>:
    695c:	ee 0f       	add	r30, r30
    695e:	ff 1f       	adc	r31, r31
    6960:	88 1f       	adc	r24, r24
    6962:	8b bf       	out	0x3b, r24	; 59
    6964:	07 90       	elpm	r0, Z+
    6966:	f6 91       	elpm	r31, Z
    6968:	e0 2d       	mov	r30, r0
    696a:	19 94       	eijmp

0000696c <__umulhisi3>:
    696c:	a2 9f       	mul	r26, r18
    696e:	b0 01       	movw	r22, r0
    6970:	b3 9f       	mul	r27, r19
    6972:	c0 01       	movw	r24, r0
    6974:	a3 9f       	mul	r26, r19
    6976:	70 0d       	add	r23, r0
    6978:	81 1d       	adc	r24, r1
    697a:	11 24       	eor	r1, r1
    697c:	91 1d       	adc	r25, r1
    697e:	b2 9f       	mul	r27, r18
    6980:	70 0d       	add	r23, r0
    6982:	81 1d       	adc	r24, r1
    6984:	11 24       	eor	r1, r1
    6986:	91 1d       	adc	r25, r1
    6988:	08 95       	ret

0000698a <__muluhisi3>:
    698a:	0e 94 b6 34 	call	0x696c	; 0x696c <__umulhisi3>
    698e:	a5 9f       	mul	r26, r21
    6990:	90 0d       	add	r25, r0
    6992:	b4 9f       	mul	r27, r20
    6994:	90 0d       	add	r25, r0
    6996:	a4 9f       	mul	r26, r20
    6998:	80 0d       	add	r24, r0
    699a:	91 1d       	adc	r25, r1
    699c:	11 24       	eor	r1, r1
    699e:	08 95       	ret

000069a0 <__ftoa_engine>:
    69a0:	28 30       	cpi	r18, 0x08	; 8
    69a2:	08 f0       	brcs	.+2      	; 0x69a6 <__ftoa_engine+0x6>
    69a4:	27 e0       	ldi	r18, 0x07	; 7
    69a6:	33 27       	eor	r19, r19
    69a8:	da 01       	movw	r26, r20
    69aa:	99 0f       	add	r25, r25
    69ac:	31 1d       	adc	r19, r1
    69ae:	87 fd       	sbrc	r24, 7
    69b0:	91 60       	ori	r25, 0x01	; 1
    69b2:	00 96       	adiw	r24, 0x00	; 0
    69b4:	61 05       	cpc	r22, r1
    69b6:	71 05       	cpc	r23, r1
    69b8:	39 f4       	brne	.+14     	; 0x69c8 <__ftoa_engine+0x28>
    69ba:	32 60       	ori	r19, 0x02	; 2
    69bc:	2e 5f       	subi	r18, 0xFE	; 254
    69be:	3d 93       	st	X+, r19
    69c0:	30 e3       	ldi	r19, 0x30	; 48
    69c2:	2a 95       	dec	r18
    69c4:	e1 f7       	brne	.-8      	; 0x69be <__ftoa_engine+0x1e>
    69c6:	08 95       	ret
    69c8:	9f 3f       	cpi	r25, 0xFF	; 255
    69ca:	30 f0       	brcs	.+12     	; 0x69d8 <__ftoa_engine+0x38>
    69cc:	80 38       	cpi	r24, 0x80	; 128
    69ce:	71 05       	cpc	r23, r1
    69d0:	61 05       	cpc	r22, r1
    69d2:	09 f0       	breq	.+2      	; 0x69d6 <__ftoa_engine+0x36>
    69d4:	3c 5f       	subi	r19, 0xFC	; 252
    69d6:	3c 5f       	subi	r19, 0xFC	; 252
    69d8:	3d 93       	st	X+, r19
    69da:	91 30       	cpi	r25, 0x01	; 1
    69dc:	08 f0       	brcs	.+2      	; 0x69e0 <__ftoa_engine+0x40>
    69de:	80 68       	ori	r24, 0x80	; 128
    69e0:	91 1d       	adc	r25, r1
    69e2:	df 93       	push	r29
    69e4:	cf 93       	push	r28
    69e6:	1f 93       	push	r17
    69e8:	0f 93       	push	r16
    69ea:	ff 92       	push	r15
    69ec:	ef 92       	push	r14
    69ee:	19 2f       	mov	r17, r25
    69f0:	98 7f       	andi	r25, 0xF8	; 248
    69f2:	96 95       	lsr	r25
    69f4:	e9 2f       	mov	r30, r25
    69f6:	96 95       	lsr	r25
    69f8:	96 95       	lsr	r25
    69fa:	e9 0f       	add	r30, r25
    69fc:	ff 27       	eor	r31, r31
    69fe:	ec 50       	subi	r30, 0x0C	; 12
    6a00:	fa 4f       	sbci	r31, 0xFA	; 250
    6a02:	99 27       	eor	r25, r25
    6a04:	33 27       	eor	r19, r19
    6a06:	ee 24       	eor	r14, r14
    6a08:	ff 24       	eor	r15, r15
    6a0a:	a7 01       	movw	r20, r14
    6a0c:	e7 01       	movw	r28, r14
    6a0e:	05 90       	lpm	r0, Z+
    6a10:	08 94       	sec
    6a12:	07 94       	ror	r0
    6a14:	28 f4       	brcc	.+10     	; 0x6a20 <__ftoa_engine+0x80>
    6a16:	36 0f       	add	r19, r22
    6a18:	e7 1e       	adc	r14, r23
    6a1a:	f8 1e       	adc	r15, r24
    6a1c:	49 1f       	adc	r20, r25
    6a1e:	51 1d       	adc	r21, r1
    6a20:	66 0f       	add	r22, r22
    6a22:	77 1f       	adc	r23, r23
    6a24:	88 1f       	adc	r24, r24
    6a26:	99 1f       	adc	r25, r25
    6a28:	06 94       	lsr	r0
    6a2a:	a1 f7       	brne	.-24     	; 0x6a14 <__ftoa_engine+0x74>
    6a2c:	05 90       	lpm	r0, Z+
    6a2e:	07 94       	ror	r0
    6a30:	28 f4       	brcc	.+10     	; 0x6a3c <__ftoa_engine+0x9c>
    6a32:	e7 0e       	add	r14, r23
    6a34:	f8 1e       	adc	r15, r24
    6a36:	49 1f       	adc	r20, r25
    6a38:	56 1f       	adc	r21, r22
    6a3a:	c1 1d       	adc	r28, r1
    6a3c:	77 0f       	add	r23, r23
    6a3e:	88 1f       	adc	r24, r24
    6a40:	99 1f       	adc	r25, r25
    6a42:	66 1f       	adc	r22, r22
    6a44:	06 94       	lsr	r0
    6a46:	a1 f7       	brne	.-24     	; 0x6a30 <__ftoa_engine+0x90>
    6a48:	05 90       	lpm	r0, Z+
    6a4a:	07 94       	ror	r0
    6a4c:	28 f4       	brcc	.+10     	; 0x6a58 <__ftoa_engine+0xb8>
    6a4e:	f8 0e       	add	r15, r24
    6a50:	49 1f       	adc	r20, r25
    6a52:	56 1f       	adc	r21, r22
    6a54:	c7 1f       	adc	r28, r23
    6a56:	d1 1d       	adc	r29, r1
    6a58:	88 0f       	add	r24, r24
    6a5a:	99 1f       	adc	r25, r25
    6a5c:	66 1f       	adc	r22, r22
    6a5e:	77 1f       	adc	r23, r23
    6a60:	06 94       	lsr	r0
    6a62:	a1 f7       	brne	.-24     	; 0x6a4c <__ftoa_engine+0xac>
    6a64:	05 90       	lpm	r0, Z+
    6a66:	07 94       	ror	r0
    6a68:	20 f4       	brcc	.+8      	; 0x6a72 <__ftoa_engine+0xd2>
    6a6a:	49 0f       	add	r20, r25
    6a6c:	56 1f       	adc	r21, r22
    6a6e:	c7 1f       	adc	r28, r23
    6a70:	d8 1f       	adc	r29, r24
    6a72:	99 0f       	add	r25, r25
    6a74:	66 1f       	adc	r22, r22
    6a76:	77 1f       	adc	r23, r23
    6a78:	88 1f       	adc	r24, r24
    6a7a:	06 94       	lsr	r0
    6a7c:	a9 f7       	brne	.-22     	; 0x6a68 <__ftoa_engine+0xc8>
    6a7e:	84 91       	lpm	r24, Z
    6a80:	10 95       	com	r17
    6a82:	17 70       	andi	r17, 0x07	; 7
    6a84:	41 f0       	breq	.+16     	; 0x6a96 <__ftoa_engine+0xf6>
    6a86:	d6 95       	lsr	r29
    6a88:	c7 95       	ror	r28
    6a8a:	57 95       	ror	r21
    6a8c:	47 95       	ror	r20
    6a8e:	f7 94       	ror	r15
    6a90:	e7 94       	ror	r14
    6a92:	1a 95       	dec	r17
    6a94:	c1 f7       	brne	.-16     	; 0x6a86 <__ftoa_engine+0xe6>
    6a96:	ea e9       	ldi	r30, 0x9A	; 154
    6a98:	f5 e0       	ldi	r31, 0x05	; 5
    6a9a:	68 94       	set
    6a9c:	15 90       	lpm	r1, Z+
    6a9e:	15 91       	lpm	r17, Z+
    6aa0:	35 91       	lpm	r19, Z+
    6aa2:	65 91       	lpm	r22, Z+
    6aa4:	95 91       	lpm	r25, Z+
    6aa6:	05 90       	lpm	r0, Z+
    6aa8:	7f e2       	ldi	r23, 0x2F	; 47
    6aaa:	73 95       	inc	r23
    6aac:	e1 18       	sub	r14, r1
    6aae:	f1 0a       	sbc	r15, r17
    6ab0:	43 0b       	sbc	r20, r19
    6ab2:	56 0b       	sbc	r21, r22
    6ab4:	c9 0b       	sbc	r28, r25
    6ab6:	d0 09       	sbc	r29, r0
    6ab8:	c0 f7       	brcc	.-16     	; 0x6aaa <__ftoa_engine+0x10a>
    6aba:	e1 0c       	add	r14, r1
    6abc:	f1 1e       	adc	r15, r17
    6abe:	43 1f       	adc	r20, r19
    6ac0:	56 1f       	adc	r21, r22
    6ac2:	c9 1f       	adc	r28, r25
    6ac4:	d0 1d       	adc	r29, r0
    6ac6:	7e f4       	brtc	.+30     	; 0x6ae6 <__ftoa_engine+0x146>
    6ac8:	70 33       	cpi	r23, 0x30	; 48
    6aca:	11 f4       	brne	.+4      	; 0x6ad0 <__ftoa_engine+0x130>
    6acc:	8a 95       	dec	r24
    6ace:	e6 cf       	rjmp	.-52     	; 0x6a9c <__ftoa_engine+0xfc>
    6ad0:	e8 94       	clt
    6ad2:	01 50       	subi	r16, 0x01	; 1
    6ad4:	30 f0       	brcs	.+12     	; 0x6ae2 <__ftoa_engine+0x142>
    6ad6:	08 0f       	add	r16, r24
    6ad8:	0a f4       	brpl	.+2      	; 0x6adc <__ftoa_engine+0x13c>
    6ada:	00 27       	eor	r16, r16
    6adc:	02 17       	cp	r16, r18
    6ade:	08 f4       	brcc	.+2      	; 0x6ae2 <__ftoa_engine+0x142>
    6ae0:	20 2f       	mov	r18, r16
    6ae2:	23 95       	inc	r18
    6ae4:	02 2f       	mov	r16, r18
    6ae6:	7a 33       	cpi	r23, 0x3A	; 58
    6ae8:	28 f0       	brcs	.+10     	; 0x6af4 <__ftoa_engine+0x154>
    6aea:	79 e3       	ldi	r23, 0x39	; 57
    6aec:	7d 93       	st	X+, r23
    6aee:	2a 95       	dec	r18
    6af0:	e9 f7       	brne	.-6      	; 0x6aec <__ftoa_engine+0x14c>
    6af2:	10 c0       	rjmp	.+32     	; 0x6b14 <__ftoa_engine+0x174>
    6af4:	7d 93       	st	X+, r23
    6af6:	2a 95       	dec	r18
    6af8:	89 f6       	brne	.-94     	; 0x6a9c <__ftoa_engine+0xfc>
    6afa:	06 94       	lsr	r0
    6afc:	97 95       	ror	r25
    6afe:	67 95       	ror	r22
    6b00:	37 95       	ror	r19
    6b02:	17 95       	ror	r17
    6b04:	17 94       	ror	r1
    6b06:	e1 18       	sub	r14, r1
    6b08:	f1 0a       	sbc	r15, r17
    6b0a:	43 0b       	sbc	r20, r19
    6b0c:	56 0b       	sbc	r21, r22
    6b0e:	c9 0b       	sbc	r28, r25
    6b10:	d0 09       	sbc	r29, r0
    6b12:	98 f0       	brcs	.+38     	; 0x6b3a <__ftoa_engine+0x19a>
    6b14:	23 95       	inc	r18
    6b16:	7e 91       	ld	r23, -X
    6b18:	73 95       	inc	r23
    6b1a:	7a 33       	cpi	r23, 0x3A	; 58
    6b1c:	08 f0       	brcs	.+2      	; 0x6b20 <__ftoa_engine+0x180>
    6b1e:	70 e3       	ldi	r23, 0x30	; 48
    6b20:	7c 93       	st	X, r23
    6b22:	20 13       	cpse	r18, r16
    6b24:	b8 f7       	brcc	.-18     	; 0x6b14 <__ftoa_engine+0x174>
    6b26:	7e 91       	ld	r23, -X
    6b28:	70 61       	ori	r23, 0x10	; 16
    6b2a:	7d 93       	st	X+, r23
    6b2c:	30 f0       	brcs	.+12     	; 0x6b3a <__ftoa_engine+0x19a>
    6b2e:	83 95       	inc	r24
    6b30:	71 e3       	ldi	r23, 0x31	; 49
    6b32:	7d 93       	st	X+, r23
    6b34:	70 e3       	ldi	r23, 0x30	; 48
    6b36:	2a 95       	dec	r18
    6b38:	e1 f7       	brne	.-8      	; 0x6b32 <__ftoa_engine+0x192>
    6b3a:	11 24       	eor	r1, r1
    6b3c:	ef 90       	pop	r14
    6b3e:	ff 90       	pop	r15
    6b40:	0f 91       	pop	r16
    6b42:	1f 91       	pop	r17
    6b44:	cf 91       	pop	r28
    6b46:	df 91       	pop	r29
    6b48:	99 27       	eor	r25, r25
    6b4a:	87 fd       	sbrc	r24, 7
    6b4c:	90 95       	com	r25
    6b4e:	08 95       	ret

00006b50 <memcpy>:
    6b50:	fb 01       	movw	r30, r22
    6b52:	dc 01       	movw	r26, r24
    6b54:	02 c0       	rjmp	.+4      	; 0x6b5a <memcpy+0xa>
    6b56:	01 90       	ld	r0, Z+
    6b58:	0d 92       	st	X+, r0
    6b5a:	41 50       	subi	r20, 0x01	; 1
    6b5c:	50 40       	sbci	r21, 0x00	; 0
    6b5e:	d8 f7       	brcc	.-10     	; 0x6b56 <memcpy+0x6>
    6b60:	08 95       	ret

00006b62 <memset>:
    6b62:	dc 01       	movw	r26, r24
    6b64:	01 c0       	rjmp	.+2      	; 0x6b68 <memset+0x6>
    6b66:	6d 93       	st	X+, r22
    6b68:	41 50       	subi	r20, 0x01	; 1
    6b6a:	50 40       	sbci	r21, 0x00	; 0
    6b6c:	e0 f7       	brcc	.-8      	; 0x6b66 <memset+0x4>
    6b6e:	08 95       	ret

00006b70 <strncpy>:
    6b70:	fb 01       	movw	r30, r22
    6b72:	dc 01       	movw	r26, r24
    6b74:	41 50       	subi	r20, 0x01	; 1
    6b76:	50 40       	sbci	r21, 0x00	; 0
    6b78:	48 f0       	brcs	.+18     	; 0x6b8c <strncpy+0x1c>
    6b7a:	01 90       	ld	r0, Z+
    6b7c:	0d 92       	st	X+, r0
    6b7e:	00 20       	and	r0, r0
    6b80:	c9 f7       	brne	.-14     	; 0x6b74 <strncpy+0x4>
    6b82:	01 c0       	rjmp	.+2      	; 0x6b86 <strncpy+0x16>
    6b84:	1d 92       	st	X+, r1
    6b86:	41 50       	subi	r20, 0x01	; 1
    6b88:	50 40       	sbci	r21, 0x00	; 0
    6b8a:	e0 f7       	brcc	.-8      	; 0x6b84 <strncpy+0x14>
    6b8c:	08 95       	ret

00006b8e <__itoa_ncheck>:
    6b8e:	bb 27       	eor	r27, r27
    6b90:	4a 30       	cpi	r20, 0x0A	; 10
    6b92:	31 f4       	brne	.+12     	; 0x6ba0 <__itoa_ncheck+0x12>
    6b94:	99 23       	and	r25, r25
    6b96:	22 f4       	brpl	.+8      	; 0x6ba0 <__itoa_ncheck+0x12>
    6b98:	bd e2       	ldi	r27, 0x2D	; 45
    6b9a:	90 95       	com	r25
    6b9c:	81 95       	neg	r24
    6b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    6ba0:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__utoa_common>

00006ba4 <__ltoa_ncheck>:
    6ba4:	bb 27       	eor	r27, r27
    6ba6:	2a 30       	cpi	r18, 0x0A	; 10
    6ba8:	51 f4       	brne	.+20     	; 0x6bbe <__ltoa_ncheck+0x1a>
    6baa:	99 23       	and	r25, r25
    6bac:	42 f4       	brpl	.+16     	; 0x6bbe <__ltoa_ncheck+0x1a>
    6bae:	bd e2       	ldi	r27, 0x2D	; 45
    6bb0:	90 95       	com	r25
    6bb2:	80 95       	com	r24
    6bb4:	70 95       	com	r23
    6bb6:	61 95       	neg	r22
    6bb8:	7f 4f       	sbci	r23, 0xFF	; 255
    6bba:	8f 4f       	sbci	r24, 0xFF	; 255
    6bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    6bbe:	0c 94 ed 35 	jmp	0x6bda	; 0x6bda <__ultoa_common>

00006bc2 <ultoa>:
    6bc2:	25 32       	cpi	r18, 0x25	; 37
    6bc4:	31 05       	cpc	r19, r1
    6bc6:	20 f4       	brcc	.+8      	; 0x6bd0 <ultoa+0xe>
    6bc8:	22 30       	cpi	r18, 0x02	; 2
    6bca:	10 f0       	brcs	.+4      	; 0x6bd0 <ultoa+0xe>
    6bcc:	0c 94 ec 35 	jmp	0x6bd8	; 0x6bd8 <__ultoa_ncheck>
    6bd0:	fa 01       	movw	r30, r20
    6bd2:	10 82       	st	Z, r1
    6bd4:	ca 01       	movw	r24, r20
    6bd6:	08 95       	ret

00006bd8 <__ultoa_ncheck>:
    6bd8:	bb 27       	eor	r27, r27

00006bda <__ultoa_common>:
    6bda:	fa 01       	movw	r30, r20
    6bdc:	a6 2f       	mov	r26, r22
    6bde:	62 17       	cp	r22, r18
    6be0:	71 05       	cpc	r23, r1
    6be2:	81 05       	cpc	r24, r1
    6be4:	91 05       	cpc	r25, r1
    6be6:	33 0b       	sbc	r19, r19
    6be8:	30 fb       	bst	r19, 0
    6bea:	66 f0       	brts	.+24     	; 0x6c04 <__ultoa_common+0x2a>
    6bec:	aa 27       	eor	r26, r26
    6bee:	66 0f       	add	r22, r22
    6bf0:	77 1f       	adc	r23, r23
    6bf2:	88 1f       	adc	r24, r24
    6bf4:	99 1f       	adc	r25, r25
    6bf6:	aa 1f       	adc	r26, r26
    6bf8:	a2 17       	cp	r26, r18
    6bfa:	10 f0       	brcs	.+4      	; 0x6c00 <__ultoa_common+0x26>
    6bfc:	a2 1b       	sub	r26, r18
    6bfe:	63 95       	inc	r22
    6c00:	38 50       	subi	r19, 0x08	; 8
    6c02:	a9 f7       	brne	.-22     	; 0x6bee <__ultoa_common+0x14>
    6c04:	a0 5d       	subi	r26, 0xD0	; 208
    6c06:	aa 33       	cpi	r26, 0x3A	; 58
    6c08:	08 f0       	brcs	.+2      	; 0x6c0c <__ultoa_common+0x32>
    6c0a:	a9 5d       	subi	r26, 0xD9	; 217
    6c0c:	a1 93       	st	Z+, r26
    6c0e:	36 f7       	brtc	.-52     	; 0x6bdc <__ultoa_common+0x2>
    6c10:	b1 11       	cpse	r27, r1
    6c12:	b1 93       	st	Z+, r27
    6c14:	10 82       	st	Z, r1
    6c16:	ca 01       	movw	r24, r20
    6c18:	0c 94 33 36 	jmp	0x6c66	; 0x6c66 <strrev>

00006c1c <utoa>:
    6c1c:	45 32       	cpi	r20, 0x25	; 37
    6c1e:	51 05       	cpc	r21, r1
    6c20:	20 f4       	brcc	.+8      	; 0x6c2a <utoa+0xe>
    6c22:	42 30       	cpi	r20, 0x02	; 2
    6c24:	10 f0       	brcs	.+4      	; 0x6c2a <utoa+0xe>
    6c26:	0c 94 19 36 	jmp	0x6c32	; 0x6c32 <__utoa_ncheck>
    6c2a:	fb 01       	movw	r30, r22
    6c2c:	10 82       	st	Z, r1
    6c2e:	cb 01       	movw	r24, r22
    6c30:	08 95       	ret

00006c32 <__utoa_ncheck>:
    6c32:	bb 27       	eor	r27, r27

00006c34 <__utoa_common>:
    6c34:	fb 01       	movw	r30, r22
    6c36:	55 27       	eor	r21, r21
    6c38:	aa 27       	eor	r26, r26
    6c3a:	88 0f       	add	r24, r24
    6c3c:	99 1f       	adc	r25, r25
    6c3e:	aa 1f       	adc	r26, r26
    6c40:	a4 17       	cp	r26, r20
    6c42:	10 f0       	brcs	.+4      	; 0x6c48 <__utoa_common+0x14>
    6c44:	a4 1b       	sub	r26, r20
    6c46:	83 95       	inc	r24
    6c48:	50 51       	subi	r21, 0x10	; 16
    6c4a:	b9 f7       	brne	.-18     	; 0x6c3a <__utoa_common+0x6>
    6c4c:	a0 5d       	subi	r26, 0xD0	; 208
    6c4e:	aa 33       	cpi	r26, 0x3A	; 58
    6c50:	08 f0       	brcs	.+2      	; 0x6c54 <__utoa_common+0x20>
    6c52:	a9 5d       	subi	r26, 0xD9	; 217
    6c54:	a1 93       	st	Z+, r26
    6c56:	00 97       	sbiw	r24, 0x00	; 0
    6c58:	79 f7       	brne	.-34     	; 0x6c38 <__utoa_common+0x4>
    6c5a:	b1 11       	cpse	r27, r1
    6c5c:	b1 93       	st	Z+, r27
    6c5e:	11 92       	st	Z+, r1
    6c60:	cb 01       	movw	r24, r22
    6c62:	0c 94 33 36 	jmp	0x6c66	; 0x6c66 <strrev>

00006c66 <strrev>:
    6c66:	dc 01       	movw	r26, r24
    6c68:	fc 01       	movw	r30, r24
    6c6a:	67 2f       	mov	r22, r23
    6c6c:	71 91       	ld	r23, Z+
    6c6e:	77 23       	and	r23, r23
    6c70:	e1 f7       	brne	.-8      	; 0x6c6a <strrev+0x4>
    6c72:	32 97       	sbiw	r30, 0x02	; 2
    6c74:	04 c0       	rjmp	.+8      	; 0x6c7e <strrev+0x18>
    6c76:	7c 91       	ld	r23, X
    6c78:	6d 93       	st	X+, r22
    6c7a:	70 83       	st	Z, r23
    6c7c:	62 91       	ld	r22, -Z
    6c7e:	ae 17       	cp	r26, r30
    6c80:	bf 07       	cpc	r27, r31
    6c82:	c8 f3       	brcs	.-14     	; 0x6c76 <strrev+0x10>
    6c84:	08 95       	ret

00006c86 <_exit>:
    6c86:	f8 94       	cli

00006c88 <__stop_program>:
    6c88:	ff cf       	rjmp	.-2      	; 0x6c88 <__stop_program>
