
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000073c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00802000  000073c0  00007454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000211f  008020d6  008020d6  0000752a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000752a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000755c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000990  00000000  00000000  000075a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001f22b  00000000  00000000  00007f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007a74  00000000  00000000  0002715b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000075ff  00000000  00000000  0002ebcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f78  00000000  00000000  000361d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000083e5  00000000  00000000  00038148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009db7  00000000  00000000  0004052d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000840  00000000  00000000  0004a2e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__ctors_end>
       4:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
       8:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
       c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      10:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      14:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      18:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      1c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      20:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      24:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      28:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      2c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      30:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      34:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      38:	0c 94 42 21 	jmp	0x4284	; 0x4284 <__vector_14>
      3c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      40:	0c 94 16 21 	jmp	0x422c	; 0x422c <__vector_16>
      44:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      48:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      4c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      50:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      54:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      58:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      5c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      60:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      64:	0c 94 ea 33 	jmp	0x67d4	; 0x67d4 <__vector_25>
      68:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      6c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      70:	0c 94 42 34 	jmp	0x6884	; 0x6884 <__vector_28>
      74:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      78:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      7c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      80:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      84:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      88:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      8c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      90:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      94:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      98:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      9c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      a0:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      a4:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      a8:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      ac:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__vector_43>
      b0:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <__vector_44>
      b4:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      b8:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      bc:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      c0:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      c4:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      c8:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      cc:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      d0:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      d4:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      d8:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      dc:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__vector_55>
      e0:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      e4:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      e8:	0c 94 4a 35 	jmp	0x6a94	; 0x6a94 <__vector_58>
      ec:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      f0:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      f4:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      f8:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
      fc:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     100:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     104:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     108:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__vector_66>
     10c:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <__vector_67>
     110:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     114:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     118:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     11c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     120:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     124:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     128:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     12c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     130:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     134:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <__vector_77>
     138:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     13c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     140:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     144:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     148:	0c 94 be 20 	jmp	0x417c	; 0x417c <__vector_82>
     14c:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__vector_83>
     150:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     154:	0c 94 66 20 	jmp	0x40cc	; 0x40cc <__vector_85>
     158:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     15c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     160:	0c 94 9a 34 	jmp	0x6934	; 0x6934 <__vector_88>
     164:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     168:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     16c:	0c 94 f2 34 	jmp	0x69e4	; 0x69e4 <__vector_91>
     170:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     174:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     178:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     17c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     180:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     184:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     188:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     18c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     190:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     194:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     198:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     19c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1a0:	0c 94 fd 1f 	jmp	0x3ffa	; 0x3ffa <__vector_104>
     1a4:	0c 94 31 20 	jmp	0x4062	; 0x4062 <__vector_105>
     1a8:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1ac:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1b0:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1b4:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1b8:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1bc:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1c0:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1c4:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1c8:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1cc:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1d0:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1d4:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1d8:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1dc:	0c 94 a2 35 	jmp	0x6b44	; 0x6b44 <__vector_119>
     1e0:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1e4:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1e8:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1ec:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1f0:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1f4:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1f8:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__bad_interrupt>
     1fc:	0b 0e       	add	r0, r27
     1fe:	1b 0e       	add	r1, r27
     200:	48 0e       	add	r4, r24
     202:	76 0e       	add	r7, r22
     204:	0a 0f       	add	r16, r26
     206:	a5 0f       	add	r26, r21
     208:	e9 0f       	add	r30, r25
     20a:	94 10       	cpse	r9, r4
     20c:	cd 11       	cpse	r28, r13
     20e:	29 16       	cp	r2, r25
     210:	c2 1b       	sub	r28, r18
     212:	89 16       	cp	r8, r25
     214:	a0 16       	cp	r10, r16
     216:	47 16       	cp	r4, r23
     218:	c2 1b       	sub	r28, r18
     21a:	c2 1b       	sub	r28, r18
     21c:	c2 1b       	sub	r28, r18
     21e:	72 16       	cp	r7, r18
     220:	c2 1b       	sub	r28, r18
     222:	c2 1b       	sub	r28, r18
     224:	c2 1b       	sub	r28, r18
     226:	c2 1b       	sub	r28, r18
     228:	c2 1b       	sub	r28, r18
     22a:	c2 1b       	sub	r28, r18
     22c:	bc 16       	cp	r11, r28
     22e:	c2 1b       	sub	r28, r18
     230:	ae 16       	cp	r10, r30
     232:	b3 16       	cp	r11, r19
     234:	f2 17       	cp	r31, r18
     236:	c2 1b       	sub	r28, r18
     238:	c2 1b       	sub	r28, r18
     23a:	c2 1b       	sub	r28, r18
     23c:	14 18       	sub	r1, r4
     23e:	22 18       	sub	r2, r2
     240:	2e 18       	sub	r2, r14
     242:	3a 18       	sub	r3, r10
     244:	46 18       	sub	r4, r6
     246:	52 18       	sub	r5, r2
     248:	5e 18       	sub	r5, r14
     24a:	6a 18       	sub	r6, r10
     24c:	76 18       	sub	r7, r6
     24e:	82 18       	sub	r8, r2
     250:	c2 1b       	sub	r28, r18
     252:	c2 1b       	sub	r28, r18
     254:	c2 1b       	sub	r28, r18
     256:	c2 1b       	sub	r28, r18
     258:	c2 1b       	sub	r28, r18
     25a:	c2 1b       	sub	r28, r18
     25c:	c2 1b       	sub	r28, r18
     25e:	c2 1b       	sub	r28, r18
     260:	c2 1b       	sub	r28, r18
     262:	c2 1b       	sub	r28, r18
     264:	c2 1b       	sub	r28, r18
     266:	c2 1b       	sub	r28, r18
     268:	c2 1b       	sub	r28, r18
     26a:	c2 1b       	sub	r28, r18
     26c:	c2 1b       	sub	r28, r18
     26e:	c2 1b       	sub	r28, r18
     270:	c2 1b       	sub	r28, r18
     272:	c2 1b       	sub	r28, r18
     274:	c2 1b       	sub	r28, r18
     276:	c2 1b       	sub	r28, r18
     278:	c2 1b       	sub	r28, r18
     27a:	c2 1b       	sub	r28, r18
     27c:	c2 1b       	sub	r28, r18
     27e:	c2 1b       	sub	r28, r18
     280:	c2 1b       	sub	r28, r18
     282:	c2 1b       	sub	r28, r18
     284:	c2 1b       	sub	r28, r18
     286:	c2 1b       	sub	r28, r18
     288:	c2 1b       	sub	r28, r18
     28a:	c2 1b       	sub	r28, r18
     28c:	c2 1b       	sub	r28, r18
     28e:	c2 1b       	sub	r28, r18
     290:	c2 1b       	sub	r28, r18
     292:	c2 1b       	sub	r28, r18
     294:	c2 1b       	sub	r28, r18
     296:	c2 1b       	sub	r28, r18
     298:	c2 1b       	sub	r28, r18
     29a:	c2 1b       	sub	r28, r18
     29c:	c2 1b       	sub	r28, r18
     29e:	78 17       	cp	r23, r24
     2a0:	c2 1b       	sub	r28, r18
     2a2:	c2 1b       	sub	r28, r18
     2a4:	c2 1b       	sub	r28, r18
     2a6:	0c 17       	cp	r16, r28
     2a8:	c2 1b       	sub	r28, r18
     2aa:	e0 17       	cp	r30, r16
     2ac:	c2 1b       	sub	r28, r18
     2ae:	c2 1b       	sub	r28, r18
     2b0:	c2 1b       	sub	r28, r18
     2b2:	c2 1b       	sub	r28, r18
     2b4:	c2 1b       	sub	r28, r18
     2b6:	c2 1b       	sub	r28, r18
     2b8:	c2 1b       	sub	r28, r18
     2ba:	c2 1b       	sub	r28, r18
     2bc:	c2 1b       	sub	r28, r18
     2be:	c2 1b       	sub	r28, r18
     2c0:	07 17       	cp	r16, r23
     2c2:	c2 1b       	sub	r28, r18
     2c4:	c2 1b       	sub	r28, r18
     2c6:	c2 1b       	sub	r28, r18
     2c8:	c2 1b       	sub	r28, r18
     2ca:	c2 1b       	sub	r28, r18
     2cc:	8f 17       	cp	r24, r31
     2ce:	aa 17       	cp	r26, r26
     2d0:	c5 17       	cp	r28, r21
     2d2:	f1 18       	sub	r15, r1
     2d4:	fe 18       	sub	r15, r14
     2d6:	c2 1b       	sub	r28, r18
     2d8:	c2 1b       	sub	r28, r18
     2da:	c2 1b       	sub	r28, r18
     2dc:	c2 1b       	sub	r28, r18
     2de:	c2 1b       	sub	r28, r18
     2e0:	c2 1b       	sub	r28, r18
     2e2:	c2 1b       	sub	r28, r18
     2e4:	c2 1b       	sub	r28, r18
     2e6:	c2 1b       	sub	r28, r18
     2e8:	c2 1b       	sub	r28, r18
     2ea:	c2 1b       	sub	r28, r18
     2ec:	28 19       	sub	r18, r8
     2ee:	52 19       	sub	r21, r2
     2f0:	c2 1b       	sub	r28, r18
     2f2:	c2 1b       	sub	r28, r18
     2f4:	c2 1b       	sub	r28, r18
     2f6:	c2 1b       	sub	r28, r18
     2f8:	df 18       	sub	r13, r15
     2fa:	e5 18       	sub	r14, r5
     2fc:	eb 18       	sub	r14, r11
     2fe:	b4 1a       	sub	r11, r20
     300:	c2 1b       	sub	r28, r18
     302:	c2 1b       	sub	r28, r18
     304:	c2 1b       	sub	r28, r18
     306:	2a 1b       	sub	r18, r26
     308:	36 1b       	sub	r19, r22
     30a:	42 1b       	sub	r20, r18
     30c:	4e 1b       	sub	r20, r30
     30e:	5a 1b       	sub	r21, r26
     310:	66 1b       	sub	r22, r22
     312:	72 1b       	sub	r23, r18
     314:	7e 1b       	sub	r23, r30
     316:	8a 1b       	sub	r24, r26
     318:	96 1b       	sub	r25, r22
     31a:	c2 1b       	sub	r28, r18
     31c:	c2 1b       	sub	r28, r18
     31e:	c2 1b       	sub	r28, r18
     320:	c2 1b       	sub	r28, r18
     322:	c2 1b       	sub	r28, r18
     324:	c2 1b       	sub	r28, r18
     326:	c2 1b       	sub	r28, r18
     328:	c2 1b       	sub	r28, r18
     32a:	c2 1b       	sub	r28, r18
     32c:	c2 1b       	sub	r28, r18
     32e:	c2 1b       	sub	r28, r18
     330:	c2 1b       	sub	r28, r18
     332:	c2 1b       	sub	r28, r18
     334:	c2 1b       	sub	r28, r18
     336:	c2 1b       	sub	r28, r18
     338:	c2 1b       	sub	r28, r18
     33a:	c2 1b       	sub	r28, r18
     33c:	c2 1b       	sub	r28, r18
     33e:	c2 1b       	sub	r28, r18
     340:	c2 1b       	sub	r28, r18
     342:	c2 1b       	sub	r28, r18
     344:	c2 1b       	sub	r28, r18
     346:	c2 1b       	sub	r28, r18
     348:	c2 1b       	sub	r28, r18
     34a:	c2 1b       	sub	r28, r18
     34c:	c2 1b       	sub	r28, r18
     34e:	c2 1b       	sub	r28, r18
     350:	c2 1b       	sub	r28, r18
     352:	c2 1b       	sub	r28, r18
     354:	c2 1b       	sub	r28, r18
     356:	c2 1b       	sub	r28, r18
     358:	c2 1b       	sub	r28, r18
     35a:	c2 1b       	sub	r28, r18
     35c:	c2 1b       	sub	r28, r18
     35e:	c2 1b       	sub	r28, r18
     360:	c2 1b       	sub	r28, r18
     362:	c2 1b       	sub	r28, r18
     364:	c2 1b       	sub	r28, r18
     366:	c2 1b       	sub	r28, r18
     368:	3a 1a       	sub	r3, r26
     36a:	c2 1b       	sub	r28, r18
     36c:	c2 1b       	sub	r28, r18
     36e:	c2 1b       	sub	r28, r18
     370:	1b 1a       	sub	r1, r27
     372:	c2 1b       	sub	r28, r18
     374:	c2 1b       	sub	r28, r18
     376:	c2 1b       	sub	r28, r18
     378:	c2 1b       	sub	r28, r18
     37a:	c2 1b       	sub	r28, r18
     37c:	c2 1b       	sub	r28, r18
     37e:	c2 1b       	sub	r28, r18
     380:	c2 1b       	sub	r28, r18
     382:	10 1b       	sub	r17, r16
     384:	c2 1b       	sub	r28, r18
     386:	c2 1b       	sub	r28, r18
     388:	c2 1b       	sub	r28, r18
     38a:	c2 1b       	sub	r28, r18
     38c:	f8 1a       	sub	r15, r24
     38e:	c2 1b       	sub	r28, r18
     390:	de 1a       	sub	r13, r30
     392:	ac 19       	sub	r26, r12
     394:	c2 1b       	sub	r28, r18
     396:	c4 19       	sub	r28, r4
     398:	e1 19       	sub	r30, r1
     39a:	fe 19       	sub	r31, r14
     39c:	63 30       	cpi	r22, 0x03	; 3
     39e:	66 30       	cpi	r22, 0x06	; 6
     3a0:	69 30       	cpi	r22, 0x09	; 9
     3a2:	6c 30       	cpi	r22, 0x0C	; 12
     3a4:	6f 30       	cpi	r22, 0x0F	; 15
     3a6:	72 30       	cpi	r23, 0x02	; 2
     3a8:	74 30       	cpi	r23, 0x04	; 4
     3aa:	85 30       	cpi	r24, 0x05	; 5
     3ac:	8d 30       	cpi	r24, 0x0D	; 13
     3ae:	97 30       	cpi	r25, 0x07	; 7
     3b0:	95 30       	cpi	r25, 0x05	; 5

000003b2 <__trampolines_start>:
     3b2:	0c 94 94 10 	jmp	0x2128	; 0x2128 <_ZN7task_md3runEv+0x5c8>
     3b6:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <_ZN9task_user3runEv+0xe6>
     3ba:	0c 94 73 1c 	jmp	0x38e6	; 0x38e6 <_ZN9frt_queueImE7ISR_getEv>
     3be:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <_ZN9task_user3runEv+0x454>
     3c2:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <_ZN9task_user3runEv+0xa50>
     3c6:	0c 94 ba 27 	jmp	0x4f74	; 0x4f74 <prvIdleTask>
     3ca:	0c 94 0f 2f 	jmp	0x5e1e	; 0x5e1e <_ZN14frt_text_queue7putcharEc>
     3ce:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <_ZN7task_md3runEv>
     3d2:	0c 94 b4 1a 	jmp	0x3568	; 0x3568 <_ZN9task_user3runEv+0x9fc>
     3d6:	0c 94 bf 1c 	jmp	0x397e	; 0x397e <_ZN9frt_queueImE7butt_inERKm>
     3da:	0c 94 8d 30 	jmp	0x611a	; 0x611a <_ZN8emstreamlsE15ser_manipulator+0x72>
     3de:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <_ZN9task_user3runEv+0x1fa>
     3e2:	0c 94 a7 1c 	jmp	0x394e	; 0x394e <_ZN9frt_queueImE7ISR_putERKm>
     3e6:	0c 94 e8 1b 	jmp	0x37d0	; 0x37d0 <_ZN9frt_queueImE12ISR_is_emptyEv>
     3ea:	0c 94 69 30 	jmp	0x60d2	; 0x60d2 <_ZN8emstreamlsE15ser_manipulator+0x2a>
     3ee:	0c 94 10 1b 	jmp	0x3620	; 0x3620 <_ZN9task_user3runEv+0xab4>
     3f2:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <_ZN9task_user3runEv+0xae8>
     3f6:	0c 94 04 2f 	jmp	0x5e08	; 0x5e08 <_ZN14frt_text_queue14check_for_charEv>
     3fa:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <_ZN9frt_queueImE16ISR_num_items_inEv>
     3fe:	0c 94 3d 33 	jmp	0x667a	; 0x667a <_ZN5rs23214check_for_charEv>
     402:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <_ZN9task_user3runEv+0x890>
     406:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <_ZN9task_user3runEv+0xba8>
     40a:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <_ZN9task_user3runEv+0x478>
     40e:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <_ZN9frt_queueImE10get_a_copyERm>
     412:	0c 94 5e 18 	jmp	0x30bc	; 0x30bc <_ZN9task_user3runEv+0x550>
     416:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <_ZN9task_user3runEv+0xb90>
     41a:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <_ZN9task_user3runEv+0x3e8>
     41e:	0c 94 62 2f 	jmp	0x5ec4	; 0x5ec4 <__cxa_pure_virtual>
     422:	0c 94 06 30 	jmp	0x600c	; 0x600c <_ZN8emstream13ready_to_sendEv>
     426:	0c 94 3a 18 	jmp	0x3074	; 0x3074 <_ZN9task_user3runEv+0x508>
     42a:	0c 94 6f 30 	jmp	0x60de	; 0x60de <_ZN8emstreamlsE15ser_manipulator+0x36>
     42e:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <_ZN9task_user3runEv+0x856>
     432:	0c 94 46 18 	jmp	0x308c	; 0x308c <_ZN9task_user3runEv+0x520>
     436:	0c 94 74 30 	jmp	0x60e8	; 0x60e8 <_ZN8emstreamlsE15ser_manipulator+0x40>
     43a:	0c 94 b6 15 	jmp	0x2b6c	; 0x2b6c <_ZN9task_user3runEv>
     43e:	0c 94 c2 1b 	jmp	0x3784	; 0x3784 <_ZN9task_user3runEv+0xc18>
     442:	0c 94 08 30 	jmp	0x6010	; 0x6010 <_ZN8emstream7getcharEv>
     446:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <_ZN7task_md3runEv+0x472>
     44a:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <_ZN9task_user3runEv+0x2ac>
     44e:	0c 94 85 30 	jmp	0x610a	; 0x610a <_ZN8emstreamlsE15ser_manipulator+0x62>
     452:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <_ZN9task_user3runEv+0x81c>
     456:	0c 94 50 33 	jmp	0x66a0	; 0x66a0 <_ZN5rs23212clear_screenEv>
     45a:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <_ZN11task_sensor3runEv>
     45e:	0c 94 82 18 	jmp	0x3104	; 0x3104 <_ZN9task_user3runEv+0x598>
     462:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <_ZN9task_user3runEv+0xa84>
     466:	0c 94 17 33 	jmp	0x662e	; 0x662e <_ZN5rs2327getcharEv>
     46a:	0c 94 0d 30 	jmp	0x601a	; 0x601a <_ZN8emstream12transmit_nowEv>
     46e:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <_ZN9task_user3runEv+0xb48>
     472:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <_ZN9task_user3runEv+0x20c>
     476:	0c 94 0b 30 	jmp	0x6016	; 0x6016 <_ZN8emstream14check_for_charEv>
     47a:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <_ZN9task_user3runEv+0x122>
     47e:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <_ZN9frt_queueImE11ISR_butt_inERKm>
     482:	0c 94 f9 1b 	jmp	0x37f2	; 0x37f2 <_ZN9frt_queueImE9not_emptyEv>
     486:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <_ZN9task_user3runEv+0x690>
     48a:	0c 94 f3 32 	jmp	0x65e6	; 0x65e6 <_ZN5rs2327putcharEc>
     48e:	0c 94 dd 1b 	jmp	0x37ba	; 0x37ba <_ZN9frt_queueImE13ISR_not_emptyEv>
     492:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <_ZN9task_user3runEv+0x3b2>
     496:	0c 94 df 18 	jmp	0x31be	; 0x31be <_ZN9task_user3runEv+0x652>
     49a:	0c 94 ac 19 	jmp	0x3358	; 0x3358 <_ZN9task_user3runEv+0x7ec>
     49e:	0c 94 6c 30 	jmp	0x60d8	; 0x60d8 <_ZN8emstreamlsE15ser_manipulator+0x30>
     4a2:	0c 94 22 18 	jmp	0x3044	; 0x3044 <_ZN9task_user3runEv+0x4d8>
     4a6:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <_ZN9frt_queueImE12num_items_inEv>
     4aa:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <_ZN9task_user3runEv+0x41e>
     4ae:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <_ZN9frt_queueImE3getEv>
     4b2:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <_ZN7task_md3runEv+0x3ea>
     4b6:	0c 94 2e 18 	jmp	0x305c	; 0x305c <_ZN9task_user3runEv+0x4f0>
     4ba:	0c 94 3a 1a 	jmp	0x3474	; 0x3474 <_ZN9task_user3runEv+0x908>
     4be:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <_ZN9frt_queueImE10get_a_copyEv>
     4c2:	0c 94 28 19 	jmp	0x3250	; 0x3250 <_ZN9task_user3runEv+0x6e4>
     4c6:	0c 94 72 16 	jmp	0x2ce4	; 0x2ce4 <_ZN9task_user3runEv+0x178>
     4ca:	0c 94 6a 18 	jmp	0x30d4	; 0x30d4 <_ZN9task_user3runEv+0x568>
     4ce:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <_ZN9task_user3runEv+0x538>
     4d2:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <_ZN9task_user3runEv+0x66a>
     4d6:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <_ZN7task_md3runEv+0x18c>
     4da:	0c 94 52 07 	jmp	0xea4	; 0xea4 <_call_static_run_method>
     4de:	0c 94 52 19 	jmp	0x32a4	; 0x32a4 <_ZN9task_user3runEv+0x738>
     4e2:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <_ZN9task_user3runEv+0x1f0>
     4e6:	0c 94 f1 18 	jmp	0x31e2	; 0x31e2 <_ZN9task_user3runEv+0x676>
     4ea:	0c 94 72 1b 	jmp	0x36e4	; 0x36e4 <_ZN9task_user3runEv+0xb78>
     4ee:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <_ZN9frt_queueImE8is_emptyEv>
     4f2:	0c 94 72 30 	jmp	0x60e4	; 0x60e4 <_ZN8emstreamlsE15ser_manipulator+0x3c>
     4f6:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <_ZN9task_user3runEv+0x2a2>
     4fa:	0c 94 0e 30 	jmp	0x601c	; 0x601c <_ZN8emstream12clear_screenEv>
     4fe:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <_ZN7task_md3runEv+0x130>
     502:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <_ZN7task_md3runEv+0x2b4>
     506:	0c 94 63 30 	jmp	0x60c6	; 0x60c6 <_ZN8emstreamlsE15ser_manipulator+0x1e>
     50a:	0c 94 93 21 	jmp	0x4326	; 0x4326 <_GLOBAL__sub_I_counter>
     50e:	0c 94 97 30 	jmp	0x612e	; 0x612e <_ZN8emstreamlsE15ser_manipulator+0x86>
     512:	0c 94 95 30 	jmp	0x612a	; 0x612a <_ZN8emstreamlsE15ser_manipulator+0x82>
     516:	0c 94 42 1b 	jmp	0x3684	; 0x3684 <_ZN9task_user3runEv+0xb18>
     51a:	0c 94 66 30 	jmp	0x60cc	; 0x60cc <_ZN8emstreamlsE15ser_manipulator+0x24>
     51e:	0c 94 4e 1b 	jmp	0x369c	; 0x369c <_ZN9task_user3runEv+0xb30>
     522:	0c 94 14 18 	jmp	0x3028	; 0x3028 <_ZN9task_user3runEv+0x4bc>
     526:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <_ZN9task_user3runEv+0x384>
     52a:	0c 94 e6 2e 	jmp	0x5dcc	; 0x5dcc <_ZN14frt_text_queue7getcharEv>
     52e:	0c 94 36 1b 	jmp	0x366c	; 0x366c <_ZN9task_user3runEv+0xb00>
     532:	0c 94 e5 18 	jmp	0x31ca	; 0x31ca <_ZN9task_user3runEv+0x65e>
     536:	0c 94 96 1b 	jmp	0x372c	; 0x372c <_ZN9task_user3runEv+0xbc0>
     53a:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <_ZN7task_md3runEv+0xb6>
     53e:	0c 94 56 2e 	jmp	0x5cac	; 0x5cac <_ZN8frt_task12print_statusER8emstream>
     542:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <_ZN9task_user3runEv+0x580>
     546:	0c 94 38 1c 	jmp	0x3870	; 0x3870 <_ZN9frt_queueImE3getEPm>
     54a:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <_ZN9task_user3runEv+0x1a6>
     54e:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <_ZN9task_user3runEv+0x1d4>
     552:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <_ZN7task_md3runEv+0xd6>
     556:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <_ZN9task_user3runEv+0xb60>
     55a:	0c 94 1b 1a 	jmp	0x3436	; 0x3436 <_ZN9task_user3runEv+0x8ca>
     55e:	0c 94 cd 11 	jmp	0x239a	; 0x239a <_ZN7task_md3runEv+0x83a>
     562:	0c 94 d1 1c 	jmp	0x39a2	; 0x39a2 <_ZN9frt_queueImE3putERKm>
     566:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <_ZN9frt_queueImE7ISR_getEPm>

0000056a <__trampolines_end>:
     56a:	00 40       	sbci	r16, 0x00	; 0
     56c:	7a 10       	cpse	r7, r10
     56e:	f3 5a       	subi	r31, 0xA3	; 163
     570:	00 a0       	ldd	r0, Z+32	; 0x20
     572:	72 4e       	sbci	r23, 0xE2	; 226
     574:	18 09       	sbc	r17, r8
     576:	00 10       	cpse	r0, r0
     578:	a5 d4       	rcall	.+2378   	; 0xec4 <__do_copy_data+0xa>
     57a:	e8 00       	.word	0x00e8	; ????
     57c:	00 e8       	ldi	r16, 0x80	; 128
     57e:	76 48       	sbci	r23, 0x86	; 134
     580:	17 00       	.word	0x0017	; ????
     582:	00 e4       	ldi	r16, 0x40	; 64
     584:	0b 54       	subi	r16, 0x4B	; 75
     586:	02 00       	.word	0x0002	; ????
     588:	00 ca       	rjmp	.-3072   	; 0xfffff98a <__eeprom_end+0xff7ef98a>
     58a:	9a 3b       	cpi	r25, 0xBA	; 186
     58c:	00 00       	nop
     58e:	00 e1       	ldi	r16, 0x10	; 16
     590:	f5 05       	cpc	r31, r5
     592:	00 00       	nop
     594:	80 96       	adiw	r24, 0x20	; 32
     596:	98 00       	.word	0x0098	; ????
     598:	00 00       	nop
     59a:	40 42       	sbci	r20, 0x20	; 32
     59c:	0f 00       	.word	0x000f	; ????
     59e:	00 00       	nop
     5a0:	a0 86       	std	Z+8, r10	; 0x08
     5a2:	01 00       	.word	0x0001	; ????
     5a4:	00 00       	nop
     5a6:	10 27       	eor	r17, r16
     5a8:	00 00       	nop
     5aa:	00 00       	nop
     5ac:	e8 03       	fmulsu	r22, r16
     5ae:	00 00       	nop
     5b0:	00 00       	nop
     5b2:	64 00       	.word	0x0064	; ????
     5b4:	00 00       	nop
     5b6:	00 00       	nop
     5b8:	0a 00       	.word	0x000a	; ????
     5ba:	00 00       	nop
     5bc:	00 00       	nop
     5be:	01 00       	.word	0x0001	; ????
     5c0:	00 00       	nop
     5c2:	00 00       	nop
     5c4:	2c 76       	andi	r18, 0x6C	; 108
     5c6:	d8 88       	ldd	r13, Y+16	; 0x10
     5c8:	dc 67       	ori	r29, 0x7C	; 124
     5ca:	4f 08       	sbc	r4, r15
     5cc:	23 df       	rcall	.-442    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     5ce:	c1 df       	rcall	.-126    	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     5d0:	ae 59       	subi	r26, 0x9E	; 158
     5d2:	e1 b1       	in	r30, 0x01	; 1
     5d4:	b7 96       	adiw	r30, 0x27	; 39
     5d6:	e5 e3       	ldi	r30, 0x35	; 53
     5d8:	e4 53       	subi	r30, 0x34	; 52
     5da:	c6 3a       	cpi	r28, 0xA6	; 166
     5dc:	e6 51       	subi	r30, 0x16	; 22
     5de:	99 76       	andi	r25, 0x69	; 105
     5e0:	96 e8       	ldi	r25, 0x86	; 134
     5e2:	e6 c2       	rjmp	.+1484   	; 0xbb0 <_ZZN9task_user21print_coord_mode_menuEvE3__c_2+0x2>
     5e4:	84 26       	eor	r8, r20
     5e6:	eb 89       	ldd	r30, Y+19	; 0x13
     5e8:	8c 9b       	sbis	0x11, 4	; 17
     5ea:	62 ed       	ldi	r22, 0xD2	; 210
     5ec:	40 7c       	andi	r20, 0xC0	; 192
     5ee:	6f fc       	.word	0xfc6f	; ????
     5f0:	ef bc       	out	0x2f, r14	; 47
     5f2:	9c 9f       	mul	r25, r28
     5f4:	40 f2       	brcs	.-112    	; 0x586 <__trampolines_end+0x1c>
     5f6:	ba a5       	ldd	r27, Y+42	; 0x2a
     5f8:	6f a5       	ldd	r22, Y+47	; 0x2f
     5fa:	f4 90       	lpm	r15, Z
     5fc:	05 5a       	subi	r16, 0xA5	; 165
     5fe:	2a f7       	brpl	.-54     	; 0x5ca <__trampolines_end+0x60>
     600:	5c 93       	st	X, r21
     602:	6b 6c       	ori	r22, 0xCB	; 203
     604:	f9 67       	ori	r31, 0x79	; 121
     606:	6d c1       	rjmp	.+730    	; 0x8e2 <_ZZN9task_user3runEvE3__c_11+0x17>
     608:	1b fc       	.word	0xfc1b	; ????
     60a:	e0 e4       	ldi	r30, 0x40	; 64
     60c:	0d 47       	sbci	r16, 0x7D	; 125
     60e:	fe f5       	brtc	.+126    	; 0x68e <_ZZN7task_md3runEvE3__c_3+0x1>
     610:	20 e6       	ldi	r18, 0x60	; 96
     612:	b5 00       	.word	0x00b5	; ????
     614:	d0 ed       	ldi	r29, 0xD0	; 208
     616:	90 2e       	mov	r9, r16
     618:	03 00       	.word	0x0003	; ????
     61a:	94 35       	cpi	r25, 0x54	; 84
     61c:	77 05       	cpc	r23, r7
     61e:	00 80       	ld	r0, Z
     620:	84 1e       	adc	r8, r20
     622:	08 00       	.word	0x0008	; ????
     624:	00 20       	and	r0, r0
     626:	4e 0a       	sbc	r4, r30
     628:	00 00       	nop
     62a:	00 c8       	rjmp	.-4096   	; 0xfffff62c <__eeprom_end+0xff7ef62c>
     62c:	0c 33       	cpi	r16, 0x3C	; 60
     62e:	33 33       	cpi	r19, 0x33	; 51
     630:	33 0f       	add	r19, r19
     632:	98 6e       	ori	r25, 0xE8	; 232
     634:	12 83       	std	Z+2, r17	; 0x02
     636:	11 41       	sbci	r17, 0x11	; 17
     638:	ef 8d       	ldd	r30, Y+31	; 0x1f
     63a:	21 14       	cp	r2, r1
     63c:	89 3b       	cpi	r24, 0xB9	; 185
     63e:	e6 55       	subi	r30, 0x56	; 86
     640:	16 cf       	rjmp	.-468    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     642:	fe e6       	ldi	r31, 0x6E	; 110
     644:	db 18       	sub	r13, r11
     646:	d1 84       	ldd	r13, Z+9	; 0x09
     648:	4b 38       	cpi	r20, 0x8B	; 139
     64a:	1b f7       	brvc	.-58     	; 0x612 <__trampolines_end+0xa8>
     64c:	7c 1d       	adc	r23, r12
     64e:	90 1d       	adc	r25, r0
     650:	a4 bb       	out	0x14, r26	; 20
     652:	e4 24       	eor	r14, r4
     654:	20 32       	cpi	r18, 0x20	; 32
     656:	84 72       	andi	r24, 0x24	; 36
     658:	5e 22       	and	r5, r30
     65a:	81 00       	.word	0x0081	; ????
     65c:	c9 f1       	breq	.+114    	; 0x6d0 <_ZZN11task_sensor3runEvE3__c_1>
     65e:	24 ec       	ldi	r18, 0xC4	; 196
     660:	a1 e5       	ldi	r26, 0x51	; 81
     662:	3d 27       	eor	r19, r29

00000664 <_ZZN7task_md12reset_deviceEvE3__c>:
     664:	52 65 73 65 74 74 69 6e 67 20 64 65 76 69 63 65     Resetting device
     674:	2e 00                                               ..

00000676 <_ZZN7task_md7motorOnEvE3__c_0>:
     676:	52 00                                               R.

00000678 <_ZZN7task_md7motorOnEvE3__c>:
     678:	46 00                                               F.

0000067a <_ZZN7task_md3runEvE3__c_8>:
     67a:	6c 6f 63 3a 00                                      loc:.

0000067f <_ZZN7task_md3runEvE3__c_7>:
     67f:	6c 6f 63 3a 00                                      loc:.

00000684 <_ZZN7task_md3runEvE3__c_6>:
     684:	53 00                                               S.

00000686 <_ZZN7task_md3runEvE3__c_5>:
     686:	6c 6f 63 3a 00                                      loc:.

0000068b <_ZZN7task_md3runEvE3__c_4>:
     68b:	53 00                                               S.

0000068d <_ZZN7task_md3runEvE3__c_3>:
     68d:	76 65 6c 3a 20 00                                   vel: .

00000693 <_ZZN7task_md3runEvE3__c_2>:
     693:	6c 6f 63 3a 00                                      loc:.

00000698 <_ZZN7task_md3runEvE3__c_1>:
     698:	53 00                                               S.

0000069a <_ZZN7task_md3runEvE3__c_0>:
     69a:	6c 6f 63 3a 00                                      loc:.

0000069f <_ZZN7task_md3runEvE3__c>:
     69f:	53 32 00                                            S2.

000006a2 <_ZZN11task_sensor12reset_deviceEvE3__c>:
     6a2:	52 65 73 65 74 74 69 6e 67 20 64 65 76 69 63 65     Resetting device
     6b2:	2e 00                                               ..

000006b4 <_ZZN11task_sensor3runEvE3__c_5>:
     6b4:	6d 56 3a 00                                         mV:.

000006b8 <_ZZN11task_sensor3runEvE3__c_4>:
     6b8:	48 46 3a 00                                         HF:.

000006bc <_ZZN11task_sensor3runEvE3__c_3>:
     6bc:	43 00                                               C.

000006be <_ZZN11task_sensor3runEvE3__c_2>:
     6be:	52 6f 75 74 69 6e 65 20 63 6f 6d 70 6c 65 74 65     Routine complete
     6ce:	2e 00                                               ..

000006d0 <_ZZN11task_sensor3runEvE3__c_1>:
     6d0:	6d 56 3a 00                                         mV:.

000006d4 <_ZZN11task_sensor3runEvE3__c_0>:
     6d4:	48 46 3a 00                                         HF:.

000006d8 <_ZZN11task_sensor3runEvE3__c>:
     6d8:	53 65 6e 73 6f 72 20 52 65 61 64 69 6e 67 20 00     Sensor Reading .

000006e8 <_ZZN9task_user11show_statusEvE3__c_4>:
     6e8:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

000006f3 <_ZZN9task_user11show_statusEvE3__c_3>:
     6f3:	2f 00                                               /.

000006f5 <_ZZN9task_user11show_statusEvE3__c_2>:
     6f5:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

00000703 <_ZZN9task_user11show_statusEvE3__c_1>:
     703:	54 69 6d 65 3a 20 00                                Time: .

0000070a <_ZZN9task_user11show_statusEvE3__c_0>:
     70a:	53 65 70 20 31 36 20 32 30 31 38 00                 Sep 16 2018.

00000716 <_ZZN9task_user11show_statusEvE3__c>:
     716:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     726:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

00000735 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     735:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

00000744 <_ZZN9task_user18print_help_messageEvE3__c_9>:
     744:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     754:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

0000075f <_ZZN9task_user18print_help_messageEvE3__c_8>:
     75f:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     76f:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

0000077d <_ZZN9task_user18print_help_messageEvE3__c_7>:
     77d:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     78d:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     79d:	6d 61 74 69 6f 6e 00                                mation.

000007a4 <_ZZN9task_user18print_help_messageEvE3__c_6>:
     7a4:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     7b4:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

000007c5 <_ZZN9task_user18print_help_messageEvE3__c_5>:
     7c5:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     7d5:	65 20 6f 6e 6c 79 3a 00                             e only:.

000007dd <_ZZN9task_user18print_help_messageEvE3__c_4>:
     7dd:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     7ed:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

000007f9 <_ZZN9task_user18print_help_messageEvE3__c_3>:
     7f9:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     809:	68 65 20 41 56 52 00                                he AVR.

00000810 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     810:	20 68 65 6c 70 00                                    help.

00000816 <_ZZN9task_user18print_help_messageEvE3__c_1>:
     816:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     826:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

00000835 <_ZZN9task_user18print_help_messageEvE3__c_0>:
     835:	1b 5b 33 30 6d 00                                   .[30m.

0000083b <_ZZN9task_user18print_help_messageEvE3__c>:
     83b:	1b 5b 34 36 6d 00                                   .[46m.

00000841 <_ZZN9task_user3runEvE3__c_17>:
     841:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     851:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

0000085e <_ZZN9task_user3runEvE3__c_16>:
     85e:	53 65 6e 73 6f 72 20 73 61 6d 70 6c 65 20 73 69     Sensor sample si
     86e:	7a 65 20 73 65 74 20 74 6f 3a 00                    ze set to:.

00000879 <_ZZN9task_user3runEvE3__c_15>:
     879:	53 65 6e 73 6f 72 20 64 65 6c 61 79 20 73 65 74     Sensor delay set
     889:	20 74 6f 3a 00                                       to:.

0000088e <_ZZN9task_user3runEvE3__c_14>:
     88e:	4d 69 63 72 6f 73 74 65 70 20 73 63 61 6c 65 72     Microstep scaler
     89e:	20 73 65 74 20 74 6f 3a 00                           set to:.

000008a7 <_ZZN9task_user3runEvE3__c_13>:
     8a7:	43 6f 6e 66 69 67 20 65 6e 74 65 72 65 64 3a 00     Config entered:.

000008b7 <_ZZN9task_user3runEvE3__c_12>:
     8b7:	4c 65 61 76 69 6e 67 20 63 6f 6e 66 69 67 20 6d     Leaving config m
     8c7:	6f 64 65 00                                         ode.

000008cb <_ZZN9task_user3runEvE3__c_11>:
     8cb:	5a 2d 61 78 69 73 20 6d 61 78 20 76 65 6c 6f 63     Z-axis max veloc
     8db:	69 74 79 20 73 65 74 20 74 6f 3a 00                 ity set to:.

000008e7 <_ZZN9task_user3runEvE3__c_10>:
     8e7:	59 2d 61 78 69 73 20 6d 61 78 20 76 65 6c 6f 63     Y-axis max veloc
     8f7:	69 74 79 20 73 65 74 20 74 6f 3a 00                 ity set to:.

00000903 <_ZZN9task_user3runEvE3__c_9>:
     903:	58 2d 61 78 69 73 20 6d 61 78 20 76 65 6c 6f 63     X-axis max veloc
     913:	69 74 79 20 73 65 74 20 74 6f 3a 00                 ity set to:.

0000091f <_ZZN9task_user3runEvE3__c_8>:
     91f:	4d 61 78 20 76 65 6c 6f 63 69 74 79 20 73 65 74     Max velocity set
     92f:	20 74 6f 3a 00                                       to:.

00000934 <_ZZN9task_user3runEvE3__c_7>:
     934:	50 6c 65 61 73 65 20 63 68 6f 6f 73 65 20 74 68     Please choose th
     944:	65 20 6d 6f 74 6f 72 20 79 6f 75 20 77 6f 75 6c     e motor you woul
     954:	64 20 6c 69 6b 65 20 74 6f 20 63 6f 6e 74 72 6f     d like to contro
     964:	6c 2e 00                                            l..

00000967 <_ZZN9task_user3runEvE3__c_6>:
     967:	50 6c 65 61 73 65 20 63 68 6f 6f 73 65 20 74 68     Please choose th
     977:	65 20 6d 6f 74 6f 72 20 79 6f 75 20 77 6f 75 6c     e motor you woul
     987:	64 20 6c 69 6b 65 20 74 6f 20 63 6f 6e 74 72 6f     d like to contro
     997:	6c 2e 00                                            l..

0000099a <_ZZN9task_user3runEvE3__c_5>:
     99a:	50 6c 65 61 73 65 20 63 68 6f 6f 73 65 20 74 68     Please choose th
     9aa:	65 20 6d 6f 74 6f 72 20 79 6f 75 20 77 6f 75 6c     e motor you woul
     9ba:	64 20 6c 69 6b 65 20 74 6f 20 63 6f 6e 74 72 6f     d like to contro
     9ca:	6c 2e 00                                            l..

000009cd <_ZZN9task_user3runEvE3__c_4>:
     9cd:	52 65 63 65 69 76 69 6e 67 20 5a 2d 6c 6f 63 61     Receiving Z-loca
     9dd:	74 69 6f 6e 73 2e 00                                tions..

000009e4 <_ZZN9task_user3runEvE3__c_3>:
     9e4:	52 65 63 65 69 76 69 6e 67 20 59 2d 6c 6f 63 61     Receiving Y-loca
     9f4:	74 69 6f 6e 73 2e 00                                tions..

000009fb <_ZZN9task_user3runEvE3__c_2>:
     9fb:	52 65 63 65 69 76 69 6e 67 20 58 2d 6c 6f 63 61     Receiving X-loca
     a0b:	74 69 6f 6e 73 2e 00                                tions..

00000a12 <_ZZN9task_user3runEvE3__c_1>:
     a12:	45 72 72 6f 72 3a 20 55 6e 65 71 75 61 6c 20 61     Error: Unequal a
     a22:	78 69 73 20 63 6f 6f 72 64 69 6e 61 74 65 20 76     xis coordinate v
     a32:	65 63 74 6f 72 73 2e 00                             ectors..

00000a3a <_ZZN9task_user3runEvE3__c_0>:
     a3a:	54 6f 74 61 6c 20 6e 6f 64 65 73 3a 20 00           Total nodes: .

00000a48 <_ZZN9task_user3runEvE3__c>:
     a48:	45 6e 74 65 72 69 6e 67 20 63 6f 6e 66 69 67 20     Entering config 
     a58:	6d 6f 64 65 00                                      mode.

00000a5d <_ZZN9task_user12reset_deviceEvE3__c>:
     a5d:	52 65 73 65 74 74 69 6e 67 20 64 65 76 69 63 65     Resetting device
     a6d:	2e 00                                               ..

00000a6f <_ZZN9task_user24print_dir_motor_commandsEvE3__c_1>:
     a6f:	50 72 65 73 73 20 43 74 72 6c 2d 53 20 74 6f 20     Press Ctrl-S to 
     a7f:	73 74 6f 70 2e 00                                   stop..

00000a85 <_ZZN9task_user24print_dir_motor_commandsEvE3__c_0>:
     a85:	50 72 65 73 73 20 43 74 72 6c 2d 52 20 74 6f 20     Press Ctrl-R to 
     a95:	61 63 74 69 76 61 74 65 20 72 65 76 65 72 73 65     activate reverse
     aa5:	2e 00                                               ..

00000aa7 <_ZZN9task_user24print_dir_motor_commandsEvE3__c>:
     aa7:	50 72 65 73 73 20 43 74 72 6c 2d 46 20 74 6f 20     Press Ctrl-F to 
     ab7:	61 63 74 69 76 61 74 65 20 66 6f 72 77 61 72 64     activate forward
     ac7:	2e 00                                               ..

00000ac9 <_ZZN9task_user19print_dir_mode_menuEvE3__c_2>:
     ac9:	50 72 65 73 73 20 43 74 72 6c 2d 5a 20 66 6f 72     Press Ctrl-Z for
     ad9:	20 5a 2d 4d 6f 74 6f 72 20 63 6f 6d 6d 61 6e 64      Z-Motor command
     ae9:	73 2e 00                                            s..

00000aec <_ZZN9task_user19print_dir_mode_menuEvE3__c_1>:
     aec:	50 72 65 73 73 20 43 74 72 6c 2d 59 20 66 6f 72     Press Ctrl-Y for
     afc:	20 59 2d 4d 6f 74 6f 72 20 63 6f 6d 6d 61 6e 64      Y-Motor command
     b0c:	73 2e 00                                            s..

00000b0f <_ZZN9task_user19print_dir_mode_menuEvE3__c_0>:
     b0f:	50 72 65 73 73 20 43 74 72 6c 2d 58 20 66 6f 72     Press Ctrl-X for
     b1f:	20 58 2d 4d 6f 74 6f 72 20 63 6f 6d 6d 61 6e 64      X-Motor command
     b2f:	73 2e 00                                            s..

00000b32 <_ZZN9task_user19print_dir_mode_menuEvE3__c>:
     b32:	45 6e 74 65 72 69 6e 67 20 44 69 72 65 63 74 20     Entering Direct 
     b42:	4f 70 65 72 61 74 69 6f 6e 20 4d 6f 64 65 2e 00     Operation Mode..

00000b52 <_ZZN9task_user21print_coord_mode_menuEvE3__c_5>:
     b52:	50 72 65 73 73 20 45 20 74 6f 20 72 65 74 75 72     Press E to retur
     b62:	6e 20 74 6f 20 74 68 65 20 6d 61 69 6e 20 6d 65     n to the main me
     b72:	6e 75 2e 00                                         nu..

00000b76 <_ZZN9task_user21print_coord_mode_menuEvE3__c_4>:
     b76:	50 72 65 73 73 20 52 20 74 6f 20 72 65 73 65 74     Press R to reset
     b86:	20 74 68 65 20 64 65 76 69 63 65 2e 00               the device..

00000b93 <_ZZN9task_user21print_coord_mode_menuEvE3__c_3>:
     b93:	50 72 65 73 73 20 47 20 74 6f 20 72 75 6e 20 74     Press G to run t
     ba3:	68 65 20 64 65 76 69 63 65 2e 00                    he device..

00000bae <_ZZN9task_user21print_coord_mode_menuEvE3__c_2>:
     bae:	50 72 65 73 73 20 5a 20 74 6f 20 65 6e 74 65 72     Press Z to enter
     bbe:	20 5a 2d 63 6f 6f 72 64 69 6e 61 74 65 73 2e 00      Z-coordinates..

00000bce <_ZZN9task_user21print_coord_mode_menuEvE3__c_1>:
     bce:	50 72 65 73 73 20 59 20 74 6f 20 65 6e 74 65 72     Press Y to enter
     bde:	20 59 2d 63 6f 6f 72 64 69 6e 61 74 65 73 2e 00      Y-coordinates..

00000bee <_ZZN9task_user21print_coord_mode_menuEvE3__c_0>:
     bee:	50 72 65 73 73 20 58 20 74 6f 20 65 6e 74 65 72     Press X to enter
     bfe:	20 58 2d 63 6f 6f 72 64 69 6e 61 74 65 73 2e 00      X-coordinates..

00000c0e <_ZZN9task_user21print_coord_mode_menuEvE3__c>:
     c0e:	45 6e 74 65 72 69 6e 67 20 43 6f 6f 72 64 69 6e     Entering Coordin
     c1e:	61 74 65 20 4d 6f 64 65 2e 00                       ate Mode..

00000c28 <_ZZN9task_user22print_config_mode_menuEvE3__c_4>:
     c28:	50 72 65 73 73 20 45 20 74 6f 20 72 65 74 75 72     Press E to retur
     c38:	6e 20 74 6f 20 74 68 65 20 6d 61 69 6e 20 6d 65     n to the main me
     c48:	6e 75 2e 00                                         nu..

00000c4c <_ZZN9task_user22print_config_mode_menuEvE3__c_3>:
     c4c:	50 72 65 73 73 20 52 20 74 6f 20 72 65 73 65 74     Press R to reset
     c5c:	20 74 68 65 20 64 65 76 69 63 65 2e 00               the device..

00000c69 <_ZZN9task_user22print_config_mode_menuEvE3__c_2>:
     c69:	50 72 65 73 73 20 5a 20 74 6f 20 72 65 74 75 72     Press Z to retur
     c79:	6e 20 74 68 65 20 64 65 76 69 63 65 20 74 6f 20     n the device to 
     c89:	74 68 65 20 6f 72 69 67 69 6e 2e 00                 the origin..

00000c95 <_ZZN9task_user22print_config_mode_menuEvE3__c_1>:
     c95:	50 72 65 73 73 20 53 20 74 6f 20 63 68 61 6e 67     Press S to chang
     ca5:	65 20 74 68 65 20 64 65 66 61 75 6c 74 20 73 65     e the default se
     cb5:	6e 73 6f 72 20 72 65 61 64 69 6e 67 20 64 65 6c     nsor reading del
     cc5:	61 79 20 74 69 6d 65 2e 00                          ay time..

00000cce <_ZZN9task_user22print_config_mode_menuEvE3__c_0>:
     cce:	50 72 65 73 73 20 55 20 74 6f 20 63 68 61 6e 67     Press U to chang
     cde:	65 20 74 68 65 20 64 65 66 61 75 6c 74 20 6d 6f     e the default mo
     cee:	74 6f 72 20 6d 69 63 72 6f 73 74 65 70 20 73 63     tor microstep sc
     cfe:	61 6c 65 72 2e 00                                   aler..

00000d04 <_ZZN9task_user22print_config_mode_menuEvE3__c>:
     d04:	45 6e 74 65 72 69 6e 67 20 43 6f 6e 66 69 67 75     Entering Configu
     d14:	72 61 74 69 6f 6e 20 4d 6f 64 65 2e 00              ration Mode..

00000d21 <_ZZN9task_user15print_main_menuEvE3__c_3>:
     d21:	50 72 65 73 73 20 52 20 74 6f 20 72 65 73 65 74     Press R to reset
     d31:	20 74 68 65 20 64 65 76 69 63 65 2e 00               the device..

00000d3e <_ZZN9task_user15print_main_menuEvE3__c_2>:
     d3e:	50 72 65 73 73 20 44 20 66 6f 72 20 44 69 72 65     Press D for Dire
     d4e:	63 74 20 4f 70 65 72 61 74 69 6f 6e 20 4d 6f 64     ct Operation Mod
     d5e:	65 2e 00                                            e..

00000d61 <_ZZN9task_user15print_main_menuEvE3__c_1>:
     d61:	50 72 65 73 73 20 43 20 66 6f 72 20 43 6f 6f 72     Press C for Coor
     d71:	64 69 6e 61 74 65 20 4d 6f 64 65 2e 00              dinate Mode..

00000d7e <_ZZN9task_user15print_main_menuEvE3__c_0>:
     d7e:	50 72 65 73 73 20 41 20 66 6f 72 20 43 6f 6e 66     Press A for Conf
     d8e:	69 67 75 72 61 74 69 6f 6e 20 4d 6f 64 65 2e 00     iguration Mode..

00000d9e <_ZZN9task_user15print_main_menuEvE3__c>:
     d9e:	57 65 6c 63 6f 6d 65 20 74 6f 20 74 68 65 20 55     Welcome to the U
     dae:	73 65 72 20 49 6e 74 65 72 66 61 63 65 20 6d 61     ser Interface ma
     dbe:	69 6e 20 6d 65 6e 75 20 6f 66 20 74 68 65 20 33     in menu of the 3
     dce:	44 20 48 65 61 74 20 46 6c 75 78 20 43 61 6c 69     D Heat Flux Cali
     dde:	62 72 61 74 6f 72 2e 00                             brator..

00000de6 <_ZZN8frt_task15emergency_resetEvE3__c_0>:
     de6:	52 65 73 65 74 74 69 6e 67 00                       Resetting.

00000df0 <_ZZN8frt_task15emergency_resetEvE3__c>:
     df0:	45 52 52 4f 52 20 69 6e 20 74 61 73 6b 20 00        ERROR in task .

00000dff <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     dff:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     e0f:	61 73 6b 20 00                                      ask .

00000e14 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     e14:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

00000e22 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     e22:	20 63 72 65 61 74 65 64 00                           created.

00000e2b <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     e2b:	54 61 73 6b 20 00                                   Task .

00000e31 <_ZZ15print_task_listP8emstreamE3__c_9>:
     e31:	09 09 00                                            ...

00000e34 <_ZZ15print_task_listP8emstreamE3__c_8>:
     e34:	2f 00                                               /.

00000e36 <_ZZ15print_task_listP8emstreamE3__c_7>:
     e36:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

00000e41 <_ZZ15print_task_listP8emstreamE3__c_6>:
     e41:	09 2d 2d 2d 2d 00                                   .----.

00000e47 <_ZZ15print_task_listP8emstreamE3__c_5>:
     e47:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

00000e53 <_ZZ15print_task_listP8emstreamE3__c_4>:
     e53:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

00000e64 <_ZZ15print_task_listP8emstreamE3__c_3>:
     e64:	09 52 75 6e 73 00                                   .Runs.

00000e6a <_ZZ15print_task_listP8emstreamE3__c_2>:
     e6a:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

00000e76 <_ZZ15print_task_listP8emstreamE3__c_1>:
     e76:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

00000e87 <_ZZ15print_task_listP8emstreamE3__c_0>:
     e87:	09 53 74 61 63 6b 00                                .Stack.

00000e8e <_ZZ15print_task_listP8emstreamE3__c>:
     e8e:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

00000e99 <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     e99:	09 00                                               ..

00000e9b <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     e9b:	09 00                                               ..

00000e9d <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     e9d:	2f 00                                               /.

00000e9f <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     e9f:	09 00                                               ..

00000ea1 <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     ea1:	09 00 00                                            ...

00000ea4 <_call_static_run_method>:
     ea4:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <_ZN8frt_task22_call_users_run_methodEPS_>

00000ea8 <__ctors_start>:
     ea8:	93 21       	and	r25, r3

00000eaa <__ctors_end>:
     eaa:	11 24       	eor	r1, r1
     eac:	1f be       	out	0x3f, r1	; 63
     eae:	cf ef       	ldi	r28, 0xFF	; 255
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	df e5       	ldi	r29, 0x5F	; 95
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	00 e0       	ldi	r16, 0x00	; 0
     eb8:	0c bf       	out	0x3c, r16	; 60

00000eba <__do_copy_data>:
     eba:	10 e2       	ldi	r17, 0x20	; 32
     ebc:	a0 e0       	ldi	r26, 0x00	; 0
     ebe:	b0 e2       	ldi	r27, 0x20	; 32
     ec0:	e0 ec       	ldi	r30, 0xC0	; 192
     ec2:	f3 e7       	ldi	r31, 0x73	; 115
     ec4:	00 e0       	ldi	r16, 0x00	; 0
     ec6:	0b bf       	out	0x3b, r16	; 59
     ec8:	02 c0       	rjmp	.+4      	; 0xece <__do_copy_data+0x14>
     eca:	07 90       	elpm	r0, Z+
     ecc:	0d 92       	st	X+, r0
     ece:	a6 3d       	cpi	r26, 0xD6	; 214
     ed0:	b1 07       	cpc	r27, r17
     ed2:	d9 f7       	brne	.-10     	; 0xeca <__do_copy_data+0x10>

00000ed4 <__do_clear_bss>:
     ed4:	21 e4       	ldi	r18, 0x41	; 65
     ed6:	a6 ed       	ldi	r26, 0xD6	; 214
     ed8:	b0 e2       	ldi	r27, 0x20	; 32
     eda:	01 c0       	rjmp	.+2      	; 0xede <.do_clear_bss_start>

00000edc <.do_clear_bss_loop>:
     edc:	1d 92       	st	X+, r1

00000ede <.do_clear_bss_start>:
     ede:	a5 3f       	cpi	r26, 0xF5	; 245
     ee0:	b2 07       	cpc	r27, r18
     ee2:	e1 f7       	brne	.-8      	; 0xedc <.do_clear_bss_loop>

00000ee4 <__do_global_ctors>:
     ee4:	17 e0       	ldi	r17, 0x07	; 7
     ee6:	c5 e5       	ldi	r28, 0x55	; 85
     ee8:	d7 e0       	ldi	r29, 0x07	; 7
     eea:	00 e0       	ldi	r16, 0x00	; 0
     eec:	06 c0       	rjmp	.+12     	; 0xefa <__do_global_ctors+0x16>
     eee:	21 97       	sbiw	r28, 0x01	; 1
     ef0:	01 09       	sbc	r16, r1
     ef2:	80 2f       	mov	r24, r16
     ef4:	fe 01       	movw	r30, r28
     ef6:	0e 94 49 38 	call	0x7092	; 0x7092 <__tablejump2__>
     efa:	c4 35       	cpi	r28, 0x54	; 84
     efc:	d1 07       	cpc	r29, r17
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	08 07       	cpc	r16, r24
     f02:	a9 f7       	brne	.-22     	; 0xeee <__do_global_ctors+0xa>
     f04:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <main>
     f08:	0c 94 de 39 	jmp	0x73bc	; 0x73bc <_exit>

00000f0c <__bad_interrupt>:
     f0c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000f10 <_ZN6DM542TC1EP11PORT_structhhjS1_P10TC0_structhh>:
/** This method allows the motor driver to operate in either direction
 */ 
void DM542T::free_motion(void)
{
  disable_CCW = false;  
  disable_CW = false;
     f10:	2f 92       	push	r2
     f12:	3f 92       	push	r3
     f14:	4f 92       	push	r4
     f16:	5f 92       	push	r5
     f18:	6f 92       	push	r6
     f1a:	7f 92       	push	r7
     f1c:	8f 92       	push	r8
     f1e:	9f 92       	push	r9
     f20:	af 92       	push	r10
     f22:	bf 92       	push	r11
     f24:	cf 92       	push	r12
     f26:	df 92       	push	r13
     f28:	ef 92       	push	r14
     f2a:	ff 92       	push	r15
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	3c 01       	movw	r6, r24
     f3a:	2b 01       	movw	r4, r22
     f3c:	94 2e       	mov	r9, r20
     f3e:	b2 2e       	mov	r11, r18
     f40:	18 01       	movw	r2, r16
     f42:	b7 01       	movw	r22, r14
     f44:	a6 01       	movw	r20, r12
     f46:	2a 2d       	mov	r18, r10
     f48:	08 2d       	mov	r16, r8
     f4a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN14InterruptTimerC1EP11PORT_structP10TC0_structhh>
     f4e:	b1 01       	movw	r22, r2
     f50:	c3 01       	movw	r24, r6
     f52:	4c 96       	adiw	r24, 0x1c	; 28
     f54:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN6Motion15VelocityControlC1Ej>
     f58:	f3 01       	movw	r30, r6
     f5a:	e8 5a       	subi	r30, 0xA8	; 168
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	40 82       	st	Z, r4
     f60:	51 82       	std	Z+1, r5	; 0x01
     f62:	34 96       	adiw	r30, 0x04	; 4
     f64:	90 82       	st	Z, r9
     f66:	31 96       	adiw	r30, 0x01	; 1
     f68:	b0 82       	st	Z, r11
     f6a:	7c 96       	adiw	r30, 0x1c	; 28
     f6c:	10 82       	st	Z, r1
     f6e:	11 82       	std	Z+1, r1	; 0x01
     f70:	12 82       	std	Z+2, r1	; 0x02
     f72:	13 82       	std	Z+3, r1	; 0x03
     f74:	34 96       	adiw	r30, 0x04	; 4
     f76:	10 82       	st	Z, r1
     f78:	11 82       	std	Z+1, r1	; 0x01
     f7a:	12 82       	std	Z+2, r1	; 0x02
     f7c:	13 82       	std	Z+3, r1	; 0x03
     f7e:	34 96       	adiw	r30, 0x04	; 4
     f80:	10 82       	st	Z, r1
     f82:	11 82       	std	Z+1, r1	; 0x01
     f84:	12 82       	std	Z+2, r1	; 0x02
     f86:	13 82       	std	Z+3, r1	; 0x03
     f88:	34 96       	adiw	r30, 0x04	; 4
     f8a:	10 82       	st	Z, r1
     f8c:	11 82       	std	Z+1, r1	; 0x01
     f8e:	12 82       	std	Z+2, r1	; 0x02
     f90:	13 82       	std	Z+3, r1	; 0x03
     f92:	34 96       	adiw	r30, 0x04	; 4
     f94:	10 82       	st	Z, r1
     f96:	11 82       	std	Z+1, r1	; 0x01
     f98:	12 82       	std	Z+2, r1	; 0x02
     f9a:	13 82       	std	Z+3, r1	; 0x03
     f9c:	f2 01       	movw	r30, r4
     f9e:	41 81       	ldd	r20, Z+1	; 0x01
     fa0:	49 29       	or	r20, r9
     fa2:	41 83       	std	Z+1, r20	; 0x01
     fa4:	21 81       	ldd	r18, Z+1	; 0x01
     fa6:	2b 29       	or	r18, r11
     fa8:	21 83       	std	Z+1, r18	; 0x01
     faa:	f3 01       	movw	r30, r6
     fac:	ef 58       	subi	r30, 0x8F	; 143
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	91 ee       	ldi	r25, 0xE1	; 225
     fb4:	a5 ef       	ldi	r26, 0xF5	; 245
     fb6:	b5 e0       	ldi	r27, 0x05	; 5
     fb8:	80 83       	st	Z, r24
     fba:	91 83       	std	Z+1, r25	; 0x01
     fbc:	a2 83       	std	Z+2, r26	; 0x02
     fbe:	b3 83       	std	Z+3, r27	; 0x03
     fc0:	34 96       	adiw	r30, 0x04	; 4
     fc2:	10 82       	st	Z, r1
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	df 90       	pop	r13
     fd2:	cf 90       	pop	r12
     fd4:	bf 90       	pop	r11
     fd6:	af 90       	pop	r10
     fd8:	9f 90       	pop	r9
     fda:	8f 90       	pop	r8
     fdc:	7f 90       	pop	r7
     fde:	6f 90       	pop	r6
     fe0:	5f 90       	pop	r5
     fe2:	4f 90       	pop	r4
     fe4:	3f 90       	pop	r3
     fe6:	2f 90       	pop	r2
     fe8:	08 95       	ret

00000fea <_ZN6DM542TC1EP11PORT_structhhjS1_P10TC1_structhh>:
     fea:	2f 92       	push	r2
     fec:	3f 92       	push	r3
     fee:	4f 92       	push	r4
     ff0:	5f 92       	push	r5
     ff2:	6f 92       	push	r6
     ff4:	7f 92       	push	r7
     ff6:	8f 92       	push	r8
     ff8:	9f 92       	push	r9
     ffa:	af 92       	push	r10
     ffc:	bf 92       	push	r11
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	3c 01       	movw	r6, r24
    1014:	2b 01       	movw	r4, r22
    1016:	94 2e       	mov	r9, r20
    1018:	b2 2e       	mov	r11, r18
    101a:	18 01       	movw	r2, r16
    101c:	b7 01       	movw	r22, r14
    101e:	a6 01       	movw	r20, r12
    1020:	2a 2d       	mov	r18, r10
    1022:	08 2d       	mov	r16, r8
    1024:	0e 94 09 0c 	call	0x1812	; 0x1812 <_ZN14InterruptTimerC1EP11PORT_structP10TC1_structhh>
    1028:	b1 01       	movw	r22, r2
    102a:	c3 01       	movw	r24, r6
    102c:	4c 96       	adiw	r24, 0x1c	; 28
    102e:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN6Motion15VelocityControlC1Ej>
    1032:	f3 01       	movw	r30, r6
    1034:	e8 5a       	subi	r30, 0xA8	; 168
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	40 82       	st	Z, r4
    103a:	51 82       	std	Z+1, r5	; 0x01
    103c:	34 96       	adiw	r30, 0x04	; 4
    103e:	90 82       	st	Z, r9
    1040:	31 96       	adiw	r30, 0x01	; 1
    1042:	b0 82       	st	Z, r11
    1044:	7c 96       	adiw	r30, 0x1c	; 28
    1046:	10 82       	st	Z, r1
    1048:	11 82       	std	Z+1, r1	; 0x01
    104a:	12 82       	std	Z+2, r1	; 0x02
    104c:	13 82       	std	Z+3, r1	; 0x03
    104e:	34 96       	adiw	r30, 0x04	; 4
    1050:	10 82       	st	Z, r1
    1052:	11 82       	std	Z+1, r1	; 0x01
    1054:	12 82       	std	Z+2, r1	; 0x02
    1056:	13 82       	std	Z+3, r1	; 0x03
    1058:	34 96       	adiw	r30, 0x04	; 4
    105a:	10 82       	st	Z, r1
    105c:	11 82       	std	Z+1, r1	; 0x01
    105e:	12 82       	std	Z+2, r1	; 0x02
    1060:	13 82       	std	Z+3, r1	; 0x03
    1062:	34 96       	adiw	r30, 0x04	; 4
    1064:	10 82       	st	Z, r1
    1066:	11 82       	std	Z+1, r1	; 0x01
    1068:	12 82       	std	Z+2, r1	; 0x02
    106a:	13 82       	std	Z+3, r1	; 0x03
    106c:	34 96       	adiw	r30, 0x04	; 4
    106e:	10 82       	st	Z, r1
    1070:	11 82       	std	Z+1, r1	; 0x01
    1072:	12 82       	std	Z+2, r1	; 0x02
    1074:	13 82       	std	Z+3, r1	; 0x03
    1076:	f2 01       	movw	r30, r4
    1078:	41 81       	ldd	r20, Z+1	; 0x01
    107a:	49 29       	or	r20, r9
    107c:	41 83       	std	Z+1, r20	; 0x01
    107e:	21 81       	ldd	r18, Z+1	; 0x01
    1080:	2b 29       	or	r18, r11
    1082:	21 83       	std	Z+1, r18	; 0x01
    1084:	f3 01       	movw	r30, r6
    1086:	ef 58       	subi	r30, 0x8F	; 143
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	91 ee       	ldi	r25, 0xE1	; 225
    108e:	a5 ef       	ldi	r26, 0xF5	; 245
    1090:	b5 e0       	ldi	r27, 0x05	; 5
    1092:	80 83       	st	Z, r24
    1094:	91 83       	std	Z+1, r25	; 0x01
    1096:	a2 83       	std	Z+2, r26	; 0x02
    1098:	b3 83       	std	Z+3, r27	; 0x03
    109a:	34 96       	adiw	r30, 0x04	; 4
    109c:	10 82       	st	Z, r1
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	cf 90       	pop	r12
    10ae:	bf 90       	pop	r11
    10b0:	af 90       	pop	r10
    10b2:	9f 90       	pop	r9
    10b4:	8f 90       	pop	r8
    10b6:	7f 90       	pop	r7
    10b8:	6f 90       	pop	r6
    10ba:	5f 90       	pop	r5
    10bc:	4f 90       	pop	r4
    10be:	3f 90       	pop	r3
    10c0:	2f 90       	pop	r2
    10c2:	08 95       	ret

000010c4 <_ZN6DM542T7motorOnEv>:
    10c4:	fc 01       	movw	r30, r24
    10c6:	ea 58       	subi	r30, 0x8A	; 138
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	20 81       	ld	r18, Z
    10cc:	21 11       	cpse	r18, r1
    10ce:	0f c0       	rjmp	.+30     	; 0x10ee <_ZN6DM542T7motorOnEv+0x2a>
    10d0:	7e 97       	sbiw	r30, 0x1e	; 30
    10d2:	01 90       	ld	r0, Z+
    10d4:	f0 81       	ld	r31, Z
    10d6:	e0 2d       	mov	r30, r0
    10d8:	dc 01       	movw	r26, r24
    10da:	a4 5a       	subi	r26, 0xA4	; 164
    10dc:	bf 4f       	sbci	r27, 0xFF	; 255
    10de:	2c 91       	ld	r18, X
    10e0:	26 83       	std	Z+6, r18	; 0x06
    10e2:	fc 01       	movw	r30, r24
    10e4:	eb 58       	subi	r30, 0x8B	; 139
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	21 e0       	ldi	r18, 0x01	; 1
    10ea:	20 83       	st	Z, r18
    10ec:	10 c0       	rjmp	.+32     	; 0x110e <_ZN6DM542T7motorOnEv+0x4a>
    10ee:	fc 01       	movw	r30, r24
    10f0:	e8 5a       	subi	r30, 0xA8	; 168
    10f2:	ff 4f       	sbci	r31, 0xFF	; 255
    10f4:	01 90       	ld	r0, Z+
    10f6:	f0 81       	ld	r31, Z
    10f8:	e0 2d       	mov	r30, r0
    10fa:	dc 01       	movw	r26, r24
    10fc:	a4 5a       	subi	r26, 0xA4	; 164
    10fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1100:	2c 91       	ld	r18, X
    1102:	26 83       	std	Z+6, r18	; 0x06
    1104:	fc 01       	movw	r30, r24
    1106:	eb 58       	subi	r30, 0x8B	; 139
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	21 e0       	ldi	r18, 0x01	; 1
    110c:	20 83       	st	Z, r18
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	08 95       	ret

00001112 <_ZN6DM542T7motorCWEv>:
    1112:	fc 01       	movw	r30, r24
    1114:	e8 5a       	subi	r30, 0xA8	; 168
    1116:	ff 4f       	sbci	r31, 0xFF	; 255
    1118:	01 90       	ld	r0, Z+
    111a:	f0 81       	ld	r31, Z
    111c:	e0 2d       	mov	r30, r0
    111e:	dc 01       	movw	r26, r24
    1120:	a3 5a       	subi	r26, 0xA3	; 163
    1122:	bf 4f       	sbci	r27, 0xFF	; 255
    1124:	2c 91       	ld	r18, X
    1126:	25 83       	std	Z+5, r18	; 0x05
    1128:	fc 01       	movw	r30, r24
    112a:	ea 58       	subi	r30, 0x8A	; 138
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	21 e0       	ldi	r18, 0x01	; 1
    1130:	20 83       	st	Z, r18
    1132:	08 95       	ret

00001134 <_ZN6DM542T8motorCCWEv>:
    1134:	fc 01       	movw	r30, r24
    1136:	e8 5a       	subi	r30, 0xA8	; 168
    1138:	ff 4f       	sbci	r31, 0xFF	; 255
    113a:	01 90       	ld	r0, Z+
    113c:	f0 81       	ld	r31, Z
    113e:	e0 2d       	mov	r30, r0
    1140:	dc 01       	movw	r26, r24
    1142:	a3 5a       	subi	r26, 0xA3	; 163
    1144:	bf 4f       	sbci	r27, 0xFF	; 255
    1146:	2c 91       	ld	r18, X
    1148:	26 83       	std	Z+6, r18	; 0x06
    114a:	fc 01       	movw	r30, r24
    114c:	ea 58       	subi	r30, 0x8A	; 138
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	10 82       	st	Z, r1
    1152:	08 95       	ret

00001154 <_ZN6DM542T8motorOffEv>:
    1154:	8b 58       	subi	r24, 0x8B	; 139
    1156:	9f 4f       	sbci	r25, 0xFF	; 255
    1158:	fc 01       	movw	r30, r24
    115a:	10 82       	st	Z, r1
    115c:	08 95       	ret

0000115e <_ZN6DM542T13get_directionEv>:
//-------------------------------------------------------------------------------------
/** This method returns the direction of the motor
 */ 
uint8_t DM542T::get_direction(void)
{
  return direction;
    115e:	8a 58       	subi	r24, 0x8A	; 138
    1160:	9f 4f       	sbci	r25, 0xFF	; 255
}
    1162:	fc 01       	movw	r30, r24
    1164:	80 81       	ld	r24, Z
    1166:	08 95       	ret

00001168 <_ZN6DM542T9take_stepEv>:
/** This method is meant to be called during an interrupt service routine in order to 
    set the PWM signal pin, thereby causing the motor to take a step.
 */ 
void DM542T::take_step ( )
{
  if ( enabled )
    1168:	fc 01       	movw	r30, r24
    116a:	eb 58       	subi	r30, 0x8B	; 139
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	20 81       	ld	r18, Z
    1170:	22 23       	and	r18, r18
    1172:	29 f0       	breq	.+10     	; 0x117e <_ZN6DM542T9take_stepEv+0x16>
    1174:	fc 01       	movw	r30, r24
  {
    thisInterruptTimer->high() ;
    1176:	82 8d       	ldd	r24, Z+26	; 0x1a
    1178:	93 8d       	ldd	r25, Z+27	; 0x1b
    117a:	0e 94 44 0c 	call	0x1888	; 0x1888 <_ZN14InterruptTimer4highEv>
    117e:	08 95       	ret

00001180 <_ZN6DM542T14set_signal_lowEv>:
/** This method is meant to be called during an interrupt service routine in order to 
    clear the PWM pin, thereby preparing the pin for the next rising edge.
 */
void DM542T::set_signal_low(void)
{
  thisInterruptTimer->low();
    1180:	fc 01       	movw	r30, r24
    1182:	82 8d       	ldd	r24, Z+26	; 0x1a
    1184:	93 8d       	ldd	r25, Z+27	; 0x1b
    1186:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN14InterruptTimer3lowEv>
    118a:	08 95       	ret

0000118c <_ZN6DM542T10get_statusEv>:
//-------------------------------------------------------------------------------------
/** This method returns the enable-status of the motor.
 */
bool DM542T::get_status(void)
{
  return enabled;
    118c:	8b 58       	subi	r24, 0x8B	; 139
    118e:	9f 4f       	sbci	r25, 0xFF	; 255
}
    1190:	fc 01       	movw	r30, r24
    1192:	80 81       	ld	r24, Z
    1194:	08 95       	ret

00001196 <_ZN12DeviceDriver11LimitSwitchC1EP11PORT_structhhhh>:


namespace DeviceDriver
{

  LimitSwitch::LimitSwitch(PORT_t* port, uint8_t input_bm, uint8_t EVENTCHnMUX, uint8_t PORT_INTnMASK, uint8_t EVSYS_CHMUX_PORTx_PINn_gc)
    1196:	ef 92       	push	r14
    1198:	0f 93       	push	r16
    : EventInterrupt ( port, input_bm, EVENTCHnMUX, PORT_INTnMASK, EVSYS_CHMUX_PORTx_PINn_gc )
    119a:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh>
  {

  }
    119e:	0f 91       	pop	r16
    11a0:	ef 90       	pop	r14
    11a2:	08 95       	ret

000011a4 <_ZN12DeviceDriver11LimitSwitch10get_statusEv>:

  bool LimitSwitch::get_status(void)
  {
    11a4:	fc 01       	movw	r30, r24
    if (port->IN & input_bm)
    11a6:	a0 81       	ld	r26, Z
    11a8:	b1 81       	ldd	r27, Z+1	; 0x01
    11aa:	18 96       	adiw	r26, 0x08	; 8
    11ac:	9c 91       	ld	r25, X
    11ae:	83 81       	ldd	r24, Z+3	; 0x03
    11b0:	89 23       	and	r24, r25
    11b2:	19 f0       	breq	.+6      	; 0x11ba <_ZN12DeviceDriver11LimitSwitch10get_statusEv+0x16>
    engaged = false;
  }

  void LimitSwitch::set_status(void)
  {
    engaged = true;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	87 83       	std	Z+7, r24	; 0x07
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <_ZN12DeviceDriver11LimitSwitch10get_statusEv+0x18>

  }

  void LimitSwitch::clr_status(void)
  {
    engaged = false;
    11ba:	17 82       	std	Z+7, r1	; 0x07
    {
      clr_status();
    }
    return engaged;

  }
    11bc:	87 81       	ldd	r24, Z+7	; 0x07
    11be:	08 95       	ret

000011c0 <_ZN5SBG01C1EP3ADCf>:
 */
int16_t SBG01::get_voltage_bits (void)
{
	reg_read();
	return read_word;
}
    11c0:	fc 01       	movw	r30, r24
    11c2:	60 83       	st	Z, r22
    11c4:	71 83       	std	Z+1, r23	; 0x01
    11c6:	26 8b       	std	Z+22, r18	; 0x16
    11c8:	37 8b       	std	Z+23, r19	; 0x17
    11ca:	40 8f       	std	Z+24, r20	; 0x18
    11cc:	51 8f       	std	Z+25, r21	; 0x19
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	a0 e0       	ldi	r26, 0x00	; 0
    11d4:	b2 e4       	ldi	r27, 0x42	; 66
    11d6:	82 8b       	std	Z+18, r24	; 0x12
    11d8:	93 8b       	std	Z+19, r25	; 0x13
    11da:	a4 8b       	std	Z+20, r26	; 0x14
    11dc:	b5 8b       	std	Z+21, r27	; 0x15
    11de:	08 95       	ret

000011e0 <_ZN5SBG018reg_readEv>:
    11e0:	bc 01       	movw	r22, r24
    11e2:	64 5f       	subi	r22, 0xF4	; 244
    11e4:	7f 4f       	sbci	r23, 0xFF	; 255
    11e6:	48 ee       	ldi	r20, 0xE8	; 232
    11e8:	53 e0       	ldi	r21, 0x03	; 3
    11ea:	fc 01       	movw	r30, r24
    11ec:	80 81       	ld	r24, Z
    11ee:	91 81       	ldd	r25, Z+1	; 0x01
    11f0:	0e 94 38 0a 	call	0x1470	; 0x1470 <_ZN3ADC4readEPij>
    11f4:	08 95       	ret

000011f6 <_ZN5SBG0111get_voltageEv>:
    11f6:	cf 92       	push	r12
    11f8:	df 92       	push	r13
    11fa:	ef 92       	push	r14
    11fc:	ff 92       	push	r15
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	ec 01       	movw	r28, r24
    1208:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <_ZN5SBG018reg_readEv>
    120c:	0c 85       	ldd	r16, Y+12	; 0x0c
    120e:	1d 85       	ldd	r17, Y+13	; 0x0d
    1210:	88 81       	ld	r24, Y
    1212:	99 81       	ldd	r25, Y+1	; 0x01
    1214:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN3ADC15get_voltage_refEv>
    1218:	6b 01       	movw	r12, r22
    121a:	7c 01       	movw	r14, r24
    121c:	b8 01       	movw	r22, r16
    121e:	11 0f       	add	r17, r17
    1220:	88 0b       	sbc	r24, r24
    1222:	99 0b       	sbc	r25, r25
    1224:	0e 94 0a 37 	call	0x6e14	; 0x6e14 <__floatsisf>
    1228:	a7 01       	movw	r20, r14
    122a:	96 01       	movw	r18, r12
    122c:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__mulsf3>
    1230:	6b 01       	movw	r12, r22
    1232:	7c 01       	movw	r14, r24
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e0       	ldi	r20, 0x00	; 0
    123a:	55 e4       	ldi	r21, 0x45	; 69
    123c:	6a 89       	ldd	r22, Y+18	; 0x12
    123e:	7b 89       	ldd	r23, Y+19	; 0x13
    1240:	8c 89       	ldd	r24, Y+20	; 0x14
    1242:	9d 89       	ldd	r25, Y+21	; 0x15
    1244:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__mulsf3>
    1248:	9b 01       	movw	r18, r22
    124a:	ac 01       	movw	r20, r24
    124c:	c7 01       	movw	r24, r14
    124e:	b6 01       	movw	r22, r12
    1250:	0e 94 67 36 	call	0x6cce	; 0x6cce <__divsf3>
    1254:	6a 83       	std	Y+2, r22	; 0x02
    1256:	7b 83       	std	Y+3, r23	; 0x03
    1258:	8c 83       	std	Y+4, r24	; 0x04
    125a:	9d 83       	std	Y+5, r25	; 0x05
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	ff 90       	pop	r15
    1266:	ef 90       	pop	r14
    1268:	df 90       	pop	r13
    126a:	cf 90       	pop	r12
    126c:	08 95       	ret

0000126e <_ZN5SBG0114get_voltage_mvEv>:

//-------------------------------------------------------------------------------------
/** This method returns the result of get_voltage after converting it to millivolts
 */
float SBG01::get_voltage_mv (void)
{
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	ec 01       	movw	r28, r24
	get_voltage();
    1274:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <_ZN5SBG0111get_voltageEv>
	voltage_mv = voltage * 1000;
	voltage_mv = voltage_mv * 1.99 + 7.9;
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	4a e7       	ldi	r20, 0x7A	; 122
    127e:	54 e4       	ldi	r21, 0x44	; 68
    1280:	6a 81       	ldd	r22, Y+2	; 0x02
    1282:	7b 81       	ldd	r23, Y+3	; 0x03
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	9d 81       	ldd	r25, Y+5	; 0x05
    1288:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__mulsf3>
    128c:	22 e5       	ldi	r18, 0x52	; 82
    128e:	38 eb       	ldi	r19, 0xB8	; 184
    1290:	4e ef       	ldi	r20, 0xFE	; 254
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__mulsf3>
    1298:	2d ec       	ldi	r18, 0xCD	; 205
    129a:	3c ec       	ldi	r19, 0xCC	; 204
    129c:	4c ef       	ldi	r20, 0xFC	; 252
    129e:	50 e4       	ldi	r21, 0x40	; 64
    12a0:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <__addsf3>
    12a4:	6e 83       	std	Y+6, r22	; 0x06
    12a6:	7f 83       	std	Y+7, r23	; 0x07
    12a8:	88 87       	std	Y+8, r24	; 0x08
    12aa:	99 87       	std	Y+9, r25	; 0x09
	return voltage_mv;
}
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	08 95       	ret

000012b2 <_ZN6Motion13MotionControlC1Ej>:
    {
      ++steps;
    }
    else
    {
      --steps;
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	ec 01       	movw	r28, r24
    12b8:	69 83       	std	Y+1, r22	; 0x01
    12ba:	7a 83       	std	Y+2, r23	; 0x02
    12bc:	1b 82       	std	Y+3, r1	; 0x03
    12be:	1c 82       	std	Y+4, r1	; 0x04
    12c0:	1d 82       	std	Y+5, r1	; 0x05
    12c2:	1e 82       	std	Y+6, r1	; 0x06
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 08 37 	call	0x6e10	; 0x6e10 <__floatunsisf>
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	46 e1       	ldi	r20, 0x16	; 22
    12d2:	54 e4       	ldi	r21, 0x44	; 68
    12d4:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__mulsf3>
    12d8:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <__fixunssfsi>
    12dc:	9b 01       	movw	r18, r22
    12de:	ac 01       	movw	r20, r24
    12e0:	68 87       	std	Y+8, r22	; 0x08
    12e2:	79 87       	std	Y+9, r23	; 0x09
    12e4:	8a 87       	std	Y+10, r24	; 0x0a
    12e6:	9b 87       	std	Y+11, r25	; 0x0b
    12e8:	61 e0       	ldi	r22, 0x01	; 1
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    12f4:	2c 87       	std	Y+12, r18	; 0x0c
    12f6:	3d 87       	std	Y+13, r19	; 0x0d
    12f8:	4e 87       	std	Y+14, r20	; 0x0e
    12fa:	5f 87       	std	Y+15, r21	; 0x0f
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	08 95       	ret

00001302 <_ZN6Motion13MotionControl13inchesToStepsEm>:
    1302:	9a 01       	movw	r18, r20
    1304:	ab 01       	movw	r20, r22
    1306:	fc 01       	movw	r30, r24
    1308:	60 85       	ldd	r22, Z+8	; 0x08
    130a:	71 85       	ldd	r23, Z+9	; 0x09
    130c:	82 85       	ldd	r24, Z+10	; 0x0a
    130e:	93 85       	ldd	r25, Z+11	; 0x0b
    1310:	0e 94 03 38 	call	0x7006	; 0x7006 <__mulsi3>
    1314:	08 95       	ret

00001316 <_ZN6Motion13MotionControl8getStepsEv>:
  //-------------------------------------------------------------------------------------
  /** This method returns the number of steps that the driver has taken relative to the origin.
   */
  int32_t MotionControl::getSteps(void)
  {
    return steps;
    1316:	fc 01       	movw	r30, r24
    1318:	63 81       	ldd	r22, Z+3	; 0x03
    131a:	74 81       	ldd	r23, Z+4	; 0x04
    131c:	85 81       	ldd	r24, Z+5	; 0x05
    131e:	96 81       	ldd	r25, Z+6	; 0x06
  }
    1320:	08 95       	ret

00001322 <_ZN6Motion15VelocityControlC1Ej>:
   *  @param dir_bm A bit-mask indicating which pin on the port is used as the direction pin
   *  @param pwm_bm A bit-mask indicating which pin on the port is used as the pwm signal pin
   *  @param microstep_scaler A bit-mask indicating the factor that the default 200 steps
   *   of the motor is multiplied by
   */
  VelocityControl::VelocityControl ( uint16_t microstepScaler )
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	ec 01       	movw	r28, r24
    : MotionControl ( microstepScaler ), minOperatingFreqHz(500), rampAccel(1.5)
    1328:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN6Motion13MotionControlC1Ej>
    132c:	84 ef       	ldi	r24, 0xF4	; 244
    132e:	91 e0       	ldi	r25, 0x01	; 1
    1330:	a0 e0       	ldi	r26, 0x00	; 0
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	88 8b       	std	Y+16, r24	; 0x10
    1336:	99 8b       	std	Y+17, r25	; 0x11
    1338:	aa 8b       	std	Y+18, r26	; 0x12
    133a:	bb 8b       	std	Y+19, r27	; 0x13
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	a0 ec       	ldi	r26, 0xC0	; 192
    1342:	bf e3       	ldi	r27, 0x3F	; 63
    1344:	8c a3       	std	Y+36, r24	; 0x24
    1346:	9d a3       	std	Y+37, r25	; 0x25
    1348:	ae a3       	std	Y+38, r26	; 0x26
    134a:	bf a3       	std	Y+39, r27	; 0x27
  {
    rampFreqAccel = inchesToSteps ( rampAccel ) ;
    134c:	41 e0       	ldi	r20, 0x01	; 1
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	ce 01       	movw	r24, r28
    1356:	0e 94 81 09 	call	0x1302	; 0x1302 <_ZN6Motion13MotionControl13inchesToStepsEm>
    135a:	0e 94 08 37 	call	0x6e10	; 0x6e10 <__floatunsisf>
    135e:	68 a7       	std	Y+40, r22	; 0x28
    1360:	79 a7       	std	Y+41, r23	; 0x29
    1362:	8a a7       	std	Y+42, r24	; 0x2a
    1364:	9b a7       	std	Y+43, r25	; 0x2b
  }
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	08 95       	ret

0000136c <_ZN6Motion15VelocityControl7setRampEP14InterruptTimermm>:

  //-------------------------------------------------------------------------------------
  /** This method sets the controls for the acceleration of the motor.
   */
  void VelocityControl::setRamp ( InterruptTimer * timer, uint32_t initialFreqHz, uint32_t finalFreqHz )
  {
    136c:	ef 92       	push	r14
    136e:	ff 92       	push	r15
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	fc 01       	movw	r30, r24
    rampInitialFreqHz = initialFreqHz;
    1376:	20 8f       	std	Z+24, r18	; 0x18
    1378:	31 8f       	std	Z+25, r19	; 0x19
    137a:	42 8f       	std	Z+26, r20	; 0x1a
    137c:	53 8f       	std	Z+27, r21	; 0x1b
    rampFinalFreqHz = finalFreqHz;
    137e:	e4 8e       	std	Z+28, r14	; 0x1c
    1380:	f5 8e       	std	Z+29, r15	; 0x1d
    1382:	06 8f       	std	Z+30, r16	; 0x1e
    1384:	17 8f       	std	Z+31, r17	; 0x1f
    rampCurrentFreqHz = initialFreqHz ;
    1386:	20 a3       	std	Z+32, r18	; 0x20
    1388:	31 a3       	std	Z+33, r19	; 0x21
    138a:	42 a3       	std	Z+34, r20	; 0x22
    138c:	53 a3       	std	Z+35, r21	; 0x23
    handlerCallCount = 0;
    138e:	14 8a       	std	Z+20, r1	; 0x14
    1390:	15 8a       	std	Z+21, r1	; 0x15
    1392:	16 8a       	std	Z+22, r1	; 0x16
    1394:	17 8a       	std	Z+23, r1	; 0x17
    //timer->set_freq_hz(init_freq_hz); 
  }
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	08 95       	ret

000013a0 <_ZN6Motion15VelocityControl11rampHandlerEv>:

  //-------------------------------------------------------------------------------------
  /** This method controls the velocity ramp.
   */
  uint32_t VelocityControl::rampHandler ( )
  {
    13a0:	cf 92       	push	r12
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	ec 01       	movw	r28, r24
    if ( rampCurrentFreqHz < rampFinalFreqHz )
    13ae:	c8 a0       	ldd	r12, Y+32	; 0x20
    13b0:	d9 a0       	ldd	r13, Y+33	; 0x21
    13b2:	ea a0       	ldd	r14, Y+34	; 0x22
    13b4:	fb a0       	ldd	r15, Y+35	; 0x23
    13b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    13ba:	ae 8d       	ldd	r26, Y+30	; 0x1e
    13bc:	bf 8d       	ldd	r27, Y+31	; 0x1f
    13be:	c8 16       	cp	r12, r24
    13c0:	d9 06       	cpc	r13, r25
    13c2:	ea 06       	cpc	r14, r26
    13c4:	fb 06       	cpc	r15, r27
    13c6:	18 f5       	brcc	.+70     	; 0x140e <_ZN6Motion15VelocityControl11rampHandlerEv+0x6e>
    {
      handlerCallCount++ ;
    13c8:	8c 89       	ldd	r24, Y+20	; 0x14
    13ca:	9d 89       	ldd	r25, Y+21	; 0x15
    13cc:	ae 89       	ldd	r26, Y+22	; 0x16
    13ce:	bf 89       	ldd	r27, Y+23	; 0x17
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	a1 1d       	adc	r26, r1
    13d4:	b1 1d       	adc	r27, r1
    13d6:	8c 8b       	std	Y+20, r24	; 0x14
    13d8:	9d 8b       	std	Y+21, r25	; 0x15
    13da:	ae 8b       	std	Y+22, r26	; 0x16
    13dc:	bf 8b       	std	Y+23, r27	; 0x17
      uint32_t freqDelta = rampFreqAccel / rampHandlerScanFreq ;
      rampCurrentFreqHz = rampCurrentFreqHz + freqDelta ;
    13de:	6c a5       	ldd	r22, Y+44	; 0x2c
    13e0:	7d a5       	ldd	r23, Y+45	; 0x2d
    13e2:	8e a5       	ldd	r24, Y+46	; 0x2e
    13e4:	9f a5       	ldd	r25, Y+47	; 0x2f
    13e6:	0e 94 08 37 	call	0x6e10	; 0x6e10 <__floatunsisf>
    13ea:	9b 01       	movw	r18, r22
    13ec:	ac 01       	movw	r20, r24
    13ee:	68 a5       	ldd	r22, Y+40	; 0x28
    13f0:	79 a5       	ldd	r23, Y+41	; 0x29
    13f2:	8a a5       	ldd	r24, Y+42	; 0x2a
    13f4:	9b a5       	ldd	r25, Y+43	; 0x2b
    13f6:	0e 94 67 36 	call	0x6cce	; 0x6cce <__divsf3>
    13fa:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <__fixunssfsi>
    13fe:	c6 0e       	add	r12, r22
    1400:	d7 1e       	adc	r13, r23
    1402:	e8 1e       	adc	r14, r24
    1404:	f9 1e       	adc	r15, r25
    1406:	c8 a2       	std	Y+32, r12	; 0x20
    1408:	d9 a2       	std	Y+33, r13	; 0x21
    140a:	ea a2       	std	Y+34, r14	; 0x22
    140c:	fb a2       	std	Y+35, r15	; 0x23
    }

    return getRampCurrentFreqHz() ; 
    140e:	68 a1       	ldd	r22, Y+32	; 0x20
    1410:	79 a1       	ldd	r23, Y+33	; 0x21
    1412:	8a a1       	ldd	r24, Y+34	; 0x22
    1414:	9b a1       	ldd	r25, Y+35	; 0x23
  }
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	ff 90       	pop	r15
    141c:	ef 90       	pop	r14
    141e:	df 90       	pop	r13
    1420:	cf 90       	pop	r12
    1422:	08 95       	ret

00001424 <_ZN3ADCC1EP10ADC_structP13ADC_CH_struct>:
/** This constructor creates an ADC object.
 *  @param interface A pointer to an ADC struct used to interface with the hardware
 *  @param cs_port A pointer to an ADC Channel struct used to set registers
 *   specific to a given channel
 */
ADC::ADC(ADC_t* interface, ADC_CH_t* interface_ch)
    1424:	dc 01       	movw	r26, r24
    1426:	fb 01       	movw	r30, r22
:interface(interface), interface_ch(interface_ch)
    1428:	16 96       	adiw	r26, 0x06	; 6
    142a:	6d 93       	st	X+, r22
    142c:	7c 93       	st	X, r23
    142e:	17 97       	sbiw	r26, 0x07	; 7
    1430:	18 96       	adiw	r26, 0x08	; 8
    1432:	4d 93       	st	X+, r20
    1434:	5c 93       	st	X, r21
    1436:	19 97       	sbiw	r26, 0x09	; 9
{
	// Set the enable and flush pipeline bits
	interface->CTRLA = 1 << 0 | 1 << 1 | 1 << 2;
    1438:	87 e0       	ldi	r24, 0x07	; 7
    143a:	80 83       	st	Z, r24
	
	// Set the ADC for Conversion Mode, which allows signed readings. This is necessary
	// for differential input with gain mode.
	interface->CTRLB = ADC_IMPMODE_bm | ADC_CONMODE_bm;
    143c:	80 e9       	ldi	r24, 0x90	; 144
    143e:	81 83       	std	Z+1, r24	; 0x01
	
	// Set the single-ended input bit
	interface->CH0.CTRL = ADC_CH_GAIN_32X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
    1440:	87 e1       	ldi	r24, 0x17	; 23
    1442:	80 a3       	std	Z+32, r24	; 0x20

	// Set the reference voltage to be VCC/1.6
	interface->REFCTRL = ADC_REFSEL_INT1V_gc;
    1444:	12 82       	std	Z+2, r1	; 0x02
	
	// Declare which pins the ADC will be reading
	interface->CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ADC_CH_MUXNEG_PIN4_gc;
    1446:	11 a2       	std	Z+33, r1	; 0x21

	voltage_ref = 1;
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	60 e8       	ldi	r22, 0x80	; 128
    144e:	7f e3       	ldi	r23, 0x3F	; 63
    1450:	12 96       	adiw	r26, 0x02	; 2
    1452:	4d 93       	st	X+, r20
    1454:	5d 93       	st	X+, r21
    1456:	6d 93       	st	X+, r22
    1458:	7c 93       	st	X, r23
    145a:	15 97       	sbiw	r26, 0x05	; 5
    145c:	08 95       	ret

0000145e <_ZN3ADC10start_convEv>:
//-------------------------------------------------------------------------------------
/** This method initiates an ADC sample
 */
void ADC::start_conv (void)
{
	interface->CH0.CTRL |= ADC_CH_START_bm;
    145e:	dc 01       	movw	r26, r24
    1460:	16 96       	adiw	r26, 0x06	; 6
    1462:	ed 91       	ld	r30, X+
    1464:	fc 91       	ld	r31, X
    1466:	17 97       	sbiw	r26, 0x07	; 7
    1468:	80 a1       	ldd	r24, Z+32	; 0x20
    146a:	80 68       	ori	r24, 0x80	; 128
    146c:	80 a3       	std	Z+32, r24	; 0x20
    146e:	08 95       	ret

00001470 <_ZN3ADC4readEPij>:
 *  @param read_sample A pointer to a word that this ADC driver can store its result in
 *  @param timeout Amount of clock cycles before this function will exit without the
     ADC Interrupt flag being raised
 */
uint8_t ADC::read (int16_t* read_sample, uint16_t timeout)
{
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	1f 92       	push	r1
    147e:	1f 92       	push	r1
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	8c 01       	movw	r16, r24
    1486:	7b 01       	movw	r14, r22
	volatile uint16_t counter;
	counter = timeout;
    1488:	49 83       	std	Y+1, r20	; 0x01
    148a:	5a 83       	std	Y+2, r21	; 0x02
	start_conv();
    148c:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN3ADC10start_convEv>
	while ((--counter != 0) && ((interface->CH0.INTFLAGS & (1 << 0)) != (1 << 0))){ }
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	9a 81       	ldd	r25, Y+2	; 0x02
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	9a 83       	std	Y+2, r25	; 0x02
    149a:	89 2b       	or	r24, r25
    149c:	b9 f0       	breq	.+46     	; 0x14cc <_ZN3ADC4readEPij+0x5c>
    149e:	d8 01       	movw	r26, r16
    14a0:	16 96       	adiw	r26, 0x06	; 6
    14a2:	ed 91       	ld	r30, X+
    14a4:	fc 91       	ld	r31, X
    14a6:	17 97       	sbiw	r26, 0x07	; 7
    14a8:	83 a1       	ldd	r24, Z+35	; 0x23
    14aa:	80 ff       	sbrs	r24, 0
    14ac:	f1 cf       	rjmp	.-30     	; 0x1490 <_ZN3ADC4readEPij+0x20>
    14ae:	0e c0       	rjmp	.+28     	; 0x14cc <_ZN3ADC4readEPij+0x5c>
	if(counter == 0)
	{
		return 0;
	}
		
	int16_t reg_value = interface->CH0.RES;
    14b0:	d8 01       	movw	r26, r16
    14b2:	16 96       	adiw	r26, 0x06	; 6
    14b4:	ed 91       	ld	r30, X+
    14b6:	fc 91       	ld	r31, X
    14b8:	17 97       	sbiw	r26, 0x07	; 7
    14ba:	84 a1       	ldd	r24, Z+36	; 0x24
    14bc:	95 a1       	ldd	r25, Z+37	; 0x25
	*read_sample = reg_value;
    14be:	f7 01       	movw	r30, r14
    14c0:	80 83       	st	Z, r24
    14c2:	91 83       	std	Z+1, r25	; 0x01
	return 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	07 c0       	rjmp	.+14     	; 0x14d6 <_ZN3ADC4readEPij+0x66>
	counter = timeout;
	start_conv();
	while ((--counter != 0) && ((interface->CH0.INTFLAGS & (1 << 0)) != (1 << 0))){ }
	if(counter == 0)
	{
		return 0;
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	05 c0       	rjmp	.+10     	; 0x14d6 <_ZN3ADC4readEPij+0x66>
{
	volatile uint16_t counter;
	counter = timeout;
	start_conv();
	while ((--counter != 0) && ((interface->CH0.INTFLAGS & (1 << 0)) != (1 << 0))){ }
	if(counter == 0)
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	9a 81       	ldd	r25, Y+2	; 0x02
    14d0:	89 2b       	or	r24, r25
    14d2:	71 f7       	brne	.-36     	; 0x14b0 <_ZN3ADC4readEPij+0x40>
    14d4:	f9 cf       	rjmp	.-14     	; 0x14c8 <_ZN3ADC4readEPij+0x58>
	}
		
	int16_t reg_value = interface->CH0.RES;
	*read_sample = reg_value;
	return 1;
}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	1f 91       	pop	r17
    14e0:	0f 91       	pop	r16
    14e2:	ff 90       	pop	r15
    14e4:	ef 90       	pop	r14
    14e6:	08 95       	ret

000014e8 <_ZN3ADC15get_voltage_refEv>:
//-------------------------------------------------------------------------------------
/** This method returns the voltage reference member data
 */
float ADC::get_voltage_ref (void)
{
	return voltage_ref;
    14e8:	fc 01       	movw	r30, r24
    14ea:	62 81       	ldd	r22, Z+2	; 0x02
    14ec:	73 81       	ldd	r23, Z+3	; 0x03
    14ee:	84 81       	ldd	r24, Z+4	; 0x04
    14f0:	95 81       	ldd	r25, Z+5	; 0x05
}
    14f2:	08 95       	ret

000014f4 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh>:
#include "EventInterrupt.h"

namespace PeripheralDriver
{

  EventInterrupt::EventInterrupt(PORT_t* port, uint8_t input_bm, uint8_t EVENTCHnMUX, uint8_t INTnMASK, uint8_t EVSYS_CHMUX_PORTx_PINn_gc)
    14f4:	ef 92       	push	r14
    14f6:	0f 93       	push	r16
    14f8:	dc 01       	movw	r26, r24
    14fa:	fb 01       	movw	r30, r22
  :port(port), input_bm(input_bm), EVENTCHnMUX(EVENTCHnMUX), INTnMASK(INTnMASK), EVSYS_CHMUX_PORTx_PINn_gc(EVSYS_CHMUX_PORTx_PINn_gc)
    14fc:	6d 93       	st	X+, r22
    14fe:	7c 93       	st	X, r23
    1500:	11 97       	sbiw	r26, 0x01	; 1
    1502:	13 96       	adiw	r26, 0x03	; 3
    1504:	4c 93       	st	X, r20
    1506:	13 97       	sbiw	r26, 0x03	; 3
    1508:	14 96       	adiw	r26, 0x04	; 4
    150a:	2c 93       	st	X, r18
    150c:	14 97       	sbiw	r26, 0x04	; 4
    150e:	15 96       	adiw	r26, 0x05	; 5
    1510:	0c 93       	st	X, r16
    1512:	15 97       	sbiw	r26, 0x05	; 5
    1514:	16 96       	adiw	r26, 0x06	; 6
    1516:	ec 92       	st	X, r14
  {

    port->DIRCLR = input_bm;
    1518:	42 83       	std	Z+2, r20	; 0x02
    
    switch(input_bm)
    151a:	48 30       	cpi	r20, 0x08	; 8
    151c:	e1 f0       	breq	.+56     	; 0x1556 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x62>
    151e:	38 f4       	brcc	.+14     	; 0x152e <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x3a>
    1520:	42 30       	cpi	r20, 0x02	; 2
    1522:	99 f0       	breq	.+38     	; 0x154a <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x56>
    1524:	44 30       	cpi	r20, 0x04	; 4
    1526:	a1 f0       	breq	.+40     	; 0x1550 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x5c>
    1528:	41 30       	cpi	r20, 0x01	; 1
    152a:	19 f5       	brne	.+70     	; 0x1572 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x7e>
    152c:	0b c0       	rjmp	.+22     	; 0x1544 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x50>
    152e:	40 32       	cpi	r20, 0x20	; 32
    1530:	c1 f0       	breq	.+48     	; 0x1562 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x6e>
    1532:	18 f4       	brcc	.+6      	; 0x153a <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x46>
    1534:	40 31       	cpi	r20, 0x10	; 16
    1536:	91 f0       	breq	.+36     	; 0x155c <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x68>
    1538:	1c c0       	rjmp	.+56     	; 0x1572 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x7e>
    153a:	40 34       	cpi	r20, 0x40	; 64
    153c:	a9 f0       	breq	.+42     	; 0x1568 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x74>
    153e:	40 38       	cpi	r20, 0x80	; 128
    1540:	b1 f0       	breq	.+44     	; 0x156e <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x7a>
    1542:	17 c0       	rjmp	.+46     	; 0x1572 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x7e>
    {
      case(PIN0_bm):
      port->PIN0CTRL = PORT_ISC_RISING_gc;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	80 8b       	std	Z+16, r24	; 0x10
      break;
    1548:	14 c0       	rjmp	.+40     	; 0x1572 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x7e>
      
      case(PIN1_bm):
      port->PIN1CTRL = PORT_ISC_RISING_gc;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	81 8b       	std	Z+17, r24	; 0x11
      break;
    154e:	11 c0       	rjmp	.+34     	; 0x1572 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x7e>
      
      case(PIN2_bm):
      port->PIN2CTRL = PORT_ISC_RISING_gc;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	82 8b       	std	Z+18, r24	; 0x12
      break;
    1554:	0e c0       	rjmp	.+28     	; 0x1572 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x7e>
      
      case(PIN3_bm):
      port->PIN3CTRL = PORT_ISC_RISING_gc;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	83 8b       	std	Z+19, r24	; 0x13
      break;
    155a:	0b c0       	rjmp	.+22     	; 0x1572 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x7e>
      
      case(PIN4_bm):
      port->PIN4CTRL = PORT_ISC_RISING_gc;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	84 8b       	std	Z+20, r24	; 0x14
      break;
    1560:	08 c0       	rjmp	.+16     	; 0x1572 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x7e>
      
      case(PIN5_bm):
      port->PIN5CTRL = PORT_ISC_RISING_gc;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	85 8b       	std	Z+21, r24	; 0x15
      break;
    1566:	05 c0       	rjmp	.+10     	; 0x1572 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x7e>
      
      case(PIN6_bm):
      port->PIN6CTRL = PORT_ISC_RISING_gc;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	86 8b       	std	Z+22, r24	; 0x16
      break;
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x7e>
      
      case(PIN7_bm):
      port->PIN7CTRL = PORT_ISC_RISING_gc;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	87 8b       	std	Z+23, r24	; 0x17
      break;
    }
    
    if (EVENTCHnMUX == 0)
    1572:	21 11       	cpse	r18, r1
    1574:	06 c0       	rjmp	.+12     	; 0x1582 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x8e>
    {
      EVSYS.CH0MUX |= EVSYS_CHMUX_PORTx_PINn_gc;
    1576:	a0 e8       	ldi	r26, 0x80	; 128
    1578:	b1 e0       	ldi	r27, 0x01	; 1
    157a:	8c 91       	ld	r24, X
    157c:	e8 2a       	or	r14, r24
    157e:	ec 92       	st	X, r14
    1580:	36 c0       	rjmp	.+108    	; 0x15ee <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0xfa>
    }
    else if (EVENTCHnMUX == 1)
    1582:	21 30       	cpi	r18, 0x01	; 1
    1584:	49 f4       	brne	.+18     	; 0x1598 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0xa4>
    {
      EVSYS.CH1MUX |= EVSYS_CHMUX_PORTx_PINn_gc;
    1586:	a0 e8       	ldi	r26, 0x80	; 128
    1588:	b1 e0       	ldi	r27, 0x01	; 1
    158a:	11 96       	adiw	r26, 0x01	; 1
    158c:	8c 91       	ld	r24, X
    158e:	11 97       	sbiw	r26, 0x01	; 1
    1590:	e8 2a       	or	r14, r24
    1592:	11 96       	adiw	r26, 0x01	; 1
    1594:	ec 92       	st	X, r14
    1596:	2b c0       	rjmp	.+86     	; 0x15ee <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0xfa>
    }
    else if (EVENTCHnMUX == 2)
    1598:	22 30       	cpi	r18, 0x02	; 2
    159a:	49 f4       	brne	.+18     	; 0x15ae <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0xba>
    {
      EVSYS.CH2MUX |= EVSYS_CHMUX_PORTx_PINn_gc;
    159c:	a0 e8       	ldi	r26, 0x80	; 128
    159e:	b1 e0       	ldi	r27, 0x01	; 1
    15a0:	12 96       	adiw	r26, 0x02	; 2
    15a2:	8c 91       	ld	r24, X
    15a4:	12 97       	sbiw	r26, 0x02	; 2
    15a6:	e8 2a       	or	r14, r24
    15a8:	12 96       	adiw	r26, 0x02	; 2
    15aa:	ec 92       	st	X, r14
    15ac:	20 c0       	rjmp	.+64     	; 0x15ee <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0xfa>
    }
    else if (EVENTCHnMUX == 3)
    15ae:	23 30       	cpi	r18, 0x03	; 3
    15b0:	49 f4       	brne	.+18     	; 0x15c4 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0xd0>
    {
      EVSYS.CH3MUX |= EVSYS_CHMUX_PORTx_PINn_gc;
    15b2:	a0 e8       	ldi	r26, 0x80	; 128
    15b4:	b1 e0       	ldi	r27, 0x01	; 1
    15b6:	13 96       	adiw	r26, 0x03	; 3
    15b8:	8c 91       	ld	r24, X
    15ba:	13 97       	sbiw	r26, 0x03	; 3
    15bc:	e8 2a       	or	r14, r24
    15be:	13 96       	adiw	r26, 0x03	; 3
    15c0:	ec 92       	st	X, r14
    15c2:	15 c0       	rjmp	.+42     	; 0x15ee <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0xfa>
    }
    else if (EVENTCHnMUX == 4)
    15c4:	24 30       	cpi	r18, 0x04	; 4
    15c6:	49 f4       	brne	.+18     	; 0x15da <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0xe6>
    {
      EVSYS.CH4MUX |= EVSYS_CHMUX_PORTx_PINn_gc;
    15c8:	a0 e8       	ldi	r26, 0x80	; 128
    15ca:	b1 e0       	ldi	r27, 0x01	; 1
    15cc:	14 96       	adiw	r26, 0x04	; 4
    15ce:	8c 91       	ld	r24, X
    15d0:	14 97       	sbiw	r26, 0x04	; 4
    15d2:	e8 2a       	or	r14, r24
    15d4:	14 96       	adiw	r26, 0x04	; 4
    15d6:	ec 92       	st	X, r14
    15d8:	0a c0       	rjmp	.+20     	; 0x15ee <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0xfa>
    }
    else if (EVENTCHnMUX == 5)
    15da:	25 30       	cpi	r18, 0x05	; 5
    15dc:	41 f4       	brne	.+16     	; 0x15ee <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0xfa>
    {
      EVSYS.CH5MUX |= EVSYS_CHMUX_PORTx_PINn_gc;
    15de:	a0 e8       	ldi	r26, 0x80	; 128
    15e0:	b1 e0       	ldi	r27, 0x01	; 1
    15e2:	15 96       	adiw	r26, 0x05	; 5
    15e4:	8c 91       	ld	r24, X
    15e6:	15 97       	sbiw	r26, 0x05	; 5
    15e8:	e8 2a       	or	r14, r24
    15ea:	15 96       	adiw	r26, 0x05	; 5
    15ec:	ec 92       	st	X, r14
    }
    
    if(INTnMASK == 0)
    15ee:	01 11       	cpse	r16, r1
    15f0:	07 c0       	rjmp	.+14     	; 0x1600 <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x10c>
    {
      port->INT0MASK |= input_bm;
    15f2:	82 85       	ldd	r24, Z+10	; 0x0a
    15f4:	48 2b       	or	r20, r24
    15f6:	42 87       	std	Z+10, r20	; 0x0a
      port->INTCTRL |= PORT_INT0LVL1_bm | PORT_INT0LVL0_bm;
    15f8:	81 85       	ldd	r24, Z+9	; 0x09
    15fa:	83 60       	ori	r24, 0x03	; 3
    15fc:	81 87       	std	Z+9, r24	; 0x09
    15fe:	06 c0       	rjmp	.+12     	; 0x160c <_ZN16PeripheralDriver14EventInterruptC1EP11PORT_structhhhh+0x118>
    }
    else
    {
      port->INT1MASK |= input_bm;
    1600:	83 85       	ldd	r24, Z+11	; 0x0b
    1602:	48 2b       	or	r20, r24
    1604:	43 87       	std	Z+11, r20	; 0x0b
      port->INTCTRL |= PORT_INT1LVL1_bm | PORT_INT1LVL0_bm;
    1606:	81 85       	ldd	r24, Z+9	; 0x09
    1608:	8c 60       	ori	r24, 0x0C	; 12
    160a:	81 87       	std	Z+9, r24	; 0x09
    }
  }
    160c:	0f 91       	pop	r16
    160e:	ef 90       	pop	r14
    1610:	08 95       	ret

00001612 <_ZN14InterruptTimer12set_freq_khzEj>:
}

uint16_t InterruptTimer::get_freq_khz(void)
{
	return freq_khz;
}
    1612:	fc 01       	movw	r30, r24
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	9d e7       	ldi	r25, 0x7D	; 125
    1618:	0e 94 13 38 	call	0x7026	; 0x7026 <__udivmodhi4>
    161c:	64 87       	std	Z+12, r22	; 0x0c
    161e:	75 87       	std	Z+13, r23	; 0x0d
    1620:	a6 81       	ldd	r26, Z+6	; 0x06
    1622:	b7 81       	ldd	r27, Z+7	; 0x07
    1624:	a1 15       	cp	r26, r1
    1626:	88 e0       	ldi	r24, 0x08	; 8
    1628:	b8 07       	cpc	r27, r24
    162a:	41 f0       	breq	.+16     	; 0x163c <_ZN14InterruptTimer12set_freq_khzEj+0x2a>
    162c:	a1 15       	cp	r26, r1
    162e:	89 e0       	ldi	r24, 0x09	; 9
    1630:	b8 07       	cpc	r27, r24
    1632:	21 f0       	breq	.+8      	; 0x163c <_ZN14InterruptTimer12set_freq_khzEj+0x2a>
    1634:	a1 15       	cp	r26, r1
    1636:	8a e0       	ldi	r24, 0x0A	; 10
    1638:	b8 07       	cpc	r27, r24
    163a:	21 f4       	brne	.+8      	; 0x1644 <_ZN14InterruptTimer12set_freq_khzEj+0x32>
    163c:	96 96       	adiw	r26, 0x26	; 38
    163e:	6d 93       	st	X+, r22
    1640:	7c 93       	st	X, r23
    1642:	97 97       	sbiw	r26, 0x27	; 39
    1644:	a0 85       	ldd	r26, Z+8	; 0x08
    1646:	b1 85       	ldd	r27, Z+9	; 0x09
    1648:	a0 34       	cpi	r26, 0x40	; 64
    164a:	88 e0       	ldi	r24, 0x08	; 8
    164c:	b8 07       	cpc	r27, r24
    164e:	21 f0       	breq	.+8      	; 0x1658 <_ZN14InterruptTimer12set_freq_khzEj+0x46>
    1650:	a0 34       	cpi	r26, 0x40	; 64
    1652:	89 e0       	ldi	r24, 0x09	; 9
    1654:	b8 07       	cpc	r27, r24
    1656:	31 f4       	brne	.+12     	; 0x1664 <_ZN14InterruptTimer12set_freq_khzEj+0x52>
    1658:	84 85       	ldd	r24, Z+12	; 0x0c
    165a:	95 85       	ldd	r25, Z+13	; 0x0d
    165c:	96 96       	adiw	r26, 0x26	; 38
    165e:	8d 93       	st	X+, r24
    1660:	9c 93       	st	X, r25
    1662:	97 97       	sbiw	r26, 0x27	; 39
    1664:	08 95       	ret

00001666 <_ZN14InterruptTimer11set_freq_hzEm>:
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	ec 01       	movw	r28, r24
    166c:	9a 01       	movw	r18, r20
    166e:	ab 01       	movw	r20, r22
    1670:	2e 8b       	std	Y+22, r18	; 0x16
    1672:	3f 8b       	std	Y+23, r19	; 0x17
    1674:	48 8f       	std	Y+24, r20	; 0x18
    1676:	59 8f       	std	Y+25, r21	; 0x19
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	78 e4       	ldi	r23, 0x48	; 72
    167c:	88 ee       	ldi	r24, 0xE8	; 232
    167e:	91 e0       	ldi	r25, 0x01	; 1
    1680:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    1684:	2c 87       	std	Y+12, r18	; 0x0c
    1686:	3d 87       	std	Y+13, r19	; 0x0d
    1688:	ee 81       	ldd	r30, Y+6	; 0x06
    168a:	ff 81       	ldd	r31, Y+7	; 0x07
    168c:	e1 15       	cp	r30, r1
    168e:	88 e0       	ldi	r24, 0x08	; 8
    1690:	f8 07       	cpc	r31, r24
    1692:	41 f0       	breq	.+16     	; 0x16a4 <_ZN14InterruptTimer11set_freq_hzEm+0x3e>
    1694:	e1 15       	cp	r30, r1
    1696:	89 e0       	ldi	r24, 0x09	; 9
    1698:	f8 07       	cpc	r31, r24
    169a:	21 f0       	breq	.+8      	; 0x16a4 <_ZN14InterruptTimer11set_freq_hzEm+0x3e>
    169c:	e1 15       	cp	r30, r1
    169e:	8a e0       	ldi	r24, 0x0A	; 10
    16a0:	f8 07       	cpc	r31, r24
    16a2:	11 f4       	brne	.+4      	; 0x16a8 <_ZN14InterruptTimer11set_freq_hzEm+0x42>
    16a4:	26 a3       	std	Z+38, r18	; 0x26
    16a6:	37 a3       	std	Z+39, r19	; 0x27
    16a8:	e8 85       	ldd	r30, Y+8	; 0x08
    16aa:	f9 85       	ldd	r31, Y+9	; 0x09
    16ac:	e0 34       	cpi	r30, 0x40	; 64
    16ae:	88 e0       	ldi	r24, 0x08	; 8
    16b0:	f8 07       	cpc	r31, r24
    16b2:	21 f0       	breq	.+8      	; 0x16bc <_ZN14InterruptTimer11set_freq_hzEm+0x56>
    16b4:	e0 34       	cpi	r30, 0x40	; 64
    16b6:	89 e0       	ldi	r24, 0x09	; 9
    16b8:	f8 07       	cpc	r31, r24
    16ba:	21 f4       	brne	.+8      	; 0x16c4 <_ZN14InterruptTimer11set_freq_hzEm+0x5e>
    16bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    16be:	9d 85       	ldd	r25, Y+13	; 0x0d
    16c0:	86 a3       	std	Z+38, r24	; 0x26
    16c2:	97 a3       	std	Z+39, r25	; 0x27
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	08 95       	ret

000016ca <_ZN14InterruptTimer14set_duty_cycleEh>:
    16ca:	fc 01       	movw	r30, r24
    16cc:	84 85       	ldd	r24, Z+12	; 0x0c
    16ce:	95 85       	ldd	r25, Z+13	; 0x0d
    16d0:	68 9f       	mul	r22, r24
    16d2:	90 01       	movw	r18, r0
    16d4:	69 9f       	mul	r22, r25
    16d6:	30 0d       	add	r19, r0
    16d8:	11 24       	eor	r1, r1
    16da:	36 95       	lsr	r19
    16dc:	27 95       	ror	r18
    16de:	36 95       	lsr	r19
    16e0:	27 95       	ror	r18
    16e2:	ab e7       	ldi	r26, 0x7B	; 123
    16e4:	b4 e1       	ldi	r27, 0x14	; 20
    16e6:	0e 94 51 38 	call	0x70a2	; 0x70a2 <__umulhisi3>
    16ea:	96 95       	lsr	r25
    16ec:	87 95       	ror	r24
    16ee:	86 87       	std	Z+14, r24	; 0x0e
    16f0:	97 87       	std	Z+15, r25	; 0x0f
    16f2:	22 85       	ldd	r18, Z+10	; 0x0a
    16f4:	21 30       	cpi	r18, 0x01	; 1
    16f6:	31 f4       	brne	.+12     	; 0x1704 <_ZN14InterruptTimer14set_duty_cycleEh+0x3a>
    16f8:	a6 81       	ldd	r26, Z+6	; 0x06
    16fa:	b7 81       	ldd	r27, Z+7	; 0x07
    16fc:	98 96       	adiw	r26, 0x28	; 40
    16fe:	8d 93       	st	X+, r24
    1700:	9c 93       	st	X, r25
    1702:	99 97       	sbiw	r26, 0x29	; 41
    1704:	82 85       	ldd	r24, Z+10	; 0x0a
    1706:	82 30       	cpi	r24, 0x02	; 2
    1708:	41 f4       	brne	.+16     	; 0x171a <_ZN14InterruptTimer14set_duty_cycleEh+0x50>
    170a:	a6 81       	ldd	r26, Z+6	; 0x06
    170c:	b7 81       	ldd	r27, Z+7	; 0x07
    170e:	86 85       	ldd	r24, Z+14	; 0x0e
    1710:	97 85       	ldd	r25, Z+15	; 0x0f
    1712:	9a 96       	adiw	r26, 0x2a	; 42
    1714:	8d 93       	st	X+, r24
    1716:	9c 93       	st	X, r25
    1718:	9b 97       	sbiw	r26, 0x2b	; 43
    171a:	82 85       	ldd	r24, Z+10	; 0x0a
    171c:	84 30       	cpi	r24, 0x04	; 4
    171e:	41 f4       	brne	.+16     	; 0x1730 <_ZN14InterruptTimer14set_duty_cycleEh+0x66>
    1720:	a6 81       	ldd	r26, Z+6	; 0x06
    1722:	b7 81       	ldd	r27, Z+7	; 0x07
    1724:	86 85       	ldd	r24, Z+14	; 0x0e
    1726:	97 85       	ldd	r25, Z+15	; 0x0f
    1728:	9c 96       	adiw	r26, 0x2c	; 44
    172a:	8d 93       	st	X+, r24
    172c:	9c 93       	st	X, r25
    172e:	9d 97       	sbiw	r26, 0x2d	; 45
    1730:	82 85       	ldd	r24, Z+10	; 0x0a
    1732:	88 30       	cpi	r24, 0x08	; 8
    1734:	41 f4       	brne	.+16     	; 0x1746 <_ZN14InterruptTimer14set_duty_cycleEh+0x7c>
    1736:	a6 81       	ldd	r26, Z+6	; 0x06
    1738:	b7 81       	ldd	r27, Z+7	; 0x07
    173a:	86 85       	ldd	r24, Z+14	; 0x0e
    173c:	97 85       	ldd	r25, Z+15	; 0x0f
    173e:	9e 96       	adiw	r26, 0x2e	; 46
    1740:	8d 93       	st	X+, r24
    1742:	9c 93       	st	X, r25
    1744:	9f 97       	sbiw	r26, 0x2f	; 47
    1746:	82 85       	ldd	r24, Z+10	; 0x0a
    1748:	80 31       	cpi	r24, 0x10	; 16
    174a:	41 f4       	brne	.+16     	; 0x175c <_ZN14InterruptTimer14set_duty_cycleEh+0x92>
    174c:	a0 85       	ldd	r26, Z+8	; 0x08
    174e:	b1 85       	ldd	r27, Z+9	; 0x09
    1750:	86 85       	ldd	r24, Z+14	; 0x0e
    1752:	97 85       	ldd	r25, Z+15	; 0x0f
    1754:	98 96       	adiw	r26, 0x28	; 40
    1756:	8d 93       	st	X+, r24
    1758:	9c 93       	st	X, r25
    175a:	99 97       	sbiw	r26, 0x29	; 41
    175c:	82 85       	ldd	r24, Z+10	; 0x0a
    175e:	80 32       	cpi	r24, 0x20	; 32
    1760:	41 f4       	brne	.+16     	; 0x1772 <_ZN14InterruptTimer14set_duty_cycleEh+0xa8>
    1762:	a0 85       	ldd	r26, Z+8	; 0x08
    1764:	b1 85       	ldd	r27, Z+9	; 0x09
    1766:	86 85       	ldd	r24, Z+14	; 0x0e
    1768:	97 85       	ldd	r25, Z+15	; 0x0f
    176a:	9a 96       	adiw	r26, 0x2a	; 42
    176c:	8d 93       	st	X+, r24
    176e:	9c 93       	st	X, r25
    1770:	9b 97       	sbiw	r26, 0x2b	; 43
    1772:	08 95       	ret

00001774 <_ZN14InterruptTimerC1EP11PORT_structP10TC0_structhh>:
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	7c 01       	movw	r14, r24
    1782:	ea 01       	movw	r28, r20
    1784:	12 2f       	mov	r17, r18
    1786:	fc 01       	movw	r30, r24
    1788:	60 83       	st	Z, r22
    178a:	71 83       	std	Z+1, r23	; 0x01
    178c:	46 83       	std	Z+6, r20	; 0x06
    178e:	57 83       	std	Z+7, r21	; 0x07
    1790:	22 87       	std	Z+10, r18	; 0x0a
    1792:	03 87       	std	Z+11, r16	; 0x0b
    1794:	fb 01       	movw	r30, r22
    1796:	81 81       	ldd	r24, Z+1	; 0x01
    1798:	82 2b       	or	r24, r18
    179a:	81 83       	std	Z+1, r24	; 0x01
    179c:	88 81       	ld	r24, Y
    179e:	81 60       	ori	r24, 0x01	; 1
    17a0:	88 83       	st	Y, r24
    17a2:	41 e0       	ldi	r20, 0x01	; 1
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	c7 01       	movw	r24, r14
    17ac:	0e 94 33 0b 	call	0x1666	; 0x1666 <_ZN14InterruptTimer11set_freq_hzEm>
    17b0:	62 e3       	ldi	r22, 0x32	; 50
    17b2:	c7 01       	movw	r24, r14
    17b4:	0e 94 65 0b 	call	0x16ca	; 0x16ca <_ZN14InterruptTimer14set_duty_cycleEh>
    17b8:	11 30       	cpi	r17, 0x01	; 1
    17ba:	39 f4       	brne	.+14     	; 0x17ca <_ZN14InterruptTimerC1EP11PORT_structP10TC0_structhh+0x56>
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	80 61       	ori	r24, 0x10	; 16
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	8f 81       	ldd	r24, Y+7	; 0x07
    17c4:	83 60       	ori	r24, 0x03	; 3
    17c6:	8f 83       	std	Y+7, r24	; 0x07
    17c8:	1a c0       	rjmp	.+52     	; 0x17fe <_ZN14InterruptTimerC1EP11PORT_structP10TC0_structhh+0x8a>
    17ca:	12 30       	cpi	r17, 0x02	; 2
    17cc:	39 f4       	brne	.+14     	; 0x17dc <_ZN14InterruptTimerC1EP11PORT_structP10TC0_structhh+0x68>
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	80 62       	ori	r24, 0x20	; 32
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	8f 81       	ldd	r24, Y+7	; 0x07
    17d6:	8c 60       	ori	r24, 0x0C	; 12
    17d8:	8f 83       	std	Y+7, r24	; 0x07
    17da:	11 c0       	rjmp	.+34     	; 0x17fe <_ZN14InterruptTimerC1EP11PORT_structP10TC0_structhh+0x8a>
    17dc:	14 30       	cpi	r17, 0x04	; 4
    17de:	39 f4       	brne	.+14     	; 0x17ee <_ZN14InterruptTimerC1EP11PORT_structP10TC0_structhh+0x7a>
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	80 64       	ori	r24, 0x40	; 64
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	8f 81       	ldd	r24, Y+7	; 0x07
    17e8:	80 63       	ori	r24, 0x30	; 48
    17ea:	8f 83       	std	Y+7, r24	; 0x07
    17ec:	08 c0       	rjmp	.+16     	; 0x17fe <_ZN14InterruptTimerC1EP11PORT_structP10TC0_structhh+0x8a>
    17ee:	18 30       	cpi	r17, 0x08	; 8
    17f0:	31 f4       	brne	.+12     	; 0x17fe <_ZN14InterruptTimerC1EP11PORT_structP10TC0_structhh+0x8a>
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	80 68       	ori	r24, 0x80	; 128
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	8f 81       	ldd	r24, Y+7	; 0x07
    17fa:	80 6c       	ori	r24, 0xC0	; 192
    17fc:	8f 83       	std	Y+7, r24	; 0x07
    17fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1800:	83 60       	ori	r24, 0x03	; 3
    1802:	8e 83       	std	Y+6, r24	; 0x06
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	ff 90       	pop	r15
    180e:	ef 90       	pop	r14
    1810:	08 95       	ret

00001812 <_ZN14InterruptTimerC1EP11PORT_structP10TC1_structhh>:
    1812:	ef 92       	push	r14
    1814:	ff 92       	push	r15
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	7c 01       	movw	r14, r24
    1820:	ea 01       	movw	r28, r20
    1822:	12 2f       	mov	r17, r18
    1824:	fc 01       	movw	r30, r24
    1826:	60 83       	st	Z, r22
    1828:	71 83       	std	Z+1, r23	; 0x01
    182a:	40 87       	std	Z+8, r20	; 0x08
    182c:	51 87       	std	Z+9, r21	; 0x09
    182e:	22 87       	std	Z+10, r18	; 0x0a
    1830:	03 87       	std	Z+11, r16	; 0x0b
    1832:	fb 01       	movw	r30, r22
    1834:	81 81       	ldd	r24, Z+1	; 0x01
    1836:	82 2b       	or	r24, r18
    1838:	81 83       	std	Z+1, r24	; 0x01
    183a:	88 81       	ld	r24, Y
    183c:	81 60       	ori	r24, 0x01	; 1
    183e:	88 83       	st	Y, r24
    1840:	65 e0       	ldi	r22, 0x05	; 5
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	c7 01       	movw	r24, r14
    1846:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN14InterruptTimer12set_freq_khzEj>
    184a:	62 e3       	ldi	r22, 0x32	; 50
    184c:	c7 01       	movw	r24, r14
    184e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <_ZN14InterruptTimer14set_duty_cycleEh>
    1852:	10 31       	cpi	r17, 0x10	; 16
    1854:	39 f4       	brne	.+14     	; 0x1864 <_ZN14InterruptTimerC1EP11PORT_structP10TC1_structhh+0x52>
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	80 61       	ori	r24, 0x10	; 16
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	8f 81       	ldd	r24, Y+7	; 0x07
    185e:	83 60       	ori	r24, 0x03	; 3
    1860:	8f 83       	std	Y+7, r24	; 0x07
    1862:	08 c0       	rjmp	.+16     	; 0x1874 <_ZN14InterruptTimerC1EP11PORT_structP10TC1_structhh+0x62>
    1864:	10 32       	cpi	r17, 0x20	; 32
    1866:	31 f4       	brne	.+12     	; 0x1874 <_ZN14InterruptTimerC1EP11PORT_structP10TC1_structhh+0x62>
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	80 62       	ori	r24, 0x20	; 32
    186c:	89 83       	std	Y+1, r24	; 0x01
    186e:	8f 81       	ldd	r24, Y+7	; 0x07
    1870:	8c 60       	ori	r24, 0x0C	; 12
    1872:	8f 83       	std	Y+7, r24	; 0x07
    1874:	8e 81       	ldd	r24, Y+6	; 0x06
    1876:	83 60       	ori	r24, 0x03	; 3
    1878:	8e 83       	std	Y+6, r24	; 0x06
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	ff 90       	pop	r15
    1884:	ef 90       	pop	r14
    1886:	08 95       	ret

00001888 <_ZN14InterruptTimer4highEv>:

void InterruptTimer::high(void)
{
	timer_port->OUTSET = pin_bm;
    1888:	dc 01       	movw	r26, r24
    188a:	ed 91       	ld	r30, X+
    188c:	fc 91       	ld	r31, X
    188e:	11 97       	sbiw	r26, 0x01	; 1
    1890:	1a 96       	adiw	r26, 0x0a	; 10
    1892:	8c 91       	ld	r24, X
    1894:	85 83       	std	Z+5, r24	; 0x05
    1896:	08 95       	ret

00001898 <_ZN14InterruptTimer3lowEv>:
}

void InterruptTimer::low(void)
{
	timer_port->OUTCLR = pin_bm;
    1898:	dc 01       	movw	r26, r24
    189a:	ed 91       	ld	r30, X+
    189c:	fc 91       	ld	r31, X
    189e:	11 97       	sbiw	r26, 0x01	; 1
    18a0:	1a 96       	adiw	r26, 0x0a	; 10
    18a2:	8c 91       	ld	r24, X
    18a4:	86 83       	std	Z+6, r24	; 0x06
    18a6:	08 95       	ret

000018a8 <_ZN7task_mdC1EPKchjP8emstreamP11PORT_structhhjS5_P10TC0_structhhP9frt_queueImESA_P11shared_dataIhEPSB_IbEPN12DeviceDriver11LimitSwitchESI_>:
	md->take_step();
}

void task_md::set_signal_low(void)
{
	md->set_signal_low();
    18a8:	2f 92       	push	r2
    18aa:	3f 92       	push	r3
    18ac:	4f 92       	push	r4
    18ae:	5f 92       	push	r5
    18b0:	6f 92       	push	r6
    18b2:	7f 92       	push	r7
    18b4:	8f 92       	push	r8
    18b6:	9f 92       	push	r9
    18b8:	af 92       	push	r10
    18ba:	bf 92       	push	r11
    18bc:	cf 92       	push	r12
    18be:	df 92       	push	r13
    18c0:	ef 92       	push	r14
    18c2:	ff 92       	push	r15
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <_ZN7task_mdC1EPKchjP8emstreamP11PORT_structhhjS5_P10TC0_structhhP9frt_queueImESA_P11shared_dataIhEPSB_IbEPN12DeviceDriver11LimitSwitchESI_+0x26>
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	3c 01       	movw	r6, r24
    18d4:	2b 01       	movw	r4, r22
    18d6:	e9 82       	std	Y+1, r14	; 0x01
    18d8:	fa 82       	std	Y+2, r15	; 0x02
    18da:	cb 82       	std	Y+3, r12	; 0x03
    18dc:	ba 2c       	mov	r11, r10
    18de:	14 01       	movw	r2, r8
    18e0:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <_ZN8frt_taskC1EPKchjP8emstream>
    18e4:	8e 8c       	ldd	r8, Y+30	; 0x1e
    18e6:	ad 8c       	ldd	r10, Y+29	; 0x1d
    18e8:	cb 8c       	ldd	r12, Y+27	; 0x1b
    18ea:	dc 8c       	ldd	r13, Y+28	; 0x1c
    18ec:	e9 8c       	ldd	r14, Y+25	; 0x19
    18ee:	fa 8c       	ldd	r15, Y+26	; 0x1a
    18f0:	81 01       	movw	r16, r2
    18f2:	2b 2d       	mov	r18, r11
    18f4:	4b 81       	ldd	r20, Y+3	; 0x03
    18f6:	69 81       	ldd	r22, Y+1	; 0x01
    18f8:	7a 81       	ldd	r23, Y+2	; 0x02
    18fa:	c3 01       	movw	r24, r6
    18fc:	42 96       	adiw	r24, 0x12	; 18
    18fe:	0e 94 88 07 	call	0xf10	; 0xf10 <_ZN6DM542TC1EP11PORT_structhhjS1_P10TC0_structhh>
    1902:	8b e0       	ldi	r24, 0x0B	; 11
    1904:	90 e2       	ldi	r25, 0x20	; 32
    1906:	f3 01       	movw	r30, r6
    1908:	80 83       	st	Z, r24
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	ef 55       	subi	r30, 0x5F	; 95
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	8f a1       	ldd	r24, Y+39	; 0x27
    1912:	98 a5       	ldd	r25, Y+40	; 0x28
    1914:	80 83       	st	Z, r24
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	32 96       	adiw	r30, 0x02	; 2
    191a:	89 a5       	ldd	r24, Y+41	; 0x29
    191c:	9a a5       	ldd	r25, Y+42	; 0x2a
    191e:	80 83       	st	Z, r24
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	70 96       	adiw	r30, 0x10	; 16
    1924:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1926:	98 a1       	ldd	r25, Y+32	; 0x20
    1928:	80 83       	st	Z, r24
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	3c 96       	adiw	r30, 0x0c	; 12
    192e:	8d a1       	ldd	r24, Y+37	; 0x25
    1930:	9e a1       	ldd	r25, Y+38	; 0x26
    1932:	80 83       	st	Z, r24
    1934:	91 83       	std	Z+1, r25	; 0x01
    1936:	34 96       	adiw	r30, 0x04	; 4
    1938:	8b a1       	ldd	r24, Y+35	; 0x23
    193a:	9c a1       	ldd	r25, Y+36	; 0x24
    193c:	80 83       	st	Z, r24
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	38 96       	adiw	r30, 0x08	; 8
    1942:	89 a1       	ldd	r24, Y+33	; 0x21
    1944:	9a a1       	ldd	r25, Y+34	; 0x22
    1946:	80 83       	st	Z, r24
    1948:	91 83       	std	Z+1, r25	; 0x01
    194a:	38 96       	adiw	r30, 0x08	; 8
    194c:	40 82       	st	Z, r4
    194e:	51 82       	std	Z+1, r5	; 0x01
    1950:	b1 01       	movw	r22, r2
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 08 37 	call	0x6e10	; 0x6e10 <__floatunsisf>
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	46 e1       	ldi	r20, 0x16	; 22
    1960:	54 e4       	ldi	r21, 0x44	; 68
    1962:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__mulsf3>
    1966:	9b 01       	movw	r18, r22
    1968:	ac 01       	movw	r20, r24
    196a:	f3 01       	movw	r30, r6
    196c:	eb 54       	subi	r30, 0x4B	; 75
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	60 83       	st	Z, r22
    1972:	71 83       	std	Z+1, r23	; 0x01
    1974:	82 83       	std	Z+2, r24	; 0x02
    1976:	93 83       	std	Z+3, r25	; 0x03
    1978:	f9 eb       	ldi	r31, 0xB9	; 185
    197a:	6f 0e       	add	r6, r31
    197c:	71 1c       	adc	r7, r1
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	80 e8       	ldi	r24, 0x80	; 128
    1984:	9f e3       	ldi	r25, 0x3F	; 63
    1986:	0e 94 67 36 	call	0x6cce	; 0x6cce <__divsf3>
    198a:	f3 01       	movw	r30, r6
    198c:	60 83       	st	Z, r22
    198e:	71 83       	std	Z+1, r23	; 0x01
    1990:	82 83       	std	Z+2, r24	; 0x02
    1992:	93 83       	std	Z+3, r25	; 0x03
    1994:	23 96       	adiw	r28, 0x03	; 3
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	1f 91       	pop	r17
    19a0:	0f 91       	pop	r16
    19a2:	ff 90       	pop	r15
    19a4:	ef 90       	pop	r14
    19a6:	df 90       	pop	r13
    19a8:	cf 90       	pop	r12
    19aa:	bf 90       	pop	r11
    19ac:	af 90       	pop	r10
    19ae:	9f 90       	pop	r9
    19b0:	8f 90       	pop	r8
    19b2:	7f 90       	pop	r7
    19b4:	6f 90       	pop	r6
    19b6:	5f 90       	pop	r5
    19b8:	4f 90       	pop	r4
    19ba:	3f 90       	pop	r3
    19bc:	2f 90       	pop	r2
    19be:	08 95       	ret

000019c0 <_ZN7task_mdC1EPKchjP8emstreamP11PORT_structhhjS5_P10TC1_structhhP9frt_queueImESA_P11shared_dataIhEPSB_IbEPN12DeviceDriver11LimitSwitchESI_>:
    19c0:	2f 92       	push	r2
    19c2:	3f 92       	push	r3
    19c4:	4f 92       	push	r4
    19c6:	5f 92       	push	r5
    19c8:	6f 92       	push	r6
    19ca:	7f 92       	push	r7
    19cc:	8f 92       	push	r8
    19ce:	9f 92       	push	r9
    19d0:	af 92       	push	r10
    19d2:	bf 92       	push	r11
    19d4:	cf 92       	push	r12
    19d6:	df 92       	push	r13
    19d8:	ef 92       	push	r14
    19da:	ff 92       	push	r15
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <_ZN7task_mdC1EPKchjP8emstreamP11PORT_structhhjS5_P10TC1_structhhP9frt_queueImESA_P11shared_dataIhEPSB_IbEPN12DeviceDriver11LimitSwitchESI_+0x26>
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	3c 01       	movw	r6, r24
    19ec:	2b 01       	movw	r4, r22
    19ee:	e9 82       	std	Y+1, r14	; 0x01
    19f0:	fa 82       	std	Y+2, r15	; 0x02
    19f2:	cb 82       	std	Y+3, r12	; 0x03
    19f4:	ba 2c       	mov	r11, r10
    19f6:	14 01       	movw	r2, r8
    19f8:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <_ZN8frt_taskC1EPKchjP8emstream>
    19fc:	8e 8c       	ldd	r8, Y+30	; 0x1e
    19fe:	ad 8c       	ldd	r10, Y+29	; 0x1d
    1a00:	cb 8c       	ldd	r12, Y+27	; 0x1b
    1a02:	dc 8c       	ldd	r13, Y+28	; 0x1c
    1a04:	e9 8c       	ldd	r14, Y+25	; 0x19
    1a06:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1a08:	81 01       	movw	r16, r2
    1a0a:	2b 2d       	mov	r18, r11
    1a0c:	4b 81       	ldd	r20, Y+3	; 0x03
    1a0e:	69 81       	ldd	r22, Y+1	; 0x01
    1a10:	7a 81       	ldd	r23, Y+2	; 0x02
    1a12:	c3 01       	movw	r24, r6
    1a14:	42 96       	adiw	r24, 0x12	; 18
    1a16:	0e 94 f5 07 	call	0xfea	; 0xfea <_ZN6DM542TC1EP11PORT_structhhjS1_P10TC1_structhh>
    1a1a:	8b e0       	ldi	r24, 0x0B	; 11
    1a1c:	90 e2       	ldi	r25, 0x20	; 32
    1a1e:	f3 01       	movw	r30, r6
    1a20:	80 83       	st	Z, r24
    1a22:	91 83       	std	Z+1, r25	; 0x01
    1a24:	ef 55       	subi	r30, 0x5F	; 95
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	8f a1       	ldd	r24, Y+39	; 0x27
    1a2a:	98 a5       	ldd	r25, Y+40	; 0x28
    1a2c:	80 83       	st	Z, r24
    1a2e:	91 83       	std	Z+1, r25	; 0x01
    1a30:	32 96       	adiw	r30, 0x02	; 2
    1a32:	89 a5       	ldd	r24, Y+41	; 0x29
    1a34:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a36:	80 83       	st	Z, r24
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	70 96       	adiw	r30, 0x10	; 16
    1a3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a3e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a40:	80 83       	st	Z, r24
    1a42:	91 83       	std	Z+1, r25	; 0x01
    1a44:	3c 96       	adiw	r30, 0x0c	; 12
    1a46:	8d a1       	ldd	r24, Y+37	; 0x25
    1a48:	9e a1       	ldd	r25, Y+38	; 0x26
    1a4a:	80 83       	st	Z, r24
    1a4c:	91 83       	std	Z+1, r25	; 0x01
    1a4e:	34 96       	adiw	r30, 0x04	; 4
    1a50:	8b a1       	ldd	r24, Y+35	; 0x23
    1a52:	9c a1       	ldd	r25, Y+36	; 0x24
    1a54:	80 83       	st	Z, r24
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	38 96       	adiw	r30, 0x08	; 8
    1a5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a5e:	80 83       	st	Z, r24
    1a60:	91 83       	std	Z+1, r25	; 0x01
    1a62:	38 96       	adiw	r30, 0x08	; 8
    1a64:	40 82       	st	Z, r4
    1a66:	51 82       	std	Z+1, r5	; 0x01
    1a68:	23 96       	adiw	r28, 0x03	; 3
    1a6a:	cd bf       	out	0x3d, r28	; 61
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	1f 91       	pop	r17
    1a74:	0f 91       	pop	r16
    1a76:	ff 90       	pop	r15
    1a78:	ef 90       	pop	r14
    1a7a:	df 90       	pop	r13
    1a7c:	cf 90       	pop	r12
    1a7e:	bf 90       	pop	r11
    1a80:	af 90       	pop	r10
    1a82:	9f 90       	pop	r9
    1a84:	8f 90       	pop	r8
    1a86:	7f 90       	pop	r7
    1a88:	6f 90       	pop	r6
    1a8a:	5f 90       	pop	r5
    1a8c:	4f 90       	pop	r4
    1a8e:	3f 90       	pop	r3
    1a90:	2f 90       	pop	r2
    1a92:	08 95       	ret

00001a94 <_ZN7task_md7motorOnEv>:
		reset_device();
	}
}

bool task_md::motorOn(void)
{
    1a94:	0f 93       	push	r16
    1a96:	1f 93       	push	r17
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
    1a9c:	ec 01       	movw	r28, r24
	if (md->get_direction() == 0)
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	e1 56       	subi	r30, 0x61	; 97
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	80 81       	ld	r24, Z
    1aa6:	91 81       	ldd	r25, Z+1	; 0x01
    1aa8:	0e 94 af 08 	call	0x115e	; 0x115e <_ZN6DM542T13get_directionEv>
    1aac:	81 11       	cpse	r24, r1
    1aae:	28 c0       	rjmp	.+80     	; 0x1b00 <_ZN7task_md7motorOnEv+0x6c>
	{
		if (!(LS_max->get_status()))
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	ed 55       	subi	r30, 0x5D	; 93
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	80 81       	ld	r24, Z
    1ab8:	91 81       	ldd	r25, Z+1	; 0x01
    1aba:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_ZN12DeviceDriver11LimitSwitch10get_statusEv>
    1abe:	81 11       	cpse	r24, r1
    1ac0:	47 c0       	rjmp	.+142    	; 0x1b50 <_ZN7task_md7motorOnEv+0xbc>
		{
			md->motorOn();
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e1 56       	subi	r30, 0x61	; 97
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	80 81       	ld	r24, Z
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN6DM542T7motorOnEv>
			*p_serial << task_name << PMS ("F") << endl;
    1ad0:	0e 81       	ldd	r16, Y+6	; 0x06
    1ad2:	1f 81       	ldd	r17, Y+7	; 0x07
    1ad4:	cd 52       	subi	r28, 0x2D	; 45
    1ad6:	df 4f       	sbci	r29, 0xFF	; 255
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    1ad8:	68 81       	ld	r22, Y
    1ada:	79 81       	ldd	r23, Y+1	; 0x01
    1adc:	c8 01       	movw	r24, r16
    1ade:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    1ae2:	6a e0       	ldi	r22, 0x0A	; 10
    1ae4:	c8 01       	movw	r24, r16
    1ae6:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    1aea:	ec 01       	movw	r28, r24
    1aec:	68 e7       	ldi	r22, 0x78	; 120
    1aee:	76 e0       	ldi	r23, 0x06	; 6
    1af0:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    1af4:	66 e0       	ldi	r22, 0x06	; 6
    1af6:	ce 01       	movw	r24, r28
    1af8:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
			return true;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	2b c0       	rjmp	.+86     	; 0x1b56 <_ZN7task_md7motorOnEv+0xc2>
			return false;
		}
	}
	else
	{
		if (!(LS_min->get_status()))
    1b00:	fe 01       	movw	r30, r28
    1b02:	ef 55       	subi	r30, 0x5F	; 95
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	80 81       	ld	r24, Z
    1b08:	91 81       	ldd	r25, Z+1	; 0x01
    1b0a:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <_ZN12DeviceDriver11LimitSwitch10get_statusEv>
    1b0e:	81 11       	cpse	r24, r1
    1b10:	21 c0       	rjmp	.+66     	; 0x1b54 <_ZN7task_md7motorOnEv+0xc0>
		{
			md->motorOn();
    1b12:	fe 01       	movw	r30, r28
    1b14:	e1 56       	subi	r30, 0x61	; 97
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	80 81       	ld	r24, Z
    1b1a:	91 81       	ldd	r25, Z+1	; 0x01
    1b1c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN6DM542T7motorOnEv>
			*p_serial << task_name << PMS ("R") << endl;
    1b20:	0e 81       	ldd	r16, Y+6	; 0x06
    1b22:	1f 81       	ldd	r17, Y+7	; 0x07
    1b24:	cd 52       	subi	r28, 0x2D	; 45
    1b26:	df 4f       	sbci	r29, 0xFF	; 255
    1b28:	68 81       	ld	r22, Y
    1b2a:	79 81       	ldd	r23, Y+1	; 0x01
    1b2c:	c8 01       	movw	r24, r16
    1b2e:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    1b32:	6a e0       	ldi	r22, 0x0A	; 10
    1b34:	c8 01       	movw	r24, r16
    1b36:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    1b3a:	ec 01       	movw	r28, r24
    1b3c:	66 e7       	ldi	r22, 0x76	; 118
    1b3e:	76 e0       	ldi	r23, 0x06	; 6
    1b40:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    1b44:	66 e0       	ldi	r22, 0x06	; 6
    1b46:	ce 01       	movw	r24, r28
    1b48:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
			return true;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	03 c0       	rjmp	.+6      	; 0x1b56 <_ZN7task_md7motorOnEv+0xc2>
			*p_serial << task_name << PMS ("F") << endl;
			return true;
		}
		else
		{
			return false;
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	01 c0       	rjmp	.+2      	; 0x1b56 <_ZN7task_md7motorOnEv+0xc2>
			*p_serial << task_name << PMS ("R") << endl;
			return true;
		}
		else
		{
			return false;
    1b54:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	1f 91       	pop	r17
    1b5c:	0f 91       	pop	r16
    1b5e:	08 95       	ret

00001b60 <_ZN7task_md3runEv>:
/** This task interacts with the motor driver object in order to control the motors
 *  in ways specified by the user.
 */

void task_md::run (void)
{
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	62 97       	sbiw	r28, 0x12	; 18
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	9a 83       	std	Y+2, r25	; 0x02
	char char_in;                           // Character read from serial device
	time_stamp a_time;                      // Holds the time so it can be displayed
	portTickType previous_ticks;
	uint16_t delay_counter = 0;
    1b72:	61 2c       	mov	r6, r1
    1b74:	71 2c       	mov	r7, r1
				{
					md->motorOff();
					transition_to(8);
				}
				
				freq_hz = md->rampHandler();
    1b76:	6c 01       	movw	r12, r24
    1b78:	8f e9       	ldi	r24, 0x9F	; 159
    1b7a:	c8 0e       	add	r12, r24
    1b7c:	d1 1c       	adc	r13, r1
    1b7e:	a9 81       	ldd	r26, Y+1	; 0x01
    1b80:	ba 81       	ldd	r27, Y+2	; 0x02
    1b82:	a3 53       	subi	r26, 0x33	; 51
    1b84:	bf 4f       	sbci	r27, 0xFF	; 255
    1b86:	ad 83       	std	Y+5, r26	; 0x05
    1b88:	be 83       	std	Y+6, r27	; 0x06
					}
				}
				
				if (++delay_counter == 5)
				{
					*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    1b8a:	89 80       	ldd	r8, Y+1	; 0x01
    1b8c:	9a 80       	ldd	r9, Y+2	; 0x02
    1b8e:	b3 ed       	ldi	r27, 0xD3	; 211
    1b90:	8b 0e       	add	r8, r27
    1b92:	91 1c       	adc	r9, r1
						transition_to(5);
					}
				}
				else if(md->get_direction() == 1)
				{
					if(md->getSteps() <= step_destination)
    1b94:	29 80       	ldd	r2, Y+1	; 0x01
    1b96:	3a 80       	ldd	r3, Y+2	; 0x02
    1b98:	e6 ec       	ldi	r30, 0xC6	; 198
    1b9a:	2e 0e       	add	r2, r30
    1b9c:	31 1c       	adc	r3, r1
					{
						md->motorOff();
						*p_serial << task_name << PMS ("S") << endl;
						*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
						motor_complete->put(true);
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	81 54       	subi	r24, 0x41	; 65
    1ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba6:	8f 87       	std	Y+15, r24	; 0x0f
    1ba8:	98 8b       	std	Y+16, r25	; 0x10
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In State 6, the motor is calculating how many steps it must take to reach 
			// the desired node.
			case (6):
			    
				steps = md->getSteps();
    1baa:	a9 80       	ldd	r10, Y+1	; 0x01
    1bac:	ba 80       	ldd	r11, Y+2	; 0x02
    1bae:	99 ea       	ldi	r25, 0xA9	; 169
    1bb0:	a9 0e       	add	r10, r25
    1bb2:	b1 1c       	adc	r11, r1
				step_destination = locations->get();
    1bb4:	a9 81       	ldd	r26, Y+1	; 0x01
    1bb6:	ba 81       	ldd	r27, Y+2	; 0x02
    1bb8:	ad 54       	subi	r26, 0x4D	; 77
    1bba:	bf 4f       	sbci	r27, 0xFF	; 255
    1bbc:	af 83       	std	Y+7, r26	; 0x07
    1bbe:	b8 87       	std	Y+8, r27	; 0x08
					motorOn();
				}
				else if (steps > step_destination)
				{
					md->motorCW();
					md->setRamp( md->thisInterruptTimer, 500, max_vel );
    1bc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc4:	e1 53       	subi	r30, 0x31	; 49
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	e9 87       	std	Y+9, r30	; 0x09
    1bca:	fa 87       	std	Y+10, r31	; 0x0a
			    
				steps = md->getSteps();
				step_destination = locations->get();
				if (drawing_mode.get())
				{
					max_vel = max_velocity->get();
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	85 53       	subi	r24, 0x35	; 53
    1bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd4:	8d 87       	std	Y+13, r24	; 0x0d
    1bd6:	9e 87       	std	Y+14, r25	; 0x0e
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
			temporary_copy = the_data;
    1bd8:	49 80       	ldd	r4, Y+1	; 0x01
    1bda:	5a 80       	ldd	r5, Y+2	; 0x02
    1bdc:	93 ec       	ldi	r25, 0xC3	; 195
    1bde:	49 0e       	add	r4, r25
    1be0:	51 1c       	adc	r5, r1
				}
				else if (motor_operator->get() == 2)
				{
					md->motorCW();
					md->setRamp( md->thisInterruptTimer, 500, gen_max_v.get() );
					motor_on = motorOn();
    1be2:	a9 81       	ldd	r26, Y+1	; 0x01
    1be4:	ba 81       	ldd	r27, Y+2	; 0x02
    1be6:	a6 53       	subi	r26, 0x36	; 54
    1be8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bea:	ab 87       	std	Y+11, r26	; 0x0b
    1bec:	bc 87       	std	Y+12, r27	; 0x0c
    1bee:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf2:	e9 8b       	std	Y+17, r30	; 0x11
    1bf4:	fa 8b       	std	Y+18, r31	; 0x12
			//*p_serial << task_name << state << endl;
			//state_delay_counter = 0;
		//}
		
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
    1bf6:	a9 89       	ldd	r26, Y+17	; 0x11
    1bf8:	ba 89       	ldd	r27, Y+18	; 0x12
    1bfa:	1c 96       	adiw	r26, 0x0c	; 12
    1bfc:	8c 91       	ld	r24, X
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	89 30       	cpi	r24, 0x09	; 9
    1c02:	91 05       	cpc	r25, r1
    1c04:	08 f0       	brcs	.+2      	; 0x1c08 <_ZN7task_md3runEv+0xa8>
    1c06:	db c3       	rjmp	.+1974   	; 0x23be <_ZN7task_md3runEv+0x85e>
    1c08:	fc 01       	movw	r30, r24
    1c0a:	88 27       	eor	r24, r24
    1c0c:	e2 50       	subi	r30, 0x02	; 2
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	8f 4f       	sbci	r24, 0xFF	; 255
    1c12:	0c 94 49 38 	jmp	0x7092	; 0x7092 <__tablejump2__>
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 0, the motor task is powered CW back to the origin location in order
			// to get a starting location for all subsequent steps.
			case (0):
			
				motor_operator->put(2);
    1c16:	d2 01       	movw	r26, r4
    1c18:	ed 91       	ld	r30, X+
    1c1a:	fc 91       	ld	r31, X
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	0f 92       	push	r0
			the_data = new_data;
    1c22:	82 e0       	ldi	r24, 0x02	; 2
    1c24:	80 83       	st	Z, r24
			portEXIT_CRITICAL ();
    1c26:	0f 90       	pop	r0
    1c28:	0f be       	out	0x3f, r0	; 63
				transition_to(3);
    1c2a:	63 e0       	ldi	r22, 0x03	; 3
    1c2c:	89 89       	ldd	r24, Y+17	; 0x11
    1c2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c30:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
			
			    break;
    1c34:	c4 c3       	rjmp	.+1928   	; 0x23be <_ZN7task_md3runEv+0x85e>
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 1, the motor is returning to the origin and waiting for the limit
			// switch to power it off.
			case (1):
				
				md->rampHandler();
    1c36:	f6 01       	movw	r30, r12
    1c38:	80 81       	ld	r24, Z
    1c3a:	91 81       	ldd	r25, Z+1	; 0x01
    1c3c:	4c 96       	adiw	r24, 0x1c	; 28
    1c3e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_ZN6Motion15VelocityControl11rampHandlerEv>
				
                if (md->get_status())
    1c42:	d6 01       	movw	r26, r12
    1c44:	8d 91       	ld	r24, X+
    1c46:	9c 91       	ld	r25, X
    1c48:	0e 94 c6 08 	call	0x118c	; 0x118c <_ZN6DM542T10get_statusEv>
    1c4c:	88 23       	and	r24, r24
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <_ZN7task_md3runEv+0xf2>
    1c50:	b6 c3       	rjmp	.+1900   	; 0x23be <_ZN7task_md3runEv+0x85e>
				{
					motor_operator->put(0);
    1c52:	d2 01       	movw	r26, r4
    1c54:	ed 91       	ld	r30, X+
    1c56:	fc 91       	ld	r31, X
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	0f 92       	push	r0
			the_data = new_data;
    1c5e:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    1c60:	0f 90       	pop	r0
    1c62:	0f be       	out	0x3f, r0	; 63
					*p_serial << PMS ("S2") << endl;
    1c64:	6a e0       	ldi	r22, 0x0A	; 10
    1c66:	e9 89       	ldd	r30, Y+17	; 0x11
    1c68:	fa 89       	ldd	r31, Y+18	; 0x12
    1c6a:	86 81       	ldd	r24, Z+6	; 0x06
    1c6c:	97 81       	ldd	r25, Z+7	; 0x07
    1c6e:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    1c72:	8c 01       	movw	r16, r24
    1c74:	6f e9       	ldi	r22, 0x9F	; 159
    1c76:	76 e0       	ldi	r23, 0x06	; 6
    1c78:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    1c7c:	66 e0       	ldi	r22, 0x06	; 6
    1c7e:	c8 01       	movw	r24, r16
    1c80:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
					transition_to(2);
    1c84:	62 e0       	ldi	r22, 0x02	; 2
    1c86:	89 89       	ldd	r24, Y+17	; 0x11
    1c88:	9a 89       	ldd	r25, Y+18	; 0x12
    1c8a:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    1c8e:	97 c3       	rjmp	.+1838   	; 0x23be <_ZN7task_md3runEv+0x85e>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1c96:	0f 90       	pop	r0
    1c98:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 2, the motor is idle - waiting for a command to switch it into 
			// a certain mode.
			case (2):
				//*p_serial << task_name << PMS ("S2") << endl;
				if(direct_mode.get())
    1c9a:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <direct_mode>
    1c9e:	88 23       	and	r24, r24
    1ca0:	31 f0       	breq	.+12     	; 0x1cae <_ZN7task_md3runEv+0x14e>
				{
					transition_to(3);
    1ca2:	63 e0       	ldi	r22, 0x03	; 3
    1ca4:	89 89       	ldd	r24, Y+17	; 0x11
    1ca6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ca8:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    1cac:	88 c3       	rjmp	.+1808   	; 0x23be <_ZN7task_md3runEv+0x85e>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1cb4:	0f 90       	pop	r0
    1cb6:	0f be       	out	0x3f, r0	; 63
				}
				else if(coordinate_mode.get())
    1cb8:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    1cbc:	88 23       	and	r24, r24
    1cbe:	31 f0       	breq	.+12     	; 0x1ccc <_ZN7task_md3runEv+0x16c>
				{
					transition_to(5);
    1cc0:	65 e0       	ldi	r22, 0x05	; 5
    1cc2:	89 89       	ldd	r24, Y+17	; 0x11
    1cc4:	9a 89       	ldd	r25, Y+18	; 0x12
    1cc6:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    1cca:	79 c3       	rjmp	.+1778   	; 0x23be <_ZN7task_md3runEv+0x85e>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1cd2:	0f 90       	pop	r0
    1cd4:	0f be       	out	0x3f, r0	; 63
				}
				else if(incremental_mode.get())
    1cd6:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <incremental_mode>
    1cda:	88 23       	and	r24, r24
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <_ZN7task_md3runEv+0x180>
    1cde:	6f c3       	rjmp	.+1758   	; 0x23be <_ZN7task_md3runEv+0x85e>
				{
					transition_to(5);
    1ce0:	65 e0       	ldi	r22, 0x05	; 5
    1ce2:	89 89       	ldd	r24, Y+17	; 0x11
    1ce4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce6:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    1cea:	69 c3       	rjmp	.+1746   	; 0x23be <_ZN7task_md3runEv+0x85e>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	0f 92       	push	r0
			temporary_copy = the_data;
    1cf2:	d2 01       	movw	r26, r4
    1cf4:	ed 91       	ld	r30, X+
    1cf6:	fc 91       	ld	r31, X
    1cf8:	80 81       	ld	r24, Z
			portEXIT_CRITICAL ();
    1cfa:	0f 90       	pop	r0
    1cfc:	0f be       	out	0x3f, r0	; 63
			
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
			// In State 3, the motor is in the off state of direct operation mode.	
			case (3):
			    
				if (motor_operator->get() == 1)
    1cfe:	81 30       	cpi	r24, 0x01	; 1
    1d00:	09 f0       	breq	.+2      	; 0x1d04 <_ZN7task_md3runEv+0x1a4>
    1d02:	3d c0       	rjmp	.+122    	; 0x1d7e <_ZN7task_md3runEv+0x21e>
				{
					md->motorCCW();
    1d04:	f6 01       	movw	r30, r12
    1d06:	80 81       	ld	r24, Z
    1d08:	91 81       	ldd	r25, Z+1	; 0x01
    1d0a:	0e 94 9a 08 	call	0x1134	; 0x1134 <_ZN6DM542T8motorCCWEv>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1d14:	0f 90       	pop	r0
    1d16:	0f be       	out	0x3f, r0	; 63
					md->setRamp( md->thisInterruptTimer, 500, gen_max_v.get() );
    1d18:	d6 01       	movw	r26, r12
    1d1a:	8d 91       	ld	r24, X+
    1d1c:	9c 91       	ld	r25, X
    1d1e:	e0 90 21 21 	lds	r14, 0x2121	; 0x802121 <gen_max_v>
    1d22:	f0 90 22 21 	lds	r15, 0x2122	; 0x802122 <gen_max_v+0x1>
    1d26:	00 91 23 21 	lds	r16, 0x2123	; 0x802123 <gen_max_v+0x2>
    1d2a:	10 91 24 21 	lds	r17, 0x2124	; 0x802124 <gen_max_v+0x3>
    1d2e:	fc 01       	movw	r30, r24
    1d30:	62 8d       	ldd	r22, Z+26	; 0x1a
    1d32:	73 8d       	ldd	r23, Z+27	; 0x1b
    1d34:	24 ef       	ldi	r18, 0xF4	; 244
    1d36:	31 e0       	ldi	r19, 0x01	; 1
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	4c 96       	adiw	r24, 0x1c	; 28
    1d3e:	0e 94 b6 09 	call	0x136c	; 0x136c <_ZN6Motion15VelocityControl7setRampEP14InterruptTimermm>
					motor_on = motorOn();
    1d42:	89 89       	ldd	r24, Y+17	; 0x11
    1d44:	9a 89       	ldd	r25, Y+18	; 0x12
    1d46:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <_ZN7task_md7motorOnEv>
    1d4a:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d4c:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d4e:	8c 93       	st	X, r24
					if (motor_on)
    1d50:	88 23       	and	r24, r24
    1d52:	31 f0       	breq	.+12     	; 0x1d60 <_ZN7task_md3runEv+0x200>
					{
						transition_to(4);
    1d54:	64 e0       	ldi	r22, 0x04	; 4
    1d56:	89 89       	ldd	r24, Y+17	; 0x11
    1d58:	9a 89       	ldd	r25, Y+18	; 0x12
    1d5a:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    1d5e:	2f c3       	rjmp	.+1630   	; 0x23be <_ZN7task_md3runEv+0x85e>
					}
					else
					{
						motor_operator->put(0);
    1d60:	d2 01       	movw	r26, r4
    1d62:	ed 91       	ld	r30, X+
    1d64:	fc 91       	ld	r31, X
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	0f 92       	push	r0
			the_data = new_data;
    1d6c:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    1d6e:	0f 90       	pop	r0
    1d70:	0f be       	out	0x3f, r0	; 63
						transition_to(2);
    1d72:	62 e0       	ldi	r22, 0x02	; 2
    1d74:	89 89       	ldd	r24, Y+17	; 0x11
    1d76:	9a 89       	ldd	r25, Y+18	; 0x12
    1d78:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    1d7c:	20 c3       	rjmp	.+1600   	; 0x23be <_ZN7task_md3runEv+0x85e>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1d84:	0f 90       	pop	r0
    1d86:	0f be       	out	0x3f, r0	; 63
					}
				}
				else if (motor_operator->get() == 2)
    1d88:	82 30       	cpi	r24, 0x02	; 2
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <_ZN7task_md3runEv+0x22e>
    1d8c:	3d c0       	rjmp	.+122    	; 0x1e08 <_ZN7task_md3runEv+0x2a8>
				{
					md->motorCW();
    1d8e:	f6 01       	movw	r30, r12
    1d90:	80 81       	ld	r24, Z
    1d92:	91 81       	ldd	r25, Z+1	; 0x01
    1d94:	0e 94 89 08 	call	0x1112	; 0x1112 <_ZN6DM542T7motorCWEv>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1d9e:	0f 90       	pop	r0
    1da0:	0f be       	out	0x3f, r0	; 63
					md->setRamp( md->thisInterruptTimer, 500, gen_max_v.get() );
    1da2:	d6 01       	movw	r26, r12
    1da4:	8d 91       	ld	r24, X+
    1da6:	9c 91       	ld	r25, X
    1da8:	e0 90 21 21 	lds	r14, 0x2121	; 0x802121 <gen_max_v>
    1dac:	f0 90 22 21 	lds	r15, 0x2122	; 0x802122 <gen_max_v+0x1>
    1db0:	00 91 23 21 	lds	r16, 0x2123	; 0x802123 <gen_max_v+0x2>
    1db4:	10 91 24 21 	lds	r17, 0x2124	; 0x802124 <gen_max_v+0x3>
    1db8:	fc 01       	movw	r30, r24
    1dba:	62 8d       	ldd	r22, Z+26	; 0x1a
    1dbc:	73 8d       	ldd	r23, Z+27	; 0x1b
    1dbe:	24 ef       	ldi	r18, 0xF4	; 244
    1dc0:	31 e0       	ldi	r19, 0x01	; 1
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
    1dc4:	50 e0       	ldi	r21, 0x00	; 0
    1dc6:	4c 96       	adiw	r24, 0x1c	; 28
    1dc8:	0e 94 b6 09 	call	0x136c	; 0x136c <_ZN6Motion15VelocityControl7setRampEP14InterruptTimermm>
					motor_on = motorOn();
    1dcc:	89 89       	ldd	r24, Y+17	; 0x11
    1dce:	9a 89       	ldd	r25, Y+18	; 0x12
    1dd0:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <_ZN7task_md7motorOnEv>
    1dd4:	ab 85       	ldd	r26, Y+11	; 0x0b
    1dd6:	bc 85       	ldd	r27, Y+12	; 0x0c
    1dd8:	8c 93       	st	X, r24
					if (motor_on)
    1dda:	88 23       	and	r24, r24
    1ddc:	31 f0       	breq	.+12     	; 0x1dea <_ZN7task_md3runEv+0x28a>
					{
						transition_to(4);
    1dde:	64 e0       	ldi	r22, 0x04	; 4
    1de0:	89 89       	ldd	r24, Y+17	; 0x11
    1de2:	9a 89       	ldd	r25, Y+18	; 0x12
    1de4:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    1de8:	ea c2       	rjmp	.+1492   	; 0x23be <_ZN7task_md3runEv+0x85e>
					}	
					else
					{
						motor_operator->put(0);
    1dea:	d2 01       	movw	r26, r4
    1dec:	ed 91       	ld	r30, X+
    1dee:	fc 91       	ld	r31, X
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	0f 92       	push	r0
			the_data = new_data;
    1df6:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    1df8:	0f 90       	pop	r0
    1dfa:	0f be       	out	0x3f, r0	; 63
						transition_to(2);
    1dfc:	62 e0       	ldi	r22, 0x02	; 2
    1dfe:	89 89       	ldd	r24, Y+17	; 0x11
    1e00:	9a 89       	ldd	r25, Y+18	; 0x12
    1e02:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    1e06:	db c2       	rjmp	.+1462   	; 0x23be <_ZN7task_md3runEv+0x85e>
					}	
				}
				else
				{
					transition_to(2);
    1e08:	62 e0       	ldi	r22, 0x02	; 2
    1e0a:	89 89       	ldd	r24, Y+17	; 0x11
    1e0c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e0e:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    1e12:	d5 c2       	rjmp	.+1450   	; 0x23be <_ZN7task_md3runEv+0x85e>
			
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In State 4, the motor is enabled, waiting for a stop command.
			case (4):
								
				md->rampHandler();
    1e14:	f6 01       	movw	r30, r12
    1e16:	80 81       	ld	r24, Z
    1e18:	91 81       	ldd	r25, Z+1	; 0x01
    1e1a:	4c 96       	adiw	r24, 0x1c	; 28
    1e1c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_ZN6Motion15VelocityControl11rampHandlerEv>
				
				if(md->get_status() == false)
    1e20:	d6 01       	movw	r26, r12
    1e22:	8d 91       	ld	r24, X+
    1e24:	9c 91       	ld	r25, X
    1e26:	0e 94 c6 08 	call	0x118c	; 0x118c <_ZN6DM542T10get_statusEv>
    1e2a:	81 11       	cpse	r24, r1
    1e2c:	09 c0       	rjmp	.+18     	; 0x1e40 <_ZN7task_md3runEv+0x2e0>
				{
					motor_operator->put(0);
    1e2e:	d2 01       	movw	r26, r4
    1e30:	ed 91       	ld	r30, X+
    1e32:	fc 91       	ld	r31, X
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	0f 92       	push	r0
			the_data = new_data;
    1e3a:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    1e3c:	0f 90       	pop	r0
    1e3e:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1e46:	0f 90       	pop	r0
    1e48:	0f be       	out	0x3f, r0	; 63
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
			temporary_copy = the_data;
    1e4a:	d2 01       	movw	r26, r4
    1e4c:	ed 91       	ld	r30, X+
    1e4e:	fc 91       	ld	r31, X
				}
				
			    if(motor_operator->get() == 0)
    1e50:	80 81       	ld	r24, Z
    1e52:	81 11       	cpse	r24, r1
    1e54:	48 c0       	rjmp	.+144    	; 0x1ee6 <_ZN7task_md3runEv+0x386>
				{
					md->motorOff();
    1e56:	f6 01       	movw	r30, r12
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	0e 94 aa 08 	call	0x1154	; 0x1154 <_ZN6DM542T8motorOffEv>
					*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    1e60:	d6 01       	movw	r26, r12
    1e62:	8d 91       	ld	r24, X+
    1e64:	9c 91       	ld	r25, X
    1e66:	4c 96       	adiw	r24, 0x1c	; 28
    1e68:	0e 94 8b 09 	call	0x1316	; 0x1316 <_ZN6Motion13MotionControl8getStepsEv>
    1e6c:	69 83       	std	Y+1, r22	; 0x01
    1e6e:	7a 83       	std	Y+2, r23	; 0x02
    1e70:	8b 83       	std	Y+3, r24	; 0x03
    1e72:	9c 83       	std	Y+4, r25	; 0x04
    1e74:	e9 89       	ldd	r30, Y+17	; 0x11
    1e76:	fa 89       	ldd	r31, Y+18	; 0x12
    1e78:	06 81       	ldd	r16, Z+6	; 0x06
    1e7a:	17 81       	ldd	r17, Z+7	; 0x07
    1e7c:	d4 01       	movw	r26, r8
    1e7e:	6d 91       	ld	r22, X+
    1e80:	7c 91       	ld	r23, X
    1e82:	c8 01       	movw	r24, r16
    1e84:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    1e88:	6a e0       	ldi	r22, 0x0A	; 10
    1e8a:	c8 01       	movw	r24, r16
    1e8c:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    1e90:	8c 01       	movw	r16, r24
    1e92:	6a e9       	ldi	r22, 0x9A	; 154
    1e94:	76 e0       	ldi	r23, 0x06	; 6
    1e96:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    1e9a:	49 81       	ldd	r20, Y+1	; 0x01
    1e9c:	5a 81       	ldd	r21, Y+2	; 0x02
    1e9e:	6b 81       	ldd	r22, Y+3	; 0x03
    1ea0:	7c 81       	ldd	r23, Y+4	; 0x04
    1ea2:	c8 01       	movw	r24, r16
    1ea4:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <_ZN8emstreamlsEl>
    1ea8:	66 e0       	ldi	r22, 0x06	; 6
    1eaa:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
					*p_serial << task_name << PMS ("S") << endl;
    1eae:	e9 89       	ldd	r30, Y+17	; 0x11
    1eb0:	fa 89       	ldd	r31, Y+18	; 0x12
    1eb2:	06 81       	ldd	r16, Z+6	; 0x06
    1eb4:	17 81       	ldd	r17, Z+7	; 0x07
    1eb6:	d4 01       	movw	r26, r8
    1eb8:	6d 91       	ld	r22, X+
    1eba:	7c 91       	ld	r23, X
    1ebc:	c8 01       	movw	r24, r16
    1ebe:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    1ec2:	6a e0       	ldi	r22, 0x0A	; 10
    1ec4:	c8 01       	movw	r24, r16
    1ec6:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    1eca:	8c 01       	movw	r16, r24
    1ecc:	68 e9       	ldi	r22, 0x98	; 152
    1ece:	76 e0       	ldi	r23, 0x06	; 6
    1ed0:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    1ed4:	66 e0       	ldi	r22, 0x06	; 6
    1ed6:	c8 01       	movw	r24, r16
    1ed8:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
					transition_to(2);
    1edc:	62 e0       	ldi	r22, 0x02	; 2
    1ede:	89 89       	ldd	r24, Y+17	; 0x11
    1ee0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ee2:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
				}
				
				if (++delay_counter == 5)
    1ee6:	bf ef       	ldi	r27, 0xFF	; 255
    1ee8:	6b 1a       	sub	r6, r27
    1eea:	7b 0a       	sbc	r7, r27
    1eec:	e5 e0       	ldi	r30, 0x05	; 5
    1eee:	6e 16       	cp	r6, r30
    1ef0:	71 04       	cpc	r7, r1
    1ef2:	09 f0       	breq	.+2      	; 0x1ef6 <_ZN7task_md3runEv+0x396>
    1ef4:	64 c2       	rjmp	.+1224   	; 0x23be <_ZN7task_md3runEv+0x85e>
				{
					*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    1ef6:	d6 01       	movw	r26, r12
    1ef8:	8d 91       	ld	r24, X+
    1efa:	9c 91       	ld	r25, X
    1efc:	4c 96       	adiw	r24, 0x1c	; 28
    1efe:	0e 94 8b 09 	call	0x1316	; 0x1316 <_ZN6Motion13MotionControl8getStepsEv>
    1f02:	69 83       	std	Y+1, r22	; 0x01
    1f04:	7a 83       	std	Y+2, r23	; 0x02
    1f06:	8b 83       	std	Y+3, r24	; 0x03
    1f08:	9c 83       	std	Y+4, r25	; 0x04
    1f0a:	e9 89       	ldd	r30, Y+17	; 0x11
    1f0c:	fa 89       	ldd	r31, Y+18	; 0x12
    1f0e:	06 81       	ldd	r16, Z+6	; 0x06
    1f10:	17 81       	ldd	r17, Z+7	; 0x07
    1f12:	d4 01       	movw	r26, r8
    1f14:	6d 91       	ld	r22, X+
    1f16:	7c 91       	ld	r23, X
    1f18:	c8 01       	movw	r24, r16
    1f1a:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    1f1e:	6a e0       	ldi	r22, 0x0A	; 10
    1f20:	c8 01       	movw	r24, r16
    1f22:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    1f26:	8c 01       	movw	r16, r24
    1f28:	63 e9       	ldi	r22, 0x93	; 147
    1f2a:	76 e0       	ldi	r23, 0x06	; 6
    1f2c:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    1f30:	49 81       	ldd	r20, Y+1	; 0x01
    1f32:	5a 81       	ldd	r21, Y+2	; 0x02
    1f34:	6b 81       	ldd	r22, Y+3	; 0x03
    1f36:	7c 81       	ldd	r23, Y+4	; 0x04
    1f38:	c8 01       	movw	r24, r16
    1f3a:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <_ZN8emstreamlsEl>
    1f3e:	66 e0       	ldi	r22, 0x06	; 6
    1f40:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
					delay_counter = 0;
    1f44:	61 2c       	mov	r6, r1
    1f46:	71 2c       	mov	r7, r1
    1f48:	3a c2       	rjmp	.+1140   	; 0x23be <_ZN7task_md3runEv+0x85e>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1f50:	0f 90       	pop	r0
    1f52:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In State 5, the motor is disabled, and awaits a signal from the sensor before
			// it begins calculating its operation parameters to reach the next destination.	
			case (5):
							
				if (!(coordinate_mode.get()) && !(incremental_mode.get()) && !(drawing_mode.get()))
    1f54:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    1f58:	81 11       	cpse	r24, r1
    1f5a:	18 c0       	rjmp	.+48     	; 0x1f8c <_ZN7task_md3runEv+0x42c>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1f62:	0f 90       	pop	r0
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <incremental_mode>
    1f6a:	81 11       	cpse	r24, r1
    1f6c:	0f c0       	rjmp	.+30     	; 0x1f8c <_ZN7task_md3runEv+0x42c>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1f74:	0f 90       	pop	r0
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <drawing_mode>
    1f7c:	81 11       	cpse	r24, r1
    1f7e:	06 c0       	rjmp	.+12     	; 0x1f8c <_ZN7task_md3runEv+0x42c>
				{
					transition_to(2);
    1f80:	62 e0       	ldi	r22, 0x02	; 2
    1f82:	89 89       	ldd	r24, Y+17	; 0x11
    1f84:	9a 89       	ldd	r25, Y+18	; 0x12
    1f86:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    1f8a:	19 c2       	rjmp	.+1074   	; 0x23be <_ZN7task_md3runEv+0x85e>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1f92:	0f 90       	pop	r0
    1f94:	0f be       	out	0x3f, r0	; 63
				}	
				else if(next_node.get())
    1f96:	80 91 4c 21 	lds	r24, 0x214C	; 0x80214c <next_node>
    1f9a:	88 23       	and	r24, r24
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <_ZN7task_md3runEv+0x440>
    1f9e:	0f c2       	rjmp	.+1054   	; 0x23be <_ZN7task_md3runEv+0x85e>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1fa6:	0f 90       	pop	r0
    1fa8:	0f be       	out	0x3f, r0	; 63
				{
					max_vel = gen_max_v.get();
    1faa:	80 91 21 21 	lds	r24, 0x2121	; 0x802121 <gen_max_v>
    1fae:	90 91 22 21 	lds	r25, 0x2122	; 0x802122 <gen_max_v+0x1>
    1fb2:	a0 91 23 21 	lds	r26, 0x2123	; 0x802123 <gen_max_v+0x2>
    1fb6:	b0 91 24 21 	lds	r27, 0x2124	; 0x802124 <gen_max_v+0x3>
    1fba:	e9 85       	ldd	r30, Y+9	; 0x09
    1fbc:	fa 85       	ldd	r31, Y+10	; 0x0a
    1fbe:	80 83       	st	Z, r24
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	a2 83       	std	Z+2, r26	; 0x02
    1fc4:	b3 83       	std	Z+3, r27	; 0x03
					transition_to(6);
    1fc6:	66 e0       	ldi	r22, 0x06	; 6
    1fc8:	89 89       	ldd	r24, Y+17	; 0x11
    1fca:	9a 89       	ldd	r25, Y+18	; 0x12
    1fcc:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    1fd0:	f6 c1       	rjmp	.+1004   	; 0x23be <_ZN7task_md3runEv+0x85e>
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In State 6, the motor is calculating how many steps it must take to reach 
			// the desired node.
			case (6):
			    
				steps = md->getSteps();
    1fd2:	d6 01       	movw	r26, r12
    1fd4:	8d 91       	ld	r24, X+
    1fd6:	9c 91       	ld	r25, X
    1fd8:	4c 96       	adiw	r24, 0x1c	; 28
    1fda:	0e 94 8b 09 	call	0x1316	; 0x1316 <_ZN6Motion13MotionControl8getStepsEv>
    1fde:	f5 01       	movw	r30, r10
    1fe0:	60 83       	st	Z, r22
    1fe2:	71 83       	std	Z+1, r23	; 0x01
    1fe4:	82 83       	std	Z+2, r24	; 0x02
    1fe6:	93 83       	std	Z+3, r25	; 0x03
				step_destination = locations->get();
    1fe8:	af 81       	ldd	r26, Y+7	; 0x07
    1fea:	b8 85       	ldd	r27, Y+8	; 0x08
    1fec:	8d 91       	ld	r24, X+
    1fee:	9c 91       	ld	r25, X
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	ed 91       	ld	r30, X+
    1ff4:	fc 91       	ld	r31, X
    1ff6:	00 84       	ldd	r0, Z+8	; 0x08
    1ff8:	f1 85       	ldd	r31, Z+9	; 0x09
    1ffa:	e0 2d       	mov	r30, r0
    1ffc:	19 95       	eicall
    1ffe:	f1 01       	movw	r30, r2
    2000:	60 83       	st	Z, r22
    2002:	71 83       	std	Z+1, r23	; 0x01
    2004:	82 83       	std	Z+2, r24	; 0x02
    2006:	93 83       	std	Z+3, r25	; 0x03
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    200e:	0f 90       	pop	r0
    2010:	0f be       	out	0x3f, r0	; 63
				if (drawing_mode.get())
    2012:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <drawing_mode>
    2016:	88 23       	and	r24, r24
    2018:	a1 f1       	breq	.+104    	; 0x2082 <_ZN7task_md3runEv+0x522>
				{
					max_vel = max_velocity->get();
    201a:	ad 85       	ldd	r26, Y+13	; 0x0d
    201c:	be 85       	ldd	r27, Y+14	; 0x0e
    201e:	8d 91       	ld	r24, X+
    2020:	9c 91       	ld	r25, X
    2022:	dc 01       	movw	r26, r24
    2024:	ed 91       	ld	r30, X+
    2026:	fc 91       	ld	r31, X
    2028:	00 84       	ldd	r0, Z+8	; 0x08
    202a:	f1 85       	ldd	r31, Z+9	; 0x09
    202c:	e0 2d       	mov	r30, r0
    202e:	19 95       	eicall
    2030:	69 83       	std	Y+1, r22	; 0x01
    2032:	7a 83       	std	Y+2, r23	; 0x02
    2034:	8b 83       	std	Y+3, r24	; 0x03
    2036:	9c 83       	std	Y+4, r25	; 0x04
    2038:	e9 85       	ldd	r30, Y+9	; 0x09
    203a:	fa 85       	ldd	r31, Y+10	; 0x0a
    203c:	60 83       	st	Z, r22
    203e:	71 83       	std	Z+1, r23	; 0x01
    2040:	82 83       	std	Z+2, r24	; 0x02
    2042:	93 83       	std	Z+3, r25	; 0x03
					*p_serial << task_name << PMS ("vel: ") << max_vel << endl;
    2044:	a9 89       	ldd	r26, Y+17	; 0x11
    2046:	ba 89       	ldd	r27, Y+18	; 0x12
    2048:	16 96       	adiw	r26, 0x06	; 6
    204a:	0d 91       	ld	r16, X+
    204c:	1c 91       	ld	r17, X
    204e:	17 97       	sbiw	r26, 0x07	; 7
    2050:	f4 01       	movw	r30, r8
    2052:	60 81       	ld	r22, Z
    2054:	71 81       	ldd	r23, Z+1	; 0x01
    2056:	c8 01       	movw	r24, r16
    2058:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    205c:	6a e0       	ldi	r22, 0x0A	; 10
    205e:	c8 01       	movw	r24, r16
    2060:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    2064:	8c 01       	movw	r16, r24
    2066:	6d e8       	ldi	r22, 0x8D	; 141
    2068:	76 e0       	ldi	r23, 0x06	; 6
    206a:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    206e:	49 81       	ldd	r20, Y+1	; 0x01
    2070:	5a 81       	ldd	r21, Y+2	; 0x02
    2072:	6b 81       	ldd	r22, Y+3	; 0x03
    2074:	7c 81       	ldd	r23, Y+4	; 0x04
    2076:	c8 01       	movw	r24, r16
    2078:	0e 94 31 32 	call	0x6462	; 0x6462 <_ZN8emstreamlsEm>
    207c:	66 e0       	ldi	r22, 0x06	; 6
    207e:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
				}
							
				if (steps < step_destination)
    2082:	d5 01       	movw	r26, r10
    2084:	4d 91       	ld	r20, X+
    2086:	5d 91       	ld	r21, X+
    2088:	6d 91       	ld	r22, X+
    208a:	7c 91       	ld	r23, X
    208c:	f1 01       	movw	r30, r2
    208e:	80 81       	ld	r24, Z
    2090:	91 81       	ldd	r25, Z+1	; 0x01
    2092:	a2 81       	ldd	r26, Z+2	; 0x02
    2094:	b3 81       	ldd	r27, Z+3	; 0x03
    2096:	48 17       	cp	r20, r24
    2098:	59 07       	cpc	r21, r25
    209a:	6a 07       	cpc	r22, r26
    209c:	7b 07       	cpc	r23, r27
    209e:	ec f4       	brge	.+58     	; 0x20da <_ZN7task_md3runEv+0x57a>
				{
					md->motorCCW();
    20a0:	d6 01       	movw	r26, r12
    20a2:	8d 91       	ld	r24, X+
    20a4:	9c 91       	ld	r25, X
    20a6:	0e 94 9a 08 	call	0x1134	; 0x1134 <_ZN6DM542T8motorCCWEv>
					md->setRamp( md->thisInterruptTimer, 500, max_vel ) ;		
    20aa:	f6 01       	movw	r30, r12
    20ac:	80 81       	ld	r24, Z
    20ae:	91 81       	ldd	r25, Z+1	; 0x01
    20b0:	a9 85       	ldd	r26, Y+9	; 0x09
    20b2:	ba 85       	ldd	r27, Y+10	; 0x0a
    20b4:	ed 90       	ld	r14, X+
    20b6:	fd 90       	ld	r15, X+
    20b8:	0d 91       	ld	r16, X+
    20ba:	1c 91       	ld	r17, X
    20bc:	fc 01       	movw	r30, r24
    20be:	62 8d       	ldd	r22, Z+26	; 0x1a
    20c0:	73 8d       	ldd	r23, Z+27	; 0x1b
    20c2:	24 ef       	ldi	r18, 0xF4	; 244
    20c4:	31 e0       	ldi	r19, 0x01	; 1
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	4c 96       	adiw	r24, 0x1c	; 28
    20cc:	0e 94 b6 09 	call	0x136c	; 0x136c <_ZN6Motion15VelocityControl7setRampEP14InterruptTimermm>
					motorOn();
    20d0:	89 89       	ldd	r24, Y+17	; 0x11
    20d2:	9a 89       	ldd	r25, Y+18	; 0x12
    20d4:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <_ZN7task_md7motorOnEv>
    20d8:	21 c0       	rjmp	.+66     	; 0x211c <_ZN7task_md3runEv+0x5bc>
				}
				else if (steps > step_destination)
    20da:	84 17       	cp	r24, r20
    20dc:	95 07       	cpc	r25, r21
    20de:	a6 07       	cpc	r26, r22
    20e0:	b7 07       	cpc	r27, r23
    20e2:	e4 f4       	brge	.+56     	; 0x211c <_ZN7task_md3runEv+0x5bc>
				{
					md->motorCW();
    20e4:	d6 01       	movw	r26, r12
    20e6:	8d 91       	ld	r24, X+
    20e8:	9c 91       	ld	r25, X
    20ea:	0e 94 89 08 	call	0x1112	; 0x1112 <_ZN6DM542T7motorCWEv>
					md->setRamp( md->thisInterruptTimer, 500, max_vel );
    20ee:	f6 01       	movw	r30, r12
    20f0:	80 81       	ld	r24, Z
    20f2:	91 81       	ldd	r25, Z+1	; 0x01
    20f4:	a9 85       	ldd	r26, Y+9	; 0x09
    20f6:	ba 85       	ldd	r27, Y+10	; 0x0a
    20f8:	ed 90       	ld	r14, X+
    20fa:	fd 90       	ld	r15, X+
    20fc:	0d 91       	ld	r16, X+
    20fe:	1c 91       	ld	r17, X
    2100:	fc 01       	movw	r30, r24
    2102:	62 8d       	ldd	r22, Z+26	; 0x1a
    2104:	73 8d       	ldd	r23, Z+27	; 0x1b
    2106:	24 ef       	ldi	r18, 0xF4	; 244
    2108:	31 e0       	ldi	r19, 0x01	; 1
    210a:	40 e0       	ldi	r20, 0x00	; 0
    210c:	50 e0       	ldi	r21, 0x00	; 0
    210e:	4c 96       	adiw	r24, 0x1c	; 28
    2110:	0e 94 b6 09 	call	0x136c	; 0x136c <_ZN6Motion15VelocityControl7setRampEP14InterruptTimermm>
					motorOn();
    2114:	89 89       	ldd	r24, Y+17	; 0x11
    2116:	9a 89       	ldd	r25, Y+18	; 0x12
    2118:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <_ZN7task_md7motorOnEv>
				}
				
				transition_to(7); 
    211c:	67 e0       	ldi	r22, 0x07	; 7
    211e:	89 89       	ldd	r24, Y+17	; 0x11
    2120:	9a 89       	ldd	r25, Y+18	; 0x12
    2122:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
				
				break;
    2126:	4b c1       	rjmp	.+662    	; 0x23be <_ZN7task_md3runEv+0x85e>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    212e:	0f 90       	pop	r0
    2130:	0f be       	out	0x3f, r0	; 63
			
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In State 7, the motor is enabled until it reaches its destination.
			case (7):
			
				if (pause.get())
    2132:	80 91 49 21 	lds	r24, 0x2149	; 0x802149 <pause>
    2136:	88 23       	and	r24, r24
    2138:	51 f0       	breq	.+20     	; 0x214e <_ZN7task_md3runEv+0x5ee>
				{
					md->motorOff();
    213a:	d6 01       	movw	r26, r12
    213c:	8d 91       	ld	r24, X+
    213e:	9c 91       	ld	r25, X
    2140:	0e 94 aa 08 	call	0x1154	; 0x1154 <_ZN6DM542T8motorOffEv>
					transition_to(8);
    2144:	68 e0       	ldi	r22, 0x08	; 8
    2146:	89 89       	ldd	r24, Y+17	; 0x11
    2148:	9a 89       	ldd	r25, Y+18	; 0x12
    214a:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
				}
				
				freq_hz = md->rampHandler();
    214e:	f6 01       	movw	r30, r12
    2150:	80 81       	ld	r24, Z
    2152:	91 81       	ldd	r25, Z+1	; 0x01
    2154:	4c 96       	adiw	r24, 0x1c	; 28
    2156:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_ZN6Motion15VelocityControl11rampHandlerEv>
    215a:	ad 81       	ldd	r26, Y+5	; 0x05
    215c:	be 81       	ldd	r27, Y+6	; 0x06
    215e:	6d 93       	st	X+, r22
    2160:	7c 93       	st	X, r23
			    
			    if(md->get_direction() == 0)
    2162:	f6 01       	movw	r30, r12
    2164:	80 81       	ld	r24, Z
    2166:	91 81       	ldd	r25, Z+1	; 0x01
    2168:	0e 94 af 08 	call	0x115e	; 0x115e <_ZN6DM542T13get_directionEv>
    216c:	81 11       	cpse	r24, r1
    216e:	6e c0       	rjmp	.+220    	; 0x224c <_ZN7task_md3runEv+0x6ec>
				{
					if(md->getSteps() >= step_destination)
    2170:	d6 01       	movw	r26, r12
    2172:	8d 91       	ld	r24, X+
    2174:	9c 91       	ld	r25, X
    2176:	4c 96       	adiw	r24, 0x1c	; 28
    2178:	0e 94 8b 09 	call	0x1316	; 0x1316 <_ZN6Motion13MotionControl8getStepsEv>
    217c:	f1 01       	movw	r30, r2
    217e:	00 81       	ld	r16, Z
    2180:	11 81       	ldd	r17, Z+1	; 0x01
    2182:	22 81       	ldd	r18, Z+2	; 0x02
    2184:	33 81       	ldd	r19, Z+3	; 0x03
    2186:	60 17       	cp	r22, r16
    2188:	71 07       	cpc	r23, r17
    218a:	82 07       	cpc	r24, r18
    218c:	93 07       	cpc	r25, r19
    218e:	0c f4       	brge	.+2      	; 0x2192 <_ZN7task_md3runEv+0x632>
    2190:	d2 c0       	rjmp	.+420    	; 0x2336 <_ZN7task_md3runEv+0x7d6>
					{
						md->motorOff();
    2192:	d6 01       	movw	r26, r12
    2194:	8d 91       	ld	r24, X+
    2196:	9c 91       	ld	r25, X
    2198:	0e 94 aa 08 	call	0x1154	; 0x1154 <_ZN6DM542T8motorOffEv>
						*p_serial << task_name << PMS ("S") << endl;
    219c:	e9 89       	ldd	r30, Y+17	; 0x11
    219e:	fa 89       	ldd	r31, Y+18	; 0x12
    21a0:	06 81       	ldd	r16, Z+6	; 0x06
    21a2:	17 81       	ldd	r17, Z+7	; 0x07
    21a4:	d4 01       	movw	r26, r8
    21a6:	6d 91       	ld	r22, X+
    21a8:	7c 91       	ld	r23, X
    21aa:	c8 01       	movw	r24, r16
    21ac:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    21b0:	6a e0       	ldi	r22, 0x0A	; 10
    21b2:	c8 01       	movw	r24, r16
    21b4:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    21b8:	8c 01       	movw	r16, r24
    21ba:	6b e8       	ldi	r22, 0x8B	; 139
    21bc:	76 e0       	ldi	r23, 0x06	; 6
    21be:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    21c2:	66 e0       	ldi	r22, 0x06	; 6
    21c4:	c8 01       	movw	r24, r16
    21c6:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
						*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    21ca:	f6 01       	movw	r30, r12
    21cc:	80 81       	ld	r24, Z
    21ce:	91 81       	ldd	r25, Z+1	; 0x01
    21d0:	4c 96       	adiw	r24, 0x1c	; 28
    21d2:	0e 94 8b 09 	call	0x1316	; 0x1316 <_ZN6Motion13MotionControl8getStepsEv>
    21d6:	69 83       	std	Y+1, r22	; 0x01
    21d8:	7a 83       	std	Y+2, r23	; 0x02
    21da:	8b 83       	std	Y+3, r24	; 0x03
    21dc:	9c 83       	std	Y+4, r25	; 0x04
    21de:	a9 89       	ldd	r26, Y+17	; 0x11
    21e0:	ba 89       	ldd	r27, Y+18	; 0x12
    21e2:	16 96       	adiw	r26, 0x06	; 6
    21e4:	0d 91       	ld	r16, X+
    21e6:	1c 91       	ld	r17, X
    21e8:	17 97       	sbiw	r26, 0x07	; 7
    21ea:	f4 01       	movw	r30, r8
    21ec:	60 81       	ld	r22, Z
    21ee:	71 81       	ldd	r23, Z+1	; 0x01
    21f0:	c8 01       	movw	r24, r16
    21f2:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    21f6:	6a e0       	ldi	r22, 0x0A	; 10
    21f8:	c8 01       	movw	r24, r16
    21fa:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    21fe:	8c 01       	movw	r16, r24
    2200:	66 e8       	ldi	r22, 0x86	; 134
    2202:	76 e0       	ldi	r23, 0x06	; 6
    2204:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    2208:	49 81       	ldd	r20, Y+1	; 0x01
    220a:	5a 81       	ldd	r21, Y+2	; 0x02
    220c:	6b 81       	ldd	r22, Y+3	; 0x03
    220e:	7c 81       	ldd	r23, Y+4	; 0x04
    2210:	c8 01       	movw	r24, r16
    2212:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <_ZN8emstreamlsEl>
    2216:	66 e0       	ldi	r22, 0x06	; 6
    2218:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
						motor_complete->put(true);
    221c:	af 85       	ldd	r26, Y+15	; 0x0f
    221e:	b8 89       	ldd	r27, Y+16	; 0x10
    2220:	ed 91       	ld	r30, X+
    2222:	fc 91       	ld	r31, X
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	0f 92       	push	r0
			the_data = new_data;
    222a:	b1 e0       	ldi	r27, 0x01	; 1
    222c:	b0 83       	st	Z, r27
			portEXIT_CRITICAL ();
    222e:	0f 90       	pop	r0
    2230:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	0f 92       	push	r0
			the_data = new_data;
    2238:	10 92 4c 21 	sts	0x214C, r1	; 0x80214c <next_node>
			portEXIT_CRITICAL ();
    223c:	0f 90       	pop	r0
    223e:	0f be       	out	0x3f, r0	; 63
						next_node.put(false);
						transition_to(5);
    2240:	65 e0       	ldi	r22, 0x05	; 5
    2242:	89 89       	ldd	r24, Y+17	; 0x11
    2244:	9a 89       	ldd	r25, Y+18	; 0x12
    2246:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    224a:	75 c0       	rjmp	.+234    	; 0x2336 <_ZN7task_md3runEv+0x7d6>
					}
				}
				else if(md->get_direction() == 1)
    224c:	f6 01       	movw	r30, r12
    224e:	80 81       	ld	r24, Z
    2250:	91 81       	ldd	r25, Z+1	; 0x01
    2252:	0e 94 af 08 	call	0x115e	; 0x115e <_ZN6DM542T13get_directionEv>
    2256:	81 30       	cpi	r24, 0x01	; 1
    2258:	09 f0       	breq	.+2      	; 0x225c <_ZN7task_md3runEv+0x6fc>
    225a:	6d c0       	rjmp	.+218    	; 0x2336 <_ZN7task_md3runEv+0x7d6>
				{
					if(md->getSteps() <= step_destination)
    225c:	d6 01       	movw	r26, r12
    225e:	8d 91       	ld	r24, X+
    2260:	9c 91       	ld	r25, X
    2262:	4c 96       	adiw	r24, 0x1c	; 28
    2264:	0e 94 8b 09 	call	0x1316	; 0x1316 <_ZN6Motion13MotionControl8getStepsEv>
    2268:	f1 01       	movw	r30, r2
    226a:	00 81       	ld	r16, Z
    226c:	11 81       	ldd	r17, Z+1	; 0x01
    226e:	22 81       	ldd	r18, Z+2	; 0x02
    2270:	33 81       	ldd	r19, Z+3	; 0x03
    2272:	06 17       	cp	r16, r22
    2274:	17 07       	cpc	r17, r23
    2276:	28 07       	cpc	r18, r24
    2278:	39 07       	cpc	r19, r25
    227a:	0c f4       	brge	.+2      	; 0x227e <_ZN7task_md3runEv+0x71e>
    227c:	5c c0       	rjmp	.+184    	; 0x2336 <_ZN7task_md3runEv+0x7d6>
					{
						md->motorOff();
    227e:	d6 01       	movw	r26, r12
    2280:	8d 91       	ld	r24, X+
    2282:	9c 91       	ld	r25, X
    2284:	0e 94 aa 08 	call	0x1154	; 0x1154 <_ZN6DM542T8motorOffEv>
						*p_serial << task_name << PMS ("S") << endl;
    2288:	e9 89       	ldd	r30, Y+17	; 0x11
    228a:	fa 89       	ldd	r31, Y+18	; 0x12
    228c:	06 81       	ldd	r16, Z+6	; 0x06
    228e:	17 81       	ldd	r17, Z+7	; 0x07
    2290:	d4 01       	movw	r26, r8
    2292:	6d 91       	ld	r22, X+
    2294:	7c 91       	ld	r23, X
    2296:	c8 01       	movw	r24, r16
    2298:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    229c:	6a e0       	ldi	r22, 0x0A	; 10
    229e:	c8 01       	movw	r24, r16
    22a0:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    22a4:	8c 01       	movw	r16, r24
    22a6:	64 e8       	ldi	r22, 0x84	; 132
    22a8:	76 e0       	ldi	r23, 0x06	; 6
    22aa:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    22ae:	66 e0       	ldi	r22, 0x06	; 6
    22b0:	c8 01       	movw	r24, r16
    22b2:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
						*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    22b6:	f6 01       	movw	r30, r12
    22b8:	80 81       	ld	r24, Z
    22ba:	91 81       	ldd	r25, Z+1	; 0x01
    22bc:	4c 96       	adiw	r24, 0x1c	; 28
    22be:	0e 94 8b 09 	call	0x1316	; 0x1316 <_ZN6Motion13MotionControl8getStepsEv>
    22c2:	69 83       	std	Y+1, r22	; 0x01
    22c4:	7a 83       	std	Y+2, r23	; 0x02
    22c6:	8b 83       	std	Y+3, r24	; 0x03
    22c8:	9c 83       	std	Y+4, r25	; 0x04
    22ca:	a9 89       	ldd	r26, Y+17	; 0x11
    22cc:	ba 89       	ldd	r27, Y+18	; 0x12
    22ce:	16 96       	adiw	r26, 0x06	; 6
    22d0:	0d 91       	ld	r16, X+
    22d2:	1c 91       	ld	r17, X
    22d4:	17 97       	sbiw	r26, 0x07	; 7
    22d6:	f4 01       	movw	r30, r8
    22d8:	60 81       	ld	r22, Z
    22da:	71 81       	ldd	r23, Z+1	; 0x01
    22dc:	c8 01       	movw	r24, r16
    22de:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    22e2:	6a e0       	ldi	r22, 0x0A	; 10
    22e4:	c8 01       	movw	r24, r16
    22e6:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    22ea:	8c 01       	movw	r16, r24
    22ec:	6f e7       	ldi	r22, 0x7F	; 127
    22ee:	76 e0       	ldi	r23, 0x06	; 6
    22f0:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    22f4:	49 81       	ldd	r20, Y+1	; 0x01
    22f6:	5a 81       	ldd	r21, Y+2	; 0x02
    22f8:	6b 81       	ldd	r22, Y+3	; 0x03
    22fa:	7c 81       	ldd	r23, Y+4	; 0x04
    22fc:	c8 01       	movw	r24, r16
    22fe:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <_ZN8emstreamlsEl>
    2302:	66 e0       	ldi	r22, 0x06	; 6
    2304:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
						motor_complete->put(true);
    2308:	af 85       	ldd	r26, Y+15	; 0x0f
    230a:	b8 89       	ldd	r27, Y+16	; 0x10
    230c:	ed 91       	ld	r30, X+
    230e:	fc 91       	ld	r31, X
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	0f 92       	push	r0
			the_data = new_data;
    2316:	b1 e0       	ldi	r27, 0x01	; 1
    2318:	b0 83       	st	Z, r27
			portEXIT_CRITICAL ();
    231a:	0f 90       	pop	r0
    231c:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	0f 92       	push	r0
			the_data = new_data;
    2324:	10 92 4c 21 	sts	0x214C, r1	; 0x80214c <next_node>
			portEXIT_CRITICAL ();
    2328:	0f 90       	pop	r0
    232a:	0f be       	out	0x3f, r0	; 63
						next_node.put(false);
						transition_to(5);
    232c:	65 e0       	ldi	r22, 0x05	; 5
    232e:	89 89       	ldd	r24, Y+17	; 0x11
    2330:	9a 89       	ldd	r25, Y+18	; 0x12
    2332:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>

					}
				}
				
				if (++delay_counter == 5)
    2336:	ef ef       	ldi	r30, 0xFF	; 255
    2338:	6e 1a       	sub	r6, r30
    233a:	7e 0a       	sbc	r7, r30
    233c:	f5 e0       	ldi	r31, 0x05	; 5
    233e:	6f 16       	cp	r6, r31
    2340:	71 04       	cpc	r7, r1
    2342:	09 f0       	breq	.+2      	; 0x2346 <_ZN7task_md3runEv+0x7e6>
    2344:	3c c0       	rjmp	.+120    	; 0x23be <_ZN7task_md3runEv+0x85e>
				{
					*p_serial << task_name << PMS ("loc:") << md->getSteps() << endl;
    2346:	d6 01       	movw	r26, r12
    2348:	8d 91       	ld	r24, X+
    234a:	9c 91       	ld	r25, X
    234c:	4c 96       	adiw	r24, 0x1c	; 28
    234e:	0e 94 8b 09 	call	0x1316	; 0x1316 <_ZN6Motion13MotionControl8getStepsEv>
    2352:	69 83       	std	Y+1, r22	; 0x01
    2354:	7a 83       	std	Y+2, r23	; 0x02
    2356:	8b 83       	std	Y+3, r24	; 0x03
    2358:	9c 83       	std	Y+4, r25	; 0x04
    235a:	e9 89       	ldd	r30, Y+17	; 0x11
    235c:	fa 89       	ldd	r31, Y+18	; 0x12
    235e:	06 81       	ldd	r16, Z+6	; 0x06
    2360:	17 81       	ldd	r17, Z+7	; 0x07
    2362:	d4 01       	movw	r26, r8
    2364:	6d 91       	ld	r22, X+
    2366:	7c 91       	ld	r23, X
    2368:	c8 01       	movw	r24, r16
    236a:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    236e:	6a e0       	ldi	r22, 0x0A	; 10
    2370:	c8 01       	movw	r24, r16
    2372:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    2376:	8c 01       	movw	r16, r24
    2378:	6a e7       	ldi	r22, 0x7A	; 122
    237a:	76 e0       	ldi	r23, 0x06	; 6
    237c:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    2380:	49 81       	ldd	r20, Y+1	; 0x01
    2382:	5a 81       	ldd	r21, Y+2	; 0x02
    2384:	6b 81       	ldd	r22, Y+3	; 0x03
    2386:	7c 81       	ldd	r23, Y+4	; 0x04
    2388:	c8 01       	movw	r24, r16
    238a:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <_ZN8emstreamlsEl>
    238e:	66 e0       	ldi	r22, 0x06	; 6
    2390:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
					//*p_serial << task_name << PMS ("freq: ") << freq_hz << endl;
					
					delay_counter = 0;
    2394:	61 2c       	mov	r6, r1
    2396:	71 2c       	mov	r7, r1
    2398:	12 c0       	rjmp	.+36     	; 0x23be <_ZN7task_md3runEv+0x85e>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    23a0:	0f 90       	pop	r0
    23a2:	0f be       	out	0x3f, r0	; 63
				
				break;	
				
			case (8):
			
				if(!(pause.get()))
    23a4:	80 91 49 21 	lds	r24, 0x2149	; 0x802149 <pause>
    23a8:	81 11       	cpse	r24, r1
    23aa:	09 c0       	rjmp	.+18     	; 0x23be <_ZN7task_md3runEv+0x85e>
				{
					motorOn();
    23ac:	89 89       	ldd	r24, Y+17	; 0x11
    23ae:	9a 89       	ldd	r25, Y+18	; 0x12
    23b0:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <_ZN7task_md7motorOnEv>
					transition_to(7);
    23b4:	67 e0       	ldi	r22, 0x07	; 7
    23b6:	89 89       	ldd	r24, Y+17	; 0x11
    23b8:	9a 89       	ldd	r25, Y+18	; 0x12
    23ba:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
				break;


		} // End switch state

		runs++;                             // Increment counter for debugging
    23be:	e9 89       	ldd	r30, Y+17	; 0x11
    23c0:	fa 89       	ldd	r31, Y+18	; 0x12
    23c2:	86 85       	ldd	r24, Z+14	; 0x0e
    23c4:	97 85       	ldd	r25, Z+15	; 0x0f
    23c6:	a0 89       	ldd	r26, Z+16	; 0x10
    23c8:	b1 89       	ldd	r27, Z+17	; 0x11
    23ca:	01 96       	adiw	r24, 0x01	; 1
    23cc:	a1 1d       	adc	r26, r1
    23ce:	b1 1d       	adc	r27, r1
    23d0:	86 87       	std	Z+14, r24	; 0x0e
    23d2:	97 87       	std	Z+15, r25	; 0x0f
    23d4:	a0 8b       	std	Z+16, r26	; 0x10
    23d6:	b1 8b       	std	Z+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (20));
    23d8:	64 e1       	ldi	r22, 0x14	; 20
    23da:	70 e0       	ldi	r23, 0x00	; 0
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	0e 94 5f 2b 	call	0x56be	; 0x56be <vTaskDelay>
	uint16_t state_delay_counter = 0;
	

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    23e4:	08 cc       	rjmp	.-2032   	; 0x1bf6 <_ZN7task_md3runEv+0x96>

000023e6 <_ZN11task_sensor3runEv>:
/** This task interacts with the heat flux sensor in order to capture readings and relay
 *  that data to the user interface task.
 */

void task_sensor::run (void)
{
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	00 d0       	rcall	.+0      	; 0x23ec <_ZN11task_sensor3runEv+0x6>
    23ec:	1f 92       	push	r1
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
    23f2:	8c 01       	movw	r16, r24
	char char_in;                           // Character read from serial device
	time_stamp a_time;                      // Holds the time so it can be displayed
	portTickType previous_ticks;
	//float sensor_readings[sensor_sample_number.get()];
	samples_taken = 0;
    23f4:	fc 01       	movw	r30, r24
    23f6:	15 8e       	std	Z+29, r1	; 0x1d
    23f8:	16 8e       	std	Z+30, r1	; 0x1e
    23fa:	17 8e       	std	Z+31, r1	; 0x1f
    23fc:	10 a2       	std	Z+32, r1	; 0x20
	sample_sum = 0;
    23fe:	11 8e       	std	Z+25, r1	; 0x19
    2400:	12 8e       	std	Z+26, r1	; 0x1a
    2402:	13 8e       	std	Z+27, r1	; 0x1b
    2404:	14 8e       	std	Z+28, r1	; 0x1c
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	0f 92       	push	r0
			the_data = new_data;
    240c:	10 92 5f 21 	sts	0x215F, r1	; 0x80215f <sensor_complete>
			portEXIT_CRITICAL ();
    2410:	0f 90       	pop	r0
    2412:	0f be       	out	0x3f, r0	; 63
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
			the_data = new_data;
    2414:	dd 24       	eor	r13, r13
    2416:	d3 94       	inc	r13
	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
	{
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
    2418:	f8 01       	movw	r30, r16
    241a:	84 85       	ldd	r24, Z+12	; 0x0c
    241c:	81 30       	cpi	r24, 0x01	; 1
    241e:	09 f4       	brne	.+2      	; 0x2422 <_ZN11task_sensor3runEv+0x3c>
    2420:	4b c0       	rjmp	.+150    	; 0x24b8 <_ZN11task_sensor3runEv+0xd2>
    2422:	38 f0       	brcs	.+14     	; 0x2432 <_ZN11task_sensor3runEv+0x4c>
    2424:	82 30       	cpi	r24, 0x02	; 2
    2426:	09 f4       	brne	.+2      	; 0x242a <_ZN11task_sensor3runEv+0x44>
    2428:	13 c1       	rjmp	.+550    	; 0x2650 <_ZN11task_sensor3runEv+0x26a>
    242a:	83 30       	cpi	r24, 0x03	; 3
    242c:	09 f4       	brne	.+2      	; 0x2430 <_ZN11task_sensor3runEv+0x4a>
    242e:	38 c2       	rjmp	.+1136   	; 0x28a0 <_ZN11task_sensor3runEv+0x4ba>
    2430:	df c2       	rjmp	.+1470   	; 0x29f0 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    2438:	0f 90       	pop	r0
    243a:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 0, the sensor task is waiting for the device to enter a certain mode.
			case (0):
		
				//*p_serial << sbg01->get_voltage_mv() <<  endl;
				if (sensor_reading.get())
    243c:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <sensor_reading>
    2440:	88 23       	and	r24, r24
    2442:	71 f0       	breq	.+28     	; 0x2460 <_ZN11task_sensor3runEv+0x7a>
				{
					sample_sum = 0;
    2444:	f8 01       	movw	r30, r16
    2446:	11 8e       	std	Z+25, r1	; 0x19
    2448:	12 8e       	std	Z+26, r1	; 0x1a
    244a:	13 8e       	std	Z+27, r1	; 0x1b
    244c:	14 8e       	std	Z+28, r1	; 0x1c
					samples_taken = 0;
    244e:	15 8e       	std	Z+29, r1	; 0x1d
    2450:	16 8e       	std	Z+30, r1	; 0x1e
    2452:	17 8e       	std	Z+31, r1	; 0x1f
    2454:	10 a2       	std	Z+32, r1	; 0x20
					transition_to(3);
    2456:	63 e0       	ldi	r22, 0x03	; 3
    2458:	c8 01       	movw	r24, r16
    245a:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    245e:	c8 c2       	rjmp	.+1424   	; 0x29f0 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63
				}
				else if(coordinate_mode.get() || incremental_mode.get() || drawing_mode.get())
    246a:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    246e:	81 11       	cpse	r24, r1
    2470:	13 c0       	rjmp	.+38     	; 0x2498 <_ZN11task_sensor3runEv+0xb2>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    2478:	0f 90       	pop	r0
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <incremental_mode>
    2480:	81 11       	cpse	r24, r1
    2482:	0a c0       	rjmp	.+20     	; 0x2498 <_ZN11task_sensor3runEv+0xb2>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    248a:	0f 90       	pop	r0
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	80 91 25 21 	lds	r24, 0x2125	; 0x802125 <drawing_mode>
    2492:	88 23       	and	r24, r24
    2494:	09 f4       	brne	.+2      	; 0x2498 <_ZN11task_sensor3runEv+0xb2>
    2496:	ac c2       	rjmp	.+1368   	; 0x29f0 <_ZN11task_sensor3runEv+0x60a>
				{
					sample_sum = 0;
    2498:	f8 01       	movw	r30, r16
    249a:	11 8e       	std	Z+25, r1	; 0x19
    249c:	12 8e       	std	Z+26, r1	; 0x1a
    249e:	13 8e       	std	Z+27, r1	; 0x1b
    24a0:	14 8e       	std	Z+28, r1	; 0x1c
					samples_taken = 0;
    24a2:	15 8e       	std	Z+29, r1	; 0x1d
    24a4:	16 8e       	std	Z+30, r1	; 0x1e
    24a6:	17 8e       	std	Z+31, r1	; 0x1f
    24a8:	10 a2       	std	Z+32, r1	; 0x20
					current_node = 0;
    24aa:	15 8a       	std	Z+21, r1	; 0x15
    24ac:	16 8a       	std	Z+22, r1	; 0x16
					transition_to(1);
    24ae:	6d 2d       	mov	r22, r13
    24b0:	c8 01       	movw	r24, r16
    24b2:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    24b6:	9c c2       	rjmp	.+1336   	; 0x29f0 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    24be:	0f 90       	pop	r0
    24c0:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 1, the device is in coordinate mode, so the sensor will only take readings
			// after the set delay time has elapsed while the sensor is in the proper position.
			case (1):
			
			if(xmotor_complete.get() && ymotor_complete.get() && zmotor_complete.get())
    24c2:	80 91 62 21 	lds	r24, 0x2162	; 0x802162 <xmotor_complete>
    24c6:	88 23       	and	r24, r24
    24c8:	09 f4       	brne	.+2      	; 0x24cc <_ZN11task_sensor3runEv+0xe6>
    24ca:	92 c2       	rjmp	.+1316   	; 0x29f0 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    24d2:	0f 90       	pop	r0
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	80 91 61 21 	lds	r24, 0x2161	; 0x802161 <ymotor_complete>
    24da:	88 23       	and	r24, r24
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <_ZN11task_sensor3runEv+0xfa>
    24de:	88 c2       	rjmp	.+1296   	; 0x29f0 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    24e0:	0f b6       	in	r0, 0x3f	; 63
    24e2:	f8 94       	cli
    24e4:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    24e6:	0f 90       	pop	r0
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	80 91 60 21 	lds	r24, 0x2160	; 0x802160 <zmotor_complete>
    24ee:	88 23       	and	r24, r24
    24f0:	09 f4       	brne	.+2      	; 0x24f4 <_ZN11task_sensor3runEv+0x10e>
    24f2:	7e c2       	rjmp	.+1276   	; 0x29f0 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    24fa:	0f 90       	pop	r0
    24fc:	0f be       	out	0x3f, r0	; 63
			{
				if (incremental_mode.get())
    24fe:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <incremental_mode>
    2502:	88 23       	and	r24, r24
    2504:	09 f4       	brne	.+2      	; 0x2508 <_ZN11task_sensor3runEv+0x122>
    2506:	2f c0       	rjmp	.+94     	; 0x2566 <_ZN11task_sensor3runEv+0x180>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	f8 94       	cli
    250c:	0f 92       	push	r0
			the_data = new_data;
    250e:	10 92 d9 20 	sts	0x20D9, r1	; 0x8020d9 <incremental_mode>
			portEXIT_CRITICAL ();
    2512:	0f 90       	pop	r0
    2514:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	f8 94       	cli
    251a:	0f 92       	push	r0
			the_data = new_data;
    251c:	d0 92 4c 21 	sts	0x214C, r13	; 0x80214c <next_node>
			portEXIT_CRITICAL ();
    2520:	0f 90       	pop	r0
    2522:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	0f 92       	push	r0
			the_data = new_data;
    252a:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <sensor_reading>
			portEXIT_CRITICAL ();
    252e:	0f 90       	pop	r0
    2530:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	f8 94       	cli
    2536:	0f 92       	push	r0
			the_data = new_data;
    2538:	10 92 62 21 	sts	0x2162, r1	; 0x802162 <xmotor_complete>
			portEXIT_CRITICAL ();
    253c:	0f 90       	pop	r0
    253e:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	0f 92       	push	r0
			the_data = new_data;
    2546:	10 92 61 21 	sts	0x2161, r1	; 0x802161 <ymotor_complete>
			portEXIT_CRITICAL ();
    254a:	0f 90       	pop	r0
    254c:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	0f 92       	push	r0
			the_data = new_data;
    2554:	10 92 60 21 	sts	0x2160, r1	; 0x802160 <zmotor_complete>
			portEXIT_CRITICAL ();
    2558:	0f 90       	pop	r0
    255a:	0f be       	out	0x3f, r0	; 63
					next_node.put(true);
					sensor_reading.put(false);
					xmotor_complete.put(false);
					ymotor_complete.put(false);
					zmotor_complete.put(false);
					transition_to(0);
    255c:	60 e0       	ldi	r22, 0x00	; 0
    255e:	c8 01       	movw	r24, r16
    2560:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    2564:	45 c2       	rjmp	.+1162   	; 0x29f0 <_ZN11task_sensor3runEv+0x60a>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	0f 92       	push	r0
			the_data = new_data;
    256c:	d0 92 5a 21 	sts	0x215A, r13	; 0x80215a <sensor_reading>
			portEXIT_CRITICAL ();
    2570:	0f 90       	pop	r0
    2572:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	0f 92       	push	r0
			temporary_copy = the_data;
    257a:	40 90 51 21 	lds	r4, 0x2151	; 0x802151 <sensor_delay>
    257e:	50 90 52 21 	lds	r5, 0x2152	; 0x802152 <sensor_delay+0x1>
    2582:	60 90 53 21 	lds	r6, 0x2153	; 0x802153 <sensor_delay+0x2>
    2586:	70 90 54 21 	lds	r7, 0x2154	; 0x802154 <sensor_delay+0x3>
			portEXIT_CRITICAL ();
    258a:	0f 90       	pop	r0
    258c:	0f be       	out	0x3f, r0	; 63
				}
				else
				{
					sensor_reading.put(true);
					*p_serial <<  PMS ("Sensor Reading ") << ++current_node << " (Delay = " << sensor_delay.get() << " ms)" << endl;
    258e:	f8 01       	movw	r30, r16
    2590:	e5 88       	ldd	r14, Z+21	; 0x15
    2592:	f6 88       	ldd	r15, Z+22	; 0x16
    2594:	ff ef       	ldi	r31, 0xFF	; 255
    2596:	ef 1a       	sub	r14, r31
    2598:	ff 0a       	sbc	r15, r31
    259a:	f8 01       	movw	r30, r16
    259c:	e5 8a       	std	Z+21, r14	; 0x15
    259e:	f6 8a       	std	Z+22, r15	; 0x16
    25a0:	6a e0       	ldi	r22, 0x0A	; 10
    25a2:	86 81       	ldd	r24, Z+6	; 0x06
    25a4:	97 81       	ldd	r25, Z+7	; 0x07
    25a6:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    25aa:	5c 01       	movw	r10, r24
    25ac:	68 ed       	ldi	r22, 0xD8	; 216
    25ae:	76 e0       	ldi	r23, 0x06	; 6
    25b0:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    25b4:	b7 01       	movw	r22, r14
    25b6:	c5 01       	movw	r24, r10
    25b8:	0e 94 fd 31 	call	0x63fa	; 0x63fa <_ZN8emstreamlsEj>
    25bc:	7c 01       	movw	r14, r24
    25be:	6f e0       	ldi	r22, 0x0F	; 15
    25c0:	70 e2       	ldi	r23, 0x20	; 32
    25c2:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    25c6:	b3 01       	movw	r22, r6
    25c8:	a2 01       	movw	r20, r4
    25ca:	c7 01       	movw	r24, r14
    25cc:	0e 94 31 32 	call	0x6462	; 0x6462 <_ZN8emstreamlsEm>
    25d0:	7c 01       	movw	r14, r24
    25d2:	6a e1       	ldi	r22, 0x1A	; 26
    25d4:	70 e2       	ldi	r23, 0x20	; 32
    25d6:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    25da:	66 e0       	ldi	r22, 0x06	; 6
    25dc:	c7 01       	movw	r24, r14
    25de:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
					node++;
    25e2:	f8 01       	movw	r30, r16
    25e4:	82 89       	ldd	r24, Z+18	; 0x12
    25e6:	8f 5f       	subi	r24, 0xFF	; 255
    25e8:	82 8b       	std	Z+18, r24	; 0x12
					previous_ticks = xTaskGetTickCount();
    25ea:	0e 94 59 29 	call	0x52b2	; 0x52b2 <xTaskGetTickCount>
    25ee:	69 83       	std	Y+1, r22	; 0x01
    25f0:	7a 83       	std	Y+2, r23	; 0x02
    25f2:	8b 83       	std	Y+3, r24	; 0x03
    25f4:	9c 83       	std	Y+4, r25	; 0x04
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    25fc:	0f 90       	pop	r0
    25fe:	0f be       	out	0x3f, r0	; 63
		 *                    delay so as to get precise, regular timing
		 *  @param milliseconds The duration of the delay interval in milliseconds
		 */
		void delay_from_to_ms (portTickType& from_ticks, portTickType milliseconds)
		{
			portTickType interval = configMS_TO_TICKS (milliseconds);
    2600:	20 91 51 21 	lds	r18, 0x2151	; 0x802151 <sensor_delay>
    2604:	30 91 52 21 	lds	r19, 0x2152	; 0x802152 <sensor_delay+0x1>
    2608:	40 91 53 21 	lds	r20, 0x2153	; 0x802153 <sensor_delay+0x2>
    260c:	50 91 54 21 	lds	r21, 0x2154	; 0x802154 <sensor_delay+0x3>
    2610:	a8 ee       	ldi	r26, 0xE8	; 232
    2612:	b3 e0       	ldi	r27, 0x03	; 3
    2614:	0e 94 60 38 	call	0x70c0	; 0x70c0 <__muluhisi3>
    2618:	68 3e       	cpi	r22, 0xE8	; 232
    261a:	f3 e0       	ldi	r31, 0x03	; 3
    261c:	7f 07       	cpc	r23, r31
    261e:	81 05       	cpc	r24, r1
    2620:	91 05       	cpc	r25, r1
    2622:	48 f0       	brcs	.+18     	; 0x2636 <_ZN11task_sensor3runEv+0x250>
    2624:	28 ee       	ldi	r18, 0xE8	; 232
    2626:	33 e0       	ldi	r19, 0x03	; 3
    2628:	40 e0       	ldi	r20, 0x00	; 0
    262a:	50 e0       	ldi	r21, 0x00	; 0
    262c:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    2630:	ba 01       	movw	r22, r20
    2632:	a9 01       	movw	r20, r18
    2634:	04 c0       	rjmp	.+8      	; 0x263e <_ZN11task_sensor3runEv+0x258>
    2636:	41 e0       	ldi	r20, 0x01	; 1
    2638:	50 e0       	ldi	r21, 0x00	; 0
    263a:	60 e0       	ldi	r22, 0x00	; 0
    263c:	70 e0       	ldi	r23, 0x00	; 0
			vTaskDelayUntil (&from_ticks, interval);
    263e:	ce 01       	movw	r24, r28
    2640:	01 96       	adiw	r24, 0x01	; 1
    2642:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <vTaskDelayUntil>
					delay_from_to_ms(previous_ticks, sensor_delay.get());
					transition_to(2);
    2646:	62 e0       	ldi	r22, 0x02	; 2
    2648:	c8 01       	movw	r24, r16
    264a:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    264e:	d0 c1       	rjmp	.+928    	; 0x29f0 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	0f 92       	push	r0
			temporary_copy = the_data;
    2656:	60 91 56 21 	lds	r22, 0x2156	; 0x802156 <sensor_sample_number>
    265a:	70 91 57 21 	lds	r23, 0x2157	; 0x802157 <sensor_sample_number+0x1>
    265e:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <sensor_sample_number+0x2>
    2662:	90 91 59 21 	lds	r25, 0x2159	; 0x802159 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    2666:	0f 90       	pop	r0
    2668:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 3, the device has waited for the heat flux gage to get a steady reading, and will
			// now take a number of samples to be averaged and then sent back to the interface.
			case (2):
									
			if(samples_taken < sensor_sample_number.get())
    266a:	f8 01       	movw	r30, r16
    266c:	45 8c       	ldd	r4, Z+29	; 0x1d
    266e:	56 8c       	ldd	r5, Z+30	; 0x1e
    2670:	67 8c       	ldd	r6, Z+31	; 0x1f
    2672:	70 a0       	ldd	r7, Z+32	; 0x20
    2674:	46 16       	cp	r4, r22
    2676:	57 06       	cpc	r5, r23
    2678:	68 06       	cpc	r6, r24
    267a:	79 06       	cpc	r7, r25
    267c:	f0 f4       	brcc	.+60     	; 0x26ba <_ZN11task_sensor3runEv+0x2d4>
			{
				//sensor_readings[samples_taken] = sbg01->get_voltage_mv();
				sample_sum += sbg01->get_voltage_mv();
    267e:	83 89       	ldd	r24, Z+19	; 0x13
    2680:	94 89       	ldd	r25, Z+20	; 0x14
    2682:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN5SBG0114get_voltage_mvEv>
    2686:	9b 01       	movw	r18, r22
    2688:	ac 01       	movw	r20, r24
    268a:	f8 01       	movw	r30, r16
    268c:	61 8d       	ldd	r22, Z+25	; 0x19
    268e:	72 8d       	ldd	r23, Z+26	; 0x1a
    2690:	83 8d       	ldd	r24, Z+27	; 0x1b
    2692:	94 8d       	ldd	r25, Z+28	; 0x1c
    2694:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <__addsf3>
    2698:	f8 01       	movw	r30, r16
    269a:	61 8f       	std	Z+25, r22	; 0x19
    269c:	72 8f       	std	Z+26, r23	; 0x1a
    269e:	83 8f       	std	Z+27, r24	; 0x1b
    26a0:	94 8f       	std	Z+28, r25	; 0x1c
				samples_taken++;
    26a2:	85 8d       	ldd	r24, Z+29	; 0x1d
    26a4:	96 8d       	ldd	r25, Z+30	; 0x1e
    26a6:	a7 8d       	ldd	r26, Z+31	; 0x1f
    26a8:	b0 a1       	ldd	r27, Z+32	; 0x20
    26aa:	01 96       	adiw	r24, 0x01	; 1
    26ac:	a1 1d       	adc	r26, r1
    26ae:	b1 1d       	adc	r27, r1
    26b0:	85 8f       	std	Z+29, r24	; 0x1d
    26b2:	96 8f       	std	Z+30, r25	; 0x1e
    26b4:	a7 8f       	std	Z+31, r26	; 0x1f
    26b6:	b0 a3       	std	Z+32, r27	; 0x20
    26b8:	9b c1       	rjmp	.+822    	; 0x29f0 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	f8 94       	cli
    26be:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    26c0:	0f 90       	pop	r0
    26c2:	0f be       	out	0x3f, r0	; 63
			}
			else
			{
				heat_flux.put(sample_sum/sensor_sample_number.get());
    26c4:	0e 94 08 37 	call	0x6e10	; 0x6e10 <__floatunsisf>
    26c8:	9b 01       	movw	r18, r22
    26ca:	ac 01       	movw	r20, r24
    26cc:	f8 01       	movw	r30, r16
    26ce:	61 8d       	ldd	r22, Z+25	; 0x19
    26d0:	72 8d       	ldd	r23, Z+26	; 0x1a
    26d2:	83 8d       	ldd	r24, Z+27	; 0x1b
    26d4:	94 8d       	ldd	r25, Z+28	; 0x1c
    26d6:	0e 94 67 36 	call	0x6cce	; 0x6cce <__divsf3>
    26da:	2b 01       	movw	r4, r22
    26dc:	3c 01       	movw	r6, r24
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	0f 92       	push	r0
			the_data = new_data;
    26e4:	60 93 5b 21 	sts	0x215B, r22	; 0x80215b <heat_flux>
    26e8:	70 93 5c 21 	sts	0x215C, r23	; 0x80215c <heat_flux+0x1>
    26ec:	80 93 5d 21 	sts	0x215D, r24	; 0x80215d <heat_flux+0x2>
    26f0:	90 93 5e 21 	sts	0x215E, r25	; 0x80215e <heat_flux+0x3>
			portEXIT_CRITICAL ();
    26f4:	0f 90       	pop	r0
    26f6:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    26fe:	0f 90       	pop	r0
    2700:	0f be       	out	0x3f, r0	; 63
				*p_serial << PMS ("HF:") << heat_flux.get()*6.289 << endl;
    2702:	6a e0       	ldi	r22, 0x0A	; 10
    2704:	f8 01       	movw	r30, r16
    2706:	86 81       	ldd	r24, Z+6	; 0x06
    2708:	97 81       	ldd	r25, Z+7	; 0x07
    270a:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    270e:	7c 01       	movw	r14, r24
    2710:	64 ed       	ldi	r22, 0xD4	; 212
    2712:	76 e0       	ldi	r23, 0x06	; 6
    2714:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    2718:	2d e7       	ldi	r18, 0x7D	; 125
    271a:	3f e3       	ldi	r19, 0x3F	; 63
    271c:	49 ec       	ldi	r20, 0xC9	; 201
    271e:	50 e4       	ldi	r21, 0x40	; 64
    2720:	c3 01       	movw	r24, r6
    2722:	b2 01       	movw	r22, r4
    2724:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__mulsf3>
    2728:	ab 01       	movw	r20, r22
    272a:	bc 01       	movw	r22, r24
    272c:	c7 01       	movw	r24, r14
    272e:	0e 94 25 31 	call	0x624a	; 0x624a <_ZN8emstreamlsEd>
    2732:	66 e0       	ldi	r22, 0x06	; 6
    2734:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	0f 92       	push	r0
			temporary_copy = the_data;
    273e:	40 90 5b 21 	lds	r4, 0x215B	; 0x80215b <heat_flux>
    2742:	50 90 5c 21 	lds	r5, 0x215C	; 0x80215c <heat_flux+0x1>
    2746:	60 90 5d 21 	lds	r6, 0x215D	; 0x80215d <heat_flux+0x2>
    274a:	70 90 5e 21 	lds	r7, 0x215E	; 0x80215e <heat_flux+0x3>
			portEXIT_CRITICAL ();
    274e:	0f 90       	pop	r0
    2750:	0f be       	out	0x3f, r0	; 63
				*p_serial << PMS ("mV:") << heat_flux.get() << endl;
    2752:	6a e0       	ldi	r22, 0x0A	; 10
    2754:	f8 01       	movw	r30, r16
    2756:	86 81       	ldd	r24, Z+6	; 0x06
    2758:	97 81       	ldd	r25, Z+7	; 0x07
    275a:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    275e:	7c 01       	movw	r14, r24
    2760:	60 ed       	ldi	r22, 0xD0	; 208
    2762:	76 e0       	ldi	r23, 0x06	; 6
    2764:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    2768:	b3 01       	movw	r22, r6
    276a:	a2 01       	movw	r20, r4
    276c:	c7 01       	movw	r24, r14
    276e:	0e 94 9b 30 	call	0x6136	; 0x6136 <_ZN8emstreamlsEf>
    2772:	66 e0       	ldi	r22, 0x06	; 6
    2774:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
				//*p_serial << PMS ("Sample std dev: ") << get_std_dev(heat_flux.get(), sensor_sample_number.get(), sensor_readings) << endl;
				sample_sum = 0;
    2778:	f8 01       	movw	r30, r16
    277a:	11 8e       	std	Z+25, r1	; 0x19
    277c:	12 8e       	std	Z+26, r1	; 0x1a
    277e:	13 8e       	std	Z+27, r1	; 0x1b
    2780:	14 8e       	std	Z+28, r1	; 0x1c
				samples_taken = 0;
    2782:	15 8e       	std	Z+29, r1	; 0x1d
    2784:	16 8e       	std	Z+30, r1	; 0x1e
    2786:	17 8e       	std	Z+31, r1	; 0x1f
    2788:	10 a2       	std	Z+32, r1	; 0x20
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    2790:	0f 90       	pop	r0
    2792:	0f be       	out	0x3f, r0	; 63
				if (current_node < total_nodes.get())
    2794:	20 91 4a 21 	lds	r18, 0x214A	; 0x80214a <total_nodes>
    2798:	30 91 4b 21 	lds	r19, 0x214B	; 0x80214b <total_nodes+0x1>
    279c:	85 89       	ldd	r24, Z+21	; 0x15
    279e:	96 89       	ldd	r25, Z+22	; 0x16
    27a0:	82 17       	cp	r24, r18
    27a2:	93 07       	cpc	r25, r19
    27a4:	08 f0       	brcs	.+2      	; 0x27a8 <_ZN11task_sensor3runEv+0x3c2>
    27a6:	28 c0       	rjmp	.+80     	; 0x27f8 <_ZN11task_sensor3runEv+0x412>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	0f 92       	push	r0
			the_data = new_data;
    27ae:	d0 92 4c 21 	sts	0x214C, r13	; 0x80214c <next_node>
			portEXIT_CRITICAL ();
    27b2:	0f 90       	pop	r0
    27b4:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	0f 92       	push	r0
			the_data = new_data;
    27bc:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <sensor_reading>
			portEXIT_CRITICAL ();
    27c0:	0f 90       	pop	r0
    27c2:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	0f 92       	push	r0
			the_data = new_data;
    27ca:	10 92 62 21 	sts	0x2162, r1	; 0x802162 <xmotor_complete>
			portEXIT_CRITICAL ();
    27ce:	0f 90       	pop	r0
    27d0:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	f8 94       	cli
    27d6:	0f 92       	push	r0
			the_data = new_data;
    27d8:	10 92 61 21 	sts	0x2161, r1	; 0x802161 <ymotor_complete>
			portEXIT_CRITICAL ();
    27dc:	0f 90       	pop	r0
    27de:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	f8 94       	cli
    27e4:	0f 92       	push	r0
			the_data = new_data;
    27e6:	10 92 60 21 	sts	0x2160, r1	; 0x802160 <zmotor_complete>
			portEXIT_CRITICAL ();
    27ea:	0f 90       	pop	r0
    27ec:	0f be       	out	0x3f, r0	; 63
					next_node.put(true);
					sensor_reading.put(false);
					xmotor_complete.put(false);
					ymotor_complete.put(false);
					zmotor_complete.put(false);
					transition_to(1);
    27ee:	6d 2d       	mov	r22, r13
    27f0:	c8 01       	movw	r24, r16
    27f2:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    27f6:	fc c0       	rjmp	.+504    	; 0x29f0 <_ZN11task_sensor3runEv+0x60a>
				}
				else
				{
					*p_serial << PMS ("Routine complete.") << endl;	
    27f8:	6a e0       	ldi	r22, 0x0A	; 10
    27fa:	f8 01       	movw	r30, r16
    27fc:	86 81       	ldd	r24, Z+6	; 0x06
    27fe:	97 81       	ldd	r25, Z+7	; 0x07
    2800:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    2804:	7c 01       	movw	r14, r24
    2806:	6e eb       	ldi	r22, 0xBE	; 190
    2808:	76 e0       	ldi	r23, 0x06	; 6
    280a:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    280e:	66 e0       	ldi	r22, 0x06	; 6
    2810:	c7 01       	movw	r24, r14
    2812:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
					transition_to(0);
    2816:	60 e0       	ldi	r22, 0x00	; 0
    2818:	c8 01       	movw	r24, r16
    281a:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	0f 92       	push	r0
			the_data = new_data;
    2824:	10 92 db 20 	sts	0x20DB, r1	; 0x8020db <coordinate_mode>
			portEXIT_CRITICAL ();
    2828:	0f 90       	pop	r0
    282a:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	0f 92       	push	r0
			the_data = new_data;
    2832:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <drawing_mode>
			portEXIT_CRITICAL ();
    2836:	0f 90       	pop	r0
    2838:	0f be       	out	0x3f, r0	; 63
					coordinate_mode.put(false);
					drawing_mode.put(false);
					*p_serial << PMS ("C") << endl;
    283a:	6a e0       	ldi	r22, 0x0A	; 10
    283c:	f8 01       	movw	r30, r16
    283e:	86 81       	ldd	r24, Z+6	; 0x06
    2840:	97 81       	ldd	r25, Z+7	; 0x07
    2842:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    2846:	7c 01       	movw	r14, r24
    2848:	6c eb       	ldi	r22, 0xBC	; 188
    284a:	76 e0       	ldi	r23, 0x06	; 6
    284c:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    2850:	66 e0       	ldi	r22, 0x06	; 6
    2852:	c7 01       	movw	r24, r14
    2854:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	0f 92       	push	r0
			the_data = new_data;
    285e:	10 92 4c 21 	sts	0x214C, r1	; 0x80214c <next_node>
			portEXIT_CRITICAL ();
    2862:	0f 90       	pop	r0
    2864:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	f8 94       	cli
    286a:	0f 92       	push	r0
			the_data = new_data;
    286c:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <sensor_reading>
			portEXIT_CRITICAL ();
    2870:	0f 90       	pop	r0
    2872:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	0f 92       	push	r0
			the_data = new_data;
    287a:	10 92 62 21 	sts	0x2162, r1	; 0x802162 <xmotor_complete>
			portEXIT_CRITICAL ();
    287e:	0f 90       	pop	r0
    2880:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	0f 92       	push	r0
			the_data = new_data;
    2888:	10 92 61 21 	sts	0x2161, r1	; 0x802161 <ymotor_complete>
			portEXIT_CRITICAL ();
    288c:	0f 90       	pop	r0
    288e:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	f8 94       	cli
    2894:	0f 92       	push	r0
			the_data = new_data;
    2896:	10 92 60 21 	sts	0x2160, r1	; 0x802160 <zmotor_complete>
			portEXIT_CRITICAL ();
    289a:	0f 90       	pop	r0
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	a8 c0       	rjmp	.+336    	; 0x29f0 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	0f 92       	push	r0
			temporary_copy = the_data;
    28a6:	60 91 56 21 	lds	r22, 0x2156	; 0x802156 <sensor_sample_number>
    28aa:	70 91 57 21 	lds	r23, 0x2157	; 0x802157 <sensor_sample_number+0x1>
    28ae:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <sensor_sample_number+0x2>
    28b2:	90 91 59 21 	lds	r25, 0x2159	; 0x802159 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    28b6:	0f 90       	pop	r0
    28b8:	0f be       	out	0x3f, r0	; 63
			// In state 4, the interface has requested a sensor reading. The ADC will sample
			// a set number of readings and then take the average and send the result back
			// over serial.
			case (3):
			
			if(samples_taken < sensor_sample_number.get())
    28ba:	f8 01       	movw	r30, r16
    28bc:	45 8c       	ldd	r4, Z+29	; 0x1d
    28be:	56 8c       	ldd	r5, Z+30	; 0x1e
    28c0:	67 8c       	ldd	r6, Z+31	; 0x1f
    28c2:	70 a0       	ldd	r7, Z+32	; 0x20
    28c4:	46 16       	cp	r4, r22
    28c6:	57 06       	cpc	r5, r23
    28c8:	68 06       	cpc	r6, r24
    28ca:	79 06       	cpc	r7, r25
    28cc:	f0 f4       	brcc	.+60     	; 0x290a <_ZN11task_sensor3runEv+0x524>
			{
				sample_sum += sbg01->get_voltage_mv();
    28ce:	83 89       	ldd	r24, Z+19	; 0x13
    28d0:	94 89       	ldd	r25, Z+20	; 0x14
    28d2:	0e 94 37 09 	call	0x126e	; 0x126e <_ZN5SBG0114get_voltage_mvEv>
    28d6:	9b 01       	movw	r18, r22
    28d8:	ac 01       	movw	r20, r24
    28da:	f8 01       	movw	r30, r16
    28dc:	61 8d       	ldd	r22, Z+25	; 0x19
    28de:	72 8d       	ldd	r23, Z+26	; 0x1a
    28e0:	83 8d       	ldd	r24, Z+27	; 0x1b
    28e2:	94 8d       	ldd	r25, Z+28	; 0x1c
    28e4:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <__addsf3>
    28e8:	f8 01       	movw	r30, r16
    28ea:	61 8f       	std	Z+25, r22	; 0x19
    28ec:	72 8f       	std	Z+26, r23	; 0x1a
    28ee:	83 8f       	std	Z+27, r24	; 0x1b
    28f0:	94 8f       	std	Z+28, r25	; 0x1c
				samples_taken++;
    28f2:	85 8d       	ldd	r24, Z+29	; 0x1d
    28f4:	96 8d       	ldd	r25, Z+30	; 0x1e
    28f6:	a7 8d       	ldd	r26, Z+31	; 0x1f
    28f8:	b0 a1       	ldd	r27, Z+32	; 0x20
    28fa:	01 96       	adiw	r24, 0x01	; 1
    28fc:	a1 1d       	adc	r26, r1
    28fe:	b1 1d       	adc	r27, r1
    2900:	85 8f       	std	Z+29, r24	; 0x1d
    2902:	96 8f       	std	Z+30, r25	; 0x1e
    2904:	a7 8f       	std	Z+31, r26	; 0x1f
    2906:	b0 a3       	std	Z+32, r27	; 0x20
    2908:	73 c0       	rjmp	.+230    	; 0x29f0 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    2910:	0f 90       	pop	r0
    2912:	0f be       	out	0x3f, r0	; 63
			}
			else
			{
				heat_flux.put(sample_sum/sensor_sample_number.get());
    2914:	0e 94 08 37 	call	0x6e10	; 0x6e10 <__floatunsisf>
    2918:	9b 01       	movw	r18, r22
    291a:	ac 01       	movw	r20, r24
    291c:	f8 01       	movw	r30, r16
    291e:	61 8d       	ldd	r22, Z+25	; 0x19
    2920:	72 8d       	ldd	r23, Z+26	; 0x1a
    2922:	83 8d       	ldd	r24, Z+27	; 0x1b
    2924:	94 8d       	ldd	r25, Z+28	; 0x1c
    2926:	0e 94 67 36 	call	0x6cce	; 0x6cce <__divsf3>
    292a:	2b 01       	movw	r4, r22
    292c:	3c 01       	movw	r6, r24
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	0f 92       	push	r0
			the_data = new_data;
    2934:	60 93 5b 21 	sts	0x215B, r22	; 0x80215b <heat_flux>
    2938:	70 93 5c 21 	sts	0x215C, r23	; 0x80215c <heat_flux+0x1>
    293c:	80 93 5d 21 	sts	0x215D, r24	; 0x80215d <heat_flux+0x2>
    2940:	90 93 5e 21 	sts	0x215E, r25	; 0x80215e <heat_flux+0x3>
			portEXIT_CRITICAL ();
    2944:	0f 90       	pop	r0
    2946:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    294e:	0f 90       	pop	r0
    2950:	0f be       	out	0x3f, r0	; 63
				*p_serial << PMS ("HF:") << heat_flux.get()*6.289 << endl;
    2952:	6a e0       	ldi	r22, 0x0A	; 10
    2954:	f8 01       	movw	r30, r16
    2956:	86 81       	ldd	r24, Z+6	; 0x06
    2958:	97 81       	ldd	r25, Z+7	; 0x07
    295a:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    295e:	7c 01       	movw	r14, r24
    2960:	68 eb       	ldi	r22, 0xB8	; 184
    2962:	76 e0       	ldi	r23, 0x06	; 6
    2964:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    2968:	2d e7       	ldi	r18, 0x7D	; 125
    296a:	3f e3       	ldi	r19, 0x3F	; 63
    296c:	49 ec       	ldi	r20, 0xC9	; 201
    296e:	50 e4       	ldi	r21, 0x40	; 64
    2970:	c3 01       	movw	r24, r6
    2972:	b2 01       	movw	r22, r4
    2974:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__mulsf3>
    2978:	ab 01       	movw	r20, r22
    297a:	bc 01       	movw	r22, r24
    297c:	c7 01       	movw	r24, r14
    297e:	0e 94 25 31 	call	0x624a	; 0x624a <_ZN8emstreamlsEd>
    2982:	66 e0       	ldi	r22, 0x06	; 6
    2984:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	f8 94       	cli
    298c:	0f 92       	push	r0
			temporary_copy = the_data;
    298e:	40 90 5b 21 	lds	r4, 0x215B	; 0x80215b <heat_flux>
    2992:	50 90 5c 21 	lds	r5, 0x215C	; 0x80215c <heat_flux+0x1>
    2996:	60 90 5d 21 	lds	r6, 0x215D	; 0x80215d <heat_flux+0x2>
    299a:	70 90 5e 21 	lds	r7, 0x215E	; 0x80215e <heat_flux+0x3>
			portEXIT_CRITICAL ();
    299e:	0f 90       	pop	r0
    29a0:	0f be       	out	0x3f, r0	; 63
				*p_serial << PMS ("mV:") << heat_flux.get() << endl;
    29a2:	6a e0       	ldi	r22, 0x0A	; 10
    29a4:	f8 01       	movw	r30, r16
    29a6:	86 81       	ldd	r24, Z+6	; 0x06
    29a8:	97 81       	ldd	r25, Z+7	; 0x07
    29aa:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    29ae:	7c 01       	movw	r14, r24
    29b0:	64 eb       	ldi	r22, 0xB4	; 180
    29b2:	76 e0       	ldi	r23, 0x06	; 6
    29b4:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    29b8:	b3 01       	movw	r22, r6
    29ba:	a2 01       	movw	r20, r4
    29bc:	c7 01       	movw	r24, r14
    29be:	0e 94 9b 30 	call	0x6136	; 0x6136 <_ZN8emstreamlsEf>
    29c2:	66 e0       	ldi	r22, 0x06	; 6
    29c4:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
				//*p_serial << PMS ("Sample std dev: ") << get_std_dev(heat_flux.get(), sensor_sample_number.get(), sensor_readings) << endl;
				sample_sum = 0;
    29c8:	f8 01       	movw	r30, r16
    29ca:	11 8e       	std	Z+25, r1	; 0x19
    29cc:	12 8e       	std	Z+26, r1	; 0x1a
    29ce:	13 8e       	std	Z+27, r1	; 0x1b
    29d0:	14 8e       	std	Z+28, r1	; 0x1c
				samples_taken = 0;
    29d2:	15 8e       	std	Z+29, r1	; 0x1d
    29d4:	16 8e       	std	Z+30, r1	; 0x1e
    29d6:	17 8e       	std	Z+31, r1	; 0x1f
    29d8:	10 a2       	std	Z+32, r1	; 0x20
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	0f 92       	push	r0
			the_data = new_data;
    29e0:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <sensor_reading>
			portEXIT_CRITICAL ();
    29e4:	0f 90       	pop	r0
    29e6:	0f be       	out	0x3f, r0	; 63
				sensor_reading.put(false);
				transition_to(0);
    29e8:	60 e0       	ldi	r22, 0x00	; 0
    29ea:	c8 01       	movw	r24, r16
    29ec:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
			
			break;

		} // End switch state

		runs++;                             // Increment counter for debugging
    29f0:	f8 01       	movw	r30, r16
    29f2:	86 85       	ldd	r24, Z+14	; 0x0e
    29f4:	97 85       	ldd	r25, Z+15	; 0x0f
    29f6:	a0 89       	ldd	r26, Z+16	; 0x10
    29f8:	b1 89       	ldd	r27, Z+17	; 0x11
    29fa:	01 96       	adiw	r24, 0x01	; 1
    29fc:	a1 1d       	adc	r26, r1
    29fe:	b1 1d       	adc	r27, r1
    2a00:	86 87       	std	Z+14, r24	; 0x0e
    2a02:	97 87       	std	Z+15, r25	; 0x0f
    2a04:	a0 8b       	std	Z+16, r26	; 0x10
    2a06:	b1 8b       	std	Z+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (1));
    2a08:	61 e0       	ldi	r22, 0x01	; 1
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	0e 94 5f 2b 	call	0x56be	; 0x56be <vTaskDelay>
	sensor_complete.put(false);
	

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    2a14:	01 cd       	rjmp	.-1534   	; 0x2418 <_ZN11task_sensor3runEv+0x32>

00002a16 <_ZN11task_sensorC1EPKchjP8emstreamP5SBG01>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

task_sensor::task_sensor (const char* a_name, 
    2a16:	cf 92       	push	r12
    2a18:	df 92       	push	r13
    2a1a:	ef 92       	push	r14
    2a1c:	ff 92       	push	r15
    2a1e:	0f 93       	push	r16
    2a20:	1f 93       	push	r17
    2a22:	cf 93       	push	r28
    2a24:	df 93       	push	r29
    2a26:	ec 01       	movw	r28, r24
    2a28:	6b 01       	movw	r12, r22
					  unsigned portBASE_TYPE a_priority, 
					  size_t a_stack_size,
					  emstream* p_ser_dev,
					  SBG01* sbg01
					 )
	: frt_task (a_name, a_priority, a_stack_size, p_ser_dev), sbg01(sbg01)
    2a2a:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <_ZN8frt_taskC1EPKchjP8emstream>
    2a2e:	83 e2       	ldi	r24, 0x23	; 35
    2a30:	90 e2       	ldi	r25, 0x20	; 32
    2a32:	88 83       	st	Y, r24
    2a34:	99 83       	std	Y+1, r25	; 0x01
    2a36:	eb 8a       	std	Y+19, r14	; 0x13
    2a38:	fc 8a       	std	Y+20, r15	; 0x14
{
	task_name = a_name;	
    2a3a:	c9 a2       	std	Y+33, r12	; 0x21
    2a3c:	da a2       	std	Y+34, r13	; 0x22
}
    2a3e:	df 91       	pop	r29
    2a40:	cf 91       	pop	r28
    2a42:	1f 91       	pop	r17
    2a44:	0f 91       	pop	r16
    2a46:	ff 90       	pop	r15
    2a48:	ef 90       	pop	r14
    2a4a:	df 90       	pop	r13
    2a4c:	cf 90       	pop	r12
    2a4e:	08 95       	ret

00002a50 <_ZN9task_userC1EPKchjP8emstream>:
	// Show how the timer/counter is set up to cause RTOS timer ticks
	*p_serial << PMS (", TCC0CCA=") << TCC0.CCA << endl << endl;

	// Have the tasks print their status
	print_task_list (p_serial);
}
    2a50:	ef 92       	push	r14
    2a52:	ff 92       	push	r15
    2a54:	0f 93       	push	r16
    2a56:	1f 93       	push	r17
    2a58:	cf 93       	push	r28
    2a5a:	df 93       	push	r29
    2a5c:	ec 01       	movw	r28, r24
    2a5e:	7b 01       	movw	r14, r22
    2a60:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <_ZN8frt_taskC1EPKchjP8emstream>
    2a64:	8b e2       	ldi	r24, 0x2B	; 43
    2a66:	90 e2       	ldi	r25, 0x20	; 32
    2a68:	88 83       	st	Y, r24
    2a6a:	99 83       	std	Y+1, r25	; 0x01
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e0 5e       	subi	r30, 0xE0	; 224
    2a70:	fe 4f       	sbci	r31, 0xFE	; 254
    2a72:	e0 82       	st	Z, r14
    2a74:	f1 82       	std	Z+1, r15	; 0x01
    2a76:	ce 5e       	subi	r28, 0xEE	; 238
    2a78:	de 4f       	sbci	r29, 0xFE	; 254
    2a7a:	18 82       	st	Y, r1
    2a7c:	df 91       	pop	r29
    2a7e:	cf 91       	pop	r28
    2a80:	1f 91       	pop	r17
    2a82:	0f 91       	pop	r16
    2a84:	ff 90       	pop	r15
    2a86:	ef 90       	pop	r14
    2a88:	08 95       	ret

00002a8a <_ZN9task_user10str_to_intEv>:
    2a8a:	bf 92       	push	r11
    2a8c:	cf 92       	push	r12
    2a8e:	df 92       	push	r13
    2a90:	ef 92       	push	r14
    2a92:	ff 92       	push	r15
    2a94:	0f 93       	push	r16
    2a96:	1f 93       	push	r17
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	ae 5e       	subi	r26, 0xEE	; 238
    2aa2:	be 4f       	sbci	r27, 0xFE	; 254
    2aa4:	2c 91       	ld	r18, X
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	21 50       	subi	r18, 0x01	; 1
    2aaa:	31 09       	sbc	r19, r1
    2aac:	12 16       	cp	r1, r18
    2aae:	13 06       	cpc	r1, r19
    2ab0:	a4 f5       	brge	.+104    	; 0x2b1a <_ZN9task_user10str_to_intEv+0x90>
    2ab2:	40 e0       	ldi	r20, 0x00	; 0
    2ab4:	50 e0       	ldi	r21, 0x00	; 0
    2ab6:	b1 2c       	mov	r11, r1
    2ab8:	60 e0       	ldi	r22, 0x00	; 0
    2aba:	70 e0       	ldi	r23, 0x00	; 0
    2abc:	cb 01       	movw	r24, r22
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	88 0f       	add	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	aa 1f       	adc	r26, r26
    2ac8:	bb 1f       	adc	r27, r27
    2aca:	6c 01       	movw	r12, r24
    2acc:	7d 01       	movw	r14, r26
    2ace:	cc 0c       	add	r12, r12
    2ad0:	dd 1c       	adc	r13, r13
    2ad2:	ee 1c       	adc	r14, r14
    2ad4:	ff 1c       	adc	r15, r15
    2ad6:	cc 0c       	add	r12, r12
    2ad8:	dd 1c       	adc	r13, r13
    2ada:	ee 1c       	adc	r14, r14
    2adc:	ff 1c       	adc	r15, r15
    2ade:	8c 0d       	add	r24, r12
    2ae0:	9d 1d       	adc	r25, r13
    2ae2:	ae 1d       	adc	r26, r14
    2ae4:	bf 1d       	adc	r27, r15
    2ae6:	4e 0f       	add	r20, r30
    2ae8:	5f 1f       	adc	r21, r31
    2aea:	ea 01       	movw	r28, r20
    2aec:	4a 89       	ldd	r20, Y+18	; 0x12
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	40 53       	subi	r20, 0x30	; 48
    2af2:	51 09       	sbc	r21, r1
    2af4:	05 2e       	mov	r0, r21
    2af6:	00 0c       	add	r0, r0
    2af8:	66 0b       	sbc	r22, r22
    2afa:	77 0b       	sbc	r23, r23
    2afc:	7a 01       	movw	r14, r20
    2afe:	8b 01       	movw	r16, r22
    2b00:	e8 0e       	add	r14, r24
    2b02:	f9 1e       	adc	r15, r25
    2b04:	0a 1f       	adc	r16, r26
    2b06:	1b 1f       	adc	r17, r27
    2b08:	c8 01       	movw	r24, r16
    2b0a:	b7 01       	movw	r22, r14
    2b0c:	b3 94       	inc	r11
    2b0e:	4b 2d       	mov	r20, r11
    2b10:	50 e0       	ldi	r21, 0x00	; 0
    2b12:	42 17       	cp	r20, r18
    2b14:	53 07       	cpc	r21, r19
    2b16:	9c f2       	brlt	.-90     	; 0x2abe <_ZN9task_user10str_to_intEv+0x34>
    2b18:	03 c0       	rjmp	.+6      	; 0x2b20 <_ZN9task_user10str_to_intEv+0x96>
    2b1a:	60 e0       	ldi	r22, 0x00	; 0
    2b1c:	70 e0       	ldi	r23, 0x00	; 0
    2b1e:	cb 01       	movw	r24, r22
    2b20:	df 91       	pop	r29
    2b22:	cf 91       	pop	r28
    2b24:	1f 91       	pop	r17
    2b26:	0f 91       	pop	r16
    2b28:	ff 90       	pop	r15
    2b2a:	ef 90       	pop	r14
    2b2c:	df 90       	pop	r13
    2b2e:	cf 90       	pop	r12
    2b30:	bf 90       	pop	r11
    2b32:	08 95       	ret

00002b34 <_ZN9task_user12reset_deviceEv>:
    2b34:	6a e0       	ldi	r22, 0x0A	; 10
    2b36:	fc 01       	movw	r30, r24
    2b38:	86 81       	ldd	r24, Z+6	; 0x06
    2b3a:	97 81       	ldd	r25, Z+7	; 0x07
    2b3c:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    2b40:	ec 01       	movw	r28, r24
    2b42:	6d e5       	ldi	r22, 0x5D	; 93
    2b44:	7a e0       	ldi	r23, 0x0A	; 10
    2b46:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    2b4a:	66 e0       	ldi	r22, 0x06	; 6
    2b4c:	ce 01       	movw	r24, r28
    2b4e:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    2b52:	93 e0       	ldi	r25, 0x03	; 3
    2b54:	88 ed       	ldi	r24, 0xD8	; 216
    2b56:	08 b6       	in	r0, 0x38	; 56
    2b58:	18 be       	out	0x38, r1	; 56
    2b5a:	84 bf       	out	0x34, r24	; 52
    2b5c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    2b60:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    2b64:	81 fd       	sbrc	r24, 1
    2b66:	fc cf       	rjmp	.-8      	; 0x2b60 <_ZN9task_user12reset_deviceEv+0x2c>
    2b68:	08 be       	out	0x38, r0	; 56
    2b6a:	ff cf       	rjmp	.-2      	; 0x2b6a <_ZN9task_user12reset_deviceEv+0x36>

00002b6c <_ZN9task_user3runEv>:
/** This task interacts with the user by transmitting and receiving bytes over USB to 
 *  and from a computer.
 */

void task_user::run (void)
{
    2b6c:	cf 93       	push	r28
    2b6e:	df 93       	push	r29
    2b70:	00 d0       	rcall	.+0      	; 0x2b72 <_ZN9task_user3runEv+0x6>
    2b72:	00 d0       	rcall	.+0      	; 0x2b74 <_ZN9task_user3runEv+0x8>
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
    2b78:	89 83       	std	Y+1, r24	; 0x01
    2b7a:	9a 83       	std	Y+2, r25	; 0x02
			// coordinates of the device and then activates the device upon the user's command.
            case (1):
				if (p_serial->check_for_char ())        // If the user typed a
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
					atoi_buf[atoi_index] = char_in;
    2b7c:	8c 01       	movw	r16, r24
    2b7e:	0e 5e       	subi	r16, 0xEE	; 238
    2b80:	1e 4f       	sbci	r17, 0xFE	; 254
						*p_serial << endl;
						break;
						
						case (','):
						*p_serial << char_in;
						conv_int = str_to_int();
    2b82:	7c 01       	movw	r14, r24
    2b84:	8d ee       	ldi	r24, 0xED	; 237
    2b86:	e8 1a       	sub	r14, r24
    2b88:	8e ef       	ldi	r24, 0xFE	; 254
    2b8a:	f8 0a       	sbc	r15, r24
						location_queue->put(conv_int);
    2b8c:	89 80       	ldd	r8, Y+1	; 0x01
    2b8e:	9a 80       	ldd	r9, Y+2	; 0x02
    2b90:	99 ee       	ldi	r25, 0xE9	; 233
    2b92:	89 1a       	sub	r8, r25
    2b94:	9e ef       	ldi	r25, 0xFE	; 254
    2b96:	99 0a       	sbc	r9, r25
							}
							
							break;
							
						case ('s'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    2b98:	a9 80       	ldd	r10, Y+1	; 0x01
    2b9a:	ba 80       	ldd	r11, Y+2	; 0x02
    2b9c:	a3 ee       	ldi	r26, 0xE3	; 227
    2b9e:	aa 1a       	sub	r10, r26
    2ba0:	ae ef       	ldi	r26, 0xFE	; 254
    2ba2:	ba 0a       	sbc	r11, r26
							break;
							
						case ('n'):
							*p_serial << PMS ("Sensor sample size set to:") << endl;
							atoi_index = 0;
							data_config = &sensor_sample_number;
    2ba4:	69 80       	ldd	r6, Y+1	; 0x01
    2ba6:	7a 80       	ldd	r7, Y+2	; 0x02
    2ba8:	b7 ee       	ldi	r27, 0xE7	; 231
    2baa:	6b 1a       	sub	r6, r27
    2bac:	be ef       	ldi	r27, 0xFE	; 254
    2bae:	7b 0a       	sbc	r7, r27
						case (','):
							*p_serial << char_in;
							
							conv_int = str_to_int();
							conv_int = conv_int * 1000;
							v_config->put(conv_int);
    2bb0:	49 80       	ldd	r4, Y+1	; 0x01
    2bb2:	5a 80       	ldd	r5, Y+2	; 0x02
    2bb4:	e5 ee       	ldi	r30, 0xE5	; 229
    2bb6:	4e 1a       	sub	r4, r30
    2bb8:	ee ef       	ldi	r30, 0xFE	; 254
    2bba:	5e 0a       	sbc	r5, r30
							transition_to(0);
							break;
							
						case('a'):
							conv_int = str_to_int();
							if (queue_indicator)
    2bbc:	29 80       	ldd	r2, Y+1	; 0x01
    2bbe:	3a 80       	ldd	r3, Y+2	; 0x02
    2bc0:	fe ed       	ldi	r31, 0xDE	; 222
    2bc2:	2f 1a       	sub	r2, r31
    2bc4:	fe ef       	ldi	r31, 0xFE	; 254
    2bc6:	3f 0a       	sbc	r3, r31
							}
							else
							{
								if (data_config == &ramp_run_span)
								{
									conv_int = 100 / conv_int;
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	9a 81       	ldd	r25, Y+2	; 0x02
    2bcc:	8d 83       	std	Y+5, r24	; 0x05
    2bce:	9e 83       	std	Y+6, r25	; 0x06
			//*p_serial << PMS ("interrupt reset") << endl;
			//reset_device();
		//}
		
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
    2bd0:	ad 81       	ldd	r26, Y+5	; 0x05
    2bd2:	be 81       	ldd	r27, Y+6	; 0x06
    2bd4:	1c 96       	adiw	r26, 0x0c	; 12
    2bd6:	8c 91       	ld	r24, X
    2bd8:	1c 97       	sbiw	r26, 0x0c	; 12
    2bda:	81 30       	cpi	r24, 0x01	; 1
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <_ZN9task_user3runEv+0x74>
    2bde:	e6 c0       	rjmp	.+460    	; 0x2dac <_ZN9task_user3runEv+0x240>
    2be0:	38 f0       	brcs	.+14     	; 0x2bf0 <_ZN9task_user3runEv+0x84>
    2be2:	82 30       	cpi	r24, 0x02	; 2
    2be4:	09 f4       	brne	.+2      	; 0x2be8 <_ZN9task_user3runEv+0x7c>
    2be6:	b8 c2       	rjmp	.+1392   	; 0x3158 <_ZN9task_user3runEv+0x5ec>
    2be8:	83 30       	cpi	r24, 0x03	; 3
    2bea:	09 f4       	brne	.+2      	; 0x2bee <_ZN9task_user3runEv+0x82>
    2bec:	84 c3       	rjmp	.+1800   	; 0x32f6 <_ZN9task_user3runEv+0x78a>
    2bee:	aa c5       	rjmp	.+2900   	; 0x3744 <_ZN9task_user3runEv+0xbd8>
		{
			// In Case 0, the interface is in the main menu.
			case (0):
			
				if (p_serial->check_for_char ())        // If the user typed a
    2bf0:	ed 81       	ldd	r30, Y+5	; 0x05
    2bf2:	fe 81       	ldd	r31, Y+6	; 0x06
    2bf4:	86 81       	ldd	r24, Z+6	; 0x06
    2bf6:	97 81       	ldd	r25, Z+7	; 0x07
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	ed 91       	ld	r30, X+
    2bfc:	fc 91       	ld	r31, X
    2bfe:	04 80       	ldd	r0, Z+4	; 0x04
    2c00:	f5 81       	ldd	r31, Z+5	; 0x05
    2c02:	e0 2d       	mov	r30, r0
    2c04:	19 95       	eicall
    2c06:	88 23       	and	r24, r24
    2c08:	09 f4       	brne	.+2      	; 0x2c0c <_ZN9task_user3runEv+0xa0>
    2c0a:	bc c5       	rjmp	.+2936   	; 0x3784 <_ZN9task_user3runEv+0xc18>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    2c0c:	ed 81       	ldd	r30, Y+5	; 0x05
    2c0e:	fe 81       	ldd	r31, Y+6	; 0x06
    2c10:	86 81       	ldd	r24, Z+6	; 0x06
    2c12:	97 81       	ldd	r25, Z+7	; 0x07
    2c14:	dc 01       	movw	r26, r24
    2c16:	ed 91       	ld	r30, X+
    2c18:	fc 91       	ld	r31, X
    2c1a:	06 80       	ldd	r0, Z+6	; 0x06
    2c1c:	f7 81       	ldd	r31, Z+7	; 0x07
    2c1e:	e0 2d       	mov	r30, r0
    2c20:	19 95       	eicall
					atoi_buf[atoi_index] = char_in;
    2c22:	f8 01       	movw	r30, r16
    2c24:	20 81       	ld	r18, Z
    2c26:	ed 81       	ldd	r30, Y+5	; 0x05
    2c28:	fe 81       	ldd	r31, Y+6	; 0x06
    2c2a:	e2 0f       	add	r30, r18
    2c2c:	f1 1d       	adc	r31, r1
    2c2e:	82 8b       	std	Z+18, r24	; 0x12
					atoi_index++;
    2c30:	2f 5f       	subi	r18, 0xFF	; 255
    2c32:	d8 01       	movw	r26, r16
    2c34:	2c 93       	st	X, r18
					switch(char_in)
    2c36:	99 27       	eor	r25, r25
    2c38:	fc 01       	movw	r30, r24
    2c3a:	e1 56       	subi	r30, 0x61	; 97
    2c3c:	f1 09       	sbc	r31, r1
    2c3e:	e3 31       	cpi	r30, 0x13	; 19
    2c40:	f1 05       	cpc	r31, r1
    2c42:	08 f0       	brcs	.+2      	; 0x2c46 <_ZN9task_user3runEv+0xda>
    2c44:	9f c5       	rjmp	.+2878   	; 0x3784 <_ZN9task_user3runEv+0xc18>
    2c46:	88 27       	eor	r24, r24
    2c48:	e9 5f       	subi	r30, 0xF9	; 249
    2c4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c4c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c4e:	0c 94 49 38 	jmp	0x7092	; 0x7092 <__tablejump2__>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2c52:	0f b6       	in	r0, 0x3f	; 63
    2c54:	f8 94       	cli
    2c56:	0f 92       	push	r0
			the_data = new_data;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	80 93 dc 20 	sts	0x20DC, r24	; 0x8020dc <configuration_mode>
			portEXIT_CRITICAL ();
    2c5e:	0f 90       	pop	r0
    2c60:	0f be       	out	0x3f, r0	; 63
					{
						case('a'):
						
							//print_config_mode_menu();
							configuration_mode.put(true);
							*p_serial << PMS ("Entering config mode") << endl;
    2c62:	6a e0       	ldi	r22, 0x0A	; 10
    2c64:	ed 81       	ldd	r30, Y+5	; 0x05
    2c66:	fe 81       	ldd	r31, Y+6	; 0x06
    2c68:	86 81       	ldd	r24, Z+6	; 0x06
    2c6a:	97 81       	ldd	r25, Z+7	; 0x07
    2c6c:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    2c70:	6c 01       	movw	r12, r24
    2c72:	68 e4       	ldi	r22, 0x48	; 72
    2c74:	7a e0       	ldi	r23, 0x0A	; 10
    2c76:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    2c7a:	66 e0       	ldi	r22, 0x06	; 6
    2c7c:	c6 01       	movw	r24, r12
    2c7e:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
							transition_to(3);
    2c82:	63 e0       	ldi	r22, 0x03	; 3
    2c84:	8d 81       	ldd	r24, Y+5	; 0x05
    2c86:	9e 81       	ldd	r25, Y+6	; 0x06
    2c88:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
							break;
    2c8c:	7b c5       	rjmp	.+2806   	; 0x3784 <_ZN9task_user3runEv+0xc18>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2c8e:	0f b6       	in	r0, 0x3f	; 63
    2c90:	f8 94       	cli
    2c92:	0f 92       	push	r0
			the_data = new_data;
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	80 93 25 21 	sts	0x2125, r24	; 0x802125 <drawing_mode>
			portEXIT_CRITICAL ();
    2c9a:	0f 90       	pop	r0
    2c9c:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	0f 92       	push	r0
			the_data = new_data;
    2ca4:	10 92 51 21 	sts	0x2151, r1	; 0x802151 <sensor_delay>
    2ca8:	10 92 52 21 	sts	0x2152, r1	; 0x802152 <sensor_delay+0x1>
    2cac:	10 92 53 21 	sts	0x2153, r1	; 0x802153 <sensor_delay+0x2>
    2cb0:	10 92 54 21 	sts	0x2154, r1	; 0x802154 <sensor_delay+0x3>
			portEXIT_CRITICAL ();
    2cb4:	0f 90       	pop	r0
    2cb6:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	0f 92       	push	r0
			the_data = new_data;
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	a0 e0       	ldi	r26, 0x00	; 0
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <sensor_sample_number>
    2cca:	90 93 57 21 	sts	0x2157, r25	; 0x802157 <sensor_sample_number+0x1>
    2cce:	a0 93 58 21 	sts	0x2158, r26	; 0x802158 <sensor_sample_number+0x2>
    2cd2:	b0 93 59 21 	sts	0x2159, r27	; 0x802159 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    2cd6:	0f 90       	pop	r0
    2cd8:	0f be       	out	0x3f, r0	; 63
							
						case('e'):
							drawing_mode.put(true);
							sensor_delay.put(0);
							sensor_sample_number.put(1);
							transition_to(1);
    2cda:	61 e0       	ldi	r22, 0x01	; 1
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2ce4:	0f b6       	in	r0, 0x3f	; 63
    2ce6:	f8 94       	cli
    2ce8:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    2cea:	0f 90       	pop	r0
    2cec:	0f be       	out	0x3f, r0	; 63
							
						case('i'):
							if (!(incremental_mode.get()))
    2cee:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <incremental_mode>
    2cf2:	81 11       	cpse	r24, r1
    2cf4:	47 c5       	rjmp	.+2702   	; 0x3784 <_ZN9task_user3runEv+0xc18>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	0f 92       	push	r0
			the_data = new_data;
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	80 93 d9 20 	sts	0x20D9, r24	; 0x8020d9 <incremental_mode>
			portEXIT_CRITICAL ();
    2d02:	0f 90       	pop	r0
    2d04:	0f be       	out	0x3f, r0	; 63
							{
								incremental_mode.put(true);
								transition_to(1);
    2d06:	61 e0       	ldi	r22, 0x01	; 1
    2d08:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0c:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    2d10:	39 c5       	rjmp	.+2674   	; 0x3784 <_ZN9task_user3runEv+0xc18>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    2d18:	0f 90       	pop	r0
    2d1a:	0f be       	out	0x3f, r0	; 63
							
							break;
							
						case('c'):
						
							if (!(coordinate_mode.get()))
    2d1c:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    2d20:	81 11       	cpse	r24, r1
    2d22:	30 c5       	rjmp	.+2656   	; 0x3784 <_ZN9task_user3runEv+0xc18>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	f8 94       	cli
    2d28:	0f 92       	push	r0
			the_data = new_data;
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	80 93 db 20 	sts	0x20DB, r24	; 0x8020db <coordinate_mode>
			portEXIT_CRITICAL ();
    2d30:	0f 90       	pop	r0
    2d32:	0f be       	out	0x3f, r0	; 63
							{
								coordinate_mode.put(true);
								transition_to(1);
    2d34:	61 e0       	ldi	r22, 0x01	; 1
    2d36:	8d 81       	ldd	r24, Y+5	; 0x05
    2d38:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3a:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
    2d3e:	22 c5       	rjmp	.+2628   	; 0x3784 <_ZN9task_user3runEv+0xc18>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	f8 94       	cli
    2d44:	0f 92       	push	r0
			the_data = new_data;
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	80 93 da 20 	sts	0x20DA, r24	; 0x8020da <direct_mode>
			portEXIT_CRITICAL ();
    2d4c:	0f 90       	pop	r0
    2d4e:	0f be       	out	0x3f, r0	; 63
						
						case('d'):
						
							//print_dir_mode_menu();
							direct_mode.put(true);
							transition_to(2);
    2d50:	62 e0       	ldi	r22, 0x02	; 2
    2d52:	8d 81       	ldd	r24, Y+5	; 0x05
    2d54:	9e 81       	ldd	r25, Y+6	; 0x06
    2d56:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
							break;
    2d5a:	14 c5       	rjmp	.+2600   	; 0x3784 <_ZN9task_user3runEv+0xc18>
    2d5c:	ad 81       	ldd	r26, Y+5	; 0x05
    2d5e:	be 81       	ldd	r27, Y+6	; 0x06
							
						case('r'):
							
							reset_device();
    2d60:	cd 01       	movw	r24, r26
    2d62:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <_ZN9task_user12reset_deviceEv>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	0f 92       	push	r0
			the_data = new_data;
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <sensor_reading>
			portEXIT_CRITICAL ();
    2d72:	0f 90       	pop	r0
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	06 c5       	rjmp	.+2572   	; 0x3784 <_ZN9task_user3runEv+0xc18>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    2d7e:	0f 90       	pop	r0
    2d80:	0f be       	out	0x3f, r0	; 63
							sensor_reading.put(true);
							break;
							
						case('p'):
							
							if(!(pause.get()))
    2d82:	80 91 49 21 	lds	r24, 0x2149	; 0x802149 <pause>
    2d86:	81 11       	cpse	r24, r1
    2d88:	09 c0       	rjmp	.+18     	; 0x2d9c <_ZN9task_user3runEv+0x230>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2d8a:	0f b6       	in	r0, 0x3f	; 63
    2d8c:	f8 94       	cli
    2d8e:	0f 92       	push	r0
			the_data = new_data;
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	80 93 49 21 	sts	0x2149, r24	; 0x802149 <pause>
			portEXIT_CRITICAL ();
    2d96:	0f 90       	pop	r0
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	f4 c4       	rjmp	.+2536   	; 0x3784 <_ZN9task_user3runEv+0xc18>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2d9c:	0f b6       	in	r0, 0x3f	; 63
    2d9e:	f8 94       	cli
    2da0:	0f 92       	push	r0
			the_data = new_data;
    2da2:	10 92 49 21 	sts	0x2149, r1	; 0x802149 <pause>
			portEXIT_CRITICAL ();
    2da6:	0f 90       	pop	r0
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	ec c4       	rjmp	.+2520   	; 0x3784 <_ZN9task_user3runEv+0xc18>
				
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In Case 1, the UI is in Coordinate Mode. It waits for the user to specify the x, y, z 
			// coordinates of the device and then activates the device upon the user's command.
            case (1):
				if (p_serial->check_for_char ())        // If the user typed a
    2dac:	ed 81       	ldd	r30, Y+5	; 0x05
    2dae:	fe 81       	ldd	r31, Y+6	; 0x06
    2db0:	86 81       	ldd	r24, Z+6	; 0x06
    2db2:	97 81       	ldd	r25, Z+7	; 0x07
    2db4:	dc 01       	movw	r26, r24
    2db6:	ed 91       	ld	r30, X+
    2db8:	fc 91       	ld	r31, X
    2dba:	04 80       	ldd	r0, Z+4	; 0x04
    2dbc:	f5 81       	ldd	r31, Z+5	; 0x05
    2dbe:	e0 2d       	mov	r30, r0
    2dc0:	19 95       	eicall
    2dc2:	88 23       	and	r24, r24
    2dc4:	09 f4       	brne	.+2      	; 0x2dc8 <_ZN9task_user3runEv+0x25c>
    2dc6:	aa c1       	rjmp	.+852    	; 0x311c <_ZN9task_user3runEv+0x5b0>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    2dc8:	ed 81       	ldd	r30, Y+5	; 0x05
    2dca:	fe 81       	ldd	r31, Y+6	; 0x06
    2dcc:	86 81       	ldd	r24, Z+6	; 0x06
    2dce:	97 81       	ldd	r25, Z+7	; 0x07
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	ed 91       	ld	r30, X+
    2dd4:	fc 91       	ld	r31, X
    2dd6:	06 80       	ldd	r0, Z+6	; 0x06
    2dd8:	f7 81       	ldd	r31, Z+7	; 0x07
    2dda:	e0 2d       	mov	r30, r0
    2ddc:	19 95       	eicall
    2dde:	bc 01       	movw	r22, r24
					atoi_buf[atoi_index] = char_in;
    2de0:	f8 01       	movw	r30, r16
    2de2:	80 81       	ld	r24, Z
    2de4:	ed 81       	ldd	r30, Y+5	; 0x05
    2de6:	fe 81       	ldd	r31, Y+6	; 0x06
    2de8:	e8 0f       	add	r30, r24
    2dea:	f1 1d       	adc	r31, r1
    2dec:	62 8b       	std	Z+18, r22	; 0x12
					atoi_index++;
    2dee:	8f 5f       	subi	r24, 0xFF	; 255
    2df0:	d8 01       	movw	r26, r16
    2df2:	8c 93       	st	X, r24
					switch (char_in)
    2df4:	fb 01       	movw	r30, r22
    2df6:	ff 27       	eor	r31, r31
    2df8:	bc 97       	sbiw	r30, 0x2c	; 44
    2dfa:	ef 34       	cpi	r30, 0x4F	; 79
    2dfc:	f1 05       	cpc	r31, r1
    2dfe:	08 f0       	brcs	.+2      	; 0x2e02 <_ZN9task_user3runEv+0x296>
    2e00:	c1 c4       	rjmp	.+2434   	; 0x3784 <_ZN9task_user3runEv+0xc18>
    2e02:	88 27       	eor	r24, r24
    2e04:	e6 5e       	subi	r30, 0xE6	; 230
    2e06:	fe 4f       	sbci	r31, 0xFE	; 254
    2e08:	8f 4f       	sbci	r24, 0xFF	; 255
    2e0a:	0c 94 49 38 	jmp	0x7092	; 0x7092 <__tablejump2__>
    2e0e:	ed 81       	ldd	r30, Y+5	; 0x05
    2e10:	fe 81       	ldd	r31, Y+6	; 0x06
					{
						case('r'):
						
							reset_device();
    2e12:	cf 01       	movw	r24, r30
    2e14:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <_ZN9task_user12reset_deviceEv>
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    2e18:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <xlocations+0x4>
    2e1c:	90 91 f6 20 	lds	r25, 0x20F6	; 0x8020f6 <xlocations+0x5>
    2e20:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <uxQueueMessagesWaiting>
    2e24:	d8 2e       	mov	r13, r24
    2e26:	80 91 eb 20 	lds	r24, 0x20EB	; 0x8020eb <ylocations+0x4>
    2e2a:	90 91 ec 20 	lds	r25, 0x20EC	; 0x8020ec <ylocations+0x5>
    2e2e:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <uxQueueMessagesWaiting>
							break;
						
						case ('e'):
						//print_main_menu();
						//coordinate_mode.put(false);
						if (xlocations.num_items_in() == ylocations.num_items_in() && xlocations.num_items_in() == zlocations.num_items_in())
    2e32:	d8 12       	cpse	r13, r24
    2e34:	45 c0       	rjmp	.+138    	; 0x2ec0 <_ZN9task_user3runEv+0x354>
    2e36:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <xlocations+0x4>
    2e3a:	90 91 f6 20 	lds	r25, 0x20F6	; 0x8020f6 <xlocations+0x5>
    2e3e:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <uxQueueMessagesWaiting>
    2e42:	d8 2e       	mov	r13, r24
    2e44:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <zlocations+0x4>
    2e48:	90 91 e2 20 	lds	r25, 0x20E2	; 0x8020e2 <zlocations+0x5>
    2e4c:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <uxQueueMessagesWaiting>
    2e50:	d8 12       	cpse	r13, r24
    2e52:	36 c0       	rjmp	.+108    	; 0x2ec0 <_ZN9task_user3runEv+0x354>
    2e54:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <xlocations+0x4>
    2e58:	90 91 f6 20 	lds	r25, 0x20F6	; 0x8020f6 <xlocations+0x5>
    2e5c:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <uxQueueMessagesWaiting>
    2e60:	c8 2e       	mov	r12, r24
    2e62:	d1 2c       	mov	r13, r1
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2e64:	0f b6       	in	r0, 0x3f	; 63
    2e66:	f8 94       	cli
    2e68:	0f 92       	push	r0
			the_data = new_data;
    2e6a:	c0 92 4a 21 	sts	0x214A, r12	; 0x80214a <total_nodes>
    2e6e:	d0 92 4b 21 	sts	0x214B, r13	; 0x80214b <total_nodes+0x1>
			portEXIT_CRITICAL ();
    2e72:	0f 90       	pop	r0
    2e74:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    2e76:	0f b6       	in	r0, 0x3f	; 63
    2e78:	f8 94       	cli
    2e7a:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    2e7c:	0f 90       	pop	r0
    2e7e:	0f be       	out	0x3f, r0	; 63
						{
							total_nodes.put(xlocations.num_items_in());
							*p_serial << PMS ("Total nodes: ") << total_nodes.get() << endl;
    2e80:	6a e0       	ldi	r22, 0x0A	; 10
    2e82:	ad 81       	ldd	r26, Y+5	; 0x05
    2e84:	be 81       	ldd	r27, Y+6	; 0x06
    2e86:	16 96       	adiw	r26, 0x06	; 6
    2e88:	8d 91       	ld	r24, X+
    2e8a:	9c 91       	ld	r25, X
    2e8c:	17 97       	sbiw	r26, 0x07	; 7
    2e8e:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    2e92:	89 83       	std	Y+1, r24	; 0x01
    2e94:	9a 83       	std	Y+2, r25	; 0x02
    2e96:	6a e3       	ldi	r22, 0x3A	; 58
    2e98:	7a e0       	ldi	r23, 0x0A	; 10
    2e9a:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    2e9e:	b6 01       	movw	r22, r12
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea4:	0e 94 fd 31 	call	0x63fa	; 0x63fa <_ZN8emstreamlsEj>
    2ea8:	66 e0       	ldi	r22, 0x06	; 6
    2eaa:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2eae:	0f b6       	in	r0, 0x3f	; 63
    2eb0:	f8 94       	cli
    2eb2:	0f 92       	push	r0
			the_data = new_data;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	80 93 4c 21 	sts	0x214C, r24	; 0x80214c <next_node>
			portEXIT_CRITICAL ();
    2eba:	0f 90       	pop	r0
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	10 c0       	rjmp	.+32     	; 0x2ee0 <_ZN9task_user3runEv+0x374>
							next_node.put(true);
						}
						else
						{
							*p_serial << PMS ("Error: Unequal axis coordinate vectors.") << endl;
    2ec0:	6a e0       	ldi	r22, 0x0A	; 10
    2ec2:	ed 81       	ldd	r30, Y+5	; 0x05
    2ec4:	fe 81       	ldd	r31, Y+6	; 0x06
    2ec6:	86 81       	ldd	r24, Z+6	; 0x06
    2ec8:	97 81       	ldd	r25, Z+7	; 0x07
    2eca:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    2ece:	6c 01       	movw	r12, r24
    2ed0:	62 e1       	ldi	r22, 0x12	; 18
    2ed2:	7a e0       	ldi	r23, 0x0A	; 10
    2ed4:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    2ed8:	66 e0       	ldi	r22, 0x06	; 6
    2eda:	c6 01       	movw	r24, r12
    2edc:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
						}
						atoi_index = 0;
    2ee0:	d8 01       	movw	r26, r16
    2ee2:	1c 92       	st	X, r1
						transition_to(0);
    2ee4:	60 e0       	ldi	r22, 0x00	; 0
    2ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eea:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
						break;
    2eee:	4a c4       	rjmp	.+2196   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						
						// This character acts as an enter which the python file can more easily send.
						case('a'):
						conv_int = str_to_int();
    2ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef4:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN9task_user10str_to_intEv>
    2ef8:	f7 01       	movw	r30, r14
    2efa:	60 83       	st	Z, r22
    2efc:	71 83       	std	Z+1, r23	; 0x01
    2efe:	82 83       	std	Z+2, r24	; 0x02
    2f00:	93 83       	std	Z+3, r25	; 0x03
						location_queue->put(conv_int);
    2f02:	d4 01       	movw	r26, r8
    2f04:	8d 91       	ld	r24, X+
    2f06:	9c 91       	ld	r25, X
    2f08:	dc 01       	movw	r26, r24
    2f0a:	ed 91       	ld	r30, X+
    2f0c:	fc 91       	ld	r31, X
    2f0e:	01 90       	ld	r0, Z+
    2f10:	f0 81       	ld	r31, Z
    2f12:	e0 2d       	mov	r30, r0
    2f14:	b7 01       	movw	r22, r14
    2f16:	19 95       	eicall
						atoi_index = 0;
    2f18:	f8 01       	movw	r30, r16
    2f1a:	10 82       	st	Z, r1
						//*p_serial << endl << PMS ("Locations stored in memory location: ") << location_queue << endl;
						break;
    2f1c:	33 c4       	rjmp	.+2150   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						
						case ('x'):
						atoi_index = 0;
    2f1e:	d8 01       	movw	r26, r16
    2f20:	1c 92       	st	X, r1
						*p_serial << endl << PMS ("Receiving X-locations.") << endl;
    2f22:	66 e0       	ldi	r22, 0x06	; 6
    2f24:	ed 81       	ldd	r30, Y+5	; 0x05
    2f26:	fe 81       	ldd	r31, Y+6	; 0x06
    2f28:	86 81       	ldd	r24, Z+6	; 0x06
    2f2a:	97 81       	ldd	r25, Z+7	; 0x07
    2f2c:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    2f30:	6a e0       	ldi	r22, 0x0A	; 10
    2f32:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    2f36:	6c 01       	movw	r12, r24
    2f38:	6b ef       	ldi	r22, 0xFB	; 251
    2f3a:	79 e0       	ldi	r23, 0x09	; 9
    2f3c:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    2f40:	66 e0       	ldi	r22, 0x06	; 6
    2f42:	c6 01       	movw	r24, r12
    2f44:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
						location_queue = &xlocations;
    2f48:	e1 ef       	ldi	r30, 0xF1	; 241
    2f4a:	f0 e2       	ldi	r31, 0x20	; 32
    2f4c:	d4 01       	movw	r26, r8
    2f4e:	ed 93       	st	X+, r30
    2f50:	fc 93       	st	X, r31
						break;
    2f52:	18 c4       	rjmp	.+2096   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						
						case ('y'):
						atoi_index = 0;
    2f54:	d8 01       	movw	r26, r16
    2f56:	1c 92       	st	X, r1
						*p_serial << endl << PMS ("Receiving Y-locations.") << endl;
    2f58:	66 e0       	ldi	r22, 0x06	; 6
    2f5a:	ed 81       	ldd	r30, Y+5	; 0x05
    2f5c:	fe 81       	ldd	r31, Y+6	; 0x06
    2f5e:	86 81       	ldd	r24, Z+6	; 0x06
    2f60:	97 81       	ldd	r25, Z+7	; 0x07
    2f62:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    2f66:	6a e0       	ldi	r22, 0x0A	; 10
    2f68:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    2f6c:	6c 01       	movw	r12, r24
    2f6e:	64 ee       	ldi	r22, 0xE4	; 228
    2f70:	79 e0       	ldi	r23, 0x09	; 9
    2f72:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    2f76:	66 e0       	ldi	r22, 0x06	; 6
    2f78:	c6 01       	movw	r24, r12
    2f7a:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
						location_queue = &ylocations;
    2f7e:	e7 ee       	ldi	r30, 0xE7	; 231
    2f80:	f0 e2       	ldi	r31, 0x20	; 32
    2f82:	d4 01       	movw	r26, r8
    2f84:	ed 93       	st	X+, r30
    2f86:	fc 93       	st	X, r31
						break;
    2f88:	fd c3       	rjmp	.+2042   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						
						case ('z'):
						atoi_index = 0;
    2f8a:	d8 01       	movw	r26, r16
    2f8c:	1c 92       	st	X, r1
						*p_serial << endl << PMS ("Receiving Z-locations.") << endl;
    2f8e:	66 e0       	ldi	r22, 0x06	; 6
    2f90:	ed 81       	ldd	r30, Y+5	; 0x05
    2f92:	fe 81       	ldd	r31, Y+6	; 0x06
    2f94:	86 81       	ldd	r24, Z+6	; 0x06
    2f96:	97 81       	ldd	r25, Z+7	; 0x07
    2f98:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    2f9c:	6a e0       	ldi	r22, 0x0A	; 10
    2f9e:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    2fa2:	6c 01       	movw	r12, r24
    2fa4:	6d ec       	ldi	r22, 0xCD	; 205
    2fa6:	79 e0       	ldi	r23, 0x09	; 9
    2fa8:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    2fac:	66 e0       	ldi	r22, 0x06	; 6
    2fae:	c6 01       	movw	r24, r12
    2fb0:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
						location_queue = &zlocations;
    2fb4:	ed ed       	ldi	r30, 0xDD	; 221
    2fb6:	f0 e2       	ldi	r31, 0x20	; 32
    2fb8:	d4 01       	movw	r26, r8
    2fba:	ed 93       	st	X+, r30
    2fbc:	fc 93       	st	X, r31
						break;
    2fbe:	e2 c3       	rjmp	.+1988   	; 0x3784 <_ZN9task_user3runEv+0xc18>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	0f 92       	push	r0
			the_data = new_data;
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	80 93 55 21 	sts	0x2155, r24	; 0x802155 <initialization_complete>
			portEXIT_CRITICAL ();
    2fcc:	0f 90       	pop	r0
    2fce:	0f be       	out	0x3f, r0	; 63
						
						case ('g'):
						initialization_complete.put(true);
						*p_serial << endl;
    2fd0:	66 e0       	ldi	r22, 0x06	; 6
    2fd2:	ad 81       	ldd	r26, Y+5	; 0x05
    2fd4:	be 81       	ldd	r27, Y+6	; 0x06
    2fd6:	16 96       	adiw	r26, 0x06	; 6
    2fd8:	8d 91       	ld	r24, X+
    2fda:	9c 91       	ld	r25, X
    2fdc:	17 97       	sbiw	r26, 0x07	; 7
    2fde:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
						break;
    2fe2:	d0 c3       	rjmp	.+1952   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						
						case (','):
						*p_serial << char_in;
    2fe4:	ed 81       	ldd	r30, Y+5	; 0x05
    2fe6:	fe 81       	ldd	r31, Y+6	; 0x06
    2fe8:	86 81       	ldd	r24, Z+6	; 0x06
    2fea:	97 81       	ldd	r25, Z+7	; 0x07
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    2fec:	dc 01       	movw	r26, r24
    2fee:	ed 91       	ld	r30, X+
    2ff0:	fc 91       	ld	r31, X
    2ff2:	02 80       	ldd	r0, Z+2	; 0x02
    2ff4:	f3 81       	ldd	r31, Z+3	; 0x03
    2ff6:	e0 2d       	mov	r30, r0
    2ff8:	19 95       	eicall
						conv_int = str_to_int();
    2ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffe:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN9task_user10str_to_intEv>
    3002:	f7 01       	movw	r30, r14
    3004:	60 83       	st	Z, r22
    3006:	71 83       	std	Z+1, r23	; 0x01
    3008:	82 83       	std	Z+2, r24	; 0x02
    300a:	93 83       	std	Z+3, r25	; 0x03
						location_queue->put(conv_int);
    300c:	d4 01       	movw	r26, r8
    300e:	8d 91       	ld	r24, X+
    3010:	9c 91       	ld	r25, X
    3012:	dc 01       	movw	r26, r24
    3014:	ed 91       	ld	r30, X+
    3016:	fc 91       	ld	r31, X
    3018:	01 90       	ld	r0, Z+
    301a:	f0 81       	ld	r31, Z
    301c:	e0 2d       	mov	r30, r0
    301e:	b7 01       	movw	r22, r14
    3020:	19 95       	eicall
						atoi_index = 0;
    3022:	f8 01       	movw	r30, r16
    3024:	10 82       	st	Z, r1

						break;
    3026:	ae c3       	rjmp	.+1884   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						
						case('0'):
						
						*p_serial << char_in;
    3028:	ad 81       	ldd	r26, Y+5	; 0x05
    302a:	be 81       	ldd	r27, Y+6	; 0x06
    302c:	16 96       	adiw	r26, 0x06	; 6
    302e:	8d 91       	ld	r24, X+
    3030:	9c 91       	ld	r25, X
    3032:	17 97       	sbiw	r26, 0x07	; 7
    3034:	dc 01       	movw	r26, r24
    3036:	ed 91       	ld	r30, X+
    3038:	fc 91       	ld	r31, X
    303a:	02 80       	ldd	r0, Z+2	; 0x02
    303c:	f3 81       	ldd	r31, Z+3	; 0x03
    303e:	e0 2d       	mov	r30, r0
    3040:	19 95       	eicall
    3042:	a0 c3       	rjmp	.+1856   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('1'):
						
						*p_serial << char_in;
    3044:	ed 81       	ldd	r30, Y+5	; 0x05
    3046:	fe 81       	ldd	r31, Y+6	; 0x06
    3048:	86 81       	ldd	r24, Z+6	; 0x06
    304a:	97 81       	ldd	r25, Z+7	; 0x07
    304c:	dc 01       	movw	r26, r24
    304e:	ed 91       	ld	r30, X+
    3050:	fc 91       	ld	r31, X
    3052:	02 80       	ldd	r0, Z+2	; 0x02
    3054:	f3 81       	ldd	r31, Z+3	; 0x03
    3056:	e0 2d       	mov	r30, r0
    3058:	19 95       	eicall
    305a:	94 c3       	rjmp	.+1832   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('2'):
						
						*p_serial << char_in;
    305c:	ed 81       	ldd	r30, Y+5	; 0x05
    305e:	fe 81       	ldd	r31, Y+6	; 0x06
    3060:	86 81       	ldd	r24, Z+6	; 0x06
    3062:	97 81       	ldd	r25, Z+7	; 0x07
    3064:	dc 01       	movw	r26, r24
    3066:	ed 91       	ld	r30, X+
    3068:	fc 91       	ld	r31, X
    306a:	02 80       	ldd	r0, Z+2	; 0x02
    306c:	f3 81       	ldd	r31, Z+3	; 0x03
    306e:	e0 2d       	mov	r30, r0
    3070:	19 95       	eicall
    3072:	88 c3       	rjmp	.+1808   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('3'):
						
						*p_serial << char_in;
    3074:	ed 81       	ldd	r30, Y+5	; 0x05
    3076:	fe 81       	ldd	r31, Y+6	; 0x06
    3078:	86 81       	ldd	r24, Z+6	; 0x06
    307a:	97 81       	ldd	r25, Z+7	; 0x07
    307c:	dc 01       	movw	r26, r24
    307e:	ed 91       	ld	r30, X+
    3080:	fc 91       	ld	r31, X
    3082:	02 80       	ldd	r0, Z+2	; 0x02
    3084:	f3 81       	ldd	r31, Z+3	; 0x03
    3086:	e0 2d       	mov	r30, r0
    3088:	19 95       	eicall
    308a:	7c c3       	rjmp	.+1784   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('4'):
						
						*p_serial << char_in;
    308c:	ed 81       	ldd	r30, Y+5	; 0x05
    308e:	fe 81       	ldd	r31, Y+6	; 0x06
    3090:	86 81       	ldd	r24, Z+6	; 0x06
    3092:	97 81       	ldd	r25, Z+7	; 0x07
    3094:	dc 01       	movw	r26, r24
    3096:	ed 91       	ld	r30, X+
    3098:	fc 91       	ld	r31, X
    309a:	02 80       	ldd	r0, Z+2	; 0x02
    309c:	f3 81       	ldd	r31, Z+3	; 0x03
    309e:	e0 2d       	mov	r30, r0
    30a0:	19 95       	eicall
    30a2:	70 c3       	rjmp	.+1760   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('5'):
						
						*p_serial << char_in;
    30a4:	ed 81       	ldd	r30, Y+5	; 0x05
    30a6:	fe 81       	ldd	r31, Y+6	; 0x06
    30a8:	86 81       	ldd	r24, Z+6	; 0x06
    30aa:	97 81       	ldd	r25, Z+7	; 0x07
    30ac:	dc 01       	movw	r26, r24
    30ae:	ed 91       	ld	r30, X+
    30b0:	fc 91       	ld	r31, X
    30b2:	02 80       	ldd	r0, Z+2	; 0x02
    30b4:	f3 81       	ldd	r31, Z+3	; 0x03
    30b6:	e0 2d       	mov	r30, r0
    30b8:	19 95       	eicall
    30ba:	64 c3       	rjmp	.+1736   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('6'):
						
						*p_serial << char_in;
    30bc:	ed 81       	ldd	r30, Y+5	; 0x05
    30be:	fe 81       	ldd	r31, Y+6	; 0x06
    30c0:	86 81       	ldd	r24, Z+6	; 0x06
    30c2:	97 81       	ldd	r25, Z+7	; 0x07
    30c4:	dc 01       	movw	r26, r24
    30c6:	ed 91       	ld	r30, X+
    30c8:	fc 91       	ld	r31, X
    30ca:	02 80       	ldd	r0, Z+2	; 0x02
    30cc:	f3 81       	ldd	r31, Z+3	; 0x03
    30ce:	e0 2d       	mov	r30, r0
    30d0:	19 95       	eicall
    30d2:	58 c3       	rjmp	.+1712   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('7'):
						
						*p_serial << char_in;
    30d4:	ed 81       	ldd	r30, Y+5	; 0x05
    30d6:	fe 81       	ldd	r31, Y+6	; 0x06
    30d8:	86 81       	ldd	r24, Z+6	; 0x06
    30da:	97 81       	ldd	r25, Z+7	; 0x07
    30dc:	dc 01       	movw	r26, r24
    30de:	ed 91       	ld	r30, X+
    30e0:	fc 91       	ld	r31, X
    30e2:	02 80       	ldd	r0, Z+2	; 0x02
    30e4:	f3 81       	ldd	r31, Z+3	; 0x03
    30e6:	e0 2d       	mov	r30, r0
    30e8:	19 95       	eicall
    30ea:	4c c3       	rjmp	.+1688   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('8'):
						
						*p_serial << char_in;
    30ec:	ed 81       	ldd	r30, Y+5	; 0x05
    30ee:	fe 81       	ldd	r31, Y+6	; 0x06
    30f0:	86 81       	ldd	r24, Z+6	; 0x06
    30f2:	97 81       	ldd	r25, Z+7	; 0x07
    30f4:	dc 01       	movw	r26, r24
    30f6:	ed 91       	ld	r30, X+
    30f8:	fc 91       	ld	r31, X
    30fa:	02 80       	ldd	r0, Z+2	; 0x02
    30fc:	f3 81       	ldd	r31, Z+3	; 0x03
    30fe:	e0 2d       	mov	r30, r0
    3100:	19 95       	eicall
    3102:	40 c3       	rjmp	.+1664   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('9'):
						
						*p_serial << char_in;
    3104:	ed 81       	ldd	r30, Y+5	; 0x05
    3106:	fe 81       	ldd	r31, Y+6	; 0x06
    3108:	86 81       	ldd	r24, Z+6	; 0x06
    310a:	97 81       	ldd	r25, Z+7	; 0x07
    310c:	dc 01       	movw	r26, r24
    310e:	ed 91       	ld	r30, X+
    3110:	fc 91       	ld	r31, X
    3112:	02 80       	ldd	r0, Z+2	; 0x02
    3114:	f3 81       	ldd	r31, Z+3	; 0x03
    3116:	e0 2d       	mov	r30, r0
    3118:	19 95       	eicall
    311a:	34 c3       	rjmp	.+1640   	; 0x3784 <_ZN9task_user3runEv+0xc18>
					}
				}

				// Check the print queue to see if another task has sent this task
				// something to be printed
				else if (print_ser_queue.check_for_char ())
    311c:	8b ef       	ldi	r24, 0xFB	; 251
    311e:	90 e2       	ldi	r25, 0x20	; 32
    3120:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <_ZN14frt_text_queue14check_for_charEv>
    3124:	88 23       	and	r24, r24
    3126:	09 f4       	brne	.+2      	; 0x312a <_ZN9task_user3runEv+0x5be>
    3128:	2d c3       	rjmp	.+1626   	; 0x3784 <_ZN9task_user3runEv+0xc18>
				{
					p_serial->putchar (print_ser_queue.getchar ());
    312a:	ad 81       	ldd	r26, Y+5	; 0x05
    312c:	be 81       	ldd	r27, Y+6	; 0x06
    312e:	16 96       	adiw	r26, 0x06	; 6
    3130:	ed 91       	ld	r30, X+
    3132:	fc 91       	ld	r31, X
    3134:	17 97       	sbiw	r26, 0x07	; 7
    3136:	01 90       	ld	r0, Z+
    3138:	f0 81       	ld	r31, Z
    313a:	e0 2d       	mov	r30, r0
    313c:	c2 80       	ldd	r12, Z+2	; 0x02
    313e:	d3 80       	ldd	r13, Z+3	; 0x03
    3140:	8b ef       	ldi	r24, 0xFB	; 251
    3142:	90 e2       	ldi	r25, 0x20	; 32
    3144:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <_ZN14frt_text_queue7getcharEv>
    3148:	68 2f       	mov	r22, r24
    314a:	ed 81       	ldd	r30, Y+5	; 0x05
    314c:	fe 81       	ldd	r31, Y+6	; 0x06
    314e:	86 81       	ldd	r24, Z+6	; 0x06
    3150:	97 81       	ldd	r25, Z+7	; 0x07
    3152:	f6 01       	movw	r30, r12
    3154:	19 95       	eicall
    3156:	16 c3       	rjmp	.+1580   	; 0x3784 <_ZN9task_user3runEv+0xc18>
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
			// State 2 is Direct Operation Mode. Here, the user can enter commands that directly turn the motors on
			// and off, as well as control their direction.
				
			case (2):
				if (p_serial->check_for_char ())        // If the user typed a
    3158:	ad 81       	ldd	r26, Y+5	; 0x05
    315a:	be 81       	ldd	r27, Y+6	; 0x06
    315c:	16 96       	adiw	r26, 0x06	; 6
    315e:	8d 91       	ld	r24, X+
    3160:	9c 91       	ld	r25, X
    3162:	17 97       	sbiw	r26, 0x07	; 7
    3164:	dc 01       	movw	r26, r24
    3166:	ed 91       	ld	r30, X+
    3168:	fc 91       	ld	r31, X
    316a:	04 80       	ldd	r0, Z+4	; 0x04
    316c:	f5 81       	ldd	r31, Z+5	; 0x05
    316e:	e0 2d       	mov	r30, r0
    3170:	19 95       	eicall
    3172:	88 23       	and	r24, r24
    3174:	09 f4       	brne	.+2      	; 0x3178 <_ZN9task_user3runEv+0x60c>
    3176:	06 c3       	rjmp	.+1548   	; 0x3784 <_ZN9task_user3runEv+0xc18>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    3178:	ed 81       	ldd	r30, Y+5	; 0x05
    317a:	fe 81       	ldd	r31, Y+6	; 0x06
    317c:	86 81       	ldd	r24, Z+6	; 0x06
    317e:	97 81       	ldd	r25, Z+7	; 0x07
    3180:	dc 01       	movw	r26, r24
    3182:	ed 91       	ld	r30, X+
    3184:	fc 91       	ld	r31, X
    3186:	06 80       	ldd	r0, Z+6	; 0x06
    3188:	f7 81       	ldd	r31, Z+7	; 0x07
    318a:	e0 2d       	mov	r30, r0
    318c:	19 95       	eicall
					atoi_buf[atoi_index] = char_in;
    318e:	f8 01       	movw	r30, r16
    3190:	20 81       	ld	r18, Z
    3192:	ed 81       	ldd	r30, Y+5	; 0x05
    3194:	fe 81       	ldd	r31, Y+6	; 0x06
    3196:	e2 0f       	add	r30, r18
    3198:	f1 1d       	adc	r31, r1
    319a:	82 8b       	std	Z+18, r24	; 0x12
					atoi_index++;
    319c:	2f 5f       	subi	r18, 0xFF	; 255
    319e:	d8 01       	movw	r26, r16
    31a0:	2c 93       	st	X, r18
					switch (char_in)
    31a2:	99 27       	eor	r25, r25
    31a4:	fc 01       	movw	r30, r24
    31a6:	e5 56       	subi	r30, 0x65	; 101
    31a8:	f1 09       	sbc	r31, r1
    31aa:	e6 31       	cpi	r30, 0x16	; 22
    31ac:	f1 05       	cpc	r31, r1
    31ae:	08 f0       	brcs	.+2      	; 0x31b2 <_ZN9task_user3runEv+0x646>
    31b0:	e9 c2       	rjmp	.+1490   	; 0x3784 <_ZN9task_user3runEv+0xc18>
    31b2:	88 27       	eor	r24, r24
    31b4:	e7 59       	subi	r30, 0x97	; 151
    31b6:	fe 4f       	sbci	r31, 0xFE	; 254
    31b8:	8f 4f       	sbci	r24, 0xFF	; 255
    31ba:	0c 94 49 38 	jmp	0x7092	; 0x7092 <__tablejump2__>
					{
						case ('x'):
							pmotor_operator = &xmotor_on;
    31be:	88 ed       	ldi	r24, 0xD8	; 216
    31c0:	90 e2       	ldi	r25, 0x20	; 32
    31c2:	f5 01       	movw	r30, r10
    31c4:	80 83       	st	Z, r24
    31c6:	91 83       	std	Z+1, r25	; 0x01
							//*p_serial << endl << PMS ("Press Ctrl-E to return to the main menu.") << endl << endl;
							//*p_serial << PMS ("X-Motor Controls:") << endl;
							
							break;
    31c8:	dd c2       	rjmp	.+1466   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						case ('y'):
							pmotor_operator = &ymotor_on;
    31ca:	87 ed       	ldi	r24, 0xD7	; 215
    31cc:	90 e2       	ldi	r25, 0x20	; 32
    31ce:	d5 01       	movw	r26, r10
    31d0:	8d 93       	st	X+, r24
    31d2:	9c 93       	st	X, r25
							//*p_serial << endl << PMS ("Press Ctrl-E to return to the main menu.") << endl << endl;
							//*p_serial << PMS ("Y-Motor Controls:") << endl;
							//*p_serial << PMS ("Press Ctrl-F to activate forward.") << endl;
							//*p_serial << PMS ("Press Ctrl-R to activate reverse.") << endl;
							//*p_serial << PMS ("Press Ctrl-S to stop.") << endl;
							break;
    31d4:	d7 c2       	rjmp	.+1454   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						case ('z'):
							pmotor_operator = &zmotor_on;
    31d6:	86 ed       	ldi	r24, 0xD6	; 214
    31d8:	90 e2       	ldi	r25, 0x20	; 32
    31da:	f5 01       	movw	r30, r10
    31dc:	80 83       	st	Z, r24
    31de:	91 83       	std	Z+1, r25	; 0x01
							//*p_serial << endl << PMS ("Press Ctrl-E to return to the main menu.") << endl << endl;
							//*p_serial << PMS ("Z-Motor Controls:") << endl;
							//*p_serial << PMS ("Press Ctrl-F to activate forward.") << endl;
							//*p_serial << PMS ("Press Ctrl-R to activate reverse.") << endl;
							//*p_serial << PMS ("Press Ctrl-S to stop.") << endl;
							break;
    31e0:	d1 c2       	rjmp	.+1442   	; 0x3784 <_ZN9task_user3runEv+0xc18>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	0f 92       	push	r0
			the_data = new_data;
    31e8:	10 92 da 20 	sts	0x20DA, r1	; 0x8020da <direct_mode>
			portEXIT_CRITICAL ();
    31ec:	0f 90       	pop	r0
    31ee:	0f be       	out	0x3f, r0	; 63
							//*p_serial << PMS ("Press Ctrl-B for Coordinate Mode") << endl;
							//*p_serial << PMS ("Press Ctrl-D for Direct Operation Mode") << endl;
							//*p_serial << PMS ("Press Ctrl-R for Routine Operation Mode") << endl;
						
							direct_mode.put(false);
							transition_to(0);
    31f0:	60 e0       	ldi	r22, 0x00	; 0
    31f2:	8d 81       	ldd	r24, Y+5	; 0x05
    31f4:	9e 81       	ldd	r25, Y+6	; 0x06
    31f6:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
							break;
    31fa:	c4 c2       	rjmp	.+1416   	; 0x3784 <_ZN9task_user3runEv+0xc18>
						
						case ('f'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    31fc:	d5 01       	movw	r26, r10
    31fe:	ed 91       	ld	r30, X+
    3200:	fc 91       	ld	r31, X
    3202:	b0 e2       	ldi	r27, 0x20	; 32
    3204:	e8 3d       	cpi	r30, 0xD8	; 216
    3206:	fb 07       	cpc	r31, r27
    3208:	41 f0       	breq	.+16     	; 0x321a <_ZN9task_user3runEv+0x6ae>
    320a:	80 e2       	ldi	r24, 0x20	; 32
    320c:	e7 3d       	cpi	r30, 0xD7	; 215
    320e:	f8 07       	cpc	r31, r24
    3210:	21 f0       	breq	.+8      	; 0x321a <_ZN9task_user3runEv+0x6ae>
    3212:	90 e2       	ldi	r25, 0x20	; 32
    3214:	e6 3d       	cpi	r30, 0xD6	; 214
    3216:	f9 07       	cpc	r31, r25
    3218:	41 f4       	brne	.+16     	; 0x322a <_ZN9task_user3runEv+0x6be>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	0f 92       	push	r0
			the_data = new_data;
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	80 83       	st	Z, r24
			portEXIT_CRITICAL ();
    3224:	0f 90       	pop	r0
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	ad c2       	rjmp	.+1370   	; 0x3784 <_ZN9task_user3runEv+0xc18>
								pmotor_operator->put(1);
								
							}
							else
							{
								*p_serial << PMS ("Please choose the motor you would like to control.") << endl;
    322a:	6a e0       	ldi	r22, 0x0A	; 10
    322c:	ad 81       	ldd	r26, Y+5	; 0x05
    322e:	be 81       	ldd	r27, Y+6	; 0x06
    3230:	16 96       	adiw	r26, 0x06	; 6
    3232:	8d 91       	ld	r24, X+
    3234:	9c 91       	ld	r25, X
    3236:	17 97       	sbiw	r26, 0x07	; 7
    3238:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    323c:	6c 01       	movw	r12, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    323e:	6a e9       	ldi	r22, 0x9A	; 154
    3240:	79 e0       	ldi	r23, 0x09	; 9
    3242:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    3246:	66 e0       	ldi	r22, 0x06	; 6
    3248:	c6 01       	movw	r24, r12
    324a:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    324e:	9a c2       	rjmp	.+1332   	; 0x3784 <_ZN9task_user3runEv+0xc18>
							}
							
							break;
							
						case ('r'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    3250:	d5 01       	movw	r26, r10
    3252:	ed 91       	ld	r30, X+
    3254:	fc 91       	ld	r31, X
    3256:	b0 e2       	ldi	r27, 0x20	; 32
    3258:	e8 3d       	cpi	r30, 0xD8	; 216
    325a:	fb 07       	cpc	r31, r27
    325c:	41 f0       	breq	.+16     	; 0x326e <_ZN9task_user3runEv+0x702>
    325e:	80 e2       	ldi	r24, 0x20	; 32
    3260:	e7 3d       	cpi	r30, 0xD7	; 215
    3262:	f8 07       	cpc	r31, r24
    3264:	21 f0       	breq	.+8      	; 0x326e <_ZN9task_user3runEv+0x702>
    3266:	90 e2       	ldi	r25, 0x20	; 32
    3268:	e6 3d       	cpi	r30, 0xD6	; 214
    326a:	f9 07       	cpc	r31, r25
    326c:	41 f4       	brne	.+16     	; 0x327e <_ZN9task_user3runEv+0x712>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    326e:	0f b6       	in	r0, 0x3f	; 63
    3270:	f8 94       	cli
    3272:	0f 92       	push	r0
			the_data = new_data;
    3274:	82 e0       	ldi	r24, 0x02	; 2
    3276:	80 83       	st	Z, r24
			portEXIT_CRITICAL ();
    3278:	0f 90       	pop	r0
    327a:	0f be       	out	0x3f, r0	; 63
    327c:	83 c2       	rjmp	.+1286   	; 0x3784 <_ZN9task_user3runEv+0xc18>
								pmotor_operator->put(2);
								
							}
							else
							{
								*p_serial << PMS ("Please choose the motor you would like to control.") << endl;
    327e:	6a e0       	ldi	r22, 0x0A	; 10
    3280:	ad 81       	ldd	r26, Y+5	; 0x05
    3282:	be 81       	ldd	r27, Y+6	; 0x06
    3284:	16 96       	adiw	r26, 0x06	; 6
    3286:	8d 91       	ld	r24, X+
    3288:	9c 91       	ld	r25, X
    328a:	17 97       	sbiw	r26, 0x07	; 7
    328c:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    3290:	6c 01       	movw	r12, r24
    3292:	67 e6       	ldi	r22, 0x67	; 103
    3294:	79 e0       	ldi	r23, 0x09	; 9
    3296:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    329a:	66 e0       	ldi	r22, 0x06	; 6
    329c:	c6 01       	movw	r24, r12
    329e:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    32a2:	70 c2       	rjmp	.+1248   	; 0x3784 <_ZN9task_user3runEv+0xc18>
							}
							
							break;
							
						case ('s'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    32a4:	d5 01       	movw	r26, r10
    32a6:	ed 91       	ld	r30, X+
    32a8:	fc 91       	ld	r31, X
    32aa:	b0 e2       	ldi	r27, 0x20	; 32
    32ac:	e8 3d       	cpi	r30, 0xD8	; 216
    32ae:	fb 07       	cpc	r31, r27
    32b0:	41 f0       	breq	.+16     	; 0x32c2 <_ZN9task_user3runEv+0x756>
    32b2:	80 e2       	ldi	r24, 0x20	; 32
    32b4:	e7 3d       	cpi	r30, 0xD7	; 215
    32b6:	f8 07       	cpc	r31, r24
    32b8:	21 f0       	breq	.+8      	; 0x32c2 <_ZN9task_user3runEv+0x756>
    32ba:	90 e2       	ldi	r25, 0x20	; 32
    32bc:	e6 3d       	cpi	r30, 0xD6	; 214
    32be:	f9 07       	cpc	r31, r25
    32c0:	39 f4       	brne	.+14     	; 0x32d0 <_ZN9task_user3runEv+0x764>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    32c2:	0f b6       	in	r0, 0x3f	; 63
    32c4:	f8 94       	cli
    32c6:	0f 92       	push	r0
			the_data = new_data;
    32c8:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    32ca:	0f 90       	pop	r0
    32cc:	0f be       	out	0x3f, r0	; 63
    32ce:	5a c2       	rjmp	.+1204   	; 0x3784 <_ZN9task_user3runEv+0xc18>
								pmotor_operator->put(0);
								
							}
							else
							{
								*p_serial << PMS ("Please choose the motor you would like to control.") << endl;
    32d0:	6a e0       	ldi	r22, 0x0A	; 10
    32d2:	ad 81       	ldd	r26, Y+5	; 0x05
    32d4:	be 81       	ldd	r27, Y+6	; 0x06
    32d6:	16 96       	adiw	r26, 0x06	; 6
    32d8:	8d 91       	ld	r24, X+
    32da:	9c 91       	ld	r25, X
    32dc:	17 97       	sbiw	r26, 0x07	; 7
    32de:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    32e2:	6c 01       	movw	r12, r24
    32e4:	64 e3       	ldi	r22, 0x34	; 52
    32e6:	79 e0       	ldi	r23, 0x09	; 9
    32e8:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    32ec:	66 e0       	ldi	r22, 0x06	; 6
    32ee:	c6 01       	movw	r24, r12
    32f0:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    32f4:	47 c2       	rjmp	.+1166   	; 0x3784 <_ZN9task_user3runEv+0xc18>
			/** In State 3, the interface task is in configuration mode. In this mode, it has the ability to change the
			 *	default values of certain system parameters.
			 */			
				
			case (3):
				if (p_serial->check_for_char ())        // If the user typed a
    32f6:	ed 81       	ldd	r30, Y+5	; 0x05
    32f8:	fe 81       	ldd	r31, Y+6	; 0x06
    32fa:	86 81       	ldd	r24, Z+6	; 0x06
    32fc:	97 81       	ldd	r25, Z+7	; 0x07
    32fe:	dc 01       	movw	r26, r24
    3300:	ed 91       	ld	r30, X+
    3302:	fc 91       	ld	r31, X
    3304:	04 80       	ldd	r0, Z+4	; 0x04
    3306:	f5 81       	ldd	r31, Z+5	; 0x05
    3308:	e0 2d       	mov	r30, r0
    330a:	19 95       	eicall
    330c:	88 23       	and	r24, r24
    330e:	09 f4       	brne	.+2      	; 0x3312 <_ZN9task_user3runEv+0x7a6>
    3310:	39 c2       	rjmp	.+1138   	; 0x3784 <_ZN9task_user3runEv+0xc18>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    3312:	ed 81       	ldd	r30, Y+5	; 0x05
    3314:	fe 81       	ldd	r31, Y+6	; 0x06
    3316:	86 81       	ldd	r24, Z+6	; 0x06
    3318:	97 81       	ldd	r25, Z+7	; 0x07
    331a:	dc 01       	movw	r26, r24
    331c:	ed 91       	ld	r30, X+
    331e:	fc 91       	ld	r31, X
    3320:	06 80       	ldd	r0, Z+6	; 0x06
    3322:	f7 81       	ldd	r31, Z+7	; 0x07
    3324:	e0 2d       	mov	r30, r0
    3326:	19 95       	eicall
    3328:	bc 01       	movw	r22, r24
					atoi_buf[atoi_index] = char_in;
    332a:	f8 01       	movw	r30, r16
    332c:	80 81       	ld	r24, Z
    332e:	ed 81       	ldd	r30, Y+5	; 0x05
    3330:	fe 81       	ldd	r31, Y+6	; 0x06
    3332:	e8 0f       	add	r30, r24
    3334:	f1 1d       	adc	r31, r1
    3336:	62 8b       	std	Z+18, r22	; 0x12
					atoi_index++;
    3338:	8f 5f       	subi	r24, 0xFF	; 255
    333a:	d8 01       	movw	r26, r16
    333c:	8c 93       	st	X, r24
					switch (char_in)
    333e:	fb 01       	movw	r30, r22
    3340:	ff 27       	eor	r31, r31
    3342:	bc 97       	sbiw	r30, 0x2c	; 44
    3344:	ef 34       	cpi	r30, 0x4F	; 79
    3346:	f1 05       	cpc	r31, r1
    3348:	08 f0       	brcs	.+2      	; 0x334c <_ZN9task_user3runEv+0x7e0>
    334a:	1c c2       	rjmp	.+1080   	; 0x3784 <_ZN9task_user3runEv+0xc18>
    334c:	88 27       	eor	r24, r24
    334e:	e1 58       	subi	r30, 0x81	; 129
    3350:	fe 4f       	sbci	r31, 0xFE	; 254
    3352:	8f 4f       	sbci	r24, 0xFF	; 255
    3354:	0c 94 49 38 	jmp	0x7092	; 0x7092 <__tablejump2__>
							//atoi_index = 0;
							//data_config = &ramp_run_span;
							//break;
							
						case ('v'):
							*p_serial << PMS ("Max velocity set to:") << endl;
    3358:	6a e0       	ldi	r22, 0x0A	; 10
    335a:	ed 81       	ldd	r30, Y+5	; 0x05
    335c:	fe 81       	ldd	r31, Y+6	; 0x06
    335e:	86 81       	ldd	r24, Z+6	; 0x06
    3360:	97 81       	ldd	r25, Z+7	; 0x07
    3362:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    3366:	6c 01       	movw	r12, r24
    3368:	6f e1       	ldi	r22, 0x1F	; 31
    336a:	79 e0       	ldi	r23, 0x09	; 9
    336c:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    3370:	66 e0       	ldi	r22, 0x06	; 6
    3372:	c6 01       	movw	r24, r12
    3374:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    3378:	d8 01       	movw	r26, r16
    337a:	1c 92       	st	X, r1
							data_config = &gen_max_v;
    337c:	81 e2       	ldi	r24, 0x21	; 33
    337e:	91 e2       	ldi	r25, 0x21	; 33
    3380:	f3 01       	movw	r30, r6
    3382:	80 83       	st	Z, r24
    3384:	91 83       	std	Z+1, r25	; 0x01
							break;
    3386:	fe c1       	rjmp	.+1020   	; 0x3784 <_ZN9task_user3runEv+0xc18>
							
						case ('x'):
							*p_serial << PMS ("X-axis max velocity set to:") << endl;
    3388:	6a e0       	ldi	r22, 0x0A	; 10
    338a:	ad 81       	ldd	r26, Y+5	; 0x05
    338c:	be 81       	ldd	r27, Y+6	; 0x06
    338e:	16 96       	adiw	r26, 0x06	; 6
    3390:	8d 91       	ld	r24, X+
    3392:	9c 91       	ld	r25, X
    3394:	17 97       	sbiw	r26, 0x07	; 7
    3396:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    339a:	6c 01       	movw	r12, r24
    339c:	63 e0       	ldi	r22, 0x03	; 3
    339e:	79 e0       	ldi	r23, 0x09	; 9
    33a0:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    33a4:	66 e0       	ldi	r22, 0x06	; 6
    33a6:	c6 01       	movw	r24, r12
    33a8:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    33ac:	f8 01       	movw	r30, r16
    33ae:	10 82       	st	Z, r1
							v_config = &x_max_velocity;
    33b0:	8f e3       	ldi	r24, 0x3F	; 63
    33b2:	91 e2       	ldi	r25, 0x21	; 33
    33b4:	d2 01       	movw	r26, r4
    33b6:	8d 93       	st	X+, r24
    33b8:	9c 93       	st	X, r25
							queue_indicator = true;
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	f1 01       	movw	r30, r2
    33be:	80 83       	st	Z, r24
							break;
    33c0:	e1 c1       	rjmp	.+962    	; 0x3784 <_ZN9task_user3runEv+0xc18>
							
						case ('y'):
							*p_serial << PMS ("Y-axis max velocity set to:") << endl;
    33c2:	6a e0       	ldi	r22, 0x0A	; 10
    33c4:	ad 81       	ldd	r26, Y+5	; 0x05
    33c6:	be 81       	ldd	r27, Y+6	; 0x06
    33c8:	16 96       	adiw	r26, 0x06	; 6
    33ca:	8d 91       	ld	r24, X+
    33cc:	9c 91       	ld	r25, X
    33ce:	17 97       	sbiw	r26, 0x07	; 7
    33d0:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    33d4:	6c 01       	movw	r12, r24
    33d6:	67 ee       	ldi	r22, 0xE7	; 231
    33d8:	78 e0       	ldi	r23, 0x08	; 8
    33da:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    33de:	66 e0       	ldi	r22, 0x06	; 6
    33e0:	c6 01       	movw	r24, r12
    33e2:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    33e6:	f8 01       	movw	r30, r16
    33e8:	10 82       	st	Z, r1
							v_config = &y_max_velocity;
    33ea:	85 e3       	ldi	r24, 0x35	; 53
    33ec:	91 e2       	ldi	r25, 0x21	; 33
    33ee:	d2 01       	movw	r26, r4
    33f0:	8d 93       	st	X+, r24
    33f2:	9c 93       	st	X, r25
							queue_indicator = true;
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	f1 01       	movw	r30, r2
    33f8:	80 83       	st	Z, r24
							break;
    33fa:	c4 c1       	rjmp	.+904    	; 0x3784 <_ZN9task_user3runEv+0xc18>
						
						case ('z'):
							*p_serial << PMS ("Z-axis max velocity set to:") << endl;
    33fc:	6a e0       	ldi	r22, 0x0A	; 10
    33fe:	ad 81       	ldd	r26, Y+5	; 0x05
    3400:	be 81       	ldd	r27, Y+6	; 0x06
    3402:	16 96       	adiw	r26, 0x06	; 6
    3404:	8d 91       	ld	r24, X+
    3406:	9c 91       	ld	r25, X
    3408:	17 97       	sbiw	r26, 0x07	; 7
    340a:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    340e:	6c 01       	movw	r12, r24
    3410:	6b ec       	ldi	r22, 0xCB	; 203
    3412:	78 e0       	ldi	r23, 0x08	; 8
    3414:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    3418:	66 e0       	ldi	r22, 0x06	; 6
    341a:	c6 01       	movw	r24, r12
    341c:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    3420:	f8 01       	movw	r30, r16
    3422:	10 82       	st	Z, r1
							v_config = &z_max_velocity;
    3424:	8b e2       	ldi	r24, 0x2B	; 43
    3426:	91 e2       	ldi	r25, 0x21	; 33
    3428:	d2 01       	movw	r26, r4
    342a:	8d 93       	st	X+, r24
    342c:	9c 93       	st	X, r25
							queue_indicator = true;
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	f1 01       	movw	r30, r2
    3432:	80 83       	st	Z, r24
							break;
    3434:	a7 c1       	rjmp	.+846    	; 0x3784 <_ZN9task_user3runEv+0xc18>
						
						case ('e'):
							*p_serial << PMS ("Leaving config mode") << endl;
    3436:	6a e0       	ldi	r22, 0x0A	; 10
    3438:	ad 81       	ldd	r26, Y+5	; 0x05
    343a:	be 81       	ldd	r27, Y+6	; 0x06
    343c:	16 96       	adiw	r26, 0x06	; 6
    343e:	8d 91       	ld	r24, X+
    3440:	9c 91       	ld	r25, X
    3442:	17 97       	sbiw	r26, 0x07	; 7
    3444:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    3448:	6c 01       	movw	r12, r24
    344a:	67 eb       	ldi	r22, 0xB7	; 183
    344c:	78 e0       	ldi	r23, 0x08	; 8
    344e:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    3452:	66 e0       	ldi	r22, 0x06	; 6
    3454:	c6 01       	movw	r24, r12
    3456:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	0f 92       	push	r0
			the_data = new_data;
    3460:	10 92 dc 20 	sts	0x20DC, r1	; 0x8020dc <configuration_mode>
			portEXIT_CRITICAL ();
    3464:	0f 90       	pop	r0
    3466:	0f be       	out	0x3f, r0	; 63
							configuration_mode.put(false);
							transition_to(0);
    3468:	60 e0       	ldi	r22, 0x00	; 0
    346a:	8d 81       	ldd	r24, Y+5	; 0x05
    346c:	9e 81       	ldd	r25, Y+6	; 0x06
    346e:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <_ZN8frt_task13transition_toEh>
							break;
    3472:	88 c1       	rjmp	.+784    	; 0x3784 <_ZN9task_user3runEv+0xc18>
							
						case('a'):
							conv_int = str_to_int();
    3474:	8d 81       	ldd	r24, Y+5	; 0x05
    3476:	9e 81       	ldd	r25, Y+6	; 0x06
    3478:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN9task_user10str_to_intEv>
    347c:	9b 01       	movw	r18, r22
    347e:	ac 01       	movw	r20, r24
    3480:	f7 01       	movw	r30, r14
    3482:	60 83       	st	Z, r22
    3484:	71 83       	std	Z+1, r23	; 0x01
    3486:	82 83       	std	Z+2, r24	; 0x02
    3488:	93 83       	std	Z+3, r25	; 0x03
							if (queue_indicator)
    348a:	d1 01       	movw	r26, r2
    348c:	8c 91       	ld	r24, X
    348e:	88 23       	and	r24, r24
    3490:	b1 f0       	breq	.+44     	; 0x34be <_ZN9task_user3runEv+0x952>
							{
								conv_int = 1000 * conv_int;
    3492:	a8 ee       	ldi	r26, 0xE8	; 232
    3494:	b3 e0       	ldi	r27, 0x03	; 3
    3496:	0e 94 60 38 	call	0x70c0	; 0x70c0 <__muluhisi3>
    349a:	60 83       	st	Z, r22
    349c:	71 83       	std	Z+1, r23	; 0x01
    349e:	82 83       	std	Z+2, r24	; 0x02
    34a0:	93 83       	std	Z+3, r25	; 0x03
								v_config->put(conv_int);
    34a2:	d2 01       	movw	r26, r4
    34a4:	8d 91       	ld	r24, X+
    34a6:	9c 91       	ld	r25, X
    34a8:	dc 01       	movw	r26, r24
    34aa:	ed 91       	ld	r30, X+
    34ac:	fc 91       	ld	r31, X
    34ae:	01 90       	ld	r0, Z+
    34b0:	f0 81       	ld	r31, Z
    34b2:	e0 2d       	mov	r30, r0
    34b4:	b7 01       	movw	r22, r14
    34b6:	19 95       	eicall
								queue_indicator = false;
    34b8:	f1 01       	movw	r30, r2
    34ba:	10 82       	st	Z, r1
    34bc:	32 c0       	rjmp	.+100    	; 0x3522 <_ZN9task_user3runEv+0x9b6>
							}
							else
							{
								if (data_config == &ramp_run_span)
    34be:	d3 01       	movw	r26, r6
    34c0:	cd 90       	ld	r12, X+
    34c2:	dc 90       	ld	r13, X
    34c4:	b7 e2       	ldi	r27, 0x27	; 39
    34c6:	cb 16       	cp	r12, r27
    34c8:	b1 e2       	ldi	r27, 0x21	; 33
    34ca:	db 06       	cpc	r13, r27
    34cc:	61 f4       	brne	.+24     	; 0x34e6 <_ZN9task_user3runEv+0x97a>
								{
									conv_int = 100 / conv_int;
    34ce:	64 e6       	ldi	r22, 0x64	; 100
    34d0:	70 e0       	ldi	r23, 0x00	; 0
    34d2:	80 e0       	ldi	r24, 0x00	; 0
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	0e 94 27 38 	call	0x704e	; 0x704e <__udivmodsi4>
    34da:	f7 01       	movw	r30, r14
    34dc:	20 83       	st	Z, r18
    34de:	31 83       	std	Z+1, r19	; 0x01
    34e0:	42 83       	std	Z+2, r20	; 0x02
    34e2:	53 83       	std	Z+3, r21	; 0x03
    34e4:	0f c0       	rjmp	.+30     	; 0x3504 <_ZN9task_user3runEv+0x998>
								}
								else if (data_config == &gen_max_v)
    34e6:	f1 e2       	ldi	r31, 0x21	; 33
    34e8:	cf 16       	cp	r12, r31
    34ea:	f1 e2       	ldi	r31, 0x21	; 33
    34ec:	df 06       	cpc	r13, r31
    34ee:	51 f4       	brne	.+20     	; 0x3504 <_ZN9task_user3runEv+0x998>
								{
									conv_int = 1500 * conv_int;
    34f0:	ac ed       	ldi	r26, 0xDC	; 220
    34f2:	b5 e0       	ldi	r27, 0x05	; 5
    34f4:	0e 94 60 38 	call	0x70c0	; 0x70c0 <__muluhisi3>
    34f8:	d7 01       	movw	r26, r14
    34fa:	6d 93       	st	X+, r22
    34fc:	7d 93       	st	X+, r23
    34fe:	8d 93       	st	X+, r24
    3500:	9c 93       	st	X, r25
    3502:	13 97       	sbiw	r26, 0x03	; 3
								}
								data_config->put(conv_int);
    3504:	f7 01       	movw	r30, r14
    3506:	80 81       	ld	r24, Z
    3508:	91 81       	ldd	r25, Z+1	; 0x01
    350a:	a2 81       	ldd	r26, Z+2	; 0x02
    350c:	b3 81       	ldd	r27, Z+3	; 0x03
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    350e:	0f b6       	in	r0, 0x3f	; 63
    3510:	f8 94       	cli
    3512:	0f 92       	push	r0
			the_data = new_data;
    3514:	f6 01       	movw	r30, r12
    3516:	80 83       	st	Z, r24
    3518:	91 83       	std	Z+1, r25	; 0x01
    351a:	a2 83       	std	Z+2, r26	; 0x02
    351c:	b3 83       	std	Z+3, r27	; 0x03
			portEXIT_CRITICAL ();
    351e:	0f 90       	pop	r0
    3520:	0f be       	out	0x3f, r0	; 63
							}
									
							atoi_index = 0;
    3522:	d8 01       	movw	r26, r16
    3524:	1c 92       	st	X, r1
							*p_serial << PMS ("Config entered:") << conv_int << endl;
    3526:	d7 01       	movw	r26, r14
    3528:	8d 91       	ld	r24, X+
    352a:	9d 91       	ld	r25, X+
    352c:	0d 90       	ld	r0, X+
    352e:	bc 91       	ld	r27, X
    3530:	a0 2d       	mov	r26, r0
    3532:	89 83       	std	Y+1, r24	; 0x01
    3534:	9a 83       	std	Y+2, r25	; 0x02
    3536:	ab 83       	std	Y+3, r26	; 0x03
    3538:	bc 83       	std	Y+4, r27	; 0x04
    353a:	6a e0       	ldi	r22, 0x0A	; 10
    353c:	ed 81       	ldd	r30, Y+5	; 0x05
    353e:	fe 81       	ldd	r31, Y+6	; 0x06
    3540:	86 81       	ldd	r24, Z+6	; 0x06
    3542:	97 81       	ldd	r25, Z+7	; 0x07
    3544:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    3548:	6c 01       	movw	r12, r24
    354a:	67 ea       	ldi	r22, 0xA7	; 167
    354c:	78 e0       	ldi	r23, 0x08	; 8
    354e:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    3552:	49 81       	ldd	r20, Y+1	; 0x01
    3554:	5a 81       	ldd	r21, Y+2	; 0x02
    3556:	6b 81       	ldd	r22, Y+3	; 0x03
    3558:	7c 81       	ldd	r23, Y+4	; 0x04
    355a:	c6 01       	movw	r24, r12
    355c:	0e 94 31 32 	call	0x6462	; 0x6462 <_ZN8emstreamlsEm>
    3560:	66 e0       	ldi	r22, 0x06	; 6
    3562:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
							break;
    3566:	0e c1       	rjmp	.+540    	; 0x3784 <_ZN9task_user3runEv+0xc18>
							
						case (','):
							*p_serial << char_in;
    3568:	ad 81       	ldd	r26, Y+5	; 0x05
    356a:	be 81       	ldd	r27, Y+6	; 0x06
    356c:	16 96       	adiw	r26, 0x06	; 6
    356e:	8d 91       	ld	r24, X+
    3570:	9c 91       	ld	r25, X
    3572:	17 97       	sbiw	r26, 0x07	; 7
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    3574:	dc 01       	movw	r26, r24
    3576:	ed 91       	ld	r30, X+
    3578:	fc 91       	ld	r31, X
    357a:	02 80       	ldd	r0, Z+2	; 0x02
    357c:	f3 81       	ldd	r31, Z+3	; 0x03
    357e:	e0 2d       	mov	r30, r0
    3580:	19 95       	eicall
							
							conv_int = str_to_int();
    3582:	8d 81       	ldd	r24, Y+5	; 0x05
    3584:	9e 81       	ldd	r25, Y+6	; 0x06
    3586:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN9task_user10str_to_intEv>
    358a:	9b 01       	movw	r18, r22
    358c:	ac 01       	movw	r20, r24
							conv_int = conv_int * 1000;
    358e:	a8 ee       	ldi	r26, 0xE8	; 232
    3590:	b3 e0       	ldi	r27, 0x03	; 3
    3592:	0e 94 60 38 	call	0x70c0	; 0x70c0 <__muluhisi3>
    3596:	f7 01       	movw	r30, r14
    3598:	60 83       	st	Z, r22
    359a:	71 83       	std	Z+1, r23	; 0x01
    359c:	82 83       	std	Z+2, r24	; 0x02
    359e:	93 83       	std	Z+3, r25	; 0x03
							v_config->put(conv_int);
    35a0:	d2 01       	movw	r26, r4
    35a2:	8d 91       	ld	r24, X+
    35a4:	9c 91       	ld	r25, X
    35a6:	dc 01       	movw	r26, r24
    35a8:	ed 91       	ld	r30, X+
    35aa:	fc 91       	ld	r31, X
    35ac:	01 90       	ld	r0, Z+
    35ae:	f0 81       	ld	r31, Z
    35b0:	e0 2d       	mov	r30, r0
    35b2:	b7 01       	movw	r22, r14
    35b4:	19 95       	eicall
							atoi_index = 0;
    35b6:	f8 01       	movw	r30, r16
    35b8:	10 82       	st	Z, r1
							break;
    35ba:	e4 c0       	rjmp	.+456    	; 0x3784 <_ZN9task_user3runEv+0xc18>
							
						case ('u'):
							*p_serial << PMS ("Microstep scaler set to:") << endl;
    35bc:	6a e0       	ldi	r22, 0x0A	; 10
    35be:	ad 81       	ldd	r26, Y+5	; 0x05
    35c0:	be 81       	ldd	r27, Y+6	; 0x06
    35c2:	16 96       	adiw	r26, 0x06	; 6
    35c4:	8d 91       	ld	r24, X+
    35c6:	9c 91       	ld	r25, X
    35c8:	17 97       	sbiw	r26, 0x07	; 7
    35ca:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    35ce:	6c 01       	movw	r12, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    35d0:	6e e8       	ldi	r22, 0x8E	; 142
    35d2:	78 e0       	ldi	r23, 0x08	; 8
    35d4:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    35d8:	66 e0       	ldi	r22, 0x06	; 6
    35da:	c6 01       	movw	r24, r12
    35dc:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    35e0:	f8 01       	movw	r30, r16
    35e2:	10 82       	st	Z, r1
							data_config = &microstep_scaler;
    35e4:	8d e4       	ldi	r24, 0x4D	; 77
    35e6:	91 e2       	ldi	r25, 0x21	; 33
    35e8:	d3 01       	movw	r26, r6
    35ea:	8d 93       	st	X+, r24
    35ec:	9c 93       	st	X, r25
							break;
    35ee:	ca c0       	rjmp	.+404    	; 0x3784 <_ZN9task_user3runEv+0xc18>
							
						case ('s'):
							*p_serial << PMS ("Sensor delay set to:") << endl;
    35f0:	6a e0       	ldi	r22, 0x0A	; 10
    35f2:	ed 81       	ldd	r30, Y+5	; 0x05
    35f4:	fe 81       	ldd	r31, Y+6	; 0x06
    35f6:	86 81       	ldd	r24, Z+6	; 0x06
    35f8:	97 81       	ldd	r25, Z+7	; 0x07
    35fa:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    35fe:	6c 01       	movw	r12, r24
    3600:	69 e7       	ldi	r22, 0x79	; 121
    3602:	78 e0       	ldi	r23, 0x08	; 8
    3604:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    3608:	66 e0       	ldi	r22, 0x06	; 6
    360a:	c6 01       	movw	r24, r12
    360c:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    3610:	d8 01       	movw	r26, r16
    3612:	1c 92       	st	X, r1
							data_config = &sensor_delay;
    3614:	81 e5       	ldi	r24, 0x51	; 81
    3616:	91 e2       	ldi	r25, 0x21	; 33
    3618:	f3 01       	movw	r30, r6
    361a:	80 83       	st	Z, r24
    361c:	91 83       	std	Z+1, r25	; 0x01
							break;
    361e:	b2 c0       	rjmp	.+356    	; 0x3784 <_ZN9task_user3runEv+0xc18>
							
						case ('n'):
							*p_serial << PMS ("Sensor sample size set to:") << endl;
    3620:	6a e0       	ldi	r22, 0x0A	; 10
    3622:	ad 81       	ldd	r26, Y+5	; 0x05
    3624:	be 81       	ldd	r27, Y+6	; 0x06
    3626:	16 96       	adiw	r26, 0x06	; 6
    3628:	8d 91       	ld	r24, X+
    362a:	9c 91       	ld	r25, X
    362c:	17 97       	sbiw	r26, 0x07	; 7
    362e:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    3632:	6c 01       	movw	r12, r24
    3634:	6e e5       	ldi	r22, 0x5E	; 94
    3636:	78 e0       	ldi	r23, 0x08	; 8
    3638:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    363c:	66 e0       	ldi	r22, 0x06	; 6
    363e:	c6 01       	movw	r24, r12
    3640:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    3644:	f8 01       	movw	r30, r16
    3646:	10 82       	st	Z, r1
							data_config = &sensor_sample_number;
    3648:	86 e5       	ldi	r24, 0x56	; 86
    364a:	91 e2       	ldi	r25, 0x21	; 33
    364c:	d3 01       	movw	r26, r6
    364e:	8d 93       	st	X+, r24
    3650:	9c 93       	st	X, r25
							break;
    3652:	98 c0       	rjmp	.+304    	; 0x3784 <_ZN9task_user3runEv+0xc18>
							
						case('0'):
						
						*p_serial << char_in;
    3654:	ed 81       	ldd	r30, Y+5	; 0x05
    3656:	fe 81       	ldd	r31, Y+6	; 0x06
    3658:	86 81       	ldd	r24, Z+6	; 0x06
    365a:	97 81       	ldd	r25, Z+7	; 0x07
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    365c:	dc 01       	movw	r26, r24
    365e:	ed 91       	ld	r30, X+
    3660:	fc 91       	ld	r31, X
    3662:	02 80       	ldd	r0, Z+2	; 0x02
    3664:	f3 81       	ldd	r31, Z+3	; 0x03
    3666:	e0 2d       	mov	r30, r0
    3668:	19 95       	eicall
    366a:	8c c0       	rjmp	.+280    	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('1'):
						
						*p_serial << char_in;
    366c:	ed 81       	ldd	r30, Y+5	; 0x05
    366e:	fe 81       	ldd	r31, Y+6	; 0x06
    3670:	86 81       	ldd	r24, Z+6	; 0x06
    3672:	97 81       	ldd	r25, Z+7	; 0x07
    3674:	dc 01       	movw	r26, r24
    3676:	ed 91       	ld	r30, X+
    3678:	fc 91       	ld	r31, X
    367a:	02 80       	ldd	r0, Z+2	; 0x02
    367c:	f3 81       	ldd	r31, Z+3	; 0x03
    367e:	e0 2d       	mov	r30, r0
    3680:	19 95       	eicall
    3682:	80 c0       	rjmp	.+256    	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('2'):
						
						*p_serial << char_in;
    3684:	ed 81       	ldd	r30, Y+5	; 0x05
    3686:	fe 81       	ldd	r31, Y+6	; 0x06
    3688:	86 81       	ldd	r24, Z+6	; 0x06
    368a:	97 81       	ldd	r25, Z+7	; 0x07
    368c:	dc 01       	movw	r26, r24
    368e:	ed 91       	ld	r30, X+
    3690:	fc 91       	ld	r31, X
    3692:	02 80       	ldd	r0, Z+2	; 0x02
    3694:	f3 81       	ldd	r31, Z+3	; 0x03
    3696:	e0 2d       	mov	r30, r0
    3698:	19 95       	eicall
    369a:	74 c0       	rjmp	.+232    	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('3'):
						
						*p_serial << char_in;
    369c:	ed 81       	ldd	r30, Y+5	; 0x05
    369e:	fe 81       	ldd	r31, Y+6	; 0x06
    36a0:	86 81       	ldd	r24, Z+6	; 0x06
    36a2:	97 81       	ldd	r25, Z+7	; 0x07
    36a4:	dc 01       	movw	r26, r24
    36a6:	ed 91       	ld	r30, X+
    36a8:	fc 91       	ld	r31, X
    36aa:	02 80       	ldd	r0, Z+2	; 0x02
    36ac:	f3 81       	ldd	r31, Z+3	; 0x03
    36ae:	e0 2d       	mov	r30, r0
    36b0:	19 95       	eicall
    36b2:	68 c0       	rjmp	.+208    	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('4'):
						
						*p_serial << char_in;
    36b4:	ed 81       	ldd	r30, Y+5	; 0x05
    36b6:	fe 81       	ldd	r31, Y+6	; 0x06
    36b8:	86 81       	ldd	r24, Z+6	; 0x06
    36ba:	97 81       	ldd	r25, Z+7	; 0x07
    36bc:	dc 01       	movw	r26, r24
    36be:	ed 91       	ld	r30, X+
    36c0:	fc 91       	ld	r31, X
    36c2:	02 80       	ldd	r0, Z+2	; 0x02
    36c4:	f3 81       	ldd	r31, Z+3	; 0x03
    36c6:	e0 2d       	mov	r30, r0
    36c8:	19 95       	eicall
    36ca:	5c c0       	rjmp	.+184    	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('5'):
						
						*p_serial << char_in;
    36cc:	ed 81       	ldd	r30, Y+5	; 0x05
    36ce:	fe 81       	ldd	r31, Y+6	; 0x06
    36d0:	86 81       	ldd	r24, Z+6	; 0x06
    36d2:	97 81       	ldd	r25, Z+7	; 0x07
    36d4:	dc 01       	movw	r26, r24
    36d6:	ed 91       	ld	r30, X+
    36d8:	fc 91       	ld	r31, X
    36da:	02 80       	ldd	r0, Z+2	; 0x02
    36dc:	f3 81       	ldd	r31, Z+3	; 0x03
    36de:	e0 2d       	mov	r30, r0
    36e0:	19 95       	eicall
    36e2:	50 c0       	rjmp	.+160    	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('6'):
						
						*p_serial << char_in;
    36e4:	ed 81       	ldd	r30, Y+5	; 0x05
    36e6:	fe 81       	ldd	r31, Y+6	; 0x06
    36e8:	86 81       	ldd	r24, Z+6	; 0x06
    36ea:	97 81       	ldd	r25, Z+7	; 0x07
    36ec:	dc 01       	movw	r26, r24
    36ee:	ed 91       	ld	r30, X+
    36f0:	fc 91       	ld	r31, X
    36f2:	02 80       	ldd	r0, Z+2	; 0x02
    36f4:	f3 81       	ldd	r31, Z+3	; 0x03
    36f6:	e0 2d       	mov	r30, r0
    36f8:	19 95       	eicall
    36fa:	44 c0       	rjmp	.+136    	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('7'):
						
						*p_serial << char_in;
    36fc:	ed 81       	ldd	r30, Y+5	; 0x05
    36fe:	fe 81       	ldd	r31, Y+6	; 0x06
    3700:	86 81       	ldd	r24, Z+6	; 0x06
    3702:	97 81       	ldd	r25, Z+7	; 0x07
    3704:	dc 01       	movw	r26, r24
    3706:	ed 91       	ld	r30, X+
    3708:	fc 91       	ld	r31, X
    370a:	02 80       	ldd	r0, Z+2	; 0x02
    370c:	f3 81       	ldd	r31, Z+3	; 0x03
    370e:	e0 2d       	mov	r30, r0
    3710:	19 95       	eicall
    3712:	38 c0       	rjmp	.+112    	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('8'):
						
						*p_serial << char_in;
    3714:	ed 81       	ldd	r30, Y+5	; 0x05
    3716:	fe 81       	ldd	r31, Y+6	; 0x06
    3718:	86 81       	ldd	r24, Z+6	; 0x06
    371a:	97 81       	ldd	r25, Z+7	; 0x07
    371c:	dc 01       	movw	r26, r24
    371e:	ed 91       	ld	r30, X+
    3720:	fc 91       	ld	r31, X
    3722:	02 80       	ldd	r0, Z+2	; 0x02
    3724:	f3 81       	ldd	r31, Z+3	; 0x03
    3726:	e0 2d       	mov	r30, r0
    3728:	19 95       	eicall
    372a:	2c c0       	rjmp	.+88     	; 0x3784 <_ZN9task_user3runEv+0xc18>
						break;

						case('9'):
						
						*p_serial << char_in;
    372c:	ed 81       	ldd	r30, Y+5	; 0x05
    372e:	fe 81       	ldd	r31, Y+6	; 0x06
    3730:	86 81       	ldd	r24, Z+6	; 0x06
    3732:	97 81       	ldd	r25, Z+7	; 0x07
    3734:	dc 01       	movw	r26, r24
    3736:	ed 91       	ld	r30, X+
    3738:	fc 91       	ld	r31, X
    373a:	02 80       	ldd	r0, Z+2	; 0x02
    373c:	f3 81       	ldd	r31, Z+3	; 0x03
    373e:	e0 2d       	mov	r30, r0
    3740:	19 95       	eicall
    3742:	20 c0       	rjmp	.+64     	; 0x3784 <_ZN9task_user3runEv+0xc18>
    3744:	a9 83       	std	Y+1, r26	; 0x01
    3746:	ba 83       	std	Y+2, r27	; 0x02
				break;

			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// We should never get to the default state. If we do, complain and restart
			default:
				*p_serial << PMS ("Illegal state! Resetting AVR") << endl;
    3748:	6a e0       	ldi	r22, 0x0A	; 10
    374a:	fd 01       	movw	r30, r26
    374c:	86 81       	ldd	r24, Z+6	; 0x06
    374e:	97 81       	ldd	r25, Z+7	; 0x07
    3750:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    3754:	89 83       	std	Y+1, r24	; 0x01
    3756:	9a 83       	std	Y+2, r25	; 0x02
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    3758:	61 e4       	ldi	r22, 0x41	; 65
    375a:	78 e0       	ldi	r23, 0x08	; 8
    375c:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    3760:	66 e0       	ldi	r22, 0x06	; 6
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	9a 81       	ldd	r25, Y+2	; 0x02
    3766:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
				wdt_enable (WDTO_120MS);
    376a:	93 e0       	ldi	r25, 0x03	; 3
    376c:	88 ed       	ldi	r24, 0xD8	; 216
    376e:	08 b6       	in	r0, 0x38	; 56
    3770:	18 be       	out	0x38, r1	; 56
    3772:	84 bf       	out	0x34, r24	; 52
    3774:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3778:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    377c:	81 fd       	sbrc	r24, 1
    377e:	fc cf       	rjmp	.-8      	; 0x3778 <_ZN9task_user3runEv+0xc0c>
    3780:	08 be       	out	0x38, r0	; 56
    3782:	ff cf       	rjmp	.-2      	; 0x3782 <_ZN9task_user3runEv+0xc16>
				for (;;);
				break;

		} // End switch state

		runs++;                             // Increment counter for debugging
    3784:	ed 81       	ldd	r30, Y+5	; 0x05
    3786:	fe 81       	ldd	r31, Y+6	; 0x06
    3788:	86 85       	ldd	r24, Z+14	; 0x0e
    378a:	97 85       	ldd	r25, Z+15	; 0x0f
    378c:	a0 89       	ldd	r26, Z+16	; 0x10
    378e:	b1 89       	ldd	r27, Z+17	; 0x11
    3790:	01 96       	adiw	r24, 0x01	; 1
    3792:	a1 1d       	adc	r26, r1
    3794:	b1 1d       	adc	r27, r1
    3796:	86 87       	std	Z+14, r24	; 0x0e
    3798:	97 87       	std	Z+15, r25	; 0x0f
    379a:	a0 8b       	std	Z+16, r26	; 0x10
    379c:	b1 8b       	std	Z+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (1));
    379e:	61 e0       	ldi	r22, 0x01	; 1
    37a0:	70 e0       	ldi	r23, 0x00	; 0
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	0e 94 5f 2b 	call	0x56be	; 0x56be <vTaskDelay>

	//print_main_menu();

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    37aa:	12 ca       	rjmp	.-3036   	; 0x2bd0 <_ZN9task_user3runEv+0x64>

000037ac <_ZN9frt_queueImE16ISR_num_items_inEv>:
		 *  called only from within an interrupt service routine.
		 *  @return The number of items in the queue
		 */
		size_t ISR_num_items_in (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle));
    37ac:	fc 01       	movw	r30, r24
    37ae:	84 81       	ldd	r24, Z+4	; 0x04
    37b0:	95 81       	ldd	r25, Z+5	; 0x05
    37b2:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <uxQueueMessagesWaitingFromISR>
		}
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	08 95       	ret

000037ba <_ZN9frt_queueImE13ISR_not_emptyEv>:
		 *  an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool ISR_not_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) != 0);
    37ba:	fc 01       	movw	r30, r24
    37bc:	84 81       	ldd	r24, Z+4	; 0x04
    37be:	95 81       	ldd	r25, Z+5	; 0x05
    37c0:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <uxQueueMessagesWaitingFromISR>
    37c4:	91 e0       	ldi	r25, 0x01	; 1
    37c6:	81 11       	cpse	r24, r1
    37c8:	01 c0       	rjmp	.+2      	; 0x37cc <_ZN9frt_queueImE13ISR_not_emptyEv+0x12>
    37ca:	90 e0       	ldi	r25, 0x00	; 0
		}
    37cc:	89 2f       	mov	r24, r25
    37ce:	08 95       	ret

000037d0 <_ZN9frt_queueImE12ISR_is_emptyEv>:
		 *  routine. It must not be used in normal non-ISR code. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool ISR_is_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) == 0);
    37d0:	fc 01       	movw	r30, r24
    37d2:	84 81       	ldd	r24, Z+4	; 0x04
    37d4:	95 81       	ldd	r25, Z+5	; 0x05
    37d6:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <uxQueueMessagesWaitingFromISR>
    37da:	91 e0       	ldi	r25, 0x01	; 1
    37dc:	81 11       	cpse	r24, r1
    37de:	90 e0       	ldi	r25, 0x00	; 0
		}
    37e0:	89 2f       	mov	r24, r25
    37e2:	08 95       	ret

000037e4 <_ZN9frt_queueImE12num_items_inEv>:
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    37e4:	fc 01       	movw	r30, r24
    37e6:	84 81       	ldd	r24, Z+4	; 0x04
    37e8:	95 81       	ldd	r25, Z+5	; 0x05
    37ea:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <uxQueueMessagesWaiting>
		}
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	08 95       	ret

000037f2 <_ZN9frt_queueImE9not_emptyEv>:
		 *  \b not be called from within an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool not_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) != 0);
    37f2:	fc 01       	movw	r30, r24
    37f4:	84 81       	ldd	r24, Z+4	; 0x04
    37f6:	95 81       	ldd	r25, Z+5	; 0x05
    37f8:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <uxQueueMessagesWaiting>
    37fc:	91 e0       	ldi	r25, 0x01	; 1
    37fe:	81 11       	cpse	r24, r1
    3800:	01 c0       	rjmp	.+2      	; 0x3804 <_ZN9frt_queueImE9not_emptyEv+0x12>
    3802:	90 e0       	ldi	r25, 0x00	; 0
		}
    3804:	89 2f       	mov	r24, r25
    3806:	08 95       	ret

00003808 <_ZN9frt_queueImE8is_emptyEv>:
		/** This method checks if the queue is empty. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool is_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) == 0);
    3808:	fc 01       	movw	r30, r24
    380a:	84 81       	ldd	r24, Z+4	; 0x04
    380c:	95 81       	ldd	r25, Z+5	; 0x05
    380e:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <uxQueueMessagesWaiting>
    3812:	91 e0       	ldi	r25, 0x01	; 1
    3814:	81 11       	cpse	r24, r1
    3816:	90 e0       	ldi	r25, 0x00	; 0
		}
    3818:	89 2f       	mov	r24, r25
    381a:	08 95       	ret

0000381c <_ZN9frt_queueImE10get_a_copyERm>:
 *  \c xQueuePeekFromISR() which would allow copying items from a queue in an ISR. 
 *  @param item A reference to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get_a_copy (data_type& item)
    381c:	0f 93       	push	r16
{
	xQueuePeek (handle, &item, portMAX_DELAY);
    381e:	01 e0       	ldi	r16, 0x01	; 1
    3820:	2f ef       	ldi	r18, 0xFF	; 255
    3822:	3f ef       	ldi	r19, 0xFF	; 255
    3824:	a9 01       	movw	r20, r18
    3826:	fc 01       	movw	r30, r24
    3828:	84 81       	ldd	r24, Z+4	; 0x04
    382a:	95 81       	ldd	r25, Z+5	; 0x05
    382c:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <xQueueGenericReceive>
}
    3830:	0f 91       	pop	r16
    3832:	08 95       	ret

00003834 <_ZN9frt_queueImE10get_a_copyEv>:
 *          data type if we couldn't get any data from the queue and the attempt
 *          timed out
 */

template <class data_type>
inline data_type frt_queue<data_type>::get_a_copy (void)
    3834:	0f 93       	push	r16
    3836:	cf 93       	push	r28
    3838:	df 93       	push	r29
    383a:	00 d0       	rcall	.+0      	; 0x383c <_ZN9frt_queueImE10get_a_copyEv+0x8>
    383c:	1f 92       	push	r1
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueuePeek (handle, &recv_item, portMAX_DELAY);
    3842:	01 e0       	ldi	r16, 0x01	; 1
    3844:	2f ef       	ldi	r18, 0xFF	; 255
    3846:	3f ef       	ldi	r19, 0xFF	; 255
    3848:	a9 01       	movw	r20, r18
    384a:	be 01       	movw	r22, r28
    384c:	6f 5f       	subi	r22, 0xFF	; 255
    384e:	7f 4f       	sbci	r23, 0xFF	; 255
    3850:	fc 01       	movw	r30, r24
    3852:	84 81       	ldd	r24, Z+4	; 0x04
    3854:	95 81       	ldd	r25, Z+5	; 0x05
    3856:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <xQueueGenericReceive>
	return (recv_item);
    385a:	69 81       	ldd	r22, Y+1	; 0x01
    385c:	7a 81       	ldd	r23, Y+2	; 0x02
    385e:	8b 81       	ldd	r24, Y+3	; 0x03
    3860:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3862:	24 96       	adiw	r28, 0x04	; 4
    3864:	cd bf       	out	0x3d, r28	; 61
    3866:	de bf       	out	0x3e, r29	; 62
    3868:	df 91       	pop	r29
    386a:	cf 91       	pop	r28
    386c:	0f 91       	pop	r16
    386e:	08 95       	ret

00003870 <_ZN9frt_queueImE3getEPm>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get (data_type* p_item)
    3870:	0f 93       	push	r16
{
	xQueueReceive (handle, p_item, portMAX_DELAY);
    3872:	00 e0       	ldi	r16, 0x00	; 0
    3874:	2f ef       	ldi	r18, 0xFF	; 255
    3876:	3f ef       	ldi	r19, 0xFF	; 255
    3878:	a9 01       	movw	r20, r18
    387a:	fc 01       	movw	r30, r24
    387c:	84 81       	ldd	r24, Z+4	; 0x04
    387e:	95 81       	ldd	r25, Z+5	; 0x05
    3880:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <xQueueGenericReceive>
}
    3884:	0f 91       	pop	r16
    3886:	08 95       	ret

00003888 <_ZN9frt_queueImE3getEv>:
 *  up. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::get (void)
    3888:	0f 93       	push	r16
    388a:	cf 93       	push	r28
    388c:	df 93       	push	r29
    388e:	00 d0       	rcall	.+0      	; 0x3890 <_ZN9frt_queueImE3getEv+0x8>
    3890:	1f 92       	push	r1
    3892:	cd b7       	in	r28, 0x3d	; 61
    3894:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceive (handle, &recv_item, portMAX_DELAY);
    3896:	00 e0       	ldi	r16, 0x00	; 0
    3898:	2f ef       	ldi	r18, 0xFF	; 255
    389a:	3f ef       	ldi	r19, 0xFF	; 255
    389c:	a9 01       	movw	r20, r18
    389e:	be 01       	movw	r22, r28
    38a0:	6f 5f       	subi	r22, 0xFF	; 255
    38a2:	7f 4f       	sbci	r23, 0xFF	; 255
    38a4:	fc 01       	movw	r30, r24
    38a6:	84 81       	ldd	r24, Z+4	; 0x04
    38a8:	95 81       	ldd	r25, Z+5	; 0x05
    38aa:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <xQueueGenericReceive>
	return (recv_item);
    38ae:	69 81       	ldd	r22, Y+1	; 0x01
    38b0:	7a 81       	ldd	r23, Y+2	; 0x02
    38b2:	8b 81       	ldd	r24, Y+3	; 0x03
    38b4:	9c 81       	ldd	r25, Y+4	; 0x04
}
    38b6:	24 96       	adiw	r28, 0x04	; 4
    38b8:	cd bf       	out	0x3d, r28	; 61
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	df 91       	pop	r29
    38be:	cf 91       	pop	r28
    38c0:	0f 91       	pop	r16
    38c2:	08 95       	ret

000038c4 <_ZN9frt_queueImE7ISR_getEPm>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::ISR_get (data_type* p_item)
    38c4:	cf 93       	push	r28
    38c6:	df 93       	push	r29
    38c8:	1f 92       	push	r1
    38ca:	cd b7       	in	r28, 0x3d	; 61
    38cc:	de b7       	in	r29, 0x3e	; 62
{
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, and
	// nothing will actually be copied
	xQueueReceiveFromISR (handle, p_item, &task_awakened);
    38ce:	ae 01       	movw	r20, r28
    38d0:	4f 5f       	subi	r20, 0xFF	; 255
    38d2:	5f 4f       	sbci	r21, 0xFF	; 255
    38d4:	fc 01       	movw	r30, r24
    38d6:	84 81       	ldd	r24, Z+4	; 0x04
    38d8:	95 81       	ldd	r25, Z+5	; 0x05
    38da:	0e 94 82 27 	call	0x4f04	; 0x4f04 <xQueueReceiveFromISR>
}
    38de:	0f 90       	pop	r0
    38e0:	df 91       	pop	r29
    38e2:	cf 91       	pop	r28
    38e4:	08 95       	ret

000038e6 <_ZN9frt_queueImE7ISR_getEv>:
 *  service routine. This method must not be called from within normal non-ISR code. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::ISR_get (void)
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
    38ee:	25 97       	sbiw	r28, 0x05	; 5
    38f0:	cd bf       	out	0x3d, r28	; 61
    38f2:	de bf       	out	0x3e, r29	; 62
	data_type recv_item;                    // Data item read from the queue
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceiveFromISR (handle, &recv_item, &task_awakened);
    38f4:	ae 01       	movw	r20, r28
    38f6:	4b 5f       	subi	r20, 0xFB	; 251
    38f8:	5f 4f       	sbci	r21, 0xFF	; 255
    38fa:	be 01       	movw	r22, r28
    38fc:	6f 5f       	subi	r22, 0xFF	; 255
    38fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3900:	fc 01       	movw	r30, r24
    3902:	84 81       	ldd	r24, Z+4	; 0x04
    3904:	95 81       	ldd	r25, Z+5	; 0x05
    3906:	0e 94 82 27 	call	0x4f04	; 0x4f04 <xQueueReceiveFromISR>
	return (recv_item);
    390a:	69 81       	ldd	r22, Y+1	; 0x01
    390c:	7a 81       	ldd	r23, Y+2	; 0x02
    390e:	8b 81       	ldd	r24, Y+3	; 0x03
    3910:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3912:	25 96       	adiw	r28, 0x05	; 5
    3914:	cd bf       	out	0x3d, r28	; 61
    3916:	de bf       	out	0x3e, r29	; 62
    3918:	df 91       	pop	r29
    391a:	cf 91       	pop	r28
    391c:	08 95       	ret

0000391e <_ZN9frt_queueImE11ISR_butt_inERKm>:
 *              the front of the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
bool frt_queue<data_type>::ISR_butt_in (const data_type& item)
    391e:	cf 93       	push	r28
    3920:	df 93       	push	r29
    3922:	1f 92       	push	r1
    3924:	cd b7       	in	r28, 0x3d	; 61
    3926:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    3928:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;                      // Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToFrontFromISR (handle, &item, &shouldSwitch));
    392a:	21 e0       	ldi	r18, 0x01	; 1
    392c:	ae 01       	movw	r20, r28
    392e:	4f 5f       	subi	r20, 0xFF	; 255
    3930:	5f 4f       	sbci	r21, 0xFF	; 255
    3932:	fc 01       	movw	r30, r24
    3934:	84 81       	ldd	r24, Z+4	; 0x04
    3936:	95 81       	ldd	r25, Z+5	; 0x05
    3938:	0e 94 92 26 	call	0x4d24	; 0x4d24 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    393c:	91 e0       	ldi	r25, 0x01	; 1
    393e:	81 11       	cpse	r24, r1
    3940:	01 c0       	rjmp	.+2      	; 0x3944 <_ZN9frt_queueImE11ISR_butt_inERKm+0x26>
    3942:	90 e0       	ldi	r25, 0x00	; 0
}
    3944:	89 2f       	mov	r24, r25
    3946:	0f 90       	pop	r0
    3948:	df 91       	pop	r29
    394a:	cf 91       	pop	r28
    394c:	08 95       	ret

0000394e <_ZN9frt_queueImE7ISR_putERKm>:
 *  @param item Reference to the item which is going to be put into the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
inline bool frt_queue<data_type>::ISR_put (const data_type& item)
    394e:	cf 93       	push	r28
    3950:	df 93       	push	r29
    3952:	1f 92       	push	r1
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    3958:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;						// Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToBackFromISR (handle, &item, &shouldSwitch));
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	ae 01       	movw	r20, r28
    395e:	4f 5f       	subi	r20, 0xFF	; 255
    3960:	5f 4f       	sbci	r21, 0xFF	; 255
    3962:	fc 01       	movw	r30, r24
    3964:	84 81       	ldd	r24, Z+4	; 0x04
    3966:	95 81       	ldd	r25, Z+5	; 0x05
    3968:	0e 94 92 26 	call	0x4d24	; 0x4d24 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    396c:	91 e0       	ldi	r25, 0x01	; 1
    396e:	81 11       	cpse	r24, r1
    3970:	01 c0       	rjmp	.+2      	; 0x3974 <_ZN9frt_queueImE7ISR_putERKm+0x26>
    3972:	90 e0       	ldi	r25, 0x00	; 0
}
    3974:	89 2f       	mov	r24, r25
    3976:	0f 90       	pop	r0
    3978:	df 91       	pop	r29
    397a:	cf 91       	pop	r28
    397c:	08 95       	ret

0000397e <_ZN9frt_queueImE7butt_inERKm>:
		 *  \b not be used within an interrupt service routine. 
		 *  @param item Reference to the item which is going to be (rudely) put into 
		 *              the front of the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool butt_in (const data_type& item)
    397e:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToFront (handle, &item, ticks_to_wait)));
    3980:	fc 01       	movw	r30, r24
    3982:	26 81       	ldd	r18, Z+6	; 0x06
    3984:	37 81       	ldd	r19, Z+7	; 0x07
    3986:	40 85       	ldd	r20, Z+8	; 0x08
    3988:	51 85       	ldd	r21, Z+9	; 0x09
    398a:	01 e0       	ldi	r16, 0x01	; 1
    398c:	84 81       	ldd	r24, Z+4	; 0x04
    398e:	95 81       	ldd	r25, Z+5	; 0x05
    3990:	0e 94 f7 25 	call	0x4bee	; 0x4bee <xQueueGenericSend>
    3994:	91 e0       	ldi	r25, 0x01	; 1
    3996:	81 11       	cpse	r24, r1
    3998:	01 c0       	rjmp	.+2      	; 0x399c <_ZN9frt_queueImE7butt_inERKm+0x1e>
    399a:	90 e0       	ldi	r25, 0x00	; 0
		}
    399c:	89 2f       	mov	r24, r25
    399e:	0f 91       	pop	r16
    39a0:	08 95       	ret

000039a2 <_ZN9frt_queueImE3putERKm>:
		 *  an item into the front of the queue so it will be retreived first, use 
		 *  \c butt_in() instead. This method must \b not be used within an ISR.
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
    39a2:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
    39a4:	fc 01       	movw	r30, r24
    39a6:	26 81       	ldd	r18, Z+6	; 0x06
    39a8:	37 81       	ldd	r19, Z+7	; 0x07
    39aa:	40 85       	ldd	r20, Z+8	; 0x08
    39ac:	51 85       	ldd	r21, Z+9	; 0x09
    39ae:	00 e0       	ldi	r16, 0x00	; 0
    39b0:	84 81       	ldd	r24, Z+4	; 0x04
    39b2:	95 81       	ldd	r25, Z+5	; 0x05
    39b4:	0e 94 f7 25 	call	0x4bee	; 0x4bee <xQueueGenericSend>
    39b8:	91 e0       	ldi	r25, 0x01	; 1
    39ba:	81 11       	cpse	r24, r1
    39bc:	01 c0       	rjmp	.+2      	; 0x39c0 <_ZN9frt_queueImE3putERKm+0x1e>
    39be:	90 e0       	ldi	r25, 0x00	; 0
		}
    39c0:	89 2f       	mov	r24, r25
    39c2:	0f 91       	pop	r16
    39c4:	08 95       	ret

000039c6 <_Z8CCPWritePVhh>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    39c6:	0f 93       	push	r16
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29
    39cc:	1f 92       	push	r1
    39ce:	cd b7       	in	r28, 0x3d	; 61
    39d0:	de b7       	in	r29, 0x3e	; 62
  #if defined __GNUC__
  uint8_t volatile saved_sreg = SREG;
    39d2:	2f b7       	in	r18, 0x3f	; 63
    39d4:	29 83       	std	Y+1, r18	; 0x01
  cli();
    39d6:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
  #ifdef RAMPZ
  RAMPZ = 0;
    39d8:	1b be       	out	0x3b, r1	; 59
  "out   %3, r16"       "\n\t"
  "st     Z,  %1"       "\n\t"
  :
  : "r" (tmpAddr), "r" (value), "M" (0xD8), "i" (&CCP)
  : "r16", "r30", "r31"
  );
    39da:	fc 01       	movw	r30, r24
    39dc:	08 ed       	ldi	r16, 0xD8	; 216
    39de:	04 bf       	out	0x34, r16	; 52
    39e0:	60 83       	st	Z, r22

  SREG = saved_sreg;
    39e2:	89 81       	ldd	r24, Y+1	; 0x01
    39e4:	8f bf       	out	0x3f, r24	; 63
  #endif
}
    39e6:	0f 90       	pop	r0
    39e8:	df 91       	pop	r29
    39ea:	cf 91       	pop	r28
    39ec:	0f 91       	pop	r16
    39ee:	08 95       	ret

000039f0 <main>:
 *  reset.
 *  @return This is a real-time microcontroller program which doesn't return. Ever.
 */

int main (void)
{
    39f0:	4f 92       	push	r4
    39f2:	5f 92       	push	r5
    39f4:	6f 92       	push	r6
    39f6:	7f 92       	push	r7
    39f8:	8f 92       	push	r8
    39fa:	9f 92       	push	r9
    39fc:	af 92       	push	r10
    39fe:	bf 92       	push	r11
    3a00:	cf 92       	push	r12
    3a02:	df 92       	push	r13
    3a04:	ef 92       	push	r14
    3a06:	ff 92       	push	r15
    3a08:	0f 93       	push	r16
    3a0a:	1f 93       	push	r17
    3a0c:	cf 93       	push	r28
    3a0e:	df 93       	push	r29
    3a10:	cd b7       	in	r28, 0x3d	; 61
    3a12:	de b7       	in	r29, 0x3e	; 62
    3a14:	6d 97       	sbiw	r28, 0x1d	; 29
    3a16:	cd bf       	out	0x3d, r28	; 61
    3a18:	de bf       	out	0x3e, r29	; 62
  cli();
    3a1a:	f8 94       	cli
  // Configure the system clock
  { 
    // Enable the 32MHz internal RC oscillator and the external 32KHz oscillator
    OSC.CTRL |= (1 << OSC_RC32MEN_bp);
    3a1c:	e0 e5       	ldi	r30, 0x50	; 80
    3a1e:	f0 e0       	ldi	r31, 0x00	; 0
    3a20:	80 81       	ld	r24, Z
    3a22:	82 60       	ori	r24, 0x02	; 2
    3a24:	80 83       	st	Z, r24
    do {} while((OSC.STATUS & (1 << OSC_RC32MRDY_bp)) != (1 << OSC_RC32MRDY_bp));
    3a26:	81 81       	ldd	r24, Z+1	; 0x01
    3a28:	81 ff       	sbrs	r24, 1
    3a2a:	fd cf       	rjmp	.-6      	; 0x3a26 <main+0x36>

    // Select the clock
    CCPWrite(&(CLK.CTRL),((CLK.CTRL & ~CLK_SCLKSEL_gm) | (1 << CLK_SCLKSEL0_bp)));
    3a2c:	60 91 40 00 	lds	r22, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    3a30:	68 7f       	andi	r22, 0xF8	; 248
    3a32:	61 60       	ori	r22, 0x01	; 1
    3a34:	80 e4       	ldi	r24, 0x40	; 64
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <_Z8CCPWritePVhh>
    
    // Disable the 2MHz internal RC oscillator
    OSC.CTRL &= ~(1 << OSC_RC2MEN_bp);
    3a3c:	e0 e5       	ldi	r30, 0x50	; 80
    3a3e:	f0 e0       	ldi	r31, 0x00	; 0
    3a40:	80 81       	ld	r24, Z
    3a42:	8e 7f       	andi	r24, 0xFE	; 254
    3a44:	80 83       	st	Z, r24
  }
  
  // Disable the watchdog timer unless it's needed later. This is important because
  // sometimes the watchdog timer may have been left on...and it tends to stay on  
  wdt_disable ();
    3a46:	9d ef       	ldi	r25, 0xFD	; 253
    3a48:	88 ed       	ldi	r24, 0xD8	; 216
    3a4a:	08 b6       	in	r0, 0x38	; 56
    3a4c:	18 be       	out	0x38, r1	; 56
    3a4e:	84 bf       	out	0x34, r24	; 52
    3a50:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3a54:	08 be       	out	0x38, r0	; 56

  // Configure a serial port which can be used by a task to print debugging infor-
  // mation, or to allow user interaction, or for whatever use is appropriate.  The
  // serial port will be used by the user interface task after setup is complete and
  // the task scheduler has been started by the function vTaskStartScheduler()
  rs232 ser_dev(0,&USARTE0); // Create a serial device on USART E0
    3a56:	40 ea       	ldi	r20, 0xA0	; 160
    3a58:	5a e0       	ldi	r21, 0x0A	; 10
    3a5a:	60 e0       	ldi	r22, 0x00	; 0
    3a5c:	70 e0       	ldi	r23, 0x00	; 0
    3a5e:	ce 01       	movw	r24, r28
    3a60:	01 96       	adiw	r24, 0x01	; 1
    3a62:	0e 94 59 33 	call	0x66b2	; 0x66b2 <_ZN5rs232C1EjP12USART_struct>
  ser_dev << clrscr << "FreeRTOS Xmega Testing Program" << endl << endl;
    3a66:	67 e0       	ldi	r22, 0x07	; 7
    3a68:	ce 01       	movw	r24, r28
    3a6a:	01 96       	adiw	r24, 0x01	; 1
    3a6c:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    3a70:	3c 01       	movw	r6, r24
    3a72:	6f e2       	ldi	r22, 0x2F	; 47
    3a74:	70 e2       	ldi	r23, 0x20	; 32
    3a76:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    3a7a:	66 e0       	ldi	r22, 0x06	; 6
    3a7c:	c3 01       	movw	r24, r6
    3a7e:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    3a82:	66 e0       	ldi	r22, 0x06	; 6
    3a84:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    3a88:	0f b6       	in	r0, 0x3f	; 63
    3a8a:	f8 94       	cli
    3a8c:	0f 92       	push	r0
			the_data = new_data;
    3a8e:	82 e0       	ldi	r24, 0x02	; 2
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	a0 e0       	ldi	r26, 0x00	; 0
    3a94:	b0 e0       	ldi	r27, 0x00	; 0
    3a96:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <sensor_delay>
    3a9a:	90 93 52 21 	sts	0x2152, r25	; 0x802152 <sensor_delay+0x1>
    3a9e:	a0 93 53 21 	sts	0x2153, r26	; 0x802153 <sensor_delay+0x2>
    3aa2:	b0 93 54 21 	sts	0x2154, r27	; 0x802154 <sensor_delay+0x3>
			portEXIT_CRITICAL ();
    3aa6:	0f 90       	pop	r0
    3aa8:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    3aaa:	0f b6       	in	r0, 0x3f	; 63
    3aac:	f8 94       	cli
    3aae:	0f 92       	push	r0
			the_data = new_data;
    3ab0:	88 e0       	ldi	r24, 0x08	; 8
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	a0 e0       	ldi	r26, 0x00	; 0
    3ab6:	b0 e0       	ldi	r27, 0x00	; 0
    3ab8:	80 93 4d 21 	sts	0x214D, r24	; 0x80214d <microstep_scaler>
    3abc:	90 93 4e 21 	sts	0x214E, r25	; 0x80214e <microstep_scaler+0x1>
    3ac0:	a0 93 4f 21 	sts	0x214F, r26	; 0x80214f <microstep_scaler+0x2>
    3ac4:	b0 93 50 21 	sts	0x2150, r27	; 0x802150 <microstep_scaler+0x3>
			portEXIT_CRITICAL ();
    3ac8:	0f 90       	pop	r0
    3aca:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    3acc:	0f b6       	in	r0, 0x3f	; 63
    3ace:	f8 94       	cli
    3ad0:	0f 92       	push	r0
			the_data = new_data;
    3ad2:	88 ee       	ldi	r24, 0xE8	; 232
    3ad4:	93 e0       	ldi	r25, 0x03	; 3
    3ad6:	a0 e0       	ldi	r26, 0x00	; 0
    3ad8:	b0 e0       	ldi	r27, 0x00	; 0
    3ada:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <sensor_sample_number>
    3ade:	90 93 57 21 	sts	0x2157, r25	; 0x802157 <sensor_sample_number+0x1>
    3ae2:	a0 93 58 21 	sts	0x2158, r26	; 0x802158 <sensor_sample_number+0x2>
    3ae6:	b0 93 59 21 	sts	0x2159, r27	; 0x802159 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    3aea:	0f 90       	pop	r0
    3aec:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    3aee:	0f b6       	in	r0, 0x3f	; 63
    3af0:	f8 94       	cli
    3af2:	0f 92       	push	r0
			the_data = new_data;
    3af4:	82 e3       	ldi	r24, 0x32	; 50
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	a0 e0       	ldi	r26, 0x00	; 0
    3afa:	b0 e0       	ldi	r27, 0x00	; 0
    3afc:	80 93 27 21 	sts	0x2127, r24	; 0x802127 <ramp_run_span>
    3b00:	90 93 28 21 	sts	0x2128, r25	; 0x802128 <ramp_run_span+0x1>
    3b04:	a0 93 29 21 	sts	0x2129, r26	; 0x802129 <ramp_run_span+0x2>
    3b08:	b0 93 2a 21 	sts	0x212A, r27	; 0x80212a <ramp_run_span+0x3>
			portEXIT_CRITICAL ();
    3b0c:	0f 90       	pop	r0
    3b0e:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	f8 94       	cli
    3b14:	0f 92       	push	r0
			the_data = new_data;
    3b16:	8c e4       	ldi	r24, 0x4C	; 76
    3b18:	9d e1       	ldi	r25, 0x1D	; 29
    3b1a:	a0 e0       	ldi	r26, 0x00	; 0
    3b1c:	b0 e0       	ldi	r27, 0x00	; 0
    3b1e:	80 93 21 21 	sts	0x2121, r24	; 0x802121 <gen_max_v>
    3b22:	90 93 22 21 	sts	0x2122, r25	; 0x802122 <gen_max_v+0x1>
    3b26:	a0 93 23 21 	sts	0x2123, r26	; 0x802123 <gen_max_v+0x2>
    3b2a:	b0 93 24 21 	sts	0x2124, r27	; 0x802124 <gen_max_v+0x3>
			portEXIT_CRITICAL ();
    3b2e:	0f 90       	pop	r0
    3b30:	0f be       	out	0x3f, r0	; 63
  //therm8 = new MAX31855(spi, &PORTD, PIN0_bm);
  //therm9 = new MAX31855(spi, &PORTD, PIN1_bm);
  //therm10 = new MAX31855(spi, &PORTD, PIN2_bm);
  //therm11 = new MAX31855(spi, &PORTC, PIN4_bm);
  //therm12 = new MAX31855(spi, &PORTC, PIN5_bm);
  adc = new ADC(&ADCB, &(ADCB.CH0));
    3b32:	8a e0       	ldi	r24, 0x0A	; 10
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <_Znwj>
    3b3a:	3c 01       	movw	r6, r24
    3b3c:	40 e6       	ldi	r20, 0x60	; 96
    3b3e:	52 e0       	ldi	r21, 0x02	; 2
    3b40:	60 e4       	ldi	r22, 0x40	; 64
    3b42:	72 e0       	ldi	r23, 0x02	; 2
    3b44:	0e 94 12 0a 	call	0x1424	; 0x1424 <_ZN3ADCC1EP10ADC_structP13ADC_CH_struct>
    3b48:	60 92 1f 21 	sts	0x211F, r6	; 0x80211f <adc>
    3b4c:	70 92 20 21 	sts	0x2120, r7	; 0x802120 <adc+0x1>
  sbg01 = new SBG01(adc, 6.28930818);
    3b50:	8a e1       	ldi	r24, 0x1A	; 26
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <_Znwj>
    3b58:	3c 01       	movw	r6, r24
    3b5a:	60 91 1f 21 	lds	r22, 0x211F	; 0x80211f <adc>
    3b5e:	70 91 20 21 	lds	r23, 0x2120	; 0x802120 <adc+0x1>
    3b62:	23 e0       	ldi	r18, 0x03	; 3
    3b64:	32 e4       	ldi	r19, 0x42	; 66
    3b66:	49 ec       	ldi	r20, 0xC9	; 201
    3b68:	50 e4       	ldi	r21, 0x40	; 64
    3b6a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_ZN5SBG01C1EP3ADCf>
    3b6e:	60 92 1d 21 	sts	0x211D, r6	; 0x80211d <sbg01>
    3b72:	70 92 1e 21 	sts	0x211E, r7	; 0x80211e <sbg01+0x1>
  // timer_D0_pin3 = new InterruptTimer (&PORTD, &TCD0, PIN3_bm, TC_CCDINTLVL_HI_gc);
  // timer_C0_pin0 = new InterruptTimer (&PORTC, &TCC0, PIN0_bm, TC_CCAINTLVL_HI_gc);
  // md_x = new DM542T ( &PORTA, PIN2_bm, PIN3_bm, 8, &PORTD, &TCD1, PIN4_bm, TC_CCAINTLVL_HI_gc );
  // md_y = new DM542T ( &PORTA, PIN4_bm, PIN5_bm, 8, &PORTD, &TCD0, PIN3_bm, TC_CCDINTLVL_HI_gc );
  // md_z = new DM542T ( &PORTA, PIN6_bm, PIN7_bm, 8, &PORTC, &TCC0, PIN0_bm, TC_CCAINTLVL_HI_gc );
  lim_x1 = new DeviceDriver::LimitSwitch ( &PORTA, PIN0_bm, 0, 0, EVSYS_CHMUX_PORTA_PIN0_gc);
    3b76:	88 e0       	ldi	r24, 0x08	; 8
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <_Znwj>
    3b7e:	3c 01       	movw	r6, r24
    3b80:	0f 2e       	mov	r0, r31
    3b82:	f0 e5       	ldi	r31, 0x50	; 80
    3b84:	ef 2e       	mov	r14, r31
    3b86:	f0 2d       	mov	r31, r0
    3b88:	00 e0       	ldi	r16, 0x00	; 0
    3b8a:	20 e0       	ldi	r18, 0x00	; 0
    3b8c:	41 e0       	ldi	r20, 0x01	; 1
    3b8e:	60 e0       	ldi	r22, 0x00	; 0
    3b90:	76 e0       	ldi	r23, 0x06	; 6
    3b92:	0e 94 cb 08 	call	0x1196	; 0x1196 <_ZN12DeviceDriver11LimitSwitchC1EP11PORT_structhhhh>
    3b96:	60 92 1b 21 	sts	0x211B, r6	; 0x80211b <lim_x1>
    3b9a:	70 92 1c 21 	sts	0x211C, r7	; 0x80211c <lim_x1+0x1>
  lim_x2 = new DeviceDriver::LimitSwitch ( &PORTA, PIN1_bm, 0, 1, EVSYS_CHMUX_PORTA_PIN1_gc);
    3b9e:	88 e0       	ldi	r24, 0x08	; 8
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <_Znwj>
    3ba6:	3c 01       	movw	r6, r24
    3ba8:	0f 2e       	mov	r0, r31
    3baa:	f1 e5       	ldi	r31, 0x51	; 81
    3bac:	ef 2e       	mov	r14, r31
    3bae:	f0 2d       	mov	r31, r0
    3bb0:	01 e0       	ldi	r16, 0x01	; 1
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	42 e0       	ldi	r20, 0x02	; 2
    3bb6:	60 e0       	ldi	r22, 0x00	; 0
    3bb8:	76 e0       	ldi	r23, 0x06	; 6
    3bba:	0e 94 cb 08 	call	0x1196	; 0x1196 <_ZN12DeviceDriver11LimitSwitchC1EP11PORT_structhhhh>
    3bbe:	60 92 19 21 	sts	0x2119, r6	; 0x802119 <lim_x2>
    3bc2:	70 92 1a 21 	sts	0x211A, r7	; 0x80211a <lim_x2+0x1>
  lim_y1 = new DeviceDriver::LimitSwitch ( &PORTE, PIN5_bm, 0, 0, EVSYS_CHMUX_PORTE_PIN5_gc);
    3bc6:	88 e0       	ldi	r24, 0x08	; 8
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <_Znwj>
    3bce:	3c 01       	movw	r6, r24
    3bd0:	0f 2e       	mov	r0, r31
    3bd2:	f5 e7       	ldi	r31, 0x75	; 117
    3bd4:	ef 2e       	mov	r14, r31
    3bd6:	f0 2d       	mov	r31, r0
    3bd8:	00 e0       	ldi	r16, 0x00	; 0
    3bda:	20 e0       	ldi	r18, 0x00	; 0
    3bdc:	40 e2       	ldi	r20, 0x20	; 32
    3bde:	60 e8       	ldi	r22, 0x80	; 128
    3be0:	76 e0       	ldi	r23, 0x06	; 6
    3be2:	0e 94 cb 08 	call	0x1196	; 0x1196 <_ZN12DeviceDriver11LimitSwitchC1EP11PORT_structhhhh>
    3be6:	60 92 17 21 	sts	0x2117, r6	; 0x802117 <lim_y1>
    3bea:	70 92 18 21 	sts	0x2118, r7	; 0x802118 <lim_y1+0x1>
  lim_y2 = new DeviceDriver::LimitSwitch ( &PORTE, PIN4_bm, 0, 1, EVSYS_CHMUX_PORTE_PIN4_gc);
    3bee:	88 e0       	ldi	r24, 0x08	; 8
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <_Znwj>
    3bf6:	3c 01       	movw	r6, r24
    3bf8:	0f 2e       	mov	r0, r31
    3bfa:	f4 e7       	ldi	r31, 0x74	; 116
    3bfc:	ef 2e       	mov	r14, r31
    3bfe:	f0 2d       	mov	r31, r0
    3c00:	01 e0       	ldi	r16, 0x01	; 1
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	40 e1       	ldi	r20, 0x10	; 16
    3c06:	60 e8       	ldi	r22, 0x80	; 128
    3c08:	76 e0       	ldi	r23, 0x06	; 6
    3c0a:	0e 94 cb 08 	call	0x1196	; 0x1196 <_ZN12DeviceDriver11LimitSwitchC1EP11PORT_structhhhh>
    3c0e:	60 92 15 21 	sts	0x2115, r6	; 0x802115 <lim_y2>
    3c12:	70 92 16 21 	sts	0x2116, r7	; 0x802116 <lim_y2+0x1>
  lim_z1 = new DeviceDriver::LimitSwitch ( &PORTF, PIN1_bm, 0, 0, EVSYS_CHMUX_PORTF_PIN1_gc);
    3c16:	88 e0       	ldi	r24, 0x08	; 8
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <_Znwj>
    3c1e:	3c 01       	movw	r6, r24
    3c20:	0f 2e       	mov	r0, r31
    3c22:	f9 e7       	ldi	r31, 0x79	; 121
    3c24:	ef 2e       	mov	r14, r31
    3c26:	f0 2d       	mov	r31, r0
    3c28:	00 e0       	ldi	r16, 0x00	; 0
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	42 e0       	ldi	r20, 0x02	; 2
    3c2e:	60 ea       	ldi	r22, 0xA0	; 160
    3c30:	76 e0       	ldi	r23, 0x06	; 6
    3c32:	0e 94 cb 08 	call	0x1196	; 0x1196 <_ZN12DeviceDriver11LimitSwitchC1EP11PORT_structhhhh>
    3c36:	60 92 13 21 	sts	0x2113, r6	; 0x802113 <lim_z1>
    3c3a:	70 92 14 21 	sts	0x2114, r7	; 0x802114 <lim_z1+0x1>
  lim_z2 = new DeviceDriver::LimitSwitch ( &PORTF, PIN2_bm, 0, 1, EVSYS_CHMUX_PORTF_PIN2_gc);
    3c3e:	88 e0       	ldi	r24, 0x08	; 8
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <_Znwj>
    3c46:	3c 01       	movw	r6, r24
    3c48:	0f 2e       	mov	r0, r31
    3c4a:	fa e7       	ldi	r31, 0x7A	; 122
    3c4c:	ef 2e       	mov	r14, r31
    3c4e:	f0 2d       	mov	r31, r0
    3c50:	01 e0       	ldi	r16, 0x01	; 1
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	44 e0       	ldi	r20, 0x04	; 4
    3c56:	60 ea       	ldi	r22, 0xA0	; 160
    3c58:	76 e0       	ldi	r23, 0x06	; 6
    3c5a:	0e 94 cb 08 	call	0x1196	; 0x1196 <_ZN12DeviceDriver11LimitSwitchC1EP11PORT_structhhhh>
    3c5e:	60 92 11 21 	sts	0x2111, r6	; 0x802111 <lim_z2>
    3c62:	70 92 12 21 	sts	0x2112, r7	; 0x802112 <lim_z2+0x1>
  
  
  // The user interface is at low priority; it could have been run in the idle task
  // but it is desired to exercise the RTOS more thoroughly in this test program
  new task_user ( "UserInt", task_priority (0), 128, &ser_dev ) ;
    3c66:	83 e2       	ldi	r24, 0x23	; 35
    3c68:	91 e0       	ldi	r25, 0x01	; 1
    3c6a:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <_Znwj>
    3c6e:	8e 01       	movw	r16, r28
    3c70:	0f 5f       	subi	r16, 0xFF	; 255
    3c72:	1f 4f       	sbci	r17, 0xFF	; 255
    3c74:	20 e8       	ldi	r18, 0x80	; 128
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	40 e0       	ldi	r20, 0x00	; 0
    3c7a:	6e e4       	ldi	r22, 0x4E	; 78
    3c7c:	70 e2       	ldi	r23, 0x20	; 32
    3c7e:	0e 94 28 15 	call	0x2a50	; 0x2a50 <_ZN9task_userC1EPKchjP8emstream>
  
  new task_md ( "MDX", task_priority(8), 128, &ser_dev, 
    &PORTA, PIN2_bm, PIN3_bm, 8, &PORTD, &TCD1, PIN4_bm, TC_CCAINTLVL_HI_gc,
    &xlocations, &x_max_velocity, &xmotor_on, &xmotor_complete,
    lim_x1, lim_x2 ) ;
    3c82:	85 ed       	ldi	r24, 0xD5	; 213
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <_Znwj>
    3c8a:	20 91 1a 21 	lds	r18, 0x211A	; 0x80211a <lim_x2+0x1>
    3c8e:	2f 93       	push	r18
    3c90:	20 91 19 21 	lds	r18, 0x2119	; 0x802119 <lim_x2>
    3c94:	2f 93       	push	r18
    3c96:	20 91 1c 21 	lds	r18, 0x211C	; 0x80211c <lim_x1+0x1>
    3c9a:	2f 93       	push	r18
    3c9c:	20 91 1b 21 	lds	r18, 0x211B	; 0x80211b <lim_x1>
    3ca0:	2f 93       	push	r18
    3ca2:	22 e6       	ldi	r18, 0x62	; 98
    3ca4:	31 e2       	ldi	r19, 0x21	; 33
    3ca6:	3f 93       	push	r19
    3ca8:	2f 93       	push	r18
    3caa:	28 ed       	ldi	r18, 0xD8	; 216
    3cac:	30 e2       	ldi	r19, 0x20	; 32
    3cae:	3f 93       	push	r19
    3cb0:	2f 93       	push	r18
    3cb2:	2f e3       	ldi	r18, 0x3F	; 63
    3cb4:	31 e2       	ldi	r19, 0x21	; 33
    3cb6:	3f 93       	push	r19
    3cb8:	2f 93       	push	r18
    3cba:	21 ef       	ldi	r18, 0xF1	; 241
    3cbc:	30 e2       	ldi	r19, 0x20	; 32
    3cbe:	3f 93       	push	r19
    3cc0:	2f 93       	push	r18
    3cc2:	0f 2e       	mov	r0, r31
    3cc4:	f3 e0       	ldi	r31, 0x03	; 3
    3cc6:	6f 2e       	mov	r6, r31
    3cc8:	f0 2d       	mov	r31, r0
    3cca:	6f 92       	push	r6
    3ccc:	20 e1       	ldi	r18, 0x10	; 16
    3cce:	2f 93       	push	r18
    3cd0:	0f 2e       	mov	r0, r31
    3cd2:	f9 e0       	ldi	r31, 0x09	; 9
    3cd4:	4f 2e       	mov	r4, r31
    3cd6:	f0 2d       	mov	r31, r0
    3cd8:	4f 92       	push	r4
    3cda:	68 94       	set
    3cdc:	bb 24       	eor	r11, r11
    3cde:	b6 f8       	bld	r11, 6
    3ce0:	bf 92       	push	r11
    3ce2:	0f 2e       	mov	r0, r31
    3ce4:	f6 e0       	ldi	r31, 0x06	; 6
    3ce6:	df 2e       	mov	r13, r31
    3ce8:	f0 2d       	mov	r31, r0
    3cea:	df 92       	push	r13
    3cec:	0f 2e       	mov	r0, r31
    3cee:	f0 e6       	ldi	r31, 0x60	; 96
    3cf0:	5f 2e       	mov	r5, r31
    3cf2:	f0 2d       	mov	r31, r0
    3cf4:	5f 92       	push	r5
    3cf6:	68 94       	set
    3cf8:	88 24       	eor	r8, r8
    3cfa:	83 f8       	bld	r8, 3
    3cfc:	91 2c       	mov	r9, r1
    3cfe:	68 94       	set
    3d00:	aa 24       	eor	r10, r10
    3d02:	a3 f8       	bld	r10, 3
    3d04:	68 94       	set
    3d06:	cc 24       	eor	r12, r12
    3d08:	c2 f8       	bld	r12, 2
    3d0a:	0f 2e       	mov	r0, r31
    3d0c:	e1 2c       	mov	r14, r1
    3d0e:	f6 e0       	ldi	r31, 0x06	; 6
    3d10:	ff 2e       	mov	r15, r31
    3d12:	f0 2d       	mov	r31, r0
    3d14:	20 e8       	ldi	r18, 0x80	; 128
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	44 e0       	ldi	r20, 0x04	; 4
    3d1a:	66 e5       	ldi	r22, 0x56	; 86
    3d1c:	70 e2       	ldi	r23, 0x20	; 32
    3d1e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <_ZN7task_mdC1EPKchjP8emstreamP11PORT_structhhjS5_P10TC1_structhhP9frt_queueImESA_P11shared_dataIhEPSB_IbEPN12DeviceDriver11LimitSwitchESI_>
  
  new task_md ("MDY", task_priority(8), 128, &ser_dev, 
    &PORTA, PIN4_bm, PIN5_bm, 8, &PORTD, &TCD0, PIN3_bm, TC_CCDINTLVL_HI_gc, &ylocations,
    &y_max_velocity, &ymotor_on, &ymotor_complete, 
    lim_y1, lim_y2 );
    3d22:	85 ed       	ldi	r24, 0xD5	; 213
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <_Znwj>
    3d2a:	20 91 16 21 	lds	r18, 0x2116	; 0x802116 <lim_y2+0x1>
    3d2e:	2f 93       	push	r18
    3d30:	20 91 15 21 	lds	r18, 0x2115	; 0x802115 <lim_y2>
    3d34:	2f 93       	push	r18
    3d36:	20 91 18 21 	lds	r18, 0x2118	; 0x802118 <lim_y1+0x1>
    3d3a:	2f 93       	push	r18
    3d3c:	20 91 17 21 	lds	r18, 0x2117	; 0x802117 <lim_y1>
    3d40:	2f 93       	push	r18
    3d42:	21 e6       	ldi	r18, 0x61	; 97
    3d44:	31 e2       	ldi	r19, 0x21	; 33
    3d46:	3f 93       	push	r19
    3d48:	2f 93       	push	r18
    3d4a:	27 ed       	ldi	r18, 0xD7	; 215
    3d4c:	30 e2       	ldi	r19, 0x20	; 32
    3d4e:	3f 93       	push	r19
    3d50:	2f 93       	push	r18
    3d52:	25 e3       	ldi	r18, 0x35	; 53
    3d54:	31 e2       	ldi	r19, 0x21	; 33
    3d56:	3f 93       	push	r19
    3d58:	2f 93       	push	r18
    3d5a:	27 ee       	ldi	r18, 0xE7	; 231
    3d5c:	30 e2       	ldi	r19, 0x20	; 32
    3d5e:	3f 93       	push	r19
    3d60:	2f 93       	push	r18
    3d62:	20 ec       	ldi	r18, 0xC0	; 192
    3d64:	2f 93       	push	r18
    3d66:	68 94       	set
    3d68:	77 24       	eor	r7, r7
    3d6a:	73 f8       	bld	r7, 3
    3d6c:	7f 92       	push	r7
    3d6e:	4f 92       	push	r4
    3d70:	1f 92       	push	r1
    3d72:	df 92       	push	r13
    3d74:	5f 92       	push	r5
    3d76:	68 94       	set
    3d78:	aa 24       	eor	r10, r10
    3d7a:	a5 f8       	bld	r10, 5
    3d7c:	68 94       	set
    3d7e:	cc 24       	eor	r12, r12
    3d80:	c4 f8       	bld	r12, 4
    3d82:	20 e8       	ldi	r18, 0x80	; 128
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	44 e0       	ldi	r20, 0x04	; 4
    3d88:	6a e5       	ldi	r22, 0x5A	; 90
    3d8a:	70 e2       	ldi	r23, 0x20	; 32
    3d8c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_ZN7task_mdC1EPKchjP8emstreamP11PORT_structhhjS5_P10TC0_structhhP9frt_queueImESA_P11shared_dataIhEPSB_IbEPN12DeviceDriver11LimitSwitchESI_>
  
  new task_md ("MDZ", task_priority(8), 128, &ser_dev, 
    &PORTA, PIN6_bm, PIN7_bm, 8, &PORTC, &TCC0, PIN0_bm, TC_CCAINTLVL_HI_gc, &zlocations,
    &z_max_velocity, &zmotor_on, &zmotor_complete, 
    lim_z1, lim_z2 );
    3d90:	cd bf       	out	0x3d, r28	; 61
    3d92:	de bf       	out	0x3e, r29	; 62
    3d94:	85 ed       	ldi	r24, 0xD5	; 213
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <_Znwj>
    3d9c:	20 91 12 21 	lds	r18, 0x2112	; 0x802112 <lim_z2+0x1>
    3da0:	2f 93       	push	r18
    3da2:	20 91 11 21 	lds	r18, 0x2111	; 0x802111 <lim_z2>
    3da6:	2f 93       	push	r18
    3da8:	20 91 14 21 	lds	r18, 0x2114	; 0x802114 <lim_z1+0x1>
    3dac:	2f 93       	push	r18
    3dae:	20 91 13 21 	lds	r18, 0x2113	; 0x802113 <lim_z1>
    3db2:	2f 93       	push	r18
    3db4:	20 e6       	ldi	r18, 0x60	; 96
    3db6:	31 e2       	ldi	r19, 0x21	; 33
    3db8:	3f 93       	push	r19
    3dba:	2f 93       	push	r18
    3dbc:	26 ed       	ldi	r18, 0xD6	; 214
    3dbe:	30 e2       	ldi	r19, 0x20	; 32
    3dc0:	3f 93       	push	r19
    3dc2:	2f 93       	push	r18
    3dc4:	2b e2       	ldi	r18, 0x2B	; 43
    3dc6:	31 e2       	ldi	r19, 0x21	; 33
    3dc8:	3f 93       	push	r19
    3dca:	2f 93       	push	r18
    3dcc:	2d ed       	ldi	r18, 0xDD	; 221
    3dce:	30 e2       	ldi	r19, 0x20	; 32
    3dd0:	3f 93       	push	r19
    3dd2:	2f 93       	push	r18
    3dd4:	6f 92       	push	r6
    3dd6:	21 e0       	ldi	r18, 0x01	; 1
    3dd8:	2f 93       	push	r18
    3dda:	7f 92       	push	r7
    3ddc:	1f 92       	push	r1
    3dde:	df 92       	push	r13
    3de0:	bf 92       	push	r11
    3de2:	68 94       	set
    3de4:	aa 24       	eor	r10, r10
    3de6:	a7 f8       	bld	r10, 7
    3de8:	68 94       	set
    3dea:	cc 24       	eor	r12, r12
    3dec:	c6 f8       	bld	r12, 6
    3dee:	20 e8       	ldi	r18, 0x80	; 128
    3df0:	30 e0       	ldi	r19, 0x00	; 0
    3df2:	44 e0       	ldi	r20, 0x04	; 4
    3df4:	6e e5       	ldi	r22, 0x5E	; 94
    3df6:	70 e2       	ldi	r23, 0x20	; 32
    3df8:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_ZN7task_mdC1EPKchjP8emstreamP11PORT_structhhjS5_P10TC0_structhhP9frt_queueImESA_P11shared_dataIhEPSB_IbEPN12DeviceDriver11LimitSwitchESI_>
  
  new task_sensor ("Gardon_Gauge", task_priority(9), 4500, &ser_dev, sbg01);
    3dfc:	83 e2       	ldi	r24, 0x23	; 35
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <_Znwj>
    3e04:	e0 90 1d 21 	lds	r14, 0x211D	; 0x80211d <sbg01>
    3e08:	f0 90 1e 21 	lds	r15, 0x211E	; 0x80211e <sbg01+0x1>
    3e0c:	24 e9       	ldi	r18, 0x94	; 148
    3e0e:	31 e1       	ldi	r19, 0x11	; 17
    3e10:	44 e0       	ldi	r20, 0x04	; 4
    3e12:	62 e6       	ldi	r22, 0x62	; 98
    3e14:	70 e2       	ldi	r23, 0x20	; 32
    3e16:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <_ZN11task_sensorC1EPKchjP8emstreamP5SBG01>
  //new task_thermocouple ("Therm9", task_priority(6), 128, &ser_dev, therm9);
  //
  //new task_thermocouple ("Therm10", task_priority(6), 128, &ser_dev, therm10);
  
  // Enable high level interrupts and global interrupts
  PMIC_CTRL = (1 << PMIC_HILVLEN_bp | 1 << PMIC_MEDLVLEN_bp | 1 << PMIC_LOLVLEN_bp);
    3e1a:	87 e0       	ldi	r24, 0x07	; 7
    3e1c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
  sei();
    3e20:	78 94       	sei

    //initialization_complete.put(false);
  
  // Here's where the RTOS scheduler is started up. It should never exit as long as
  // power is on and the microcontroller isn't rebooted
  vTaskStartScheduler ();
    3e22:	0e 94 20 29 	call	0x5240	; 0x5240 <vTaskStartScheduler>
}
    3e26:	cd bf       	out	0x3d, r28	; 61
    3e28:	de bf       	out	0x3e, r29	; 62
    3e2a:	80 e0       	ldi	r24, 0x00	; 0
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	6d 96       	adiw	r28, 0x1d	; 29
    3e30:	cd bf       	out	0x3d, r28	; 61
    3e32:	de bf       	out	0x3e, r29	; 62
    3e34:	df 91       	pop	r29
    3e36:	cf 91       	pop	r28
    3e38:	1f 91       	pop	r17
    3e3a:	0f 91       	pop	r16
    3e3c:	ff 90       	pop	r15
    3e3e:	ef 90       	pop	r14
    3e40:	df 90       	pop	r13
    3e42:	cf 90       	pop	r12
    3e44:	bf 90       	pop	r11
    3e46:	af 90       	pop	r10
    3e48:	9f 90       	pop	r9
    3e4a:	8f 90       	pop	r8
    3e4c:	7f 90       	pop	r7
    3e4e:	6f 90       	pop	r6
    3e50:	5f 90       	pop	r5
    3e52:	4f 90       	pop	r4
    3e54:	08 95       	ret

00003e56 <__vector_66>:

ISR(PORTA_INT0_vect)
{
    3e56:	1f 92       	push	r1
    3e58:	0f 92       	push	r0
    3e5a:	0f b6       	in	r0, 0x3f	; 63
    3e5c:	0f 92       	push	r0
    3e5e:	11 24       	eor	r1, r1
    3e60:	0b b6       	in	r0, 0x3b	; 59
    3e62:	0f 92       	push	r0
    3e64:	2f 93       	push	r18
    3e66:	3f 93       	push	r19
    3e68:	4f 93       	push	r20
    3e6a:	5f 93       	push	r21
    3e6c:	6f 93       	push	r22
    3e6e:	7f 93       	push	r23
    3e70:	8f 93       	push	r24
    3e72:	9f 93       	push	r25
    3e74:	af 93       	push	r26
    3e76:	bf 93       	push	r27
    3e78:	ef 93       	push	r30
    3e7a:	ff 93       	push	r31
  // md_x->min_bound_interrupt_handler();
  if (coordinate_mode.ISR_get() && md_x->get_direction() == 1)
    3e7c:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    3e80:	88 23       	and	r24, r24
    3e82:	51 f0       	breq	.+20     	; 0x3e98 <__vector_66+0x42>
    3e84:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <md_x>
    3e88:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <md_x+0x1>
    3e8c:	0e 94 af 08 	call	0x115e	; 0x115e <_ZN6DM542T13get_directionEv>
    3e90:	81 30       	cpi	r24, 0x01	; 1
    3e92:	11 f4       	brne	.+4      	; 0x3e98 <__vector_66+0x42>
		*  default case on most small microcontrollers. 
		*  @param new_data The data which is to be written into the shared data item
		*/
		void ISR_put (data_type new_data)
		{
			the_data = new_data;
    3e94:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <reset>
  {
    reset.ISR_put(true);
  }
}
    3e98:	ff 91       	pop	r31
    3e9a:	ef 91       	pop	r30
    3e9c:	bf 91       	pop	r27
    3e9e:	af 91       	pop	r26
    3ea0:	9f 91       	pop	r25
    3ea2:	8f 91       	pop	r24
    3ea4:	7f 91       	pop	r23
    3ea6:	6f 91       	pop	r22
    3ea8:	5f 91       	pop	r21
    3eaa:	4f 91       	pop	r20
    3eac:	3f 91       	pop	r19
    3eae:	2f 91       	pop	r18
    3eb0:	0f 90       	pop	r0
    3eb2:	0b be       	out	0x3b, r0	; 59
    3eb4:	0f 90       	pop	r0
    3eb6:	0f be       	out	0x3f, r0	; 63
    3eb8:	0f 90       	pop	r0
    3eba:	1f 90       	pop	r1
    3ebc:	18 95       	reti

00003ebe <__vector_67>:

ISR(PORTA_INT1_vect)
{
    3ebe:	1f 92       	push	r1
    3ec0:	0f 92       	push	r0
    3ec2:	0f b6       	in	r0, 0x3f	; 63
    3ec4:	0f 92       	push	r0
    3ec6:	11 24       	eor	r1, r1
    3ec8:	0b b6       	in	r0, 0x3b	; 59
    3eca:	0f 92       	push	r0
    3ecc:	2f 93       	push	r18
    3ece:	3f 93       	push	r19
    3ed0:	4f 93       	push	r20
    3ed2:	5f 93       	push	r21
    3ed4:	6f 93       	push	r22
    3ed6:	7f 93       	push	r23
    3ed8:	8f 93       	push	r24
    3eda:	9f 93       	push	r25
    3edc:	af 93       	push	r26
    3ede:	bf 93       	push	r27
    3ee0:	ef 93       	push	r30
    3ee2:	ff 93       	push	r31
  // md_x->max_bound_interrupt_handler();
  if (coordinate_mode.ISR_get() && md_x->get_direction() == 0)
    3ee4:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    3ee8:	88 23       	and	r24, r24
    3eea:	59 f0       	breq	.+22     	; 0x3f02 <__vector_67+0x44>
    3eec:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <md_x>
    3ef0:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <md_x+0x1>
    3ef4:	0e 94 af 08 	call	0x115e	; 0x115e <_ZN6DM542T13get_directionEv>
    3ef8:	81 11       	cpse	r24, r1
    3efa:	03 c0       	rjmp	.+6      	; 0x3f02 <__vector_67+0x44>
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <reset>
  {
    reset.ISR_put(true);
  }
}
    3f02:	ff 91       	pop	r31
    3f04:	ef 91       	pop	r30
    3f06:	bf 91       	pop	r27
    3f08:	af 91       	pop	r26
    3f0a:	9f 91       	pop	r25
    3f0c:	8f 91       	pop	r24
    3f0e:	7f 91       	pop	r23
    3f10:	6f 91       	pop	r22
    3f12:	5f 91       	pop	r21
    3f14:	4f 91       	pop	r20
    3f16:	3f 91       	pop	r19
    3f18:	2f 91       	pop	r18
    3f1a:	0f 90       	pop	r0
    3f1c:	0b be       	out	0x3b, r0	; 59
    3f1e:	0f 90       	pop	r0
    3f20:	0f be       	out	0x3f, r0	; 63
    3f22:	0f 90       	pop	r0
    3f24:	1f 90       	pop	r1
    3f26:	18 95       	reti

00003f28 <__vector_43>:

ISR(PORTE_INT0_vect)
{
    3f28:	1f 92       	push	r1
    3f2a:	0f 92       	push	r0
    3f2c:	0f b6       	in	r0, 0x3f	; 63
    3f2e:	0f 92       	push	r0
    3f30:	11 24       	eor	r1, r1
    3f32:	0b b6       	in	r0, 0x3b	; 59
    3f34:	0f 92       	push	r0
    3f36:	2f 93       	push	r18
    3f38:	3f 93       	push	r19
    3f3a:	4f 93       	push	r20
    3f3c:	5f 93       	push	r21
    3f3e:	6f 93       	push	r22
    3f40:	7f 93       	push	r23
    3f42:	8f 93       	push	r24
    3f44:	9f 93       	push	r25
    3f46:	af 93       	push	r26
    3f48:	bf 93       	push	r27
    3f4a:	ef 93       	push	r30
    3f4c:	ff 93       	push	r31
  // md_y->min_bound_interrupt_handler();
  if (coordinate_mode.ISR_get() && md_y->get_direction() == 1)
    3f4e:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    3f52:	88 23       	and	r24, r24
    3f54:	51 f0       	breq	.+20     	; 0x3f6a <__vector_43+0x42>
    3f56:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <md_y>
    3f5a:	90 91 0e 21 	lds	r25, 0x210E	; 0x80210e <md_y+0x1>
    3f5e:	0e 94 af 08 	call	0x115e	; 0x115e <_ZN6DM542T13get_directionEv>
    3f62:	81 30       	cpi	r24, 0x01	; 1
    3f64:	11 f4       	brne	.+4      	; 0x3f6a <__vector_43+0x42>
    3f66:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <reset>
  {
    reset.ISR_put(true);
  }
}
    3f6a:	ff 91       	pop	r31
    3f6c:	ef 91       	pop	r30
    3f6e:	bf 91       	pop	r27
    3f70:	af 91       	pop	r26
    3f72:	9f 91       	pop	r25
    3f74:	8f 91       	pop	r24
    3f76:	7f 91       	pop	r23
    3f78:	6f 91       	pop	r22
    3f7a:	5f 91       	pop	r21
    3f7c:	4f 91       	pop	r20
    3f7e:	3f 91       	pop	r19
    3f80:	2f 91       	pop	r18
    3f82:	0f 90       	pop	r0
    3f84:	0b be       	out	0x3b, r0	; 59
    3f86:	0f 90       	pop	r0
    3f88:	0f be       	out	0x3f, r0	; 63
    3f8a:	0f 90       	pop	r0
    3f8c:	1f 90       	pop	r1
    3f8e:	18 95       	reti

00003f90 <__vector_44>:

ISR(PORTE_INT1_vect)
{
    3f90:	1f 92       	push	r1
    3f92:	0f 92       	push	r0
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	0f 92       	push	r0
    3f98:	11 24       	eor	r1, r1
    3f9a:	0b b6       	in	r0, 0x3b	; 59
    3f9c:	0f 92       	push	r0
    3f9e:	2f 93       	push	r18
    3fa0:	3f 93       	push	r19
    3fa2:	4f 93       	push	r20
    3fa4:	5f 93       	push	r21
    3fa6:	6f 93       	push	r22
    3fa8:	7f 93       	push	r23
    3faa:	8f 93       	push	r24
    3fac:	9f 93       	push	r25
    3fae:	af 93       	push	r26
    3fb0:	bf 93       	push	r27
    3fb2:	ef 93       	push	r30
    3fb4:	ff 93       	push	r31
  // md_y->max_bound_interrupt_handler();
  if (coordinate_mode.ISR_get() && md_y->get_direction() == 0)
    3fb6:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    3fba:	88 23       	and	r24, r24
    3fbc:	59 f0       	breq	.+22     	; 0x3fd4 <__vector_44+0x44>
    3fbe:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <md_y>
    3fc2:	90 91 0e 21 	lds	r25, 0x210E	; 0x80210e <md_y+0x1>
    3fc6:	0e 94 af 08 	call	0x115e	; 0x115e <_ZN6DM542T13get_directionEv>
    3fca:	81 11       	cpse	r24, r1
    3fcc:	03 c0       	rjmp	.+6      	; 0x3fd4 <__vector_44+0x44>
    3fce:	81 e0       	ldi	r24, 0x01	; 1
    3fd0:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <reset>
  {
    reset.ISR_put(true);
  }
}
    3fd4:	ff 91       	pop	r31
    3fd6:	ef 91       	pop	r30
    3fd8:	bf 91       	pop	r27
    3fda:	af 91       	pop	r26
    3fdc:	9f 91       	pop	r25
    3fde:	8f 91       	pop	r24
    3fe0:	7f 91       	pop	r23
    3fe2:	6f 91       	pop	r22
    3fe4:	5f 91       	pop	r21
    3fe6:	4f 91       	pop	r20
    3fe8:	3f 91       	pop	r19
    3fea:	2f 91       	pop	r18
    3fec:	0f 90       	pop	r0
    3fee:	0b be       	out	0x3b, r0	; 59
    3ff0:	0f 90       	pop	r0
    3ff2:	0f be       	out	0x3f, r0	; 63
    3ff4:	0f 90       	pop	r0
    3ff6:	1f 90       	pop	r1
    3ff8:	18 95       	reti

00003ffa <__vector_104>:

ISR(PORTF_INT0_vect)
{
    3ffa:	1f 92       	push	r1
    3ffc:	0f 92       	push	r0
    3ffe:	0f b6       	in	r0, 0x3f	; 63
    4000:	0f 92       	push	r0
    4002:	11 24       	eor	r1, r1
    4004:	0b b6       	in	r0, 0x3b	; 59
    4006:	0f 92       	push	r0
    4008:	2f 93       	push	r18
    400a:	3f 93       	push	r19
    400c:	4f 93       	push	r20
    400e:	5f 93       	push	r21
    4010:	6f 93       	push	r22
    4012:	7f 93       	push	r23
    4014:	8f 93       	push	r24
    4016:	9f 93       	push	r25
    4018:	af 93       	push	r26
    401a:	bf 93       	push	r27
    401c:	ef 93       	push	r30
    401e:	ff 93       	push	r31
  // md_z->min_bound_interrupt_handler();
  if (coordinate_mode.ISR_get() && md_z->get_direction() == 1)
    4020:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    4024:	88 23       	and	r24, r24
    4026:	51 f0       	breq	.+20     	; 0x403c <__vector_104+0x42>
    4028:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <md_z>
    402c:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <md_z+0x1>
    4030:	0e 94 af 08 	call	0x115e	; 0x115e <_ZN6DM542T13get_directionEv>
    4034:	81 30       	cpi	r24, 0x01	; 1
    4036:	11 f4       	brne	.+4      	; 0x403c <__vector_104+0x42>
    4038:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <reset>
  {
    reset.ISR_put(true);
  }
}
    403c:	ff 91       	pop	r31
    403e:	ef 91       	pop	r30
    4040:	bf 91       	pop	r27
    4042:	af 91       	pop	r26
    4044:	9f 91       	pop	r25
    4046:	8f 91       	pop	r24
    4048:	7f 91       	pop	r23
    404a:	6f 91       	pop	r22
    404c:	5f 91       	pop	r21
    404e:	4f 91       	pop	r20
    4050:	3f 91       	pop	r19
    4052:	2f 91       	pop	r18
    4054:	0f 90       	pop	r0
    4056:	0b be       	out	0x3b, r0	; 59
    4058:	0f 90       	pop	r0
    405a:	0f be       	out	0x3f, r0	; 63
    405c:	0f 90       	pop	r0
    405e:	1f 90       	pop	r1
    4060:	18 95       	reti

00004062 <__vector_105>:

ISR(PORTF_INT1_vect)
{
    4062:	1f 92       	push	r1
    4064:	0f 92       	push	r0
    4066:	0f b6       	in	r0, 0x3f	; 63
    4068:	0f 92       	push	r0
    406a:	11 24       	eor	r1, r1
    406c:	0b b6       	in	r0, 0x3b	; 59
    406e:	0f 92       	push	r0
    4070:	2f 93       	push	r18
    4072:	3f 93       	push	r19
    4074:	4f 93       	push	r20
    4076:	5f 93       	push	r21
    4078:	6f 93       	push	r22
    407a:	7f 93       	push	r23
    407c:	8f 93       	push	r24
    407e:	9f 93       	push	r25
    4080:	af 93       	push	r26
    4082:	bf 93       	push	r27
    4084:	ef 93       	push	r30
    4086:	ff 93       	push	r31
  // md_z->max_bound_interrupt_handler();
  if (coordinate_mode.ISR_get() && md_z->get_direction() == 0)
    4088:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    408c:	88 23       	and	r24, r24
    408e:	59 f0       	breq	.+22     	; 0x40a6 <__vector_105+0x44>
    4090:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <md_z>
    4094:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <md_z+0x1>
    4098:	0e 94 af 08 	call	0x115e	; 0x115e <_ZN6DM542T13get_directionEv>
    409c:	81 11       	cpse	r24, r1
    409e:	03 c0       	rjmp	.+6      	; 0x40a6 <__vector_105+0x44>
    40a0:	81 e0       	ldi	r24, 0x01	; 1
    40a2:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <reset>
  {
    reset.ISR_put(true);
  }
}
    40a6:	ff 91       	pop	r31
    40a8:	ef 91       	pop	r30
    40aa:	bf 91       	pop	r27
    40ac:	af 91       	pop	r26
    40ae:	9f 91       	pop	r25
    40b0:	8f 91       	pop	r24
    40b2:	7f 91       	pop	r23
    40b4:	6f 91       	pop	r22
    40b6:	5f 91       	pop	r21
    40b8:	4f 91       	pop	r20
    40ba:	3f 91       	pop	r19
    40bc:	2f 91       	pop	r18
    40be:	0f 90       	pop	r0
    40c0:	0b be       	out	0x3b, r0	; 59
    40c2:	0f 90       	pop	r0
    40c4:	0f be       	out	0x3f, r0	; 63
    40c6:	0f 90       	pop	r0
    40c8:	1f 90       	pop	r1
    40ca:	18 95       	reti

000040cc <__vector_85>:

ISR(TCD1_CCA_vect)
{
    40cc:	1f 92       	push	r1
    40ce:	0f 92       	push	r0
    40d0:	0f b6       	in	r0, 0x3f	; 63
    40d2:	0f 92       	push	r0
    40d4:	11 24       	eor	r1, r1
    40d6:	0b b6       	in	r0, 0x3b	; 59
    40d8:	0f 92       	push	r0
    40da:	2f 93       	push	r18
    40dc:	3f 93       	push	r19
    40de:	4f 93       	push	r20
    40e0:	5f 93       	push	r21
    40e2:	6f 93       	push	r22
    40e4:	7f 93       	push	r23
    40e6:	8f 93       	push	r24
    40e8:	9f 93       	push	r25
    40ea:	af 93       	push	r26
    40ec:	bf 93       	push	r27
    40ee:	ef 93       	push	r30
    40f0:	ff 93       	push	r31
  md_x->set_signal_low();
    40f2:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <md_x>
    40f6:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <md_x+0x1>
    40fa:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN6DM542T14set_signal_lowEv>
}
    40fe:	ff 91       	pop	r31
    4100:	ef 91       	pop	r30
    4102:	bf 91       	pop	r27
    4104:	af 91       	pop	r26
    4106:	9f 91       	pop	r25
    4108:	8f 91       	pop	r24
    410a:	7f 91       	pop	r23
    410c:	6f 91       	pop	r22
    410e:	5f 91       	pop	r21
    4110:	4f 91       	pop	r20
    4112:	3f 91       	pop	r19
    4114:	2f 91       	pop	r18
    4116:	0f 90       	pop	r0
    4118:	0b be       	out	0x3b, r0	; 59
    411a:	0f 90       	pop	r0
    411c:	0f be       	out	0x3f, r0	; 63
    411e:	0f 90       	pop	r0
    4120:	1f 90       	pop	r1
    4122:	18 95       	reti

00004124 <__vector_83>:

ISR(TCD1_OVF_vect)
{
    4124:	1f 92       	push	r1
    4126:	0f 92       	push	r0
    4128:	0f b6       	in	r0, 0x3f	; 63
    412a:	0f 92       	push	r0
    412c:	11 24       	eor	r1, r1
    412e:	0b b6       	in	r0, 0x3b	; 59
    4130:	0f 92       	push	r0
    4132:	2f 93       	push	r18
    4134:	3f 93       	push	r19
    4136:	4f 93       	push	r20
    4138:	5f 93       	push	r21
    413a:	6f 93       	push	r22
    413c:	7f 93       	push	r23
    413e:	8f 93       	push	r24
    4140:	9f 93       	push	r25
    4142:	af 93       	push	r26
    4144:	bf 93       	push	r27
    4146:	ef 93       	push	r30
    4148:	ff 93       	push	r31
  md_x->take_step();
    414a:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <md_x>
    414e:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <md_x+0x1>
    4152:	0e 94 b4 08 	call	0x1168	; 0x1168 <_ZN6DM542T9take_stepEv>
}
    4156:	ff 91       	pop	r31
    4158:	ef 91       	pop	r30
    415a:	bf 91       	pop	r27
    415c:	af 91       	pop	r26
    415e:	9f 91       	pop	r25
    4160:	8f 91       	pop	r24
    4162:	7f 91       	pop	r23
    4164:	6f 91       	pop	r22
    4166:	5f 91       	pop	r21
    4168:	4f 91       	pop	r20
    416a:	3f 91       	pop	r19
    416c:	2f 91       	pop	r18
    416e:	0f 90       	pop	r0
    4170:	0b be       	out	0x3b, r0	; 59
    4172:	0f 90       	pop	r0
    4174:	0f be       	out	0x3f, r0	; 63
    4176:	0f 90       	pop	r0
    4178:	1f 90       	pop	r1
    417a:	18 95       	reti

0000417c <__vector_82>:

ISR(TCD0_CCD_vect)
{
    417c:	1f 92       	push	r1
    417e:	0f 92       	push	r0
    4180:	0f b6       	in	r0, 0x3f	; 63
    4182:	0f 92       	push	r0
    4184:	11 24       	eor	r1, r1
    4186:	0b b6       	in	r0, 0x3b	; 59
    4188:	0f 92       	push	r0
    418a:	2f 93       	push	r18
    418c:	3f 93       	push	r19
    418e:	4f 93       	push	r20
    4190:	5f 93       	push	r21
    4192:	6f 93       	push	r22
    4194:	7f 93       	push	r23
    4196:	8f 93       	push	r24
    4198:	9f 93       	push	r25
    419a:	af 93       	push	r26
    419c:	bf 93       	push	r27
    419e:	ef 93       	push	r30
    41a0:	ff 93       	push	r31
  md_y->set_signal_low();
    41a2:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <md_y>
    41a6:	90 91 0e 21 	lds	r25, 0x210E	; 0x80210e <md_y+0x1>
    41aa:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN6DM542T14set_signal_lowEv>
}
    41ae:	ff 91       	pop	r31
    41b0:	ef 91       	pop	r30
    41b2:	bf 91       	pop	r27
    41b4:	af 91       	pop	r26
    41b6:	9f 91       	pop	r25
    41b8:	8f 91       	pop	r24
    41ba:	7f 91       	pop	r23
    41bc:	6f 91       	pop	r22
    41be:	5f 91       	pop	r21
    41c0:	4f 91       	pop	r20
    41c2:	3f 91       	pop	r19
    41c4:	2f 91       	pop	r18
    41c6:	0f 90       	pop	r0
    41c8:	0b be       	out	0x3b, r0	; 59
    41ca:	0f 90       	pop	r0
    41cc:	0f be       	out	0x3f, r0	; 63
    41ce:	0f 90       	pop	r0
    41d0:	1f 90       	pop	r1
    41d2:	18 95       	reti

000041d4 <__vector_77>:

ISR(TCD0_OVF_vect)
{
    41d4:	1f 92       	push	r1
    41d6:	0f 92       	push	r0
    41d8:	0f b6       	in	r0, 0x3f	; 63
    41da:	0f 92       	push	r0
    41dc:	11 24       	eor	r1, r1
    41de:	0b b6       	in	r0, 0x3b	; 59
    41e0:	0f 92       	push	r0
    41e2:	2f 93       	push	r18
    41e4:	3f 93       	push	r19
    41e6:	4f 93       	push	r20
    41e8:	5f 93       	push	r21
    41ea:	6f 93       	push	r22
    41ec:	7f 93       	push	r23
    41ee:	8f 93       	push	r24
    41f0:	9f 93       	push	r25
    41f2:	af 93       	push	r26
    41f4:	bf 93       	push	r27
    41f6:	ef 93       	push	r30
    41f8:	ff 93       	push	r31
  md_y->take_step();
    41fa:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <md_y>
    41fe:	90 91 0e 21 	lds	r25, 0x210E	; 0x80210e <md_y+0x1>
    4202:	0e 94 b4 08 	call	0x1168	; 0x1168 <_ZN6DM542T9take_stepEv>
}
    4206:	ff 91       	pop	r31
    4208:	ef 91       	pop	r30
    420a:	bf 91       	pop	r27
    420c:	af 91       	pop	r26
    420e:	9f 91       	pop	r25
    4210:	8f 91       	pop	r24
    4212:	7f 91       	pop	r23
    4214:	6f 91       	pop	r22
    4216:	5f 91       	pop	r21
    4218:	4f 91       	pop	r20
    421a:	3f 91       	pop	r19
    421c:	2f 91       	pop	r18
    421e:	0f 90       	pop	r0
    4220:	0b be       	out	0x3b, r0	; 59
    4222:	0f 90       	pop	r0
    4224:	0f be       	out	0x3f, r0	; 63
    4226:	0f 90       	pop	r0
    4228:	1f 90       	pop	r1
    422a:	18 95       	reti

0000422c <__vector_16>:

ISR(TCC0_CCA_vect)
{
    422c:	1f 92       	push	r1
    422e:	0f 92       	push	r0
    4230:	0f b6       	in	r0, 0x3f	; 63
    4232:	0f 92       	push	r0
    4234:	11 24       	eor	r1, r1
    4236:	0b b6       	in	r0, 0x3b	; 59
    4238:	0f 92       	push	r0
    423a:	2f 93       	push	r18
    423c:	3f 93       	push	r19
    423e:	4f 93       	push	r20
    4240:	5f 93       	push	r21
    4242:	6f 93       	push	r22
    4244:	7f 93       	push	r23
    4246:	8f 93       	push	r24
    4248:	9f 93       	push	r25
    424a:	af 93       	push	r26
    424c:	bf 93       	push	r27
    424e:	ef 93       	push	r30
    4250:	ff 93       	push	r31
  md_z->set_signal_low();
    4252:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <md_z>
    4256:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <md_z+0x1>
    425a:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN6DM542T14set_signal_lowEv>
}
    425e:	ff 91       	pop	r31
    4260:	ef 91       	pop	r30
    4262:	bf 91       	pop	r27
    4264:	af 91       	pop	r26
    4266:	9f 91       	pop	r25
    4268:	8f 91       	pop	r24
    426a:	7f 91       	pop	r23
    426c:	6f 91       	pop	r22
    426e:	5f 91       	pop	r21
    4270:	4f 91       	pop	r20
    4272:	3f 91       	pop	r19
    4274:	2f 91       	pop	r18
    4276:	0f 90       	pop	r0
    4278:	0b be       	out	0x3b, r0	; 59
    427a:	0f 90       	pop	r0
    427c:	0f be       	out	0x3f, r0	; 63
    427e:	0f 90       	pop	r0
    4280:	1f 90       	pop	r1
    4282:	18 95       	reti

00004284 <__vector_14>:

ISR(TCC0_OVF_vect)
{
    4284:	1f 92       	push	r1
    4286:	0f 92       	push	r0
    4288:	0f b6       	in	r0, 0x3f	; 63
    428a:	0f 92       	push	r0
    428c:	11 24       	eor	r1, r1
    428e:	0b b6       	in	r0, 0x3b	; 59
    4290:	0f 92       	push	r0
    4292:	2f 93       	push	r18
    4294:	3f 93       	push	r19
    4296:	4f 93       	push	r20
    4298:	5f 93       	push	r21
    429a:	6f 93       	push	r22
    429c:	7f 93       	push	r23
    429e:	8f 93       	push	r24
    42a0:	9f 93       	push	r25
    42a2:	af 93       	push	r26
    42a4:	bf 93       	push	r27
    42a6:	ef 93       	push	r30
    42a8:	ff 93       	push	r31
  md_z->take_step();
    42aa:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <md_z>
    42ae:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <md_z+0x1>
    42b2:	0e 94 b4 08 	call	0x1168	; 0x1168 <_ZN6DM542T9take_stepEv>
    42b6:	ff 91       	pop	r31
    42b8:	ef 91       	pop	r30
    42ba:	bf 91       	pop	r27
    42bc:	af 91       	pop	r26
    42be:	9f 91       	pop	r25
    42c0:	8f 91       	pop	r24
    42c2:	7f 91       	pop	r23
    42c4:	6f 91       	pop	r22
    42c6:	5f 91       	pop	r21
    42c8:	4f 91       	pop	r20
    42ca:	3f 91       	pop	r19
    42cc:	2f 91       	pop	r18
    42ce:	0f 90       	pop	r0
    42d0:	0b be       	out	0x3b, r0	; 59
    42d2:	0f 90       	pop	r0
    42d4:	0f be       	out	0x3f, r0	; 63
    42d6:	0f 90       	pop	r0
    42d8:	1f 90       	pop	r1
    42da:	18 95       	reti

000042dc <_ZN9frt_queueImEC1EhP8emstreamm>:
 *  @param p_ser_dev Pointer to a serial device to be used for debugging printouts
 *                   (Default: NULL)
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
    42dc:	cf 92       	push	r12
    42de:	df 92       	push	r13
    42e0:	ef 92       	push	r14
    42e2:	ff 92       	push	r15
    42e4:	0f 93       	push	r16
    42e6:	1f 93       	push	r17
    42e8:	cf 93       	push	r28
    42ea:	df 93       	push	r29
    42ec:	ec 01       	movw	r28, r24
    42ee:	86 2f       	mov	r24, r22
    42f0:	68 01       	movw	r12, r16
    42f2:	79 01       	movw	r14, r18

template <class data_type>
frt_base_queue<data_type>::frt_base_queue (emstream* p_ser_dev)
{
	// Save the pointer to a serial devide so it may be used for debugging
	p_serial = p_ser_dev;
    42f4:	4a 83       	std	Y+2, r20	; 0x02
    42f6:	5b 83       	std	Y+3, r21	; 0x03
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    42f8:	23 e7       	ldi	r18, 0x73	; 115
    42fa:	30 e2       	ldi	r19, 0x20	; 32
    42fc:	28 83       	st	Y, r18
    42fe:	39 83       	std	Y+1, r19	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    4300:	40 e0       	ldi	r20, 0x00	; 0
    4302:	64 e0       	ldi	r22, 0x04	; 4
    4304:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <xQueueGenericCreate>
    4308:	8c 83       	std	Y+4, r24	; 0x04
    430a:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    430c:	ce 82       	std	Y+6, r12	; 0x06
    430e:	df 82       	std	Y+7, r13	; 0x07
    4310:	e8 86       	std	Y+8, r14	; 0x08
    4312:	f9 86       	std	Y+9, r15	; 0x09
	if (handle == 0)
	{
		DBG (p_ser_dev, PMS ("ERROR creating ") << queue_size << PMS("x") 
			 << sizeof (data_type) << PMS ("B queue #") << handle << endl);
	}
}
    4314:	df 91       	pop	r29
    4316:	cf 91       	pop	r28
    4318:	1f 91       	pop	r17
    431a:	0f 91       	pop	r16
    431c:	ff 90       	pop	r15
    431e:	ef 90       	pop	r14
    4320:	df 90       	pop	r13
    4322:	cf 90       	pop	r12
    4324:	08 95       	ret

00004326 <_GLOBAL__sub_I_counter>:
    4326:	0f 93       	push	r16
    4328:	1f 93       	push	r17
shared_data<bool> emergency_shutdown;
shared_data<bool> next_node;
shared_data<uint16_t> current_node;
shared_data<uint16_t> total_nodes;
shared_data<bool> pause;
frt_queue<uint32_t> x_max_velocity(50,NULL,10);
    432a:	0a e0       	ldi	r16, 0x0A	; 10
    432c:	10 e0       	ldi	r17, 0x00	; 0
    432e:	20 e0       	ldi	r18, 0x00	; 0
    4330:	30 e0       	ldi	r19, 0x00	; 0
    4332:	40 e0       	ldi	r20, 0x00	; 0
    4334:	50 e0       	ldi	r21, 0x00	; 0
    4336:	62 e3       	ldi	r22, 0x32	; 50
    4338:	8f e3       	ldi	r24, 0x3F	; 63
    433a:	91 e2       	ldi	r25, 0x21	; 33
    433c:	0e 94 6e 21 	call	0x42dc	; 0x42dc <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> y_max_velocity(50,NULL,10);
    4340:	0a e0       	ldi	r16, 0x0A	; 10
    4342:	10 e0       	ldi	r17, 0x00	; 0
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	40 e0       	ldi	r20, 0x00	; 0
    434a:	50 e0       	ldi	r21, 0x00	; 0
    434c:	62 e3       	ldi	r22, 0x32	; 50
    434e:	85 e3       	ldi	r24, 0x35	; 53
    4350:	91 e2       	ldi	r25, 0x21	; 33
    4352:	0e 94 6e 21 	call	0x42dc	; 0x42dc <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> z_max_velocity(50,NULL,10);
    4356:	0a e0       	ldi	r16, 0x0A	; 10
    4358:	10 e0       	ldi	r17, 0x00	; 0
    435a:	20 e0       	ldi	r18, 0x00	; 0
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	40 e0       	ldi	r20, 0x00	; 0
    4360:	50 e0       	ldi	r21, 0x00	; 0
    4362:	62 e3       	ldi	r22, 0x32	; 50
    4364:	8b e2       	ldi	r24, 0x2B	; 43
    4366:	91 e2       	ldi	r25, 0x21	; 33
    4368:	0e 94 6e 21 	call	0x42dc	; 0x42dc <_ZN9frt_queueImEC1EhP8emstreamm>
InterruptTimer* timer_C0_pin0;
DM542T* md_x;
DM542T* md_y;
DM542T* md_z;

frt_text_queue print_ser_queue (32, NULL, 10);
    436c:	0a e0       	ldi	r16, 0x0A	; 10
    436e:	10 e0       	ldi	r17, 0x00	; 0
    4370:	20 e0       	ldi	r18, 0x00	; 0
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	40 e0       	ldi	r20, 0x00	; 0
    4376:	50 e0       	ldi	r21, 0x00	; 0
    4378:	60 e2       	ldi	r22, 0x20	; 32
    437a:	70 e0       	ldi	r23, 0x00	; 0
    437c:	8b ef       	ldi	r24, 0xFB	; 251
    437e:	90 e2       	ldi	r25, 0x20	; 32
    4380:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <_ZN14frt_text_queueC1EjP8emstreamm>

frt_queue<uint32_t> xlocations(50,NULL,10);
    4384:	0a e0       	ldi	r16, 0x0A	; 10
    4386:	10 e0       	ldi	r17, 0x00	; 0
    4388:	20 e0       	ldi	r18, 0x00	; 0
    438a:	30 e0       	ldi	r19, 0x00	; 0
    438c:	40 e0       	ldi	r20, 0x00	; 0
    438e:	50 e0       	ldi	r21, 0x00	; 0
    4390:	62 e3       	ldi	r22, 0x32	; 50
    4392:	81 ef       	ldi	r24, 0xF1	; 241
    4394:	90 e2       	ldi	r25, 0x20	; 32
    4396:	0e 94 6e 21 	call	0x42dc	; 0x42dc <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> ylocations(50,NULL,10);
    439a:	0a e0       	ldi	r16, 0x0A	; 10
    439c:	10 e0       	ldi	r17, 0x00	; 0
    439e:	20 e0       	ldi	r18, 0x00	; 0
    43a0:	30 e0       	ldi	r19, 0x00	; 0
    43a2:	40 e0       	ldi	r20, 0x00	; 0
    43a4:	50 e0       	ldi	r21, 0x00	; 0
    43a6:	62 e3       	ldi	r22, 0x32	; 50
    43a8:	87 ee       	ldi	r24, 0xE7	; 231
    43aa:	90 e2       	ldi	r25, 0x20	; 32
    43ac:	0e 94 6e 21 	call	0x42dc	; 0x42dc <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> zlocations(50,NULL,10);
    43b0:	0a e0       	ldi	r16, 0x0A	; 10
    43b2:	10 e0       	ldi	r17, 0x00	; 0
    43b4:	20 e0       	ldi	r18, 0x00	; 0
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	40 e0       	ldi	r20, 0x00	; 0
    43ba:	50 e0       	ldi	r21, 0x00	; 0
    43bc:	62 e3       	ldi	r22, 0x32	; 50
    43be:	8d ed       	ldi	r24, 0xDD	; 221
    43c0:	90 e2       	ldi	r25, 0x20	; 32
    43c2:	0e 94 6e 21 	call	0x42dc	; 0x42dc <_ZN9frt_queueImEC1EhP8emstreamm>
}

ISR(TCC0_OVF_vect)
{
  md_z->take_step();
    43c6:	1f 91       	pop	r17
    43c8:	0f 91       	pop	r16
    43ca:	08 95       	ret

000043cc <pvPortMalloc>:
    43cc:	0f 93       	push	r16
    43ce:	1f 93       	push	r17
    43d0:	cf 93       	push	r28
    43d2:	df 93       	push	r29
    43d4:	ec 01       	movw	r28, r24
    43d6:	0e 94 53 29 	call	0x52a6	; 0x52a6 <vTaskSuspendAll>
    43da:	80 91 63 21 	lds	r24, 0x2163	; 0x802163 <xHeapHasBeenInitialised.4146>
    43de:	81 11       	cpse	r24, r1
    43e0:	1d c0       	rjmp	.+58     	; 0x441c <pvPortMalloc+0x50>
    43e2:	a8 e6       	ldi	r26, 0x68	; 104
    43e4:	b1 e2       	ldi	r27, 0x21	; 33
    43e6:	ec e6       	ldi	r30, 0x6C	; 108
    43e8:	f1 e2       	ldi	r31, 0x21	; 33
    43ea:	ed 93       	st	X+, r30
    43ec:	fc 93       	st	X, r31
    43ee:	11 97       	sbiw	r26, 0x01	; 1
    43f0:	12 96       	adiw	r26, 0x02	; 2
    43f2:	1d 92       	st	X+, r1
    43f4:	1c 92       	st	X, r1
    43f6:	13 97       	sbiw	r26, 0x03	; 3
    43f8:	a4 e6       	ldi	r26, 0x64	; 100
    43fa:	b1 e2       	ldi	r27, 0x21	; 33
    43fc:	8f ef       	ldi	r24, 0xFF	; 255
    43fe:	9f e1       	ldi	r25, 0x1F	; 31
    4400:	12 96       	adiw	r26, 0x02	; 2
    4402:	8d 93       	st	X+, r24
    4404:	9c 93       	st	X, r25
    4406:	13 97       	sbiw	r26, 0x03	; 3
    4408:	1d 92       	st	X+, r1
    440a:	1c 92       	st	X, r1
    440c:	11 97       	sbiw	r26, 0x01	; 1
    440e:	82 83       	std	Z+2, r24	; 0x02
    4410:	93 83       	std	Z+3, r25	; 0x03
    4412:	a0 83       	st	Z, r26
    4414:	b1 83       	std	Z+1, r27	; 0x01
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	80 93 63 21 	sts	0x2163, r24	; 0x802163 <xHeapHasBeenInitialised.4146>
    441c:	20 97       	sbiw	r28, 0x00	; 0
    441e:	09 f4       	brne	.+2      	; 0x4422 <pvPortMalloc+0x56>
    4420:	5f c0       	rjmp	.+190    	; 0x44e0 <pvPortMalloc+0x114>
    4422:	9e 01       	movw	r18, r28
    4424:	2b 5f       	subi	r18, 0xFB	; 251
    4426:	3f 4f       	sbci	r19, 0xFF	; 255
    4428:	24 96       	adiw	r28, 0x04	; 4
    442a:	ce 3f       	cpi	r28, 0xFE	; 254
    442c:	df 41       	sbci	r29, 0x1F	; 31
    442e:	08 f0       	brcs	.+2      	; 0x4432 <pvPortMalloc+0x66>
    4430:	5a c0       	rjmp	.+180    	; 0x44e6 <pvPortMalloc+0x11a>
    4432:	e0 91 68 21 	lds	r30, 0x2168	; 0x802168 <xStart>
    4436:	f0 91 69 21 	lds	r31, 0x2169	; 0x802169 <xStart+0x1>
    443a:	a8 e6       	ldi	r26, 0x68	; 104
    443c:	b1 e2       	ldi	r27, 0x21	; 33
    443e:	02 c0       	rjmp	.+4      	; 0x4444 <pvPortMalloc+0x78>
    4440:	df 01       	movw	r26, r30
    4442:	fc 01       	movw	r30, r24
    4444:	82 81       	ldd	r24, Z+2	; 0x02
    4446:	93 81       	ldd	r25, Z+3	; 0x03
    4448:	82 17       	cp	r24, r18
    444a:	93 07       	cpc	r25, r19
    444c:	20 f4       	brcc	.+8      	; 0x4456 <pvPortMalloc+0x8a>
    444e:	80 81       	ld	r24, Z
    4450:	91 81       	ldd	r25, Z+1	; 0x01
    4452:	00 97       	sbiw	r24, 0x00	; 0
    4454:	a9 f7       	brne	.-22     	; 0x4440 <pvPortMalloc+0x74>
    4456:	c1 e2       	ldi	r28, 0x21	; 33
    4458:	e4 36       	cpi	r30, 0x64	; 100
    445a:	fc 07       	cpc	r31, r28
    445c:	09 f4       	brne	.+2      	; 0x4460 <pvPortMalloc+0x94>
    445e:	46 c0       	rjmp	.+140    	; 0x44ec <pvPortMalloc+0x120>
    4460:	cd 91       	ld	r28, X+
    4462:	dc 91       	ld	r29, X
    4464:	11 97       	sbiw	r26, 0x01	; 1
    4466:	8e 01       	movw	r16, r28
    4468:	0b 5f       	subi	r16, 0xFB	; 251
    446a:	1f 4f       	sbci	r17, 0xFF	; 255
    446c:	80 81       	ld	r24, Z
    446e:	91 81       	ldd	r25, Z+1	; 0x01
    4470:	8d 93       	st	X+, r24
    4472:	9c 93       	st	X, r25
    4474:	82 81       	ldd	r24, Z+2	; 0x02
    4476:	93 81       	ldd	r25, Z+3	; 0x03
    4478:	82 1b       	sub	r24, r18
    447a:	93 0b       	sbc	r25, r19
    447c:	8b 30       	cpi	r24, 0x0B	; 11
    447e:	91 05       	cpc	r25, r1
    4480:	10 f1       	brcs	.+68     	; 0x44c6 <pvPortMalloc+0xfa>
    4482:	bf 01       	movw	r22, r30
    4484:	62 0f       	add	r22, r18
    4486:	73 1f       	adc	r23, r19
    4488:	db 01       	movw	r26, r22
    448a:	12 96       	adiw	r26, 0x02	; 2
    448c:	8d 93       	st	X+, r24
    448e:	9c 93       	st	X, r25
    4490:	13 97       	sbiw	r26, 0x03	; 3
    4492:	22 83       	std	Z+2, r18	; 0x02
    4494:	33 83       	std	Z+3, r19	; 0x03
    4496:	12 96       	adiw	r26, 0x02	; 2
    4498:	4d 91       	ld	r20, X+
    449a:	5c 91       	ld	r21, X
    449c:	13 97       	sbiw	r26, 0x03	; 3
    449e:	88 e6       	ldi	r24, 0x68	; 104
    44a0:	91 e2       	ldi	r25, 0x21	; 33
    44a2:	01 c0       	rjmp	.+2      	; 0x44a6 <pvPortMalloc+0xda>
    44a4:	cd 01       	movw	r24, r26
    44a6:	ec 01       	movw	r28, r24
    44a8:	a8 81       	ld	r26, Y
    44aa:	b9 81       	ldd	r27, Y+1	; 0x01
    44ac:	12 96       	adiw	r26, 0x02	; 2
    44ae:	2d 91       	ld	r18, X+
    44b0:	3c 91       	ld	r19, X
    44b2:	13 97       	sbiw	r26, 0x03	; 3
    44b4:	24 17       	cp	r18, r20
    44b6:	35 07       	cpc	r19, r21
    44b8:	a8 f3       	brcs	.-22     	; 0x44a4 <pvPortMalloc+0xd8>
    44ba:	eb 01       	movw	r28, r22
    44bc:	a8 83       	st	Y, r26
    44be:	b9 83       	std	Y+1, r27	; 0x01
    44c0:	dc 01       	movw	r26, r24
    44c2:	6d 93       	st	X+, r22
    44c4:	7c 93       	st	X, r23
    44c6:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    44ca:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    44ce:	22 81       	ldd	r18, Z+2	; 0x02
    44d0:	33 81       	ldd	r19, Z+3	; 0x03
    44d2:	82 1b       	sub	r24, r18
    44d4:	93 0b       	sbc	r25, r19
    44d6:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    44da:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    44de:	08 c0       	rjmp	.+16     	; 0x44f0 <pvPortMalloc+0x124>
    44e0:	00 e0       	ldi	r16, 0x00	; 0
    44e2:	10 e0       	ldi	r17, 0x00	; 0
    44e4:	05 c0       	rjmp	.+10     	; 0x44f0 <pvPortMalloc+0x124>
    44e6:	00 e0       	ldi	r16, 0x00	; 0
    44e8:	10 e0       	ldi	r17, 0x00	; 0
    44ea:	02 c0       	rjmp	.+4      	; 0x44f0 <pvPortMalloc+0x124>
    44ec:	00 e0       	ldi	r16, 0x00	; 0
    44ee:	10 e0       	ldi	r17, 0x00	; 0
    44f0:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <xTaskResumeAll>
    44f4:	c8 01       	movw	r24, r16
    44f6:	df 91       	pop	r29
    44f8:	cf 91       	pop	r28
    44fa:	1f 91       	pop	r17
    44fc:	0f 91       	pop	r16
    44fe:	08 95       	ret

00004500 <vPortFree>:
    4500:	0f 93       	push	r16
    4502:	1f 93       	push	r17
    4504:	cf 93       	push	r28
    4506:	df 93       	push	r29
    4508:	00 97       	sbiw	r24, 0x00	; 0
    450a:	41 f1       	breq	.+80     	; 0x455c <vPortFree+0x5c>
    450c:	ec 01       	movw	r28, r24
    450e:	8c 01       	movw	r16, r24
    4510:	05 50       	subi	r16, 0x05	; 5
    4512:	11 09       	sbc	r17, r1
    4514:	0e 94 53 29 	call	0x52a6	; 0x52a6 <vTaskSuspendAll>
    4518:	f8 01       	movw	r30, r16
    451a:	42 81       	ldd	r20, Z+2	; 0x02
    451c:	53 81       	ldd	r21, Z+3	; 0x03
    451e:	a8 e6       	ldi	r26, 0x68	; 104
    4520:	b1 e2       	ldi	r27, 0x21	; 33
    4522:	01 c0       	rjmp	.+2      	; 0x4526 <vPortFree+0x26>
    4524:	df 01       	movw	r26, r30
    4526:	ed 91       	ld	r30, X+
    4528:	fc 91       	ld	r31, X
    452a:	11 97       	sbiw	r26, 0x01	; 1
    452c:	22 81       	ldd	r18, Z+2	; 0x02
    452e:	33 81       	ldd	r19, Z+3	; 0x03
    4530:	24 17       	cp	r18, r20
    4532:	35 07       	cpc	r19, r21
    4534:	b8 f3       	brcs	.-18     	; 0x4524 <vPortFree+0x24>
    4536:	25 97       	sbiw	r28, 0x05	; 5
    4538:	e8 83       	st	Y, r30
    453a:	f9 83       	std	Y+1, r31	; 0x01
    453c:	0d 93       	st	X+, r16
    453e:	1c 93       	st	X, r17
    4540:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4544:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    4548:	8a 81       	ldd	r24, Y+2	; 0x02
    454a:	9b 81       	ldd	r25, Y+3	; 0x03
    454c:	82 0f       	add	r24, r18
    454e:	93 1f       	adc	r25, r19
    4550:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    4554:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    4558:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <xTaskResumeAll>
    455c:	df 91       	pop	r29
    455e:	cf 91       	pop	r28
    4560:	1f 91       	pop	r17
    4562:	0f 91       	pop	r16
    4564:	08 95       	ret

00004566 <vListInitialise>:
    4566:	fc 01       	movw	r30, r24
    4568:	03 96       	adiw	r24, 0x03	; 3
    456a:	81 83       	std	Z+1, r24	; 0x01
    456c:	92 83       	std	Z+2, r25	; 0x02
    456e:	4f ef       	ldi	r20, 0xFF	; 255
    4570:	5f ef       	ldi	r21, 0xFF	; 255
    4572:	ba 01       	movw	r22, r20
    4574:	43 83       	std	Z+3, r20	; 0x03
    4576:	54 83       	std	Z+4, r21	; 0x04
    4578:	65 83       	std	Z+5, r22	; 0x05
    457a:	76 83       	std	Z+6, r23	; 0x06
    457c:	87 83       	std	Z+7, r24	; 0x07
    457e:	90 87       	std	Z+8, r25	; 0x08
    4580:	81 87       	std	Z+9, r24	; 0x09
    4582:	92 87       	std	Z+10, r25	; 0x0a
    4584:	10 82       	st	Z, r1
    4586:	08 95       	ret

00004588 <vListInitialiseItem>:
    4588:	fc 01       	movw	r30, r24
    458a:	12 86       	std	Z+10, r1	; 0x0a
    458c:	13 86       	std	Z+11, r1	; 0x0b
    458e:	08 95       	ret

00004590 <vListInsertEnd>:
    4590:	cf 93       	push	r28
    4592:	df 93       	push	r29
    4594:	fc 01       	movw	r30, r24
    4596:	db 01       	movw	r26, r22
    4598:	21 81       	ldd	r18, Z+1	; 0x01
    459a:	32 81       	ldd	r19, Z+2	; 0x02
    459c:	e9 01       	movw	r28, r18
    459e:	8c 81       	ldd	r24, Y+4	; 0x04
    45a0:	9d 81       	ldd	r25, Y+5	; 0x05
    45a2:	14 96       	adiw	r26, 0x04	; 4
    45a4:	8d 93       	st	X+, r24
    45a6:	9c 93       	st	X, r25
    45a8:	15 97       	sbiw	r26, 0x05	; 5
    45aa:	81 81       	ldd	r24, Z+1	; 0x01
    45ac:	92 81       	ldd	r25, Z+2	; 0x02
    45ae:	16 96       	adiw	r26, 0x06	; 6
    45b0:	8d 93       	st	X+, r24
    45b2:	9c 93       	st	X, r25
    45b4:	17 97       	sbiw	r26, 0x07	; 7
    45b6:	8c 81       	ldd	r24, Y+4	; 0x04
    45b8:	9d 81       	ldd	r25, Y+5	; 0x05
    45ba:	ec 01       	movw	r28, r24
    45bc:	6e 83       	std	Y+6, r22	; 0x06
    45be:	7f 83       	std	Y+7, r23	; 0x07
    45c0:	e9 01       	movw	r28, r18
    45c2:	6c 83       	std	Y+4, r22	; 0x04
    45c4:	7d 83       	std	Y+5, r23	; 0x05
    45c6:	61 83       	std	Z+1, r22	; 0x01
    45c8:	72 83       	std	Z+2, r23	; 0x02
    45ca:	1a 96       	adiw	r26, 0x0a	; 10
    45cc:	ed 93       	st	X+, r30
    45ce:	fc 93       	st	X, r31
    45d0:	1b 97       	sbiw	r26, 0x0b	; 11
    45d2:	80 81       	ld	r24, Z
    45d4:	8f 5f       	subi	r24, 0xFF	; 255
    45d6:	80 83       	st	Z, r24
    45d8:	df 91       	pop	r29
    45da:	cf 91       	pop	r28
    45dc:	08 95       	ret

000045de <vListInsert>:
    45de:	0f 93       	push	r16
    45e0:	1f 93       	push	r17
    45e2:	cf 93       	push	r28
    45e4:	df 93       	push	r29
    45e6:	eb 01       	movw	r28, r22
    45e8:	08 81       	ld	r16, Y
    45ea:	19 81       	ldd	r17, Y+1	; 0x01
    45ec:	2a 81       	ldd	r18, Y+2	; 0x02
    45ee:	3b 81       	ldd	r19, Y+3	; 0x03
    45f0:	0f 3f       	cpi	r16, 0xFF	; 255
    45f2:	4f ef       	ldi	r20, 0xFF	; 255
    45f4:	14 07       	cpc	r17, r20
    45f6:	24 07       	cpc	r18, r20
    45f8:	34 07       	cpc	r19, r20
    45fa:	31 f4       	brne	.+12     	; 0x4608 <vListInsert+0x2a>
    45fc:	dc 01       	movw	r26, r24
    45fe:	19 96       	adiw	r26, 0x09	; 9
    4600:	ed 91       	ld	r30, X+
    4602:	fc 91       	ld	r31, X
    4604:	1a 97       	sbiw	r26, 0x0a	; 10
    4606:	1f c0       	rjmp	.+62     	; 0x4646 <vListInsert+0x68>
    4608:	fc 01       	movw	r30, r24
    460a:	33 96       	adiw	r30, 0x03	; 3
    460c:	dc 01       	movw	r26, r24
    460e:	17 96       	adiw	r26, 0x07	; 7
    4610:	4d 91       	ld	r20, X+
    4612:	5c 91       	ld	r21, X
    4614:	18 97       	sbiw	r26, 0x08	; 8
    4616:	da 01       	movw	r26, r20
    4618:	4d 91       	ld	r20, X+
    461a:	5d 91       	ld	r21, X+
    461c:	6d 91       	ld	r22, X+
    461e:	7c 91       	ld	r23, X
    4620:	04 17       	cp	r16, r20
    4622:	15 07       	cpc	r17, r21
    4624:	26 07       	cpc	r18, r22
    4626:	37 07       	cpc	r19, r23
    4628:	70 f0       	brcs	.+28     	; 0x4646 <vListInsert+0x68>
    462a:	04 80       	ldd	r0, Z+4	; 0x04
    462c:	f5 81       	ldd	r31, Z+5	; 0x05
    462e:	e0 2d       	mov	r30, r0
    4630:	a4 81       	ldd	r26, Z+4	; 0x04
    4632:	b5 81       	ldd	r27, Z+5	; 0x05
    4634:	4d 91       	ld	r20, X+
    4636:	5d 91       	ld	r21, X+
    4638:	6d 91       	ld	r22, X+
    463a:	7c 91       	ld	r23, X
    463c:	04 17       	cp	r16, r20
    463e:	15 07       	cpc	r17, r21
    4640:	26 07       	cpc	r18, r22
    4642:	37 07       	cpc	r19, r23
    4644:	90 f7       	brcc	.-28     	; 0x462a <vListInsert+0x4c>
    4646:	a4 81       	ldd	r26, Z+4	; 0x04
    4648:	b5 81       	ldd	r27, Z+5	; 0x05
    464a:	ac 83       	std	Y+4, r26	; 0x04
    464c:	bd 83       	std	Y+5, r27	; 0x05
    464e:	16 96       	adiw	r26, 0x06	; 6
    4650:	cd 93       	st	X+, r28
    4652:	dc 93       	st	X, r29
    4654:	17 97       	sbiw	r26, 0x07	; 7
    4656:	ee 83       	std	Y+6, r30	; 0x06
    4658:	ff 83       	std	Y+7, r31	; 0x07
    465a:	c4 83       	std	Z+4, r28	; 0x04
    465c:	d5 83       	std	Z+5, r29	; 0x05
    465e:	8a 87       	std	Y+10, r24	; 0x0a
    4660:	9b 87       	std	Y+11, r25	; 0x0b
    4662:	fc 01       	movw	r30, r24
    4664:	20 81       	ld	r18, Z
    4666:	2f 5f       	subi	r18, 0xFF	; 255
    4668:	20 83       	st	Z, r18
    466a:	df 91       	pop	r29
    466c:	cf 91       	pop	r28
    466e:	1f 91       	pop	r17
    4670:	0f 91       	pop	r16
    4672:	08 95       	ret

00004674 <vListRemove>:
    4674:	fc 01       	movw	r30, r24
    4676:	a4 81       	ldd	r26, Z+4	; 0x04
    4678:	b5 81       	ldd	r27, Z+5	; 0x05
    467a:	86 81       	ldd	r24, Z+6	; 0x06
    467c:	97 81       	ldd	r25, Z+7	; 0x07
    467e:	16 96       	adiw	r26, 0x06	; 6
    4680:	8d 93       	st	X+, r24
    4682:	9c 93       	st	X, r25
    4684:	17 97       	sbiw	r26, 0x07	; 7
    4686:	a6 81       	ldd	r26, Z+6	; 0x06
    4688:	b7 81       	ldd	r27, Z+7	; 0x07
    468a:	84 81       	ldd	r24, Z+4	; 0x04
    468c:	95 81       	ldd	r25, Z+5	; 0x05
    468e:	14 96       	adiw	r26, 0x04	; 4
    4690:	8d 93       	st	X+, r24
    4692:	9c 93       	st	X, r25
    4694:	15 97       	sbiw	r26, 0x05	; 5
    4696:	a2 85       	ldd	r26, Z+10	; 0x0a
    4698:	b3 85       	ldd	r27, Z+11	; 0x0b
    469a:	11 96       	adiw	r26, 0x01	; 1
    469c:	8d 91       	ld	r24, X+
    469e:	9c 91       	ld	r25, X
    46a0:	12 97       	sbiw	r26, 0x02	; 2
    46a2:	e8 17       	cp	r30, r24
    46a4:	f9 07       	cpc	r31, r25
    46a6:	31 f4       	brne	.+12     	; 0x46b4 <vListRemove+0x40>
    46a8:	86 81       	ldd	r24, Z+6	; 0x06
    46aa:	97 81       	ldd	r25, Z+7	; 0x07
    46ac:	11 96       	adiw	r26, 0x01	; 1
    46ae:	8d 93       	st	X+, r24
    46b0:	9c 93       	st	X, r25
    46b2:	12 97       	sbiw	r26, 0x02	; 2
    46b4:	12 86       	std	Z+10, r1	; 0x0a
    46b6:	13 86       	std	Z+11, r1	; 0x0b
    46b8:	8c 91       	ld	r24, X
    46ba:	81 50       	subi	r24, 0x01	; 1
    46bc:	8c 93       	st	X, r24
    46be:	08 95       	ret

000046c0 <pxPortInitialiseStack>:
    46c0:	80 93 f3 41 	sts	0x41F3, r24	; 0x8041f3 <portStackTopForTask>
    46c4:	90 93 f4 41 	sts	0x41F4, r25	; 0x8041f4 <portStackTopForTask+0x1>
    46c8:	31 e1       	ldi	r19, 0x11	; 17
    46ca:	fc 01       	movw	r30, r24
    46cc:	30 83       	st	Z, r19
    46ce:	31 97       	sbiw	r30, 0x01	; 1
    46d0:	22 e2       	ldi	r18, 0x22	; 34
    46d2:	20 83       	st	Z, r18
    46d4:	31 97       	sbiw	r30, 0x01	; 1
    46d6:	a3 e3       	ldi	r26, 0x33	; 51
    46d8:	a0 83       	st	Z, r26
    46da:	31 97       	sbiw	r30, 0x01	; 1
    46dc:	60 83       	st	Z, r22
    46de:	31 97       	sbiw	r30, 0x01	; 1
    46e0:	70 83       	st	Z, r23
    46e2:	31 97       	sbiw	r30, 0x01	; 1
    46e4:	10 82       	st	Z, r1
    46e6:	31 97       	sbiw	r30, 0x01	; 1
    46e8:	10 82       	st	Z, r1
    46ea:	31 97       	sbiw	r30, 0x01	; 1
    46ec:	60 e8       	ldi	r22, 0x80	; 128
    46ee:	60 83       	st	Z, r22
    46f0:	31 97       	sbiw	r30, 0x01	; 1
    46f2:	10 82       	st	Z, r1
    46f4:	31 97       	sbiw	r30, 0x01	; 1
    46f6:	10 82       	st	Z, r1
    46f8:	31 97       	sbiw	r30, 0x01	; 1
    46fa:	10 82       	st	Z, r1
    46fc:	31 97       	sbiw	r30, 0x01	; 1
    46fe:	62 e0       	ldi	r22, 0x02	; 2
    4700:	60 83       	st	Z, r22
    4702:	31 97       	sbiw	r30, 0x01	; 1
    4704:	63 e0       	ldi	r22, 0x03	; 3
    4706:	60 83       	st	Z, r22
    4708:	31 97       	sbiw	r30, 0x01	; 1
    470a:	64 e0       	ldi	r22, 0x04	; 4
    470c:	60 83       	st	Z, r22
    470e:	31 97       	sbiw	r30, 0x01	; 1
    4710:	65 e0       	ldi	r22, 0x05	; 5
    4712:	60 83       	st	Z, r22
    4714:	31 97       	sbiw	r30, 0x01	; 1
    4716:	66 e0       	ldi	r22, 0x06	; 6
    4718:	60 83       	st	Z, r22
    471a:	31 97       	sbiw	r30, 0x01	; 1
    471c:	67 e0       	ldi	r22, 0x07	; 7
    471e:	60 83       	st	Z, r22
    4720:	31 97       	sbiw	r30, 0x01	; 1
    4722:	68 e0       	ldi	r22, 0x08	; 8
    4724:	60 83       	st	Z, r22
    4726:	31 97       	sbiw	r30, 0x01	; 1
    4728:	69 e0       	ldi	r22, 0x09	; 9
    472a:	60 83       	st	Z, r22
    472c:	31 97       	sbiw	r30, 0x01	; 1
    472e:	60 e1       	ldi	r22, 0x10	; 16
    4730:	60 83       	st	Z, r22
    4732:	31 97       	sbiw	r30, 0x01	; 1
    4734:	30 83       	st	Z, r19
    4736:	31 97       	sbiw	r30, 0x01	; 1
    4738:	32 e1       	ldi	r19, 0x12	; 18
    473a:	30 83       	st	Z, r19
    473c:	31 97       	sbiw	r30, 0x01	; 1
    473e:	33 e1       	ldi	r19, 0x13	; 19
    4740:	30 83       	st	Z, r19
    4742:	31 97       	sbiw	r30, 0x01	; 1
    4744:	34 e1       	ldi	r19, 0x14	; 20
    4746:	30 83       	st	Z, r19
    4748:	31 97       	sbiw	r30, 0x01	; 1
    474a:	35 e1       	ldi	r19, 0x15	; 21
    474c:	30 83       	st	Z, r19
    474e:	31 97       	sbiw	r30, 0x01	; 1
    4750:	36 e1       	ldi	r19, 0x16	; 22
    4752:	30 83       	st	Z, r19
    4754:	31 97       	sbiw	r30, 0x01	; 1
    4756:	37 e1       	ldi	r19, 0x17	; 23
    4758:	30 83       	st	Z, r19
    475a:	31 97       	sbiw	r30, 0x01	; 1
    475c:	38 e1       	ldi	r19, 0x18	; 24
    475e:	30 83       	st	Z, r19
    4760:	31 97       	sbiw	r30, 0x01	; 1
    4762:	39 e1       	ldi	r19, 0x19	; 25
    4764:	30 83       	st	Z, r19
    4766:	31 97       	sbiw	r30, 0x01	; 1
    4768:	30 e2       	ldi	r19, 0x20	; 32
    476a:	30 83       	st	Z, r19
    476c:	31 97       	sbiw	r30, 0x01	; 1
    476e:	31 e2       	ldi	r19, 0x21	; 33
    4770:	30 83       	st	Z, r19
    4772:	31 97       	sbiw	r30, 0x01	; 1
    4774:	20 83       	st	Z, r18
    4776:	31 97       	sbiw	r30, 0x01	; 1
    4778:	23 e2       	ldi	r18, 0x23	; 35
    477a:	20 83       	st	Z, r18
    477c:	31 97       	sbiw	r30, 0x01	; 1
    477e:	40 83       	st	Z, r20
    4780:	31 97       	sbiw	r30, 0x01	; 1
    4782:	50 83       	st	Z, r21
    4784:	31 97       	sbiw	r30, 0x01	; 1
    4786:	26 e2       	ldi	r18, 0x26	; 38
    4788:	20 83       	st	Z, r18
    478a:	31 97       	sbiw	r30, 0x01	; 1
    478c:	27 e2       	ldi	r18, 0x27	; 39
    478e:	20 83       	st	Z, r18
    4790:	31 97       	sbiw	r30, 0x01	; 1
    4792:	28 e2       	ldi	r18, 0x28	; 40
    4794:	20 83       	st	Z, r18
    4796:	31 97       	sbiw	r30, 0x01	; 1
    4798:	29 e2       	ldi	r18, 0x29	; 41
    479a:	20 83       	st	Z, r18
    479c:	31 97       	sbiw	r30, 0x01	; 1
    479e:	20 e3       	ldi	r18, 0x30	; 48
    47a0:	20 83       	st	Z, r18
    47a2:	31 97       	sbiw	r30, 0x01	; 1
    47a4:	21 e3       	ldi	r18, 0x31	; 49
    47a6:	20 83       	st	Z, r18
    47a8:	89 97       	sbiw	r24, 0x29	; 41
    47aa:	08 95       	ret

000047ac <xPortStartScheduler>:
    47ac:	8c e7       	ldi	r24, 0x7C	; 124
    47ae:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <__TEXT_REGION_LENGTH__+0x700a69>
    47b2:	8f ef       	ldi	r24, 0xFF	; 255
    47b4:	80 93 68 0a 	sts	0x0A68, r24	; 0x800a68 <__TEXT_REGION_LENGTH__+0x700a68>
    47b8:	81 e0       	ldi	r24, 0x01	; 1
    47ba:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
    47be:	81 e1       	ldi	r24, 0x11	; 17
    47c0:	80 93 41 0a 	sts	0x0A41, r24	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
    47c4:	83 e0       	ldi	r24, 0x03	; 3
    47c6:	80 93 47 0a 	sts	0x0A47, r24	; 0x800a47 <__TEXT_REGION_LENGTH__+0x700a47>
    47ca:	a0 91 cb 41 	lds	r26, 0x41CB	; 0x8041cb <pxCurrentTCB>
    47ce:	b0 91 cc 41 	lds	r27, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    47d2:	cd 91       	ld	r28, X+
    47d4:	cd bf       	out	0x3d, r28	; 61
    47d6:	dd 91       	ld	r29, X+
    47d8:	de bf       	out	0x3e, r29	; 62
    47da:	ff 91       	pop	r31
    47dc:	ef 91       	pop	r30
    47de:	df 91       	pop	r29
    47e0:	cf 91       	pop	r28
    47e2:	bf 91       	pop	r27
    47e4:	af 91       	pop	r26
    47e6:	9f 91       	pop	r25
    47e8:	8f 91       	pop	r24
    47ea:	7f 91       	pop	r23
    47ec:	6f 91       	pop	r22
    47ee:	5f 91       	pop	r21
    47f0:	4f 91       	pop	r20
    47f2:	3f 91       	pop	r19
    47f4:	2f 91       	pop	r18
    47f6:	1f 91       	pop	r17
    47f8:	0f 91       	pop	r16
    47fa:	ff 90       	pop	r15
    47fc:	ef 90       	pop	r14
    47fe:	df 90       	pop	r13
    4800:	cf 90       	pop	r12
    4802:	bf 90       	pop	r11
    4804:	af 90       	pop	r10
    4806:	9f 90       	pop	r9
    4808:	8f 90       	pop	r8
    480a:	7f 90       	pop	r7
    480c:	6f 90       	pop	r6
    480e:	5f 90       	pop	r5
    4810:	4f 90       	pop	r4
    4812:	3f 90       	pop	r3
    4814:	2f 90       	pop	r2
    4816:	1f 90       	pop	r1
    4818:	0f 90       	pop	r0
    481a:	0c be       	out	0x3c, r0	; 60
    481c:	0f 90       	pop	r0
    481e:	0b be       	out	0x3b, r0	; 59
    4820:	0f 90       	pop	r0
    4822:	0f be       	out	0x3f, r0	; 63
    4824:	0f 90       	pop	r0
    4826:	08 95       	ret
    4828:	81 e0       	ldi	r24, 0x01	; 1
    482a:	08 95       	ret

0000482c <vPortYield>:
    482c:	0f 92       	push	r0
    482e:	0f b6       	in	r0, 0x3f	; 63
    4830:	f8 94       	cli
    4832:	0f 92       	push	r0
    4834:	0b b6       	in	r0, 0x3b	; 59
    4836:	0f 92       	push	r0
    4838:	0c b6       	in	r0, 0x3c	; 60
    483a:	0f 92       	push	r0
    483c:	1f 92       	push	r1
    483e:	11 24       	eor	r1, r1
    4840:	2f 92       	push	r2
    4842:	3f 92       	push	r3
    4844:	4f 92       	push	r4
    4846:	5f 92       	push	r5
    4848:	6f 92       	push	r6
    484a:	7f 92       	push	r7
    484c:	8f 92       	push	r8
    484e:	9f 92       	push	r9
    4850:	af 92       	push	r10
    4852:	bf 92       	push	r11
    4854:	cf 92       	push	r12
    4856:	df 92       	push	r13
    4858:	ef 92       	push	r14
    485a:	ff 92       	push	r15
    485c:	0f 93       	push	r16
    485e:	1f 93       	push	r17
    4860:	2f 93       	push	r18
    4862:	3f 93       	push	r19
    4864:	4f 93       	push	r20
    4866:	5f 93       	push	r21
    4868:	6f 93       	push	r22
    486a:	7f 93       	push	r23
    486c:	8f 93       	push	r24
    486e:	9f 93       	push	r25
    4870:	af 93       	push	r26
    4872:	bf 93       	push	r27
    4874:	cf 93       	push	r28
    4876:	df 93       	push	r29
    4878:	ef 93       	push	r30
    487a:	ff 93       	push	r31
    487c:	a0 91 cb 41 	lds	r26, 0x41CB	; 0x8041cb <pxCurrentTCB>
    4880:	b0 91 cc 41 	lds	r27, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    4884:	0d b6       	in	r0, 0x3d	; 61
    4886:	0d 92       	st	X+, r0
    4888:	0e b6       	in	r0, 0x3e	; 62
    488a:	0d 92       	st	X+, r0
    488c:	0e 94 8d 2b 	call	0x571a	; 0x571a <vTaskSwitchContext>
    4890:	a0 91 cb 41 	lds	r26, 0x41CB	; 0x8041cb <pxCurrentTCB>
    4894:	b0 91 cc 41 	lds	r27, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    4898:	cd 91       	ld	r28, X+
    489a:	cd bf       	out	0x3d, r28	; 61
    489c:	dd 91       	ld	r29, X+
    489e:	de bf       	out	0x3e, r29	; 62
    48a0:	ff 91       	pop	r31
    48a2:	ef 91       	pop	r30
    48a4:	df 91       	pop	r29
    48a6:	cf 91       	pop	r28
    48a8:	bf 91       	pop	r27
    48aa:	af 91       	pop	r26
    48ac:	9f 91       	pop	r25
    48ae:	8f 91       	pop	r24
    48b0:	7f 91       	pop	r23
    48b2:	6f 91       	pop	r22
    48b4:	5f 91       	pop	r21
    48b6:	4f 91       	pop	r20
    48b8:	3f 91       	pop	r19
    48ba:	2f 91       	pop	r18
    48bc:	1f 91       	pop	r17
    48be:	0f 91       	pop	r16
    48c0:	ff 90       	pop	r15
    48c2:	ef 90       	pop	r14
    48c4:	df 90       	pop	r13
    48c6:	cf 90       	pop	r12
    48c8:	bf 90       	pop	r11
    48ca:	af 90       	pop	r10
    48cc:	9f 90       	pop	r9
    48ce:	8f 90       	pop	r8
    48d0:	7f 90       	pop	r7
    48d2:	6f 90       	pop	r6
    48d4:	5f 90       	pop	r5
    48d6:	4f 90       	pop	r4
    48d8:	3f 90       	pop	r3
    48da:	2f 90       	pop	r2
    48dc:	1f 90       	pop	r1
    48de:	0f 90       	pop	r0
    48e0:	0c be       	out	0x3c, r0	; 60
    48e2:	0f 90       	pop	r0
    48e4:	0b be       	out	0x3b, r0	; 59
    48e6:	0f 90       	pop	r0
    48e8:	0f be       	out	0x3f, r0	; 63
    48ea:	0f 90       	pop	r0
    48ec:	08 95       	ret

000048ee <vPortYieldFromTick>:
    48ee:	0f 92       	push	r0
    48f0:	0f b6       	in	r0, 0x3f	; 63
    48f2:	f8 94       	cli
    48f4:	0f 92       	push	r0
    48f6:	0b b6       	in	r0, 0x3b	; 59
    48f8:	0f 92       	push	r0
    48fa:	0c b6       	in	r0, 0x3c	; 60
    48fc:	0f 92       	push	r0
    48fe:	1f 92       	push	r1
    4900:	11 24       	eor	r1, r1
    4902:	2f 92       	push	r2
    4904:	3f 92       	push	r3
    4906:	4f 92       	push	r4
    4908:	5f 92       	push	r5
    490a:	6f 92       	push	r6
    490c:	7f 92       	push	r7
    490e:	8f 92       	push	r8
    4910:	9f 92       	push	r9
    4912:	af 92       	push	r10
    4914:	bf 92       	push	r11
    4916:	cf 92       	push	r12
    4918:	df 92       	push	r13
    491a:	ef 92       	push	r14
    491c:	ff 92       	push	r15
    491e:	0f 93       	push	r16
    4920:	1f 93       	push	r17
    4922:	2f 93       	push	r18
    4924:	3f 93       	push	r19
    4926:	4f 93       	push	r20
    4928:	5f 93       	push	r21
    492a:	6f 93       	push	r22
    492c:	7f 93       	push	r23
    492e:	8f 93       	push	r24
    4930:	9f 93       	push	r25
    4932:	af 93       	push	r26
    4934:	bf 93       	push	r27
    4936:	cf 93       	push	r28
    4938:	df 93       	push	r29
    493a:	ef 93       	push	r30
    493c:	ff 93       	push	r31
    493e:	a0 91 cb 41 	lds	r26, 0x41CB	; 0x8041cb <pxCurrentTCB>
    4942:	b0 91 cc 41 	lds	r27, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    4946:	0d b6       	in	r0, 0x3d	; 61
    4948:	0d 92       	st	X+, r0
    494a:	0e b6       	in	r0, 0x3e	; 62
    494c:	0d 92       	st	X+, r0
    494e:	0e 94 6f 29 	call	0x52de	; 0x52de <vTaskIncrementTick>
    4952:	0e 94 8d 2b 	call	0x571a	; 0x571a <vTaskSwitchContext>
    4956:	a0 91 cb 41 	lds	r26, 0x41CB	; 0x8041cb <pxCurrentTCB>
    495a:	b0 91 cc 41 	lds	r27, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    495e:	cd 91       	ld	r28, X+
    4960:	cd bf       	out	0x3d, r28	; 61
    4962:	dd 91       	ld	r29, X+
    4964:	de bf       	out	0x3e, r29	; 62
    4966:	ff 91       	pop	r31
    4968:	ef 91       	pop	r30
    496a:	df 91       	pop	r29
    496c:	cf 91       	pop	r28
    496e:	bf 91       	pop	r27
    4970:	af 91       	pop	r26
    4972:	9f 91       	pop	r25
    4974:	8f 91       	pop	r24
    4976:	7f 91       	pop	r23
    4978:	6f 91       	pop	r22
    497a:	5f 91       	pop	r21
    497c:	4f 91       	pop	r20
    497e:	3f 91       	pop	r19
    4980:	2f 91       	pop	r18
    4982:	1f 91       	pop	r17
    4984:	0f 91       	pop	r16
    4986:	ff 90       	pop	r15
    4988:	ef 90       	pop	r14
    498a:	df 90       	pop	r13
    498c:	cf 90       	pop	r12
    498e:	bf 90       	pop	r11
    4990:	af 90       	pop	r10
    4992:	9f 90       	pop	r9
    4994:	8f 90       	pop	r8
    4996:	7f 90       	pop	r7
    4998:	6f 90       	pop	r6
    499a:	5f 90       	pop	r5
    499c:	4f 90       	pop	r4
    499e:	3f 90       	pop	r3
    49a0:	2f 90       	pop	r2
    49a2:	1f 90       	pop	r1
    49a4:	0f 90       	pop	r0
    49a6:	0c be       	out	0x3c, r0	; 60
    49a8:	0f 90       	pop	r0
    49aa:	0b be       	out	0x3b, r0	; 59
    49ac:	0f 90       	pop	r0
    49ae:	0f be       	out	0x3f, r0	; 63
    49b0:	0f 90       	pop	r0
    49b2:	08 95       	ret

000049b4 <__vector_55>:
    49b4:	0e 94 77 24 	call	0x48ee	; 0x48ee <vPortYieldFromTick>
    49b8:	18 95       	reti

000049ba <prvCopyDataToQueue>:
    49ba:	cf 93       	push	r28
    49bc:	df 93       	push	r29
    49be:	ec 01       	movw	r28, r24
    49c0:	88 a1       	ldd	r24, Y+32	; 0x20
    49c2:	81 11       	cpse	r24, r1
    49c4:	0b c0       	rjmp	.+22     	; 0x49dc <prvCopyDataToQueue+0x22>
    49c6:	88 81       	ld	r24, Y
    49c8:	99 81       	ldd	r25, Y+1	; 0x01
    49ca:	89 2b       	or	r24, r25
    49cc:	e1 f5       	brne	.+120    	; 0x4a46 <prvCopyDataToQueue+0x8c>
    49ce:	8a 81       	ldd	r24, Y+2	; 0x02
    49d0:	9b 81       	ldd	r25, Y+3	; 0x03
    49d2:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <vTaskPriorityDisinherit>
    49d6:	1a 82       	std	Y+2, r1	; 0x02
    49d8:	1b 82       	std	Y+3, r1	; 0x03
    49da:	35 c0       	rjmp	.+106    	; 0x4a46 <prvCopyDataToQueue+0x8c>
    49dc:	41 11       	cpse	r20, r1
    49de:	17 c0       	rjmp	.+46     	; 0x4a0e <prvCopyDataToQueue+0x54>
    49e0:	48 2f       	mov	r20, r24
    49e2:	50 e0       	ldi	r21, 0x00	; 0
    49e4:	8c 81       	ldd	r24, Y+4	; 0x04
    49e6:	9d 81       	ldd	r25, Y+5	; 0x05
    49e8:	0e 94 43 39 	call	0x7286	; 0x7286 <memcpy>
    49ec:	28 a1       	ldd	r18, Y+32	; 0x20
    49ee:	8c 81       	ldd	r24, Y+4	; 0x04
    49f0:	9d 81       	ldd	r25, Y+5	; 0x05
    49f2:	82 0f       	add	r24, r18
    49f4:	91 1d       	adc	r25, r1
    49f6:	8c 83       	std	Y+4, r24	; 0x04
    49f8:	9d 83       	std	Y+5, r25	; 0x05
    49fa:	2a 81       	ldd	r18, Y+2	; 0x02
    49fc:	3b 81       	ldd	r19, Y+3	; 0x03
    49fe:	82 17       	cp	r24, r18
    4a00:	93 07       	cpc	r25, r19
    4a02:	08 f1       	brcs	.+66     	; 0x4a46 <prvCopyDataToQueue+0x8c>
    4a04:	88 81       	ld	r24, Y
    4a06:	99 81       	ldd	r25, Y+1	; 0x01
    4a08:	8c 83       	std	Y+4, r24	; 0x04
    4a0a:	9d 83       	std	Y+5, r25	; 0x05
    4a0c:	1c c0       	rjmp	.+56     	; 0x4a46 <prvCopyDataToQueue+0x8c>
    4a0e:	48 2f       	mov	r20, r24
    4a10:	50 e0       	ldi	r21, 0x00	; 0
    4a12:	8e 81       	ldd	r24, Y+6	; 0x06
    4a14:	9f 81       	ldd	r25, Y+7	; 0x07
    4a16:	0e 94 43 39 	call	0x7286	; 0x7286 <memcpy>
    4a1a:	88 a1       	ldd	r24, Y+32	; 0x20
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	91 95       	neg	r25
    4a20:	81 95       	neg	r24
    4a22:	91 09       	sbc	r25, r1
    4a24:	2e 81       	ldd	r18, Y+6	; 0x06
    4a26:	3f 81       	ldd	r19, Y+7	; 0x07
    4a28:	28 0f       	add	r18, r24
    4a2a:	39 1f       	adc	r19, r25
    4a2c:	2e 83       	std	Y+6, r18	; 0x06
    4a2e:	3f 83       	std	Y+7, r19	; 0x07
    4a30:	48 81       	ld	r20, Y
    4a32:	59 81       	ldd	r21, Y+1	; 0x01
    4a34:	24 17       	cp	r18, r20
    4a36:	35 07       	cpc	r19, r21
    4a38:	30 f4       	brcc	.+12     	; 0x4a46 <prvCopyDataToQueue+0x8c>
    4a3a:	2a 81       	ldd	r18, Y+2	; 0x02
    4a3c:	3b 81       	ldd	r19, Y+3	; 0x03
    4a3e:	82 0f       	add	r24, r18
    4a40:	93 1f       	adc	r25, r19
    4a42:	8e 83       	std	Y+6, r24	; 0x06
    4a44:	9f 83       	std	Y+7, r25	; 0x07
    4a46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4a48:	8f 5f       	subi	r24, 0xFF	; 255
    4a4a:	8e 8f       	std	Y+30, r24	; 0x1e
    4a4c:	df 91       	pop	r29
    4a4e:	cf 91       	pop	r28
    4a50:	08 95       	ret

00004a52 <prvCopyDataFromQueue>:
    4a52:	fc 01       	movw	r30, r24
    4a54:	80 81       	ld	r24, Z
    4a56:	91 81       	ldd	r25, Z+1	; 0x01
    4a58:	00 97       	sbiw	r24, 0x00	; 0
    4a5a:	a1 f0       	breq	.+40     	; 0x4a84 <prvCopyDataFromQueue+0x32>
    4a5c:	40 a1       	ldd	r20, Z+32	; 0x20
    4a5e:	50 e0       	ldi	r21, 0x00	; 0
    4a60:	26 81       	ldd	r18, Z+6	; 0x06
    4a62:	37 81       	ldd	r19, Z+7	; 0x07
    4a64:	24 0f       	add	r18, r20
    4a66:	35 1f       	adc	r19, r21
    4a68:	26 83       	std	Z+6, r18	; 0x06
    4a6a:	37 83       	std	Z+7, r19	; 0x07
    4a6c:	a2 81       	ldd	r26, Z+2	; 0x02
    4a6e:	b3 81       	ldd	r27, Z+3	; 0x03
    4a70:	2a 17       	cp	r18, r26
    4a72:	3b 07       	cpc	r19, r27
    4a74:	10 f0       	brcs	.+4      	; 0x4a7a <prvCopyDataFromQueue+0x28>
    4a76:	86 83       	std	Z+6, r24	; 0x06
    4a78:	97 83       	std	Z+7, r25	; 0x07
    4a7a:	cb 01       	movw	r24, r22
    4a7c:	66 81       	ldd	r22, Z+6	; 0x06
    4a7e:	77 81       	ldd	r23, Z+7	; 0x07
    4a80:	0e 94 43 39 	call	0x7286	; 0x7286 <memcpy>
    4a84:	08 95       	ret

00004a86 <prvUnlockQueue>:
    4a86:	0f 93       	push	r16
    4a88:	1f 93       	push	r17
    4a8a:	cf 93       	push	r28
    4a8c:	df 93       	push	r29
    4a8e:	ec 01       	movw	r28, r24
    4a90:	0f b6       	in	r0, 0x3f	; 63
    4a92:	f8 94       	cli
    4a94:	0f 92       	push	r0
    4a96:	8a a1       	ldd	r24, Y+34	; 0x22
    4a98:	18 16       	cp	r1, r24
    4a9a:	b4 f4       	brge	.+44     	; 0x4ac8 <prvUnlockQueue+0x42>
    4a9c:	8b 89       	ldd	r24, Y+19	; 0x13
    4a9e:	81 11       	cpse	r24, r1
    4aa0:	05 c0       	rjmp	.+10     	; 0x4aac <prvUnlockQueue+0x26>
    4aa2:	12 c0       	rjmp	.+36     	; 0x4ac8 <prvUnlockQueue+0x42>
    4aa4:	8b 89       	ldd	r24, Y+19	; 0x13
    4aa6:	81 11       	cpse	r24, r1
    4aa8:	04 c0       	rjmp	.+8      	; 0x4ab2 <prvUnlockQueue+0x2c>
    4aaa:	0e c0       	rjmp	.+28     	; 0x4ac8 <prvUnlockQueue+0x42>
    4aac:	8e 01       	movw	r16, r28
    4aae:	0d 5e       	subi	r16, 0xED	; 237
    4ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ab2:	c8 01       	movw	r24, r16
    4ab4:	0e 94 14 2c 	call	0x5828	; 0x5828 <xTaskRemoveFromEventList>
    4ab8:	81 11       	cpse	r24, r1
    4aba:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <vTaskMissedYield>
    4abe:	8a a1       	ldd	r24, Y+34	; 0x22
    4ac0:	81 50       	subi	r24, 0x01	; 1
    4ac2:	8a a3       	std	Y+34, r24	; 0x22
    4ac4:	18 16       	cp	r1, r24
    4ac6:	74 f3       	brlt	.-36     	; 0x4aa4 <prvUnlockQueue+0x1e>
    4ac8:	8f ef       	ldi	r24, 0xFF	; 255
    4aca:	8a a3       	std	Y+34, r24	; 0x22
    4acc:	0f 90       	pop	r0
    4ace:	0f be       	out	0x3f, r0	; 63
    4ad0:	0f b6       	in	r0, 0x3f	; 63
    4ad2:	f8 94       	cli
    4ad4:	0f 92       	push	r0
    4ad6:	89 a1       	ldd	r24, Y+33	; 0x21
    4ad8:	18 16       	cp	r1, r24
    4ada:	b4 f4       	brge	.+44     	; 0x4b08 <prvUnlockQueue+0x82>
    4adc:	88 85       	ldd	r24, Y+8	; 0x08
    4ade:	81 11       	cpse	r24, r1
    4ae0:	05 c0       	rjmp	.+10     	; 0x4aec <prvUnlockQueue+0x66>
    4ae2:	12 c0       	rjmp	.+36     	; 0x4b08 <prvUnlockQueue+0x82>
    4ae4:	88 85       	ldd	r24, Y+8	; 0x08
    4ae6:	81 11       	cpse	r24, r1
    4ae8:	04 c0       	rjmp	.+8      	; 0x4af2 <prvUnlockQueue+0x6c>
    4aea:	0e c0       	rjmp	.+28     	; 0x4b08 <prvUnlockQueue+0x82>
    4aec:	8e 01       	movw	r16, r28
    4aee:	08 5f       	subi	r16, 0xF8	; 248
    4af0:	1f 4f       	sbci	r17, 0xFF	; 255
    4af2:	c8 01       	movw	r24, r16
    4af4:	0e 94 14 2c 	call	0x5828	; 0x5828 <xTaskRemoveFromEventList>
    4af8:	81 11       	cpse	r24, r1
    4afa:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <vTaskMissedYield>
    4afe:	89 a1       	ldd	r24, Y+33	; 0x21
    4b00:	81 50       	subi	r24, 0x01	; 1
    4b02:	89 a3       	std	Y+33, r24	; 0x21
    4b04:	18 16       	cp	r1, r24
    4b06:	74 f3       	brlt	.-36     	; 0x4ae4 <prvUnlockQueue+0x5e>
    4b08:	8f ef       	ldi	r24, 0xFF	; 255
    4b0a:	89 a3       	std	Y+33, r24	; 0x21
    4b0c:	0f 90       	pop	r0
    4b0e:	0f be       	out	0x3f, r0	; 63
    4b10:	df 91       	pop	r29
    4b12:	cf 91       	pop	r28
    4b14:	1f 91       	pop	r17
    4b16:	0f 91       	pop	r16
    4b18:	08 95       	ret

00004b1a <xQueueGenericReset>:
    4b1a:	1f 93       	push	r17
    4b1c:	cf 93       	push	r28
    4b1e:	df 93       	push	r29
    4b20:	61 30       	cpi	r22, 0x01	; 1
    4b22:	59 f0       	breq	.+22     	; 0x4b3a <xQueueGenericReset+0x20>
    4b24:	fc 01       	movw	r30, r24
    4b26:	23 89       	ldd	r18, Z+19	; 0x13
    4b28:	30 85       	ldd	r19, Z+8	; 0x08
    4b2a:	31 11       	cpse	r19, r1
    4b2c:	2c c0       	rjmp	.+88     	; 0x4b86 <xQueueGenericReset+0x6c>
    4b2e:	11 e0       	ldi	r17, 0x01	; 1
    4b30:	21 11       	cpse	r18, r1
    4b32:	10 e0       	ldi	r17, 0x00	; 0
    4b34:	21 11       	cpse	r18, r1
    4b36:	28 c0       	rjmp	.+80     	; 0x4b88 <xQueueGenericReset+0x6e>
    4b38:	01 c0       	rjmp	.+2      	; 0x4b3c <xQueueGenericReset+0x22>
    4b3a:	11 e0       	ldi	r17, 0x01	; 1
    4b3c:	ec 01       	movw	r28, r24
    4b3e:	48 81       	ld	r20, Y
    4b40:	59 81       	ldd	r21, Y+1	; 0x01
    4b42:	28 a1       	ldd	r18, Y+32	; 0x20
    4b44:	30 e0       	ldi	r19, 0x00	; 0
    4b46:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4b48:	62 9f       	mul	r22, r18
    4b4a:	c0 01       	movw	r24, r0
    4b4c:	63 9f       	mul	r22, r19
    4b4e:	90 0d       	add	r25, r0
    4b50:	11 24       	eor	r1, r1
    4b52:	ba 01       	movw	r22, r20
    4b54:	68 0f       	add	r22, r24
    4b56:	79 1f       	adc	r23, r25
    4b58:	6a 83       	std	Y+2, r22	; 0x02
    4b5a:	7b 83       	std	Y+3, r23	; 0x03
    4b5c:	1e 8e       	std	Y+30, r1	; 0x1e
    4b5e:	4c 83       	std	Y+4, r20	; 0x04
    4b60:	5d 83       	std	Y+5, r21	; 0x05
    4b62:	82 1b       	sub	r24, r18
    4b64:	93 0b       	sbc	r25, r19
    4b66:	84 0f       	add	r24, r20
    4b68:	95 1f       	adc	r25, r21
    4b6a:	8e 83       	std	Y+6, r24	; 0x06
    4b6c:	9f 83       	std	Y+7, r25	; 0x07
    4b6e:	8f ef       	ldi	r24, 0xFF	; 255
    4b70:	89 a3       	std	Y+33, r24	; 0x21
    4b72:	8a a3       	std	Y+34, r24	; 0x22
    4b74:	ce 01       	movw	r24, r28
    4b76:	08 96       	adiw	r24, 0x08	; 8
    4b78:	0e 94 b3 22 	call	0x4566	; 0x4566 <vListInitialise>
    4b7c:	ce 01       	movw	r24, r28
    4b7e:	43 96       	adiw	r24, 0x13	; 19
    4b80:	0e 94 b3 22 	call	0x4566	; 0x4566 <vListInitialise>
    4b84:	01 c0       	rjmp	.+2      	; 0x4b88 <xQueueGenericReset+0x6e>
    4b86:	10 e0       	ldi	r17, 0x00	; 0
    4b88:	81 2f       	mov	r24, r17
    4b8a:	df 91       	pop	r29
    4b8c:	cf 91       	pop	r28
    4b8e:	1f 91       	pop	r17
    4b90:	08 95       	ret

00004b92 <xQueueGenericCreate>:
    4b92:	0f 93       	push	r16
    4b94:	1f 93       	push	r17
    4b96:	cf 93       	push	r28
    4b98:	df 93       	push	r29
    4b9a:	88 23       	and	r24, r24
    4b9c:	01 f1       	breq	.+64     	; 0x4bde <xQueueGenericCreate+0x4c>
    4b9e:	06 2f       	mov	r16, r22
    4ba0:	18 2f       	mov	r17, r24
    4ba2:	83 e2       	ldi	r24, 0x23	; 35
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	0e 94 e6 21 	call	0x43cc	; 0x43cc <pvPortMalloc>
    4baa:	ec 01       	movw	r28, r24
    4bac:	89 2b       	or	r24, r25
    4bae:	c9 f0       	breq	.+50     	; 0x4be2 <xQueueGenericCreate+0x50>
    4bb0:	10 9f       	mul	r17, r16
    4bb2:	c0 01       	movw	r24, r0
    4bb4:	11 24       	eor	r1, r1
    4bb6:	01 96       	adiw	r24, 0x01	; 1
    4bb8:	0e 94 e6 21 	call	0x43cc	; 0x43cc <pvPortMalloc>
    4bbc:	88 83       	st	Y, r24
    4bbe:	99 83       	std	Y+1, r25	; 0x01
    4bc0:	89 2b       	or	r24, r25
    4bc2:	39 f0       	breq	.+14     	; 0x4bd2 <xQueueGenericCreate+0x40>
    4bc4:	1f 8f       	std	Y+31, r17	; 0x1f
    4bc6:	08 a3       	std	Y+32, r16	; 0x20
    4bc8:	61 e0       	ldi	r22, 0x01	; 1
    4bca:	ce 01       	movw	r24, r28
    4bcc:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <xQueueGenericReset>
    4bd0:	08 c0       	rjmp	.+16     	; 0x4be2 <xQueueGenericCreate+0x50>
    4bd2:	ce 01       	movw	r24, r28
    4bd4:	0e 94 80 22 	call	0x4500	; 0x4500 <vPortFree>
    4bd8:	c0 e0       	ldi	r28, 0x00	; 0
    4bda:	d0 e0       	ldi	r29, 0x00	; 0
    4bdc:	02 c0       	rjmp	.+4      	; 0x4be2 <xQueueGenericCreate+0x50>
    4bde:	c0 e0       	ldi	r28, 0x00	; 0
    4be0:	d0 e0       	ldi	r29, 0x00	; 0
    4be2:	ce 01       	movw	r24, r28
    4be4:	df 91       	pop	r29
    4be6:	cf 91       	pop	r28
    4be8:	1f 91       	pop	r17
    4bea:	0f 91       	pop	r16
    4bec:	08 95       	ret

00004bee <xQueueGenericSend>:
    4bee:	af 92       	push	r10
    4bf0:	bf 92       	push	r11
    4bf2:	cf 92       	push	r12
    4bf4:	df 92       	push	r13
    4bf6:	ef 92       	push	r14
    4bf8:	ff 92       	push	r15
    4bfa:	0f 93       	push	r16
    4bfc:	1f 93       	push	r17
    4bfe:	cf 93       	push	r28
    4c00:	df 93       	push	r29
    4c02:	cd b7       	in	r28, 0x3d	; 61
    4c04:	de b7       	in	r29, 0x3e	; 62
    4c06:	29 97       	sbiw	r28, 0x09	; 9
    4c08:	cd bf       	out	0x3d, r28	; 61
    4c0a:	de bf       	out	0x3e, r29	; 62
    4c0c:	7c 01       	movw	r14, r24
    4c0e:	5b 01       	movw	r10, r22
    4c10:	2e 83       	std	Y+6, r18	; 0x06
    4c12:	3f 83       	std	Y+7, r19	; 0x07
    4c14:	48 87       	std	Y+8, r20	; 0x08
    4c16:	59 87       	std	Y+9, r21	; 0x09
    4c18:	10 e0       	ldi	r17, 0x00	; 0
    4c1a:	6c 01       	movw	r12, r24
    4c1c:	88 e0       	ldi	r24, 0x08	; 8
    4c1e:	c8 0e       	add	r12, r24
    4c20:	d1 1c       	adc	r13, r1
    4c22:	0f b6       	in	r0, 0x3f	; 63
    4c24:	f8 94       	cli
    4c26:	0f 92       	push	r0
    4c28:	f7 01       	movw	r30, r14
    4c2a:	96 8d       	ldd	r25, Z+30	; 0x1e
    4c2c:	87 8d       	ldd	r24, Z+31	; 0x1f
    4c2e:	98 17       	cp	r25, r24
    4c30:	a8 f4       	brcc	.+42     	; 0x4c5c <xQueueGenericSend+0x6e>
    4c32:	40 2f       	mov	r20, r16
    4c34:	b5 01       	movw	r22, r10
    4c36:	c7 01       	movw	r24, r14
    4c38:	0e 94 dd 24 	call	0x49ba	; 0x49ba <prvCopyDataToQueue>
    4c3c:	f7 01       	movw	r30, r14
    4c3e:	83 89       	ldd	r24, Z+19	; 0x13
    4c40:	88 23       	and	r24, r24
    4c42:	41 f0       	breq	.+16     	; 0x4c54 <xQueueGenericSend+0x66>
    4c44:	c7 01       	movw	r24, r14
    4c46:	43 96       	adiw	r24, 0x13	; 19
    4c48:	0e 94 14 2c 	call	0x5828	; 0x5828 <xTaskRemoveFromEventList>
    4c4c:	81 30       	cpi	r24, 0x01	; 1
    4c4e:	11 f4       	brne	.+4      	; 0x4c54 <xQueueGenericSend+0x66>
    4c50:	0e 94 16 24 	call	0x482c	; 0x482c <vPortYield>
    4c54:	0f 90       	pop	r0
    4c56:	0f be       	out	0x3f, r0	; 63
    4c58:	81 e0       	ldi	r24, 0x01	; 1
    4c5a:	56 c0       	rjmp	.+172    	; 0x4d08 <xQueueGenericSend+0x11a>
    4c5c:	8e 81       	ldd	r24, Y+6	; 0x06
    4c5e:	9f 81       	ldd	r25, Y+7	; 0x07
    4c60:	a8 85       	ldd	r26, Y+8	; 0x08
    4c62:	b9 85       	ldd	r27, Y+9	; 0x09
    4c64:	89 2b       	or	r24, r25
    4c66:	8a 2b       	or	r24, r26
    4c68:	8b 2b       	or	r24, r27
    4c6a:	21 f4       	brne	.+8      	; 0x4c74 <xQueueGenericSend+0x86>
    4c6c:	0f 90       	pop	r0
    4c6e:	0f be       	out	0x3f, r0	; 63
    4c70:	80 e0       	ldi	r24, 0x00	; 0
    4c72:	4a c0       	rjmp	.+148    	; 0x4d08 <xQueueGenericSend+0x11a>
    4c74:	11 11       	cpse	r17, r1
    4c76:	05 c0       	rjmp	.+10     	; 0x4c82 <xQueueGenericSend+0x94>
    4c78:	ce 01       	movw	r24, r28
    4c7a:	01 96       	adiw	r24, 0x01	; 1
    4c7c:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <vTaskSetTimeOutState>
    4c80:	11 e0       	ldi	r17, 0x01	; 1
    4c82:	0f 90       	pop	r0
    4c84:	0f be       	out	0x3f, r0	; 63
    4c86:	0e 94 53 29 	call	0x52a6	; 0x52a6 <vTaskSuspendAll>
    4c8a:	0f b6       	in	r0, 0x3f	; 63
    4c8c:	f8 94       	cli
    4c8e:	0f 92       	push	r0
    4c90:	f7 01       	movw	r30, r14
    4c92:	81 a1       	ldd	r24, Z+33	; 0x21
    4c94:	8f 3f       	cpi	r24, 0xFF	; 255
    4c96:	09 f4       	brne	.+2      	; 0x4c9a <xQueueGenericSend+0xac>
    4c98:	11 a2       	std	Z+33, r1	; 0x21
    4c9a:	f7 01       	movw	r30, r14
    4c9c:	82 a1       	ldd	r24, Z+34	; 0x22
    4c9e:	8f 3f       	cpi	r24, 0xFF	; 255
    4ca0:	09 f4       	brne	.+2      	; 0x4ca4 <xQueueGenericSend+0xb6>
    4ca2:	12 a2       	std	Z+34, r1	; 0x22
    4ca4:	0f 90       	pop	r0
    4ca6:	0f be       	out	0x3f, r0	; 63
    4ca8:	be 01       	movw	r22, r28
    4caa:	6a 5f       	subi	r22, 0xFA	; 250
    4cac:	7f 4f       	sbci	r23, 0xFF	; 255
    4cae:	ce 01       	movw	r24, r28
    4cb0:	01 96       	adiw	r24, 0x01	; 1
    4cb2:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <xTaskCheckForTimeOut>
    4cb6:	81 11       	cpse	r24, r1
    4cb8:	21 c0       	rjmp	.+66     	; 0x4cfc <xQueueGenericSend+0x10e>
    4cba:	0f b6       	in	r0, 0x3f	; 63
    4cbc:	f8 94       	cli
    4cbe:	0f 92       	push	r0
    4cc0:	f7 01       	movw	r30, r14
    4cc2:	96 8d       	ldd	r25, Z+30	; 0x1e
    4cc4:	0f 90       	pop	r0
    4cc6:	0f be       	out	0x3f, r0	; 63
    4cc8:	87 8d       	ldd	r24, Z+31	; 0x1f
    4cca:	98 13       	cpse	r25, r24
    4ccc:	11 c0       	rjmp	.+34     	; 0x4cf0 <xQueueGenericSend+0x102>
    4cce:	4e 81       	ldd	r20, Y+6	; 0x06
    4cd0:	5f 81       	ldd	r21, Y+7	; 0x07
    4cd2:	68 85       	ldd	r22, Y+8	; 0x08
    4cd4:	79 85       	ldd	r23, Y+9	; 0x09
    4cd6:	c6 01       	movw	r24, r12
    4cd8:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <vTaskPlaceOnEventList>
    4cdc:	c7 01       	movw	r24, r14
    4cde:	0e 94 43 25 	call	0x4a86	; 0x4a86 <prvUnlockQueue>
    4ce2:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <xTaskResumeAll>
    4ce6:	81 11       	cpse	r24, r1
    4ce8:	9c cf       	rjmp	.-200    	; 0x4c22 <xQueueGenericSend+0x34>
    4cea:	0e 94 16 24 	call	0x482c	; 0x482c <vPortYield>
    4cee:	99 cf       	rjmp	.-206    	; 0x4c22 <xQueueGenericSend+0x34>
    4cf0:	c7 01       	movw	r24, r14
    4cf2:	0e 94 43 25 	call	0x4a86	; 0x4a86 <prvUnlockQueue>
    4cf6:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <xTaskResumeAll>
    4cfa:	93 cf       	rjmp	.-218    	; 0x4c22 <xQueueGenericSend+0x34>
    4cfc:	c7 01       	movw	r24, r14
    4cfe:	0e 94 43 25 	call	0x4a86	; 0x4a86 <prvUnlockQueue>
    4d02:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <xTaskResumeAll>
    4d06:	80 e0       	ldi	r24, 0x00	; 0
    4d08:	29 96       	adiw	r28, 0x09	; 9
    4d0a:	cd bf       	out	0x3d, r28	; 61
    4d0c:	de bf       	out	0x3e, r29	; 62
    4d0e:	df 91       	pop	r29
    4d10:	cf 91       	pop	r28
    4d12:	1f 91       	pop	r17
    4d14:	0f 91       	pop	r16
    4d16:	ff 90       	pop	r15
    4d18:	ef 90       	pop	r14
    4d1a:	df 90       	pop	r13
    4d1c:	cf 90       	pop	r12
    4d1e:	bf 90       	pop	r11
    4d20:	af 90       	pop	r10
    4d22:	08 95       	ret

00004d24 <xQueueGenericSendFromISR>:
    4d24:	0f 93       	push	r16
    4d26:	1f 93       	push	r17
    4d28:	cf 93       	push	r28
    4d2a:	df 93       	push	r29
    4d2c:	8a 01       	movw	r16, r20
    4d2e:	fc 01       	movw	r30, r24
    4d30:	56 8d       	ldd	r21, Z+30	; 0x1e
    4d32:	37 8d       	ldd	r19, Z+31	; 0x1f
    4d34:	53 17       	cp	r21, r19
    4d36:	c0 f4       	brcc	.+48     	; 0x4d68 <xQueueGenericSendFromISR+0x44>
    4d38:	42 2f       	mov	r20, r18
    4d3a:	ec 01       	movw	r28, r24
    4d3c:	0e 94 dd 24 	call	0x49ba	; 0x49ba <prvCopyDataToQueue>
    4d40:	8a a1       	ldd	r24, Y+34	; 0x22
    4d42:	8f 3f       	cpi	r24, 0xFF	; 255
    4d44:	69 f4       	brne	.+26     	; 0x4d60 <xQueueGenericSendFromISR+0x3c>
    4d46:	8b 89       	ldd	r24, Y+19	; 0x13
    4d48:	88 23       	and	r24, r24
    4d4a:	81 f0       	breq	.+32     	; 0x4d6c <xQueueGenericSendFromISR+0x48>
    4d4c:	ce 01       	movw	r24, r28
    4d4e:	43 96       	adiw	r24, 0x13	; 19
    4d50:	0e 94 14 2c 	call	0x5828	; 0x5828 <xTaskRemoveFromEventList>
    4d54:	88 23       	and	r24, r24
    4d56:	61 f0       	breq	.+24     	; 0x4d70 <xQueueGenericSendFromISR+0x4c>
    4d58:	81 e0       	ldi	r24, 0x01	; 1
    4d5a:	f8 01       	movw	r30, r16
    4d5c:	80 83       	st	Z, r24
    4d5e:	09 c0       	rjmp	.+18     	; 0x4d72 <xQueueGenericSendFromISR+0x4e>
    4d60:	8f 5f       	subi	r24, 0xFF	; 255
    4d62:	8a a3       	std	Y+34, r24	; 0x22
    4d64:	81 e0       	ldi	r24, 0x01	; 1
    4d66:	05 c0       	rjmp	.+10     	; 0x4d72 <xQueueGenericSendFromISR+0x4e>
    4d68:	80 e0       	ldi	r24, 0x00	; 0
    4d6a:	03 c0       	rjmp	.+6      	; 0x4d72 <xQueueGenericSendFromISR+0x4e>
    4d6c:	81 e0       	ldi	r24, 0x01	; 1
    4d6e:	01 c0       	rjmp	.+2      	; 0x4d72 <xQueueGenericSendFromISR+0x4e>
    4d70:	81 e0       	ldi	r24, 0x01	; 1
    4d72:	df 91       	pop	r29
    4d74:	cf 91       	pop	r28
    4d76:	1f 91       	pop	r17
    4d78:	0f 91       	pop	r16
    4d7a:	08 95       	ret

00004d7c <xQueueGenericReceive>:
    4d7c:	af 92       	push	r10
    4d7e:	bf 92       	push	r11
    4d80:	cf 92       	push	r12
    4d82:	df 92       	push	r13
    4d84:	ef 92       	push	r14
    4d86:	ff 92       	push	r15
    4d88:	0f 93       	push	r16
    4d8a:	1f 93       	push	r17
    4d8c:	cf 93       	push	r28
    4d8e:	df 93       	push	r29
    4d90:	cd b7       	in	r28, 0x3d	; 61
    4d92:	de b7       	in	r29, 0x3e	; 62
    4d94:	29 97       	sbiw	r28, 0x09	; 9
    4d96:	cd bf       	out	0x3d, r28	; 61
    4d98:	de bf       	out	0x3e, r29	; 62
    4d9a:	7c 01       	movw	r14, r24
    4d9c:	5b 01       	movw	r10, r22
    4d9e:	2e 83       	std	Y+6, r18	; 0x06
    4da0:	3f 83       	std	Y+7, r19	; 0x07
    4da2:	48 87       	std	Y+8, r20	; 0x08
    4da4:	59 87       	std	Y+9, r21	; 0x09
    4da6:	10 e0       	ldi	r17, 0x00	; 0
    4da8:	6c 01       	movw	r12, r24
    4daa:	83 e1       	ldi	r24, 0x13	; 19
    4dac:	c8 0e       	add	r12, r24
    4dae:	d1 1c       	adc	r13, r1
    4db0:	0f b6       	in	r0, 0x3f	; 63
    4db2:	f8 94       	cli
    4db4:	0f 92       	push	r0
    4db6:	f7 01       	movw	r30, r14
    4db8:	86 8d       	ldd	r24, Z+30	; 0x1e
    4dba:	88 23       	and	r24, r24
    4dbc:	99 f1       	breq	.+102    	; 0x4e24 <xQueueGenericReceive+0xa8>
    4dbe:	c6 80       	ldd	r12, Z+6	; 0x06
    4dc0:	d7 80       	ldd	r13, Z+7	; 0x07
    4dc2:	b5 01       	movw	r22, r10
    4dc4:	c7 01       	movw	r24, r14
    4dc6:	0e 94 29 25 	call	0x4a52	; 0x4a52 <prvCopyDataFromQueue>
    4dca:	01 11       	cpse	r16, r1
    4dcc:	1a c0       	rjmp	.+52     	; 0x4e02 <xQueueGenericReceive+0x86>
    4dce:	f7 01       	movw	r30, r14
    4dd0:	86 8d       	ldd	r24, Z+30	; 0x1e
    4dd2:	81 50       	subi	r24, 0x01	; 1
    4dd4:	86 8f       	std	Z+30, r24	; 0x1e
    4dd6:	80 81       	ld	r24, Z
    4dd8:	91 81       	ldd	r25, Z+1	; 0x01
    4dda:	89 2b       	or	r24, r25
    4ddc:	29 f4       	brne	.+10     	; 0x4de8 <xQueueGenericReceive+0x6c>
    4dde:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <xTaskGetCurrentTaskHandle>
    4de2:	f7 01       	movw	r30, r14
    4de4:	82 83       	std	Z+2, r24	; 0x02
    4de6:	93 83       	std	Z+3, r25	; 0x03
    4de8:	f7 01       	movw	r30, r14
    4dea:	80 85       	ldd	r24, Z+8	; 0x08
    4dec:	88 23       	and	r24, r24
    4dee:	b1 f0       	breq	.+44     	; 0x4e1c <xQueueGenericReceive+0xa0>
    4df0:	c7 01       	movw	r24, r14
    4df2:	08 96       	adiw	r24, 0x08	; 8
    4df4:	0e 94 14 2c 	call	0x5828	; 0x5828 <xTaskRemoveFromEventList>
    4df8:	81 30       	cpi	r24, 0x01	; 1
    4dfa:	81 f4       	brne	.+32     	; 0x4e1c <xQueueGenericReceive+0xa0>
    4dfc:	0e 94 16 24 	call	0x482c	; 0x482c <vPortYield>
    4e00:	0d c0       	rjmp	.+26     	; 0x4e1c <xQueueGenericReceive+0xa0>
    4e02:	f7 01       	movw	r30, r14
    4e04:	c6 82       	std	Z+6, r12	; 0x06
    4e06:	d7 82       	std	Z+7, r13	; 0x07
    4e08:	83 89       	ldd	r24, Z+19	; 0x13
    4e0a:	88 23       	and	r24, r24
    4e0c:	39 f0       	breq	.+14     	; 0x4e1c <xQueueGenericReceive+0xa0>
    4e0e:	c7 01       	movw	r24, r14
    4e10:	43 96       	adiw	r24, 0x13	; 19
    4e12:	0e 94 14 2c 	call	0x5828	; 0x5828 <xTaskRemoveFromEventList>
    4e16:	81 11       	cpse	r24, r1
    4e18:	0e 94 16 24 	call	0x482c	; 0x482c <vPortYield>
    4e1c:	0f 90       	pop	r0
    4e1e:	0f be       	out	0x3f, r0	; 63
    4e20:	81 e0       	ldi	r24, 0x01	; 1
    4e22:	62 c0       	rjmp	.+196    	; 0x4ee8 <xQueueGenericReceive+0x16c>
    4e24:	8e 81       	ldd	r24, Y+6	; 0x06
    4e26:	9f 81       	ldd	r25, Y+7	; 0x07
    4e28:	a8 85       	ldd	r26, Y+8	; 0x08
    4e2a:	b9 85       	ldd	r27, Y+9	; 0x09
    4e2c:	89 2b       	or	r24, r25
    4e2e:	8a 2b       	or	r24, r26
    4e30:	8b 2b       	or	r24, r27
    4e32:	21 f4       	brne	.+8      	; 0x4e3c <xQueueGenericReceive+0xc0>
    4e34:	0f 90       	pop	r0
    4e36:	0f be       	out	0x3f, r0	; 63
    4e38:	80 e0       	ldi	r24, 0x00	; 0
    4e3a:	56 c0       	rjmp	.+172    	; 0x4ee8 <xQueueGenericReceive+0x16c>
    4e3c:	11 11       	cpse	r17, r1
    4e3e:	05 c0       	rjmp	.+10     	; 0x4e4a <xQueueGenericReceive+0xce>
    4e40:	ce 01       	movw	r24, r28
    4e42:	01 96       	adiw	r24, 0x01	; 1
    4e44:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <vTaskSetTimeOutState>
    4e48:	11 e0       	ldi	r17, 0x01	; 1
    4e4a:	0f 90       	pop	r0
    4e4c:	0f be       	out	0x3f, r0	; 63
    4e4e:	0e 94 53 29 	call	0x52a6	; 0x52a6 <vTaskSuspendAll>
    4e52:	0f b6       	in	r0, 0x3f	; 63
    4e54:	f8 94       	cli
    4e56:	0f 92       	push	r0
    4e58:	f7 01       	movw	r30, r14
    4e5a:	81 a1       	ldd	r24, Z+33	; 0x21
    4e5c:	8f 3f       	cpi	r24, 0xFF	; 255
    4e5e:	09 f4       	brne	.+2      	; 0x4e62 <xQueueGenericReceive+0xe6>
    4e60:	11 a2       	std	Z+33, r1	; 0x21
    4e62:	f7 01       	movw	r30, r14
    4e64:	82 a1       	ldd	r24, Z+34	; 0x22
    4e66:	8f 3f       	cpi	r24, 0xFF	; 255
    4e68:	09 f4       	brne	.+2      	; 0x4e6c <xQueueGenericReceive+0xf0>
    4e6a:	12 a2       	std	Z+34, r1	; 0x22
    4e6c:	0f 90       	pop	r0
    4e6e:	0f be       	out	0x3f, r0	; 63
    4e70:	be 01       	movw	r22, r28
    4e72:	6a 5f       	subi	r22, 0xFA	; 250
    4e74:	7f 4f       	sbci	r23, 0xFF	; 255
    4e76:	ce 01       	movw	r24, r28
    4e78:	01 96       	adiw	r24, 0x01	; 1
    4e7a:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <xTaskCheckForTimeOut>
    4e7e:	81 11       	cpse	r24, r1
    4e80:	2d c0       	rjmp	.+90     	; 0x4edc <xQueueGenericReceive+0x160>
    4e82:	0f b6       	in	r0, 0x3f	; 63
    4e84:	f8 94       	cli
    4e86:	0f 92       	push	r0
    4e88:	f7 01       	movw	r30, r14
    4e8a:	86 8d       	ldd	r24, Z+30	; 0x1e
    4e8c:	0f 90       	pop	r0
    4e8e:	0f be       	out	0x3f, r0	; 63
    4e90:	81 11       	cpse	r24, r1
    4e92:	1e c0       	rjmp	.+60     	; 0x4ed0 <xQueueGenericReceive+0x154>
    4e94:	80 81       	ld	r24, Z
    4e96:	91 81       	ldd	r25, Z+1	; 0x01
    4e98:	89 2b       	or	r24, r25
    4e9a:	49 f4       	brne	.+18     	; 0x4eae <xQueueGenericReceive+0x132>
    4e9c:	0f b6       	in	r0, 0x3f	; 63
    4e9e:	f8 94       	cli
    4ea0:	0f 92       	push	r0
    4ea2:	82 81       	ldd	r24, Z+2	; 0x02
    4ea4:	93 81       	ldd	r25, Z+3	; 0x03
    4ea6:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <vTaskPriorityInherit>
    4eaa:	0f 90       	pop	r0
    4eac:	0f be       	out	0x3f, r0	; 63
    4eae:	4e 81       	ldd	r20, Y+6	; 0x06
    4eb0:	5f 81       	ldd	r21, Y+7	; 0x07
    4eb2:	68 85       	ldd	r22, Y+8	; 0x08
    4eb4:	79 85       	ldd	r23, Y+9	; 0x09
    4eb6:	c6 01       	movw	r24, r12
    4eb8:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <vTaskPlaceOnEventList>
    4ebc:	c7 01       	movw	r24, r14
    4ebe:	0e 94 43 25 	call	0x4a86	; 0x4a86 <prvUnlockQueue>
    4ec2:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <xTaskResumeAll>
    4ec6:	81 11       	cpse	r24, r1
    4ec8:	73 cf       	rjmp	.-282    	; 0x4db0 <xQueueGenericReceive+0x34>
    4eca:	0e 94 16 24 	call	0x482c	; 0x482c <vPortYield>
    4ece:	70 cf       	rjmp	.-288    	; 0x4db0 <xQueueGenericReceive+0x34>
    4ed0:	c7 01       	movw	r24, r14
    4ed2:	0e 94 43 25 	call	0x4a86	; 0x4a86 <prvUnlockQueue>
    4ed6:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <xTaskResumeAll>
    4eda:	6a cf       	rjmp	.-300    	; 0x4db0 <xQueueGenericReceive+0x34>
    4edc:	c7 01       	movw	r24, r14
    4ede:	0e 94 43 25 	call	0x4a86	; 0x4a86 <prvUnlockQueue>
    4ee2:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <xTaskResumeAll>
    4ee6:	80 e0       	ldi	r24, 0x00	; 0
    4ee8:	29 96       	adiw	r28, 0x09	; 9
    4eea:	cd bf       	out	0x3d, r28	; 61
    4eec:	de bf       	out	0x3e, r29	; 62
    4eee:	df 91       	pop	r29
    4ef0:	cf 91       	pop	r28
    4ef2:	1f 91       	pop	r17
    4ef4:	0f 91       	pop	r16
    4ef6:	ff 90       	pop	r15
    4ef8:	ef 90       	pop	r14
    4efa:	df 90       	pop	r13
    4efc:	cf 90       	pop	r12
    4efe:	bf 90       	pop	r11
    4f00:	af 90       	pop	r10
    4f02:	08 95       	ret

00004f04 <xQueueReceiveFromISR>:
    4f04:	0f 93       	push	r16
    4f06:	1f 93       	push	r17
    4f08:	cf 93       	push	r28
    4f0a:	df 93       	push	r29
    4f0c:	fc 01       	movw	r30, r24
    4f0e:	26 8d       	ldd	r18, Z+30	; 0x1e
    4f10:	22 23       	and	r18, r18
    4f12:	d9 f0       	breq	.+54     	; 0x4f4a <xQueueReceiveFromISR+0x46>
    4f14:	8a 01       	movw	r16, r20
    4f16:	ec 01       	movw	r28, r24
    4f18:	0e 94 29 25 	call	0x4a52	; 0x4a52 <prvCopyDataFromQueue>
    4f1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4f1e:	81 50       	subi	r24, 0x01	; 1
    4f20:	8e 8f       	std	Y+30, r24	; 0x1e
    4f22:	89 a1       	ldd	r24, Y+33	; 0x21
    4f24:	8f 3f       	cpi	r24, 0xFF	; 255
    4f26:	69 f4       	brne	.+26     	; 0x4f42 <xQueueReceiveFromISR+0x3e>
    4f28:	88 85       	ldd	r24, Y+8	; 0x08
    4f2a:	88 23       	and	r24, r24
    4f2c:	81 f0       	breq	.+32     	; 0x4f4e <xQueueReceiveFromISR+0x4a>
    4f2e:	ce 01       	movw	r24, r28
    4f30:	08 96       	adiw	r24, 0x08	; 8
    4f32:	0e 94 14 2c 	call	0x5828	; 0x5828 <xTaskRemoveFromEventList>
    4f36:	88 23       	and	r24, r24
    4f38:	61 f0       	breq	.+24     	; 0x4f52 <xQueueReceiveFromISR+0x4e>
    4f3a:	81 e0       	ldi	r24, 0x01	; 1
    4f3c:	f8 01       	movw	r30, r16
    4f3e:	80 83       	st	Z, r24
    4f40:	09 c0       	rjmp	.+18     	; 0x4f54 <xQueueReceiveFromISR+0x50>
    4f42:	8f 5f       	subi	r24, 0xFF	; 255
    4f44:	89 a3       	std	Y+33, r24	; 0x21
    4f46:	81 e0       	ldi	r24, 0x01	; 1
    4f48:	05 c0       	rjmp	.+10     	; 0x4f54 <xQueueReceiveFromISR+0x50>
    4f4a:	80 e0       	ldi	r24, 0x00	; 0
    4f4c:	03 c0       	rjmp	.+6      	; 0x4f54 <xQueueReceiveFromISR+0x50>
    4f4e:	81 e0       	ldi	r24, 0x01	; 1
    4f50:	01 c0       	rjmp	.+2      	; 0x4f54 <xQueueReceiveFromISR+0x50>
    4f52:	81 e0       	ldi	r24, 0x01	; 1
    4f54:	df 91       	pop	r29
    4f56:	cf 91       	pop	r28
    4f58:	1f 91       	pop	r17
    4f5a:	0f 91       	pop	r16
    4f5c:	08 95       	ret

00004f5e <uxQueueMessagesWaiting>:
    4f5e:	0f b6       	in	r0, 0x3f	; 63
    4f60:	f8 94       	cli
    4f62:	0f 92       	push	r0
    4f64:	fc 01       	movw	r30, r24
    4f66:	86 8d       	ldd	r24, Z+30	; 0x1e
    4f68:	0f 90       	pop	r0
    4f6a:	0f be       	out	0x3f, r0	; 63
    4f6c:	08 95       	ret

00004f6e <uxQueueMessagesWaitingFromISR>:
    4f6e:	fc 01       	movw	r30, r24
    4f70:	86 8d       	ldd	r24, Z+30	; 0x1e
    4f72:	08 95       	ret

00004f74 <prvIdleTask>:
    4f74:	cf e9       	ldi	r28, 0x9F	; 159
    4f76:	d1 e4       	ldi	r29, 0x41	; 65
    4f78:	88 81       	ld	r24, Y
    4f7a:	82 30       	cpi	r24, 0x02	; 2
    4f7c:	e8 f3       	brcs	.-6      	; 0x4f78 <prvIdleTask+0x4>
    4f7e:	0e 94 16 24 	call	0x482c	; 0x482c <vPortYield>
    4f82:	fa cf       	rjmp	.-12     	; 0x4f78 <prvIdleTask+0x4>

00004f84 <prvAddCurrentTaskToDelayedList>:
    4f84:	cf 92       	push	r12
    4f86:	df 92       	push	r13
    4f88:	ef 92       	push	r14
    4f8a:	ff 92       	push	r15
    4f8c:	6b 01       	movw	r12, r22
    4f8e:	7c 01       	movw	r14, r24
    4f90:	e0 91 cb 41 	lds	r30, 0x41CB	; 0x8041cb <pxCurrentTCB>
    4f94:	f0 91 cc 41 	lds	r31, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    4f98:	62 83       	std	Z+2, r22	; 0x02
    4f9a:	73 83       	std	Z+3, r23	; 0x03
    4f9c:	84 83       	std	Z+4, r24	; 0x04
    4f9e:	95 83       	std	Z+5, r25	; 0x05
    4fa0:	80 91 73 41 	lds	r24, 0x4173	; 0x804173 <xTickCount>
    4fa4:	90 91 74 41 	lds	r25, 0x4174	; 0x804174 <xTickCount+0x1>
    4fa8:	a0 91 75 41 	lds	r26, 0x4175	; 0x804175 <xTickCount+0x2>
    4fac:	b0 91 76 41 	lds	r27, 0x4176	; 0x804176 <xTickCount+0x3>
    4fb0:	c8 16       	cp	r12, r24
    4fb2:	d9 06       	cpc	r13, r25
    4fb4:	ea 06       	cpc	r14, r26
    4fb6:	fb 06       	cpc	r15, r27
    4fb8:	68 f4       	brcc	.+26     	; 0x4fd4 <prvAddCurrentTaskToDelayedList+0x50>
    4fba:	60 91 cb 41 	lds	r22, 0x41CB	; 0x8041cb <pxCurrentTCB>
    4fbe:	70 91 cc 41 	lds	r23, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    4fc2:	80 91 85 41 	lds	r24, 0x4185	; 0x804185 <pxOverflowDelayedTaskList>
    4fc6:	90 91 86 41 	lds	r25, 0x4186	; 0x804186 <pxOverflowDelayedTaskList+0x1>
    4fca:	6e 5f       	subi	r22, 0xFE	; 254
    4fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    4fce:	0e 94 ef 22 	call	0x45de	; 0x45de <vListInsert>
    4fd2:	21 c0       	rjmp	.+66     	; 0x5016 <prvAddCurrentTaskToDelayedList+0x92>
    4fd4:	60 91 cb 41 	lds	r22, 0x41CB	; 0x8041cb <pxCurrentTCB>
    4fd8:	70 91 cc 41 	lds	r23, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    4fdc:	80 91 87 41 	lds	r24, 0x4187	; 0x804187 <pxDelayedTaskList>
    4fe0:	90 91 88 41 	lds	r25, 0x4188	; 0x804188 <pxDelayedTaskList+0x1>
    4fe4:	6e 5f       	subi	r22, 0xFE	; 254
    4fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    4fe8:	0e 94 ef 22 	call	0x45de	; 0x45de <vListInsert>
    4fec:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    4ff0:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    4ff4:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    4ff8:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    4ffc:	c8 16       	cp	r12, r24
    4ffe:	d9 06       	cpc	r13, r25
    5000:	ea 06       	cpc	r14, r26
    5002:	fb 06       	cpc	r15, r27
    5004:	40 f4       	brcc	.+16     	; 0x5016 <prvAddCurrentTaskToDelayedList+0x92>
    5006:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    500a:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    500e:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    5012:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    5016:	ff 90       	pop	r15
    5018:	ef 90       	pop	r14
    501a:	df 90       	pop	r13
    501c:	cf 90       	pop	r12
    501e:	08 95       	ret

00005020 <xTaskGenericCreate>:
    5020:	4f 92       	push	r4
    5022:	5f 92       	push	r5
    5024:	6f 92       	push	r6
    5026:	7f 92       	push	r7
    5028:	8f 92       	push	r8
    502a:	9f 92       	push	r9
    502c:	af 92       	push	r10
    502e:	bf 92       	push	r11
    5030:	cf 92       	push	r12
    5032:	df 92       	push	r13
    5034:	ef 92       	push	r14
    5036:	ff 92       	push	r15
    5038:	0f 93       	push	r16
    503a:	1f 93       	push	r17
    503c:	cf 93       	push	r28
    503e:	df 93       	push	r29
    5040:	5c 01       	movw	r10, r24
    5042:	4b 01       	movw	r8, r22
    5044:	3a 01       	movw	r6, r20
    5046:	29 01       	movw	r4, r18
    5048:	88 e2       	ldi	r24, 0x28	; 40
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	0e 94 e6 21 	call	0x43cc	; 0x43cc <pvPortMalloc>
    5050:	ec 01       	movw	r28, r24
    5052:	89 2b       	or	r24, r25
    5054:	09 f4       	brne	.+2      	; 0x5058 <xTaskGenericCreate+0x38>
    5056:	d4 c0       	rjmp	.+424    	; 0x5200 <xTaskGenericCreate+0x1e0>
    5058:	c1 14       	cp	r12, r1
    505a:	d1 04       	cpc	r13, r1
    505c:	09 f0       	breq	.+2      	; 0x5060 <xTaskGenericCreate+0x40>
    505e:	cc c0       	rjmp	.+408    	; 0x51f8 <xTaskGenericCreate+0x1d8>
    5060:	c3 01       	movw	r24, r6
    5062:	0e 94 e6 21 	call	0x43cc	; 0x43cc <pvPortMalloc>
    5066:	8b 8f       	std	Y+27, r24	; 0x1b
    5068:	9c 8f       	std	Y+28, r25	; 0x1c
    506a:	00 97       	sbiw	r24, 0x00	; 0
    506c:	21 f4       	brne	.+8      	; 0x5076 <xTaskGenericCreate+0x56>
    506e:	ce 01       	movw	r24, r28
    5070:	0e 94 80 22 	call	0x4500	; 0x4500 <vPortFree>
    5074:	c5 c0       	rjmp	.+394    	; 0x5200 <xTaskGenericCreate+0x1e0>
    5076:	a3 01       	movw	r20, r6
    5078:	61 e1       	ldi	r22, 0x11	; 17
    507a:	70 e0       	ldi	r23, 0x00	; 0
    507c:	0e 94 4c 39 	call	0x7298	; 0x7298 <memset>
    5080:	93 01       	movw	r18, r6
    5082:	21 50       	subi	r18, 0x01	; 1
    5084:	31 09       	sbc	r19, r1
    5086:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5088:	9c 8d       	ldd	r25, Y+28	; 0x1c
    508a:	3c 01       	movw	r6, r24
    508c:	62 0e       	add	r6, r18
    508e:	73 1e       	adc	r7, r19
    5090:	4a e0       	ldi	r20, 0x0A	; 10
    5092:	50 e0       	ldi	r21, 0x00	; 0
    5094:	b4 01       	movw	r22, r8
    5096:	ce 01       	movw	r24, r28
    5098:	4d 96       	adiw	r24, 0x1d	; 29
    509a:	0e 94 53 39 	call	0x72a6	; 0x72a6 <strncpy>
    509e:	1e a2       	std	Y+38, r1	; 0x26
    50a0:	10 2f       	mov	r17, r16
    50a2:	04 30       	cpi	r16, 0x04	; 4
    50a4:	08 f0       	brcs	.+2      	; 0x50a8 <xTaskGenericCreate+0x88>
    50a6:	13 e0       	ldi	r17, 0x03	; 3
    50a8:	1a 8f       	std	Y+26, r17	; 0x1a
    50aa:	1f a3       	std	Y+39, r17	; 0x27
    50ac:	6e 01       	movw	r12, r28
    50ae:	22 e0       	ldi	r18, 0x02	; 2
    50b0:	c2 0e       	add	r12, r18
    50b2:	d1 1c       	adc	r13, r1
    50b4:	c6 01       	movw	r24, r12
    50b6:	0e 94 c4 22 	call	0x4588	; 0x4588 <vListInitialiseItem>
    50ba:	ce 01       	movw	r24, r28
    50bc:	0e 96       	adiw	r24, 0x0e	; 14
    50be:	0e 94 c4 22 	call	0x4588	; 0x4588 <vListInitialiseItem>
    50c2:	ca 87       	std	Y+10, r28	; 0x0a
    50c4:	db 87       	std	Y+11, r29	; 0x0b
    50c6:	84 e0       	ldi	r24, 0x04	; 4
    50c8:	90 e0       	ldi	r25, 0x00	; 0
    50ca:	a0 e0       	ldi	r26, 0x00	; 0
    50cc:	b0 e0       	ldi	r27, 0x00	; 0
    50ce:	81 1b       	sub	r24, r17
    50d0:	91 09       	sbc	r25, r1
    50d2:	a1 09       	sbc	r26, r1
    50d4:	b1 09       	sbc	r27, r1
    50d6:	8e 87       	std	Y+14, r24	; 0x0e
    50d8:	9f 87       	std	Y+15, r25	; 0x0f
    50da:	a8 8b       	std	Y+16, r26	; 0x10
    50dc:	b9 8b       	std	Y+17, r27	; 0x11
    50de:	ce 8b       	std	Y+22, r28	; 0x16
    50e0:	df 8b       	std	Y+23, r29	; 0x17
    50e2:	a2 01       	movw	r20, r4
    50e4:	b5 01       	movw	r22, r10
    50e6:	c3 01       	movw	r24, r6
    50e8:	0e 94 60 23 	call	0x46c0	; 0x46c0 <pxPortInitialiseStack>
    50ec:	88 83       	st	Y, r24
    50ee:	99 83       	std	Y+1, r25	; 0x01
    50f0:	e1 14       	cp	r14, r1
    50f2:	f1 04       	cpc	r15, r1
    50f4:	19 f0       	breq	.+6      	; 0x50fc <xTaskGenericCreate+0xdc>
    50f6:	f7 01       	movw	r30, r14
    50f8:	c0 83       	st	Z, r28
    50fa:	d1 83       	std	Z+1, r29	; 0x01
    50fc:	0f b6       	in	r0, 0x3f	; 63
    50fe:	f8 94       	cli
    5100:	0f 92       	push	r0
    5102:	80 91 77 41 	lds	r24, 0x4177	; 0x804177 <uxCurrentNumberOfTasks>
    5106:	8f 5f       	subi	r24, 0xFF	; 255
    5108:	80 93 77 41 	sts	0x4177, r24	; 0x804177 <uxCurrentNumberOfTasks>
    510c:	80 91 cb 41 	lds	r24, 0x41CB	; 0x8041cb <pxCurrentTCB>
    5110:	90 91 cc 41 	lds	r25, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    5114:	89 2b       	or	r24, r25
    5116:	89 f5       	brne	.+98     	; 0x517a <xTaskGenericCreate+0x15a>
    5118:	c0 93 cb 41 	sts	0x41CB, r28	; 0x8041cb <pxCurrentTCB>
    511c:	d0 93 cc 41 	sts	0x41CC, r29	; 0x8041cc <pxCurrentTCB+0x1>
    5120:	80 91 77 41 	lds	r24, 0x4177	; 0x804177 <uxCurrentNumberOfTasks>
    5124:	81 30       	cpi	r24, 0x01	; 1
    5126:	c1 f5       	brne	.+112    	; 0x5198 <xTaskGenericCreate+0x178>
    5128:	8f e9       	ldi	r24, 0x9F	; 159
    512a:	91 e4       	ldi	r25, 0x41	; 65
    512c:	0e 94 b3 22 	call	0x4566	; 0x4566 <vListInitialise>
    5130:	8a ea       	ldi	r24, 0xAA	; 170
    5132:	91 e4       	ldi	r25, 0x41	; 65
    5134:	0e 94 b3 22 	call	0x4566	; 0x4566 <vListInitialise>
    5138:	85 eb       	ldi	r24, 0xB5	; 181
    513a:	91 e4       	ldi	r25, 0x41	; 65
    513c:	0e 94 b3 22 	call	0x4566	; 0x4566 <vListInitialise>
    5140:	80 ec       	ldi	r24, 0xC0	; 192
    5142:	91 e4       	ldi	r25, 0x41	; 65
    5144:	0e 94 b3 22 	call	0x4566	; 0x4566 <vListInitialise>
    5148:	84 e9       	ldi	r24, 0x94	; 148
    514a:	91 e4       	ldi	r25, 0x41	; 65
    514c:	0e 94 b3 22 	call	0x4566	; 0x4566 <vListInitialise>
    5150:	89 e8       	ldi	r24, 0x89	; 137
    5152:	91 e4       	ldi	r25, 0x41	; 65
    5154:	0e 94 b3 22 	call	0x4566	; 0x4566 <vListInitialise>
    5158:	8a e7       	ldi	r24, 0x7A	; 122
    515a:	91 e4       	ldi	r25, 0x41	; 65
    515c:	0e 94 b3 22 	call	0x4566	; 0x4566 <vListInitialise>
    5160:	84 e9       	ldi	r24, 0x94	; 148
    5162:	91 e4       	ldi	r25, 0x41	; 65
    5164:	80 93 87 41 	sts	0x4187, r24	; 0x804187 <pxDelayedTaskList>
    5168:	90 93 88 41 	sts	0x4188, r25	; 0x804188 <pxDelayedTaskList+0x1>
    516c:	89 e8       	ldi	r24, 0x89	; 137
    516e:	91 e4       	ldi	r25, 0x41	; 65
    5170:	80 93 85 41 	sts	0x4185, r24	; 0x804185 <pxOverflowDelayedTaskList>
    5174:	90 93 86 41 	sts	0x4186, r25	; 0x804186 <pxOverflowDelayedTaskList+0x1>
    5178:	0f c0       	rjmp	.+30     	; 0x5198 <xTaskGenericCreate+0x178>
    517a:	80 91 70 41 	lds	r24, 0x4170	; 0x804170 <xSchedulerRunning>
    517e:	81 11       	cpse	r24, r1
    5180:	0b c0       	rjmp	.+22     	; 0x5198 <xTaskGenericCreate+0x178>
    5182:	e0 91 cb 41 	lds	r30, 0x41CB	; 0x8041cb <pxCurrentTCB>
    5186:	f0 91 cc 41 	lds	r31, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    518a:	82 8d       	ldd	r24, Z+26	; 0x1a
    518c:	08 17       	cp	r16, r24
    518e:	20 f0       	brcs	.+8      	; 0x5198 <xTaskGenericCreate+0x178>
    5190:	c0 93 cb 41 	sts	0x41CB, r28	; 0x8041cb <pxCurrentTCB>
    5194:	d0 93 cc 41 	sts	0x41CC, r29	; 0x8041cc <pxCurrentTCB+0x1>
    5198:	8a 8d       	ldd	r24, Y+26	; 0x1a
    519a:	90 91 72 41 	lds	r25, 0x4172	; 0x804172 <uxTopUsedPriority>
    519e:	98 17       	cp	r25, r24
    51a0:	10 f4       	brcc	.+4      	; 0x51a6 <xTaskGenericCreate+0x186>
    51a2:	80 93 72 41 	sts	0x4172, r24	; 0x804172 <uxTopUsedPriority>
    51a6:	90 91 6b 41 	lds	r25, 0x416B	; 0x80416b <uxTaskNumber>
    51aa:	9f 5f       	subi	r25, 0xFF	; 255
    51ac:	90 93 6b 41 	sts	0x416B, r25	; 0x80416b <uxTaskNumber>
    51b0:	90 91 71 41 	lds	r25, 0x4171	; 0x804171 <uxTopReadyPriority>
    51b4:	98 17       	cp	r25, r24
    51b6:	10 f4       	brcc	.+4      	; 0x51bc <xTaskGenericCreate+0x19c>
    51b8:	80 93 71 41 	sts	0x4171, r24	; 0x804171 <uxTopReadyPriority>
    51bc:	fb e0       	ldi	r31, 0x0B	; 11
    51be:	8f 9f       	mul	r24, r31
    51c0:	c0 01       	movw	r24, r0
    51c2:	11 24       	eor	r1, r1
    51c4:	b6 01       	movw	r22, r12
    51c6:	81 56       	subi	r24, 0x61	; 97
    51c8:	9e 4b       	sbci	r25, 0xBE	; 190
    51ca:	0e 94 c8 22 	call	0x4590	; 0x4590 <vListInsertEnd>
    51ce:	0f 90       	pop	r0
    51d0:	0f be       	out	0x3f, r0	; 63
    51d2:	80 91 70 41 	lds	r24, 0x4170	; 0x804170 <xSchedulerRunning>
    51d6:	88 23       	and	r24, r24
    51d8:	59 f0       	breq	.+22     	; 0x51f0 <xTaskGenericCreate+0x1d0>
    51da:	e0 91 cb 41 	lds	r30, 0x41CB	; 0x8041cb <pxCurrentTCB>
    51de:	f0 91 cc 41 	lds	r31, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    51e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    51e4:	80 17       	cp	r24, r16
    51e6:	30 f4       	brcc	.+12     	; 0x51f4 <xTaskGenericCreate+0x1d4>
    51e8:	0e 94 16 24 	call	0x482c	; 0x482c <vPortYield>
    51ec:	81 e0       	ldi	r24, 0x01	; 1
    51ee:	09 c0       	rjmp	.+18     	; 0x5202 <xTaskGenericCreate+0x1e2>
    51f0:	81 e0       	ldi	r24, 0x01	; 1
    51f2:	07 c0       	rjmp	.+14     	; 0x5202 <xTaskGenericCreate+0x1e2>
    51f4:	81 e0       	ldi	r24, 0x01	; 1
    51f6:	05 c0       	rjmp	.+10     	; 0x5202 <xTaskGenericCreate+0x1e2>
    51f8:	cb 8e       	std	Y+27, r12	; 0x1b
    51fa:	dc 8e       	std	Y+28, r13	; 0x1c
    51fc:	c6 01       	movw	r24, r12
    51fe:	3b cf       	rjmp	.-394    	; 0x5076 <xTaskGenericCreate+0x56>
    5200:	8f ef       	ldi	r24, 0xFF	; 255
    5202:	df 91       	pop	r29
    5204:	cf 91       	pop	r28
    5206:	1f 91       	pop	r17
    5208:	0f 91       	pop	r16
    520a:	ff 90       	pop	r15
    520c:	ef 90       	pop	r14
    520e:	df 90       	pop	r13
    5210:	cf 90       	pop	r12
    5212:	bf 90       	pop	r11
    5214:	af 90       	pop	r10
    5216:	9f 90       	pop	r9
    5218:	8f 90       	pop	r8
    521a:	7f 90       	pop	r7
    521c:	6f 90       	pop	r6
    521e:	5f 90       	pop	r5
    5220:	4f 90       	pop	r4
    5222:	08 95       	ret

00005224 <uxTaskPriorityGet>:
    5224:	0f b6       	in	r0, 0x3f	; 63
    5226:	f8 94       	cli
    5228:	0f 92       	push	r0
    522a:	00 97       	sbiw	r24, 0x00	; 0
    522c:	21 f4       	brne	.+8      	; 0x5236 <uxTaskPriorityGet+0x12>
    522e:	80 91 cb 41 	lds	r24, 0x41CB	; 0x8041cb <pxCurrentTCB>
    5232:	90 91 cc 41 	lds	r25, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    5236:	0f 90       	pop	r0
    5238:	0f be       	out	0x3f, r0	; 63
    523a:	fc 01       	movw	r30, r24
    523c:	82 8d       	ldd	r24, Z+26	; 0x1a
    523e:	08 95       	ret

00005240 <vTaskStartScheduler>:
    5240:	af 92       	push	r10
    5242:	bf 92       	push	r11
    5244:	cf 92       	push	r12
    5246:	df 92       	push	r13
    5248:	ef 92       	push	r14
    524a:	ff 92       	push	r15
    524c:	0f 93       	push	r16
    524e:	a1 2c       	mov	r10, r1
    5250:	b1 2c       	mov	r11, r1
    5252:	c1 2c       	mov	r12, r1
    5254:	d1 2c       	mov	r13, r1
    5256:	0f 2e       	mov	r0, r31
    5258:	f8 e7       	ldi	r31, 0x78	; 120
    525a:	ef 2e       	mov	r14, r31
    525c:	f1 e4       	ldi	r31, 0x41	; 65
    525e:	ff 2e       	mov	r15, r31
    5260:	f0 2d       	mov	r31, r0
    5262:	00 e0       	ldi	r16, 0x00	; 0
    5264:	20 e0       	ldi	r18, 0x00	; 0
    5266:	30 e0       	ldi	r19, 0x00	; 0
    5268:	44 e6       	ldi	r20, 0x64	; 100
    526a:	50 e0       	ldi	r21, 0x00	; 0
    526c:	63 e9       	ldi	r22, 0x93	; 147
    526e:	70 e2       	ldi	r23, 0x20	; 32
    5270:	8a eb       	ldi	r24, 0xBA	; 186
    5272:	97 e2       	ldi	r25, 0x27	; 39
    5274:	0e 94 10 28 	call	0x5020	; 0x5020 <xTaskGenericCreate>
    5278:	81 30       	cpi	r24, 0x01	; 1
    527a:	69 f4       	brne	.+26     	; 0x5296 <vTaskStartScheduler+0x56>
    527c:	f8 94       	cli
    527e:	80 93 70 41 	sts	0x4170, r24	; 0x804170 <xSchedulerRunning>
    5282:	10 92 73 41 	sts	0x4173, r1	; 0x804173 <xTickCount>
    5286:	10 92 74 41 	sts	0x4174, r1	; 0x804174 <xTickCount+0x1>
    528a:	10 92 75 41 	sts	0x4175, r1	; 0x804175 <xTickCount+0x2>
    528e:	10 92 76 41 	sts	0x4176, r1	; 0x804176 <xTickCount+0x3>
    5292:	0e 94 d6 23 	call	0x47ac	; 0x47ac <xPortStartScheduler>
    5296:	0f 91       	pop	r16
    5298:	ff 90       	pop	r15
    529a:	ef 90       	pop	r14
    529c:	df 90       	pop	r13
    529e:	cf 90       	pop	r12
    52a0:	bf 90       	pop	r11
    52a2:	af 90       	pop	r10
    52a4:	08 95       	ret

000052a6 <vTaskSuspendAll>:
    52a6:	80 91 6f 41 	lds	r24, 0x416F	; 0x80416f <uxSchedulerSuspended>
    52aa:	8f 5f       	subi	r24, 0xFF	; 255
    52ac:	80 93 6f 41 	sts	0x416F, r24	; 0x80416f <uxSchedulerSuspended>
    52b0:	08 95       	ret

000052b2 <xTaskGetTickCount>:
    52b2:	0f b6       	in	r0, 0x3f	; 63
    52b4:	f8 94       	cli
    52b6:	0f 92       	push	r0
    52b8:	60 91 73 41 	lds	r22, 0x4173	; 0x804173 <xTickCount>
    52bc:	70 91 74 41 	lds	r23, 0x4174	; 0x804174 <xTickCount+0x1>
    52c0:	80 91 75 41 	lds	r24, 0x4175	; 0x804175 <xTickCount+0x2>
    52c4:	90 91 76 41 	lds	r25, 0x4176	; 0x804176 <xTickCount+0x3>
    52c8:	0f 90       	pop	r0
    52ca:	0f be       	out	0x3f, r0	; 63
    52cc:	08 95       	ret

000052ce <pcTaskGetTaskName>:
    52ce:	00 97       	sbiw	r24, 0x00	; 0
    52d0:	21 f4       	brne	.+8      	; 0x52da <pcTaskGetTaskName+0xc>
    52d2:	80 91 cb 41 	lds	r24, 0x41CB	; 0x8041cb <pxCurrentTCB>
    52d6:	90 91 cc 41 	lds	r25, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    52da:	4d 96       	adiw	r24, 0x1d	; 29
    52dc:	08 95       	ret

000052de <vTaskIncrementTick>:
    52de:	ff 92       	push	r15
    52e0:	0f 93       	push	r16
    52e2:	1f 93       	push	r17
    52e4:	cf 93       	push	r28
    52e6:	df 93       	push	r29
    52e8:	80 91 6f 41 	lds	r24, 0x416F	; 0x80416f <uxSchedulerSuspended>
    52ec:	81 11       	cpse	r24, r1
    52ee:	ed c0       	rjmp	.+474    	; 0x54ca <vTaskIncrementTick+0x1ec>
    52f0:	80 91 73 41 	lds	r24, 0x4173	; 0x804173 <xTickCount>
    52f4:	90 91 74 41 	lds	r25, 0x4174	; 0x804174 <xTickCount+0x1>
    52f8:	a0 91 75 41 	lds	r26, 0x4175	; 0x804175 <xTickCount+0x2>
    52fc:	b0 91 76 41 	lds	r27, 0x4176	; 0x804176 <xTickCount+0x3>
    5300:	01 96       	adiw	r24, 0x01	; 1
    5302:	a1 1d       	adc	r26, r1
    5304:	b1 1d       	adc	r27, r1
    5306:	80 93 73 41 	sts	0x4173, r24	; 0x804173 <xTickCount>
    530a:	90 93 74 41 	sts	0x4174, r25	; 0x804174 <xTickCount+0x1>
    530e:	a0 93 75 41 	sts	0x4175, r26	; 0x804175 <xTickCount+0x2>
    5312:	b0 93 76 41 	sts	0x4176, r27	; 0x804176 <xTickCount+0x3>
    5316:	80 91 73 41 	lds	r24, 0x4173	; 0x804173 <xTickCount>
    531a:	90 91 74 41 	lds	r25, 0x4174	; 0x804174 <xTickCount+0x1>
    531e:	a0 91 75 41 	lds	r26, 0x4175	; 0x804175 <xTickCount+0x2>
    5322:	b0 91 76 41 	lds	r27, 0x4176	; 0x804176 <xTickCount+0x3>
    5326:	89 2b       	or	r24, r25
    5328:	8a 2b       	or	r24, r26
    532a:	8b 2b       	or	r24, r27
    532c:	f1 f5       	brne	.+124    	; 0x53aa <vTaskIncrementTick+0xcc>
    532e:	80 91 87 41 	lds	r24, 0x4187	; 0x804187 <pxDelayedTaskList>
    5332:	90 91 88 41 	lds	r25, 0x4188	; 0x804188 <pxDelayedTaskList+0x1>
    5336:	20 91 85 41 	lds	r18, 0x4185	; 0x804185 <pxOverflowDelayedTaskList>
    533a:	30 91 86 41 	lds	r19, 0x4186	; 0x804186 <pxOverflowDelayedTaskList+0x1>
    533e:	20 93 87 41 	sts	0x4187, r18	; 0x804187 <pxDelayedTaskList>
    5342:	30 93 88 41 	sts	0x4188, r19	; 0x804188 <pxDelayedTaskList+0x1>
    5346:	80 93 85 41 	sts	0x4185, r24	; 0x804185 <pxOverflowDelayedTaskList>
    534a:	90 93 86 41 	sts	0x4186, r25	; 0x804186 <pxOverflowDelayedTaskList+0x1>
    534e:	80 91 6c 41 	lds	r24, 0x416C	; 0x80416c <xNumOfOverflows>
    5352:	8f 5f       	subi	r24, 0xFF	; 255
    5354:	80 93 6c 41 	sts	0x416C, r24	; 0x80416c <xNumOfOverflows>
    5358:	e0 91 87 41 	lds	r30, 0x4187	; 0x804187 <pxDelayedTaskList>
    535c:	f0 91 88 41 	lds	r31, 0x4188	; 0x804188 <pxDelayedTaskList+0x1>
    5360:	80 81       	ld	r24, Z
    5362:	81 11       	cpse	r24, r1
    5364:	0c c0       	rjmp	.+24     	; 0x537e <vTaskIncrementTick+0xa0>
    5366:	8f ef       	ldi	r24, 0xFF	; 255
    5368:	9f ef       	ldi	r25, 0xFF	; 255
    536a:	dc 01       	movw	r26, r24
    536c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    5370:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    5374:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    5378:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    537c:	16 c0       	rjmp	.+44     	; 0x53aa <vTaskIncrementTick+0xcc>
    537e:	e0 91 87 41 	lds	r30, 0x4187	; 0x804187 <pxDelayedTaskList>
    5382:	f0 91 88 41 	lds	r31, 0x4188	; 0x804188 <pxDelayedTaskList+0x1>
    5386:	07 80       	ldd	r0, Z+7	; 0x07
    5388:	f0 85       	ldd	r31, Z+8	; 0x08
    538a:	e0 2d       	mov	r30, r0
    538c:	00 84       	ldd	r0, Z+8	; 0x08
    538e:	f1 85       	ldd	r31, Z+9	; 0x09
    5390:	e0 2d       	mov	r30, r0
    5392:	82 81       	ldd	r24, Z+2	; 0x02
    5394:	93 81       	ldd	r25, Z+3	; 0x03
    5396:	a4 81       	ldd	r26, Z+4	; 0x04
    5398:	b5 81       	ldd	r27, Z+5	; 0x05
    539a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    539e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    53a2:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    53a6:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    53aa:	40 91 73 41 	lds	r20, 0x4173	; 0x804173 <xTickCount>
    53ae:	50 91 74 41 	lds	r21, 0x4174	; 0x804174 <xTickCount+0x1>
    53b2:	60 91 75 41 	lds	r22, 0x4175	; 0x804175 <xTickCount+0x2>
    53b6:	70 91 76 41 	lds	r23, 0x4176	; 0x804176 <xTickCount+0x3>
    53ba:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    53be:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    53c2:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    53c6:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    53ca:	48 17       	cp	r20, r24
    53cc:	59 07       	cpc	r21, r25
    53ce:	6a 07       	cpc	r22, r26
    53d0:	7b 07       	cpc	r23, r27
    53d2:	08 f4       	brcc	.+2      	; 0x53d6 <vTaskIncrementTick+0xf8>
    53d4:	7f c0       	rjmp	.+254    	; 0x54d4 <vTaskIncrementTick+0x1f6>
    53d6:	e0 91 87 41 	lds	r30, 0x4187	; 0x804187 <pxDelayedTaskList>
    53da:	f0 91 88 41 	lds	r31, 0x4188	; 0x804188 <pxDelayedTaskList+0x1>
    53de:	80 81       	ld	r24, Z
    53e0:	88 23       	and	r24, r24
    53e2:	f9 f0       	breq	.+62     	; 0x5422 <vTaskIncrementTick+0x144>
    53e4:	e0 91 87 41 	lds	r30, 0x4187	; 0x804187 <pxDelayedTaskList>
    53e8:	f0 91 88 41 	lds	r31, 0x4188	; 0x804188 <pxDelayedTaskList+0x1>
    53ec:	07 80       	ldd	r0, Z+7	; 0x07
    53ee:	f0 85       	ldd	r31, Z+8	; 0x08
    53f0:	e0 2d       	mov	r30, r0
    53f2:	c0 85       	ldd	r28, Z+8	; 0x08
    53f4:	d1 85       	ldd	r29, Z+9	; 0x09
    53f6:	8a 81       	ldd	r24, Y+2	; 0x02
    53f8:	9b 81       	ldd	r25, Y+3	; 0x03
    53fa:	ac 81       	ldd	r26, Y+4	; 0x04
    53fc:	bd 81       	ldd	r27, Y+5	; 0x05
    53fe:	40 91 73 41 	lds	r20, 0x4173	; 0x804173 <xTickCount>
    5402:	50 91 74 41 	lds	r21, 0x4174	; 0x804174 <xTickCount+0x1>
    5406:	60 91 75 41 	lds	r22, 0x4175	; 0x804175 <xTickCount+0x2>
    540a:	70 91 76 41 	lds	r23, 0x4176	; 0x804176 <xTickCount+0x3>
    540e:	48 17       	cp	r20, r24
    5410:	59 07       	cpc	r21, r25
    5412:	6a 07       	cpc	r22, r26
    5414:	7b 07       	cpc	r23, r27
    5416:	58 f1       	brcs	.+86     	; 0x546e <vTaskIncrementTick+0x190>
    5418:	0f 2e       	mov	r0, r31
    541a:	fb e0       	ldi	r31, 0x0B	; 11
    541c:	ff 2e       	mov	r15, r31
    541e:	f0 2d       	mov	r31, r0
    5420:	2f c0       	rjmp	.+94     	; 0x5480 <vTaskIncrementTick+0x1a2>
    5422:	8f ef       	ldi	r24, 0xFF	; 255
    5424:	9f ef       	ldi	r25, 0xFF	; 255
    5426:	dc 01       	movw	r26, r24
    5428:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    542c:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    5430:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    5434:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    5438:	4d c0       	rjmp	.+154    	; 0x54d4 <vTaskIncrementTick+0x1f6>
    543a:	e0 91 87 41 	lds	r30, 0x4187	; 0x804187 <pxDelayedTaskList>
    543e:	f0 91 88 41 	lds	r31, 0x4188	; 0x804188 <pxDelayedTaskList+0x1>
    5442:	07 80       	ldd	r0, Z+7	; 0x07
    5444:	f0 85       	ldd	r31, Z+8	; 0x08
    5446:	e0 2d       	mov	r30, r0
    5448:	c0 85       	ldd	r28, Z+8	; 0x08
    544a:	d1 85       	ldd	r29, Z+9	; 0x09
    544c:	8a 81       	ldd	r24, Y+2	; 0x02
    544e:	9b 81       	ldd	r25, Y+3	; 0x03
    5450:	ac 81       	ldd	r26, Y+4	; 0x04
    5452:	bd 81       	ldd	r27, Y+5	; 0x05
    5454:	40 91 73 41 	lds	r20, 0x4173	; 0x804173 <xTickCount>
    5458:	50 91 74 41 	lds	r21, 0x4174	; 0x804174 <xTickCount+0x1>
    545c:	60 91 75 41 	lds	r22, 0x4175	; 0x804175 <xTickCount+0x2>
    5460:	70 91 76 41 	lds	r23, 0x4176	; 0x804176 <xTickCount+0x3>
    5464:	48 17       	cp	r20, r24
    5466:	59 07       	cpc	r21, r25
    5468:	6a 07       	cpc	r22, r26
    546a:	7b 07       	cpc	r23, r27
    546c:	48 f4       	brcc	.+18     	; 0x5480 <vTaskIncrementTick+0x1a2>
    546e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    5472:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    5476:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    547a:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    547e:	2a c0       	rjmp	.+84     	; 0x54d4 <vTaskIncrementTick+0x1f6>
    5480:	8e 01       	movw	r16, r28
    5482:	0e 5f       	subi	r16, 0xFE	; 254
    5484:	1f 4f       	sbci	r17, 0xFF	; 255
    5486:	c8 01       	movw	r24, r16
    5488:	0e 94 3a 23 	call	0x4674	; 0x4674 <vListRemove>
    548c:	88 8d       	ldd	r24, Y+24	; 0x18
    548e:	99 8d       	ldd	r25, Y+25	; 0x19
    5490:	89 2b       	or	r24, r25
    5492:	21 f0       	breq	.+8      	; 0x549c <vTaskIncrementTick+0x1be>
    5494:	ce 01       	movw	r24, r28
    5496:	0e 96       	adiw	r24, 0x0e	; 14
    5498:	0e 94 3a 23 	call	0x4674	; 0x4674 <vListRemove>
    549c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    549e:	90 91 71 41 	lds	r25, 0x4171	; 0x804171 <uxTopReadyPriority>
    54a2:	98 17       	cp	r25, r24
    54a4:	10 f4       	brcc	.+4      	; 0x54aa <vTaskIncrementTick+0x1cc>
    54a6:	80 93 71 41 	sts	0x4171, r24	; 0x804171 <uxTopReadyPriority>
    54aa:	f8 9e       	mul	r15, r24
    54ac:	c0 01       	movw	r24, r0
    54ae:	11 24       	eor	r1, r1
    54b0:	b8 01       	movw	r22, r16
    54b2:	81 56       	subi	r24, 0x61	; 97
    54b4:	9e 4b       	sbci	r25, 0xBE	; 190
    54b6:	0e 94 c8 22 	call	0x4590	; 0x4590 <vListInsertEnd>
    54ba:	e0 91 87 41 	lds	r30, 0x4187	; 0x804187 <pxDelayedTaskList>
    54be:	f0 91 88 41 	lds	r31, 0x4188	; 0x804188 <pxDelayedTaskList+0x1>
    54c2:	80 81       	ld	r24, Z
    54c4:	81 11       	cpse	r24, r1
    54c6:	b9 cf       	rjmp	.-142    	; 0x543a <vTaskIncrementTick+0x15c>
    54c8:	ac cf       	rjmp	.-168    	; 0x5422 <vTaskIncrementTick+0x144>
    54ca:	80 91 6e 41 	lds	r24, 0x416E	; 0x80416e <uxMissedTicks>
    54ce:	8f 5f       	subi	r24, 0xFF	; 255
    54d0:	80 93 6e 41 	sts	0x416E, r24	; 0x80416e <uxMissedTicks>
    54d4:	df 91       	pop	r29
    54d6:	cf 91       	pop	r28
    54d8:	1f 91       	pop	r17
    54da:	0f 91       	pop	r16
    54dc:	ff 90       	pop	r15
    54de:	08 95       	ret

000054e0 <xTaskResumeAll>:
    54e0:	cf 92       	push	r12
    54e2:	df 92       	push	r13
    54e4:	ef 92       	push	r14
    54e6:	ff 92       	push	r15
    54e8:	0f 93       	push	r16
    54ea:	1f 93       	push	r17
    54ec:	cf 93       	push	r28
    54ee:	df 93       	push	r29
    54f0:	0f b6       	in	r0, 0x3f	; 63
    54f2:	f8 94       	cli
    54f4:	0f 92       	push	r0
    54f6:	80 91 6f 41 	lds	r24, 0x416F	; 0x80416f <uxSchedulerSuspended>
    54fa:	81 50       	subi	r24, 0x01	; 1
    54fc:	80 93 6f 41 	sts	0x416F, r24	; 0x80416f <uxSchedulerSuspended>
    5500:	80 91 6f 41 	lds	r24, 0x416F	; 0x80416f <uxSchedulerSuspended>
    5504:	81 11       	cpse	r24, r1
    5506:	60 c0       	rjmp	.+192    	; 0x55c8 <xTaskResumeAll+0xe8>
    5508:	80 91 77 41 	lds	r24, 0x4177	; 0x804177 <uxCurrentNumberOfTasks>
    550c:	81 11       	cpse	r24, r1
    550e:	2c c0       	rjmp	.+88     	; 0x5568 <xTaskResumeAll+0x88>
    5510:	5e c0       	rjmp	.+188    	; 0x55ce <xTaskResumeAll+0xee>
    5512:	d7 01       	movw	r26, r14
    5514:	17 96       	adiw	r26, 0x07	; 7
    5516:	ed 91       	ld	r30, X+
    5518:	fc 91       	ld	r31, X
    551a:	18 97       	sbiw	r26, 0x08	; 8
    551c:	c0 85       	ldd	r28, Z+8	; 0x08
    551e:	d1 85       	ldd	r29, Z+9	; 0x09
    5520:	ce 01       	movw	r24, r28
    5522:	0e 96       	adiw	r24, 0x0e	; 14
    5524:	0e 94 3a 23 	call	0x4674	; 0x4674 <vListRemove>
    5528:	8e 01       	movw	r16, r28
    552a:	0e 5f       	subi	r16, 0xFE	; 254
    552c:	1f 4f       	sbci	r17, 0xFF	; 255
    552e:	c8 01       	movw	r24, r16
    5530:	0e 94 3a 23 	call	0x4674	; 0x4674 <vListRemove>
    5534:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5536:	90 91 71 41 	lds	r25, 0x4171	; 0x804171 <uxTopReadyPriority>
    553a:	98 17       	cp	r25, r24
    553c:	10 f4       	brcc	.+4      	; 0x5542 <xTaskResumeAll+0x62>
    553e:	80 93 71 41 	sts	0x4171, r24	; 0x804171 <uxTopReadyPriority>
    5542:	d8 9e       	mul	r13, r24
    5544:	c0 01       	movw	r24, r0
    5546:	11 24       	eor	r1, r1
    5548:	b8 01       	movw	r22, r16
    554a:	81 56       	subi	r24, 0x61	; 97
    554c:	9e 4b       	sbci	r25, 0xBE	; 190
    554e:	0e 94 c8 22 	call	0x4590	; 0x4590 <vListInsertEnd>
    5552:	e0 91 cb 41 	lds	r30, 0x41CB	; 0x8041cb <pxCurrentTCB>
    5556:	f0 91 cc 41 	lds	r31, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    555a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    555c:	82 8d       	ldd	r24, Z+26	; 0x1a
    555e:	98 17       	cp	r25, r24
    5560:	70 f0       	brcs	.+28     	; 0x557e <xTaskResumeAll+0x9e>
    5562:	cc 24       	eor	r12, r12
    5564:	c3 94       	inc	r12
    5566:	0b c0       	rjmp	.+22     	; 0x557e <xTaskResumeAll+0x9e>
    5568:	c1 2c       	mov	r12, r1
    556a:	0f 2e       	mov	r0, r31
    556c:	fa e7       	ldi	r31, 0x7A	; 122
    556e:	ef 2e       	mov	r14, r31
    5570:	f1 e4       	ldi	r31, 0x41	; 65
    5572:	ff 2e       	mov	r15, r31
    5574:	f0 2d       	mov	r31, r0
    5576:	0f 2e       	mov	r0, r31
    5578:	fb e0       	ldi	r31, 0x0B	; 11
    557a:	df 2e       	mov	r13, r31
    557c:	f0 2d       	mov	r31, r0
    557e:	f7 01       	movw	r30, r14
    5580:	80 81       	ld	r24, Z
    5582:	81 11       	cpse	r24, r1
    5584:	c6 cf       	rjmp	.-116    	; 0x5512 <xTaskResumeAll+0x32>
    5586:	80 91 6e 41 	lds	r24, 0x416E	; 0x80416e <uxMissedTicks>
    558a:	88 23       	and	r24, r24
    558c:	81 f0       	breq	.+32     	; 0x55ae <xTaskResumeAll+0xce>
    558e:	80 91 6e 41 	lds	r24, 0x416E	; 0x80416e <uxMissedTicks>
    5592:	88 23       	and	r24, r24
    5594:	99 f0       	breq	.+38     	; 0x55bc <xTaskResumeAll+0xdc>
    5596:	0e 94 6f 29 	call	0x52de	; 0x52de <vTaskIncrementTick>
    559a:	80 91 6e 41 	lds	r24, 0x416E	; 0x80416e <uxMissedTicks>
    559e:	81 50       	subi	r24, 0x01	; 1
    55a0:	80 93 6e 41 	sts	0x416E, r24	; 0x80416e <uxMissedTicks>
    55a4:	80 91 6e 41 	lds	r24, 0x416E	; 0x80416e <uxMissedTicks>
    55a8:	81 11       	cpse	r24, r1
    55aa:	f5 cf       	rjmp	.-22     	; 0x5596 <xTaskResumeAll+0xb6>
    55ac:	07 c0       	rjmp	.+14     	; 0x55bc <xTaskResumeAll+0xdc>
    55ae:	f1 e0       	ldi	r31, 0x01	; 1
    55b0:	cf 16       	cp	r12, r31
    55b2:	21 f0       	breq	.+8      	; 0x55bc <xTaskResumeAll+0xdc>
    55b4:	80 91 6d 41 	lds	r24, 0x416D	; 0x80416d <xMissedYield>
    55b8:	81 30       	cpi	r24, 0x01	; 1
    55ba:	41 f4       	brne	.+16     	; 0x55cc <xTaskResumeAll+0xec>
    55bc:	10 92 6d 41 	sts	0x416D, r1	; 0x80416d <xMissedYield>
    55c0:	0e 94 16 24 	call	0x482c	; 0x482c <vPortYield>
    55c4:	81 e0       	ldi	r24, 0x01	; 1
    55c6:	03 c0       	rjmp	.+6      	; 0x55ce <xTaskResumeAll+0xee>
    55c8:	80 e0       	ldi	r24, 0x00	; 0
    55ca:	01 c0       	rjmp	.+2      	; 0x55ce <xTaskResumeAll+0xee>
    55cc:	80 e0       	ldi	r24, 0x00	; 0
    55ce:	0f 90       	pop	r0
    55d0:	0f be       	out	0x3f, r0	; 63
    55d2:	df 91       	pop	r29
    55d4:	cf 91       	pop	r28
    55d6:	1f 91       	pop	r17
    55d8:	0f 91       	pop	r16
    55da:	ff 90       	pop	r15
    55dc:	ef 90       	pop	r14
    55de:	df 90       	pop	r13
    55e0:	cf 90       	pop	r12
    55e2:	08 95       	ret

000055e4 <vTaskDelayUntil>:
    55e4:	cf 92       	push	r12
    55e6:	df 92       	push	r13
    55e8:	ef 92       	push	r14
    55ea:	ff 92       	push	r15
    55ec:	cf 93       	push	r28
    55ee:	df 93       	push	r29
    55f0:	ec 01       	movw	r28, r24
    55f2:	6a 01       	movw	r12, r20
    55f4:	7b 01       	movw	r14, r22
    55f6:	0e 94 53 29 	call	0x52a6	; 0x52a6 <vTaskSuspendAll>
    55fa:	88 81       	ld	r24, Y
    55fc:	99 81       	ldd	r25, Y+1	; 0x01
    55fe:	aa 81       	ldd	r26, Y+2	; 0x02
    5600:	bb 81       	ldd	r27, Y+3	; 0x03
    5602:	c8 0e       	add	r12, r24
    5604:	d9 1e       	adc	r13, r25
    5606:	ea 1e       	adc	r14, r26
    5608:	fb 1e       	adc	r15, r27
    560a:	40 91 73 41 	lds	r20, 0x4173	; 0x804173 <xTickCount>
    560e:	50 91 74 41 	lds	r21, 0x4174	; 0x804174 <xTickCount+0x1>
    5612:	60 91 75 41 	lds	r22, 0x4175	; 0x804175 <xTickCount+0x2>
    5616:	70 91 76 41 	lds	r23, 0x4176	; 0x804176 <xTickCount+0x3>
    561a:	48 17       	cp	r20, r24
    561c:	59 07       	cpc	r21, r25
    561e:	6a 07       	cpc	r22, r26
    5620:	7b 07       	cpc	r23, r27
    5622:	b8 f4       	brcc	.+46     	; 0x5652 <vTaskDelayUntil+0x6e>
    5624:	c8 16       	cp	r12, r24
    5626:	d9 06       	cpc	r13, r25
    5628:	ea 06       	cpc	r14, r26
    562a:	fb 06       	cpc	r15, r27
    562c:	e0 f5       	brcc	.+120    	; 0x56a6 <vTaskDelayUntil+0xc2>
    562e:	80 91 73 41 	lds	r24, 0x4173	; 0x804173 <xTickCount>
    5632:	90 91 74 41 	lds	r25, 0x4174	; 0x804174 <xTickCount+0x1>
    5636:	a0 91 75 41 	lds	r26, 0x4175	; 0x804175 <xTickCount+0x2>
    563a:	b0 91 76 41 	lds	r27, 0x4176	; 0x804176 <xTickCount+0x3>
    563e:	c8 82       	st	Y, r12
    5640:	d9 82       	std	Y+1, r13	; 0x01
    5642:	ea 82       	std	Y+2, r14	; 0x02
    5644:	fb 82       	std	Y+3, r15	; 0x03
    5646:	8c 15       	cp	r24, r12
    5648:	9d 05       	cpc	r25, r13
    564a:	ae 05       	cpc	r26, r14
    564c:	bf 05       	cpc	r27, r15
    564e:	f8 f4       	brcc	.+62     	; 0x568e <vTaskDelayUntil+0xaa>
    5650:	13 c0       	rjmp	.+38     	; 0x5678 <vTaskDelayUntil+0x94>
    5652:	c8 16       	cp	r12, r24
    5654:	d9 06       	cpc	r13, r25
    5656:	ea 06       	cpc	r14, r26
    5658:	fb 06       	cpc	r15, r27
    565a:	00 f1       	brcs	.+64     	; 0x569c <vTaskDelayUntil+0xb8>
    565c:	80 91 73 41 	lds	r24, 0x4173	; 0x804173 <xTickCount>
    5660:	90 91 74 41 	lds	r25, 0x4174	; 0x804174 <xTickCount+0x1>
    5664:	a0 91 75 41 	lds	r26, 0x4175	; 0x804175 <xTickCount+0x2>
    5668:	b0 91 76 41 	lds	r27, 0x4176	; 0x804176 <xTickCount+0x3>
    566c:	8c 15       	cp	r24, r12
    566e:	9d 05       	cpc	r25, r13
    5670:	ae 05       	cpc	r26, r14
    5672:	bf 05       	cpc	r27, r15
    5674:	98 f0       	brcs	.+38     	; 0x569c <vTaskDelayUntil+0xb8>
    5676:	17 c0       	rjmp	.+46     	; 0x56a6 <vTaskDelayUntil+0xc2>
    5678:	80 91 cb 41 	lds	r24, 0x41CB	; 0x8041cb <pxCurrentTCB>
    567c:	90 91 cc 41 	lds	r25, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    5680:	02 96       	adiw	r24, 0x02	; 2
    5682:	0e 94 3a 23 	call	0x4674	; 0x4674 <vListRemove>
    5686:	c7 01       	movw	r24, r14
    5688:	b6 01       	movw	r22, r12
    568a:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <prvAddCurrentTaskToDelayedList>
    568e:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <xTaskResumeAll>
    5692:	81 11       	cpse	r24, r1
    5694:	0d c0       	rjmp	.+26     	; 0x56b0 <vTaskDelayUntil+0xcc>
    5696:	0e 94 16 24 	call	0x482c	; 0x482c <vPortYield>
    569a:	0a c0       	rjmp	.+20     	; 0x56b0 <vTaskDelayUntil+0xcc>
    569c:	c8 82       	st	Y, r12
    569e:	d9 82       	std	Y+1, r13	; 0x01
    56a0:	ea 82       	std	Y+2, r14	; 0x02
    56a2:	fb 82       	std	Y+3, r15	; 0x03
    56a4:	e9 cf       	rjmp	.-46     	; 0x5678 <vTaskDelayUntil+0x94>
    56a6:	c8 82       	st	Y, r12
    56a8:	d9 82       	std	Y+1, r13	; 0x01
    56aa:	ea 82       	std	Y+2, r14	; 0x02
    56ac:	fb 82       	std	Y+3, r15	; 0x03
    56ae:	ef cf       	rjmp	.-34     	; 0x568e <vTaskDelayUntil+0xaa>
    56b0:	df 91       	pop	r29
    56b2:	cf 91       	pop	r28
    56b4:	ff 90       	pop	r15
    56b6:	ef 90       	pop	r14
    56b8:	df 90       	pop	r13
    56ba:	cf 90       	pop	r12
    56bc:	08 95       	ret

000056be <vTaskDelay>:
    56be:	cf 92       	push	r12
    56c0:	df 92       	push	r13
    56c2:	ef 92       	push	r14
    56c4:	ff 92       	push	r15
    56c6:	6b 01       	movw	r12, r22
    56c8:	7c 01       	movw	r14, r24
    56ca:	67 2b       	or	r22, r23
    56cc:	68 2b       	or	r22, r24
    56ce:	69 2b       	or	r22, r25
    56d0:	e9 f0       	breq	.+58     	; 0x570c <vTaskDelay+0x4e>
    56d2:	0e 94 53 29 	call	0x52a6	; 0x52a6 <vTaskSuspendAll>
    56d6:	80 91 73 41 	lds	r24, 0x4173	; 0x804173 <xTickCount>
    56da:	90 91 74 41 	lds	r25, 0x4174	; 0x804174 <xTickCount+0x1>
    56de:	a0 91 75 41 	lds	r26, 0x4175	; 0x804175 <xTickCount+0x2>
    56e2:	b0 91 76 41 	lds	r27, 0x4176	; 0x804176 <xTickCount+0x3>
    56e6:	c8 0e       	add	r12, r24
    56e8:	d9 1e       	adc	r13, r25
    56ea:	ea 1e       	adc	r14, r26
    56ec:	fb 1e       	adc	r15, r27
    56ee:	80 91 cb 41 	lds	r24, 0x41CB	; 0x8041cb <pxCurrentTCB>
    56f2:	90 91 cc 41 	lds	r25, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    56f6:	02 96       	adiw	r24, 0x02	; 2
    56f8:	0e 94 3a 23 	call	0x4674	; 0x4674 <vListRemove>
    56fc:	c7 01       	movw	r24, r14
    56fe:	b6 01       	movw	r22, r12
    5700:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <prvAddCurrentTaskToDelayedList>
    5704:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <xTaskResumeAll>
    5708:	81 11       	cpse	r24, r1
    570a:	02 c0       	rjmp	.+4      	; 0x5710 <vTaskDelay+0x52>
    570c:	0e 94 16 24 	call	0x482c	; 0x482c <vPortYield>
    5710:	ff 90       	pop	r15
    5712:	ef 90       	pop	r14
    5714:	df 90       	pop	r13
    5716:	cf 90       	pop	r12
    5718:	08 95       	ret

0000571a <vTaskSwitchContext>:
    571a:	80 91 6f 41 	lds	r24, 0x416F	; 0x80416f <uxSchedulerSuspended>
    571e:	81 11       	cpse	r24, r1
    5720:	0c c0       	rjmp	.+24     	; 0x573a <vTaskSwitchContext+0x20>
    5722:	e0 91 71 41 	lds	r30, 0x4171	; 0x804171 <uxTopReadyPriority>
    5726:	4b e0       	ldi	r20, 0x0B	; 11
    5728:	e4 9f       	mul	r30, r20
    572a:	f0 01       	movw	r30, r0
    572c:	11 24       	eor	r1, r1
    572e:	e1 56       	subi	r30, 0x61	; 97
    5730:	fe 4b       	sbci	r31, 0xBE	; 190
    5732:	80 81       	ld	r24, Z
    5734:	88 23       	and	r24, r24
    5736:	29 f0       	breq	.+10     	; 0x5742 <vTaskSwitchContext+0x28>
    5738:	14 c0       	rjmp	.+40     	; 0x5762 <vTaskSwitchContext+0x48>
    573a:	81 e0       	ldi	r24, 0x01	; 1
    573c:	80 93 6d 41 	sts	0x416D, r24	; 0x80416d <xMissedYield>
    5740:	08 95       	ret
    5742:	9b e0       	ldi	r25, 0x0B	; 11
    5744:	80 91 71 41 	lds	r24, 0x4171	; 0x804171 <uxTopReadyPriority>
    5748:	81 50       	subi	r24, 0x01	; 1
    574a:	80 93 71 41 	sts	0x4171, r24	; 0x804171 <uxTopReadyPriority>
    574e:	e0 91 71 41 	lds	r30, 0x4171	; 0x804171 <uxTopReadyPriority>
    5752:	9e 9f       	mul	r25, r30
    5754:	f0 01       	movw	r30, r0
    5756:	11 24       	eor	r1, r1
    5758:	e1 56       	subi	r30, 0x61	; 97
    575a:	fe 4b       	sbci	r31, 0xBE	; 190
    575c:	80 81       	ld	r24, Z
    575e:	88 23       	and	r24, r24
    5760:	89 f3       	breq	.-30     	; 0x5744 <vTaskSwitchContext+0x2a>
    5762:	80 91 71 41 	lds	r24, 0x4171	; 0x804171 <uxTopReadyPriority>
    5766:	28 2f       	mov	r18, r24
    5768:	30 e0       	ldi	r19, 0x00	; 0
    576a:	4b e0       	ldi	r20, 0x0B	; 11
    576c:	84 9f       	mul	r24, r20
    576e:	c0 01       	movw	r24, r0
    5770:	11 24       	eor	r1, r1
    5772:	dc 01       	movw	r26, r24
    5774:	a1 56       	subi	r26, 0x61	; 97
    5776:	be 4b       	sbci	r27, 0xBE	; 190
    5778:	11 96       	adiw	r26, 0x01	; 1
    577a:	ed 91       	ld	r30, X+
    577c:	fc 91       	ld	r31, X
    577e:	12 97       	sbiw	r26, 0x02	; 2
    5780:	04 80       	ldd	r0, Z+4	; 0x04
    5782:	f5 81       	ldd	r31, Z+5	; 0x05
    5784:	e0 2d       	mov	r30, r0
    5786:	11 96       	adiw	r26, 0x01	; 1
    5788:	ed 93       	st	X+, r30
    578a:	fc 93       	st	X, r31
    578c:	12 97       	sbiw	r26, 0x02	; 2
    578e:	8e 55       	subi	r24, 0x5E	; 94
    5790:	9e 4b       	sbci	r25, 0xBE	; 190
    5792:	e8 17       	cp	r30, r24
    5794:	f9 07       	cpc	r31, r25
    5796:	61 f4       	brne	.+24     	; 0x57b0 <vTaskSwitchContext+0x96>
    5798:	84 81       	ldd	r24, Z+4	; 0x04
    579a:	95 81       	ldd	r25, Z+5	; 0x05
    579c:	4b e0       	ldi	r20, 0x0B	; 11
    579e:	42 9f       	mul	r20, r18
    57a0:	f0 01       	movw	r30, r0
    57a2:	43 9f       	mul	r20, r19
    57a4:	f0 0d       	add	r31, r0
    57a6:	11 24       	eor	r1, r1
    57a8:	e1 56       	subi	r30, 0x61	; 97
    57aa:	fe 4b       	sbci	r31, 0xBE	; 190
    57ac:	81 83       	std	Z+1, r24	; 0x01
    57ae:	92 83       	std	Z+2, r25	; 0x02
    57b0:	8b e0       	ldi	r24, 0x0B	; 11
    57b2:	82 9f       	mul	r24, r18
    57b4:	f0 01       	movw	r30, r0
    57b6:	83 9f       	mul	r24, r19
    57b8:	f0 0d       	add	r31, r0
    57ba:	11 24       	eor	r1, r1
    57bc:	e1 56       	subi	r30, 0x61	; 97
    57be:	fe 4b       	sbci	r31, 0xBE	; 190
    57c0:	01 80       	ldd	r0, Z+1	; 0x01
    57c2:	f2 81       	ldd	r31, Z+2	; 0x02
    57c4:	e0 2d       	mov	r30, r0
    57c6:	80 85       	ldd	r24, Z+8	; 0x08
    57c8:	91 85       	ldd	r25, Z+9	; 0x09
    57ca:	80 93 cb 41 	sts	0x41CB, r24	; 0x8041cb <pxCurrentTCB>
    57ce:	90 93 cc 41 	sts	0x41CC, r25	; 0x8041cc <pxCurrentTCB+0x1>
    57d2:	08 95       	ret

000057d4 <vTaskPlaceOnEventList>:
    57d4:	cf 92       	push	r12
    57d6:	df 92       	push	r13
    57d8:	ef 92       	push	r14
    57da:	ff 92       	push	r15
    57dc:	6a 01       	movw	r12, r20
    57de:	7b 01       	movw	r14, r22
    57e0:	60 91 cb 41 	lds	r22, 0x41CB	; 0x8041cb <pxCurrentTCB>
    57e4:	70 91 cc 41 	lds	r23, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    57e8:	62 5f       	subi	r22, 0xF2	; 242
    57ea:	7f 4f       	sbci	r23, 0xFF	; 255
    57ec:	0e 94 ef 22 	call	0x45de	; 0x45de <vListInsert>
    57f0:	80 91 cb 41 	lds	r24, 0x41CB	; 0x8041cb <pxCurrentTCB>
    57f4:	90 91 cc 41 	lds	r25, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    57f8:	02 96       	adiw	r24, 0x02	; 2
    57fa:	0e 94 3a 23 	call	0x4674	; 0x4674 <vListRemove>
    57fe:	80 91 73 41 	lds	r24, 0x4173	; 0x804173 <xTickCount>
    5802:	90 91 74 41 	lds	r25, 0x4174	; 0x804174 <xTickCount+0x1>
    5806:	a0 91 75 41 	lds	r26, 0x4175	; 0x804175 <xTickCount+0x2>
    580a:	b0 91 76 41 	lds	r27, 0x4176	; 0x804176 <xTickCount+0x3>
    580e:	bc 01       	movw	r22, r24
    5810:	cd 01       	movw	r24, r26
    5812:	6c 0d       	add	r22, r12
    5814:	7d 1d       	adc	r23, r13
    5816:	8e 1d       	adc	r24, r14
    5818:	9f 1d       	adc	r25, r15
    581a:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <prvAddCurrentTaskToDelayedList>
    581e:	ff 90       	pop	r15
    5820:	ef 90       	pop	r14
    5822:	df 90       	pop	r13
    5824:	cf 90       	pop	r12
    5826:	08 95       	ret

00005828 <xTaskRemoveFromEventList>:
    5828:	0f 93       	push	r16
    582a:	1f 93       	push	r17
    582c:	cf 93       	push	r28
    582e:	df 93       	push	r29
    5830:	dc 01       	movw	r26, r24
    5832:	17 96       	adiw	r26, 0x07	; 7
    5834:	ed 91       	ld	r30, X+
    5836:	fc 91       	ld	r31, X
    5838:	18 97       	sbiw	r26, 0x08	; 8
    583a:	c0 85       	ldd	r28, Z+8	; 0x08
    583c:	d1 85       	ldd	r29, Z+9	; 0x09
    583e:	8e 01       	movw	r16, r28
    5840:	02 5f       	subi	r16, 0xF2	; 242
    5842:	1f 4f       	sbci	r17, 0xFF	; 255
    5844:	c8 01       	movw	r24, r16
    5846:	0e 94 3a 23 	call	0x4674	; 0x4674 <vListRemove>
    584a:	80 91 6f 41 	lds	r24, 0x416F	; 0x80416f <uxSchedulerSuspended>
    584e:	81 11       	cpse	r24, r1
    5850:	16 c0       	rjmp	.+44     	; 0x587e <xTaskRemoveFromEventList+0x56>
    5852:	0c 50       	subi	r16, 0x0C	; 12
    5854:	11 09       	sbc	r17, r1
    5856:	c8 01       	movw	r24, r16
    5858:	0e 94 3a 23 	call	0x4674	; 0x4674 <vListRemove>
    585c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    585e:	90 91 71 41 	lds	r25, 0x4171	; 0x804171 <uxTopReadyPriority>
    5862:	98 17       	cp	r25, r24
    5864:	10 f4       	brcc	.+4      	; 0x586a <xTaskRemoveFromEventList+0x42>
    5866:	80 93 71 41 	sts	0x4171, r24	; 0x804171 <uxTopReadyPriority>
    586a:	bb e0       	ldi	r27, 0x0B	; 11
    586c:	8b 9f       	mul	r24, r27
    586e:	c0 01       	movw	r24, r0
    5870:	11 24       	eor	r1, r1
    5872:	b8 01       	movw	r22, r16
    5874:	81 56       	subi	r24, 0x61	; 97
    5876:	9e 4b       	sbci	r25, 0xBE	; 190
    5878:	0e 94 c8 22 	call	0x4590	; 0x4590 <vListInsertEnd>
    587c:	05 c0       	rjmp	.+10     	; 0x5888 <xTaskRemoveFromEventList+0x60>
    587e:	b8 01       	movw	r22, r16
    5880:	8a e7       	ldi	r24, 0x7A	; 122
    5882:	91 e4       	ldi	r25, 0x41	; 65
    5884:	0e 94 c8 22 	call	0x4590	; 0x4590 <vListInsertEnd>
    5888:	e0 91 cb 41 	lds	r30, 0x41CB	; 0x8041cb <pxCurrentTCB>
    588c:	f0 91 cc 41 	lds	r31, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    5890:	81 e0       	ldi	r24, 0x01	; 1
    5892:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5894:	92 8d       	ldd	r25, Z+26	; 0x1a
    5896:	29 17       	cp	r18, r25
    5898:	08 f4       	brcc	.+2      	; 0x589c <xTaskRemoveFromEventList+0x74>
    589a:	80 e0       	ldi	r24, 0x00	; 0
    589c:	df 91       	pop	r29
    589e:	cf 91       	pop	r28
    58a0:	1f 91       	pop	r17
    58a2:	0f 91       	pop	r16
    58a4:	08 95       	ret

000058a6 <vTaskSetTimeOutState>:
    58a6:	20 91 6c 41 	lds	r18, 0x416C	; 0x80416c <xNumOfOverflows>
    58aa:	fc 01       	movw	r30, r24
    58ac:	20 83       	st	Z, r18
    58ae:	40 91 73 41 	lds	r20, 0x4173	; 0x804173 <xTickCount>
    58b2:	50 91 74 41 	lds	r21, 0x4174	; 0x804174 <xTickCount+0x1>
    58b6:	60 91 75 41 	lds	r22, 0x4175	; 0x804175 <xTickCount+0x2>
    58ba:	70 91 76 41 	lds	r23, 0x4176	; 0x804176 <xTickCount+0x3>
    58be:	41 83       	std	Z+1, r20	; 0x01
    58c0:	52 83       	std	Z+2, r21	; 0x02
    58c2:	63 83       	std	Z+3, r22	; 0x03
    58c4:	74 83       	std	Z+4, r23	; 0x04
    58c6:	08 95       	ret

000058c8 <xTaskCheckForTimeOut>:
    58c8:	8f 92       	push	r8
    58ca:	9f 92       	push	r9
    58cc:	af 92       	push	r10
    58ce:	bf 92       	push	r11
    58d0:	cf 92       	push	r12
    58d2:	df 92       	push	r13
    58d4:	ef 92       	push	r14
    58d6:	ff 92       	push	r15
    58d8:	0f 93       	push	r16
    58da:	1f 93       	push	r17
    58dc:	cf 93       	push	r28
    58de:	df 93       	push	r29
    58e0:	fc 01       	movw	r30, r24
    58e2:	0f b6       	in	r0, 0x3f	; 63
    58e4:	f8 94       	cli
    58e6:	0f 92       	push	r0
    58e8:	80 91 6c 41 	lds	r24, 0x416C	; 0x80416c <xNumOfOverflows>
    58ec:	90 81       	ld	r25, Z
    58ee:	98 17       	cp	r25, r24
    58f0:	89 f0       	breq	.+34     	; 0x5914 <xTaskCheckForTimeOut+0x4c>
    58f2:	80 91 73 41 	lds	r24, 0x4173	; 0x804173 <xTickCount>
    58f6:	90 91 74 41 	lds	r25, 0x4174	; 0x804174 <xTickCount+0x1>
    58fa:	a0 91 75 41 	lds	r26, 0x4175	; 0x804175 <xTickCount+0x2>
    58fe:	b0 91 76 41 	lds	r27, 0x4176	; 0x804176 <xTickCount+0x3>
    5902:	01 81       	ldd	r16, Z+1	; 0x01
    5904:	12 81       	ldd	r17, Z+2	; 0x02
    5906:	23 81       	ldd	r18, Z+3	; 0x03
    5908:	34 81       	ldd	r19, Z+4	; 0x04
    590a:	80 17       	cp	r24, r16
    590c:	91 07       	cpc	r25, r17
    590e:	a2 07       	cpc	r26, r18
    5910:	b3 07       	cpc	r27, r19
    5912:	a8 f5       	brcc	.+106    	; 0x597e <xTaskCheckForTimeOut+0xb6>
    5914:	80 91 73 41 	lds	r24, 0x4173	; 0x804173 <xTickCount>
    5918:	90 91 74 41 	lds	r25, 0x4174	; 0x804174 <xTickCount+0x1>
    591c:	a0 91 75 41 	lds	r26, 0x4175	; 0x804175 <xTickCount+0x2>
    5920:	b0 91 76 41 	lds	r27, 0x4176	; 0x804176 <xTickCount+0x3>
    5924:	c1 80       	ldd	r12, Z+1	; 0x01
    5926:	d2 80       	ldd	r13, Z+2	; 0x02
    5928:	e3 80       	ldd	r14, Z+3	; 0x03
    592a:	f4 80       	ldd	r15, Z+4	; 0x04
    592c:	eb 01       	movw	r28, r22
    592e:	08 81       	ld	r16, Y
    5930:	19 81       	ldd	r17, Y+1	; 0x01
    5932:	2a 81       	ldd	r18, Y+2	; 0x02
    5934:	3b 81       	ldd	r19, Y+3	; 0x03
    5936:	8c 19       	sub	r24, r12
    5938:	9d 09       	sbc	r25, r13
    593a:	ae 09       	sbc	r26, r14
    593c:	bf 09       	sbc	r27, r15
    593e:	80 17       	cp	r24, r16
    5940:	91 07       	cpc	r25, r17
    5942:	a2 07       	cpc	r26, r18
    5944:	b3 07       	cpc	r27, r19
    5946:	e8 f4       	brcc	.+58     	; 0x5982 <xTaskCheckForTimeOut+0xba>
    5948:	cf 01       	movw	r24, r30
    594a:	80 90 73 41 	lds	r8, 0x4173	; 0x804173 <xTickCount>
    594e:	90 90 74 41 	lds	r9, 0x4174	; 0x804174 <xTickCount+0x1>
    5952:	a0 90 75 41 	lds	r10, 0x4175	; 0x804175 <xTickCount+0x2>
    5956:	b0 90 76 41 	lds	r11, 0x4176	; 0x804176 <xTickCount+0x3>
    595a:	b5 01       	movw	r22, r10
    595c:	a4 01       	movw	r20, r8
    595e:	4c 19       	sub	r20, r12
    5960:	5d 09       	sbc	r21, r13
    5962:	6e 09       	sbc	r22, r14
    5964:	7f 09       	sbc	r23, r15
    5966:	04 1b       	sub	r16, r20
    5968:	15 0b       	sbc	r17, r21
    596a:	26 0b       	sbc	r18, r22
    596c:	37 0b       	sbc	r19, r23
    596e:	08 83       	st	Y, r16
    5970:	19 83       	std	Y+1, r17	; 0x01
    5972:	2a 83       	std	Y+2, r18	; 0x02
    5974:	3b 83       	std	Y+3, r19	; 0x03
    5976:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <vTaskSetTimeOutState>
    597a:	80 e0       	ldi	r24, 0x00	; 0
    597c:	03 c0       	rjmp	.+6      	; 0x5984 <xTaskCheckForTimeOut+0xbc>
    597e:	81 e0       	ldi	r24, 0x01	; 1
    5980:	01 c0       	rjmp	.+2      	; 0x5984 <xTaskCheckForTimeOut+0xbc>
    5982:	81 e0       	ldi	r24, 0x01	; 1
    5984:	0f 90       	pop	r0
    5986:	0f be       	out	0x3f, r0	; 63
    5988:	df 91       	pop	r29
    598a:	cf 91       	pop	r28
    598c:	1f 91       	pop	r17
    598e:	0f 91       	pop	r16
    5990:	ff 90       	pop	r15
    5992:	ef 90       	pop	r14
    5994:	df 90       	pop	r13
    5996:	cf 90       	pop	r12
    5998:	bf 90       	pop	r11
    599a:	af 90       	pop	r10
    599c:	9f 90       	pop	r9
    599e:	8f 90       	pop	r8
    59a0:	08 95       	ret

000059a2 <vTaskMissedYield>:
    59a2:	81 e0       	ldi	r24, 0x01	; 1
    59a4:	80 93 6d 41 	sts	0x416D, r24	; 0x80416d <xMissedYield>
    59a8:	08 95       	ret

000059aa <uxTaskGetStackHighWaterMark>:
    59aa:	00 97       	sbiw	r24, 0x00	; 0
    59ac:	21 f4       	brne	.+8      	; 0x59b6 <uxTaskGetStackHighWaterMark+0xc>
    59ae:	80 91 cb 41 	lds	r24, 0x41CB	; 0x8041cb <pxCurrentTCB>
    59b2:	90 91 cc 41 	lds	r25, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    59b6:	dc 01       	movw	r26, r24
    59b8:	5b 96       	adiw	r26, 0x1b	; 27
    59ba:	ed 91       	ld	r30, X+
    59bc:	fc 91       	ld	r31, X
    59be:	5c 97       	sbiw	r26, 0x1c	; 28
    59c0:	80 81       	ld	r24, Z
    59c2:	81 31       	cpi	r24, 0x11	; 17
    59c4:	41 f4       	brne	.+16     	; 0x59d6 <uxTaskGetStackHighWaterMark+0x2c>
    59c6:	31 96       	adiw	r30, 0x01	; 1
    59c8:	80 e0       	ldi	r24, 0x00	; 0
    59ca:	90 e0       	ldi	r25, 0x00	; 0
    59cc:	01 96       	adiw	r24, 0x01	; 1
    59ce:	21 91       	ld	r18, Z+
    59d0:	21 31       	cpi	r18, 0x11	; 17
    59d2:	e1 f3       	breq	.-8      	; 0x59cc <uxTaskGetStackHighWaterMark+0x22>
    59d4:	08 95       	ret
    59d6:	80 e0       	ldi	r24, 0x00	; 0
    59d8:	90 e0       	ldi	r25, 0x00	; 0
    59da:	08 95       	ret

000059dc <xTaskGetCurrentTaskHandle>:
    59dc:	80 91 cb 41 	lds	r24, 0x41CB	; 0x8041cb <pxCurrentTCB>
    59e0:	90 91 cc 41 	lds	r25, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    59e4:	08 95       	ret

000059e6 <vTaskPriorityInherit>:
    59e6:	0f 93       	push	r16
    59e8:	1f 93       	push	r17
    59ea:	cf 93       	push	r28
    59ec:	df 93       	push	r29
    59ee:	fc 01       	movw	r30, r24
    59f0:	22 8d       	ldd	r18, Z+26	; 0x1a
    59f2:	a0 91 cb 41 	lds	r26, 0x41CB	; 0x8041cb <pxCurrentTCB>
    59f6:	b0 91 cc 41 	lds	r27, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    59fa:	5a 96       	adiw	r26, 0x1a	; 26
    59fc:	8c 91       	ld	r24, X
    59fe:	28 17       	cp	r18, r24
    5a00:	08 f0       	brcs	.+2      	; 0x5a04 <vTaskPriorityInherit+0x1e>
    5a02:	41 c0       	rjmp	.+130    	; 0x5a86 <vTaskPriorityInherit+0xa0>
    5a04:	a0 91 cb 41 	lds	r26, 0x41CB	; 0x8041cb <pxCurrentTCB>
    5a08:	b0 91 cc 41 	lds	r27, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    5a0c:	5a 96       	adiw	r26, 0x1a	; 26
    5a0e:	3c 91       	ld	r19, X
    5a10:	84 e0       	ldi	r24, 0x04	; 4
    5a12:	90 e0       	ldi	r25, 0x00	; 0
    5a14:	a0 e0       	ldi	r26, 0x00	; 0
    5a16:	b0 e0       	ldi	r27, 0x00	; 0
    5a18:	83 1b       	sub	r24, r19
    5a1a:	91 09       	sbc	r25, r1
    5a1c:	a1 09       	sbc	r26, r1
    5a1e:	b1 09       	sbc	r27, r1
    5a20:	86 87       	std	Z+14, r24	; 0x0e
    5a22:	97 87       	std	Z+15, r25	; 0x0f
    5a24:	a0 8b       	std	Z+16, r26	; 0x10
    5a26:	b1 8b       	std	Z+17, r27	; 0x11
    5a28:	8b e0       	ldi	r24, 0x0B	; 11
    5a2a:	28 9f       	mul	r18, r24
    5a2c:	90 01       	movw	r18, r0
    5a2e:	11 24       	eor	r1, r1
    5a30:	21 56       	subi	r18, 0x61	; 97
    5a32:	3e 4b       	sbci	r19, 0xBE	; 190
    5a34:	84 85       	ldd	r24, Z+12	; 0x0c
    5a36:	95 85       	ldd	r25, Z+13	; 0x0d
    5a38:	82 17       	cp	r24, r18
    5a3a:	93 07       	cpc	r25, r19
    5a3c:	e9 f4       	brne	.+58     	; 0x5a78 <vTaskPriorityInherit+0x92>
    5a3e:	8f 01       	movw	r16, r30
    5a40:	ef 01       	movw	r28, r30
    5a42:	22 96       	adiw	r28, 0x02	; 2
    5a44:	ce 01       	movw	r24, r28
    5a46:	0e 94 3a 23 	call	0x4674	; 0x4674 <vListRemove>
    5a4a:	e0 91 cb 41 	lds	r30, 0x41CB	; 0x8041cb <pxCurrentTCB>
    5a4e:	f0 91 cc 41 	lds	r31, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    5a52:	82 8d       	ldd	r24, Z+26	; 0x1a
    5a54:	f8 01       	movw	r30, r16
    5a56:	82 8f       	std	Z+26, r24	; 0x1a
    5a58:	90 91 71 41 	lds	r25, 0x4171	; 0x804171 <uxTopReadyPriority>
    5a5c:	98 17       	cp	r25, r24
    5a5e:	10 f4       	brcc	.+4      	; 0x5a64 <vTaskPriorityInherit+0x7e>
    5a60:	80 93 71 41 	sts	0x4171, r24	; 0x804171 <uxTopReadyPriority>
    5a64:	fb e0       	ldi	r31, 0x0B	; 11
    5a66:	8f 9f       	mul	r24, r31
    5a68:	c0 01       	movw	r24, r0
    5a6a:	11 24       	eor	r1, r1
    5a6c:	be 01       	movw	r22, r28
    5a6e:	81 56       	subi	r24, 0x61	; 97
    5a70:	9e 4b       	sbci	r25, 0xBE	; 190
    5a72:	0e 94 c8 22 	call	0x4590	; 0x4590 <vListInsertEnd>
    5a76:	07 c0       	rjmp	.+14     	; 0x5a86 <vTaskPriorityInherit+0xa0>
    5a78:	a0 91 cb 41 	lds	r26, 0x41CB	; 0x8041cb <pxCurrentTCB>
    5a7c:	b0 91 cc 41 	lds	r27, 0x41CC	; 0x8041cc <pxCurrentTCB+0x1>
    5a80:	5a 96       	adiw	r26, 0x1a	; 26
    5a82:	8c 91       	ld	r24, X
    5a84:	82 8f       	std	Z+26, r24	; 0x1a
    5a86:	df 91       	pop	r29
    5a88:	cf 91       	pop	r28
    5a8a:	1f 91       	pop	r17
    5a8c:	0f 91       	pop	r16
    5a8e:	08 95       	ret

00005a90 <vTaskPriorityDisinherit>:
    5a90:	0f 93       	push	r16
    5a92:	1f 93       	push	r17
    5a94:	cf 93       	push	r28
    5a96:	df 93       	push	r29
    5a98:	00 97       	sbiw	r24, 0x00	; 0
    5a9a:	49 f1       	breq	.+82     	; 0x5aee <vTaskPriorityDisinherit+0x5e>
    5a9c:	fc 01       	movw	r30, r24
    5a9e:	32 8d       	ldd	r19, Z+26	; 0x1a
    5aa0:	27 a1       	ldd	r18, Z+39	; 0x27
    5aa2:	32 17       	cp	r19, r18
    5aa4:	21 f1       	breq	.+72     	; 0x5aee <vTaskPriorityDisinherit+0x5e>
    5aa6:	ec 01       	movw	r28, r24
    5aa8:	8c 01       	movw	r16, r24
    5aaa:	0e 5f       	subi	r16, 0xFE	; 254
    5aac:	1f 4f       	sbci	r17, 0xFF	; 255
    5aae:	c8 01       	movw	r24, r16
    5ab0:	0e 94 3a 23 	call	0x4674	; 0x4674 <vListRemove>
    5ab4:	8f a1       	ldd	r24, Y+39	; 0x27
    5ab6:	8a 8f       	std	Y+26, r24	; 0x1a
    5ab8:	44 e0       	ldi	r20, 0x04	; 4
    5aba:	50 e0       	ldi	r21, 0x00	; 0
    5abc:	60 e0       	ldi	r22, 0x00	; 0
    5abe:	70 e0       	ldi	r23, 0x00	; 0
    5ac0:	48 1b       	sub	r20, r24
    5ac2:	51 09       	sbc	r21, r1
    5ac4:	61 09       	sbc	r22, r1
    5ac6:	71 09       	sbc	r23, r1
    5ac8:	4e 87       	std	Y+14, r20	; 0x0e
    5aca:	5f 87       	std	Y+15, r21	; 0x0f
    5acc:	68 8b       	std	Y+16, r22	; 0x10
    5ace:	79 8b       	std	Y+17, r23	; 0x11
    5ad0:	90 91 71 41 	lds	r25, 0x4171	; 0x804171 <uxTopReadyPriority>
    5ad4:	98 17       	cp	r25, r24
    5ad6:	10 f4       	brcc	.+4      	; 0x5adc <vTaskPriorityDisinherit+0x4c>
    5ad8:	80 93 71 41 	sts	0x4171, r24	; 0x804171 <uxTopReadyPriority>
    5adc:	fb e0       	ldi	r31, 0x0B	; 11
    5ade:	8f 9f       	mul	r24, r31
    5ae0:	c0 01       	movw	r24, r0
    5ae2:	11 24       	eor	r1, r1
    5ae4:	b8 01       	movw	r22, r16
    5ae6:	81 56       	subi	r24, 0x61	; 97
    5ae8:	9e 4b       	sbci	r25, 0xBE	; 190
    5aea:	0e 94 c8 22 	call	0x4590	; 0x4590 <vListInsertEnd>
    5aee:	df 91       	pop	r29
    5af0:	cf 91       	pop	r28
    5af2:	1f 91       	pop	r17
    5af4:	0f 91       	pop	r16
    5af6:	08 95       	ret

00005af8 <_ZN8frt_task22_call_users_run_methodEPS_>:
    5af8:	ec 01       	movw	r28, r24
    5afa:	e8 81       	ld	r30, Y
    5afc:	f9 81       	ldd	r31, Y+1	; 0x01
    5afe:	01 90       	ld	r0, Z+
    5b00:	f0 81       	ld	r31, Z
    5b02:	e0 2d       	mov	r30, r0
    5b04:	19 95       	eicall
    5b06:	1a 82       	std	Y+2, r1	; 0x02
    5b08:	1b 82       	std	Y+3, r1	; 0x03
    5b0a:	6f ef       	ldi	r22, 0xFF	; 255
    5b0c:	7f ef       	ldi	r23, 0xFF	; 255
    5b0e:	cb 01       	movw	r24, r22
    5b10:	0e 94 5f 2b 	call	0x56be	; 0x56be <vTaskDelay>
    5b14:	fa cf       	rjmp	.-12     	; 0x5b0a <_ZN8frt_task22_call_users_run_methodEPS_+0x12>

00005b16 <_ZN8frt_task13transition_toEh>:
    5b16:	fc 01       	movw	r30, r24
    5b18:	64 87       	std	Z+12, r22	; 0x0c
    5b1a:	65 87       	std	Z+13, r22	; 0x0d
    5b1c:	08 95       	ret

00005b1e <_ZN8frt_taskC1EPKchjP8emstream>:
    5b1e:	4f 92       	push	r4
    5b20:	5f 92       	push	r5
    5b22:	6f 92       	push	r6
    5b24:	7f 92       	push	r7
    5b26:	8f 92       	push	r8
    5b28:	9f 92       	push	r9
    5b2a:	af 92       	push	r10
    5b2c:	bf 92       	push	r11
    5b2e:	cf 92       	push	r12
    5b30:	df 92       	push	r13
    5b32:	ef 92       	push	r14
    5b34:	ff 92       	push	r15
    5b36:	0f 93       	push	r16
    5b38:	1f 93       	push	r17
    5b3a:	cf 93       	push	r28
    5b3c:	df 93       	push	r29
    5b3e:	cd b7       	in	r28, 0x3d	; 61
    5b40:	de b7       	in	r29, 0x3e	; 62
    5b42:	2a 97       	sbiw	r28, 0x0a	; 10
    5b44:	cd bf       	out	0x3d, r28	; 61
    5b46:	de bf       	out	0x3e, r29	; 62
    5b48:	4c 01       	movw	r8, r24
    5b4a:	29 01       	movw	r4, r18
    5b4c:	38 01       	movw	r6, r16
    5b4e:	8c e9       	ldi	r24, 0x9C	; 156
    5b50:	90 e2       	ldi	r25, 0x20	; 32
    5b52:	f4 01       	movw	r30, r8
    5b54:	80 83       	st	Z, r24
    5b56:	91 83       	std	Z+1, r25	; 0x01
    5b58:	fb 01       	movw	r30, r22
    5b5a:	80 81       	ld	r24, Z
    5b5c:	88 23       	and	r24, r24
    5b5e:	69 f0       	breq	.+26     	; 0x5b7a <_ZN8frt_taskC1EPKchjP8emstream+0x5c>
    5b60:	de 01       	movw	r26, r28
    5b62:	11 96       	adiw	r26, 0x01	; 1
    5b64:	31 96       	adiw	r30, 0x01	; 1
    5b66:	90 e0       	ldi	r25, 0x00	; 0
    5b68:	02 c0       	rjmp	.+4      	; 0x5b6e <_ZN8frt_taskC1EPKchjP8emstream+0x50>
    5b6a:	99 30       	cpi	r25, 0x09	; 9
    5b6c:	39 f0       	breq	.+14     	; 0x5b7c <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
    5b6e:	9f 5f       	subi	r25, 0xFF	; 255
    5b70:	8d 93       	st	X+, r24
    5b72:	81 91       	ld	r24, Z+
    5b74:	81 11       	cpse	r24, r1
    5b76:	f9 cf       	rjmp	.-14     	; 0x5b6a <_ZN8frt_taskC1EPKchjP8emstream+0x4c>
    5b78:	01 c0       	rjmp	.+2      	; 0x5b7c <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
    5b7a:	90 e0       	ldi	r25, 0x00	; 0
    5b7c:	e1 e0       	ldi	r30, 0x01	; 1
    5b7e:	f0 e0       	ldi	r31, 0x00	; 0
    5b80:	ec 0f       	add	r30, r28
    5b82:	fd 1f       	adc	r31, r29
    5b84:	e9 0f       	add	r30, r25
    5b86:	f1 1d       	adc	r31, r1
    5b88:	10 82       	st	Z, r1
    5b8a:	74 01       	movw	r14, r8
    5b8c:	f2 e0       	ldi	r31, 0x02	; 2
    5b8e:	ef 0e       	add	r14, r31
    5b90:	f1 1c       	adc	r15, r1
    5b92:	a1 2c       	mov	r10, r1
    5b94:	b1 2c       	mov	r11, r1
    5b96:	c1 2c       	mov	r12, r1
    5b98:	d1 2c       	mov	r13, r1
    5b9a:	04 2f       	mov	r16, r20
    5b9c:	94 01       	movw	r18, r8
    5b9e:	a2 01       	movw	r20, r4
    5ba0:	be 01       	movw	r22, r28
    5ba2:	6f 5f       	subi	r22, 0xFF	; 255
    5ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ba6:	82 e5       	ldi	r24, 0x52	; 82
    5ba8:	97 e0       	ldi	r25, 0x07	; 7
    5baa:	0e 94 10 28 	call	0x5020	; 0x5020 <xTaskGenericCreate>
    5bae:	f4 01       	movw	r30, r8
    5bb0:	66 82       	std	Z+6, r6	; 0x06
    5bb2:	77 82       	std	Z+7, r7	; 0x07
    5bb4:	40 86       	std	Z+8, r4	; 0x08
    5bb6:	51 86       	std	Z+9, r5	; 0x09
    5bb8:	20 91 cd 41 	lds	r18, 0x41CD	; 0x8041cd <last_created_task_pointer>
    5bbc:	30 91 ce 41 	lds	r19, 0x41CE	; 0x8041ce <last_created_task_pointer+0x1>
    5bc0:	24 83       	std	Z+4, r18	; 0x04
    5bc2:	35 83       	std	Z+5, r19	; 0x05
    5bc4:	80 92 cd 41 	sts	0x41CD, r8	; 0x8041cd <last_created_task_pointer>
    5bc8:	90 92 ce 41 	sts	0x41CE, r9	; 0x8041ce <last_created_task_pointer+0x1>
    5bcc:	14 86       	std	Z+12, r1	; 0x0c
    5bce:	15 86       	std	Z+13, r1	; 0x0d
    5bd0:	40 90 f3 41 	lds	r4, 0x41F3	; 0x8041f3 <portStackTopForTask>
    5bd4:	50 90 f4 41 	lds	r5, 0x41F4	; 0x8041f4 <portStackTopForTask+0x1>
    5bd8:	ff ef       	ldi	r31, 0xFF	; 255
    5bda:	4f 1a       	sub	r4, r31
    5bdc:	5f 0a       	sbc	r5, r31
    5bde:	40 92 f3 41 	sts	0x41F3, r4	; 0x8041f3 <portStackTopForTask>
    5be2:	50 92 f4 41 	sts	0x41F4, r5	; 0x8041f4 <portStackTopForTask+0x1>
    5be6:	f4 01       	movw	r30, r8
    5be8:	42 86       	std	Z+10, r4	; 0x0a
    5bea:	53 86       	std	Z+11, r5	; 0x0b
    5bec:	16 86       	std	Z+14, r1	; 0x0e
    5bee:	17 86       	std	Z+15, r1	; 0x0f
    5bf0:	10 8a       	std	Z+16, r1	; 0x10
    5bf2:	11 8a       	std	Z+17, r1	; 0x11
    5bf4:	61 14       	cp	r6, r1
    5bf6:	71 04       	cpc	r7, r1
    5bf8:	09 f4       	brne	.+2      	; 0x5bfc <_ZN8frt_taskC1EPKchjP8emstream+0xde>
    5bfa:	44 c0       	rjmp	.+136    	; 0x5c84 <_ZN8frt_taskC1EPKchjP8emstream+0x166>
    5bfc:	81 30       	cpi	r24, 0x01	; 1
    5bfe:	79 f5       	brne	.+94     	; 0x5c5e <_ZN8frt_taskC1EPKchjP8emstream+0x140>
    5c00:	6a e0       	ldi	r22, 0x0A	; 10
    5c02:	c3 01       	movw	r24, r6
    5c04:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    5c08:	7c 01       	movw	r14, r24
    5c0a:	6b e2       	ldi	r22, 0x2B	; 43
    5c0c:	7e e0       	ldi	r23, 0x0E	; 14
    5c0e:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    5c12:	be 01       	movw	r22, r28
    5c14:	6f 5f       	subi	r22, 0xFF	; 255
    5c16:	7f 4f       	sbci	r23, 0xFF	; 255
    5c18:	c7 01       	movw	r24, r14
    5c1a:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    5c1e:	6a e0       	ldi	r22, 0x0A	; 10
    5c20:	c7 01       	movw	r24, r14
    5c22:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    5c26:	7c 01       	movw	r14, r24
    5c28:	62 e2       	ldi	r22, 0x22	; 34
    5c2a:	7e e0       	ldi	r23, 0x0E	; 14
    5c2c:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    5c30:	6a e0       	ldi	r22, 0x0A	; 10
    5c32:	c7 01       	movw	r24, r14
    5c34:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    5c38:	7c 01       	movw	r14, r24
    5c3a:	64 e1       	ldi	r22, 0x14	; 20
    5c3c:	7e e0       	ldi	r23, 0x0E	; 14
    5c3e:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    5c42:	63 e0       	ldi	r22, 0x03	; 3
    5c44:	c7 01       	movw	r24, r14
    5c46:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    5c4a:	b2 01       	movw	r22, r4
    5c4c:	0e 94 fd 31 	call	0x63fa	; 0x63fa <_ZN8emstreamlsEj>
    5c50:	62 e0       	ldi	r22, 0x02	; 2
    5c52:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    5c56:	66 e0       	ldi	r22, 0x06	; 6
    5c58:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    5c5c:	13 c0       	rjmp	.+38     	; 0x5c84 <_ZN8frt_taskC1EPKchjP8emstream+0x166>
    5c5e:	6a e0       	ldi	r22, 0x0A	; 10
    5c60:	c3 01       	movw	r24, r6
    5c62:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    5c66:	4c 01       	movw	r8, r24
    5c68:	6f ef       	ldi	r22, 0xFF	; 255
    5c6a:	7d e0       	ldi	r23, 0x0D	; 13
    5c6c:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    5c70:	be 01       	movw	r22, r28
    5c72:	6f 5f       	subi	r22, 0xFF	; 255
    5c74:	7f 4f       	sbci	r23, 0xFF	; 255
    5c76:	c4 01       	movw	r24, r8
    5c78:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    5c7c:	66 e0       	ldi	r22, 0x06	; 6
    5c7e:	c4 01       	movw	r24, r8
    5c80:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    5c84:	2a 96       	adiw	r28, 0x0a	; 10
    5c86:	cd bf       	out	0x3d, r28	; 61
    5c88:	de bf       	out	0x3e, r29	; 62
    5c8a:	df 91       	pop	r29
    5c8c:	cf 91       	pop	r28
    5c8e:	1f 91       	pop	r17
    5c90:	0f 91       	pop	r16
    5c92:	ff 90       	pop	r15
    5c94:	ef 90       	pop	r14
    5c96:	df 90       	pop	r13
    5c98:	cf 90       	pop	r12
    5c9a:	bf 90       	pop	r11
    5c9c:	af 90       	pop	r10
    5c9e:	9f 90       	pop	r9
    5ca0:	8f 90       	pop	r8
    5ca2:	7f 90       	pop	r7
    5ca4:	6f 90       	pop	r6
    5ca6:	5f 90       	pop	r5
    5ca8:	4f 90       	pop	r4
    5caa:	08 95       	ret

00005cac <_ZN8frt_task12print_statusER8emstream>:
    5cac:	8f 92       	push	r8
    5cae:	9f 92       	push	r9
    5cb0:	af 92       	push	r10
    5cb2:	bf 92       	push	r11
    5cb4:	cf 92       	push	r12
    5cb6:	df 92       	push	r13
    5cb8:	ef 92       	push	r14
    5cba:	ff 92       	push	r15
    5cbc:	0f 93       	push	r16
    5cbe:	1f 93       	push	r17
    5cc0:	cf 93       	push	r28
    5cc2:	df 93       	push	r29
    5cc4:	ec 01       	movw	r28, r24
    5cc6:	8b 01       	movw	r16, r22
    5cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    5cca:	9b 81       	ldd	r25, Y+3	; 0x03
    5ccc:	0e 94 67 29 	call	0x52ce	; 0x52ce <pcTaskGetTaskName>
    5cd0:	bc 01       	movw	r22, r24
    5cd2:	c8 01       	movw	r24, r16
    5cd4:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    5cd8:	d8 01       	movw	r26, r16
    5cda:	ed 91       	ld	r30, X+
    5cdc:	fc 91       	ld	r31, X
    5cde:	02 80       	ldd	r0, Z+2	; 0x02
    5ce0:	f3 81       	ldd	r31, Z+3	; 0x03
    5ce2:	e0 2d       	mov	r30, r0
    5ce4:	69 e0       	ldi	r22, 0x09	; 9
    5ce6:	c8 01       	movw	r24, r16
    5ce8:	19 95       	eicall
    5cea:	8a 81       	ldd	r24, Y+2	; 0x02
    5cec:	9b 81       	ldd	r25, Y+3	; 0x03
    5cee:	0e 94 67 29 	call	0x52ce	; 0x52ce <pcTaskGetTaskName>
    5cf2:	fc 01       	movw	r30, r24
    5cf4:	01 90       	ld	r0, Z+
    5cf6:	00 20       	and	r0, r0
    5cf8:	e9 f7       	brne	.-6      	; 0x5cf4 <_ZN8frt_task12print_statusER8emstream+0x48>
    5cfa:	31 97       	sbiw	r30, 0x01	; 1
    5cfc:	e8 1b       	sub	r30, r24
    5cfe:	f9 0b       	sbc	r31, r25
    5d00:	38 97       	sbiw	r30, 0x08	; 8
    5d02:	48 f4       	brcc	.+18     	; 0x5d16 <_ZN8frt_task12print_statusER8emstream+0x6a>
    5d04:	d8 01       	movw	r26, r16
    5d06:	ed 91       	ld	r30, X+
    5d08:	fc 91       	ld	r31, X
    5d0a:	02 80       	ldd	r0, Z+2	; 0x02
    5d0c:	f3 81       	ldd	r31, Z+3	; 0x03
    5d0e:	e0 2d       	mov	r30, r0
    5d10:	69 e0       	ldi	r22, 0x09	; 9
    5d12:	c8 01       	movw	r24, r16
    5d14:	19 95       	eicall
    5d16:	ce 84       	ldd	r12, Y+14	; 0x0e
    5d18:	df 84       	ldd	r13, Y+15	; 0x0f
    5d1a:	e8 88       	ldd	r14, Y+16	; 0x10
    5d1c:	f9 88       	ldd	r15, Y+17	; 0x11
    5d1e:	a8 84       	ldd	r10, Y+8	; 0x08
    5d20:	b9 84       	ldd	r11, Y+9	; 0x09
    5d22:	8a 81       	ldd	r24, Y+2	; 0x02
    5d24:	9b 81       	ldd	r25, Y+3	; 0x03
    5d26:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <uxTaskGetStackHighWaterMark>
    5d2a:	98 2e       	mov	r9, r24
    5d2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    5d30:	9b 81       	ldd	r25, Y+3	; 0x03
    5d32:	0e 94 12 29 	call	0x5224	; 0x5224 <uxTaskPriorityGet>
    5d36:	68 2f       	mov	r22, r24
    5d38:	c8 01       	movw	r24, r16
    5d3a:	0e 94 73 32 	call	0x64e6	; 0x64e6 <_ZN8emstreamlsEh>
    5d3e:	6a e0       	ldi	r22, 0x0A	; 10
    5d40:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    5d44:	ec 01       	movw	r28, r24
    5d46:	61 ea       	ldi	r22, 0xA1	; 161
    5d48:	7e e0       	ldi	r23, 0x0E	; 14
    5d4a:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    5d4e:	68 2d       	mov	r22, r8
    5d50:	ce 01       	movw	r24, r28
    5d52:	0e 94 73 32 	call	0x64e6	; 0x64e6 <_ZN8emstreamlsEh>
    5d56:	6a e0       	ldi	r22, 0x0A	; 10
    5d58:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    5d5c:	ec 01       	movw	r28, r24
    5d5e:	6f e9       	ldi	r22, 0x9F	; 159
    5d60:	7e e0       	ldi	r23, 0x0E	; 14
    5d62:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    5d66:	69 2d       	mov	r22, r9
    5d68:	ce 01       	movw	r24, r28
    5d6a:	0e 94 73 32 	call	0x64e6	; 0x64e6 <_ZN8emstreamlsEh>
    5d6e:	6a e0       	ldi	r22, 0x0A	; 10
    5d70:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    5d74:	ec 01       	movw	r28, r24
    5d76:	6d e9       	ldi	r22, 0x9D	; 157
    5d78:	7e e0       	ldi	r23, 0x0E	; 14
    5d7a:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    5d7e:	b5 01       	movw	r22, r10
    5d80:	ce 01       	movw	r24, r28
    5d82:	0e 94 fd 31 	call	0x63fa	; 0x63fa <_ZN8emstreamlsEj>
    5d86:	6a e0       	ldi	r22, 0x0A	; 10
    5d88:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    5d8c:	ec 01       	movw	r28, r24
    5d8e:	6b e9       	ldi	r22, 0x9B	; 155
    5d90:	7e e0       	ldi	r23, 0x0E	; 14
    5d92:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    5d96:	6a e0       	ldi	r22, 0x0A	; 10
    5d98:	ce 01       	movw	r24, r28
    5d9a:	0e 94 54 30 	call	0x60a8	; 0x60a8 <_ZN8emstreamlsE15ser_manipulator>
    5d9e:	ec 01       	movw	r28, r24
    5da0:	69 e9       	ldi	r22, 0x99	; 153
    5da2:	7e e0       	ldi	r23, 0x0E	; 14
    5da4:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    5da8:	b7 01       	movw	r22, r14
    5daa:	a6 01       	movw	r20, r12
    5dac:	ce 01       	movw	r24, r28
    5dae:	0e 94 31 32 	call	0x6462	; 0x6462 <_ZN8emstreamlsEm>
    5db2:	df 91       	pop	r29
    5db4:	cf 91       	pop	r28
    5db6:	1f 91       	pop	r17
    5db8:	0f 91       	pop	r16
    5dba:	ff 90       	pop	r15
    5dbc:	ef 90       	pop	r14
    5dbe:	df 90       	pop	r13
    5dc0:	cf 90       	pop	r12
    5dc2:	bf 90       	pop	r11
    5dc4:	af 90       	pop	r10
    5dc6:	9f 90       	pop	r9
    5dc8:	8f 90       	pop	r8
    5dca:	08 95       	ret

00005dcc <_ZN14frt_text_queue7getcharEv>:
    5dcc:	0f 93       	push	r16
    5dce:	cf 93       	push	r28
    5dd0:	df 93       	push	r29
    5dd2:	1f 92       	push	r1
    5dd4:	cd b7       	in	r28, 0x3d	; 61
    5dd6:	de b7       	in	r29, 0x3e	; 62
    5dd8:	00 e0       	ldi	r16, 0x00	; 0
    5dda:	2f ef       	ldi	r18, 0xFF	; 255
    5ddc:	3f ef       	ldi	r19, 0xFF	; 255
    5dde:	a9 01       	movw	r20, r18
    5de0:	be 01       	movw	r22, r28
    5de2:	6f 5f       	subi	r22, 0xFF	; 255
    5de4:	7f 4f       	sbci	r23, 0xFF	; 255
    5de6:	fc 01       	movw	r30, r24
    5de8:	80 85       	ldd	r24, Z+8	; 0x08
    5dea:	91 85       	ldd	r25, Z+9	; 0x09
    5dec:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <xQueueGenericReceive>
    5df0:	81 30       	cpi	r24, 0x01	; 1
    5df2:	19 f4       	brne	.+6      	; 0x5dfa <_ZN14frt_text_queue7getcharEv+0x2e>
    5df4:	89 81       	ldd	r24, Y+1	; 0x01
    5df6:	90 e0       	ldi	r25, 0x00	; 0
    5df8:	02 c0       	rjmp	.+4      	; 0x5dfe <_ZN14frt_text_queue7getcharEv+0x32>
    5dfa:	8f ef       	ldi	r24, 0xFF	; 255
    5dfc:	9f ef       	ldi	r25, 0xFF	; 255
    5dfe:	0f 90       	pop	r0
    5e00:	df 91       	pop	r29
    5e02:	cf 91       	pop	r28
    5e04:	0f 91       	pop	r16
    5e06:	08 95       	ret

00005e08 <_ZN14frt_text_queue14check_for_charEv>:
    5e08:	fc 01       	movw	r30, r24
    5e0a:	80 85       	ldd	r24, Z+8	; 0x08
    5e0c:	91 85       	ldd	r25, Z+9	; 0x09
    5e0e:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <uxQueueMessagesWaiting>
    5e12:	91 e0       	ldi	r25, 0x01	; 1
    5e14:	81 11       	cpse	r24, r1
    5e16:	01 c0       	rjmp	.+2      	; 0x5e1a <_ZN14frt_text_queue14check_for_charEv+0x12>
    5e18:	90 e0       	ldi	r25, 0x00	; 0
    5e1a:	89 2f       	mov	r24, r25
    5e1c:	08 95       	ret

00005e1e <_ZN14frt_text_queue7putcharEc>:
    5e1e:	0f 93       	push	r16
    5e20:	cf 93       	push	r28
    5e22:	df 93       	push	r29
    5e24:	1f 92       	push	r1
    5e26:	cd b7       	in	r28, 0x3d	; 61
    5e28:	de b7       	in	r29, 0x3e	; 62
    5e2a:	69 83       	std	Y+1, r22	; 0x01
    5e2c:	fc 01       	movw	r30, r24
    5e2e:	22 85       	ldd	r18, Z+10	; 0x0a
    5e30:	33 85       	ldd	r19, Z+11	; 0x0b
    5e32:	44 85       	ldd	r20, Z+12	; 0x0c
    5e34:	55 85       	ldd	r21, Z+13	; 0x0d
    5e36:	00 e0       	ldi	r16, 0x00	; 0
    5e38:	be 01       	movw	r22, r28
    5e3a:	6f 5f       	subi	r22, 0xFF	; 255
    5e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    5e3e:	80 85       	ldd	r24, Z+8	; 0x08
    5e40:	91 85       	ldd	r25, Z+9	; 0x09
    5e42:	0e 94 f7 25 	call	0x4bee	; 0x4bee <xQueueGenericSend>
    5e46:	91 e0       	ldi	r25, 0x01	; 1
    5e48:	81 11       	cpse	r24, r1
    5e4a:	01 c0       	rjmp	.+2      	; 0x5e4e <_ZN14frt_text_queue7putcharEc+0x30>
    5e4c:	90 e0       	ldi	r25, 0x00	; 0
    5e4e:	89 2f       	mov	r24, r25
    5e50:	0f 90       	pop	r0
    5e52:	df 91       	pop	r29
    5e54:	cf 91       	pop	r28
    5e56:	0f 91       	pop	r16
    5e58:	08 95       	ret

00005e5a <_ZN14frt_text_queueC1EjP8emstreamm>:
    5e5a:	8f 92       	push	r8
    5e5c:	9f 92       	push	r9
    5e5e:	bf 92       	push	r11
    5e60:	cf 92       	push	r12
    5e62:	df 92       	push	r13
    5e64:	ef 92       	push	r14
    5e66:	ff 92       	push	r15
    5e68:	0f 93       	push	r16
    5e6a:	1f 93       	push	r17
    5e6c:	cf 93       	push	r28
    5e6e:	df 93       	push	r29
    5e70:	ec 01       	movw	r28, r24
    5e72:	b6 2e       	mov	r11, r22
    5e74:	4a 01       	movw	r8, r20
    5e76:	68 01       	movw	r12, r16
    5e78:	79 01       	movw	r14, r18
    5e7a:	0e 94 0f 30 	call	0x601e	; 0x601e <_ZN8emstreamC1Ev>
    5e7e:	84 ea       	ldi	r24, 0xA4	; 164
    5e80:	90 e2       	ldi	r25, 0x20	; 32
    5e82:	88 83       	st	Y, r24
    5e84:	99 83       	std	Y+1, r25	; 0x01
    5e86:	8e 86       	std	Y+14, r8	; 0x0e
    5e88:	9f 86       	std	Y+15, r9	; 0x0f
    5e8a:	40 e0       	ldi	r20, 0x00	; 0
    5e8c:	61 e0       	ldi	r22, 0x01	; 1
    5e8e:	8b 2d       	mov	r24, r11
    5e90:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <xQueueGenericCreate>
    5e94:	88 87       	std	Y+8, r24	; 0x08
    5e96:	99 87       	std	Y+9, r25	; 0x09
    5e98:	ca 86       	std	Y+10, r12	; 0x0a
    5e9a:	db 86       	std	Y+11, r13	; 0x0b
    5e9c:	ec 86       	std	Y+12, r14	; 0x0c
    5e9e:	fd 86       	std	Y+13, r15	; 0x0d
    5ea0:	df 91       	pop	r29
    5ea2:	cf 91       	pop	r28
    5ea4:	1f 91       	pop	r17
    5ea6:	0f 91       	pop	r16
    5ea8:	ff 90       	pop	r15
    5eaa:	ef 90       	pop	r14
    5eac:	df 90       	pop	r13
    5eae:	cf 90       	pop	r12
    5eb0:	bf 90       	pop	r11
    5eb2:	9f 90       	pop	r9
    5eb4:	8f 90       	pop	r8
    5eb6:	08 95       	ret

00005eb8 <_Znwj>:
    5eb8:	0e 94 e6 21 	call	0x43cc	; 0x43cc <pvPortMalloc>
    5ebc:	08 95       	ret

00005ebe <_Znaj>:
    5ebe:	0e 94 e6 21 	call	0x43cc	; 0x43cc <pvPortMalloc>
    5ec2:	08 95       	ret

00005ec4 <__cxa_pure_virtual>:
    5ec4:	08 95       	ret

00005ec6 <_ZN7base232C1EjP12USART_struct>:
    5ec6:	cf 93       	push	r28
    5ec8:	df 93       	push	r29
    5eca:	fc 01       	movw	r30, r24
    5ecc:	da 01       	movw	r26, r20
    5ece:	40 3a       	cpi	r20, 0xA0	; 160
    5ed0:	68 e0       	ldi	r22, 0x08	; 8
    5ed2:	56 07       	cpc	r21, r22
    5ed4:	49 f4       	brne	.+18     	; 0x5ee8 <_ZN7base232C1EjP12USART_struct+0x22>
    5ed6:	80 e4       	ldi	r24, 0x40	; 64
    5ed8:	96 e0       	ldi	r25, 0x06	; 6
    5eda:	82 83       	std	Z+2, r24	; 0x02
    5edc:	93 83       	std	Z+3, r25	; 0x03
    5ede:	82 e0       	ldi	r24, 0x02	; 2
    5ee0:	84 83       	std	Z+4, r24	; 0x04
    5ee2:	83 e0       	ldi	r24, 0x03	; 3
    5ee4:	85 83       	std	Z+5, r24	; 0x05
    5ee6:	3f c0       	rjmp	.+126    	; 0x5f66 <_ZN7base232C1EjP12USART_struct+0xa0>
    5ee8:	40 3b       	cpi	r20, 0xB0	; 176
    5eea:	78 e0       	ldi	r23, 0x08	; 8
    5eec:	57 07       	cpc	r21, r23
    5eee:	49 f4       	brne	.+18     	; 0x5f02 <_ZN7base232C1EjP12USART_struct+0x3c>
    5ef0:	80 e4       	ldi	r24, 0x40	; 64
    5ef2:	96 e0       	ldi	r25, 0x06	; 6
    5ef4:	82 83       	std	Z+2, r24	; 0x02
    5ef6:	93 83       	std	Z+3, r25	; 0x03
    5ef8:	86 e0       	ldi	r24, 0x06	; 6
    5efa:	84 83       	std	Z+4, r24	; 0x04
    5efc:	87 e0       	ldi	r24, 0x07	; 7
    5efe:	85 83       	std	Z+5, r24	; 0x05
    5f00:	32 c0       	rjmp	.+100    	; 0x5f66 <_ZN7base232C1EjP12USART_struct+0xa0>
    5f02:	40 3a       	cpi	r20, 0xA0	; 160
    5f04:	89 e0       	ldi	r24, 0x09	; 9
    5f06:	58 07       	cpc	r21, r24
    5f08:	49 f4       	brne	.+18     	; 0x5f1c <_ZN7base232C1EjP12USART_struct+0x56>
    5f0a:	80 e6       	ldi	r24, 0x60	; 96
    5f0c:	96 e0       	ldi	r25, 0x06	; 6
    5f0e:	82 83       	std	Z+2, r24	; 0x02
    5f10:	93 83       	std	Z+3, r25	; 0x03
    5f12:	82 e0       	ldi	r24, 0x02	; 2
    5f14:	84 83       	std	Z+4, r24	; 0x04
    5f16:	83 e0       	ldi	r24, 0x03	; 3
    5f18:	85 83       	std	Z+5, r24	; 0x05
    5f1a:	25 c0       	rjmp	.+74     	; 0x5f66 <_ZN7base232C1EjP12USART_struct+0xa0>
    5f1c:	40 3b       	cpi	r20, 0xB0	; 176
    5f1e:	69 e0       	ldi	r22, 0x09	; 9
    5f20:	56 07       	cpc	r21, r22
    5f22:	49 f4       	brne	.+18     	; 0x5f36 <_ZN7base232C1EjP12USART_struct+0x70>
    5f24:	80 e6       	ldi	r24, 0x60	; 96
    5f26:	96 e0       	ldi	r25, 0x06	; 6
    5f28:	82 83       	std	Z+2, r24	; 0x02
    5f2a:	93 83       	std	Z+3, r25	; 0x03
    5f2c:	86 e0       	ldi	r24, 0x06	; 6
    5f2e:	84 83       	std	Z+4, r24	; 0x04
    5f30:	87 e0       	ldi	r24, 0x07	; 7
    5f32:	85 83       	std	Z+5, r24	; 0x05
    5f34:	18 c0       	rjmp	.+48     	; 0x5f66 <_ZN7base232C1EjP12USART_struct+0xa0>
    5f36:	40 3a       	cpi	r20, 0xA0	; 160
    5f38:	7a e0       	ldi	r23, 0x0A	; 10
    5f3a:	57 07       	cpc	r21, r23
    5f3c:	49 f4       	brne	.+18     	; 0x5f50 <_ZN7base232C1EjP12USART_struct+0x8a>
    5f3e:	80 e8       	ldi	r24, 0x80	; 128
    5f40:	96 e0       	ldi	r25, 0x06	; 6
    5f42:	82 83       	std	Z+2, r24	; 0x02
    5f44:	93 83       	std	Z+3, r25	; 0x03
    5f46:	82 e0       	ldi	r24, 0x02	; 2
    5f48:	84 83       	std	Z+4, r24	; 0x04
    5f4a:	83 e0       	ldi	r24, 0x03	; 3
    5f4c:	85 83       	std	Z+5, r24	; 0x05
    5f4e:	0b c0       	rjmp	.+22     	; 0x5f66 <_ZN7base232C1EjP12USART_struct+0xa0>
    5f50:	40 3a       	cpi	r20, 0xA0	; 160
    5f52:	5b 40       	sbci	r21, 0x0B	; 11
    5f54:	41 f4       	brne	.+16     	; 0x5f66 <_ZN7base232C1EjP12USART_struct+0xa0>
    5f56:	80 ea       	ldi	r24, 0xA0	; 160
    5f58:	96 e0       	ldi	r25, 0x06	; 6
    5f5a:	82 83       	std	Z+2, r24	; 0x02
    5f5c:	93 83       	std	Z+3, r25	; 0x03
    5f5e:	82 e0       	ldi	r24, 0x02	; 2
    5f60:	84 83       	std	Z+4, r24	; 0x04
    5f62:	83 e0       	ldi	r24, 0x03	; 3
    5f64:	85 83       	std	Z+5, r24	; 0x05
    5f66:	a6 83       	std	Z+6, r26	; 0x06
    5f68:	b7 83       	std	Z+7, r27	; 0x07
    5f6a:	cd 01       	movw	r24, r26
    5f6c:	01 96       	adiw	r24, 0x01	; 1
    5f6e:	80 87       	std	Z+8, r24	; 0x08
    5f70:	91 87       	std	Z+9, r25	; 0x09
    5f72:	03 96       	adiw	r24, 0x03	; 3
    5f74:	82 87       	std	Z+10, r24	; 0x0a
    5f76:	93 87       	std	Z+11, r25	; 0x0b
    5f78:	25 81       	ldd	r18, Z+5	; 0x05
    5f7a:	c2 81       	ldd	r28, Z+2	; 0x02
    5f7c:	d3 81       	ldd	r29, Z+3	; 0x03
    5f7e:	4c 81       	ldd	r20, Y+4	; 0x04
    5f80:	81 e0       	ldi	r24, 0x01	; 1
    5f82:	90 e0       	ldi	r25, 0x00	; 0
    5f84:	bc 01       	movw	r22, r24
    5f86:	02 c0       	rjmp	.+4      	; 0x5f8c <_ZN7base232C1EjP12USART_struct+0xc6>
    5f88:	66 0f       	add	r22, r22
    5f8a:	77 1f       	adc	r23, r23
    5f8c:	2a 95       	dec	r18
    5f8e:	e2 f7       	brpl	.-8      	; 0x5f88 <_ZN7base232C1EjP12USART_struct+0xc2>
    5f90:	9b 01       	movw	r18, r22
    5f92:	24 2b       	or	r18, r20
    5f94:	2c 83       	std	Y+4, r18	; 0x04
    5f96:	25 81       	ldd	r18, Z+5	; 0x05
    5f98:	c2 81       	ldd	r28, Z+2	; 0x02
    5f9a:	d3 81       	ldd	r29, Z+3	; 0x03
    5f9c:	48 81       	ld	r20, Y
    5f9e:	bc 01       	movw	r22, r24
    5fa0:	02 c0       	rjmp	.+4      	; 0x5fa6 <_ZN7base232C1EjP12USART_struct+0xe0>
    5fa2:	66 0f       	add	r22, r22
    5fa4:	77 1f       	adc	r23, r23
    5fa6:	2a 95       	dec	r18
    5fa8:	e2 f7       	brpl	.-8      	; 0x5fa2 <_ZN7base232C1EjP12USART_struct+0xdc>
    5faa:	9b 01       	movw	r18, r22
    5fac:	24 2b       	or	r18, r20
    5fae:	28 83       	st	Y, r18
    5fb0:	34 81       	ldd	r19, Z+4	; 0x04
    5fb2:	c2 81       	ldd	r28, Z+2	; 0x02
    5fb4:	d3 81       	ldd	r29, Z+3	; 0x03
    5fb6:	28 81       	ld	r18, Y
    5fb8:	02 c0       	rjmp	.+4      	; 0x5fbe <_ZN7base232C1EjP12USART_struct+0xf8>
    5fba:	88 0f       	add	r24, r24
    5fbc:	99 1f       	adc	r25, r25
    5fbe:	3a 95       	dec	r19
    5fc0:	e2 f7       	brpl	.-8      	; 0x5fba <_ZN7base232C1EjP12USART_struct+0xf4>
    5fc2:	80 95       	com	r24
    5fc4:	90 95       	com	r25
    5fc6:	82 23       	and	r24, r18
    5fc8:	88 83       	st	Y, r24
    5fca:	80 e1       	ldi	r24, 0x10	; 16
    5fcc:	13 96       	adiw	r26, 0x03	; 3
    5fce:	8c 93       	st	X, r24
    5fd0:	13 97       	sbiw	r26, 0x03	; 3
    5fd2:	83 e0       	ldi	r24, 0x03	; 3
    5fd4:	15 96       	adiw	r26, 0x05	; 5
    5fd6:	8c 93       	st	X, r24
    5fd8:	15 97       	sbiw	r26, 0x05	; 5
    5fda:	80 ef       	ldi	r24, 0xF0	; 240
    5fdc:	17 96       	adiw	r26, 0x07	; 7
    5fde:	8c 93       	st	X, r24
    5fe0:	17 97       	sbiw	r26, 0x07	; 7
    5fe2:	81 e2       	ldi	r24, 0x21	; 33
    5fe4:	16 96       	adiw	r26, 0x06	; 6
    5fe6:	8c 93       	st	X, r24
    5fe8:	16 97       	sbiw	r26, 0x06	; 6
    5fea:	88 e1       	ldi	r24, 0x18	; 24
    5fec:	14 96       	adiw	r26, 0x04	; 4
    5fee:	8c 93       	st	X, r24
    5ff0:	80 e8       	ldi	r24, 0x80	; 128
    5ff2:	85 87       	std	Z+13, r24	; 0x0d
    5ff4:	80 e4       	ldi	r24, 0x40	; 64
    5ff6:	86 87       	std	Z+14, r24	; 0x0e
    5ff8:	80 e2       	ldi	r24, 0x20	; 32
    5ffa:	84 87       	std	Z+12, r24	; 0x0c
    5ffc:	06 80       	ldd	r0, Z+6	; 0x06
    5ffe:	f7 81       	ldd	r31, Z+7	; 0x07
    6000:	e0 2d       	mov	r30, r0
    6002:	80 81       	ld	r24, Z
    6004:	80 81       	ld	r24, Z
    6006:	df 91       	pop	r29
    6008:	cf 91       	pop	r28
    600a:	08 95       	ret

0000600c <_ZN8emstream13ready_to_sendEv>:
    600c:	81 e0       	ldi	r24, 0x01	; 1
    600e:	08 95       	ret

00006010 <_ZN8emstream7getcharEv>:
    6010:	80 e0       	ldi	r24, 0x00	; 0
    6012:	90 e0       	ldi	r25, 0x00	; 0
    6014:	08 95       	ret

00006016 <_ZN8emstream14check_for_charEv>:
    6016:	80 e0       	ldi	r24, 0x00	; 0
    6018:	08 95       	ret

0000601a <_ZN8emstream12transmit_nowEv>:
    601a:	08 95       	ret

0000601c <_ZN8emstream12clear_screenEv>:
    601c:	08 95       	ret

0000601e <_ZN8emstreamC1Ev>:
    601e:	fc 01       	movw	r30, r24
    6020:	84 eb       	ldi	r24, 0xB4	; 180
    6022:	90 e2       	ldi	r25, 0x20	; 32
    6024:	80 83       	st	Z, r24
    6026:	91 83       	std	Z+1, r25	; 0x01
    6028:	8a e0       	ldi	r24, 0x0A	; 10
    602a:	82 83       	std	Z+2, r24	; 0x02
    602c:	13 82       	std	Z+3, r1	; 0x03
    602e:	83 e0       	ldi	r24, 0x03	; 3
    6030:	85 83       	std	Z+5, r24	; 0x05
    6032:	14 82       	std	Z+4, r1	; 0x04
    6034:	16 82       	std	Z+6, r1	; 0x06
    6036:	17 82       	std	Z+7, r1	; 0x07
    6038:	08 95       	ret

0000603a <_ZN8emstream4putsEPKc>:
    603a:	0f 93       	push	r16
    603c:	1f 93       	push	r17
    603e:	cf 93       	push	r28
    6040:	df 93       	push	r29
    6042:	8c 01       	movw	r16, r24
    6044:	fb 01       	movw	r30, r22
    6046:	dc 01       	movw	r26, r24
    6048:	14 96       	adiw	r26, 0x04	; 4
    604a:	8c 91       	ld	r24, X
    604c:	81 11       	cpse	r24, r1
    604e:	04 c0       	rjmp	.+8      	; 0x6058 <_ZN8emstream4putsEPKc+0x1e>
    6050:	60 81       	ld	r22, Z
    6052:	61 11       	cpse	r22, r1
    6054:	17 c0       	rjmp	.+46     	; 0x6084 <_ZN8emstream4putsEPKc+0x4a>
    6056:	23 c0       	rjmp	.+70     	; 0x609e <_ZN8emstream4putsEPKc+0x64>
    6058:	d8 01       	movw	r26, r16
    605a:	14 96       	adiw	r26, 0x04	; 4
    605c:	1c 92       	st	X, r1
    605e:	eb 01       	movw	r28, r22
    6060:	21 96       	adiw	r28, 0x01	; 1
    6062:	64 91       	lpm	r22, Z
    6064:	66 23       	and	r22, r22
    6066:	d9 f0       	breq	.+54     	; 0x609e <_ZN8emstream4putsEPKc+0x64>
    6068:	d8 01       	movw	r26, r16
    606a:	ed 91       	ld	r30, X+
    606c:	fc 91       	ld	r31, X
    606e:	02 80       	ldd	r0, Z+2	; 0x02
    6070:	f3 81       	ldd	r31, Z+3	; 0x03
    6072:	e0 2d       	mov	r30, r0
    6074:	c8 01       	movw	r24, r16
    6076:	19 95       	eicall
    6078:	fe 01       	movw	r30, r28
    607a:	64 91       	lpm	r22, Z
    607c:	21 96       	adiw	r28, 0x01	; 1
    607e:	61 11       	cpse	r22, r1
    6080:	f3 cf       	rjmp	.-26     	; 0x6068 <_ZN8emstream4putsEPKc+0x2e>
    6082:	0d c0       	rjmp	.+26     	; 0x609e <_ZN8emstream4putsEPKc+0x64>
    6084:	ef 01       	movw	r28, r30
    6086:	21 96       	adiw	r28, 0x01	; 1
    6088:	d8 01       	movw	r26, r16
    608a:	ed 91       	ld	r30, X+
    608c:	fc 91       	ld	r31, X
    608e:	02 80       	ldd	r0, Z+2	; 0x02
    6090:	f3 81       	ldd	r31, Z+3	; 0x03
    6092:	e0 2d       	mov	r30, r0
    6094:	c8 01       	movw	r24, r16
    6096:	19 95       	eicall
    6098:	69 91       	ld	r22, Y+
    609a:	61 11       	cpse	r22, r1
    609c:	f5 cf       	rjmp	.-22     	; 0x6088 <_ZN8emstream4putsEPKc+0x4e>
    609e:	df 91       	pop	r29
    60a0:	cf 91       	pop	r28
    60a2:	1f 91       	pop	r17
    60a4:	0f 91       	pop	r16
    60a6:	08 95       	ret

000060a8 <_ZN8emstreamlsE15ser_manipulator>:
    60a8:	cf 93       	push	r28
    60aa:	df 93       	push	r29
    60ac:	ec 01       	movw	r28, r24
    60ae:	86 2f       	mov	r24, r22
    60b0:	90 e0       	ldi	r25, 0x00	; 0
    60b2:	8b 30       	cpi	r24, 0x0B	; 11
    60b4:	91 05       	cpc	r25, r1
    60b6:	d8 f5       	brcc	.+118    	; 0x612e <_ZN8emstreamlsE15ser_manipulator+0x86>
    60b8:	fc 01       	movw	r30, r24
    60ba:	88 27       	eor	r24, r24
    60bc:	e2 53       	subi	r30, 0x32	; 50
    60be:	fe 4f       	sbci	r31, 0xFE	; 254
    60c0:	8f 4f       	sbci	r24, 0xFF	; 255
    60c2:	0c 94 49 38 	jmp	0x7092	; 0x7092 <__tablejump2__>
    60c6:	82 e0       	ldi	r24, 0x02	; 2
    60c8:	8a 83       	std	Y+2, r24	; 0x02
    60ca:	31 c0       	rjmp	.+98     	; 0x612e <_ZN8emstreamlsE15ser_manipulator+0x86>
    60cc:	88 e0       	ldi	r24, 0x08	; 8
    60ce:	8a 83       	std	Y+2, r24	; 0x02
    60d0:	2e c0       	rjmp	.+92     	; 0x612e <_ZN8emstreamlsE15ser_manipulator+0x86>
    60d2:	8a e0       	ldi	r24, 0x0A	; 10
    60d4:	8a 83       	std	Y+2, r24	; 0x02
    60d6:	2b c0       	rjmp	.+86     	; 0x612e <_ZN8emstreamlsE15ser_manipulator+0x86>
    60d8:	80 e1       	ldi	r24, 0x10	; 16
    60da:	8a 83       	std	Y+2, r24	; 0x02
    60dc:	28 c0       	rjmp	.+80     	; 0x612e <_ZN8emstreamlsE15ser_manipulator+0x86>
    60de:	81 e0       	ldi	r24, 0x01	; 1
    60e0:	8b 83       	std	Y+3, r24	; 0x03
    60e2:	25 c0       	rjmp	.+74     	; 0x612e <_ZN8emstreamlsE15ser_manipulator+0x86>
    60e4:	1b 82       	std	Y+3, r1	; 0x03
    60e6:	23 c0       	rjmp	.+70     	; 0x612e <_ZN8emstreamlsE15ser_manipulator+0x86>
    60e8:	e8 81       	ld	r30, Y
    60ea:	f9 81       	ldd	r31, Y+1	; 0x01
    60ec:	02 80       	ldd	r0, Z+2	; 0x02
    60ee:	f3 81       	ldd	r31, Z+3	; 0x03
    60f0:	e0 2d       	mov	r30, r0
    60f2:	6d e0       	ldi	r22, 0x0D	; 13
    60f4:	ce 01       	movw	r24, r28
    60f6:	19 95       	eicall
    60f8:	e8 81       	ld	r30, Y
    60fa:	f9 81       	ldd	r31, Y+1	; 0x01
    60fc:	02 80       	ldd	r0, Z+2	; 0x02
    60fe:	f3 81       	ldd	r31, Z+3	; 0x03
    6100:	e0 2d       	mov	r30, r0
    6102:	6a e0       	ldi	r22, 0x0A	; 10
    6104:	ce 01       	movw	r24, r28
    6106:	19 95       	eicall
    6108:	12 c0       	rjmp	.+36     	; 0x612e <_ZN8emstreamlsE15ser_manipulator+0x86>
    610a:	e8 81       	ld	r30, Y
    610c:	f9 81       	ldd	r31, Y+1	; 0x01
    610e:	02 84       	ldd	r0, Z+10	; 0x0a
    6110:	f3 85       	ldd	r31, Z+11	; 0x0b
    6112:	e0 2d       	mov	r30, r0
    6114:	ce 01       	movw	r24, r28
    6116:	19 95       	eicall
    6118:	0a c0       	rjmp	.+20     	; 0x612e <_ZN8emstreamlsE15ser_manipulator+0x86>
    611a:	e8 81       	ld	r30, Y
    611c:	f9 81       	ldd	r31, Y+1	; 0x01
    611e:	00 84       	ldd	r0, Z+8	; 0x08
    6120:	f1 85       	ldd	r31, Z+9	; 0x09
    6122:	e0 2d       	mov	r30, r0
    6124:	ce 01       	movw	r24, r28
    6126:	19 95       	eicall
    6128:	02 c0       	rjmp	.+4      	; 0x612e <_ZN8emstreamlsE15ser_manipulator+0x86>
    612a:	81 e0       	ldi	r24, 0x01	; 1
    612c:	8c 83       	std	Y+4, r24	; 0x04
    612e:	ce 01       	movw	r24, r28
    6130:	df 91       	pop	r29
    6132:	cf 91       	pop	r28
    6134:	08 95       	ret

00006136 <_ZN8emstreamlsEf>:
    6136:	af 92       	push	r10
    6138:	bf 92       	push	r11
    613a:	cf 92       	push	r12
    613c:	df 92       	push	r13
    613e:	ef 92       	push	r14
    6140:	ff 92       	push	r15
    6142:	0f 93       	push	r16
    6144:	1f 93       	push	r17
    6146:	cf 93       	push	r28
    6148:	df 93       	push	r29
    614a:	cd b7       	in	r28, 0x3d	; 61
    614c:	de b7       	in	r29, 0x3e	; 62
    614e:	64 97       	sbiw	r28, 0x14	; 20
    6150:	cd bf       	out	0x3d, r28	; 61
    6152:	de bf       	out	0x3e, r29	; 62
    6154:	7c 01       	movw	r14, r24
    6156:	cb 01       	movw	r24, r22
    6158:	ba 01       	movw	r22, r20
    615a:	d0 90 06 20 	lds	r13, 0x2006	; 0x802006 <bts_glob_prec>
    615e:	00 e1       	ldi	r16, 0x10	; 16
    6160:	2d 2d       	mov	r18, r13
    6162:	ae 01       	movw	r20, r28
    6164:	4f 5f       	subi	r20, 0xFF	; 255
    6166:	5f 4f       	sbci	r21, 0xFF	; 255
    6168:	0e 94 6b 38 	call	0x70d6	; 0x70d6 <__ftoa_engine>
    616c:	5c 01       	movw	r10, r24
    616e:	89 81       	ldd	r24, Y+1	; 0x01
    6170:	83 ff       	sbrs	r24, 3
    6172:	06 c0       	rjmp	.+12     	; 0x6180 <_ZN8emstreamlsEf+0x4a>
    6174:	62 ec       	ldi	r22, 0xC2	; 194
    6176:	70 e2       	ldi	r23, 0x20	; 32
    6178:	c7 01       	movw	r24, r14
    617a:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    617e:	56 c0       	rjmp	.+172    	; 0x622c <_ZN8emstreamlsEf+0xf6>
    6180:	80 ff       	sbrs	r24, 0
    6182:	09 c0       	rjmp	.+18     	; 0x6196 <_ZN8emstreamlsEf+0x60>
    6184:	d7 01       	movw	r26, r14
    6186:	ed 91       	ld	r30, X+
    6188:	fc 91       	ld	r31, X
    618a:	02 80       	ldd	r0, Z+2	; 0x02
    618c:	f3 81       	ldd	r31, Z+3	; 0x03
    618e:	e0 2d       	mov	r30, r0
    6190:	6d e2       	ldi	r22, 0x2D	; 45
    6192:	c7 01       	movw	r24, r14
    6194:	19 95       	eicall
    6196:	d7 01       	movw	r26, r14
    6198:	ed 91       	ld	r30, X+
    619a:	fc 91       	ld	r31, X
    619c:	02 80       	ldd	r0, Z+2	; 0x02
    619e:	f3 81       	ldd	r31, Z+3	; 0x03
    61a0:	e0 2d       	mov	r30, r0
    61a2:	6a 81       	ldd	r22, Y+2	; 0x02
    61a4:	c7 01       	movw	r24, r14
    61a6:	19 95       	eicall
    61a8:	dd 20       	and	r13, r13
    61aa:	49 f0       	breq	.+18     	; 0x61be <_ZN8emstreamlsEf+0x88>
    61ac:	d7 01       	movw	r26, r14
    61ae:	ed 91       	ld	r30, X+
    61b0:	fc 91       	ld	r31, X
    61b2:	02 80       	ldd	r0, Z+2	; 0x02
    61b4:	f3 81       	ldd	r31, Z+3	; 0x03
    61b6:	e0 2d       	mov	r30, r0
    61b8:	6e e2       	ldi	r22, 0x2E	; 46
    61ba:	c7 01       	movw	r24, r14
    61bc:	19 95       	eicall
    61be:	8e 01       	movw	r16, r28
    61c0:	0d 5f       	subi	r16, 0xFD	; 253
    61c2:	1f 4f       	sbci	r17, 0xFF	; 255
    61c4:	ce 01       	movw	r24, r28
    61c6:	8d 0d       	add	r24, r13
    61c8:	91 1d       	adc	r25, r1
    61ca:	fc 01       	movw	r30, r24
    61cc:	33 96       	adiw	r30, 0x03	; 3
    61ce:	6f 01       	movw	r12, r30
    61d0:	0c 15       	cp	r16, r12
    61d2:	1d 05       	cpc	r17, r13
    61d4:	99 f0       	breq	.+38     	; 0x61fc <_ZN8emstreamlsEf+0xc6>
    61d6:	d8 01       	movw	r26, r16
    61d8:	6c 91       	ld	r22, X
    61da:	61 11       	cpse	r22, r1
    61dc:	1c c0       	rjmp	.+56     	; 0x6216 <_ZN8emstreamlsEf+0xe0>
    61de:	0e c0       	rjmp	.+28     	; 0x61fc <_ZN8emstreamlsEf+0xc6>
    61e0:	d7 01       	movw	r26, r14
    61e2:	ed 91       	ld	r30, X+
    61e4:	fc 91       	ld	r31, X
    61e6:	02 80       	ldd	r0, Z+2	; 0x02
    61e8:	f3 81       	ldd	r31, Z+3	; 0x03
    61ea:	e0 2d       	mov	r30, r0
    61ec:	6b e2       	ldi	r22, 0x2B	; 43
    61ee:	c7 01       	movw	r24, r14
    61f0:	19 95       	eicall
    61f2:	b5 01       	movw	r22, r10
    61f4:	c7 01       	movw	r24, r14
    61f6:	0e 94 a9 31 	call	0x6352	; 0x6352 <_ZN8emstreamlsEi>
    61fa:	18 c0       	rjmp	.+48     	; 0x622c <_ZN8emstreamlsEf+0xf6>
    61fc:	d7 01       	movw	r26, r14
    61fe:	ed 91       	ld	r30, X+
    6200:	fc 91       	ld	r31, X
    6202:	02 80       	ldd	r0, Z+2	; 0x02
    6204:	f3 81       	ldd	r31, Z+3	; 0x03
    6206:	e0 2d       	mov	r30, r0
    6208:	65 e4       	ldi	r22, 0x45	; 69
    620a:	c7 01       	movw	r24, r14
    620c:	19 95       	eicall
    620e:	1a 14       	cp	r1, r10
    6210:	1b 04       	cpc	r1, r11
    6212:	34 f3       	brlt	.-52     	; 0x61e0 <_ZN8emstreamlsEf+0xaa>
    6214:	ee cf       	rjmp	.-36     	; 0x61f2 <_ZN8emstreamlsEf+0xbc>
    6216:	0f 5f       	subi	r16, 0xFF	; 255
    6218:	1f 4f       	sbci	r17, 0xFF	; 255
    621a:	d7 01       	movw	r26, r14
    621c:	ed 91       	ld	r30, X+
    621e:	fc 91       	ld	r31, X
    6220:	02 80       	ldd	r0, Z+2	; 0x02
    6222:	f3 81       	ldd	r31, Z+3	; 0x03
    6224:	e0 2d       	mov	r30, r0
    6226:	c7 01       	movw	r24, r14
    6228:	19 95       	eicall
    622a:	d2 cf       	rjmp	.-92     	; 0x61d0 <_ZN8emstreamlsEf+0x9a>
    622c:	c7 01       	movw	r24, r14
    622e:	64 96       	adiw	r28, 0x14	; 20
    6230:	cd bf       	out	0x3d, r28	; 61
    6232:	de bf       	out	0x3e, r29	; 62
    6234:	df 91       	pop	r29
    6236:	cf 91       	pop	r28
    6238:	1f 91       	pop	r17
    623a:	0f 91       	pop	r16
    623c:	ff 90       	pop	r15
    623e:	ef 90       	pop	r14
    6240:	df 90       	pop	r13
    6242:	cf 90       	pop	r12
    6244:	bf 90       	pop	r11
    6246:	af 90       	pop	r10
    6248:	08 95       	ret

0000624a <_ZN8emstreamlsEd>:
    624a:	af 92       	push	r10
    624c:	bf 92       	push	r11
    624e:	cf 92       	push	r12
    6250:	df 92       	push	r13
    6252:	ef 92       	push	r14
    6254:	ff 92       	push	r15
    6256:	0f 93       	push	r16
    6258:	1f 93       	push	r17
    625a:	cf 93       	push	r28
    625c:	df 93       	push	r29
    625e:	cd b7       	in	r28, 0x3d	; 61
    6260:	de b7       	in	r29, 0x3e	; 62
    6262:	64 97       	sbiw	r28, 0x14	; 20
    6264:	cd bf       	out	0x3d, r28	; 61
    6266:	de bf       	out	0x3e, r29	; 62
    6268:	7c 01       	movw	r14, r24
    626a:	cb 01       	movw	r24, r22
    626c:	ba 01       	movw	r22, r20
    626e:	10 91 06 20 	lds	r17, 0x2006	; 0x802006 <bts_glob_prec>
    6272:	00 e1       	ldi	r16, 0x10	; 16
    6274:	21 2f       	mov	r18, r17
    6276:	ae 01       	movw	r20, r28
    6278:	4f 5f       	subi	r20, 0xFF	; 255
    627a:	5f 4f       	sbci	r21, 0xFF	; 255
    627c:	0e 94 6b 38 	call	0x70d6	; 0x70d6 <__ftoa_engine>
    6280:	5c 01       	movw	r10, r24
    6282:	89 81       	ldd	r24, Y+1	; 0x01
    6284:	83 ff       	sbrs	r24, 3
    6286:	06 c0       	rjmp	.+12     	; 0x6294 <_ZN8emstreamlsEd+0x4a>
    6288:	60 ec       	ldi	r22, 0xC0	; 192
    628a:	70 e2       	ldi	r23, 0x20	; 32
    628c:	c7 01       	movw	r24, r14
    628e:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    6292:	50 c0       	rjmp	.+160    	; 0x6334 <_ZN8emstreamlsEd+0xea>
    6294:	80 ff       	sbrs	r24, 0
    6296:	09 c0       	rjmp	.+18     	; 0x62aa <_ZN8emstreamlsEd+0x60>
    6298:	d7 01       	movw	r26, r14
    629a:	ed 91       	ld	r30, X+
    629c:	fc 91       	ld	r31, X
    629e:	02 80       	ldd	r0, Z+2	; 0x02
    62a0:	f3 81       	ldd	r31, Z+3	; 0x03
    62a2:	e0 2d       	mov	r30, r0
    62a4:	6d e2       	ldi	r22, 0x2D	; 45
    62a6:	c7 01       	movw	r24, r14
    62a8:	19 95       	eicall
    62aa:	d7 01       	movw	r26, r14
    62ac:	ed 91       	ld	r30, X+
    62ae:	fc 91       	ld	r31, X
    62b0:	02 80       	ldd	r0, Z+2	; 0x02
    62b2:	f3 81       	ldd	r31, Z+3	; 0x03
    62b4:	e0 2d       	mov	r30, r0
    62b6:	6a 81       	ldd	r22, Y+2	; 0x02
    62b8:	c7 01       	movw	r24, r14
    62ba:	19 95       	eicall
    62bc:	11 23       	and	r17, r17
    62be:	49 f0       	breq	.+18     	; 0x62d2 <_ZN8emstreamlsEd+0x88>
    62c0:	d7 01       	movw	r26, r14
    62c2:	ed 91       	ld	r30, X+
    62c4:	fc 91       	ld	r31, X
    62c6:	02 80       	ldd	r0, Z+2	; 0x02
    62c8:	f3 81       	ldd	r31, Z+3	; 0x03
    62ca:	e0 2d       	mov	r30, r0
    62cc:	6e e2       	ldi	r22, 0x2E	; 46
    62ce:	c7 01       	movw	r24, r14
    62d0:	19 95       	eicall
    62d2:	6e 01       	movw	r12, r28
    62d4:	b3 e0       	ldi	r27, 0x03	; 3
    62d6:	cb 0e       	add	r12, r27
    62d8:	d1 1c       	adc	r13, r1
    62da:	f6 01       	movw	r30, r12
    62dc:	61 91       	ld	r22, Z+
    62de:	6f 01       	movw	r12, r30
    62e0:	d7 01       	movw	r26, r14
    62e2:	ed 91       	ld	r30, X+
    62e4:	fc 91       	ld	r31, X
    62e6:	02 80       	ldd	r0, Z+2	; 0x02
    62e8:	f3 81       	ldd	r31, Z+3	; 0x03
    62ea:	e0 2d       	mov	r30, r0
    62ec:	c7 01       	movw	r24, r14
    62ee:	19 95       	eicall
    62f0:	11 50       	subi	r17, 0x01	; 1
    62f2:	99 f0       	breq	.+38     	; 0x631a <_ZN8emstreamlsEd+0xd0>
    62f4:	f6 01       	movw	r30, r12
    62f6:	80 81       	ld	r24, Z
    62f8:	81 11       	cpse	r24, r1
    62fa:	ef cf       	rjmp	.-34     	; 0x62da <_ZN8emstreamlsEd+0x90>
    62fc:	0e c0       	rjmp	.+28     	; 0x631a <_ZN8emstreamlsEd+0xd0>
    62fe:	d7 01       	movw	r26, r14
    6300:	ed 91       	ld	r30, X+
    6302:	fc 91       	ld	r31, X
    6304:	02 80       	ldd	r0, Z+2	; 0x02
    6306:	f3 81       	ldd	r31, Z+3	; 0x03
    6308:	e0 2d       	mov	r30, r0
    630a:	6b e2       	ldi	r22, 0x2B	; 43
    630c:	c7 01       	movw	r24, r14
    630e:	19 95       	eicall
    6310:	b5 01       	movw	r22, r10
    6312:	c7 01       	movw	r24, r14
    6314:	0e 94 a9 31 	call	0x6352	; 0x6352 <_ZN8emstreamlsEi>
    6318:	0d c0       	rjmp	.+26     	; 0x6334 <_ZN8emstreamlsEd+0xea>
    631a:	d7 01       	movw	r26, r14
    631c:	ed 91       	ld	r30, X+
    631e:	fc 91       	ld	r31, X
    6320:	02 80       	ldd	r0, Z+2	; 0x02
    6322:	f3 81       	ldd	r31, Z+3	; 0x03
    6324:	e0 2d       	mov	r30, r0
    6326:	65 e6       	ldi	r22, 0x65	; 101
    6328:	c7 01       	movw	r24, r14
    632a:	19 95       	eicall
    632c:	1a 14       	cp	r1, r10
    632e:	1b 04       	cpc	r1, r11
    6330:	34 f3       	brlt	.-52     	; 0x62fe <_ZN8emstreamlsEd+0xb4>
    6332:	ee cf       	rjmp	.-36     	; 0x6310 <_ZN8emstreamlsEd+0xc6>
    6334:	c7 01       	movw	r24, r14
    6336:	64 96       	adiw	r28, 0x14	; 20
    6338:	cd bf       	out	0x3d, r28	; 61
    633a:	de bf       	out	0x3e, r29	; 62
    633c:	df 91       	pop	r29
    633e:	cf 91       	pop	r28
    6340:	1f 91       	pop	r17
    6342:	0f 91       	pop	r16
    6344:	ff 90       	pop	r15
    6346:	ef 90       	pop	r14
    6348:	df 90       	pop	r13
    634a:	cf 90       	pop	r12
    634c:	bf 90       	pop	r11
    634e:	af 90       	pop	r10
    6350:	08 95       	ret

00006352 <_ZN8emstreamlsEi>:
    6352:	0f 93       	push	r16
    6354:	1f 93       	push	r17
    6356:	cf 93       	push	r28
    6358:	df 93       	push	r29
    635a:	cd b7       	in	r28, 0x3d	; 61
    635c:	de b7       	in	r29, 0x3e	; 62
    635e:	61 97       	sbiw	r28, 0x11	; 17
    6360:	cd bf       	out	0x3d, r28	; 61
    6362:	de bf       	out	0x3e, r29	; 62
    6364:	8c 01       	movw	r16, r24
    6366:	9b 01       	movw	r18, r22
    6368:	fc 01       	movw	r30, r24
    636a:	92 81       	ldd	r25, Z+2	; 0x02
    636c:	9a 30       	cpi	r25, 0x0A	; 10
    636e:	21 f0       	breq	.+8      	; 0x6378 <_ZN8emstreamlsEi+0x26>
    6370:	c8 01       	movw	r24, r16
    6372:	0e 94 fd 31 	call	0x63fa	; 0x63fa <_ZN8emstreamlsEj>
    6376:	0d c0       	rjmp	.+26     	; 0x6392 <_ZN8emstreamlsEi+0x40>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    6378:	4a e0       	ldi	r20, 0x0A	; 10
    637a:	be 01       	movw	r22, r28
    637c:	6f 5f       	subi	r22, 0xFF	; 255
    637e:	7f 4f       	sbci	r23, 0xFF	; 255
    6380:	c9 01       	movw	r24, r18
    6382:	0e 94 62 39 	call	0x72c4	; 0x72c4 <__itoa_ncheck>
    6386:	be 01       	movw	r22, r28
    6388:	6f 5f       	subi	r22, 0xFF	; 255
    638a:	7f 4f       	sbci	r23, 0xFF	; 255
    638c:	c8 01       	movw	r24, r16
    638e:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    6392:	c8 01       	movw	r24, r16
    6394:	61 96       	adiw	r28, 0x11	; 17
    6396:	cd bf       	out	0x3d, r28	; 61
    6398:	de bf       	out	0x3e, r29	; 62
    639a:	df 91       	pop	r29
    639c:	cf 91       	pop	r28
    639e:	1f 91       	pop	r17
    63a0:	0f 91       	pop	r16
    63a2:	08 95       	ret

000063a4 <_ZN8emstreamlsEl>:
    63a4:	0f 93       	push	r16
    63a6:	1f 93       	push	r17
    63a8:	cf 93       	push	r28
    63aa:	df 93       	push	r29
    63ac:	cd b7       	in	r28, 0x3d	; 61
    63ae:	de b7       	in	r29, 0x3e	; 62
    63b0:	a2 97       	sbiw	r28, 0x22	; 34
    63b2:	cd bf       	out	0x3d, r28	; 61
    63b4:	de bf       	out	0x3e, r29	; 62
    63b6:	8c 01       	movw	r16, r24
    63b8:	cb 01       	movw	r24, r22
    63ba:	ba 01       	movw	r22, r20
    63bc:	f8 01       	movw	r30, r16
    63be:	22 81       	ldd	r18, Z+2	; 0x02
    63c0:	2a 30       	cpi	r18, 0x0A	; 10
    63c2:	31 f0       	breq	.+12     	; 0x63d0 <_ZN8emstreamlsEl+0x2c>
    63c4:	ab 01       	movw	r20, r22
    63c6:	bc 01       	movw	r22, r24
    63c8:	c8 01       	movw	r24, r16
    63ca:	0e 94 31 32 	call	0x6462	; 0x6462 <_ZN8emstreamlsEm>
    63ce:	0c c0       	rjmp	.+24     	; 0x63e8 <_ZN8emstreamlsEl+0x44>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    63d0:	2a e0       	ldi	r18, 0x0A	; 10
    63d2:	ae 01       	movw	r20, r28
    63d4:	4f 5f       	subi	r20, 0xFF	; 255
    63d6:	5f 4f       	sbci	r21, 0xFF	; 255
    63d8:	0e 94 6d 39 	call	0x72da	; 0x72da <__ltoa_ncheck>
    63dc:	be 01       	movw	r22, r28
    63de:	6f 5f       	subi	r22, 0xFF	; 255
    63e0:	7f 4f       	sbci	r23, 0xFF	; 255
    63e2:	c8 01       	movw	r24, r16
    63e4:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    63e8:	c8 01       	movw	r24, r16
    63ea:	a2 96       	adiw	r28, 0x22	; 34
    63ec:	cd bf       	out	0x3d, r28	; 61
    63ee:	de bf       	out	0x3e, r29	; 62
    63f0:	df 91       	pop	r29
    63f2:	cf 91       	pop	r28
    63f4:	1f 91       	pop	r17
    63f6:	0f 91       	pop	r16
    63f8:	08 95       	ret

000063fa <_ZN8emstreamlsEj>:
    63fa:	ff 92       	push	r15
    63fc:	0f 93       	push	r16
    63fe:	1f 93       	push	r17
    6400:	cf 93       	push	r28
    6402:	df 93       	push	r29
    6404:	cd b7       	in	r28, 0x3d	; 61
    6406:	de b7       	in	r29, 0x3e	; 62
    6408:	61 97       	sbiw	r28, 0x11	; 17
    640a:	cd bf       	out	0x3d, r28	; 61
    640c:	de bf       	out	0x3e, r29	; 62
    640e:	8c 01       	movw	r16, r24
    6410:	f6 2e       	mov	r15, r22
    6412:	97 2f       	mov	r25, r23
    6414:	f8 01       	movw	r30, r16
    6416:	42 81       	ldd	r20, Z+2	; 0x02
    6418:	40 31       	cpi	r20, 0x10	; 16
    641a:	21 f0       	breq	.+8      	; 0x6424 <_ZN8emstreamlsEj+0x2a>
    641c:	48 30       	cpi	r20, 0x08	; 8
    641e:	11 f0       	breq	.+4      	; 0x6424 <_ZN8emstreamlsEj+0x2a>
    6420:	42 30       	cpi	r20, 0x02	; 2
    6422:	41 f4       	brne	.+16     	; 0x6434 <_ZN8emstreamlsEj+0x3a>
    6424:	69 2f       	mov	r22, r25
    6426:	c8 01       	movw	r24, r16
    6428:	0e 94 73 32 	call	0x64e6	; 0x64e6 <_ZN8emstreamlsEh>
    642c:	6f 2d       	mov	r22, r15
    642e:	0e 94 73 32 	call	0x64e6	; 0x64e6 <_ZN8emstreamlsEh>
    6432:	0d c0       	rjmp	.+26     	; 0x644e <_ZN8emstreamlsEj+0x54>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    6434:	50 e0       	ldi	r21, 0x00	; 0
    6436:	be 01       	movw	r22, r28
    6438:	6f 5f       	subi	r22, 0xFF	; 255
    643a:	7f 4f       	sbci	r23, 0xFF	; 255
    643c:	8f 2d       	mov	r24, r15
    643e:	0e 94 a9 39 	call	0x7352	; 0x7352 <utoa>
    6442:	be 01       	movw	r22, r28
    6444:	6f 5f       	subi	r22, 0xFF	; 255
    6446:	7f 4f       	sbci	r23, 0xFF	; 255
    6448:	c8 01       	movw	r24, r16
    644a:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    644e:	c8 01       	movw	r24, r16
    6450:	61 96       	adiw	r28, 0x11	; 17
    6452:	cd bf       	out	0x3d, r28	; 61
    6454:	de bf       	out	0x3e, r29	; 62
    6456:	df 91       	pop	r29
    6458:	cf 91       	pop	r28
    645a:	1f 91       	pop	r17
    645c:	0f 91       	pop	r16
    645e:	ff 90       	pop	r15
    6460:	08 95       	ret

00006462 <_ZN8emstreamlsEm>:
    6462:	df 92       	push	r13
    6464:	ef 92       	push	r14
    6466:	ff 92       	push	r15
    6468:	0f 93       	push	r16
    646a:	1f 93       	push	r17
    646c:	cf 93       	push	r28
    646e:	df 93       	push	r29
    6470:	cd b7       	in	r28, 0x3d	; 61
    6472:	de b7       	in	r29, 0x3e	; 62
    6474:	a1 97       	sbiw	r28, 0x21	; 33
    6476:	cd bf       	out	0x3d, r28	; 61
    6478:	de bf       	out	0x3e, r29	; 62
    647a:	8c 01       	movw	r16, r24
    647c:	d4 2e       	mov	r13, r20
    647e:	e5 2e       	mov	r14, r21
    6480:	f6 2e       	mov	r15, r22
    6482:	97 2f       	mov	r25, r23
    6484:	f8 01       	movw	r30, r16
    6486:	22 81       	ldd	r18, Z+2	; 0x02
    6488:	20 31       	cpi	r18, 0x10	; 16
    648a:	21 f0       	breq	.+8      	; 0x6494 <_ZN8emstreamlsEm+0x32>
    648c:	28 30       	cpi	r18, 0x08	; 8
    648e:	11 f0       	breq	.+4      	; 0x6494 <_ZN8emstreamlsEm+0x32>
    6490:	22 30       	cpi	r18, 0x02	; 2
    6492:	71 f4       	brne	.+28     	; 0x64b0 <_ZN8emstreamlsEm+0x4e>
    6494:	69 2f       	mov	r22, r25
    6496:	c8 01       	movw	r24, r16
    6498:	0e 94 73 32 	call	0x64e6	; 0x64e6 <_ZN8emstreamlsEh>
    649c:	6f 2d       	mov	r22, r15
    649e:	0e 94 73 32 	call	0x64e6	; 0x64e6 <_ZN8emstreamlsEh>
    64a2:	6e 2d       	mov	r22, r14
    64a4:	0e 94 73 32 	call	0x64e6	; 0x64e6 <_ZN8emstreamlsEh>
    64a8:	6d 2d       	mov	r22, r13
    64aa:	0e 94 73 32 	call	0x64e6	; 0x64e6 <_ZN8emstreamlsEh>
    64ae:	0f c0       	rjmp	.+30     	; 0x64ce <_ZN8emstreamlsEm+0x6c>
extern __inline__ __ATTR_GNU_INLINE__
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ultoa (unsigned long, char *, int);
	return __ultoa (__val, __s, __radix);
    64b0:	30 e0       	ldi	r19, 0x00	; 0
    64b2:	ae 01       	movw	r20, r28
    64b4:	4f 5f       	subi	r20, 0xFF	; 255
    64b6:	5f 4f       	sbci	r21, 0xFF	; 255
    64b8:	6d 2d       	mov	r22, r13
    64ba:	7e 2d       	mov	r23, r14
    64bc:	8f 2d       	mov	r24, r15
    64be:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <ultoa>
    64c2:	be 01       	movw	r22, r28
    64c4:	6f 5f       	subi	r22, 0xFF	; 255
    64c6:	7f 4f       	sbci	r23, 0xFF	; 255
    64c8:	c8 01       	movw	r24, r16
    64ca:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    64ce:	c8 01       	movw	r24, r16
    64d0:	a1 96       	adiw	r28, 0x21	; 33
    64d2:	cd bf       	out	0x3d, r28	; 61
    64d4:	de bf       	out	0x3e, r29	; 62
    64d6:	df 91       	pop	r29
    64d8:	cf 91       	pop	r28
    64da:	1f 91       	pop	r17
    64dc:	0f 91       	pop	r16
    64de:	ff 90       	pop	r15
    64e0:	ef 90       	pop	r14
    64e2:	df 90       	pop	r13
    64e4:	08 95       	ret

000064e6 <_ZN8emstreamlsEh>:
    64e6:	cf 92       	push	r12
    64e8:	df 92       	push	r13
    64ea:	ef 92       	push	r14
    64ec:	ff 92       	push	r15
    64ee:	0f 93       	push	r16
    64f0:	1f 93       	push	r17
    64f2:	cf 93       	push	r28
    64f4:	df 93       	push	r29
    64f6:	cd b7       	in	r28, 0x3d	; 61
    64f8:	de b7       	in	r29, 0x3e	; 62
    64fa:	29 97       	sbiw	r28, 0x09	; 9
    64fc:	cd bf       	out	0x3d, r28	; 61
    64fe:	de bf       	out	0x3e, r29	; 62
    6500:	8c 01       	movw	r16, r24
    6502:	e6 2e       	mov	r14, r22
    6504:	dc 01       	movw	r26, r24
    6506:	13 96       	adiw	r26, 0x03	; 3
    6508:	8c 91       	ld	r24, X
    650a:	13 97       	sbiw	r26, 0x03	; 3
    650c:	88 23       	and	r24, r24
    650e:	41 f0       	breq	.+16     	; 0x6520 <_ZN8emstreamlsEh+0x3a>
    6510:	ed 91       	ld	r30, X+
    6512:	fc 91       	ld	r31, X
    6514:	02 80       	ldd	r0, Z+2	; 0x02
    6516:	f3 81       	ldd	r31, Z+3	; 0x03
    6518:	e0 2d       	mov	r30, r0
    651a:	c8 01       	movw	r24, r16
    651c:	19 95       	eicall
    651e:	56 c0       	rjmp	.+172    	; 0x65cc <_ZN8emstreamlsEh+0xe6>
    6520:	f8 01       	movw	r30, r16
    6522:	42 81       	ldd	r20, Z+2	; 0x02
    6524:	42 30       	cpi	r20, 0x02	; 2
    6526:	19 f5       	brne	.+70     	; 0x656e <_ZN8emstreamlsEh+0x88>
    6528:	68 94       	set
    652a:	cc 24       	eor	r12, r12
    652c:	c3 f8       	bld	r12, 3
    652e:	d1 2c       	mov	r13, r1
    6530:	68 94       	set
    6532:	ff 24       	eor	r15, r15
    6534:	f7 f8       	bld	r15, 7
    6536:	8e 2d       	mov	r24, r14
    6538:	8f 21       	and	r24, r15
    653a:	51 f0       	breq	.+20     	; 0x6550 <_ZN8emstreamlsEh+0x6a>
    653c:	d8 01       	movw	r26, r16
    653e:	ed 91       	ld	r30, X+
    6540:	fc 91       	ld	r31, X
    6542:	02 80       	ldd	r0, Z+2	; 0x02
    6544:	f3 81       	ldd	r31, Z+3	; 0x03
    6546:	e0 2d       	mov	r30, r0
    6548:	61 e3       	ldi	r22, 0x31	; 49
    654a:	c8 01       	movw	r24, r16
    654c:	19 95       	eicall
    654e:	09 c0       	rjmp	.+18     	; 0x6562 <_ZN8emstreamlsEh+0x7c>
    6550:	d8 01       	movw	r26, r16
    6552:	ed 91       	ld	r30, X+
    6554:	fc 91       	ld	r31, X
    6556:	02 80       	ldd	r0, Z+2	; 0x02
    6558:	f3 81       	ldd	r31, Z+3	; 0x03
    655a:	e0 2d       	mov	r30, r0
    655c:	60 e3       	ldi	r22, 0x30	; 48
    655e:	c8 01       	movw	r24, r16
    6560:	19 95       	eicall
    6562:	f6 94       	lsr	r15
    6564:	b1 e0       	ldi	r27, 0x01	; 1
    6566:	cb 1a       	sub	r12, r27
    6568:	d1 08       	sbc	r13, r1
    656a:	29 f7       	brne	.-54     	; 0x6536 <_ZN8emstreamlsEh+0x50>
    656c:	2f c0       	rjmp	.+94     	; 0x65cc <_ZN8emstreamlsEh+0xe6>
    656e:	40 31       	cpi	r20, 0x10	; 16
    6570:	f9 f4       	brne	.+62     	; 0x65b0 <_ZN8emstreamlsEh+0xca>
    6572:	62 95       	swap	r22
    6574:	6f 70       	andi	r22, 0x0F	; 15
    6576:	01 90       	ld	r0, Z+
    6578:	f0 81       	ld	r31, Z
    657a:	e0 2d       	mov	r30, r0
    657c:	02 80       	ldd	r0, Z+2	; 0x02
    657e:	f3 81       	ldd	r31, Z+3	; 0x03
    6580:	e0 2d       	mov	r30, r0
    6582:	6a 30       	cpi	r22, 0x0A	; 10
    6584:	10 f0       	brcs	.+4      	; 0x658a <_ZN8emstreamlsEh+0xa4>
    6586:	69 5c       	subi	r22, 0xC9	; 201
    6588:	01 c0       	rjmp	.+2      	; 0x658c <_ZN8emstreamlsEh+0xa6>
    658a:	60 5d       	subi	r22, 0xD0	; 208
    658c:	c8 01       	movw	r24, r16
    658e:	19 95       	eicall
    6590:	6e 2d       	mov	r22, r14
    6592:	6f 70       	andi	r22, 0x0F	; 15
    6594:	d8 01       	movw	r26, r16
    6596:	ed 91       	ld	r30, X+
    6598:	fc 91       	ld	r31, X
    659a:	02 80       	ldd	r0, Z+2	; 0x02
    659c:	f3 81       	ldd	r31, Z+3	; 0x03
    659e:	e0 2d       	mov	r30, r0
    65a0:	6a 30       	cpi	r22, 0x0A	; 10
    65a2:	10 f0       	brcs	.+4      	; 0x65a8 <_ZN8emstreamlsEh+0xc2>
    65a4:	69 5c       	subi	r22, 0xC9	; 201
    65a6:	01 c0       	rjmp	.+2      	; 0x65aa <_ZN8emstreamlsEh+0xc4>
    65a8:	60 5d       	subi	r22, 0xD0	; 208
    65aa:	c8 01       	movw	r24, r16
    65ac:	19 95       	eicall
    65ae:	0e c0       	rjmp	.+28     	; 0x65cc <_ZN8emstreamlsEh+0xe6>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    65b0:	50 e0       	ldi	r21, 0x00	; 0
    65b2:	be 01       	movw	r22, r28
    65b4:	6f 5f       	subi	r22, 0xFF	; 255
    65b6:	7f 4f       	sbci	r23, 0xFF	; 255
    65b8:	8e 2d       	mov	r24, r14
    65ba:	90 e0       	ldi	r25, 0x00	; 0
    65bc:	0e 94 a9 39 	call	0x7352	; 0x7352 <utoa>
    65c0:	be 01       	movw	r22, r28
    65c2:	6f 5f       	subi	r22, 0xFF	; 255
    65c4:	7f 4f       	sbci	r23, 0xFF	; 255
    65c6:	c8 01       	movw	r24, r16
    65c8:	0e 94 1d 30 	call	0x603a	; 0x603a <_ZN8emstream4putsEPKc>
    65cc:	c8 01       	movw	r24, r16
    65ce:	29 96       	adiw	r28, 0x09	; 9
    65d0:	cd bf       	out	0x3d, r28	; 61
    65d2:	de bf       	out	0x3e, r29	; 62
    65d4:	df 91       	pop	r29
    65d6:	cf 91       	pop	r28
    65d8:	1f 91       	pop	r17
    65da:	0f 91       	pop	r16
    65dc:	ff 90       	pop	r15
    65de:	ef 90       	pop	r14
    65e0:	df 90       	pop	r13
    65e2:	cf 90       	pop	r12
    65e4:	08 95       	ret

000065e6 <_ZN5rs2327putcharEc>:
    65e6:	dc 01       	movw	r26, r24
    65e8:	50 96       	adiw	r26, 0x10	; 16
    65ea:	ed 91       	ld	r30, X+
    65ec:	fc 91       	ld	r31, X
    65ee:	51 97       	sbiw	r26, 0x11	; 17
    65f0:	80 81       	ld	r24, Z
    65f2:	54 96       	adiw	r26, 0x14	; 20
    65f4:	4c 91       	ld	r20, X
    65f6:	54 97       	sbiw	r26, 0x14	; 20
    65f8:	84 23       	and	r24, r20
    65fa:	29 f0       	breq	.+10     	; 0x6606 <_ZN5rs2327putcharEc+0x20>
    65fc:	09 c0       	rjmp	.+18     	; 0x6610 <_ZN5rs2327putcharEc+0x2a>
    65fe:	21 50       	subi	r18, 0x01	; 1
    6600:	31 09       	sbc	r19, r1
    6602:	19 f4       	brne	.+6      	; 0x660a <_ZN5rs2327putcharEc+0x24>
    6604:	12 c0       	rjmp	.+36     	; 0x662a <_ZN5rs2327putcharEc+0x44>
    6606:	21 e2       	ldi	r18, 0x21	; 33
    6608:	3e e4       	ldi	r19, 0x4E	; 78
    660a:	90 81       	ld	r25, Z
    660c:	94 23       	and	r25, r20
    660e:	b9 f3       	breq	.-18     	; 0x65fe <_ZN5rs2327putcharEc+0x18>
    6610:	90 81       	ld	r25, Z
    6612:	56 96       	adiw	r26, 0x16	; 22
    6614:	8c 91       	ld	r24, X
    6616:	56 97       	sbiw	r26, 0x16	; 22
    6618:	89 2b       	or	r24, r25
    661a:	80 83       	st	Z, r24
    661c:	1e 96       	adiw	r26, 0x0e	; 14
    661e:	ed 91       	ld	r30, X+
    6620:	fc 91       	ld	r31, X
    6622:	1f 97       	sbiw	r26, 0x0f	; 15
    6624:	60 83       	st	Z, r22
    6626:	81 e0       	ldi	r24, 0x01	; 1
    6628:	08 95       	ret
    662a:	80 e0       	ldi	r24, 0x00	; 0
    662c:	08 95       	ret

0000662e <_ZN5rs2327getcharEv>:
    662e:	cf 93       	push	r28
    6630:	df 93       	push	r29
    6632:	fc 01       	movw	r30, r24
    6634:	c1 8d       	ldd	r28, Z+25	; 0x19
    6636:	d2 8d       	ldd	r29, Z+26	; 0x1a
    6638:	28 81       	ld	r18, Y
    663a:	39 81       	ldd	r19, Y+1	; 0x01
    663c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    663e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    6640:	4d 91       	ld	r20, X+
    6642:	5c 91       	ld	r21, X
    6644:	24 17       	cp	r18, r20
    6646:	35 07       	cpc	r19, r21
    6648:	e9 f3       	breq	.-6      	; 0x6644 <_ZN5rs2327getcharEv+0x16>
    664a:	a7 89       	ldd	r26, Z+23	; 0x17
    664c:	b0 8d       	ldd	r27, Z+24	; 0x18
    664e:	0d 90       	ld	r0, X+
    6650:	bc 91       	ld	r27, X
    6652:	a0 2d       	mov	r26, r0
    6654:	a2 0f       	add	r26, r18
    6656:	b3 1f       	adc	r27, r19
    6658:	8c 91       	ld	r24, X
    665a:	2f 5f       	subi	r18, 0xFF	; 255
    665c:	3f 4f       	sbci	r19, 0xFF	; 255
    665e:	28 83       	st	Y, r18
    6660:	39 83       	std	Y+1, r19	; 0x01
    6662:	24 36       	cpi	r18, 0x64	; 100
    6664:	31 05       	cpc	r19, r1
    6666:	28 f0       	brcs	.+10     	; 0x6672 <_ZN5rs2327getcharEv+0x44>
    6668:	01 8c       	ldd	r0, Z+25	; 0x19
    666a:	f2 8d       	ldd	r31, Z+26	; 0x1a
    666c:	e0 2d       	mov	r30, r0
    666e:	10 82       	st	Z, r1
    6670:	11 82       	std	Z+1, r1	; 0x01
    6672:	90 e0       	ldi	r25, 0x00	; 0
    6674:	df 91       	pop	r29
    6676:	cf 91       	pop	r28
    6678:	08 95       	ret

0000667a <_ZN5rs23214check_for_charEv>:
    667a:	cf 93       	push	r28
    667c:	df 93       	push	r29
    667e:	ec 01       	movw	r28, r24
    6680:	a9 8d       	ldd	r26, Y+25	; 0x19
    6682:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6684:	eb 8d       	ldd	r30, Y+27	; 0x1b
    6686:	fc 8d       	ldd	r31, Y+28	; 0x1c
    6688:	81 e0       	ldi	r24, 0x01	; 1
    668a:	4d 91       	ld	r20, X+
    668c:	5c 91       	ld	r21, X
    668e:	20 81       	ld	r18, Z
    6690:	31 81       	ldd	r19, Z+1	; 0x01
    6692:	42 17       	cp	r20, r18
    6694:	53 07       	cpc	r21, r19
    6696:	09 f4       	brne	.+2      	; 0x669a <_ZN5rs23214check_for_charEv+0x20>
    6698:	80 e0       	ldi	r24, 0x00	; 0
    669a:	df 91       	pop	r29
    669c:	cf 91       	pop	r28
    669e:	08 95       	ret

000066a0 <_ZN5rs23212clear_screenEv>:
    66a0:	dc 01       	movw	r26, r24
    66a2:	ed 91       	ld	r30, X+
    66a4:	fc 91       	ld	r31, X
    66a6:	02 80       	ldd	r0, Z+2	; 0x02
    66a8:	f3 81       	ldd	r31, Z+3	; 0x03
    66aa:	e0 2d       	mov	r30, r0
    66ac:	6c e0       	ldi	r22, 0x0C	; 12
    66ae:	19 95       	eicall
    66b0:	08 95       	ret

000066b2 <_ZN5rs232C1EjP12USART_struct>:
    66b2:	ef 92       	push	r14
    66b4:	ff 92       	push	r15
    66b6:	0f 93       	push	r16
    66b8:	1f 93       	push	r17
    66ba:	cf 93       	push	r28
    66bc:	df 93       	push	r29
    66be:	ec 01       	movw	r28, r24
    66c0:	7b 01       	movw	r14, r22
    66c2:	8a 01       	movw	r16, r20
    66c4:	0e 94 0f 30 	call	0x601e	; 0x601e <_ZN8emstreamC1Ev>
    66c8:	a8 01       	movw	r20, r16
    66ca:	b7 01       	movw	r22, r14
    66cc:	ce 01       	movw	r24, r28
    66ce:	08 96       	adiw	r24, 0x08	; 8
    66d0:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <_ZN7base232C1EjP12USART_struct>
    66d4:	8a ec       	ldi	r24, 0xCA	; 202
    66d6:	90 e2       	ldi	r25, 0x20	; 32
    66d8:	88 83       	st	Y, r24
    66da:	99 83       	std	Y+1, r25	; 0x01
    66dc:	00 3a       	cpi	r16, 0xA0	; 160
    66de:	88 e0       	ldi	r24, 0x08	; 8
    66e0:	18 07       	cpc	r17, r24
    66e2:	69 f4       	brne	.+26     	; 0x66fe <_ZN5rs232C1EjP12USART_struct+0x4c>
    66e4:	81 ef       	ldi	r24, 0xF1	; 241
    66e6:	91 e4       	ldi	r25, 0x41	; 65
    66e8:	8f 8b       	std	Y+23, r24	; 0x17
    66ea:	98 8f       	std	Y+24, r25	; 0x18
    66ec:	85 ee       	ldi	r24, 0xE5	; 229
    66ee:	91 e4       	ldi	r25, 0x41	; 65
    66f0:	89 8f       	std	Y+25, r24	; 0x19
    66f2:	9a 8f       	std	Y+26, r25	; 0x1a
    66f4:	89 ed       	ldi	r24, 0xD9	; 217
    66f6:	91 e4       	ldi	r25, 0x41	; 65
    66f8:	8b 8f       	std	Y+27, r24	; 0x1b
    66fa:	9c 8f       	std	Y+28, r25	; 0x1c
    66fc:	53 c0       	rjmp	.+166    	; 0x67a4 <_ZN5rs232C1EjP12USART_struct+0xf2>
    66fe:	00 3b       	cpi	r16, 0xB0	; 176
    6700:	e8 e0       	ldi	r30, 0x08	; 8
    6702:	1e 07       	cpc	r17, r30
    6704:	69 f4       	brne	.+26     	; 0x6720 <_ZN5rs232C1EjP12USART_struct+0x6e>
    6706:	8f ee       	ldi	r24, 0xEF	; 239
    6708:	91 e4       	ldi	r25, 0x41	; 65
    670a:	8f 8b       	std	Y+23, r24	; 0x17
    670c:	98 8f       	std	Y+24, r25	; 0x18
    670e:	83 ee       	ldi	r24, 0xE3	; 227
    6710:	91 e4       	ldi	r25, 0x41	; 65
    6712:	89 8f       	std	Y+25, r24	; 0x19
    6714:	9a 8f       	std	Y+26, r25	; 0x1a
    6716:	87 ed       	ldi	r24, 0xD7	; 215
    6718:	91 e4       	ldi	r25, 0x41	; 65
    671a:	8b 8f       	std	Y+27, r24	; 0x1b
    671c:	9c 8f       	std	Y+28, r25	; 0x1c
    671e:	42 c0       	rjmp	.+132    	; 0x67a4 <_ZN5rs232C1EjP12USART_struct+0xf2>
    6720:	00 3a       	cpi	r16, 0xA0	; 160
    6722:	f9 e0       	ldi	r31, 0x09	; 9
    6724:	1f 07       	cpc	r17, r31
    6726:	69 f4       	brne	.+26     	; 0x6742 <_ZN5rs232C1EjP12USART_struct+0x90>
    6728:	8d ee       	ldi	r24, 0xED	; 237
    672a:	91 e4       	ldi	r25, 0x41	; 65
    672c:	8f 8b       	std	Y+23, r24	; 0x17
    672e:	98 8f       	std	Y+24, r25	; 0x18
    6730:	81 ee       	ldi	r24, 0xE1	; 225
    6732:	91 e4       	ldi	r25, 0x41	; 65
    6734:	89 8f       	std	Y+25, r24	; 0x19
    6736:	9a 8f       	std	Y+26, r25	; 0x1a
    6738:	85 ed       	ldi	r24, 0xD5	; 213
    673a:	91 e4       	ldi	r25, 0x41	; 65
    673c:	8b 8f       	std	Y+27, r24	; 0x1b
    673e:	9c 8f       	std	Y+28, r25	; 0x1c
    6740:	31 c0       	rjmp	.+98     	; 0x67a4 <_ZN5rs232C1EjP12USART_struct+0xf2>
    6742:	00 3b       	cpi	r16, 0xB0	; 176
    6744:	89 e0       	ldi	r24, 0x09	; 9
    6746:	18 07       	cpc	r17, r24
    6748:	69 f4       	brne	.+26     	; 0x6764 <_ZN5rs232C1EjP12USART_struct+0xb2>
    674a:	8b ee       	ldi	r24, 0xEB	; 235
    674c:	91 e4       	ldi	r25, 0x41	; 65
    674e:	8f 8b       	std	Y+23, r24	; 0x17
    6750:	98 8f       	std	Y+24, r25	; 0x18
    6752:	8f ed       	ldi	r24, 0xDF	; 223
    6754:	91 e4       	ldi	r25, 0x41	; 65
    6756:	89 8f       	std	Y+25, r24	; 0x19
    6758:	9a 8f       	std	Y+26, r25	; 0x1a
    675a:	83 ed       	ldi	r24, 0xD3	; 211
    675c:	91 e4       	ldi	r25, 0x41	; 65
    675e:	8b 8f       	std	Y+27, r24	; 0x1b
    6760:	9c 8f       	std	Y+28, r25	; 0x1c
    6762:	20 c0       	rjmp	.+64     	; 0x67a4 <_ZN5rs232C1EjP12USART_struct+0xf2>
    6764:	00 3a       	cpi	r16, 0xA0	; 160
    6766:	ea e0       	ldi	r30, 0x0A	; 10
    6768:	1e 07       	cpc	r17, r30
    676a:	69 f4       	brne	.+26     	; 0x6786 <_ZN5rs232C1EjP12USART_struct+0xd4>
    676c:	89 ee       	ldi	r24, 0xE9	; 233
    676e:	91 e4       	ldi	r25, 0x41	; 65
    6770:	8f 8b       	std	Y+23, r24	; 0x17
    6772:	98 8f       	std	Y+24, r25	; 0x18
    6774:	8d ed       	ldi	r24, 0xDD	; 221
    6776:	91 e4       	ldi	r25, 0x41	; 65
    6778:	89 8f       	std	Y+25, r24	; 0x19
    677a:	9a 8f       	std	Y+26, r25	; 0x1a
    677c:	81 ed       	ldi	r24, 0xD1	; 209
    677e:	91 e4       	ldi	r25, 0x41	; 65
    6780:	8b 8f       	std	Y+27, r24	; 0x1b
    6782:	9c 8f       	std	Y+28, r25	; 0x1c
    6784:	0f c0       	rjmp	.+30     	; 0x67a4 <_ZN5rs232C1EjP12USART_struct+0xf2>
    6786:	00 3a       	cpi	r16, 0xA0	; 160
    6788:	1b 40       	sbci	r17, 0x0B	; 11
    678a:	61 f4       	brne	.+24     	; 0x67a4 <_ZN5rs232C1EjP12USART_struct+0xf2>
    678c:	87 ee       	ldi	r24, 0xE7	; 231
    678e:	91 e4       	ldi	r25, 0x41	; 65
    6790:	8f 8b       	std	Y+23, r24	; 0x17
    6792:	98 8f       	std	Y+24, r25	; 0x18
    6794:	8b ed       	ldi	r24, 0xDB	; 219
    6796:	91 e4       	ldi	r25, 0x41	; 65
    6798:	89 8f       	std	Y+25, r24	; 0x19
    679a:	9a 8f       	std	Y+26, r25	; 0x1a
    679c:	8f ec       	ldi	r24, 0xCF	; 207
    679e:	91 e4       	ldi	r25, 0x41	; 65
    67a0:	8b 8f       	std	Y+27, r24	; 0x1b
    67a2:	9c 8f       	std	Y+28, r25	; 0x1c
    67a4:	0f 89       	ldd	r16, Y+23	; 0x17
    67a6:	18 8d       	ldd	r17, Y+24	; 0x18
    67a8:	84 e6       	ldi	r24, 0x64	; 100
    67aa:	90 e0       	ldi	r25, 0x00	; 0
    67ac:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <_Znaj>
    67b0:	f8 01       	movw	r30, r16
    67b2:	80 83       	st	Z, r24
    67b4:	91 83       	std	Z+1, r25	; 0x01
    67b6:	e9 8d       	ldd	r30, Y+25	; 0x19
    67b8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    67ba:	10 82       	st	Z, r1
    67bc:	11 82       	std	Z+1, r1	; 0x01
    67be:	eb 8d       	ldd	r30, Y+27	; 0x1b
    67c0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    67c2:	10 82       	st	Z, r1
    67c4:	11 82       	std	Z+1, r1	; 0x01
    67c6:	df 91       	pop	r29
    67c8:	cf 91       	pop	r28
    67ca:	1f 91       	pop	r17
    67cc:	0f 91       	pop	r16
    67ce:	ff 90       	pop	r15
    67d0:	ef 90       	pop	r14
    67d2:	08 95       	ret

000067d4 <__vector_25>:
    67d4:	1f 92       	push	r1
    67d6:	0f 92       	push	r0
    67d8:	0f b6       	in	r0, 0x3f	; 63
    67da:	0f 92       	push	r0
    67dc:	11 24       	eor	r1, r1
    67de:	0b b6       	in	r0, 0x3b	; 59
    67e0:	0f 92       	push	r0
    67e2:	2f 93       	push	r18
    67e4:	3f 93       	push	r19
    67e6:	8f 93       	push	r24
    67e8:	9f 93       	push	r25
    67ea:	ef 93       	push	r30
    67ec:	ff 93       	push	r31
    67ee:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    67f2:	e0 91 f1 41 	lds	r30, 0x41F1	; 0x8041f1 <rcvC0_buffer>
    67f6:	f0 91 f2 41 	lds	r31, 0x41F2	; 0x8041f2 <rcvC0_buffer+0x1>
    67fa:	80 91 d9 41 	lds	r24, 0x41D9	; 0x8041d9 <rcvC0_write_index>
    67fe:	90 91 da 41 	lds	r25, 0x41DA	; 0x8041da <rcvC0_write_index+0x1>
    6802:	e8 0f       	add	r30, r24
    6804:	f9 1f       	adc	r31, r25
    6806:	20 83       	st	Z, r18
    6808:	80 91 d9 41 	lds	r24, 0x41D9	; 0x8041d9 <rcvC0_write_index>
    680c:	90 91 da 41 	lds	r25, 0x41DA	; 0x8041da <rcvC0_write_index+0x1>
    6810:	01 96       	adiw	r24, 0x01	; 1
    6812:	84 36       	cpi	r24, 0x64	; 100
    6814:	91 05       	cpc	r25, r1
    6816:	60 f4       	brcc	.+24     	; 0x6830 <__vector_25+0x5c>
    6818:	80 93 d9 41 	sts	0x41D9, r24	; 0x8041d9 <rcvC0_write_index>
    681c:	90 93 da 41 	sts	0x41DA, r25	; 0x8041da <rcvC0_write_index+0x1>
    6820:	20 91 e5 41 	lds	r18, 0x41E5	; 0x8041e5 <rcvC0_read_index>
    6824:	30 91 e6 41 	lds	r19, 0x41E6	; 0x8041e6 <rcvC0_read_index+0x1>
    6828:	82 17       	cp	r24, r18
    682a:	93 07       	cpc	r25, r19
    682c:	f1 f4       	brne	.+60     	; 0x686a <__vector_25+0x96>
    682e:	0c c0       	rjmp	.+24     	; 0x6848 <__vector_25+0x74>
    6830:	10 92 d9 41 	sts	0x41D9, r1	; 0x8041d9 <rcvC0_write_index>
    6834:	10 92 da 41 	sts	0x41DA, r1	; 0x8041da <rcvC0_write_index+0x1>
    6838:	80 91 e5 41 	lds	r24, 0x41E5	; 0x8041e5 <rcvC0_read_index>
    683c:	90 91 e6 41 	lds	r25, 0x41E6	; 0x8041e6 <rcvC0_read_index+0x1>
    6840:	18 16       	cp	r1, r24
    6842:	19 06       	cpc	r1, r25
    6844:	91 f4       	brne	.+36     	; 0x686a <__vector_25+0x96>
    6846:	0e c0       	rjmp	.+28     	; 0x6864 <__vector_25+0x90>
    6848:	01 96       	adiw	r24, 0x01	; 1
    684a:	84 36       	cpi	r24, 0x64	; 100
    684c:	91 05       	cpc	r25, r1
    684e:	28 f4       	brcc	.+10     	; 0x685a <__vector_25+0x86>
    6850:	80 93 e5 41 	sts	0x41E5, r24	; 0x8041e5 <rcvC0_read_index>
    6854:	90 93 e6 41 	sts	0x41E6, r25	; 0x8041e6 <rcvC0_read_index+0x1>
    6858:	08 c0       	rjmp	.+16     	; 0x686a <__vector_25+0x96>
    685a:	10 92 e5 41 	sts	0x41E5, r1	; 0x8041e5 <rcvC0_read_index>
    685e:	10 92 e6 41 	sts	0x41E6, r1	; 0x8041e6 <rcvC0_read_index+0x1>
    6862:	03 c0       	rjmp	.+6      	; 0x686a <__vector_25+0x96>
    6864:	81 e0       	ldi	r24, 0x01	; 1
    6866:	90 e0       	ldi	r25, 0x00	; 0
    6868:	f3 cf       	rjmp	.-26     	; 0x6850 <__vector_25+0x7c>
    686a:	ff 91       	pop	r31
    686c:	ef 91       	pop	r30
    686e:	9f 91       	pop	r25
    6870:	8f 91       	pop	r24
    6872:	3f 91       	pop	r19
    6874:	2f 91       	pop	r18
    6876:	0f 90       	pop	r0
    6878:	0b be       	out	0x3b, r0	; 59
    687a:	0f 90       	pop	r0
    687c:	0f be       	out	0x3f, r0	; 63
    687e:	0f 90       	pop	r0
    6880:	1f 90       	pop	r1
    6882:	18 95       	reti

00006884 <__vector_28>:
    6884:	1f 92       	push	r1
    6886:	0f 92       	push	r0
    6888:	0f b6       	in	r0, 0x3f	; 63
    688a:	0f 92       	push	r0
    688c:	11 24       	eor	r1, r1
    688e:	0b b6       	in	r0, 0x3b	; 59
    6890:	0f 92       	push	r0
    6892:	2f 93       	push	r18
    6894:	3f 93       	push	r19
    6896:	8f 93       	push	r24
    6898:	9f 93       	push	r25
    689a:	ef 93       	push	r30
    689c:	ff 93       	push	r31
    689e:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    68a2:	e0 91 ef 41 	lds	r30, 0x41EF	; 0x8041ef <rcvC1_buffer>
    68a6:	f0 91 f0 41 	lds	r31, 0x41F0	; 0x8041f0 <rcvC1_buffer+0x1>
    68aa:	80 91 d7 41 	lds	r24, 0x41D7	; 0x8041d7 <rcvC1_write_index>
    68ae:	90 91 d8 41 	lds	r25, 0x41D8	; 0x8041d8 <rcvC1_write_index+0x1>
    68b2:	e8 0f       	add	r30, r24
    68b4:	f9 1f       	adc	r31, r25
    68b6:	20 83       	st	Z, r18
    68b8:	80 91 d7 41 	lds	r24, 0x41D7	; 0x8041d7 <rcvC1_write_index>
    68bc:	90 91 d8 41 	lds	r25, 0x41D8	; 0x8041d8 <rcvC1_write_index+0x1>
    68c0:	01 96       	adiw	r24, 0x01	; 1
    68c2:	84 36       	cpi	r24, 0x64	; 100
    68c4:	91 05       	cpc	r25, r1
    68c6:	60 f4       	brcc	.+24     	; 0x68e0 <__vector_28+0x5c>
    68c8:	80 93 d7 41 	sts	0x41D7, r24	; 0x8041d7 <rcvC1_write_index>
    68cc:	90 93 d8 41 	sts	0x41D8, r25	; 0x8041d8 <rcvC1_write_index+0x1>
    68d0:	20 91 e3 41 	lds	r18, 0x41E3	; 0x8041e3 <rcvC1_read_index>
    68d4:	30 91 e4 41 	lds	r19, 0x41E4	; 0x8041e4 <rcvC1_read_index+0x1>
    68d8:	82 17       	cp	r24, r18
    68da:	93 07       	cpc	r25, r19
    68dc:	f1 f4       	brne	.+60     	; 0x691a <__vector_28+0x96>
    68de:	0c c0       	rjmp	.+24     	; 0x68f8 <__vector_28+0x74>
    68e0:	10 92 d7 41 	sts	0x41D7, r1	; 0x8041d7 <rcvC1_write_index>
    68e4:	10 92 d8 41 	sts	0x41D8, r1	; 0x8041d8 <rcvC1_write_index+0x1>
    68e8:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <rcvC1_read_index>
    68ec:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <rcvC1_read_index+0x1>
    68f0:	18 16       	cp	r1, r24
    68f2:	19 06       	cpc	r1, r25
    68f4:	91 f4       	brne	.+36     	; 0x691a <__vector_28+0x96>
    68f6:	0e c0       	rjmp	.+28     	; 0x6914 <__vector_28+0x90>
    68f8:	01 96       	adiw	r24, 0x01	; 1
    68fa:	84 36       	cpi	r24, 0x64	; 100
    68fc:	91 05       	cpc	r25, r1
    68fe:	28 f4       	brcc	.+10     	; 0x690a <__vector_28+0x86>
    6900:	80 93 e3 41 	sts	0x41E3, r24	; 0x8041e3 <rcvC1_read_index>
    6904:	90 93 e4 41 	sts	0x41E4, r25	; 0x8041e4 <rcvC1_read_index+0x1>
    6908:	08 c0       	rjmp	.+16     	; 0x691a <__vector_28+0x96>
    690a:	10 92 e3 41 	sts	0x41E3, r1	; 0x8041e3 <rcvC1_read_index>
    690e:	10 92 e4 41 	sts	0x41E4, r1	; 0x8041e4 <rcvC1_read_index+0x1>
    6912:	03 c0       	rjmp	.+6      	; 0x691a <__vector_28+0x96>
    6914:	81 e0       	ldi	r24, 0x01	; 1
    6916:	90 e0       	ldi	r25, 0x00	; 0
    6918:	f3 cf       	rjmp	.-26     	; 0x6900 <__vector_28+0x7c>
    691a:	ff 91       	pop	r31
    691c:	ef 91       	pop	r30
    691e:	9f 91       	pop	r25
    6920:	8f 91       	pop	r24
    6922:	3f 91       	pop	r19
    6924:	2f 91       	pop	r18
    6926:	0f 90       	pop	r0
    6928:	0b be       	out	0x3b, r0	; 59
    692a:	0f 90       	pop	r0
    692c:	0f be       	out	0x3f, r0	; 63
    692e:	0f 90       	pop	r0
    6930:	1f 90       	pop	r1
    6932:	18 95       	reti

00006934 <__vector_88>:
    6934:	1f 92       	push	r1
    6936:	0f 92       	push	r0
    6938:	0f b6       	in	r0, 0x3f	; 63
    693a:	0f 92       	push	r0
    693c:	11 24       	eor	r1, r1
    693e:	0b b6       	in	r0, 0x3b	; 59
    6940:	0f 92       	push	r0
    6942:	2f 93       	push	r18
    6944:	3f 93       	push	r19
    6946:	8f 93       	push	r24
    6948:	9f 93       	push	r25
    694a:	ef 93       	push	r30
    694c:	ff 93       	push	r31
    694e:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    6952:	e0 91 ed 41 	lds	r30, 0x41ED	; 0x8041ed <rcvD0_buffer>
    6956:	f0 91 ee 41 	lds	r31, 0x41EE	; 0x8041ee <rcvD0_buffer+0x1>
    695a:	80 91 d9 41 	lds	r24, 0x41D9	; 0x8041d9 <rcvC0_write_index>
    695e:	90 91 da 41 	lds	r25, 0x41DA	; 0x8041da <rcvC0_write_index+0x1>
    6962:	e8 0f       	add	r30, r24
    6964:	f9 1f       	adc	r31, r25
    6966:	20 83       	st	Z, r18
    6968:	80 91 d5 41 	lds	r24, 0x41D5	; 0x8041d5 <rcvD0_write_index>
    696c:	90 91 d6 41 	lds	r25, 0x41D6	; 0x8041d6 <rcvD0_write_index+0x1>
    6970:	01 96       	adiw	r24, 0x01	; 1
    6972:	84 36       	cpi	r24, 0x64	; 100
    6974:	91 05       	cpc	r25, r1
    6976:	60 f4       	brcc	.+24     	; 0x6990 <__vector_88+0x5c>
    6978:	80 93 d5 41 	sts	0x41D5, r24	; 0x8041d5 <rcvD0_write_index>
    697c:	90 93 d6 41 	sts	0x41D6, r25	; 0x8041d6 <rcvD0_write_index+0x1>
    6980:	20 91 e1 41 	lds	r18, 0x41E1	; 0x8041e1 <rcvD0_read_index>
    6984:	30 91 e2 41 	lds	r19, 0x41E2	; 0x8041e2 <rcvD0_read_index+0x1>
    6988:	82 17       	cp	r24, r18
    698a:	93 07       	cpc	r25, r19
    698c:	f1 f4       	brne	.+60     	; 0x69ca <__vector_88+0x96>
    698e:	0c c0       	rjmp	.+24     	; 0x69a8 <__vector_88+0x74>
    6990:	10 92 d5 41 	sts	0x41D5, r1	; 0x8041d5 <rcvD0_write_index>
    6994:	10 92 d6 41 	sts	0x41D6, r1	; 0x8041d6 <rcvD0_write_index+0x1>
    6998:	80 91 e1 41 	lds	r24, 0x41E1	; 0x8041e1 <rcvD0_read_index>
    699c:	90 91 e2 41 	lds	r25, 0x41E2	; 0x8041e2 <rcvD0_read_index+0x1>
    69a0:	18 16       	cp	r1, r24
    69a2:	19 06       	cpc	r1, r25
    69a4:	91 f4       	brne	.+36     	; 0x69ca <__vector_88+0x96>
    69a6:	0e c0       	rjmp	.+28     	; 0x69c4 <__vector_88+0x90>
    69a8:	01 96       	adiw	r24, 0x01	; 1
    69aa:	84 36       	cpi	r24, 0x64	; 100
    69ac:	91 05       	cpc	r25, r1
    69ae:	28 f4       	brcc	.+10     	; 0x69ba <__vector_88+0x86>
    69b0:	80 93 e1 41 	sts	0x41E1, r24	; 0x8041e1 <rcvD0_read_index>
    69b4:	90 93 e2 41 	sts	0x41E2, r25	; 0x8041e2 <rcvD0_read_index+0x1>
    69b8:	08 c0       	rjmp	.+16     	; 0x69ca <__vector_88+0x96>
    69ba:	10 92 e1 41 	sts	0x41E1, r1	; 0x8041e1 <rcvD0_read_index>
    69be:	10 92 e2 41 	sts	0x41E2, r1	; 0x8041e2 <rcvD0_read_index+0x1>
    69c2:	03 c0       	rjmp	.+6      	; 0x69ca <__vector_88+0x96>
    69c4:	81 e0       	ldi	r24, 0x01	; 1
    69c6:	90 e0       	ldi	r25, 0x00	; 0
    69c8:	f3 cf       	rjmp	.-26     	; 0x69b0 <__vector_88+0x7c>
    69ca:	ff 91       	pop	r31
    69cc:	ef 91       	pop	r30
    69ce:	9f 91       	pop	r25
    69d0:	8f 91       	pop	r24
    69d2:	3f 91       	pop	r19
    69d4:	2f 91       	pop	r18
    69d6:	0f 90       	pop	r0
    69d8:	0b be       	out	0x3b, r0	; 59
    69da:	0f 90       	pop	r0
    69dc:	0f be       	out	0x3f, r0	; 63
    69de:	0f 90       	pop	r0
    69e0:	1f 90       	pop	r1
    69e2:	18 95       	reti

000069e4 <__vector_91>:
    69e4:	1f 92       	push	r1
    69e6:	0f 92       	push	r0
    69e8:	0f b6       	in	r0, 0x3f	; 63
    69ea:	0f 92       	push	r0
    69ec:	11 24       	eor	r1, r1
    69ee:	0b b6       	in	r0, 0x3b	; 59
    69f0:	0f 92       	push	r0
    69f2:	2f 93       	push	r18
    69f4:	3f 93       	push	r19
    69f6:	8f 93       	push	r24
    69f8:	9f 93       	push	r25
    69fa:	ef 93       	push	r30
    69fc:	ff 93       	push	r31
    69fe:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    6a02:	e0 91 eb 41 	lds	r30, 0x41EB	; 0x8041eb <rcvD1_buffer>
    6a06:	f0 91 ec 41 	lds	r31, 0x41EC	; 0x8041ec <rcvD1_buffer+0x1>
    6a0a:	80 91 d3 41 	lds	r24, 0x41D3	; 0x8041d3 <rcvD1_write_index>
    6a0e:	90 91 d4 41 	lds	r25, 0x41D4	; 0x8041d4 <rcvD1_write_index+0x1>
    6a12:	e8 0f       	add	r30, r24
    6a14:	f9 1f       	adc	r31, r25
    6a16:	20 83       	st	Z, r18
    6a18:	80 91 d3 41 	lds	r24, 0x41D3	; 0x8041d3 <rcvD1_write_index>
    6a1c:	90 91 d4 41 	lds	r25, 0x41D4	; 0x8041d4 <rcvD1_write_index+0x1>
    6a20:	01 96       	adiw	r24, 0x01	; 1
    6a22:	84 36       	cpi	r24, 0x64	; 100
    6a24:	91 05       	cpc	r25, r1
    6a26:	60 f4       	brcc	.+24     	; 0x6a40 <__vector_91+0x5c>
    6a28:	80 93 d3 41 	sts	0x41D3, r24	; 0x8041d3 <rcvD1_write_index>
    6a2c:	90 93 d4 41 	sts	0x41D4, r25	; 0x8041d4 <rcvD1_write_index+0x1>
    6a30:	20 91 df 41 	lds	r18, 0x41DF	; 0x8041df <rcvD1_read_index>
    6a34:	30 91 e0 41 	lds	r19, 0x41E0	; 0x8041e0 <rcvD1_read_index+0x1>
    6a38:	82 17       	cp	r24, r18
    6a3a:	93 07       	cpc	r25, r19
    6a3c:	f1 f4       	brne	.+60     	; 0x6a7a <__vector_91+0x96>
    6a3e:	0c c0       	rjmp	.+24     	; 0x6a58 <__vector_91+0x74>
    6a40:	10 92 d3 41 	sts	0x41D3, r1	; 0x8041d3 <rcvD1_write_index>
    6a44:	10 92 d4 41 	sts	0x41D4, r1	; 0x8041d4 <rcvD1_write_index+0x1>
    6a48:	80 91 df 41 	lds	r24, 0x41DF	; 0x8041df <rcvD1_read_index>
    6a4c:	90 91 e0 41 	lds	r25, 0x41E0	; 0x8041e0 <rcvD1_read_index+0x1>
    6a50:	18 16       	cp	r1, r24
    6a52:	19 06       	cpc	r1, r25
    6a54:	91 f4       	brne	.+36     	; 0x6a7a <__vector_91+0x96>
    6a56:	0e c0       	rjmp	.+28     	; 0x6a74 <__vector_91+0x90>
    6a58:	01 96       	adiw	r24, 0x01	; 1
    6a5a:	84 36       	cpi	r24, 0x64	; 100
    6a5c:	91 05       	cpc	r25, r1
    6a5e:	28 f4       	brcc	.+10     	; 0x6a6a <__vector_91+0x86>
    6a60:	80 93 df 41 	sts	0x41DF, r24	; 0x8041df <rcvD1_read_index>
    6a64:	90 93 e0 41 	sts	0x41E0, r25	; 0x8041e0 <rcvD1_read_index+0x1>
    6a68:	08 c0       	rjmp	.+16     	; 0x6a7a <__vector_91+0x96>
    6a6a:	10 92 df 41 	sts	0x41DF, r1	; 0x8041df <rcvD1_read_index>
    6a6e:	10 92 e0 41 	sts	0x41E0, r1	; 0x8041e0 <rcvD1_read_index+0x1>
    6a72:	03 c0       	rjmp	.+6      	; 0x6a7a <__vector_91+0x96>
    6a74:	81 e0       	ldi	r24, 0x01	; 1
    6a76:	90 e0       	ldi	r25, 0x00	; 0
    6a78:	f3 cf       	rjmp	.-26     	; 0x6a60 <__vector_91+0x7c>
    6a7a:	ff 91       	pop	r31
    6a7c:	ef 91       	pop	r30
    6a7e:	9f 91       	pop	r25
    6a80:	8f 91       	pop	r24
    6a82:	3f 91       	pop	r19
    6a84:	2f 91       	pop	r18
    6a86:	0f 90       	pop	r0
    6a88:	0b be       	out	0x3b, r0	; 59
    6a8a:	0f 90       	pop	r0
    6a8c:	0f be       	out	0x3f, r0	; 63
    6a8e:	0f 90       	pop	r0
    6a90:	1f 90       	pop	r1
    6a92:	18 95       	reti

00006a94 <__vector_58>:
    6a94:	1f 92       	push	r1
    6a96:	0f 92       	push	r0
    6a98:	0f b6       	in	r0, 0x3f	; 63
    6a9a:	0f 92       	push	r0
    6a9c:	11 24       	eor	r1, r1
    6a9e:	0b b6       	in	r0, 0x3b	; 59
    6aa0:	0f 92       	push	r0
    6aa2:	2f 93       	push	r18
    6aa4:	3f 93       	push	r19
    6aa6:	8f 93       	push	r24
    6aa8:	9f 93       	push	r25
    6aaa:	ef 93       	push	r30
    6aac:	ff 93       	push	r31
    6aae:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    6ab2:	e0 91 e9 41 	lds	r30, 0x41E9	; 0x8041e9 <rcvE0_buffer>
    6ab6:	f0 91 ea 41 	lds	r31, 0x41EA	; 0x8041ea <rcvE0_buffer+0x1>
    6aba:	80 91 d1 41 	lds	r24, 0x41D1	; 0x8041d1 <rcvE0_write_index>
    6abe:	90 91 d2 41 	lds	r25, 0x41D2	; 0x8041d2 <rcvE0_write_index+0x1>
    6ac2:	e8 0f       	add	r30, r24
    6ac4:	f9 1f       	adc	r31, r25
    6ac6:	20 83       	st	Z, r18
    6ac8:	80 91 d1 41 	lds	r24, 0x41D1	; 0x8041d1 <rcvE0_write_index>
    6acc:	90 91 d2 41 	lds	r25, 0x41D2	; 0x8041d2 <rcvE0_write_index+0x1>
    6ad0:	01 96       	adiw	r24, 0x01	; 1
    6ad2:	84 36       	cpi	r24, 0x64	; 100
    6ad4:	91 05       	cpc	r25, r1
    6ad6:	60 f4       	brcc	.+24     	; 0x6af0 <__vector_58+0x5c>
    6ad8:	80 93 d1 41 	sts	0x41D1, r24	; 0x8041d1 <rcvE0_write_index>
    6adc:	90 93 d2 41 	sts	0x41D2, r25	; 0x8041d2 <rcvE0_write_index+0x1>
    6ae0:	20 91 dd 41 	lds	r18, 0x41DD	; 0x8041dd <rcvE0_read_index>
    6ae4:	30 91 de 41 	lds	r19, 0x41DE	; 0x8041de <rcvE0_read_index+0x1>
    6ae8:	82 17       	cp	r24, r18
    6aea:	93 07       	cpc	r25, r19
    6aec:	f1 f4       	brne	.+60     	; 0x6b2a <__vector_58+0x96>
    6aee:	0c c0       	rjmp	.+24     	; 0x6b08 <__vector_58+0x74>
    6af0:	10 92 d1 41 	sts	0x41D1, r1	; 0x8041d1 <rcvE0_write_index>
    6af4:	10 92 d2 41 	sts	0x41D2, r1	; 0x8041d2 <rcvE0_write_index+0x1>
    6af8:	80 91 dd 41 	lds	r24, 0x41DD	; 0x8041dd <rcvE0_read_index>
    6afc:	90 91 de 41 	lds	r25, 0x41DE	; 0x8041de <rcvE0_read_index+0x1>
    6b00:	18 16       	cp	r1, r24
    6b02:	19 06       	cpc	r1, r25
    6b04:	91 f4       	brne	.+36     	; 0x6b2a <__vector_58+0x96>
    6b06:	0e c0       	rjmp	.+28     	; 0x6b24 <__vector_58+0x90>
    6b08:	01 96       	adiw	r24, 0x01	; 1
    6b0a:	84 36       	cpi	r24, 0x64	; 100
    6b0c:	91 05       	cpc	r25, r1
    6b0e:	28 f4       	brcc	.+10     	; 0x6b1a <__vector_58+0x86>
    6b10:	80 93 dd 41 	sts	0x41DD, r24	; 0x8041dd <rcvE0_read_index>
    6b14:	90 93 de 41 	sts	0x41DE, r25	; 0x8041de <rcvE0_read_index+0x1>
    6b18:	08 c0       	rjmp	.+16     	; 0x6b2a <__vector_58+0x96>
    6b1a:	10 92 dd 41 	sts	0x41DD, r1	; 0x8041dd <rcvE0_read_index>
    6b1e:	10 92 de 41 	sts	0x41DE, r1	; 0x8041de <rcvE0_read_index+0x1>
    6b22:	03 c0       	rjmp	.+6      	; 0x6b2a <__vector_58+0x96>
    6b24:	81 e0       	ldi	r24, 0x01	; 1
    6b26:	90 e0       	ldi	r25, 0x00	; 0
    6b28:	f3 cf       	rjmp	.-26     	; 0x6b10 <__vector_58+0x7c>
    6b2a:	ff 91       	pop	r31
    6b2c:	ef 91       	pop	r30
    6b2e:	9f 91       	pop	r25
    6b30:	8f 91       	pop	r24
    6b32:	3f 91       	pop	r19
    6b34:	2f 91       	pop	r18
    6b36:	0f 90       	pop	r0
    6b38:	0b be       	out	0x3b, r0	; 59
    6b3a:	0f 90       	pop	r0
    6b3c:	0f be       	out	0x3f, r0	; 63
    6b3e:	0f 90       	pop	r0
    6b40:	1f 90       	pop	r1
    6b42:	18 95       	reti

00006b44 <__vector_119>:
    6b44:	1f 92       	push	r1
    6b46:	0f 92       	push	r0
    6b48:	0f b6       	in	r0, 0x3f	; 63
    6b4a:	0f 92       	push	r0
    6b4c:	11 24       	eor	r1, r1
    6b4e:	0b b6       	in	r0, 0x3b	; 59
    6b50:	0f 92       	push	r0
    6b52:	2f 93       	push	r18
    6b54:	3f 93       	push	r19
    6b56:	8f 93       	push	r24
    6b58:	9f 93       	push	r25
    6b5a:	ef 93       	push	r30
    6b5c:	ff 93       	push	r31
    6b5e:	20 91 a0 0b 	lds	r18, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
    6b62:	e0 91 e7 41 	lds	r30, 0x41E7	; 0x8041e7 <rcvF0_buffer>
    6b66:	f0 91 e8 41 	lds	r31, 0x41E8	; 0x8041e8 <rcvF0_buffer+0x1>
    6b6a:	80 91 cf 41 	lds	r24, 0x41CF	; 0x8041cf <rcvF0_write_index>
    6b6e:	90 91 d0 41 	lds	r25, 0x41D0	; 0x8041d0 <rcvF0_write_index+0x1>
    6b72:	e8 0f       	add	r30, r24
    6b74:	f9 1f       	adc	r31, r25
    6b76:	20 83       	st	Z, r18
    6b78:	80 91 cf 41 	lds	r24, 0x41CF	; 0x8041cf <rcvF0_write_index>
    6b7c:	90 91 d0 41 	lds	r25, 0x41D0	; 0x8041d0 <rcvF0_write_index+0x1>
    6b80:	01 96       	adiw	r24, 0x01	; 1
    6b82:	84 36       	cpi	r24, 0x64	; 100
    6b84:	91 05       	cpc	r25, r1
    6b86:	60 f4       	brcc	.+24     	; 0x6ba0 <__vector_119+0x5c>
    6b88:	80 93 cf 41 	sts	0x41CF, r24	; 0x8041cf <rcvF0_write_index>
    6b8c:	90 93 d0 41 	sts	0x41D0, r25	; 0x8041d0 <rcvF0_write_index+0x1>
    6b90:	20 91 db 41 	lds	r18, 0x41DB	; 0x8041db <rcvF0_read_index>
    6b94:	30 91 dc 41 	lds	r19, 0x41DC	; 0x8041dc <rcvF0_read_index+0x1>
    6b98:	82 17       	cp	r24, r18
    6b9a:	93 07       	cpc	r25, r19
    6b9c:	f1 f4       	brne	.+60     	; 0x6bda <__vector_119+0x96>
    6b9e:	0c c0       	rjmp	.+24     	; 0x6bb8 <__vector_119+0x74>
    6ba0:	10 92 cf 41 	sts	0x41CF, r1	; 0x8041cf <rcvF0_write_index>
    6ba4:	10 92 d0 41 	sts	0x41D0, r1	; 0x8041d0 <rcvF0_write_index+0x1>
    6ba8:	80 91 db 41 	lds	r24, 0x41DB	; 0x8041db <rcvF0_read_index>
    6bac:	90 91 dc 41 	lds	r25, 0x41DC	; 0x8041dc <rcvF0_read_index+0x1>
    6bb0:	18 16       	cp	r1, r24
    6bb2:	19 06       	cpc	r1, r25
    6bb4:	91 f4       	brne	.+36     	; 0x6bda <__vector_119+0x96>
    6bb6:	0e c0       	rjmp	.+28     	; 0x6bd4 <__vector_119+0x90>
    6bb8:	01 96       	adiw	r24, 0x01	; 1
    6bba:	84 36       	cpi	r24, 0x64	; 100
    6bbc:	91 05       	cpc	r25, r1
    6bbe:	28 f4       	brcc	.+10     	; 0x6bca <__vector_119+0x86>
    6bc0:	80 93 db 41 	sts	0x41DB, r24	; 0x8041db <rcvF0_read_index>
    6bc4:	90 93 dc 41 	sts	0x41DC, r25	; 0x8041dc <rcvF0_read_index+0x1>
    6bc8:	08 c0       	rjmp	.+16     	; 0x6bda <__vector_119+0x96>
    6bca:	10 92 db 41 	sts	0x41DB, r1	; 0x8041db <rcvF0_read_index>
    6bce:	10 92 dc 41 	sts	0x41DC, r1	; 0x8041dc <rcvF0_read_index+0x1>
    6bd2:	03 c0       	rjmp	.+6      	; 0x6bda <__vector_119+0x96>
    6bd4:	81 e0       	ldi	r24, 0x01	; 1
    6bd6:	90 e0       	ldi	r25, 0x00	; 0
    6bd8:	f3 cf       	rjmp	.-26     	; 0x6bc0 <__vector_119+0x7c>
    6bda:	ff 91       	pop	r31
    6bdc:	ef 91       	pop	r30
    6bde:	9f 91       	pop	r25
    6be0:	8f 91       	pop	r24
    6be2:	3f 91       	pop	r19
    6be4:	2f 91       	pop	r18
    6be6:	0f 90       	pop	r0
    6be8:	0b be       	out	0x3b, r0	; 59
    6bea:	0f 90       	pop	r0
    6bec:	0f be       	out	0x3f, r0	; 63
    6bee:	0f 90       	pop	r0
    6bf0:	1f 90       	pop	r1
    6bf2:	18 95       	reti

00006bf4 <__subsf3>:
    6bf4:	50 58       	subi	r21, 0x80	; 128

00006bf6 <__addsf3>:
    6bf6:	bb 27       	eor	r27, r27
    6bf8:	aa 27       	eor	r26, r26
    6bfa:	0e 94 12 36 	call	0x6c24	; 0x6c24 <__addsf3x>
    6bfe:	0c 94 5c 37 	jmp	0x6eb8	; 0x6eb8 <__fp_round>
    6c02:	0e 94 4e 37 	call	0x6e9c	; 0x6e9c <__fp_pscA>
    6c06:	38 f0       	brcs	.+14     	; 0x6c16 <__addsf3+0x20>
    6c08:	0e 94 55 37 	call	0x6eaa	; 0x6eaa <__fp_pscB>
    6c0c:	20 f0       	brcs	.+8      	; 0x6c16 <__addsf3+0x20>
    6c0e:	39 f4       	brne	.+14     	; 0x6c1e <__addsf3+0x28>
    6c10:	9f 3f       	cpi	r25, 0xFF	; 255
    6c12:	19 f4       	brne	.+6      	; 0x6c1a <__addsf3+0x24>
    6c14:	26 f4       	brtc	.+8      	; 0x6c1e <__addsf3+0x28>
    6c16:	0c 94 4b 37 	jmp	0x6e96	; 0x6e96 <__fp_nan>
    6c1a:	0e f4       	brtc	.+2      	; 0x6c1e <__addsf3+0x28>
    6c1c:	e0 95       	com	r30
    6c1e:	e7 fb       	bst	r30, 7
    6c20:	0c 94 45 37 	jmp	0x6e8a	; 0x6e8a <__fp_inf>

00006c24 <__addsf3x>:
    6c24:	e9 2f       	mov	r30, r25
    6c26:	0e 94 6d 37 	call	0x6eda	; 0x6eda <__fp_split3>
    6c2a:	58 f3       	brcs	.-42     	; 0x6c02 <__addsf3+0xc>
    6c2c:	ba 17       	cp	r27, r26
    6c2e:	62 07       	cpc	r22, r18
    6c30:	73 07       	cpc	r23, r19
    6c32:	84 07       	cpc	r24, r20
    6c34:	95 07       	cpc	r25, r21
    6c36:	20 f0       	brcs	.+8      	; 0x6c40 <__addsf3x+0x1c>
    6c38:	79 f4       	brne	.+30     	; 0x6c58 <__addsf3x+0x34>
    6c3a:	a6 f5       	brtc	.+104    	; 0x6ca4 <__addsf3x+0x80>
    6c3c:	0c 94 8f 37 	jmp	0x6f1e	; 0x6f1e <__fp_zero>
    6c40:	0e f4       	brtc	.+2      	; 0x6c44 <__addsf3x+0x20>
    6c42:	e0 95       	com	r30
    6c44:	0b 2e       	mov	r0, r27
    6c46:	ba 2f       	mov	r27, r26
    6c48:	a0 2d       	mov	r26, r0
    6c4a:	0b 01       	movw	r0, r22
    6c4c:	b9 01       	movw	r22, r18
    6c4e:	90 01       	movw	r18, r0
    6c50:	0c 01       	movw	r0, r24
    6c52:	ca 01       	movw	r24, r20
    6c54:	a0 01       	movw	r20, r0
    6c56:	11 24       	eor	r1, r1
    6c58:	ff 27       	eor	r31, r31
    6c5a:	59 1b       	sub	r21, r25
    6c5c:	99 f0       	breq	.+38     	; 0x6c84 <__addsf3x+0x60>
    6c5e:	59 3f       	cpi	r21, 0xF9	; 249
    6c60:	50 f4       	brcc	.+20     	; 0x6c76 <__addsf3x+0x52>
    6c62:	50 3e       	cpi	r21, 0xE0	; 224
    6c64:	68 f1       	brcs	.+90     	; 0x6cc0 <__addsf3x+0x9c>
    6c66:	1a 16       	cp	r1, r26
    6c68:	f0 40       	sbci	r31, 0x00	; 0
    6c6a:	a2 2f       	mov	r26, r18
    6c6c:	23 2f       	mov	r18, r19
    6c6e:	34 2f       	mov	r19, r20
    6c70:	44 27       	eor	r20, r20
    6c72:	58 5f       	subi	r21, 0xF8	; 248
    6c74:	f3 cf       	rjmp	.-26     	; 0x6c5c <__addsf3x+0x38>
    6c76:	46 95       	lsr	r20
    6c78:	37 95       	ror	r19
    6c7a:	27 95       	ror	r18
    6c7c:	a7 95       	ror	r26
    6c7e:	f0 40       	sbci	r31, 0x00	; 0
    6c80:	53 95       	inc	r21
    6c82:	c9 f7       	brne	.-14     	; 0x6c76 <__addsf3x+0x52>
    6c84:	7e f4       	brtc	.+30     	; 0x6ca4 <__addsf3x+0x80>
    6c86:	1f 16       	cp	r1, r31
    6c88:	ba 0b       	sbc	r27, r26
    6c8a:	62 0b       	sbc	r22, r18
    6c8c:	73 0b       	sbc	r23, r19
    6c8e:	84 0b       	sbc	r24, r20
    6c90:	ba f0       	brmi	.+46     	; 0x6cc0 <__addsf3x+0x9c>
    6c92:	91 50       	subi	r25, 0x01	; 1
    6c94:	a1 f0       	breq	.+40     	; 0x6cbe <__addsf3x+0x9a>
    6c96:	ff 0f       	add	r31, r31
    6c98:	bb 1f       	adc	r27, r27
    6c9a:	66 1f       	adc	r22, r22
    6c9c:	77 1f       	adc	r23, r23
    6c9e:	88 1f       	adc	r24, r24
    6ca0:	c2 f7       	brpl	.-16     	; 0x6c92 <__addsf3x+0x6e>
    6ca2:	0e c0       	rjmp	.+28     	; 0x6cc0 <__addsf3x+0x9c>
    6ca4:	ba 0f       	add	r27, r26
    6ca6:	62 1f       	adc	r22, r18
    6ca8:	73 1f       	adc	r23, r19
    6caa:	84 1f       	adc	r24, r20
    6cac:	48 f4       	brcc	.+18     	; 0x6cc0 <__addsf3x+0x9c>
    6cae:	87 95       	ror	r24
    6cb0:	77 95       	ror	r23
    6cb2:	67 95       	ror	r22
    6cb4:	b7 95       	ror	r27
    6cb6:	f7 95       	ror	r31
    6cb8:	9e 3f       	cpi	r25, 0xFE	; 254
    6cba:	08 f0       	brcs	.+2      	; 0x6cbe <__addsf3x+0x9a>
    6cbc:	b0 cf       	rjmp	.-160    	; 0x6c1e <__addsf3+0x28>
    6cbe:	93 95       	inc	r25
    6cc0:	88 0f       	add	r24, r24
    6cc2:	08 f0       	brcs	.+2      	; 0x6cc6 <__addsf3x+0xa2>
    6cc4:	99 27       	eor	r25, r25
    6cc6:	ee 0f       	add	r30, r30
    6cc8:	97 95       	ror	r25
    6cca:	87 95       	ror	r24
    6ccc:	08 95       	ret

00006cce <__divsf3>:
    6cce:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <__divsf3x>
    6cd2:	0c 94 5c 37 	jmp	0x6eb8	; 0x6eb8 <__fp_round>
    6cd6:	0e 94 55 37 	call	0x6eaa	; 0x6eaa <__fp_pscB>
    6cda:	58 f0       	brcs	.+22     	; 0x6cf2 <__divsf3+0x24>
    6cdc:	0e 94 4e 37 	call	0x6e9c	; 0x6e9c <__fp_pscA>
    6ce0:	40 f0       	brcs	.+16     	; 0x6cf2 <__divsf3+0x24>
    6ce2:	29 f4       	brne	.+10     	; 0x6cee <__divsf3+0x20>
    6ce4:	5f 3f       	cpi	r21, 0xFF	; 255
    6ce6:	29 f0       	breq	.+10     	; 0x6cf2 <__divsf3+0x24>
    6ce8:	0c 94 45 37 	jmp	0x6e8a	; 0x6e8a <__fp_inf>
    6cec:	51 11       	cpse	r21, r1
    6cee:	0c 94 90 37 	jmp	0x6f20	; 0x6f20 <__fp_szero>
    6cf2:	0c 94 4b 37 	jmp	0x6e96	; 0x6e96 <__fp_nan>

00006cf6 <__divsf3x>:
    6cf6:	0e 94 6d 37 	call	0x6eda	; 0x6eda <__fp_split3>
    6cfa:	68 f3       	brcs	.-38     	; 0x6cd6 <__divsf3+0x8>

00006cfc <__divsf3_pse>:
    6cfc:	99 23       	and	r25, r25
    6cfe:	b1 f3       	breq	.-20     	; 0x6cec <__divsf3+0x1e>
    6d00:	55 23       	and	r21, r21
    6d02:	91 f3       	breq	.-28     	; 0x6ce8 <__divsf3+0x1a>
    6d04:	95 1b       	sub	r25, r21
    6d06:	55 0b       	sbc	r21, r21
    6d08:	bb 27       	eor	r27, r27
    6d0a:	aa 27       	eor	r26, r26
    6d0c:	62 17       	cp	r22, r18
    6d0e:	73 07       	cpc	r23, r19
    6d10:	84 07       	cpc	r24, r20
    6d12:	38 f0       	brcs	.+14     	; 0x6d22 <__divsf3_pse+0x26>
    6d14:	9f 5f       	subi	r25, 0xFF	; 255
    6d16:	5f 4f       	sbci	r21, 0xFF	; 255
    6d18:	22 0f       	add	r18, r18
    6d1a:	33 1f       	adc	r19, r19
    6d1c:	44 1f       	adc	r20, r20
    6d1e:	aa 1f       	adc	r26, r26
    6d20:	a9 f3       	breq	.-22     	; 0x6d0c <__divsf3_pse+0x10>
    6d22:	35 d0       	rcall	.+106    	; 0x6d8e <__divsf3_pse+0x92>
    6d24:	0e 2e       	mov	r0, r30
    6d26:	3a f0       	brmi	.+14     	; 0x6d36 <__divsf3_pse+0x3a>
    6d28:	e0 e8       	ldi	r30, 0x80	; 128
    6d2a:	32 d0       	rcall	.+100    	; 0x6d90 <__divsf3_pse+0x94>
    6d2c:	91 50       	subi	r25, 0x01	; 1
    6d2e:	50 40       	sbci	r21, 0x00	; 0
    6d30:	e6 95       	lsr	r30
    6d32:	00 1c       	adc	r0, r0
    6d34:	ca f7       	brpl	.-14     	; 0x6d28 <__divsf3_pse+0x2c>
    6d36:	2b d0       	rcall	.+86     	; 0x6d8e <__divsf3_pse+0x92>
    6d38:	fe 2f       	mov	r31, r30
    6d3a:	29 d0       	rcall	.+82     	; 0x6d8e <__divsf3_pse+0x92>
    6d3c:	66 0f       	add	r22, r22
    6d3e:	77 1f       	adc	r23, r23
    6d40:	88 1f       	adc	r24, r24
    6d42:	bb 1f       	adc	r27, r27
    6d44:	26 17       	cp	r18, r22
    6d46:	37 07       	cpc	r19, r23
    6d48:	48 07       	cpc	r20, r24
    6d4a:	ab 07       	cpc	r26, r27
    6d4c:	b0 e8       	ldi	r27, 0x80	; 128
    6d4e:	09 f0       	breq	.+2      	; 0x6d52 <__divsf3_pse+0x56>
    6d50:	bb 0b       	sbc	r27, r27
    6d52:	80 2d       	mov	r24, r0
    6d54:	bf 01       	movw	r22, r30
    6d56:	ff 27       	eor	r31, r31
    6d58:	93 58       	subi	r25, 0x83	; 131
    6d5a:	5f 4f       	sbci	r21, 0xFF	; 255
    6d5c:	3a f0       	brmi	.+14     	; 0x6d6c <__divsf3_pse+0x70>
    6d5e:	9e 3f       	cpi	r25, 0xFE	; 254
    6d60:	51 05       	cpc	r21, r1
    6d62:	78 f0       	brcs	.+30     	; 0x6d82 <__divsf3_pse+0x86>
    6d64:	0c 94 45 37 	jmp	0x6e8a	; 0x6e8a <__fp_inf>
    6d68:	0c 94 90 37 	jmp	0x6f20	; 0x6f20 <__fp_szero>
    6d6c:	5f 3f       	cpi	r21, 0xFF	; 255
    6d6e:	e4 f3       	brlt	.-8      	; 0x6d68 <__divsf3_pse+0x6c>
    6d70:	98 3e       	cpi	r25, 0xE8	; 232
    6d72:	d4 f3       	brlt	.-12     	; 0x6d68 <__divsf3_pse+0x6c>
    6d74:	86 95       	lsr	r24
    6d76:	77 95       	ror	r23
    6d78:	67 95       	ror	r22
    6d7a:	b7 95       	ror	r27
    6d7c:	f7 95       	ror	r31
    6d7e:	9f 5f       	subi	r25, 0xFF	; 255
    6d80:	c9 f7       	brne	.-14     	; 0x6d74 <__divsf3_pse+0x78>
    6d82:	88 0f       	add	r24, r24
    6d84:	91 1d       	adc	r25, r1
    6d86:	96 95       	lsr	r25
    6d88:	87 95       	ror	r24
    6d8a:	97 f9       	bld	r25, 7
    6d8c:	08 95       	ret
    6d8e:	e1 e0       	ldi	r30, 0x01	; 1
    6d90:	66 0f       	add	r22, r22
    6d92:	77 1f       	adc	r23, r23
    6d94:	88 1f       	adc	r24, r24
    6d96:	bb 1f       	adc	r27, r27
    6d98:	62 17       	cp	r22, r18
    6d9a:	73 07       	cpc	r23, r19
    6d9c:	84 07       	cpc	r24, r20
    6d9e:	ba 07       	cpc	r27, r26
    6da0:	20 f0       	brcs	.+8      	; 0x6daa <__divsf3_pse+0xae>
    6da2:	62 1b       	sub	r22, r18
    6da4:	73 0b       	sbc	r23, r19
    6da6:	84 0b       	sbc	r24, r20
    6da8:	ba 0b       	sbc	r27, r26
    6daa:	ee 1f       	adc	r30, r30
    6dac:	88 f7       	brcc	.-30     	; 0x6d90 <__divsf3_pse+0x94>
    6dae:	e0 95       	com	r30
    6db0:	08 95       	ret

00006db2 <__fixunssfsi>:
    6db2:	0e 94 75 37 	call	0x6eea	; 0x6eea <__fp_splitA>
    6db6:	88 f0       	brcs	.+34     	; 0x6dda <__fixunssfsi+0x28>
    6db8:	9f 57       	subi	r25, 0x7F	; 127
    6dba:	98 f0       	brcs	.+38     	; 0x6de2 <__fixunssfsi+0x30>
    6dbc:	b9 2f       	mov	r27, r25
    6dbe:	99 27       	eor	r25, r25
    6dc0:	b7 51       	subi	r27, 0x17	; 23
    6dc2:	b0 f0       	brcs	.+44     	; 0x6df0 <__fixunssfsi+0x3e>
    6dc4:	e1 f0       	breq	.+56     	; 0x6dfe <__fixunssfsi+0x4c>
    6dc6:	66 0f       	add	r22, r22
    6dc8:	77 1f       	adc	r23, r23
    6dca:	88 1f       	adc	r24, r24
    6dcc:	99 1f       	adc	r25, r25
    6dce:	1a f0       	brmi	.+6      	; 0x6dd6 <__fixunssfsi+0x24>
    6dd0:	ba 95       	dec	r27
    6dd2:	c9 f7       	brne	.-14     	; 0x6dc6 <__fixunssfsi+0x14>
    6dd4:	14 c0       	rjmp	.+40     	; 0x6dfe <__fixunssfsi+0x4c>
    6dd6:	b1 30       	cpi	r27, 0x01	; 1
    6dd8:	91 f0       	breq	.+36     	; 0x6dfe <__fixunssfsi+0x4c>
    6dda:	0e 94 8f 37 	call	0x6f1e	; 0x6f1e <__fp_zero>
    6dde:	b1 e0       	ldi	r27, 0x01	; 1
    6de0:	08 95       	ret
    6de2:	0c 94 8f 37 	jmp	0x6f1e	; 0x6f1e <__fp_zero>
    6de6:	67 2f       	mov	r22, r23
    6de8:	78 2f       	mov	r23, r24
    6dea:	88 27       	eor	r24, r24
    6dec:	b8 5f       	subi	r27, 0xF8	; 248
    6dee:	39 f0       	breq	.+14     	; 0x6dfe <__fixunssfsi+0x4c>
    6df0:	b9 3f       	cpi	r27, 0xF9	; 249
    6df2:	cc f3       	brlt	.-14     	; 0x6de6 <__fixunssfsi+0x34>
    6df4:	86 95       	lsr	r24
    6df6:	77 95       	ror	r23
    6df8:	67 95       	ror	r22
    6dfa:	b3 95       	inc	r27
    6dfc:	d9 f7       	brne	.-10     	; 0x6df4 <__fixunssfsi+0x42>
    6dfe:	3e f4       	brtc	.+14     	; 0x6e0e <__fixunssfsi+0x5c>
    6e00:	90 95       	com	r25
    6e02:	80 95       	com	r24
    6e04:	70 95       	com	r23
    6e06:	61 95       	neg	r22
    6e08:	7f 4f       	sbci	r23, 0xFF	; 255
    6e0a:	8f 4f       	sbci	r24, 0xFF	; 255
    6e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    6e0e:	08 95       	ret

00006e10 <__floatunsisf>:
    6e10:	e8 94       	clt
    6e12:	09 c0       	rjmp	.+18     	; 0x6e26 <__floatsisf+0x12>

00006e14 <__floatsisf>:
    6e14:	97 fb       	bst	r25, 7
    6e16:	3e f4       	brtc	.+14     	; 0x6e26 <__floatsisf+0x12>
    6e18:	90 95       	com	r25
    6e1a:	80 95       	com	r24
    6e1c:	70 95       	com	r23
    6e1e:	61 95       	neg	r22
    6e20:	7f 4f       	sbci	r23, 0xFF	; 255
    6e22:	8f 4f       	sbci	r24, 0xFF	; 255
    6e24:	9f 4f       	sbci	r25, 0xFF	; 255
    6e26:	99 23       	and	r25, r25
    6e28:	a9 f0       	breq	.+42     	; 0x6e54 <__floatsisf+0x40>
    6e2a:	f9 2f       	mov	r31, r25
    6e2c:	96 e9       	ldi	r25, 0x96	; 150
    6e2e:	bb 27       	eor	r27, r27
    6e30:	93 95       	inc	r25
    6e32:	f6 95       	lsr	r31
    6e34:	87 95       	ror	r24
    6e36:	77 95       	ror	r23
    6e38:	67 95       	ror	r22
    6e3a:	b7 95       	ror	r27
    6e3c:	f1 11       	cpse	r31, r1
    6e3e:	f8 cf       	rjmp	.-16     	; 0x6e30 <__floatsisf+0x1c>
    6e40:	fa f4       	brpl	.+62     	; 0x6e80 <__floatsisf+0x6c>
    6e42:	bb 0f       	add	r27, r27
    6e44:	11 f4       	brne	.+4      	; 0x6e4a <__floatsisf+0x36>
    6e46:	60 ff       	sbrs	r22, 0
    6e48:	1b c0       	rjmp	.+54     	; 0x6e80 <__floatsisf+0x6c>
    6e4a:	6f 5f       	subi	r22, 0xFF	; 255
    6e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    6e4e:	8f 4f       	sbci	r24, 0xFF	; 255
    6e50:	9f 4f       	sbci	r25, 0xFF	; 255
    6e52:	16 c0       	rjmp	.+44     	; 0x6e80 <__floatsisf+0x6c>
    6e54:	88 23       	and	r24, r24
    6e56:	11 f0       	breq	.+4      	; 0x6e5c <__floatsisf+0x48>
    6e58:	96 e9       	ldi	r25, 0x96	; 150
    6e5a:	11 c0       	rjmp	.+34     	; 0x6e7e <__floatsisf+0x6a>
    6e5c:	77 23       	and	r23, r23
    6e5e:	21 f0       	breq	.+8      	; 0x6e68 <__floatsisf+0x54>
    6e60:	9e e8       	ldi	r25, 0x8E	; 142
    6e62:	87 2f       	mov	r24, r23
    6e64:	76 2f       	mov	r23, r22
    6e66:	05 c0       	rjmp	.+10     	; 0x6e72 <__floatsisf+0x5e>
    6e68:	66 23       	and	r22, r22
    6e6a:	71 f0       	breq	.+28     	; 0x6e88 <__floatsisf+0x74>
    6e6c:	96 e8       	ldi	r25, 0x86	; 134
    6e6e:	86 2f       	mov	r24, r22
    6e70:	70 e0       	ldi	r23, 0x00	; 0
    6e72:	60 e0       	ldi	r22, 0x00	; 0
    6e74:	2a f0       	brmi	.+10     	; 0x6e80 <__floatsisf+0x6c>
    6e76:	9a 95       	dec	r25
    6e78:	66 0f       	add	r22, r22
    6e7a:	77 1f       	adc	r23, r23
    6e7c:	88 1f       	adc	r24, r24
    6e7e:	da f7       	brpl	.-10     	; 0x6e76 <__floatsisf+0x62>
    6e80:	88 0f       	add	r24, r24
    6e82:	96 95       	lsr	r25
    6e84:	87 95       	ror	r24
    6e86:	97 f9       	bld	r25, 7
    6e88:	08 95       	ret

00006e8a <__fp_inf>:
    6e8a:	97 f9       	bld	r25, 7
    6e8c:	9f 67       	ori	r25, 0x7F	; 127
    6e8e:	80 e8       	ldi	r24, 0x80	; 128
    6e90:	70 e0       	ldi	r23, 0x00	; 0
    6e92:	60 e0       	ldi	r22, 0x00	; 0
    6e94:	08 95       	ret

00006e96 <__fp_nan>:
    6e96:	9f ef       	ldi	r25, 0xFF	; 255
    6e98:	80 ec       	ldi	r24, 0xC0	; 192
    6e9a:	08 95       	ret

00006e9c <__fp_pscA>:
    6e9c:	00 24       	eor	r0, r0
    6e9e:	0a 94       	dec	r0
    6ea0:	16 16       	cp	r1, r22
    6ea2:	17 06       	cpc	r1, r23
    6ea4:	18 06       	cpc	r1, r24
    6ea6:	09 06       	cpc	r0, r25
    6ea8:	08 95       	ret

00006eaa <__fp_pscB>:
    6eaa:	00 24       	eor	r0, r0
    6eac:	0a 94       	dec	r0
    6eae:	12 16       	cp	r1, r18
    6eb0:	13 06       	cpc	r1, r19
    6eb2:	14 06       	cpc	r1, r20
    6eb4:	05 06       	cpc	r0, r21
    6eb6:	08 95       	ret

00006eb8 <__fp_round>:
    6eb8:	09 2e       	mov	r0, r25
    6eba:	03 94       	inc	r0
    6ebc:	00 0c       	add	r0, r0
    6ebe:	11 f4       	brne	.+4      	; 0x6ec4 <__fp_round+0xc>
    6ec0:	88 23       	and	r24, r24
    6ec2:	52 f0       	brmi	.+20     	; 0x6ed8 <__fp_round+0x20>
    6ec4:	bb 0f       	add	r27, r27
    6ec6:	40 f4       	brcc	.+16     	; 0x6ed8 <__fp_round+0x20>
    6ec8:	bf 2b       	or	r27, r31
    6eca:	11 f4       	brne	.+4      	; 0x6ed0 <__fp_round+0x18>
    6ecc:	60 ff       	sbrs	r22, 0
    6ece:	04 c0       	rjmp	.+8      	; 0x6ed8 <__fp_round+0x20>
    6ed0:	6f 5f       	subi	r22, 0xFF	; 255
    6ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    6ed4:	8f 4f       	sbci	r24, 0xFF	; 255
    6ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ed8:	08 95       	ret

00006eda <__fp_split3>:
    6eda:	57 fd       	sbrc	r21, 7
    6edc:	90 58       	subi	r25, 0x80	; 128
    6ede:	44 0f       	add	r20, r20
    6ee0:	55 1f       	adc	r21, r21
    6ee2:	59 f0       	breq	.+22     	; 0x6efa <__fp_splitA+0x10>
    6ee4:	5f 3f       	cpi	r21, 0xFF	; 255
    6ee6:	71 f0       	breq	.+28     	; 0x6f04 <__fp_splitA+0x1a>
    6ee8:	47 95       	ror	r20

00006eea <__fp_splitA>:
    6eea:	88 0f       	add	r24, r24
    6eec:	97 fb       	bst	r25, 7
    6eee:	99 1f       	adc	r25, r25
    6ef0:	61 f0       	breq	.+24     	; 0x6f0a <__fp_splitA+0x20>
    6ef2:	9f 3f       	cpi	r25, 0xFF	; 255
    6ef4:	79 f0       	breq	.+30     	; 0x6f14 <__fp_splitA+0x2a>
    6ef6:	87 95       	ror	r24
    6ef8:	08 95       	ret
    6efa:	12 16       	cp	r1, r18
    6efc:	13 06       	cpc	r1, r19
    6efe:	14 06       	cpc	r1, r20
    6f00:	55 1f       	adc	r21, r21
    6f02:	f2 cf       	rjmp	.-28     	; 0x6ee8 <__fp_split3+0xe>
    6f04:	46 95       	lsr	r20
    6f06:	f1 df       	rcall	.-30     	; 0x6eea <__fp_splitA>
    6f08:	08 c0       	rjmp	.+16     	; 0x6f1a <__fp_splitA+0x30>
    6f0a:	16 16       	cp	r1, r22
    6f0c:	17 06       	cpc	r1, r23
    6f0e:	18 06       	cpc	r1, r24
    6f10:	99 1f       	adc	r25, r25
    6f12:	f1 cf       	rjmp	.-30     	; 0x6ef6 <__fp_splitA+0xc>
    6f14:	86 95       	lsr	r24
    6f16:	71 05       	cpc	r23, r1
    6f18:	61 05       	cpc	r22, r1
    6f1a:	08 94       	sec
    6f1c:	08 95       	ret

00006f1e <__fp_zero>:
    6f1e:	e8 94       	clt

00006f20 <__fp_szero>:
    6f20:	bb 27       	eor	r27, r27
    6f22:	66 27       	eor	r22, r22
    6f24:	77 27       	eor	r23, r23
    6f26:	cb 01       	movw	r24, r22
    6f28:	97 f9       	bld	r25, 7
    6f2a:	08 95       	ret

00006f2c <__mulsf3>:
    6f2c:	0e 94 a9 37 	call	0x6f52	; 0x6f52 <__mulsf3x>
    6f30:	0c 94 5c 37 	jmp	0x6eb8	; 0x6eb8 <__fp_round>
    6f34:	0e 94 4e 37 	call	0x6e9c	; 0x6e9c <__fp_pscA>
    6f38:	38 f0       	brcs	.+14     	; 0x6f48 <__mulsf3+0x1c>
    6f3a:	0e 94 55 37 	call	0x6eaa	; 0x6eaa <__fp_pscB>
    6f3e:	20 f0       	brcs	.+8      	; 0x6f48 <__mulsf3+0x1c>
    6f40:	95 23       	and	r25, r21
    6f42:	11 f0       	breq	.+4      	; 0x6f48 <__mulsf3+0x1c>
    6f44:	0c 94 45 37 	jmp	0x6e8a	; 0x6e8a <__fp_inf>
    6f48:	0c 94 4b 37 	jmp	0x6e96	; 0x6e96 <__fp_nan>
    6f4c:	11 24       	eor	r1, r1
    6f4e:	0c 94 90 37 	jmp	0x6f20	; 0x6f20 <__fp_szero>

00006f52 <__mulsf3x>:
    6f52:	0e 94 6d 37 	call	0x6eda	; 0x6eda <__fp_split3>
    6f56:	70 f3       	brcs	.-36     	; 0x6f34 <__mulsf3+0x8>

00006f58 <__mulsf3_pse>:
    6f58:	95 9f       	mul	r25, r21
    6f5a:	c1 f3       	breq	.-16     	; 0x6f4c <__mulsf3+0x20>
    6f5c:	95 0f       	add	r25, r21
    6f5e:	50 e0       	ldi	r21, 0x00	; 0
    6f60:	55 1f       	adc	r21, r21
    6f62:	62 9f       	mul	r22, r18
    6f64:	f0 01       	movw	r30, r0
    6f66:	72 9f       	mul	r23, r18
    6f68:	bb 27       	eor	r27, r27
    6f6a:	f0 0d       	add	r31, r0
    6f6c:	b1 1d       	adc	r27, r1
    6f6e:	63 9f       	mul	r22, r19
    6f70:	aa 27       	eor	r26, r26
    6f72:	f0 0d       	add	r31, r0
    6f74:	b1 1d       	adc	r27, r1
    6f76:	aa 1f       	adc	r26, r26
    6f78:	64 9f       	mul	r22, r20
    6f7a:	66 27       	eor	r22, r22
    6f7c:	b0 0d       	add	r27, r0
    6f7e:	a1 1d       	adc	r26, r1
    6f80:	66 1f       	adc	r22, r22
    6f82:	82 9f       	mul	r24, r18
    6f84:	22 27       	eor	r18, r18
    6f86:	b0 0d       	add	r27, r0
    6f88:	a1 1d       	adc	r26, r1
    6f8a:	62 1f       	adc	r22, r18
    6f8c:	73 9f       	mul	r23, r19
    6f8e:	b0 0d       	add	r27, r0
    6f90:	a1 1d       	adc	r26, r1
    6f92:	62 1f       	adc	r22, r18
    6f94:	83 9f       	mul	r24, r19
    6f96:	a0 0d       	add	r26, r0
    6f98:	61 1d       	adc	r22, r1
    6f9a:	22 1f       	adc	r18, r18
    6f9c:	74 9f       	mul	r23, r20
    6f9e:	33 27       	eor	r19, r19
    6fa0:	a0 0d       	add	r26, r0
    6fa2:	61 1d       	adc	r22, r1
    6fa4:	23 1f       	adc	r18, r19
    6fa6:	84 9f       	mul	r24, r20
    6fa8:	60 0d       	add	r22, r0
    6faa:	21 1d       	adc	r18, r1
    6fac:	82 2f       	mov	r24, r18
    6fae:	76 2f       	mov	r23, r22
    6fb0:	6a 2f       	mov	r22, r26
    6fb2:	11 24       	eor	r1, r1
    6fb4:	9f 57       	subi	r25, 0x7F	; 127
    6fb6:	50 40       	sbci	r21, 0x00	; 0
    6fb8:	9a f0       	brmi	.+38     	; 0x6fe0 <__mulsf3_pse+0x88>
    6fba:	f1 f0       	breq	.+60     	; 0x6ff8 <__mulsf3_pse+0xa0>
    6fbc:	88 23       	and	r24, r24
    6fbe:	4a f0       	brmi	.+18     	; 0x6fd2 <__mulsf3_pse+0x7a>
    6fc0:	ee 0f       	add	r30, r30
    6fc2:	ff 1f       	adc	r31, r31
    6fc4:	bb 1f       	adc	r27, r27
    6fc6:	66 1f       	adc	r22, r22
    6fc8:	77 1f       	adc	r23, r23
    6fca:	88 1f       	adc	r24, r24
    6fcc:	91 50       	subi	r25, 0x01	; 1
    6fce:	50 40       	sbci	r21, 0x00	; 0
    6fd0:	a9 f7       	brne	.-22     	; 0x6fbc <__mulsf3_pse+0x64>
    6fd2:	9e 3f       	cpi	r25, 0xFE	; 254
    6fd4:	51 05       	cpc	r21, r1
    6fd6:	80 f0       	brcs	.+32     	; 0x6ff8 <__mulsf3_pse+0xa0>
    6fd8:	0c 94 45 37 	jmp	0x6e8a	; 0x6e8a <__fp_inf>
    6fdc:	0c 94 90 37 	jmp	0x6f20	; 0x6f20 <__fp_szero>
    6fe0:	5f 3f       	cpi	r21, 0xFF	; 255
    6fe2:	e4 f3       	brlt	.-8      	; 0x6fdc <__mulsf3_pse+0x84>
    6fe4:	98 3e       	cpi	r25, 0xE8	; 232
    6fe6:	d4 f3       	brlt	.-12     	; 0x6fdc <__mulsf3_pse+0x84>
    6fe8:	86 95       	lsr	r24
    6fea:	77 95       	ror	r23
    6fec:	67 95       	ror	r22
    6fee:	b7 95       	ror	r27
    6ff0:	f7 95       	ror	r31
    6ff2:	e7 95       	ror	r30
    6ff4:	9f 5f       	subi	r25, 0xFF	; 255
    6ff6:	c1 f7       	brne	.-16     	; 0x6fe8 <__mulsf3_pse+0x90>
    6ff8:	fe 2b       	or	r31, r30
    6ffa:	88 0f       	add	r24, r24
    6ffc:	91 1d       	adc	r25, r1
    6ffe:	96 95       	lsr	r25
    7000:	87 95       	ror	r24
    7002:	97 f9       	bld	r25, 7
    7004:	08 95       	ret

00007006 <__mulsi3>:
    7006:	db 01       	movw	r26, r22
    7008:	8f 93       	push	r24
    700a:	9f 93       	push	r25
    700c:	0e 94 60 38 	call	0x70c0	; 0x70c0 <__muluhisi3>
    7010:	bf 91       	pop	r27
    7012:	af 91       	pop	r26
    7014:	a2 9f       	mul	r26, r18
    7016:	80 0d       	add	r24, r0
    7018:	91 1d       	adc	r25, r1
    701a:	a3 9f       	mul	r26, r19
    701c:	90 0d       	add	r25, r0
    701e:	b2 9f       	mul	r27, r18
    7020:	90 0d       	add	r25, r0
    7022:	11 24       	eor	r1, r1
    7024:	08 95       	ret

00007026 <__udivmodhi4>:
    7026:	aa 1b       	sub	r26, r26
    7028:	bb 1b       	sub	r27, r27
    702a:	51 e1       	ldi	r21, 0x11	; 17
    702c:	07 c0       	rjmp	.+14     	; 0x703c <__udivmodhi4_ep>

0000702e <__udivmodhi4_loop>:
    702e:	aa 1f       	adc	r26, r26
    7030:	bb 1f       	adc	r27, r27
    7032:	a6 17       	cp	r26, r22
    7034:	b7 07       	cpc	r27, r23
    7036:	10 f0       	brcs	.+4      	; 0x703c <__udivmodhi4_ep>
    7038:	a6 1b       	sub	r26, r22
    703a:	b7 0b       	sbc	r27, r23

0000703c <__udivmodhi4_ep>:
    703c:	88 1f       	adc	r24, r24
    703e:	99 1f       	adc	r25, r25
    7040:	5a 95       	dec	r21
    7042:	a9 f7       	brne	.-22     	; 0x702e <__udivmodhi4_loop>
    7044:	80 95       	com	r24
    7046:	90 95       	com	r25
    7048:	bc 01       	movw	r22, r24
    704a:	cd 01       	movw	r24, r26
    704c:	08 95       	ret

0000704e <__udivmodsi4>:
    704e:	a1 e2       	ldi	r26, 0x21	; 33
    7050:	1a 2e       	mov	r1, r26
    7052:	aa 1b       	sub	r26, r26
    7054:	bb 1b       	sub	r27, r27
    7056:	fd 01       	movw	r30, r26
    7058:	0d c0       	rjmp	.+26     	; 0x7074 <__udivmodsi4_ep>

0000705a <__udivmodsi4_loop>:
    705a:	aa 1f       	adc	r26, r26
    705c:	bb 1f       	adc	r27, r27
    705e:	ee 1f       	adc	r30, r30
    7060:	ff 1f       	adc	r31, r31
    7062:	a2 17       	cp	r26, r18
    7064:	b3 07       	cpc	r27, r19
    7066:	e4 07       	cpc	r30, r20
    7068:	f5 07       	cpc	r31, r21
    706a:	20 f0       	brcs	.+8      	; 0x7074 <__udivmodsi4_ep>
    706c:	a2 1b       	sub	r26, r18
    706e:	b3 0b       	sbc	r27, r19
    7070:	e4 0b       	sbc	r30, r20
    7072:	f5 0b       	sbc	r31, r21

00007074 <__udivmodsi4_ep>:
    7074:	66 1f       	adc	r22, r22
    7076:	77 1f       	adc	r23, r23
    7078:	88 1f       	adc	r24, r24
    707a:	99 1f       	adc	r25, r25
    707c:	1a 94       	dec	r1
    707e:	69 f7       	brne	.-38     	; 0x705a <__udivmodsi4_loop>
    7080:	60 95       	com	r22
    7082:	70 95       	com	r23
    7084:	80 95       	com	r24
    7086:	90 95       	com	r25
    7088:	9b 01       	movw	r18, r22
    708a:	ac 01       	movw	r20, r24
    708c:	bd 01       	movw	r22, r26
    708e:	cf 01       	movw	r24, r30
    7090:	08 95       	ret

00007092 <__tablejump2__>:
    7092:	ee 0f       	add	r30, r30
    7094:	ff 1f       	adc	r31, r31
    7096:	88 1f       	adc	r24, r24
    7098:	8b bf       	out	0x3b, r24	; 59
    709a:	07 90       	elpm	r0, Z+
    709c:	f6 91       	elpm	r31, Z
    709e:	e0 2d       	mov	r30, r0
    70a0:	19 94       	eijmp

000070a2 <__umulhisi3>:
    70a2:	a2 9f       	mul	r26, r18
    70a4:	b0 01       	movw	r22, r0
    70a6:	b3 9f       	mul	r27, r19
    70a8:	c0 01       	movw	r24, r0
    70aa:	a3 9f       	mul	r26, r19
    70ac:	70 0d       	add	r23, r0
    70ae:	81 1d       	adc	r24, r1
    70b0:	11 24       	eor	r1, r1
    70b2:	91 1d       	adc	r25, r1
    70b4:	b2 9f       	mul	r27, r18
    70b6:	70 0d       	add	r23, r0
    70b8:	81 1d       	adc	r24, r1
    70ba:	11 24       	eor	r1, r1
    70bc:	91 1d       	adc	r25, r1
    70be:	08 95       	ret

000070c0 <__muluhisi3>:
    70c0:	0e 94 51 38 	call	0x70a2	; 0x70a2 <__umulhisi3>
    70c4:	a5 9f       	mul	r26, r21
    70c6:	90 0d       	add	r25, r0
    70c8:	b4 9f       	mul	r27, r20
    70ca:	90 0d       	add	r25, r0
    70cc:	a4 9f       	mul	r26, r20
    70ce:	80 0d       	add	r24, r0
    70d0:	91 1d       	adc	r25, r1
    70d2:	11 24       	eor	r1, r1
    70d4:	08 95       	ret

000070d6 <__ftoa_engine>:
    70d6:	28 30       	cpi	r18, 0x08	; 8
    70d8:	08 f0       	brcs	.+2      	; 0x70dc <__ftoa_engine+0x6>
    70da:	27 e0       	ldi	r18, 0x07	; 7
    70dc:	33 27       	eor	r19, r19
    70de:	da 01       	movw	r26, r20
    70e0:	99 0f       	add	r25, r25
    70e2:	31 1d       	adc	r19, r1
    70e4:	87 fd       	sbrc	r24, 7
    70e6:	91 60       	ori	r25, 0x01	; 1
    70e8:	00 96       	adiw	r24, 0x00	; 0
    70ea:	61 05       	cpc	r22, r1
    70ec:	71 05       	cpc	r23, r1
    70ee:	39 f4       	brne	.+14     	; 0x70fe <__ftoa_engine+0x28>
    70f0:	32 60       	ori	r19, 0x02	; 2
    70f2:	2e 5f       	subi	r18, 0xFE	; 254
    70f4:	3d 93       	st	X+, r19
    70f6:	30 e3       	ldi	r19, 0x30	; 48
    70f8:	2a 95       	dec	r18
    70fa:	e1 f7       	brne	.-8      	; 0x70f4 <__ftoa_engine+0x1e>
    70fc:	08 95       	ret
    70fe:	9f 3f       	cpi	r25, 0xFF	; 255
    7100:	30 f0       	brcs	.+12     	; 0x710e <__ftoa_engine+0x38>
    7102:	80 38       	cpi	r24, 0x80	; 128
    7104:	71 05       	cpc	r23, r1
    7106:	61 05       	cpc	r22, r1
    7108:	09 f0       	breq	.+2      	; 0x710c <__ftoa_engine+0x36>
    710a:	3c 5f       	subi	r19, 0xFC	; 252
    710c:	3c 5f       	subi	r19, 0xFC	; 252
    710e:	3d 93       	st	X+, r19
    7110:	91 30       	cpi	r25, 0x01	; 1
    7112:	08 f0       	brcs	.+2      	; 0x7116 <__ftoa_engine+0x40>
    7114:	80 68       	ori	r24, 0x80	; 128
    7116:	91 1d       	adc	r25, r1
    7118:	df 93       	push	r29
    711a:	cf 93       	push	r28
    711c:	1f 93       	push	r17
    711e:	0f 93       	push	r16
    7120:	ff 92       	push	r15
    7122:	ef 92       	push	r14
    7124:	19 2f       	mov	r17, r25
    7126:	98 7f       	andi	r25, 0xF8	; 248
    7128:	96 95       	lsr	r25
    712a:	e9 2f       	mov	r30, r25
    712c:	96 95       	lsr	r25
    712e:	96 95       	lsr	r25
    7130:	e9 0f       	add	r30, r25
    7132:	ff 27       	eor	r31, r31
    7134:	ec 53       	subi	r30, 0x3C	; 60
    7136:	fa 4f       	sbci	r31, 0xFA	; 250
    7138:	99 27       	eor	r25, r25
    713a:	33 27       	eor	r19, r19
    713c:	ee 24       	eor	r14, r14
    713e:	ff 24       	eor	r15, r15
    7140:	a7 01       	movw	r20, r14
    7142:	e7 01       	movw	r28, r14
    7144:	05 90       	lpm	r0, Z+
    7146:	08 94       	sec
    7148:	07 94       	ror	r0
    714a:	28 f4       	brcc	.+10     	; 0x7156 <__ftoa_engine+0x80>
    714c:	36 0f       	add	r19, r22
    714e:	e7 1e       	adc	r14, r23
    7150:	f8 1e       	adc	r15, r24
    7152:	49 1f       	adc	r20, r25
    7154:	51 1d       	adc	r21, r1
    7156:	66 0f       	add	r22, r22
    7158:	77 1f       	adc	r23, r23
    715a:	88 1f       	adc	r24, r24
    715c:	99 1f       	adc	r25, r25
    715e:	06 94       	lsr	r0
    7160:	a1 f7       	brne	.-24     	; 0x714a <__ftoa_engine+0x74>
    7162:	05 90       	lpm	r0, Z+
    7164:	07 94       	ror	r0
    7166:	28 f4       	brcc	.+10     	; 0x7172 <__ftoa_engine+0x9c>
    7168:	e7 0e       	add	r14, r23
    716a:	f8 1e       	adc	r15, r24
    716c:	49 1f       	adc	r20, r25
    716e:	56 1f       	adc	r21, r22
    7170:	c1 1d       	adc	r28, r1
    7172:	77 0f       	add	r23, r23
    7174:	88 1f       	adc	r24, r24
    7176:	99 1f       	adc	r25, r25
    7178:	66 1f       	adc	r22, r22
    717a:	06 94       	lsr	r0
    717c:	a1 f7       	brne	.-24     	; 0x7166 <__ftoa_engine+0x90>
    717e:	05 90       	lpm	r0, Z+
    7180:	07 94       	ror	r0
    7182:	28 f4       	brcc	.+10     	; 0x718e <__ftoa_engine+0xb8>
    7184:	f8 0e       	add	r15, r24
    7186:	49 1f       	adc	r20, r25
    7188:	56 1f       	adc	r21, r22
    718a:	c7 1f       	adc	r28, r23
    718c:	d1 1d       	adc	r29, r1
    718e:	88 0f       	add	r24, r24
    7190:	99 1f       	adc	r25, r25
    7192:	66 1f       	adc	r22, r22
    7194:	77 1f       	adc	r23, r23
    7196:	06 94       	lsr	r0
    7198:	a1 f7       	brne	.-24     	; 0x7182 <__ftoa_engine+0xac>
    719a:	05 90       	lpm	r0, Z+
    719c:	07 94       	ror	r0
    719e:	20 f4       	brcc	.+8      	; 0x71a8 <__ftoa_engine+0xd2>
    71a0:	49 0f       	add	r20, r25
    71a2:	56 1f       	adc	r21, r22
    71a4:	c7 1f       	adc	r28, r23
    71a6:	d8 1f       	adc	r29, r24
    71a8:	99 0f       	add	r25, r25
    71aa:	66 1f       	adc	r22, r22
    71ac:	77 1f       	adc	r23, r23
    71ae:	88 1f       	adc	r24, r24
    71b0:	06 94       	lsr	r0
    71b2:	a9 f7       	brne	.-22     	; 0x719e <__ftoa_engine+0xc8>
    71b4:	84 91       	lpm	r24, Z
    71b6:	10 95       	com	r17
    71b8:	17 70       	andi	r17, 0x07	; 7
    71ba:	41 f0       	breq	.+16     	; 0x71cc <__ftoa_engine+0xf6>
    71bc:	d6 95       	lsr	r29
    71be:	c7 95       	ror	r28
    71c0:	57 95       	ror	r21
    71c2:	47 95       	ror	r20
    71c4:	f7 94       	ror	r15
    71c6:	e7 94       	ror	r14
    71c8:	1a 95       	dec	r17
    71ca:	c1 f7       	brne	.-16     	; 0x71bc <__ftoa_engine+0xe6>
    71cc:	ea e6       	ldi	r30, 0x6A	; 106
    71ce:	f5 e0       	ldi	r31, 0x05	; 5
    71d0:	68 94       	set
    71d2:	15 90       	lpm	r1, Z+
    71d4:	15 91       	lpm	r17, Z+
    71d6:	35 91       	lpm	r19, Z+
    71d8:	65 91       	lpm	r22, Z+
    71da:	95 91       	lpm	r25, Z+
    71dc:	05 90       	lpm	r0, Z+
    71de:	7f e2       	ldi	r23, 0x2F	; 47
    71e0:	73 95       	inc	r23
    71e2:	e1 18       	sub	r14, r1
    71e4:	f1 0a       	sbc	r15, r17
    71e6:	43 0b       	sbc	r20, r19
    71e8:	56 0b       	sbc	r21, r22
    71ea:	c9 0b       	sbc	r28, r25
    71ec:	d0 09       	sbc	r29, r0
    71ee:	c0 f7       	brcc	.-16     	; 0x71e0 <__ftoa_engine+0x10a>
    71f0:	e1 0c       	add	r14, r1
    71f2:	f1 1e       	adc	r15, r17
    71f4:	43 1f       	adc	r20, r19
    71f6:	56 1f       	adc	r21, r22
    71f8:	c9 1f       	adc	r28, r25
    71fa:	d0 1d       	adc	r29, r0
    71fc:	7e f4       	brtc	.+30     	; 0x721c <__ftoa_engine+0x146>
    71fe:	70 33       	cpi	r23, 0x30	; 48
    7200:	11 f4       	brne	.+4      	; 0x7206 <__ftoa_engine+0x130>
    7202:	8a 95       	dec	r24
    7204:	e6 cf       	rjmp	.-52     	; 0x71d2 <__ftoa_engine+0xfc>
    7206:	e8 94       	clt
    7208:	01 50       	subi	r16, 0x01	; 1
    720a:	30 f0       	brcs	.+12     	; 0x7218 <__ftoa_engine+0x142>
    720c:	08 0f       	add	r16, r24
    720e:	0a f4       	brpl	.+2      	; 0x7212 <__ftoa_engine+0x13c>
    7210:	00 27       	eor	r16, r16
    7212:	02 17       	cp	r16, r18
    7214:	08 f4       	brcc	.+2      	; 0x7218 <__ftoa_engine+0x142>
    7216:	20 2f       	mov	r18, r16
    7218:	23 95       	inc	r18
    721a:	02 2f       	mov	r16, r18
    721c:	7a 33       	cpi	r23, 0x3A	; 58
    721e:	28 f0       	brcs	.+10     	; 0x722a <__ftoa_engine+0x154>
    7220:	79 e3       	ldi	r23, 0x39	; 57
    7222:	7d 93       	st	X+, r23
    7224:	2a 95       	dec	r18
    7226:	e9 f7       	brne	.-6      	; 0x7222 <__ftoa_engine+0x14c>
    7228:	10 c0       	rjmp	.+32     	; 0x724a <__ftoa_engine+0x174>
    722a:	7d 93       	st	X+, r23
    722c:	2a 95       	dec	r18
    722e:	89 f6       	brne	.-94     	; 0x71d2 <__ftoa_engine+0xfc>
    7230:	06 94       	lsr	r0
    7232:	97 95       	ror	r25
    7234:	67 95       	ror	r22
    7236:	37 95       	ror	r19
    7238:	17 95       	ror	r17
    723a:	17 94       	ror	r1
    723c:	e1 18       	sub	r14, r1
    723e:	f1 0a       	sbc	r15, r17
    7240:	43 0b       	sbc	r20, r19
    7242:	56 0b       	sbc	r21, r22
    7244:	c9 0b       	sbc	r28, r25
    7246:	d0 09       	sbc	r29, r0
    7248:	98 f0       	brcs	.+38     	; 0x7270 <__ftoa_engine+0x19a>
    724a:	23 95       	inc	r18
    724c:	7e 91       	ld	r23, -X
    724e:	73 95       	inc	r23
    7250:	7a 33       	cpi	r23, 0x3A	; 58
    7252:	08 f0       	brcs	.+2      	; 0x7256 <__ftoa_engine+0x180>
    7254:	70 e3       	ldi	r23, 0x30	; 48
    7256:	7c 93       	st	X, r23
    7258:	20 13       	cpse	r18, r16
    725a:	b8 f7       	brcc	.-18     	; 0x724a <__ftoa_engine+0x174>
    725c:	7e 91       	ld	r23, -X
    725e:	70 61       	ori	r23, 0x10	; 16
    7260:	7d 93       	st	X+, r23
    7262:	30 f0       	brcs	.+12     	; 0x7270 <__ftoa_engine+0x19a>
    7264:	83 95       	inc	r24
    7266:	71 e3       	ldi	r23, 0x31	; 49
    7268:	7d 93       	st	X+, r23
    726a:	70 e3       	ldi	r23, 0x30	; 48
    726c:	2a 95       	dec	r18
    726e:	e1 f7       	brne	.-8      	; 0x7268 <__ftoa_engine+0x192>
    7270:	11 24       	eor	r1, r1
    7272:	ef 90       	pop	r14
    7274:	ff 90       	pop	r15
    7276:	0f 91       	pop	r16
    7278:	1f 91       	pop	r17
    727a:	cf 91       	pop	r28
    727c:	df 91       	pop	r29
    727e:	99 27       	eor	r25, r25
    7280:	87 fd       	sbrc	r24, 7
    7282:	90 95       	com	r25
    7284:	08 95       	ret

00007286 <memcpy>:
    7286:	fb 01       	movw	r30, r22
    7288:	dc 01       	movw	r26, r24
    728a:	02 c0       	rjmp	.+4      	; 0x7290 <memcpy+0xa>
    728c:	01 90       	ld	r0, Z+
    728e:	0d 92       	st	X+, r0
    7290:	41 50       	subi	r20, 0x01	; 1
    7292:	50 40       	sbci	r21, 0x00	; 0
    7294:	d8 f7       	brcc	.-10     	; 0x728c <memcpy+0x6>
    7296:	08 95       	ret

00007298 <memset>:
    7298:	dc 01       	movw	r26, r24
    729a:	01 c0       	rjmp	.+2      	; 0x729e <memset+0x6>
    729c:	6d 93       	st	X+, r22
    729e:	41 50       	subi	r20, 0x01	; 1
    72a0:	50 40       	sbci	r21, 0x00	; 0
    72a2:	e0 f7       	brcc	.-8      	; 0x729c <memset+0x4>
    72a4:	08 95       	ret

000072a6 <strncpy>:
    72a6:	fb 01       	movw	r30, r22
    72a8:	dc 01       	movw	r26, r24
    72aa:	41 50       	subi	r20, 0x01	; 1
    72ac:	50 40       	sbci	r21, 0x00	; 0
    72ae:	48 f0       	brcs	.+18     	; 0x72c2 <strncpy+0x1c>
    72b0:	01 90       	ld	r0, Z+
    72b2:	0d 92       	st	X+, r0
    72b4:	00 20       	and	r0, r0
    72b6:	c9 f7       	brne	.-14     	; 0x72aa <strncpy+0x4>
    72b8:	01 c0       	rjmp	.+2      	; 0x72bc <strncpy+0x16>
    72ba:	1d 92       	st	X+, r1
    72bc:	41 50       	subi	r20, 0x01	; 1
    72be:	50 40       	sbci	r21, 0x00	; 0
    72c0:	e0 f7       	brcc	.-8      	; 0x72ba <strncpy+0x14>
    72c2:	08 95       	ret

000072c4 <__itoa_ncheck>:
    72c4:	bb 27       	eor	r27, r27
    72c6:	4a 30       	cpi	r20, 0x0A	; 10
    72c8:	31 f4       	brne	.+12     	; 0x72d6 <__itoa_ncheck+0x12>
    72ca:	99 23       	and	r25, r25
    72cc:	22 f4       	brpl	.+8      	; 0x72d6 <__itoa_ncheck+0x12>
    72ce:	bd e2       	ldi	r27, 0x2D	; 45
    72d0:	90 95       	com	r25
    72d2:	81 95       	neg	r24
    72d4:	9f 4f       	sbci	r25, 0xFF	; 255
    72d6:	0c 94 b5 39 	jmp	0x736a	; 0x736a <__utoa_common>

000072da <__ltoa_ncheck>:
    72da:	bb 27       	eor	r27, r27
    72dc:	2a 30       	cpi	r18, 0x0A	; 10
    72de:	51 f4       	brne	.+20     	; 0x72f4 <__ltoa_ncheck+0x1a>
    72e0:	99 23       	and	r25, r25
    72e2:	42 f4       	brpl	.+16     	; 0x72f4 <__ltoa_ncheck+0x1a>
    72e4:	bd e2       	ldi	r27, 0x2D	; 45
    72e6:	90 95       	com	r25
    72e8:	80 95       	com	r24
    72ea:	70 95       	com	r23
    72ec:	61 95       	neg	r22
    72ee:	7f 4f       	sbci	r23, 0xFF	; 255
    72f0:	8f 4f       	sbci	r24, 0xFF	; 255
    72f2:	9f 4f       	sbci	r25, 0xFF	; 255
    72f4:	0c 94 88 39 	jmp	0x7310	; 0x7310 <__ultoa_common>

000072f8 <ultoa>:
    72f8:	25 32       	cpi	r18, 0x25	; 37
    72fa:	31 05       	cpc	r19, r1
    72fc:	20 f4       	brcc	.+8      	; 0x7306 <ultoa+0xe>
    72fe:	22 30       	cpi	r18, 0x02	; 2
    7300:	10 f0       	brcs	.+4      	; 0x7306 <ultoa+0xe>
    7302:	0c 94 87 39 	jmp	0x730e	; 0x730e <__ultoa_ncheck>
    7306:	fa 01       	movw	r30, r20
    7308:	10 82       	st	Z, r1
    730a:	ca 01       	movw	r24, r20
    730c:	08 95       	ret

0000730e <__ultoa_ncheck>:
    730e:	bb 27       	eor	r27, r27

00007310 <__ultoa_common>:
    7310:	fa 01       	movw	r30, r20
    7312:	a6 2f       	mov	r26, r22
    7314:	62 17       	cp	r22, r18
    7316:	71 05       	cpc	r23, r1
    7318:	81 05       	cpc	r24, r1
    731a:	91 05       	cpc	r25, r1
    731c:	33 0b       	sbc	r19, r19
    731e:	30 fb       	bst	r19, 0
    7320:	66 f0       	brts	.+24     	; 0x733a <__ultoa_common+0x2a>
    7322:	aa 27       	eor	r26, r26
    7324:	66 0f       	add	r22, r22
    7326:	77 1f       	adc	r23, r23
    7328:	88 1f       	adc	r24, r24
    732a:	99 1f       	adc	r25, r25
    732c:	aa 1f       	adc	r26, r26
    732e:	a2 17       	cp	r26, r18
    7330:	10 f0       	brcs	.+4      	; 0x7336 <__ultoa_common+0x26>
    7332:	a2 1b       	sub	r26, r18
    7334:	63 95       	inc	r22
    7336:	38 50       	subi	r19, 0x08	; 8
    7338:	a9 f7       	brne	.-22     	; 0x7324 <__ultoa_common+0x14>
    733a:	a0 5d       	subi	r26, 0xD0	; 208
    733c:	aa 33       	cpi	r26, 0x3A	; 58
    733e:	08 f0       	brcs	.+2      	; 0x7342 <__ultoa_common+0x32>
    7340:	a9 5d       	subi	r26, 0xD9	; 217
    7342:	a1 93       	st	Z+, r26
    7344:	36 f7       	brtc	.-52     	; 0x7312 <__ultoa_common+0x2>
    7346:	b1 11       	cpse	r27, r1
    7348:	b1 93       	st	Z+, r27
    734a:	10 82       	st	Z, r1
    734c:	ca 01       	movw	r24, r20
    734e:	0c 94 ce 39 	jmp	0x739c	; 0x739c <strrev>

00007352 <utoa>:
    7352:	45 32       	cpi	r20, 0x25	; 37
    7354:	51 05       	cpc	r21, r1
    7356:	20 f4       	brcc	.+8      	; 0x7360 <utoa+0xe>
    7358:	42 30       	cpi	r20, 0x02	; 2
    735a:	10 f0       	brcs	.+4      	; 0x7360 <utoa+0xe>
    735c:	0c 94 b4 39 	jmp	0x7368	; 0x7368 <__utoa_ncheck>
    7360:	fb 01       	movw	r30, r22
    7362:	10 82       	st	Z, r1
    7364:	cb 01       	movw	r24, r22
    7366:	08 95       	ret

00007368 <__utoa_ncheck>:
    7368:	bb 27       	eor	r27, r27

0000736a <__utoa_common>:
    736a:	fb 01       	movw	r30, r22
    736c:	55 27       	eor	r21, r21
    736e:	aa 27       	eor	r26, r26
    7370:	88 0f       	add	r24, r24
    7372:	99 1f       	adc	r25, r25
    7374:	aa 1f       	adc	r26, r26
    7376:	a4 17       	cp	r26, r20
    7378:	10 f0       	brcs	.+4      	; 0x737e <__utoa_common+0x14>
    737a:	a4 1b       	sub	r26, r20
    737c:	83 95       	inc	r24
    737e:	50 51       	subi	r21, 0x10	; 16
    7380:	b9 f7       	brne	.-18     	; 0x7370 <__utoa_common+0x6>
    7382:	a0 5d       	subi	r26, 0xD0	; 208
    7384:	aa 33       	cpi	r26, 0x3A	; 58
    7386:	08 f0       	brcs	.+2      	; 0x738a <__utoa_common+0x20>
    7388:	a9 5d       	subi	r26, 0xD9	; 217
    738a:	a1 93       	st	Z+, r26
    738c:	00 97       	sbiw	r24, 0x00	; 0
    738e:	79 f7       	brne	.-34     	; 0x736e <__utoa_common+0x4>
    7390:	b1 11       	cpse	r27, r1
    7392:	b1 93       	st	Z+, r27
    7394:	11 92       	st	Z+, r1
    7396:	cb 01       	movw	r24, r22
    7398:	0c 94 ce 39 	jmp	0x739c	; 0x739c <strrev>

0000739c <strrev>:
    739c:	dc 01       	movw	r26, r24
    739e:	fc 01       	movw	r30, r24
    73a0:	67 2f       	mov	r22, r23
    73a2:	71 91       	ld	r23, Z+
    73a4:	77 23       	and	r23, r23
    73a6:	e1 f7       	brne	.-8      	; 0x73a0 <strrev+0x4>
    73a8:	32 97       	sbiw	r30, 0x02	; 2
    73aa:	04 c0       	rjmp	.+8      	; 0x73b4 <strrev+0x18>
    73ac:	7c 91       	ld	r23, X
    73ae:	6d 93       	st	X+, r22
    73b0:	70 83       	st	Z, r23
    73b2:	62 91       	ld	r22, -Z
    73b4:	ae 17       	cp	r26, r30
    73b6:	bf 07       	cpc	r27, r31
    73b8:	c8 f3       	brcs	.-14     	; 0x73ac <strrev+0x10>
    73ba:	08 95       	ret

000073bc <_exit>:
    73bc:	f8 94       	cli

000073be <__stop_program>:
    73be:	ff cf       	rjmp	.-2      	; 0x73be <__stop_program>
