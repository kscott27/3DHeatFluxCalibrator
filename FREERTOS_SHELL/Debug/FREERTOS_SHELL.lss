
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000602e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00802000  0000602e  000060c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000211d  008020d6  008020d6  00006198  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00006198  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000061f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000830  00000000  00000000  0000623c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00019118  00000000  00000000  00006a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006f6d  00000000  00000000  0001fb84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000643c  00000000  00000000  00026af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ba8  00000000  00000000  0002cf30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000734e  00000000  00000000  0002ead8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008884  00000000  00000000  00035e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000728  00000000  00000000  0003e6aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__ctors_end>
       4:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
       8:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
       c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      10:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      14:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      18:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      1c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      20:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      24:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      28:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      2c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      30:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      34:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      38:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__vector_14>
      3c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      40:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__vector_16>
      44:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      48:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      4c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      50:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      54:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      58:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      5c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      60:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      64:	0c 94 83 2a 	jmp	0x5506	; 0x5506 <__vector_25>
      68:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      6c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      70:	0c 94 db 2a 	jmp	0x55b6	; 0x55b6 <__vector_28>
      74:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      78:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      7c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      80:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      84:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      88:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      8c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      90:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      94:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      98:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      9c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      a0:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      a4:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      a8:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      ac:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__vector_43>
      b0:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <__vector_44>
      b4:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      b8:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      bc:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      c0:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      c4:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      c8:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      cc:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      d0:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      d4:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      d8:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      dc:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__vector_55>
      e0:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      e4:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      e8:	0c 94 e3 2b 	jmp	0x57c6	; 0x57c6 <__vector_58>
      ec:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      f0:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      f4:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      f8:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
      fc:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     100:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     104:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     108:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__vector_66>
     10c:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <__vector_67>
     110:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     114:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     118:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     11c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     120:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     124:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     128:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     12c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     130:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     134:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <__vector_77>
     138:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     13c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     140:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     144:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     148:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__vector_82>
     14c:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__vector_83>
     150:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     154:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__vector_85>
     158:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     15c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     160:	0c 94 33 2b 	jmp	0x5666	; 0x5666 <__vector_88>
     164:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     168:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     16c:	0c 94 8b 2b 	jmp	0x5716	; 0x5716 <__vector_91>
     170:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     174:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     178:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     17c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     180:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     184:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     188:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     18c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     190:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     194:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     198:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     19c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1a0:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__vector_104>
     1a4:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__vector_105>
     1a8:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1ac:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1b0:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1b4:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1b8:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1bc:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1c0:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1c4:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1c8:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1cc:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1d0:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1d4:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1d8:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1dc:	0c 94 3b 2c 	jmp	0x5876	; 0x5876 <__vector_119>
     1e0:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1e4:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1e8:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1ec:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1f0:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1f4:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1f8:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__bad_interrupt>
     1fc:	e5 0c       	add	r14, r5
     1fe:	95 12       	cpse	r9, r21
     200:	5c 0d       	add	r21, r12
     202:	73 0d       	add	r23, r3
     204:	19 0d       	add	r17, r9
     206:	95 12       	cpse	r9, r21
     208:	95 12       	cpse	r9, r21
     20a:	95 12       	cpse	r9, r21
     20c:	45 0d       	add	r20, r5
     20e:	95 12       	cpse	r9, r21
     210:	95 12       	cpse	r9, r21
     212:	95 12       	cpse	r9, r21
     214:	95 12       	cpse	r9, r21
     216:	95 12       	cpse	r9, r21
     218:	03 0d       	add	r16, r3
     21a:	8f 0d       	add	r24, r15
     21c:	95 12       	cpse	r9, r21
     21e:	81 0d       	add	r24, r1
     220:	86 0d       	add	r24, r6
     222:	c5 0e       	add	r12, r21
     224:	95 12       	cpse	r9, r21
     226:	95 12       	cpse	r9, r21
     228:	95 12       	cpse	r9, r21
     22a:	e7 0e       	add	r14, r23
     22c:	f5 0e       	add	r15, r21
     22e:	01 0f       	add	r16, r17
     230:	0d 0f       	add	r16, r29
     232:	19 0f       	add	r17, r25
     234:	25 0f       	add	r18, r21
     236:	31 0f       	add	r19, r17
     238:	3d 0f       	add	r19, r29
     23a:	49 0f       	add	r20, r25
     23c:	55 0f       	add	r21, r21
     23e:	95 12       	cpse	r9, r21
     240:	95 12       	cpse	r9, r21
     242:	95 12       	cpse	r9, r21
     244:	95 12       	cpse	r9, r21
     246:	95 12       	cpse	r9, r21
     248:	95 12       	cpse	r9, r21
     24a:	95 12       	cpse	r9, r21
     24c:	95 12       	cpse	r9, r21
     24e:	95 12       	cpse	r9, r21
     250:	95 12       	cpse	r9, r21
     252:	95 12       	cpse	r9, r21
     254:	95 12       	cpse	r9, r21
     256:	95 12       	cpse	r9, r21
     258:	95 12       	cpse	r9, r21
     25a:	95 12       	cpse	r9, r21
     25c:	95 12       	cpse	r9, r21
     25e:	95 12       	cpse	r9, r21
     260:	95 12       	cpse	r9, r21
     262:	95 12       	cpse	r9, r21
     264:	95 12       	cpse	r9, r21
     266:	95 12       	cpse	r9, r21
     268:	95 12       	cpse	r9, r21
     26a:	95 12       	cpse	r9, r21
     26c:	95 12       	cpse	r9, r21
     26e:	95 12       	cpse	r9, r21
     270:	95 12       	cpse	r9, r21
     272:	95 12       	cpse	r9, r21
     274:	95 12       	cpse	r9, r21
     276:	95 12       	cpse	r9, r21
     278:	95 12       	cpse	r9, r21
     27a:	95 12       	cpse	r9, r21
     27c:	95 12       	cpse	r9, r21
     27e:	95 12       	cpse	r9, r21
     280:	95 12       	cpse	r9, r21
     282:	95 12       	cpse	r9, r21
     284:	95 12       	cpse	r9, r21
     286:	95 12       	cpse	r9, r21
     288:	95 12       	cpse	r9, r21
     28a:	95 12       	cpse	r9, r21
     28c:	4b 0e       	add	r4, r27
     28e:	95 12       	cpse	r9, r21
     290:	95 12       	cpse	r9, r21
     292:	95 12       	cpse	r9, r21
     294:	df 0d       	add	r29, r15
     296:	95 12       	cpse	r9, r21
     298:	b3 0e       	add	r11, r19
     29a:	95 12       	cpse	r9, r21
     29c:	95 12       	cpse	r9, r21
     29e:	95 12       	cpse	r9, r21
     2a0:	95 12       	cpse	r9, r21
     2a2:	95 12       	cpse	r9, r21
     2a4:	95 12       	cpse	r9, r21
     2a6:	95 12       	cpse	r9, r21
     2a8:	95 12       	cpse	r9, r21
     2aa:	95 12       	cpse	r9, r21
     2ac:	95 12       	cpse	r9, r21
     2ae:	da 0d       	add	r29, r10
     2b0:	95 12       	cpse	r9, r21
     2b2:	95 12       	cpse	r9, r21
     2b4:	95 12       	cpse	r9, r21
     2b6:	95 12       	cpse	r9, r21
     2b8:	95 12       	cpse	r9, r21
     2ba:	62 0e       	add	r6, r18
     2bc:	7d 0e       	add	r7, r29
     2be:	98 0e       	add	r9, r24
     2c0:	c4 0f       	add	r28, r20
     2c2:	d1 0f       	add	r29, r17
     2c4:	95 12       	cpse	r9, r21
     2c6:	95 12       	cpse	r9, r21
     2c8:	95 12       	cpse	r9, r21
     2ca:	95 12       	cpse	r9, r21
     2cc:	95 12       	cpse	r9, r21
     2ce:	95 12       	cpse	r9, r21
     2d0:	95 12       	cpse	r9, r21
     2d2:	95 12       	cpse	r9, r21
     2d4:	95 12       	cpse	r9, r21
     2d6:	95 12       	cpse	r9, r21
     2d8:	95 12       	cpse	r9, r21
     2da:	fb 0f       	add	r31, r27
     2dc:	25 10       	cpse	r2, r5
     2de:	95 12       	cpse	r9, r21
     2e0:	95 12       	cpse	r9, r21
     2e2:	95 12       	cpse	r9, r21
     2e4:	95 12       	cpse	r9, r21
     2e6:	b2 0f       	add	r27, r18
     2e8:	b8 0f       	add	r27, r24
     2ea:	be 0f       	add	r27, r30
     2ec:	87 11       	cpse	r24, r7
     2ee:	95 12       	cpse	r9, r21
     2f0:	95 12       	cpse	r9, r21
     2f2:	95 12       	cpse	r9, r21
     2f4:	fd 11       	cpse	r31, r13
     2f6:	09 12       	cpse	r0, r25
     2f8:	15 12       	cpse	r1, r21
     2fa:	21 12       	cpse	r2, r17
     2fc:	2d 12       	cpse	r2, r29
     2fe:	39 12       	cpse	r3, r25
     300:	45 12       	cpse	r4, r21
     302:	51 12       	cpse	r5, r17
     304:	5d 12       	cpse	r5, r29
     306:	69 12       	cpse	r6, r25
     308:	95 12       	cpse	r9, r21
     30a:	95 12       	cpse	r9, r21
     30c:	95 12       	cpse	r9, r21
     30e:	95 12       	cpse	r9, r21
     310:	95 12       	cpse	r9, r21
     312:	95 12       	cpse	r9, r21
     314:	95 12       	cpse	r9, r21
     316:	95 12       	cpse	r9, r21
     318:	95 12       	cpse	r9, r21
     31a:	95 12       	cpse	r9, r21
     31c:	95 12       	cpse	r9, r21
     31e:	95 12       	cpse	r9, r21
     320:	95 12       	cpse	r9, r21
     322:	95 12       	cpse	r9, r21
     324:	95 12       	cpse	r9, r21
     326:	95 12       	cpse	r9, r21
     328:	95 12       	cpse	r9, r21
     32a:	95 12       	cpse	r9, r21
     32c:	95 12       	cpse	r9, r21
     32e:	95 12       	cpse	r9, r21
     330:	95 12       	cpse	r9, r21
     332:	95 12       	cpse	r9, r21
     334:	95 12       	cpse	r9, r21
     336:	95 12       	cpse	r9, r21
     338:	95 12       	cpse	r9, r21
     33a:	95 12       	cpse	r9, r21
     33c:	95 12       	cpse	r9, r21
     33e:	95 12       	cpse	r9, r21
     340:	95 12       	cpse	r9, r21
     342:	95 12       	cpse	r9, r21
     344:	95 12       	cpse	r9, r21
     346:	95 12       	cpse	r9, r21
     348:	95 12       	cpse	r9, r21
     34a:	95 12       	cpse	r9, r21
     34c:	95 12       	cpse	r9, r21
     34e:	95 12       	cpse	r9, r21
     350:	95 12       	cpse	r9, r21
     352:	95 12       	cpse	r9, r21
     354:	95 12       	cpse	r9, r21
     356:	0d 11       	cpse	r16, r13
     358:	95 12       	cpse	r9, r21
     35a:	95 12       	cpse	r9, r21
     35c:	95 12       	cpse	r9, r21
     35e:	ee 10       	cpse	r14, r14
     360:	95 12       	cpse	r9, r21
     362:	95 12       	cpse	r9, r21
     364:	95 12       	cpse	r9, r21
     366:	95 12       	cpse	r9, r21
     368:	95 12       	cpse	r9, r21
     36a:	95 12       	cpse	r9, r21
     36c:	95 12       	cpse	r9, r21
     36e:	95 12       	cpse	r9, r21
     370:	e3 11       	cpse	r30, r3
     372:	95 12       	cpse	r9, r21
     374:	95 12       	cpse	r9, r21
     376:	95 12       	cpse	r9, r21
     378:	95 12       	cpse	r9, r21
     37a:	cb 11       	cpse	r28, r11
     37c:	95 12       	cpse	r9, r21
     37e:	b1 11       	cpse	r27, r1
     380:	7f 10       	cpse	r7, r15
     382:	95 12       	cpse	r9, r21
     384:	97 10       	cpse	r9, r7
     386:	b4 10       	cpse	r11, r4
     388:	d1 10       	cpse	r13, r1
     38a:	27 27       	eor	r18, r23
     38c:	2a 27       	eor	r18, r26
     38e:	2d 27       	eor	r18, r29
     390:	30 27       	eor	r19, r16
     392:	33 27       	eor	r19, r19
     394:	36 27       	eor	r19, r22
     396:	38 27       	eor	r19, r24
     398:	49 27       	eor	r20, r25
     39a:	51 27       	eor	r21, r17
     39c:	5b 27       	eor	r21, r27
     39e:	59 27       	eor	r21, r25

000003a0 <__trampolines_start>:
     3a0:	0c 94 d1 10 	jmp	0x21a2	; 0x21a2 <_ZN9task_user3runEv+0x8be>
     3a4:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <prvIdleTask>
     3a8:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <_ZN9task_user3runEv+0x680>
     3ac:	0c 94 17 13 	jmp	0x262e	; 0x262e <_ZN9frt_queueImE3getEv>
     3b0:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <_ZN9frt_queueImE7ISR_putERKm>
     3b4:	0c 94 49 27 	jmp	0x4e92	; 0x4e92 <_ZN8emstreamlsE15ser_manipulator+0x62>
     3b8:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <_ZN9task_user3runEv+0x228>
     3bc:	0c 94 09 12 	jmp	0x2412	; 0x2412 <_ZN9task_user3runEv+0xb2e>
     3c0:	0c 94 32 08 	jmp	0x1064	; 0x1064 <_ZN10taskMotion3runEv>
     3c4:	0c 94 97 10 	jmp	0x212e	; 0x212e <_ZN9task_user3runEv+0x84a>
     3c8:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <_ZN9task_user3runEv+0x712>
     3cc:	0c 94 d6 29 	jmp	0x53ac	; 0x53ac <_ZN5rs23214check_for_charEv>
     3d0:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <_ZN9task_user3runEv+0x482>
     3d4:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <_ZN9frt_queueImE9not_emptyEv>
     3d8:	0c 94 26 26 	jmp	0x4c4c	; 0x4c4c <__cxa_pure_virtual>
     3dc:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <_ZN9task_user3runEv+0x14e>
     3e0:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <_ZN9frt_queueImE10get_a_copyERm>
     3e4:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <_ZN9task_user3runEv+0xb16>
     3e8:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <_ZN9task_user3runEv+0x51e>
     3ec:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <_ZN9task_user3runEv+0x6be>
     3f0:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <_ZN9task_user3runEv+0x122>
     3f4:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <_ZN9task_user3runEv+0x8f8>
     3f8:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <_ZN9task_user3runEv+0x21e>
     3fc:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <_ZN9frt_queueImE16ISR_num_items_inEv>
     400:	0c 94 e9 29 	jmp	0x53d2	; 0x53d2 <_ZN5rs23212clear_screenEv>
     404:	0c 94 51 27 	jmp	0x4ea2	; 0x4ea2 <_ZN8emstreamlsE15ser_manipulator+0x72>
     408:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <_ZN9task_user3runEv+0xbee>
     40c:	0c 94 35 13 	jmp	0x266a	; 0x266a <_ZN9frt_queueImE7ISR_getEPm>
     410:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <_ZN9task_user3runEv+0x1d4>
     414:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <_ZN9task_user3runEv+0x4ea>
     418:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <_ZN9task_user3runEv+0x54e>
     41c:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <_ZN9task_user3runEv+0x416>
     420:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <_ZN9frt_queueImE12ISR_is_emptyEv>
     424:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <_GLOBAL__sub_I_counter>
     428:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <_ZN9task_user3runEv+0x57e>
     42c:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <_ZN9task_user3runEv+0x202>
     430:	0c 94 8c 29 	jmp	0x5318	; 0x5318 <_ZN5rs2327putcharEc>
     434:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <_ZN9frt_queueImE3getEPm>
     438:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <_ZN9task_user3runEv+0x536>
     43c:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <_ZN9task_user3runEv+0x698>
     440:	0c 94 7f 10 	jmp	0x20fe	; 0x20fe <_ZN9task_user3runEv+0x81a>
     444:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <_ZN9task_user3runEv>
     448:	0c 94 36 27 	jmp	0x4e6c	; 0x4e6c <_ZN8emstreamlsE15ser_manipulator+0x3c>
     44c:	0c 94 d1 26 	jmp	0x4da2	; 0x4da2 <_ZN8emstream12transmit_nowEv>
     450:	0c 94 cf 26 	jmp	0x4d9e	; 0x4d9e <_ZN8emstream14check_for_charEv>
     454:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <_ZN9task_user3runEv+0xbd6>
     458:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <_ZN9task_user3runEv+0x1a6>
     45c:	0c 94 49 0f 	jmp	0x1e92	; 0x1e92 <_ZN9task_user3runEv+0x5ae>
     460:	0c 94 1a 25 	jmp	0x4a34	; 0x4a34 <_ZN8frt_task12print_statusER8emstream>
     464:	0c 94 95 12 	jmp	0x252a	; 0x252a <_ZN9task_user3runEv+0xc46>
     468:	0c 94 45 12 	jmp	0x248a	; 0x248a <_ZN9task_user3runEv+0xba6>
     46c:	0c 94 21 12 	jmp	0x2442	; 0x2442 <_ZN9task_user3runEv+0xb5e>
     470:	0c 94 c5 12 	jmp	0x258a	; 0x258a <_ZN9frt_queueImE12num_items_inEv>
     474:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <_ZN9task_user3runEv+0x2da>
     478:	0c 94 0d 11 	jmp	0x221a	; 0x221a <_ZN9task_user3runEv+0x936>
     47c:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <_ZN9frt_queueImE11ISR_butt_inERKm>
     480:	0c 94 aa 25 	jmp	0x4b54	; 0x4b54 <_ZN14frt_text_queue7getcharEv>
     484:	0c 94 51 12 	jmp	0x24a2	; 0x24a2 <_ZN9task_user3runEv+0xbbe>
     488:	0c 94 2a 27 	jmp	0x4e54	; 0x4e54 <_ZN8emstreamlsE15ser_manipulator+0x24>
     48c:	0c 94 2d 12 	jmp	0x245a	; 0x245a <_ZN9task_user3runEv+0xb76>
     490:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <_ZN9task_user3runEv+0x44c>
     494:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <_ZN9task_user3runEv+0x566>
     498:	0c 94 30 27 	jmp	0x4e60	; 0x4e60 <_ZN8emstreamlsE15ser_manipulator+0x30>
     49c:	0c 94 27 27 	jmp	0x4e4e	; 0x4e4e <_ZN8emstreamlsE15ser_manipulator+0x1e>
     4a0:	0c 94 2d 27 	jmp	0x4e5a	; 0x4e5a <_ZN8emstreamlsE15ser_manipulator+0x2a>
     4a4:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <_ZN9task_user3runEv+0x6a4>
     4a8:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <_ZN8emstream12clear_screenEv>
     4ac:	0c 94 ed 12 	jmp	0x25da	; 0x25da <_ZN9frt_queueImE10get_a_copyEv>
     4b0:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <_ZN9task_user3runEv+0xae2>
     4b4:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <_ZN9task_user3runEv+0x23a>
     4b8:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <_ZN9task_user3runEv+0x506>
     4bc:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <_ZN9frt_queueImE3putERKm>
     4c0:	0c 94 b0 29 	jmp	0x5360	; 0x5360 <_ZN5rs2327getcharEv>
     4c4:	0c 94 25 10 	jmp	0x204a	; 0x204a <_ZN9task_user3runEv+0x766>
     4c8:	0c 94 92 13 	jmp	0x2724	; 0x2724 <_ZN9frt_queueImE7butt_inERKm>
     4cc:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <_ZN9task_user3runEv+0x3b2>
     4d0:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <_ZN9task_user3runEv+0x2d0>
     4d4:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <_ZN9task_user3runEv+0x596>
     4d8:	0c 94 87 11 	jmp	0x230e	; 0x230e <_ZN9task_user3runEv+0xa2a>
     4dc:	0c 94 33 27 	jmp	0x4e66	; 0x4e66 <_ZN8emstreamlsE15ser_manipulator+0x36>
     4e0:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <_ZN9frt_queueImE13ISR_not_emptyEv>
     4e4:	0c 94 c8 25 	jmp	0x4b90	; 0x4b90 <_ZN14frt_text_queue14check_for_charEv>
     4e8:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <_ZN9task_user3runEv+0xab2>
     4ec:	0c 94 38 27 	jmp	0x4e70	; 0x4e70 <_ZN8emstreamlsE15ser_manipulator+0x40>
     4f0:	0c 94 55 0f 	jmp	0x1eaa	; 0x1eaa <_ZN9task_user3runEv+0x5c6>
     4f4:	0c 94 59 27 	jmp	0x4eb2	; 0x4eb2 <_ZN8emstreamlsE15ser_manipulator+0x82>
     4f8:	0c 94 af 08 	jmp	0x115e	; 0x115e <_ZN11task_sensor3runEv>
     4fc:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <_ZN9task_user3runEv+0xa7e>
     500:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <_ZN9task_user3runEv+0x68c>
     504:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <_ZN9task_user3runEv+0x4a6>
     508:	0c 94 b4 10 	jmp	0x2168	; 0x2168 <_ZN9task_user3runEv+0x884>
     50c:	0c 94 39 12 	jmp	0x2472	; 0x2472 <_ZN9task_user3runEv+0xb8e>
     510:	0c 94 15 12 	jmp	0x242a	; 0x242a <_ZN9task_user3runEv+0xb46>
     514:	0c 94 46 13 	jmp	0x268c	; 0x268c <_ZN9frt_queueImE7ISR_getEv>
     518:	0c 94 ca 26 	jmp	0x4d94	; 0x4d94 <_ZN8emstream13ready_to_sendEv>
     51c:	0c 94 62 0e 	jmp	0x1cc4	; 0x1cc4 <_ZN9task_user3runEv+0x3e0>
     520:	0c 94 d3 25 	jmp	0x4ba6	; 0x4ba6 <_ZN14frt_text_queue7putcharEc>
     524:	0c 94 cc 26 	jmp	0x4d98	; 0x4d98 <_ZN8emstream7getcharEv>
     528:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <_call_static_run_method>
     52c:	0c 94 5b 27 	jmp	0x4eb6	; 0x4eb6 <_ZN8emstreamlsE15ser_manipulator+0x86>
     530:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <_ZN9frt_queueImE8is_emptyEv>
     534:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <_ZN9task_user3runEv+0xe6>

00000538 <__trampolines_end>:
     538:	00 40       	sbci	r16, 0x00	; 0
     53a:	7a 10       	cpse	r7, r10
     53c:	f3 5a       	subi	r31, 0xA3	; 163
     53e:	00 a0       	ldd	r0, Z+32	; 0x20
     540:	72 4e       	sbci	r23, 0xE2	; 226
     542:	18 09       	sbc	r17, r8
     544:	00 10       	cpse	r0, r0
     546:	a5 d4       	rcall	.+2378   	; 0xe92 <__do_global_ctors+0x1e>
     548:	e8 00       	.word	0x00e8	; ????
     54a:	00 e8       	ldi	r16, 0x80	; 128
     54c:	76 48       	sbci	r23, 0x86	; 134
     54e:	17 00       	.word	0x0017	; ????
     550:	00 e4       	ldi	r16, 0x40	; 64
     552:	0b 54       	subi	r16, 0x4B	; 75
     554:	02 00       	.word	0x0002	; ????
     556:	00 ca       	rjmp	.-3072   	; 0xfffff958 <__eeprom_end+0xff7ef958>
     558:	9a 3b       	cpi	r25, 0xBA	; 186
     55a:	00 00       	nop
     55c:	00 e1       	ldi	r16, 0x10	; 16
     55e:	f5 05       	cpc	r31, r5
     560:	00 00       	nop
     562:	80 96       	adiw	r24, 0x20	; 32
     564:	98 00       	.word	0x0098	; ????
     566:	00 00       	nop
     568:	40 42       	sbci	r20, 0x20	; 32
     56a:	0f 00       	.word	0x000f	; ????
     56c:	00 00       	nop
     56e:	a0 86       	std	Z+8, r10	; 0x08
     570:	01 00       	.word	0x0001	; ????
     572:	00 00       	nop
     574:	10 27       	eor	r17, r16
     576:	00 00       	nop
     578:	00 00       	nop
     57a:	e8 03       	fmulsu	r22, r16
     57c:	00 00       	nop
     57e:	00 00       	nop
     580:	64 00       	.word	0x0064	; ????
     582:	00 00       	nop
     584:	00 00       	nop
     586:	0a 00       	.word	0x000a	; ????
     588:	00 00       	nop
     58a:	00 00       	nop
     58c:	01 00       	.word	0x0001	; ????
     58e:	00 00       	nop
     590:	00 00       	nop
     592:	2c 76       	andi	r18, 0x6C	; 108
     594:	d8 88       	ldd	r13, Y+16	; 0x10
     596:	dc 67       	ori	r29, 0x7C	; 124
     598:	4f 08       	sbc	r4, r15
     59a:	23 df       	rcall	.-442    	; 0x3e2 <__trampolines_start+0x42>
     59c:	c1 df       	rcall	.-126    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     59e:	ae 59       	subi	r26, 0x9E	; 158
     5a0:	e1 b1       	in	r30, 0x01	; 1
     5a2:	b7 96       	adiw	r30, 0x27	; 39
     5a4:	e5 e3       	ldi	r30, 0x35	; 53
     5a6:	e4 53       	subi	r30, 0x34	; 52
     5a8:	c6 3a       	cpi	r28, 0xA6	; 166
     5aa:	e6 51       	subi	r30, 0x16	; 22
     5ac:	99 76       	andi	r25, 0x69	; 105
     5ae:	96 e8       	ldi	r25, 0x86	; 134
     5b0:	e6 c2       	rjmp	.+1484   	; 0xb7e <_ZZN9task_user21print_coord_mode_menuEvE3__c_0>
     5b2:	84 26       	eor	r8, r20
     5b4:	eb 89       	ldd	r30, Y+19	; 0x13
     5b6:	8c 9b       	sbis	0x11, 4	; 17
     5b8:	62 ed       	ldi	r22, 0xD2	; 210
     5ba:	40 7c       	andi	r20, 0xC0	; 192
     5bc:	6f fc       	.word	0xfc6f	; ????
     5be:	ef bc       	out	0x2f, r14	; 47
     5c0:	9c 9f       	mul	r25, r28
     5c2:	40 f2       	brcs	.-112    	; 0x554 <__trampolines_end+0x1c>
     5c4:	ba a5       	ldd	r27, Y+42	; 0x2a
     5c6:	6f a5       	ldd	r22, Y+47	; 0x2f
     5c8:	f4 90       	lpm	r15, Z
     5ca:	05 5a       	subi	r16, 0xA5	; 165
     5cc:	2a f7       	brpl	.-54     	; 0x598 <__trampolines_end+0x60>
     5ce:	5c 93       	st	X, r21
     5d0:	6b 6c       	ori	r22, 0xCB	; 203
     5d2:	f9 67       	ori	r31, 0x79	; 121
     5d4:	6d c1       	rjmp	.+730    	; 0x8b0 <_ZZN9task_user3runEvE3__c_8+0x1>
     5d6:	1b fc       	.word	0xfc1b	; ????
     5d8:	e0 e4       	ldi	r30, 0x40	; 64
     5da:	0d 47       	sbci	r16, 0x7D	; 125
     5dc:	fe f5       	brtc	.+126    	; 0x65c <_ZZN11task_sensor3runEvE3__c_2+0xe>
     5de:	20 e6       	ldi	r18, 0x60	; 96
     5e0:	b5 00       	.word	0x00b5	; ????
     5e2:	d0 ed       	ldi	r29, 0xD0	; 208
     5e4:	90 2e       	mov	r9, r16
     5e6:	03 00       	.word	0x0003	; ????
     5e8:	94 35       	cpi	r25, 0x54	; 84
     5ea:	77 05       	cpc	r23, r7
     5ec:	00 80       	ld	r0, Z
     5ee:	84 1e       	adc	r8, r20
     5f0:	08 00       	.word	0x0008	; ????
     5f2:	00 20       	and	r0, r0
     5f4:	4e 0a       	sbc	r4, r30
     5f6:	00 00       	nop
     5f8:	00 c8       	rjmp	.-4096   	; 0xfffff5fa <__eeprom_end+0xff7ef5fa>
     5fa:	0c 33       	cpi	r16, 0x3C	; 60
     5fc:	33 33       	cpi	r19, 0x33	; 51
     5fe:	33 0f       	add	r19, r19
     600:	98 6e       	ori	r25, 0xE8	; 232
     602:	12 83       	std	Z+2, r17	; 0x02
     604:	11 41       	sbci	r17, 0x11	; 17
     606:	ef 8d       	ldd	r30, Y+31	; 0x1f
     608:	21 14       	cp	r2, r1
     60a:	89 3b       	cpi	r24, 0xB9	; 185
     60c:	e6 55       	subi	r30, 0x56	; 86
     60e:	16 cf       	rjmp	.-468    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     610:	fe e6       	ldi	r31, 0x6E	; 110
     612:	db 18       	sub	r13, r11
     614:	d1 84       	ldd	r13, Z+9	; 0x09
     616:	4b 38       	cpi	r20, 0x8B	; 139
     618:	1b f7       	brvc	.-58     	; 0x5e0 <__trampolines_end+0xa8>
     61a:	7c 1d       	adc	r23, r12
     61c:	90 1d       	adc	r25, r0
     61e:	a4 bb       	out	0x14, r26	; 20
     620:	e4 24       	eor	r14, r4
     622:	20 32       	cpi	r18, 0x20	; 32
     624:	84 72       	andi	r24, 0x24	; 36
     626:	5e 22       	and	r5, r30
     628:	81 00       	.word	0x0081	; ????
     62a:	c9 f1       	breq	.+114    	; 0x69e <_ZZN9task_user11show_statusEvE3__c_0+0x4>
     62c:	24 ec       	ldi	r18, 0xC4	; 196
     62e:	a1 e5       	ldi	r26, 0x51	; 81
     630:	3d 27       	eor	r19, r29

00000632 <_ZZN11task_sensor12reset_deviceEvE3__c>:
     632:	52 65 73 65 74 74 69 6e 67 20 64 65 76 69 63 65     Resetting device
     642:	2e 00                                               ..

00000644 <_ZZN11task_sensor3runEvE3__c_5>:
     644:	6d 56 3a 00                                         mV:.

00000648 <_ZZN11task_sensor3runEvE3__c_4>:
     648:	48 46 3a 00                                         HF:.

0000064c <_ZZN11task_sensor3runEvE3__c_3>:
     64c:	43 00                                               C.

0000064e <_ZZN11task_sensor3runEvE3__c_2>:
     64e:	52 6f 75 74 69 6e 65 20 63 6f 6d 70 6c 65 74 65     Routine complete
     65e:	2e 00                                               ..

00000660 <_ZZN11task_sensor3runEvE3__c_1>:
     660:	6d 56 3a 00                                         mV:.

00000664 <_ZZN11task_sensor3runEvE3__c_0>:
     664:	48 46 3a 00                                         HF:.

00000668 <_ZZN11task_sensor3runEvE3__c>:
     668:	53 65 6e 73 6f 72 20 52 65 61 64 69 6e 67 20 00     Sensor Reading .

00000678 <_ZZN9task_user11show_statusEvE3__c_4>:
     678:	2c 20 54 43 43 30 43 43 41 3d 00                    , TCC0CCA=.

00000683 <_ZZN9task_user11show_statusEvE3__c_3>:
     683:	2f 00                                               /.

00000685 <_ZZN9task_user11show_statusEvE3__c_2>:
     685:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

00000693 <_ZZN9task_user11show_statusEvE3__c_1>:
     693:	54 69 6d 65 3a 20 00                                Time: .

0000069a <_ZZN9task_user11show_statusEvE3__c_0>:
     69a:	4f 63 74 20 31 31 20 32 30 31 38 00                 Oct 11 2018.

000006a6 <_ZZN9task_user11show_statusEvE3__c>:
     6a6:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     6b6:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

000006c5 <_ZZN9task_user18print_help_messageEvE3__c_10>:
     6c5:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

000006d4 <_ZZN9task_user18print_help_messageEvE3__c_9>:
     6d4:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     6e4:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

000006ef <_ZZN9task_user18print_help_messageEvE3__c_8>:
     6ef:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     6ff:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

0000070d <_ZZN9task_user18print_help_messageEvE3__c_7>:
     70d:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     71d:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     72d:	6d 61 74 69 6f 6e 00                                mation.

00000734 <_ZZN9task_user18print_help_messageEvE3__c_6>:
     734:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     744:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

00000755 <_ZZN9task_user18print_help_messageEvE3__c_5>:
     755:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     765:	65 20 6f 6e 6c 79 3a 00                             e only:.

0000076d <_ZZN9task_user18print_help_messageEvE3__c_4>:
     76d:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     77d:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

00000789 <_ZZN9task_user18print_help_messageEvE3__c_3>:
     789:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     799:	68 65 20 41 56 52 00                                he AVR.

000007a0 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     7a0:	20 68 65 6c 70 00                                    help.

000007a6 <_ZZN9task_user18print_help_messageEvE3__c_1>:
     7a6:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     7b6:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

000007c5 <_ZZN9task_user18print_help_messageEvE3__c_0>:
     7c5:	1b 5b 33 30 6d 00                                   .[30m.

000007cb <_ZZN9task_user18print_help_messageEvE3__c>:
     7cb:	1b 5b 34 36 6d 00                                   .[46m.

000007d1 <_ZZN9task_user3runEvE3__c_17>:
     7d1:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     7e1:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

000007ee <_ZZN9task_user3runEvE3__c_16>:
     7ee:	53 65 6e 73 6f 72 20 73 61 6d 70 6c 65 20 73 69     Sensor sample si
     7fe:	7a 65 20 73 65 74 20 74 6f 3a 00                    ze set to:.

00000809 <_ZZN9task_user3runEvE3__c_15>:
     809:	53 65 6e 73 6f 72 20 64 65 6c 61 79 20 73 65 74     Sensor delay set
     819:	20 74 6f 3a 00                                       to:.

0000081e <_ZZN9task_user3runEvE3__c_14>:
     81e:	4d 69 63 72 6f 73 74 65 70 20 73 63 61 6c 65 72     Microstep scaler
     82e:	20 73 65 74 20 74 6f 3a 00                           set to:.

00000837 <_ZZN9task_user3runEvE3__c_13>:
     837:	43 6f 6e 66 69 67 20 65 6e 74 65 72 65 64 3a 00     Config entered:.

00000847 <_ZZN9task_user3runEvE3__c_12>:
     847:	4c 65 61 76 69 6e 67 20 63 6f 6e 66 69 67 20 6d     Leaving config m
     857:	6f 64 65 00                                         ode.

0000085b <_ZZN9task_user3runEvE3__c_11>:
     85b:	5a 2d 61 78 69 73 20 6d 61 78 20 76 65 6c 6f 63     Z-axis max veloc
     86b:	69 74 79 20 73 65 74 20 74 6f 3a 00                 ity set to:.

00000877 <_ZZN9task_user3runEvE3__c_10>:
     877:	59 2d 61 78 69 73 20 6d 61 78 20 76 65 6c 6f 63     Y-axis max veloc
     887:	69 74 79 20 73 65 74 20 74 6f 3a 00                 ity set to:.

00000893 <_ZZN9task_user3runEvE3__c_9>:
     893:	58 2d 61 78 69 73 20 6d 61 78 20 76 65 6c 6f 63     X-axis max veloc
     8a3:	69 74 79 20 73 65 74 20 74 6f 3a 00                 ity set to:.

000008af <_ZZN9task_user3runEvE3__c_8>:
     8af:	4d 61 78 20 76 65 6c 6f 63 69 74 79 20 73 65 74     Max velocity set
     8bf:	20 74 6f 3a 00                                       to:.

000008c4 <_ZZN9task_user3runEvE3__c_7>:
     8c4:	50 6c 65 61 73 65 20 63 68 6f 6f 73 65 20 74 68     Please choose th
     8d4:	65 20 6d 6f 74 6f 72 20 79 6f 75 20 77 6f 75 6c     e motor you woul
     8e4:	64 20 6c 69 6b 65 20 74 6f 20 63 6f 6e 74 72 6f     d like to contro
     8f4:	6c 2e 00                                            l..

000008f7 <_ZZN9task_user3runEvE3__c_6>:
     8f7:	50 6c 65 61 73 65 20 63 68 6f 6f 73 65 20 74 68     Please choose th
     907:	65 20 6d 6f 74 6f 72 20 79 6f 75 20 77 6f 75 6c     e motor you woul
     917:	64 20 6c 69 6b 65 20 74 6f 20 63 6f 6e 74 72 6f     d like to contro
     927:	6c 2e 00                                            l..

0000092a <_ZZN9task_user3runEvE3__c_5>:
     92a:	50 6c 65 61 73 65 20 63 68 6f 6f 73 65 20 74 68     Please choose th
     93a:	65 20 6d 6f 74 6f 72 20 79 6f 75 20 77 6f 75 6c     e motor you woul
     94a:	64 20 6c 69 6b 65 20 74 6f 20 63 6f 6e 74 72 6f     d like to contro
     95a:	6c 2e 00                                            l..

0000095d <_ZZN9task_user3runEvE3__c_4>:
     95d:	52 65 63 65 69 76 69 6e 67 20 5a 2d 6c 6f 63 61     Receiving Z-loca
     96d:	74 69 6f 6e 73 2e 00                                tions..

00000974 <_ZZN9task_user3runEvE3__c_3>:
     974:	52 65 63 65 69 76 69 6e 67 20 59 2d 6c 6f 63 61     Receiving Y-loca
     984:	74 69 6f 6e 73 2e 00                                tions..

0000098b <_ZZN9task_user3runEvE3__c_2>:
     98b:	52 65 63 65 69 76 69 6e 67 20 58 2d 6c 6f 63 61     Receiving X-loca
     99b:	74 69 6f 6e 73 2e 00                                tions..

000009a2 <_ZZN9task_user3runEvE3__c_1>:
     9a2:	45 72 72 6f 72 3a 20 55 6e 65 71 75 61 6c 20 61     Error: Unequal a
     9b2:	78 69 73 20 63 6f 6f 72 64 69 6e 61 74 65 20 76     xis coordinate v
     9c2:	65 63 74 6f 72 73 2e 00                             ectors..

000009ca <_ZZN9task_user3runEvE3__c_0>:
     9ca:	54 6f 74 61 6c 20 6e 6f 64 65 73 3a 20 00           Total nodes: .

000009d8 <_ZZN9task_user3runEvE3__c>:
     9d8:	45 6e 74 65 72 69 6e 67 20 63 6f 6e 66 69 67 20     Entering config 
     9e8:	6d 6f 64 65 00                                      mode.

000009ed <_ZZN9task_user12reset_deviceEvE3__c>:
     9ed:	52 65 73 65 74 74 69 6e 67 20 64 65 76 69 63 65     Resetting device
     9fd:	2e 00                                               ..

000009ff <_ZZN9task_user24print_dir_motor_commandsEvE3__c_1>:
     9ff:	50 72 65 73 73 20 43 74 72 6c 2d 53 20 74 6f 20     Press Ctrl-S to 
     a0f:	73 74 6f 70 2e 00                                   stop..

00000a15 <_ZZN9task_user24print_dir_motor_commandsEvE3__c_0>:
     a15:	50 72 65 73 73 20 43 74 72 6c 2d 52 20 74 6f 20     Press Ctrl-R to 
     a25:	61 63 74 69 76 61 74 65 20 72 65 76 65 72 73 65     activate reverse
     a35:	2e 00                                               ..

00000a37 <_ZZN9task_user24print_dir_motor_commandsEvE3__c>:
     a37:	50 72 65 73 73 20 43 74 72 6c 2d 46 20 74 6f 20     Press Ctrl-F to 
     a47:	61 63 74 69 76 61 74 65 20 66 6f 72 77 61 72 64     activate forward
     a57:	2e 00                                               ..

00000a59 <_ZZN9task_user19print_dir_mode_menuEvE3__c_2>:
     a59:	50 72 65 73 73 20 43 74 72 6c 2d 5a 20 66 6f 72     Press Ctrl-Z for
     a69:	20 5a 2d 4d 6f 74 6f 72 20 63 6f 6d 6d 61 6e 64      Z-Motor command
     a79:	73 2e 00                                            s..

00000a7c <_ZZN9task_user19print_dir_mode_menuEvE3__c_1>:
     a7c:	50 72 65 73 73 20 43 74 72 6c 2d 59 20 66 6f 72     Press Ctrl-Y for
     a8c:	20 59 2d 4d 6f 74 6f 72 20 63 6f 6d 6d 61 6e 64      Y-Motor command
     a9c:	73 2e 00                                            s..

00000a9f <_ZZN9task_user19print_dir_mode_menuEvE3__c_0>:
     a9f:	50 72 65 73 73 20 43 74 72 6c 2d 58 20 66 6f 72     Press Ctrl-X for
     aaf:	20 58 2d 4d 6f 74 6f 72 20 63 6f 6d 6d 61 6e 64      X-Motor command
     abf:	73 2e 00                                            s..

00000ac2 <_ZZN9task_user19print_dir_mode_menuEvE3__c>:
     ac2:	45 6e 74 65 72 69 6e 67 20 44 69 72 65 63 74 20     Entering Direct 
     ad2:	4f 70 65 72 61 74 69 6f 6e 20 4d 6f 64 65 2e 00     Operation Mode..

00000ae2 <_ZZN9task_user21print_coord_mode_menuEvE3__c_5>:
     ae2:	50 72 65 73 73 20 45 20 74 6f 20 72 65 74 75 72     Press E to retur
     af2:	6e 20 74 6f 20 74 68 65 20 6d 61 69 6e 20 6d 65     n to the main me
     b02:	6e 75 2e 00                                         nu..

00000b06 <_ZZN9task_user21print_coord_mode_menuEvE3__c_4>:
     b06:	50 72 65 73 73 20 52 20 74 6f 20 72 65 73 65 74     Press R to reset
     b16:	20 74 68 65 20 64 65 76 69 63 65 2e 00               the device..

00000b23 <_ZZN9task_user21print_coord_mode_menuEvE3__c_3>:
     b23:	50 72 65 73 73 20 47 20 74 6f 20 72 75 6e 20 74     Press G to run t
     b33:	68 65 20 64 65 76 69 63 65 2e 00                    he device..

00000b3e <_ZZN9task_user21print_coord_mode_menuEvE3__c_2>:
     b3e:	50 72 65 73 73 20 5a 20 74 6f 20 65 6e 74 65 72     Press Z to enter
     b4e:	20 5a 2d 63 6f 6f 72 64 69 6e 61 74 65 73 2e 00      Z-coordinates..

00000b5e <_ZZN9task_user21print_coord_mode_menuEvE3__c_1>:
     b5e:	50 72 65 73 73 20 59 20 74 6f 20 65 6e 74 65 72     Press Y to enter
     b6e:	20 59 2d 63 6f 6f 72 64 69 6e 61 74 65 73 2e 00      Y-coordinates..

00000b7e <_ZZN9task_user21print_coord_mode_menuEvE3__c_0>:
     b7e:	50 72 65 73 73 20 58 20 74 6f 20 65 6e 74 65 72     Press X to enter
     b8e:	20 58 2d 63 6f 6f 72 64 69 6e 61 74 65 73 2e 00      X-coordinates..

00000b9e <_ZZN9task_user21print_coord_mode_menuEvE3__c>:
     b9e:	45 6e 74 65 72 69 6e 67 20 43 6f 6f 72 64 69 6e     Entering Coordin
     bae:	61 74 65 20 4d 6f 64 65 2e 00                       ate Mode..

00000bb8 <_ZZN9task_user22print_config_mode_menuEvE3__c_4>:
     bb8:	50 72 65 73 73 20 45 20 74 6f 20 72 65 74 75 72     Press E to retur
     bc8:	6e 20 74 6f 20 74 68 65 20 6d 61 69 6e 20 6d 65     n to the main me
     bd8:	6e 75 2e 00                                         nu..

00000bdc <_ZZN9task_user22print_config_mode_menuEvE3__c_3>:
     bdc:	50 72 65 73 73 20 52 20 74 6f 20 72 65 73 65 74     Press R to reset
     bec:	20 74 68 65 20 64 65 76 69 63 65 2e 00               the device..

00000bf9 <_ZZN9task_user22print_config_mode_menuEvE3__c_2>:
     bf9:	50 72 65 73 73 20 5a 20 74 6f 20 72 65 74 75 72     Press Z to retur
     c09:	6e 20 74 68 65 20 64 65 76 69 63 65 20 74 6f 20     n the device to 
     c19:	74 68 65 20 6f 72 69 67 69 6e 2e 00                 the origin..

00000c25 <_ZZN9task_user22print_config_mode_menuEvE3__c_1>:
     c25:	50 72 65 73 73 20 53 20 74 6f 20 63 68 61 6e 67     Press S to chang
     c35:	65 20 74 68 65 20 64 65 66 61 75 6c 74 20 73 65     e the default se
     c45:	6e 73 6f 72 20 72 65 61 64 69 6e 67 20 64 65 6c     nsor reading del
     c55:	61 79 20 74 69 6d 65 2e 00                          ay time..

00000c5e <_ZZN9task_user22print_config_mode_menuEvE3__c_0>:
     c5e:	50 72 65 73 73 20 55 20 74 6f 20 63 68 61 6e 67     Press U to chang
     c6e:	65 20 74 68 65 20 64 65 66 61 75 6c 74 20 6d 6f     e the default mo
     c7e:	74 6f 72 20 6d 69 63 72 6f 73 74 65 70 20 73 63     tor microstep sc
     c8e:	61 6c 65 72 2e 00                                   aler..

00000c94 <_ZZN9task_user22print_config_mode_menuEvE3__c>:
     c94:	45 6e 74 65 72 69 6e 67 20 43 6f 6e 66 69 67 75     Entering Configu
     ca4:	72 61 74 69 6f 6e 20 4d 6f 64 65 2e 00              ration Mode..

00000cb1 <_ZZN9task_user15print_main_menuEvE3__c_3>:
     cb1:	50 72 65 73 73 20 52 20 74 6f 20 72 65 73 65 74     Press R to reset
     cc1:	20 74 68 65 20 64 65 76 69 63 65 2e 00               the device..

00000cce <_ZZN9task_user15print_main_menuEvE3__c_2>:
     cce:	50 72 65 73 73 20 44 20 66 6f 72 20 44 69 72 65     Press D for Dire
     cde:	63 74 20 4f 70 65 72 61 74 69 6f 6e 20 4d 6f 64     ct Operation Mod
     cee:	65 2e 00                                            e..

00000cf1 <_ZZN9task_user15print_main_menuEvE3__c_1>:
     cf1:	50 72 65 73 73 20 43 20 66 6f 72 20 43 6f 6f 72     Press C for Coor
     d01:	64 69 6e 61 74 65 20 4d 6f 64 65 2e 00              dinate Mode..

00000d0e <_ZZN9task_user15print_main_menuEvE3__c_0>:
     d0e:	50 72 65 73 73 20 41 20 66 6f 72 20 43 6f 6e 66     Press A for Conf
     d1e:	69 67 75 72 61 74 69 6f 6e 20 4d 6f 64 65 2e 00     iguration Mode..

00000d2e <_ZZN9task_user15print_main_menuEvE3__c>:
     d2e:	57 65 6c 63 6f 6d 65 20 74 6f 20 74 68 65 20 55     Welcome to the U
     d3e:	73 65 72 20 49 6e 74 65 72 66 61 63 65 20 6d 61     ser Interface ma
     d4e:	69 6e 20 6d 65 6e 75 20 6f 66 20 74 68 65 20 33     in menu of the 3
     d5e:	44 20 48 65 61 74 20 46 6c 75 78 20 43 61 6c 69     D Heat Flux Cali
     d6e:	62 72 61 74 6f 72 2e 00                             brator..

00000d76 <_ZZN8frt_task15emergency_resetEvE3__c_0>:
     d76:	52 65 73 65 74 74 69 6e 67 00                       Resetting.

00000d80 <_ZZN8frt_task15emergency_resetEvE3__c>:
     d80:	45 52 52 4f 52 20 69 6e 20 74 61 73 6b 20 00        ERROR in task .

00000d8f <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     d8f:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     d9f:	61 73 6b 20 00                                      ask .

00000da4 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     da4:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

00000db2 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     db2:	20 63 72 65 61 74 65 64 00                           created.

00000dbb <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     dbb:	54 61 73 6b 20 00                                   Task .

00000dc1 <_ZZ15print_task_listP8emstreamE3__c_9>:
     dc1:	09 09 00                                            ...

00000dc4 <_ZZ15print_task_listP8emstreamE3__c_8>:
     dc4:	2f 00                                               /.

00000dc6 <_ZZ15print_task_listP8emstreamE3__c_7>:
     dc6:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

00000dd1 <_ZZ15print_task_listP8emstreamE3__c_6>:
     dd1:	09 2d 2d 2d 2d 00                                   .----.

00000dd7 <_ZZ15print_task_listP8emstreamE3__c_5>:
     dd7:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

00000de3 <_ZZ15print_task_listP8emstreamE3__c_4>:
     de3:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

00000df4 <_ZZ15print_task_listP8emstreamE3__c_3>:
     df4:	09 52 75 6e 73 00                                   .Runs.

00000dfa <_ZZ15print_task_listP8emstreamE3__c_2>:
     dfa:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

00000e06 <_ZZ15print_task_listP8emstreamE3__c_1>:
     e06:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

00000e17 <_ZZ15print_task_listP8emstreamE3__c_0>:
     e17:	09 53 74 61 63 6b 00                                .Stack.

00000e1e <_ZZ15print_task_listP8emstreamE3__c>:
     e1e:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

00000e29 <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     e29:	09 00                                               ..

00000e2b <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     e2b:	09 00                                               ..

00000e2d <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     e2d:	2f 00                                               /.

00000e2f <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     e2f:	09 00                                               ..

00000e31 <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     e31:	09 00 00                                            ...

00000e34 <_call_static_run_method>:
     e34:	0e 94 40 24 	call	0x4880	; 0x4880 <_ZN8frt_task22_call_users_run_methodEPS_>

00000e38 <__ctors_start>:
     e38:	57 18       	sub	r5, r7

00000e3a <__ctors_end>:
     e3a:	11 24       	eor	r1, r1
     e3c:	1f be       	out	0x3f, r1	; 63
     e3e:	cf ef       	ldi	r28, 0xFF	; 255
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	df e5       	ldi	r29, 0x5F	; 95
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	00 e0       	ldi	r16, 0x00	; 0
     e48:	0c bf       	out	0x3c, r16	; 60

00000e4a <__do_copy_data>:
     e4a:	10 e2       	ldi	r17, 0x20	; 32
     e4c:	a0 e0       	ldi	r26, 0x00	; 0
     e4e:	b0 e2       	ldi	r27, 0x20	; 32
     e50:	ee e2       	ldi	r30, 0x2E	; 46
     e52:	f0 e6       	ldi	r31, 0x60	; 96
     e54:	00 e0       	ldi	r16, 0x00	; 0
     e56:	0b bf       	out	0x3b, r16	; 59
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <__do_copy_data+0x14>
     e5a:	07 90       	elpm	r0, Z+
     e5c:	0d 92       	st	X+, r0
     e5e:	a6 3d       	cpi	r26, 0xD6	; 214
     e60:	b1 07       	cpc	r27, r17
     e62:	d9 f7       	brne	.-10     	; 0xe5a <__do_copy_data+0x10>

00000e64 <__do_clear_bss>:
     e64:	21 e4       	ldi	r18, 0x41	; 65
     e66:	a6 ed       	ldi	r26, 0xD6	; 214
     e68:	b0 e2       	ldi	r27, 0x20	; 32
     e6a:	01 c0       	rjmp	.+2      	; 0xe6e <.do_clear_bss_start>

00000e6c <.do_clear_bss_loop>:
     e6c:	1d 92       	st	X+, r1

00000e6e <.do_clear_bss_start>:
     e6e:	a3 3f       	cpi	r26, 0xF3	; 243
     e70:	b2 07       	cpc	r27, r18
     e72:	e1 f7       	brne	.-8      	; 0xe6c <.do_clear_bss_loop>

00000e74 <__do_global_ctors>:
     e74:	17 e0       	ldi	r17, 0x07	; 7
     e76:	cd e1       	ldi	r28, 0x1D	; 29
     e78:	d7 e0       	ldi	r29, 0x07	; 7
     e7a:	00 e0       	ldi	r16, 0x00	; 0
     e7c:	06 c0       	rjmp	.+12     	; 0xe8a <__do_global_ctors+0x16>
     e7e:	21 97       	sbiw	r28, 0x01	; 1
     e80:	01 09       	sbc	r16, r1
     e82:	80 2f       	mov	r24, r16
     e84:	fe 01       	movw	r30, r28
     e86:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <__tablejump2__>
     e8a:	cc 31       	cpi	r28, 0x1C	; 28
     e8c:	d1 07       	cpc	r29, r17
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	08 07       	cpc	r16, r24
     e92:	a9 f7       	brne	.-22     	; 0xe7e <__do_global_ctors+0xa>
     e94:	0e 94 cb 13 	call	0x2796	; 0x2796 <main>
     e98:	0c 94 15 30 	jmp	0x602a	; 0x602a <_exit>

00000e9c <__bad_interrupt>:
     e9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000ea0 <_ZN12DeviceDriver6DM542T27min_bound_interrupt_handlerEv>:
  {
    timer_->low();
  }
  
  void DM542T::min_bound_interrupt_handler(void)
  {
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	ec 01       	movw	r28, r24
    if (get_direction() == 1)
     ea6:	e8 81       	ld	r30, Y
     ea8:	f9 81       	ldd	r31, Y+1	; 0x01
     eaa:	06 84       	ldd	r0, Z+14	; 0x0e
     eac:	f7 85       	ldd	r31, Z+15	; 0x0f
     eae:	e0 2d       	mov	r30, r0
     eb0:	19 95       	eicall
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	59 f4       	brne	.+22     	; 0xecc <_ZN12DeviceDriver6DM542T27min_bound_interrupt_handlerEv+0x2c>
    {
      motorOff();
     eb6:	e8 81       	ld	r30, Y
     eb8:	f9 81       	ldd	r31, Y+1	; 0x01
     eba:	06 80       	ldd	r0, Z+6	; 0x06
     ebc:	f7 81       	ldd	r31, Z+7	; 0x07
     ebe:	e0 2d       	mov	r30, r0
     ec0:	ce 01       	movw	r24, r28
     ec2:	19 95       	eicall
  
    void max_bound_interrupt_handler( ) ;
    
    virtual bool get_status(void);
  
    void reset_steps( ) { steps = 0 ; }
     ec4:	1a 82       	std	Y+2, r1	; 0x02
     ec6:	1b 82       	std	Y+3, r1	; 0x03
     ec8:	1c 82       	std	Y+4, r1	; 0x04
     eca:	1d 82       	std	Y+5, r1	; 0x05
      reset_steps();
    }
  }
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <_ZN12DeviceDriver6DM542T27max_bound_interrupt_handlerEv>:
  
  void DM542T::max_bound_interrupt_handler(void)
  {
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	ec 01       	movw	r28, r24
    if (get_direction() == 0)
     ed8:	e8 81       	ld	r30, Y
     eda:	f9 81       	ldd	r31, Y+1	; 0x01
     edc:	06 84       	ldd	r0, Z+14	; 0x0e
     ede:	f7 85       	ldd	r31, Z+15	; 0x0f
     ee0:	e0 2d       	mov	r30, r0
     ee2:	19 95       	eicall
     ee4:	81 11       	cpse	r24, r1
     ee6:	07 c0       	rjmp	.+14     	; 0xef6 <_ZN12DeviceDriver6DM542T27max_bound_interrupt_handlerEv+0x24>
    {
      motorOff();
     ee8:	e8 81       	ld	r30, Y
     eea:	f9 81       	ldd	r31, Y+1	; 0x01
     eec:	06 80       	ldd	r0, Z+6	; 0x06
     eee:	f7 81       	ldd	r31, Z+7	; 0x07
     ef0:	e0 2d       	mov	r30, r0
     ef2:	ce 01       	movw	r24, r28
     ef4:	19 95       	eicall
    }
  }
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <_ZN5SBG018reg_readEv>:
 */
int16_t SBG01::get_voltage_bits (void)
{
	reg_read();
	return read_word;
}
     efc:	bc 01       	movw	r22, r24
     efe:	64 5f       	subi	r22, 0xF4	; 244
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	48 ee       	ldi	r20, 0xE8	; 232
     f04:	53 e0       	ldi	r21, 0x03	; 3
     f06:	fc 01       	movw	r30, r24
     f08:	80 81       	ld	r24, Z
     f0a:	91 81       	ldd	r25, Z+1	; 0x01
     f0c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <_ZN3ADC4readEPij>
     f10:	08 95       	ret

00000f12 <_ZN5SBG0111get_voltageEv>:
     f12:	cf 92       	push	r12
     f14:	df 92       	push	r13
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	ec 01       	movw	r28, r24
     f24:	0e 94 7e 07 	call	0xefc	; 0xefc <_ZN5SBG018reg_readEv>
     f28:	0c 85       	ldd	r16, Y+12	; 0x0c
     f2a:	1d 85       	ldd	r17, Y+13	; 0x0d
     f2c:	88 81       	ld	r24, Y
     f2e:	99 81       	ldd	r25, Y+1	; 0x01
     f30:	0e 94 2c 08 	call	0x1058	; 0x1058 <_ZN3ADC15get_voltage_refEv>
     f34:	6b 01       	movw	r12, r22
     f36:	7c 01       	movw	r14, r24
     f38:	b8 01       	movw	r22, r16
     f3a:	11 0f       	add	r17, r17
     f3c:	88 0b       	sbc	r24, r24
     f3e:	99 0b       	sbc	r25, r25
     f40:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <__floatsisf>
     f44:	a7 01       	movw	r20, r14
     f46:	96 01       	movw	r18, r12
     f48:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <__mulsf3>
     f4c:	6b 01       	movw	r12, r22
     f4e:	7c 01       	movw	r14, r24
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e0       	ldi	r20, 0x00	; 0
     f56:	55 e4       	ldi	r21, 0x45	; 69
     f58:	6a 89       	ldd	r22, Y+18	; 0x12
     f5a:	7b 89       	ldd	r23, Y+19	; 0x13
     f5c:	8c 89       	ldd	r24, Y+20	; 0x14
     f5e:	9d 89       	ldd	r25, Y+21	; 0x15
     f60:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <__mulsf3>
     f64:	9b 01       	movw	r18, r22
     f66:	ac 01       	movw	r20, r24
     f68:	c7 01       	movw	r24, r14
     f6a:	b6 01       	movw	r22, r12
     f6c:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__divsf3>
     f70:	6a 83       	std	Y+2, r22	; 0x02
     f72:	7b 83       	std	Y+3, r23	; 0x03
     f74:	8c 83       	std	Y+4, r24	; 0x04
     f76:	9d 83       	std	Y+5, r25	; 0x05
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	ff 90       	pop	r15
     f82:	ef 90       	pop	r14
     f84:	df 90       	pop	r13
     f86:	cf 90       	pop	r12
     f88:	08 95       	ret

00000f8a <_ZN5SBG0114get_voltage_mvEv>:

//-------------------------------------------------------------------------------------
/** This method returns the result of get_voltage after converting it to millivolts
 */
float SBG01::get_voltage_mv (void)
{
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	ec 01       	movw	r28, r24
	get_voltage();
     f90:	0e 94 89 07 	call	0xf12	; 0xf12 <_ZN5SBG0111get_voltageEv>
	voltage_mv = voltage * 1000;
	voltage_mv = voltage_mv * 1.99 + 7.9;
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	4a e7       	ldi	r20, 0x7A	; 122
     f9a:	54 e4       	ldi	r21, 0x44	; 68
     f9c:	6a 81       	ldd	r22, Y+2	; 0x02
     f9e:	7b 81       	ldd	r23, Y+3	; 0x03
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	9d 81       	ldd	r25, Y+5	; 0x05
     fa4:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <__mulsf3>
     fa8:	22 e5       	ldi	r18, 0x52	; 82
     faa:	38 eb       	ldi	r19, 0xB8	; 184
     fac:	4e ef       	ldi	r20, 0xFE	; 254
     fae:	5f e3       	ldi	r21, 0x3F	; 63
     fb0:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <__mulsf3>
     fb4:	2d ec       	ldi	r18, 0xCD	; 205
     fb6:	3c ec       	ldi	r19, 0xCC	; 204
     fb8:	4c ef       	ldi	r20, 0xFC	; 252
     fba:	50 e4       	ldi	r21, 0x40	; 64
     fbc:	0e 94 94 2c 	call	0x5928	; 0x5928 <__addsf3>
     fc0:	6e 83       	std	Y+6, r22	; 0x06
     fc2:	7f 83       	std	Y+7, r23	; 0x07
     fc4:	88 87       	std	Y+8, r24	; 0x08
     fc6:	99 87       	std	Y+9, r25	; 0x09
	return voltage_mv;
}
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <_ZN3ADC10start_convEv>:
     fce:	dc 01       	movw	r26, r24
     fd0:	16 96       	adiw	r26, 0x06	; 6
     fd2:	ed 91       	ld	r30, X+
     fd4:	fc 91       	ld	r31, X
     fd6:	17 97       	sbiw	r26, 0x07	; 7
     fd8:	80 a1       	ldd	r24, Z+32	; 0x20
     fda:	80 68       	ori	r24, 0x80	; 128
     fdc:	80 a3       	std	Z+32, r24	; 0x20
     fde:	08 95       	ret

00000fe0 <_ZN3ADC4readEPij>:
     fe0:	ef 92       	push	r14
     fe2:	ff 92       	push	r15
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	1f 92       	push	r1
     fee:	1f 92       	push	r1
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	8c 01       	movw	r16, r24
     ff6:	7b 01       	movw	r14, r22
     ff8:	49 83       	std	Y+1, r20	; 0x01
     ffa:	5a 83       	std	Y+2, r21	; 0x02
     ffc:	0e 94 e7 07 	call	0xfce	; 0xfce <_ZN3ADC10start_convEv>
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	9a 81       	ldd	r25, Y+2	; 0x02
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	89 83       	std	Y+1, r24	; 0x01
    1008:	9a 83       	std	Y+2, r25	; 0x02
    100a:	89 2b       	or	r24, r25
    100c:	b9 f0       	breq	.+46     	; 0x103c <_ZN3ADC4readEPij+0x5c>
    100e:	d8 01       	movw	r26, r16
    1010:	16 96       	adiw	r26, 0x06	; 6
    1012:	ed 91       	ld	r30, X+
    1014:	fc 91       	ld	r31, X
    1016:	17 97       	sbiw	r26, 0x07	; 7
    1018:	83 a1       	ldd	r24, Z+35	; 0x23
    101a:	80 ff       	sbrs	r24, 0
    101c:	f1 cf       	rjmp	.-30     	; 0x1000 <_ZN3ADC4readEPij+0x20>
    101e:	0e c0       	rjmp	.+28     	; 0x103c <_ZN3ADC4readEPij+0x5c>
    1020:	d8 01       	movw	r26, r16
    1022:	16 96       	adiw	r26, 0x06	; 6
    1024:	ed 91       	ld	r30, X+
    1026:	fc 91       	ld	r31, X
    1028:	17 97       	sbiw	r26, 0x07	; 7
    102a:	84 a1       	ldd	r24, Z+36	; 0x24
    102c:	95 a1       	ldd	r25, Z+37	; 0x25
    102e:	f7 01       	movw	r30, r14
    1030:	80 83       	st	Z, r24
    1032:	91 83       	std	Z+1, r25	; 0x01
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	07 c0       	rjmp	.+14     	; 0x1046 <_ZN3ADC4readEPij+0x66>
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	05 c0       	rjmp	.+10     	; 0x1046 <_ZN3ADC4readEPij+0x66>
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	89 2b       	or	r24, r25
    1042:	71 f7       	brne	.-36     	; 0x1020 <_ZN3ADC4readEPij+0x40>
    1044:	f9 cf       	rjmp	.-14     	; 0x1038 <_ZN3ADC4readEPij+0x58>
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	ff 90       	pop	r15
    1054:	ef 90       	pop	r14
    1056:	08 95       	ret

00001058 <_ZN3ADC15get_voltage_refEv>:
    1058:	fc 01       	movw	r30, r24
    105a:	62 81       	ldd	r22, Z+2	; 0x02
    105c:	73 81       	ldd	r23, Z+3	; 0x03
    105e:	84 81       	ldd	r24, Z+4	; 0x04
    1060:	95 81       	ldd	r25, Z+5	; 0x05
    1062:	08 95       	ret

00001064 <_ZN10taskMotion3runEv>:
/** This task interacts with the motor driver object in order to control the motors
 *  in ways specified by the user.
 */

void taskMotion::run (void)
{
    1064:	ec 01       	movw	r28, r24
	// such loop inside the code for each task
	for (;;)
	{		
		

		runs++;                             // Increment counter for debugging
    1066:	8e 85       	ldd	r24, Y+14	; 0x0e
    1068:	9f 85       	ldd	r25, Y+15	; 0x0f
    106a:	a8 89       	ldd	r26, Y+16	; 0x10
    106c:	b9 89       	ldd	r27, Y+17	; 0x11
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	a1 1d       	adc	r26, r1
    1072:	b1 1d       	adc	r27, r1
    1074:	8e 87       	std	Y+14, r24	; 0x0e
    1076:	9f 87       	std	Y+15, r25	; 0x0f
    1078:	a8 8b       	std	Y+16, r26	; 0x10
    107a:	b9 8b       	std	Y+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (20));
    107c:	64 e1       	ldi	r22, 0x14	; 20
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 23 22 	call	0x4446	; 0x4446 <vTaskDelay>
    1088:	ee cf       	rjmp	.-36     	; 0x1066 <_ZN10taskMotion3runEv+0x2>

0000108a <_ZN10taskMotionC1EPKchjP8emstreamPN12DeviceDriver6DM542TEPNS4_11LimitSwitchES8_P9frt_queueImESB_P11shared_dataIhEPSC_IbEj>:
/** This constant sets how many RTOS ticks the task delays if the user's not talking.
 *  The duration is calculated to be about 5 ms.
 */
const portTickType ticks_to_delay = ((configTICK_RATE_HZ / 1000) * 5);

taskMotion::taskMotion(const char* a_name,
    108a:	2f 92       	push	r2
    108c:	3f 92       	push	r3
    108e:	4f 92       	push	r4
    1090:	5f 92       	push	r5
    1092:	6f 92       	push	r6
    1094:	7f 92       	push	r7
    1096:	8f 92       	push	r8
    1098:	9f 92       	push	r9
    109a:	af 92       	push	r10
    109c:	bf 92       	push	r11
    109e:	cf 92       	push	r12
    10a0:	df 92       	push	r13
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	3c 01       	movw	r6, r24
    10b4:	2b 01       	movw	r4, r22
    10b6:	2c 8c       	ldd	r2, Y+28	; 0x1c
    10b8:	3d 8c       	ldd	r3, Y+29	; 0x1d
LS_min(LS_min), LS_max(LS_max),
locations(locations),
max_velocity(max_velocity),
motor_operator(motor_operator),
motor_complete(motor_complete),
microstep_scaler(microstep_scaler)
    10ba:	0e 94 53 24 	call	0x48a6	; 0x48a6 <_ZN8frt_taskC1EPKchjP8emstream>
    10be:	8b e0       	ldi	r24, 0x0B	; 11
    10c0:	90 e2       	ldi	r25, 0x20	; 32
    10c2:	f3 01       	movw	r30, r6
    10c4:	80 83       	st	Z, r24
    10c6:	91 83       	std	Z+1, r25	; 0x01
    10c8:	e2 8a       	std	Z+18, r14	; 0x12
    10ca:	f3 8a       	std	Z+19, r15	; 0x13
    10cc:	c4 8a       	std	Z+20, r12	; 0x14
    10ce:	d5 8a       	std	Z+21, r13	; 0x15
    10d0:	a6 8a       	std	Z+22, r10	; 0x16
    10d2:	b7 8a       	std	Z+23, r11	; 0x17
    10d4:	86 a2       	std	Z+38, r8	; 0x26
    10d6:	97 a2       	std	Z+39, r9	; 0x27
    10d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    10dc:	82 ab       	std	Z+50, r24	; 0x32
    10de:	93 ab       	std	Z+51, r25	; 0x33
    10e0:	88 8d       	ldd	r24, Y+24	; 0x18
    10e2:	99 8d       	ldd	r25, Y+25	; 0x19
    10e4:	86 ab       	std	Z+54, r24	; 0x36
    10e6:	97 ab       	std	Z+55, r25	; 0x37
    10e8:	8e 89       	ldd	r24, Y+22	; 0x16
    10ea:	9f 89       	ldd	r25, Y+23	; 0x17
    10ec:	86 af       	std	Z+62, r24	; 0x3e
    10ee:	97 af       	std	Z+63, r25	; 0x3f
    10f0:	ea 5b       	subi	r30, 0xBA	; 186
    10f2:	ff 4f       	sbci	r31, 0xFF	; 255
    10f4:	20 82       	st	Z, r2
    10f6:	31 82       	std	Z+1, r3	; 0x01
    10f8:	32 96       	adiw	r30, 0x02	; 2
    10fa:	40 82       	st	Z, r4
    10fc:	51 82       	std	Z+1, r5	; 0x01
{
	float turns_per_inch;
	turns_per_inch = 3;
	inch_to_step = 200 * turns_per_inch * microstep_scaler;
    10fe:	b1 01       	movw	r22, r2
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 72 2d 	call	0x5ae4	; 0x5ae4 <__floatunsisf>
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	46 e1       	ldi	r20, 0x16	; 22
    110e:	54 e4       	ldi	r21, 0x44	; 68
    1110:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <__mulsf3>
    1114:	9b 01       	movw	r18, r22
    1116:	ac 01       	movw	r20, r24
    1118:	f3 01       	movw	r30, r6
    111a:	60 a7       	std	Z+40, r22	; 0x28
    111c:	71 a7       	std	Z+41, r23	; 0x29
    111e:	82 a7       	std	Z+42, r24	; 0x2a
    1120:	93 a7       	std	Z+43, r25	; 0x2b
	step_to_inch = 1 / inch_to_step;
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	80 e8       	ldi	r24, 0x80	; 128
    1128:	9f e3       	ldi	r25, 0x3F	; 63
    112a:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__divsf3>
    112e:	f3 01       	movw	r30, r6
    1130:	64 a7       	std	Z+44, r22	; 0x2c
    1132:	75 a7       	std	Z+45, r23	; 0x2d
    1134:	86 a7       	std	Z+46, r24	; 0x2e
    1136:	97 a7       	std	Z+47, r25	; 0x2f
}
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	df 90       	pop	r13
    1146:	cf 90       	pop	r12
    1148:	bf 90       	pop	r11
    114a:	af 90       	pop	r10
    114c:	9f 90       	pop	r9
    114e:	8f 90       	pop	r8
    1150:	7f 90       	pop	r7
    1152:	6f 90       	pop	r6
    1154:	5f 90       	pop	r5
    1156:	4f 90       	pop	r4
    1158:	3f 90       	pop	r3
    115a:	2f 90       	pop	r2
    115c:	08 95       	ret

0000115e <_ZN11task_sensor3runEv>:
/** This task interacts with the heat flux sensor in order to capture readings and relay
 *  that data to the user interface task.
 */

void task_sensor::run (void)
{
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	00 d0       	rcall	.+0      	; 0x1164 <_ZN11task_sensor3runEv+0x6>
    1164:	1f 92       	push	r1
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	8c 01       	movw	r16, r24
	char char_in;                           // Character read from serial device
	time_stamp a_time;                      // Holds the time so it can be displayed
	portTickType previous_ticks;
	//float sensor_readings[sensor_sample_number.get()];
	samples_taken = 0;
    116c:	fc 01       	movw	r30, r24
    116e:	15 8e       	std	Z+29, r1	; 0x1d
    1170:	16 8e       	std	Z+30, r1	; 0x1e
    1172:	17 8e       	std	Z+31, r1	; 0x1f
    1174:	10 a2       	std	Z+32, r1	; 0x20
	sample_sum = 0;
    1176:	11 8e       	std	Z+25, r1	; 0x19
    1178:	12 8e       	std	Z+26, r1	; 0x1a
    117a:	13 8e       	std	Z+27, r1	; 0x1b
    117c:	14 8e       	std	Z+28, r1	; 0x1c
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	0f 92       	push	r0
			the_data = new_data;
    1184:	10 92 5d 21 	sts	0x215D, r1	; 0x80215d <sensor_complete>
			portEXIT_CRITICAL ();
    1188:	0f 90       	pop	r0
    118a:	0f be       	out	0x3f, r0	; 63
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
			the_data = new_data;
    118c:	dd 24       	eor	r13, r13
    118e:	d3 94       	inc	r13
	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
	{
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
    1190:	f8 01       	movw	r30, r16
    1192:	84 85       	ldd	r24, Z+12	; 0x0c
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	09 f4       	brne	.+2      	; 0x119a <_ZN11task_sensor3runEv+0x3c>
    1198:	4b c0       	rjmp	.+150    	; 0x1230 <_ZN11task_sensor3runEv+0xd2>
    119a:	38 f0       	brcs	.+14     	; 0x11aa <_ZN11task_sensor3runEv+0x4c>
    119c:	82 30       	cpi	r24, 0x02	; 2
    119e:	09 f4       	brne	.+2      	; 0x11a2 <_ZN11task_sensor3runEv+0x44>
    11a0:	13 c1       	rjmp	.+550    	; 0x13c8 <_ZN11task_sensor3runEv+0x26a>
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <_ZN11task_sensor3runEv+0x4a>
    11a6:	38 c2       	rjmp	.+1136   	; 0x1618 <_ZN11task_sensor3runEv+0x4ba>
    11a8:	df c2       	rjmp	.+1470   	; 0x1768 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    11b0:	0f 90       	pop	r0
    11b2:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 0, the sensor task is waiting for the device to enter a certain mode.
			case (0):
		
				//*p_serial << sbg01->get_voltage_mv() <<  endl;
				if (sensor_reading.get())
    11b4:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <sensor_reading>
    11b8:	88 23       	and	r24, r24
    11ba:	71 f0       	breq	.+28     	; 0x11d8 <_ZN11task_sensor3runEv+0x7a>
				{
					sample_sum = 0;
    11bc:	f8 01       	movw	r30, r16
    11be:	11 8e       	std	Z+25, r1	; 0x19
    11c0:	12 8e       	std	Z+26, r1	; 0x1a
    11c2:	13 8e       	std	Z+27, r1	; 0x1b
    11c4:	14 8e       	std	Z+28, r1	; 0x1c
					samples_taken = 0;
    11c6:	15 8e       	std	Z+29, r1	; 0x1d
    11c8:	16 8e       	std	Z+30, r1	; 0x1e
    11ca:	17 8e       	std	Z+31, r1	; 0x1f
    11cc:	10 a2       	std	Z+32, r1	; 0x20
					transition_to(3);
    11ce:	63 e0       	ldi	r22, 0x03	; 3
    11d0:	c8 01       	movw	r24, r16
    11d2:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN8frt_task13transition_toEh>
    11d6:	c8 c2       	rjmp	.+1424   	; 0x1768 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    11de:	0f 90       	pop	r0
    11e0:	0f be       	out	0x3f, r0	; 63
				}
				else if(coordinate_mode.get() || incremental_mode.get() || drawing_mode.get())
    11e2:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    11e6:	81 11       	cpse	r24, r1
    11e8:	13 c0       	rjmp	.+38     	; 0x1210 <_ZN11task_sensor3runEv+0xb2>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    11f0:	0f 90       	pop	r0
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <incremental_mode>
    11f8:	81 11       	cpse	r24, r1
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <_ZN11task_sensor3runEv+0xb2>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1202:	0f 90       	pop	r0
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <drawing_mode>
    120a:	88 23       	and	r24, r24
    120c:	09 f4       	brne	.+2      	; 0x1210 <_ZN11task_sensor3runEv+0xb2>
    120e:	ac c2       	rjmp	.+1368   	; 0x1768 <_ZN11task_sensor3runEv+0x60a>
				{
					sample_sum = 0;
    1210:	f8 01       	movw	r30, r16
    1212:	11 8e       	std	Z+25, r1	; 0x19
    1214:	12 8e       	std	Z+26, r1	; 0x1a
    1216:	13 8e       	std	Z+27, r1	; 0x1b
    1218:	14 8e       	std	Z+28, r1	; 0x1c
					samples_taken = 0;
    121a:	15 8e       	std	Z+29, r1	; 0x1d
    121c:	16 8e       	std	Z+30, r1	; 0x1e
    121e:	17 8e       	std	Z+31, r1	; 0x1f
    1220:	10 a2       	std	Z+32, r1	; 0x20
					current_node = 0;
    1222:	15 8a       	std	Z+21, r1	; 0x15
    1224:	16 8a       	std	Z+22, r1	; 0x16
					transition_to(1);
    1226:	6d 2d       	mov	r22, r13
    1228:	c8 01       	movw	r24, r16
    122a:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN8frt_task13transition_toEh>
    122e:	9c c2       	rjmp	.+1336   	; 0x1768 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1236:	0f 90       	pop	r0
    1238:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 1, the device is in coordinate mode, so the sensor will only take readings
			// after the set delay time has elapsed while the sensor is in the proper position.
			case (1):
			
			if(xmotor_complete.get() && ymotor_complete.get() && zmotor_complete.get())
    123a:	80 91 60 21 	lds	r24, 0x2160	; 0x802160 <xmotor_complete>
    123e:	88 23       	and	r24, r24
    1240:	09 f4       	brne	.+2      	; 0x1244 <_ZN11task_sensor3runEv+0xe6>
    1242:	92 c2       	rjmp	.+1316   	; 0x1768 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    124a:	0f 90       	pop	r0
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	80 91 5f 21 	lds	r24, 0x215F	; 0x80215f <ymotor_complete>
    1252:	88 23       	and	r24, r24
    1254:	09 f4       	brne	.+2      	; 0x1258 <_ZN11task_sensor3runEv+0xfa>
    1256:	88 c2       	rjmp	.+1296   	; 0x1768 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    125e:	0f 90       	pop	r0
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	80 91 5e 21 	lds	r24, 0x215E	; 0x80215e <zmotor_complete>
    1266:	88 23       	and	r24, r24
    1268:	09 f4       	brne	.+2      	; 0x126c <_ZN11task_sensor3runEv+0x10e>
    126a:	7e c2       	rjmp	.+1276   	; 0x1768 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63
			{
				if (incremental_mode.get())
    1276:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <incremental_mode>
    127a:	88 23       	and	r24, r24
    127c:	09 f4       	brne	.+2      	; 0x1280 <_ZN11task_sensor3runEv+0x122>
    127e:	2f c0       	rjmp	.+94     	; 0x12de <_ZN11task_sensor3runEv+0x180>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	0f 92       	push	r0
			the_data = new_data;
    1286:	10 92 d9 20 	sts	0x20D9, r1	; 0x8020d9 <incremental_mode>
			portEXIT_CRITICAL ();
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	0f 92       	push	r0
			the_data = new_data;
    1294:	d0 92 4a 21 	sts	0x214A, r13	; 0x80214a <next_node>
			portEXIT_CRITICAL ();
    1298:	0f 90       	pop	r0
    129a:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	0f 92       	push	r0
			the_data = new_data;
    12a2:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <sensor_reading>
			portEXIT_CRITICAL ();
    12a6:	0f 90       	pop	r0
    12a8:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	0f 92       	push	r0
			the_data = new_data;
    12b0:	10 92 60 21 	sts	0x2160, r1	; 0x802160 <xmotor_complete>
			portEXIT_CRITICAL ();
    12b4:	0f 90       	pop	r0
    12b6:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	0f 92       	push	r0
			the_data = new_data;
    12be:	10 92 5f 21 	sts	0x215F, r1	; 0x80215f <ymotor_complete>
			portEXIT_CRITICAL ();
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	0f 92       	push	r0
			the_data = new_data;
    12cc:	10 92 5e 21 	sts	0x215E, r1	; 0x80215e <zmotor_complete>
			portEXIT_CRITICAL ();
    12d0:	0f 90       	pop	r0
    12d2:	0f be       	out	0x3f, r0	; 63
					next_node.put(true);
					sensor_reading.put(false);
					xmotor_complete.put(false);
					ymotor_complete.put(false);
					zmotor_complete.put(false);
					transition_to(0);
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	c8 01       	movw	r24, r16
    12d8:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN8frt_task13transition_toEh>
    12dc:	45 c2       	rjmp	.+1162   	; 0x1768 <_ZN11task_sensor3runEv+0x60a>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	0f 92       	push	r0
			the_data = new_data;
    12e4:	d0 92 58 21 	sts	0x2158, r13	; 0x802158 <sensor_reading>
			portEXIT_CRITICAL ();
    12e8:	0f 90       	pop	r0
    12ea:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	0f 92       	push	r0
			temporary_copy = the_data;
    12f2:	40 90 4f 21 	lds	r4, 0x214F	; 0x80214f <sensor_delay>
    12f6:	50 90 50 21 	lds	r5, 0x2150	; 0x802150 <sensor_delay+0x1>
    12fa:	60 90 51 21 	lds	r6, 0x2151	; 0x802151 <sensor_delay+0x2>
    12fe:	70 90 52 21 	lds	r7, 0x2152	; 0x802152 <sensor_delay+0x3>
			portEXIT_CRITICAL ();
    1302:	0f 90       	pop	r0
    1304:	0f be       	out	0x3f, r0	; 63
				}
				else
				{
					sensor_reading.put(true);
					*p_serial <<  PMS ("Sensor Reading ") << ++current_node << " (Delay = " << sensor_delay.get() << " ms)" << endl;
    1306:	f8 01       	movw	r30, r16
    1308:	e5 88       	ldd	r14, Z+21	; 0x15
    130a:	f6 88       	ldd	r15, Z+22	; 0x16
    130c:	ff ef       	ldi	r31, 0xFF	; 255
    130e:	ef 1a       	sub	r14, r31
    1310:	ff 0a       	sbc	r15, r31
    1312:	f8 01       	movw	r30, r16
    1314:	e5 8a       	std	Z+21, r14	; 0x15
    1316:	f6 8a       	std	Z+22, r15	; 0x16
    1318:	6a e0       	ldi	r22, 0x0A	; 10
    131a:	86 81       	ldd	r24, Z+6	; 0x06
    131c:	97 81       	ldd	r25, Z+7	; 0x07
    131e:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    1322:	5c 01       	movw	r10, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    1324:	68 e6       	ldi	r22, 0x68	; 104
    1326:	76 e0       	ldi	r23, 0x06	; 6
    1328:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    132c:	b7 01       	movw	r22, r14
    132e:	c5 01       	movw	r24, r10
    1330:	0e 94 96 28 	call	0x512c	; 0x512c <_ZN8emstreamlsEj>
    1334:	7c 01       	movw	r14, r24
    1336:	6f e0       	ldi	r22, 0x0F	; 15
    1338:	70 e2       	ldi	r23, 0x20	; 32
    133a:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    133e:	b3 01       	movw	r22, r6
    1340:	a2 01       	movw	r20, r4
    1342:	c7 01       	movw	r24, r14
    1344:	0e 94 ca 28 	call	0x5194	; 0x5194 <_ZN8emstreamlsEm>
    1348:	7c 01       	movw	r14, r24
    134a:	6a e1       	ldi	r22, 0x1A	; 26
    134c:	70 e2       	ldi	r23, 0x20	; 32
    134e:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    1352:	66 e0       	ldi	r22, 0x06	; 6
    1354:	c7 01       	movw	r24, r14
    1356:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
					node++;
    135a:	f8 01       	movw	r30, r16
    135c:	82 89       	ldd	r24, Z+18	; 0x12
    135e:	8f 5f       	subi	r24, 0xFF	; 255
    1360:	82 8b       	std	Z+18, r24	; 0x12
					previous_ticks = xTaskGetTickCount();
    1362:	0e 94 1d 20 	call	0x403a	; 0x403a <xTaskGetTickCount>
    1366:	69 83       	std	Y+1, r22	; 0x01
    1368:	7a 83       	std	Y+2, r23	; 0x02
    136a:	8b 83       	std	Y+3, r24	; 0x03
    136c:	9c 83       	std	Y+4, r25	; 0x04
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1374:	0f 90       	pop	r0
    1376:	0f be       	out	0x3f, r0	; 63
		 *                    delay so as to get precise, regular timing
		 *  @param milliseconds The duration of the delay interval in milliseconds
		 */
		void delay_from_to_ms (portTickType& from_ticks, portTickType milliseconds)
		{
			portTickType interval = configMS_TO_TICKS (milliseconds);
    1378:	20 91 4f 21 	lds	r18, 0x214F	; 0x80214f <sensor_delay>
    137c:	30 91 50 21 	lds	r19, 0x2150	; 0x802150 <sensor_delay+0x1>
    1380:	40 91 51 21 	lds	r20, 0x2151	; 0x802151 <sensor_delay+0x2>
    1384:	50 91 52 21 	lds	r21, 0x2152	; 0x802152 <sensor_delay+0x3>
    1388:	a8 ee       	ldi	r26, 0xE8	; 232
    138a:	b3 e0       	ldi	r27, 0x03	; 3
    138c:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__muluhisi3>
    1390:	68 3e       	cpi	r22, 0xE8	; 232
    1392:	f3 e0       	ldi	r31, 0x03	; 3
    1394:	7f 07       	cpc	r23, r31
    1396:	81 05       	cpc	r24, r1
    1398:	91 05       	cpc	r25, r1
    139a:	48 f0       	brcs	.+18     	; 0x13ae <_ZN11task_sensor3runEv+0x250>
    139c:	28 ee       	ldi	r18, 0xE8	; 232
    139e:	33 e0       	ldi	r19, 0x03	; 3
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <__udivmodsi4>
    13a8:	ba 01       	movw	r22, r20
    13aa:	a9 01       	movw	r20, r18
    13ac:	04 c0       	rjmp	.+8      	; 0x13b6 <_ZN11task_sensor3runEv+0x258>
    13ae:	41 e0       	ldi	r20, 0x01	; 1
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	70 e0       	ldi	r23, 0x00	; 0
			vTaskDelayUntil (&from_ticks, interval);
    13b6:	ce 01       	movw	r24, r28
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	0e 94 b6 21 	call	0x436c	; 0x436c <vTaskDelayUntil>
					delay_from_to_ms(previous_ticks, sensor_delay.get());
					transition_to(2);
    13be:	62 e0       	ldi	r22, 0x02	; 2
    13c0:	c8 01       	movw	r24, r16
    13c2:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN8frt_task13transition_toEh>
    13c6:	d0 c1       	rjmp	.+928    	; 0x1768 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	0f 92       	push	r0
			temporary_copy = the_data;
    13ce:	60 91 54 21 	lds	r22, 0x2154	; 0x802154 <sensor_sample_number>
    13d2:	70 91 55 21 	lds	r23, 0x2155	; 0x802155 <sensor_sample_number+0x1>
    13d6:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <sensor_sample_number+0x2>
    13da:	90 91 57 21 	lds	r25, 0x2157	; 0x802157 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    13de:	0f 90       	pop	r0
    13e0:	0f be       	out	0x3f, r0	; 63
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In state 3, the device has waited for the heat flux gage to get a steady reading, and will
			// now take a number of samples to be averaged and then sent back to the interface.
			case (2):
									
			if(samples_taken < sensor_sample_number.get())
    13e2:	f8 01       	movw	r30, r16
    13e4:	45 8c       	ldd	r4, Z+29	; 0x1d
    13e6:	56 8c       	ldd	r5, Z+30	; 0x1e
    13e8:	67 8c       	ldd	r6, Z+31	; 0x1f
    13ea:	70 a0       	ldd	r7, Z+32	; 0x20
    13ec:	46 16       	cp	r4, r22
    13ee:	57 06       	cpc	r5, r23
    13f0:	68 06       	cpc	r6, r24
    13f2:	79 06       	cpc	r7, r25
    13f4:	f0 f4       	brcc	.+60     	; 0x1432 <_ZN11task_sensor3runEv+0x2d4>
			{
				//sensor_readings[samples_taken] = sbg01->get_voltage_mv();
				sample_sum += sbg01->get_voltage_mv();
    13f6:	83 89       	ldd	r24, Z+19	; 0x13
    13f8:	94 89       	ldd	r25, Z+20	; 0x14
    13fa:	0e 94 c5 07 	call	0xf8a	; 0xf8a <_ZN5SBG0114get_voltage_mvEv>
    13fe:	9b 01       	movw	r18, r22
    1400:	ac 01       	movw	r20, r24
    1402:	f8 01       	movw	r30, r16
    1404:	61 8d       	ldd	r22, Z+25	; 0x19
    1406:	72 8d       	ldd	r23, Z+26	; 0x1a
    1408:	83 8d       	ldd	r24, Z+27	; 0x1b
    140a:	94 8d       	ldd	r25, Z+28	; 0x1c
    140c:	0e 94 94 2c 	call	0x5928	; 0x5928 <__addsf3>
    1410:	f8 01       	movw	r30, r16
    1412:	61 8f       	std	Z+25, r22	; 0x19
    1414:	72 8f       	std	Z+26, r23	; 0x1a
    1416:	83 8f       	std	Z+27, r24	; 0x1b
    1418:	94 8f       	std	Z+28, r25	; 0x1c
				samples_taken++;
    141a:	85 8d       	ldd	r24, Z+29	; 0x1d
    141c:	96 8d       	ldd	r25, Z+30	; 0x1e
    141e:	a7 8d       	ldd	r26, Z+31	; 0x1f
    1420:	b0 a1       	ldd	r27, Z+32	; 0x20
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	a1 1d       	adc	r26, r1
    1426:	b1 1d       	adc	r27, r1
    1428:	85 8f       	std	Z+29, r24	; 0x1d
    142a:	96 8f       	std	Z+30, r25	; 0x1e
    142c:	a7 8f       	std	Z+31, r26	; 0x1f
    142e:	b0 a3       	std	Z+32, r27	; 0x20
    1430:	9b c1       	rjmp	.+822    	; 0x1768 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63
			}
			else
			{
				heat_flux.put(sample_sum/sensor_sample_number.get());
    143c:	0e 94 72 2d 	call	0x5ae4	; 0x5ae4 <__floatunsisf>
    1440:	9b 01       	movw	r18, r22
    1442:	ac 01       	movw	r20, r24
    1444:	f8 01       	movw	r30, r16
    1446:	61 8d       	ldd	r22, Z+25	; 0x19
    1448:	72 8d       	ldd	r23, Z+26	; 0x1a
    144a:	83 8d       	ldd	r24, Z+27	; 0x1b
    144c:	94 8d       	ldd	r25, Z+28	; 0x1c
    144e:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__divsf3>
    1452:	2b 01       	movw	r4, r22
    1454:	3c 01       	movw	r6, r24
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	0f 92       	push	r0
			the_data = new_data;
    145c:	60 93 59 21 	sts	0x2159, r22	; 0x802159 <heat_flux>
    1460:	70 93 5a 21 	sts	0x215A, r23	; 0x80215a <heat_flux+0x1>
    1464:	80 93 5b 21 	sts	0x215B, r24	; 0x80215b <heat_flux+0x2>
    1468:	90 93 5c 21 	sts	0x215C, r25	; 0x80215c <heat_flux+0x3>
			portEXIT_CRITICAL ();
    146c:	0f 90       	pop	r0
    146e:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1476:	0f 90       	pop	r0
    1478:	0f be       	out	0x3f, r0	; 63
				*p_serial << PMS ("HF:") << heat_flux.get()*6.289 << endl;
    147a:	6a e0       	ldi	r22, 0x0A	; 10
    147c:	f8 01       	movw	r30, r16
    147e:	86 81       	ldd	r24, Z+6	; 0x06
    1480:	97 81       	ldd	r25, Z+7	; 0x07
    1482:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    1486:	7c 01       	movw	r14, r24
    1488:	64 e6       	ldi	r22, 0x64	; 100
    148a:	76 e0       	ldi	r23, 0x06	; 6
    148c:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    1490:	2d e7       	ldi	r18, 0x7D	; 125
    1492:	3f e3       	ldi	r19, 0x3F	; 63
    1494:	49 ec       	ldi	r20, 0xC9	; 201
    1496:	50 e4       	ldi	r21, 0x40	; 64
    1498:	c3 01       	movw	r24, r6
    149a:	b2 01       	movw	r22, r4
    149c:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <__mulsf3>
    14a0:	ab 01       	movw	r20, r22
    14a2:	bc 01       	movw	r22, r24
    14a4:	c7 01       	movw	r24, r14
    14a6:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <_ZN8emstreamlsEd>
    14aa:	66 e0       	ldi	r22, 0x06	; 6
    14ac:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	0f 92       	push	r0
			temporary_copy = the_data;
    14b6:	40 90 59 21 	lds	r4, 0x2159	; 0x802159 <heat_flux>
    14ba:	50 90 5a 21 	lds	r5, 0x215A	; 0x80215a <heat_flux+0x1>
    14be:	60 90 5b 21 	lds	r6, 0x215B	; 0x80215b <heat_flux+0x2>
    14c2:	70 90 5c 21 	lds	r7, 0x215C	; 0x80215c <heat_flux+0x3>
			portEXIT_CRITICAL ();
    14c6:	0f 90       	pop	r0
    14c8:	0f be       	out	0x3f, r0	; 63
				*p_serial << PMS ("mV:") << heat_flux.get() << endl;
    14ca:	6a e0       	ldi	r22, 0x0A	; 10
    14cc:	f8 01       	movw	r30, r16
    14ce:	86 81       	ldd	r24, Z+6	; 0x06
    14d0:	97 81       	ldd	r25, Z+7	; 0x07
    14d2:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    14d6:	7c 01       	movw	r14, r24
    14d8:	60 e6       	ldi	r22, 0x60	; 96
    14da:	76 e0       	ldi	r23, 0x06	; 6
    14dc:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    14e0:	b3 01       	movw	r22, r6
    14e2:	a2 01       	movw	r20, r4
    14e4:	c7 01       	movw	r24, r14
    14e6:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <_ZN8emstreamlsEf>
    14ea:	66 e0       	ldi	r22, 0x06	; 6
    14ec:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
				//*p_serial << PMS ("Sample std dev: ") << get_std_dev(heat_flux.get(), sensor_sample_number.get(), sensor_readings) << endl;
				sample_sum = 0;
    14f0:	f8 01       	movw	r30, r16
    14f2:	11 8e       	std	Z+25, r1	; 0x19
    14f4:	12 8e       	std	Z+26, r1	; 0x1a
    14f6:	13 8e       	std	Z+27, r1	; 0x1b
    14f8:	14 8e       	std	Z+28, r1	; 0x1c
				samples_taken = 0;
    14fa:	15 8e       	std	Z+29, r1	; 0x1d
    14fc:	16 8e       	std	Z+30, r1	; 0x1e
    14fe:	17 8e       	std	Z+31, r1	; 0x1f
    1500:	10 a2       	std	Z+32, r1	; 0x20
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1508:	0f 90       	pop	r0
    150a:	0f be       	out	0x3f, r0	; 63
				if (current_node < total_nodes.get())
    150c:	20 91 48 21 	lds	r18, 0x2148	; 0x802148 <total_nodes>
    1510:	30 91 49 21 	lds	r19, 0x2149	; 0x802149 <total_nodes+0x1>
    1514:	85 89       	ldd	r24, Z+21	; 0x15
    1516:	96 89       	ldd	r25, Z+22	; 0x16
    1518:	82 17       	cp	r24, r18
    151a:	93 07       	cpc	r25, r19
    151c:	08 f0       	brcs	.+2      	; 0x1520 <_ZN11task_sensor3runEv+0x3c2>
    151e:	28 c0       	rjmp	.+80     	; 0x1570 <_ZN11task_sensor3runEv+0x412>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	0f 92       	push	r0
			the_data = new_data;
    1526:	d0 92 4a 21 	sts	0x214A, r13	; 0x80214a <next_node>
			portEXIT_CRITICAL ();
    152a:	0f 90       	pop	r0
    152c:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	0f 92       	push	r0
			the_data = new_data;
    1534:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <sensor_reading>
			portEXIT_CRITICAL ();
    1538:	0f 90       	pop	r0
    153a:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	0f 92       	push	r0
			the_data = new_data;
    1542:	10 92 60 21 	sts	0x2160, r1	; 0x802160 <xmotor_complete>
			portEXIT_CRITICAL ();
    1546:	0f 90       	pop	r0
    1548:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	0f 92       	push	r0
			the_data = new_data;
    1550:	10 92 5f 21 	sts	0x215F, r1	; 0x80215f <ymotor_complete>
			portEXIT_CRITICAL ();
    1554:	0f 90       	pop	r0
    1556:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	0f 92       	push	r0
			the_data = new_data;
    155e:	10 92 5e 21 	sts	0x215E, r1	; 0x80215e <zmotor_complete>
			portEXIT_CRITICAL ();
    1562:	0f 90       	pop	r0
    1564:	0f be       	out	0x3f, r0	; 63
					next_node.put(true);
					sensor_reading.put(false);
					xmotor_complete.put(false);
					ymotor_complete.put(false);
					zmotor_complete.put(false);
					transition_to(1);
    1566:	6d 2d       	mov	r22, r13
    1568:	c8 01       	movw	r24, r16
    156a:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN8frt_task13transition_toEh>
    156e:	fc c0       	rjmp	.+504    	; 0x1768 <_ZN11task_sensor3runEv+0x60a>
				}
				else
				{
					*p_serial << PMS ("Routine complete.") << endl;	
    1570:	6a e0       	ldi	r22, 0x0A	; 10
    1572:	f8 01       	movw	r30, r16
    1574:	86 81       	ldd	r24, Z+6	; 0x06
    1576:	97 81       	ldd	r25, Z+7	; 0x07
    1578:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    157c:	7c 01       	movw	r14, r24
    157e:	6e e4       	ldi	r22, 0x4E	; 78
    1580:	76 e0       	ldi	r23, 0x06	; 6
    1582:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    1586:	66 e0       	ldi	r22, 0x06	; 6
    1588:	c7 01       	movw	r24, r14
    158a:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
					transition_to(0);
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	c8 01       	movw	r24, r16
    1592:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN8frt_task13transition_toEh>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	0f 92       	push	r0
			the_data = new_data;
    159c:	10 92 db 20 	sts	0x20DB, r1	; 0x8020db <coordinate_mode>
			portEXIT_CRITICAL ();
    15a0:	0f 90       	pop	r0
    15a2:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	0f 92       	push	r0
			the_data = new_data;
    15aa:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <drawing_mode>
			portEXIT_CRITICAL ();
    15ae:	0f 90       	pop	r0
    15b0:	0f be       	out	0x3f, r0	; 63
					coordinate_mode.put(false);
					drawing_mode.put(false);
					*p_serial << PMS ("C") << endl;
    15b2:	6a e0       	ldi	r22, 0x0A	; 10
    15b4:	f8 01       	movw	r30, r16
    15b6:	86 81       	ldd	r24, Z+6	; 0x06
    15b8:	97 81       	ldd	r25, Z+7	; 0x07
    15ba:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    15be:	7c 01       	movw	r14, r24
    15c0:	6c e4       	ldi	r22, 0x4C	; 76
    15c2:	76 e0       	ldi	r23, 0x06	; 6
    15c4:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    15c8:	66 e0       	ldi	r22, 0x06	; 6
    15ca:	c7 01       	movw	r24, r14
    15cc:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	0f 92       	push	r0
			the_data = new_data;
    15d6:	10 92 4a 21 	sts	0x214A, r1	; 0x80214a <next_node>
			portEXIT_CRITICAL ();
    15da:	0f 90       	pop	r0
    15dc:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	0f 92       	push	r0
			the_data = new_data;
    15e4:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <sensor_reading>
			portEXIT_CRITICAL ();
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	0f 92       	push	r0
			the_data = new_data;
    15f2:	10 92 60 21 	sts	0x2160, r1	; 0x802160 <xmotor_complete>
			portEXIT_CRITICAL ();
    15f6:	0f 90       	pop	r0
    15f8:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	0f 92       	push	r0
			the_data = new_data;
    1600:	10 92 5f 21 	sts	0x215F, r1	; 0x80215f <ymotor_complete>
			portEXIT_CRITICAL ();
    1604:	0f 90       	pop	r0
    1606:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	0f 92       	push	r0
			the_data = new_data;
    160e:	10 92 5e 21 	sts	0x215E, r1	; 0x80215e <zmotor_complete>
			portEXIT_CRITICAL ();
    1612:	0f 90       	pop	r0
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	a8 c0       	rjmp	.+336    	; 0x1768 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	0f 92       	push	r0
			temporary_copy = the_data;
    161e:	60 91 54 21 	lds	r22, 0x2154	; 0x802154 <sensor_sample_number>
    1622:	70 91 55 21 	lds	r23, 0x2155	; 0x802155 <sensor_sample_number+0x1>
    1626:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <sensor_sample_number+0x2>
    162a:	90 91 57 21 	lds	r25, 0x2157	; 0x802157 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    162e:	0f 90       	pop	r0
    1630:	0f be       	out	0x3f, r0	; 63
			// In state 4, the interface has requested a sensor reading. The ADC will sample
			// a set number of readings and then take the average and send the result back
			// over serial.
			case (3):
			
			if(samples_taken < sensor_sample_number.get())
    1632:	f8 01       	movw	r30, r16
    1634:	45 8c       	ldd	r4, Z+29	; 0x1d
    1636:	56 8c       	ldd	r5, Z+30	; 0x1e
    1638:	67 8c       	ldd	r6, Z+31	; 0x1f
    163a:	70 a0       	ldd	r7, Z+32	; 0x20
    163c:	46 16       	cp	r4, r22
    163e:	57 06       	cpc	r5, r23
    1640:	68 06       	cpc	r6, r24
    1642:	79 06       	cpc	r7, r25
    1644:	f0 f4       	brcc	.+60     	; 0x1682 <_ZN11task_sensor3runEv+0x524>
			{
				sample_sum += sbg01->get_voltage_mv();
    1646:	83 89       	ldd	r24, Z+19	; 0x13
    1648:	94 89       	ldd	r25, Z+20	; 0x14
    164a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <_ZN5SBG0114get_voltage_mvEv>
    164e:	9b 01       	movw	r18, r22
    1650:	ac 01       	movw	r20, r24
    1652:	f8 01       	movw	r30, r16
    1654:	61 8d       	ldd	r22, Z+25	; 0x19
    1656:	72 8d       	ldd	r23, Z+26	; 0x1a
    1658:	83 8d       	ldd	r24, Z+27	; 0x1b
    165a:	94 8d       	ldd	r25, Z+28	; 0x1c
    165c:	0e 94 94 2c 	call	0x5928	; 0x5928 <__addsf3>
    1660:	f8 01       	movw	r30, r16
    1662:	61 8f       	std	Z+25, r22	; 0x19
    1664:	72 8f       	std	Z+26, r23	; 0x1a
    1666:	83 8f       	std	Z+27, r24	; 0x1b
    1668:	94 8f       	std	Z+28, r25	; 0x1c
				samples_taken++;
    166a:	85 8d       	ldd	r24, Z+29	; 0x1d
    166c:	96 8d       	ldd	r25, Z+30	; 0x1e
    166e:	a7 8d       	ldd	r26, Z+31	; 0x1f
    1670:	b0 a1       	ldd	r27, Z+32	; 0x20
    1672:	01 96       	adiw	r24, 0x01	; 1
    1674:	a1 1d       	adc	r26, r1
    1676:	b1 1d       	adc	r27, r1
    1678:	85 8f       	std	Z+29, r24	; 0x1d
    167a:	96 8f       	std	Z+30, r25	; 0x1e
    167c:	a7 8f       	std	Z+31, r26	; 0x1f
    167e:	b0 a3       	std	Z+32, r27	; 0x20
    1680:	73 c0       	rjmp	.+230    	; 0x1768 <_ZN11task_sensor3runEv+0x60a>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1688:	0f 90       	pop	r0
    168a:	0f be       	out	0x3f, r0	; 63
			}
			else
			{
				heat_flux.put(sample_sum/sensor_sample_number.get());
    168c:	0e 94 72 2d 	call	0x5ae4	; 0x5ae4 <__floatunsisf>
    1690:	9b 01       	movw	r18, r22
    1692:	ac 01       	movw	r20, r24
    1694:	f8 01       	movw	r30, r16
    1696:	61 8d       	ldd	r22, Z+25	; 0x19
    1698:	72 8d       	ldd	r23, Z+26	; 0x1a
    169a:	83 8d       	ldd	r24, Z+27	; 0x1b
    169c:	94 8d       	ldd	r25, Z+28	; 0x1c
    169e:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <__divsf3>
    16a2:	2b 01       	movw	r4, r22
    16a4:	3c 01       	movw	r6, r24
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	0f 92       	push	r0
			the_data = new_data;
    16ac:	60 93 59 21 	sts	0x2159, r22	; 0x802159 <heat_flux>
    16b0:	70 93 5a 21 	sts	0x215A, r23	; 0x80215a <heat_flux+0x1>
    16b4:	80 93 5b 21 	sts	0x215B, r24	; 0x80215b <heat_flux+0x2>
    16b8:	90 93 5c 21 	sts	0x215C, r25	; 0x80215c <heat_flux+0x3>
			portEXIT_CRITICAL ();
    16bc:	0f 90       	pop	r0
    16be:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    16c6:	0f 90       	pop	r0
    16c8:	0f be       	out	0x3f, r0	; 63
				*p_serial << PMS ("HF:") << heat_flux.get()*6.289 << endl;
    16ca:	6a e0       	ldi	r22, 0x0A	; 10
    16cc:	f8 01       	movw	r30, r16
    16ce:	86 81       	ldd	r24, Z+6	; 0x06
    16d0:	97 81       	ldd	r25, Z+7	; 0x07
    16d2:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    16d6:	7c 01       	movw	r14, r24
    16d8:	68 e4       	ldi	r22, 0x48	; 72
    16da:	76 e0       	ldi	r23, 0x06	; 6
    16dc:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    16e0:	2d e7       	ldi	r18, 0x7D	; 125
    16e2:	3f e3       	ldi	r19, 0x3F	; 63
    16e4:	49 ec       	ldi	r20, 0xC9	; 201
    16e6:	50 e4       	ldi	r21, 0x40	; 64
    16e8:	c3 01       	movw	r24, r6
    16ea:	b2 01       	movw	r22, r4
    16ec:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <__mulsf3>
    16f0:	ab 01       	movw	r20, r22
    16f2:	bc 01       	movw	r22, r24
    16f4:	c7 01       	movw	r24, r14
    16f6:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <_ZN8emstreamlsEd>
    16fa:	66 e0       	ldi	r22, 0x06	; 6
    16fc:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	0f 92       	push	r0
			temporary_copy = the_data;
    1706:	40 90 59 21 	lds	r4, 0x2159	; 0x802159 <heat_flux>
    170a:	50 90 5a 21 	lds	r5, 0x215A	; 0x80215a <heat_flux+0x1>
    170e:	60 90 5b 21 	lds	r6, 0x215B	; 0x80215b <heat_flux+0x2>
    1712:	70 90 5c 21 	lds	r7, 0x215C	; 0x80215c <heat_flux+0x3>
			portEXIT_CRITICAL ();
    1716:	0f 90       	pop	r0
    1718:	0f be       	out	0x3f, r0	; 63
				*p_serial << PMS ("mV:") << heat_flux.get() << endl;
    171a:	6a e0       	ldi	r22, 0x0A	; 10
    171c:	f8 01       	movw	r30, r16
    171e:	86 81       	ldd	r24, Z+6	; 0x06
    1720:	97 81       	ldd	r25, Z+7	; 0x07
    1722:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    1726:	7c 01       	movw	r14, r24
    1728:	64 e4       	ldi	r22, 0x44	; 68
    172a:	76 e0       	ldi	r23, 0x06	; 6
    172c:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    1730:	b3 01       	movw	r22, r6
    1732:	a2 01       	movw	r20, r4
    1734:	c7 01       	movw	r24, r14
    1736:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <_ZN8emstreamlsEf>
    173a:	66 e0       	ldi	r22, 0x06	; 6
    173c:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
				//*p_serial << PMS ("Sample std dev: ") << get_std_dev(heat_flux.get(), sensor_sample_number.get(), sensor_readings) << endl;
				sample_sum = 0;
    1740:	f8 01       	movw	r30, r16
    1742:	11 8e       	std	Z+25, r1	; 0x19
    1744:	12 8e       	std	Z+26, r1	; 0x1a
    1746:	13 8e       	std	Z+27, r1	; 0x1b
    1748:	14 8e       	std	Z+28, r1	; 0x1c
				samples_taken = 0;
    174a:	15 8e       	std	Z+29, r1	; 0x1d
    174c:	16 8e       	std	Z+30, r1	; 0x1e
    174e:	17 8e       	std	Z+31, r1	; 0x1f
    1750:	10 a2       	std	Z+32, r1	; 0x20
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	0f 92       	push	r0
			the_data = new_data;
    1758:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <sensor_reading>
			portEXIT_CRITICAL ();
    175c:	0f 90       	pop	r0
    175e:	0f be       	out	0x3f, r0	; 63
				sensor_reading.put(false);
				transition_to(0);
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	c8 01       	movw	r24, r16
    1764:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN8frt_task13transition_toEh>
			
			break;

		} // End switch state

		runs++;                             // Increment counter for debugging
    1768:	f8 01       	movw	r30, r16
    176a:	86 85       	ldd	r24, Z+14	; 0x0e
    176c:	97 85       	ldd	r25, Z+15	; 0x0f
    176e:	a0 89       	ldd	r26, Z+16	; 0x10
    1770:	b1 89       	ldd	r27, Z+17	; 0x11
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	a1 1d       	adc	r26, r1
    1776:	b1 1d       	adc	r27, r1
    1778:	86 87       	std	Z+14, r24	; 0x0e
    177a:	97 87       	std	Z+15, r25	; 0x0f
    177c:	a0 8b       	std	Z+16, r26	; 0x10
    177e:	b1 8b       	std	Z+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (1));
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	0e 94 23 22 	call	0x4446	; 0x4446 <vTaskDelay>
	sensor_complete.put(false);
	

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    178c:	01 cd       	rjmp	.-1534   	; 0x1190 <_ZN11task_sensor3runEv+0x32>

0000178e <_ZN11task_sensorC1EPKchjP8emstreamP5SBG01>:
 *                      (default: configMINIMAL_STACK_SIZE)
 *  @param p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which can
 *                   be used by this task to communicate (default: NULL)
 */

task_sensor::task_sensor (const char* a_name, 
    178e:	cf 92       	push	r12
    1790:	df 92       	push	r13
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	ec 01       	movw	r28, r24
    17a0:	6b 01       	movw	r12, r22
					  unsigned portBASE_TYPE a_priority, 
					  size_t a_stack_size,
					  emstream* p_ser_dev,
					  SBG01* sbg01
					 )
	: frt_task (a_name, a_priority, a_stack_size, p_ser_dev), sbg01(sbg01)
    17a2:	0e 94 53 24 	call	0x48a6	; 0x48a6 <_ZN8frt_taskC1EPKchjP8emstream>
    17a6:	83 e2       	ldi	r24, 0x23	; 35
    17a8:	90 e2       	ldi	r25, 0x20	; 32
    17aa:	88 83       	st	Y, r24
    17ac:	99 83       	std	Y+1, r25	; 0x01
    17ae:	eb 8a       	std	Y+19, r14	; 0x13
    17b0:	fc 8a       	std	Y+20, r15	; 0x14
{
	task_name = a_name;	
    17b2:	c9 a2       	std	Y+33, r12	; 0x21
    17b4:	da a2       	std	Y+34, r13	; 0x22
}
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	df 90       	pop	r13
    17c4:	cf 90       	pop	r12
    17c6:	08 95       	ret

000017c8 <_ZN9task_userC1EPKchjP8emstream>:
	// Show how the timer/counter is set up to cause RTOS timer ticks
	*p_serial << PMS (", TCC0CCA=") << TCC0.CCA << endl << endl;

	// Have the tasks print their status
	print_task_list (p_serial);
}
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	ec 01       	movw	r28, r24
    17d6:	7b 01       	movw	r14, r22
    17d8:	0e 94 53 24 	call	0x48a6	; 0x48a6 <_ZN8frt_taskC1EPKchjP8emstream>
    17dc:	8b e2       	ldi	r24, 0x2B	; 43
    17de:	90 e2       	ldi	r25, 0x20	; 32
    17e0:	88 83       	st	Y, r24
    17e2:	99 83       	std	Y+1, r25	; 0x01
    17e4:	fe 01       	movw	r30, r28
    17e6:	e0 5e       	subi	r30, 0xE0	; 224
    17e8:	fe 4f       	sbci	r31, 0xFE	; 254
    17ea:	e0 82       	st	Z, r14
    17ec:	f1 82       	std	Z+1, r15	; 0x01
    17ee:	ce 5e       	subi	r28, 0xEE	; 238
    17f0:	de 4f       	sbci	r29, 0xFE	; 254
    17f2:	18 82       	st	Y, r1
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	1f 91       	pop	r17
    17fa:	0f 91       	pop	r16
    17fc:	ff 90       	pop	r15
    17fe:	ef 90       	pop	r14
    1800:	08 95       	ret

00001802 <_ZN9task_user10str_to_intEv>:
    1802:	bf 92       	push	r11
    1804:	cf 92       	push	r12
    1806:	df 92       	push	r13
    1808:	ef 92       	push	r14
    180a:	ff 92       	push	r15
    180c:	0f 93       	push	r16
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	fc 01       	movw	r30, r24
    1816:	dc 01       	movw	r26, r24
    1818:	ae 5e       	subi	r26, 0xEE	; 238
    181a:	be 4f       	sbci	r27, 0xFE	; 254
    181c:	2c 91       	ld	r18, X
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	21 50       	subi	r18, 0x01	; 1
    1822:	31 09       	sbc	r19, r1
    1824:	12 16       	cp	r1, r18
    1826:	13 06       	cpc	r1, r19
    1828:	a4 f5       	brge	.+104    	; 0x1892 <_ZN9task_user10str_to_intEv+0x90>
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	b1 2c       	mov	r11, r1
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	cb 01       	movw	r24, r22
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	aa 1f       	adc	r26, r26
    1840:	bb 1f       	adc	r27, r27
    1842:	6c 01       	movw	r12, r24
    1844:	7d 01       	movw	r14, r26
    1846:	cc 0c       	add	r12, r12
    1848:	dd 1c       	adc	r13, r13
    184a:	ee 1c       	adc	r14, r14
    184c:	ff 1c       	adc	r15, r15
    184e:	cc 0c       	add	r12, r12
    1850:	dd 1c       	adc	r13, r13
    1852:	ee 1c       	adc	r14, r14
    1854:	ff 1c       	adc	r15, r15
    1856:	8c 0d       	add	r24, r12
    1858:	9d 1d       	adc	r25, r13
    185a:	ae 1d       	adc	r26, r14
    185c:	bf 1d       	adc	r27, r15
    185e:	4e 0f       	add	r20, r30
    1860:	5f 1f       	adc	r21, r31
    1862:	ea 01       	movw	r28, r20
    1864:	4a 89       	ldd	r20, Y+18	; 0x12
    1866:	50 e0       	ldi	r21, 0x00	; 0
    1868:	40 53       	subi	r20, 0x30	; 48
    186a:	51 09       	sbc	r21, r1
    186c:	05 2e       	mov	r0, r21
    186e:	00 0c       	add	r0, r0
    1870:	66 0b       	sbc	r22, r22
    1872:	77 0b       	sbc	r23, r23
    1874:	7a 01       	movw	r14, r20
    1876:	8b 01       	movw	r16, r22
    1878:	e8 0e       	add	r14, r24
    187a:	f9 1e       	adc	r15, r25
    187c:	0a 1f       	adc	r16, r26
    187e:	1b 1f       	adc	r17, r27
    1880:	c8 01       	movw	r24, r16
    1882:	b7 01       	movw	r22, r14
    1884:	b3 94       	inc	r11
    1886:	4b 2d       	mov	r20, r11
    1888:	50 e0       	ldi	r21, 0x00	; 0
    188a:	42 17       	cp	r20, r18
    188c:	53 07       	cpc	r21, r19
    188e:	9c f2       	brlt	.-90     	; 0x1836 <_ZN9task_user10str_to_intEv+0x34>
    1890:	03 c0       	rjmp	.+6      	; 0x1898 <_ZN9task_user10str_to_intEv+0x96>
    1892:	60 e0       	ldi	r22, 0x00	; 0
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	cb 01       	movw	r24, r22
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	cf 90       	pop	r12
    18a8:	bf 90       	pop	r11
    18aa:	08 95       	ret

000018ac <_ZN9task_user12reset_deviceEv>:
    18ac:	6a e0       	ldi	r22, 0x0A	; 10
    18ae:	fc 01       	movw	r30, r24
    18b0:	86 81       	ldd	r24, Z+6	; 0x06
    18b2:	97 81       	ldd	r25, Z+7	; 0x07
    18b4:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    18b8:	ec 01       	movw	r28, r24
    18ba:	6d ee       	ldi	r22, 0xED	; 237
    18bc:	79 e0       	ldi	r23, 0x09	; 9
    18be:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    18c2:	66 e0       	ldi	r22, 0x06	; 6
    18c4:	ce 01       	movw	r24, r28
    18c6:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    18ca:	93 e0       	ldi	r25, 0x03	; 3
    18cc:	88 ed       	ldi	r24, 0xD8	; 216
    18ce:	08 b6       	in	r0, 0x38	; 56
    18d0:	18 be       	out	0x38, r1	; 56
    18d2:	84 bf       	out	0x34, r24	; 52
    18d4:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    18d8:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    18dc:	81 fd       	sbrc	r24, 1
    18de:	fc cf       	rjmp	.-8      	; 0x18d8 <_ZN9task_user12reset_deviceEv+0x2c>
    18e0:	08 be       	out	0x38, r0	; 56
    18e2:	ff cf       	rjmp	.-2      	; 0x18e2 <_ZN9task_user12reset_deviceEv+0x36>

000018e4 <_ZN9task_user3runEv>:
/** This task interacts with the user by transmitting and receiving bytes over USB to 
 *  and from a computer.
 */

void task_user::run (void)
{
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <_ZN9task_user3runEv+0x6>
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <_ZN9task_user3runEv+0x8>
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	9a 83       	std	Y+2, r25	; 0x02
			// coordinates of the device and then activates the device upon the user's command.
            case (1):
				if (p_serial->check_for_char ())        // If the user typed a
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
					atoi_buf[atoi_index] = char_in;
    18f4:	8c 01       	movw	r16, r24
    18f6:	0e 5e       	subi	r16, 0xEE	; 238
    18f8:	1e 4f       	sbci	r17, 0xFE	; 254
						*p_serial << endl;
						break;
						
						case (','):
						*p_serial << char_in;
						conv_int = str_to_int();
    18fa:	7c 01       	movw	r14, r24
    18fc:	8d ee       	ldi	r24, 0xED	; 237
    18fe:	e8 1a       	sub	r14, r24
    1900:	8e ef       	ldi	r24, 0xFE	; 254
    1902:	f8 0a       	sbc	r15, r24
						location_queue->put(conv_int);
    1904:	89 80       	ldd	r8, Y+1	; 0x01
    1906:	9a 80       	ldd	r9, Y+2	; 0x02
    1908:	99 ee       	ldi	r25, 0xE9	; 233
    190a:	89 1a       	sub	r8, r25
    190c:	9e ef       	ldi	r25, 0xFE	; 254
    190e:	99 0a       	sbc	r9, r25
							}
							
							break;
							
						case ('s'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    1910:	a9 80       	ldd	r10, Y+1	; 0x01
    1912:	ba 80       	ldd	r11, Y+2	; 0x02
    1914:	a3 ee       	ldi	r26, 0xE3	; 227
    1916:	aa 1a       	sub	r10, r26
    1918:	ae ef       	ldi	r26, 0xFE	; 254
    191a:	ba 0a       	sbc	r11, r26
							break;
							
						case ('n'):
							*p_serial << PMS ("Sensor sample size set to:") << endl;
							atoi_index = 0;
							data_config = &sensor_sample_number;
    191c:	69 80       	ldd	r6, Y+1	; 0x01
    191e:	7a 80       	ldd	r7, Y+2	; 0x02
    1920:	b7 ee       	ldi	r27, 0xE7	; 231
    1922:	6b 1a       	sub	r6, r27
    1924:	be ef       	ldi	r27, 0xFE	; 254
    1926:	7b 0a       	sbc	r7, r27
						case (','):
							*p_serial << char_in;
							
							conv_int = str_to_int();
							conv_int = conv_int * 1000;
							v_config->put(conv_int);
    1928:	49 80       	ldd	r4, Y+1	; 0x01
    192a:	5a 80       	ldd	r5, Y+2	; 0x02
    192c:	e5 ee       	ldi	r30, 0xE5	; 229
    192e:	4e 1a       	sub	r4, r30
    1930:	ee ef       	ldi	r30, 0xFE	; 254
    1932:	5e 0a       	sbc	r5, r30
							transition_to(0);
							break;
							
						case('a'):
							conv_int = str_to_int();
							if (queue_indicator)
    1934:	29 80       	ldd	r2, Y+1	; 0x01
    1936:	3a 80       	ldd	r3, Y+2	; 0x02
    1938:	fe ed       	ldi	r31, 0xDE	; 222
    193a:	2f 1a       	sub	r2, r31
    193c:	fe ef       	ldi	r31, 0xFE	; 254
    193e:	3f 0a       	sbc	r3, r31
							}
							else
							{
								if (data_config == &ramp_run_span)
								{
									conv_int = 100 / conv_int;
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	8d 83       	std	Y+5, r24	; 0x05
    1946:	9e 83       	std	Y+6, r25	; 0x06
			//*p_serial << PMS ("interrupt reset") << endl;
			//reset_device();
		//}
		
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
    1948:	ad 81       	ldd	r26, Y+5	; 0x05
    194a:	be 81       	ldd	r27, Y+6	; 0x06
    194c:	1c 96       	adiw	r26, 0x0c	; 12
    194e:	8c 91       	ld	r24, X
    1950:	1c 97       	sbiw	r26, 0x0c	; 12
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	09 f4       	brne	.+2      	; 0x1958 <_ZN9task_user3runEv+0x74>
    1956:	fd c0       	rjmp	.+506    	; 0x1b52 <_ZN9task_user3runEv+0x26e>
    1958:	38 f0       	brcs	.+14     	; 0x1968 <_ZN9task_user3runEv+0x84>
    195a:	82 30       	cpi	r24, 0x02	; 2
    195c:	09 f4       	brne	.+2      	; 0x1960 <_ZN9task_user3runEv+0x7c>
    195e:	cf c2       	rjmp	.+1438   	; 0x1efe <_ZN9task_user3runEv+0x61a>
    1960:	83 30       	cpi	r24, 0x03	; 3
    1962:	09 f4       	brne	.+2      	; 0x1966 <_ZN9task_user3runEv+0x82>
    1964:	9b c3       	rjmp	.+1846   	; 0x209c <_ZN9task_user3runEv+0x7b8>
    1966:	c1 c5       	rjmp	.+2946   	; 0x24ea <_ZN9task_user3runEv+0xc06>
		{
			// In Case 0, the interface is in the main menu.
			case (0):
			
				if (p_serial->check_for_char ())        // If the user typed a
    1968:	ed 81       	ldd	r30, Y+5	; 0x05
    196a:	fe 81       	ldd	r31, Y+6	; 0x06
    196c:	86 81       	ldd	r24, Z+6	; 0x06
    196e:	97 81       	ldd	r25, Z+7	; 0x07
    1970:	dc 01       	movw	r26, r24
    1972:	ed 91       	ld	r30, X+
    1974:	fc 91       	ld	r31, X
    1976:	04 80       	ldd	r0, Z+4	; 0x04
    1978:	f5 81       	ldd	r31, Z+5	; 0x05
    197a:	e0 2d       	mov	r30, r0
    197c:	19 95       	eicall
    197e:	88 23       	and	r24, r24
    1980:	09 f4       	brne	.+2      	; 0x1984 <_ZN9task_user3runEv+0xa0>
    1982:	d3 c5       	rjmp	.+2982   	; 0x252a <_ZN9task_user3runEv+0xc46>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    1984:	ed 81       	ldd	r30, Y+5	; 0x05
    1986:	fe 81       	ldd	r31, Y+6	; 0x06
    1988:	86 81       	ldd	r24, Z+6	; 0x06
    198a:	97 81       	ldd	r25, Z+7	; 0x07
    198c:	dc 01       	movw	r26, r24
    198e:	ed 91       	ld	r30, X+
    1990:	fc 91       	ld	r31, X
    1992:	06 80       	ldd	r0, Z+6	; 0x06
    1994:	f7 81       	ldd	r31, Z+7	; 0x07
    1996:	e0 2d       	mov	r30, r0
    1998:	19 95       	eicall
					atoi_buf[atoi_index] = char_in;
    199a:	f8 01       	movw	r30, r16
    199c:	20 81       	ld	r18, Z
    199e:	ed 81       	ldd	r30, Y+5	; 0x05
    19a0:	fe 81       	ldd	r31, Y+6	; 0x06
    19a2:	e2 0f       	add	r30, r18
    19a4:	f1 1d       	adc	r31, r1
    19a6:	82 8b       	std	Z+18, r24	; 0x12
					atoi_index++;
    19a8:	2f 5f       	subi	r18, 0xFF	; 255
    19aa:	d8 01       	movw	r26, r16
    19ac:	2c 93       	st	X, r18
					switch(char_in)
    19ae:	99 27       	eor	r25, r25
    19b0:	fc 01       	movw	r30, r24
    19b2:	e1 56       	subi	r30, 0x61	; 97
    19b4:	f1 09       	sbc	r31, r1
    19b6:	e3 31       	cpi	r30, 0x13	; 19
    19b8:	f1 05       	cpc	r31, r1
    19ba:	08 f0       	brcs	.+2      	; 0x19be <_ZN9task_user3runEv+0xda>
    19bc:	b6 c5       	rjmp	.+2924   	; 0x252a <_ZN9task_user3runEv+0xc46>
    19be:	88 27       	eor	r24, r24
    19c0:	e2 50       	subi	r30, 0x02	; 2
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	8f 4f       	sbci	r24, 0xFF	; 255
    19c6:	0c 94 8f 2e 	jmp	0x5d1e	; 0x5d1e <__tablejump2__>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	0f 92       	push	r0
			the_data = new_data;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	80 93 dc 20 	sts	0x20DC, r24	; 0x8020dc <configuration_mode>
			portEXIT_CRITICAL ();
    19d6:	0f 90       	pop	r0
    19d8:	0f be       	out	0x3f, r0	; 63
					{
						case(CMD_CONFIG_MODE):
						
							//print_config_mode_menu();
							configuration_mode.put(true);
							*p_serial << PMS ("Entering config mode") << endl;
    19da:	6a e0       	ldi	r22, 0x0A	; 10
    19dc:	ed 81       	ldd	r30, Y+5	; 0x05
    19de:	fe 81       	ldd	r31, Y+6	; 0x06
    19e0:	86 81       	ldd	r24, Z+6	; 0x06
    19e2:	97 81       	ldd	r25, Z+7	; 0x07
    19e4:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    19e8:	6c 01       	movw	r12, r24
    19ea:	68 ed       	ldi	r22, 0xD8	; 216
    19ec:	79 e0       	ldi	r23, 0x09	; 9
    19ee:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    19f2:	66 e0       	ldi	r22, 0x06	; 6
    19f4:	c6 01       	movw	r24, r12
    19f6:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
							transition_to(3);
    19fa:	63 e0       	ldi	r22, 0x03	; 3
    19fc:	8d 81       	ldd	r24, Y+5	; 0x05
    19fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1a00:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN8frt_task13transition_toEh>
							break;
    1a04:	92 c5       	rjmp	.+2852   	; 0x252a <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	0f 92       	push	r0
			the_data = new_data;
    1a0c:	10 92 d8 20 	sts	0x20D8, r1	; 0x8020d8 <xmotor_on>
			portEXIT_CRITICAL ();
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	0f 92       	push	r0
			the_data = new_data;
    1a1a:	10 92 d7 20 	sts	0x20D7, r1	; 0x8020d7 <ymotor_on>
			portEXIT_CRITICAL ();
    1a1e:	0f 90       	pop	r0
    1a20:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	0f 92       	push	r0
			the_data = new_data;
    1a28:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <__data_end>
			portEXIT_CRITICAL ();
    1a2c:	0f 90       	pop	r0
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	7c c5       	rjmp	.+2808   	; 0x252a <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	0f 92       	push	r0
			the_data = new_data;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <drawing_mode>
			portEXIT_CRITICAL ();
    1a3e:	0f 90       	pop	r0
    1a40:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	0f 92       	push	r0
			the_data = new_data;
    1a48:	10 92 4f 21 	sts	0x214F, r1	; 0x80214f <sensor_delay>
    1a4c:	10 92 50 21 	sts	0x2150, r1	; 0x802150 <sensor_delay+0x1>
    1a50:	10 92 51 21 	sts	0x2151, r1	; 0x802151 <sensor_delay+0x2>
    1a54:	10 92 52 21 	sts	0x2152, r1	; 0x802152 <sensor_delay+0x3>
			portEXIT_CRITICAL ();
    1a58:	0f 90       	pop	r0
    1a5a:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	0f 92       	push	r0
			the_data = new_data;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a0 e0       	ldi	r26, 0x00	; 0
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	80 93 54 21 	sts	0x2154, r24	; 0x802154 <sensor_sample_number>
    1a6e:	90 93 55 21 	sts	0x2155, r25	; 0x802155 <sensor_sample_number+0x1>
    1a72:	a0 93 56 21 	sts	0x2156, r26	; 0x802156 <sensor_sample_number+0x2>
    1a76:	b0 93 57 21 	sts	0x2157, r27	; 0x802157 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    1a7a:	0f 90       	pop	r0
    1a7c:	0f be       	out	0x3f, r0	; 63
							
						case('e'):
							drawing_mode.put(true);
							sensor_delay.put(0);
							sensor_sample_number.put(1);
							transition_to(1);
    1a7e:	61 e0       	ldi	r22, 0x01	; 1
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN8frt_task13transition_toEh>
							break ;
    1a88:	50 c5       	rjmp	.+2720   	; 0x252a <_ZN9task_user3runEv+0xc46>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1a90:	0f 90       	pop	r0
    1a92:	0f be       	out	0x3f, r0	; 63
							
						case('i'):
							if (!(incremental_mode.get()))
    1a94:	80 91 d9 20 	lds	r24, 0x20D9	; 0x8020d9 <incremental_mode>
    1a98:	81 11       	cpse	r24, r1
    1a9a:	47 c5       	rjmp	.+2702   	; 0x252a <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	0f 92       	push	r0
			the_data = new_data;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	80 93 d9 20 	sts	0x20D9, r24	; 0x8020d9 <incremental_mode>
			portEXIT_CRITICAL ();
    1aa8:	0f 90       	pop	r0
    1aaa:	0f be       	out	0x3f, r0	; 63
							{
								incremental_mode.put(true);
								transition_to(1);
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab2:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN8frt_task13transition_toEh>
    1ab6:	39 c5       	rjmp	.+2674   	; 0x252a <_ZN9task_user3runEv+0xc46>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1abe:	0f 90       	pop	r0
    1ac0:	0f be       	out	0x3f, r0	; 63
							
							break;
							
						case('c'):
						
							if (!(coordinate_mode.get()))
    1ac2:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    1ac6:	81 11       	cpse	r24, r1
    1ac8:	30 c5       	rjmp	.+2656   	; 0x252a <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	0f 92       	push	r0
			the_data = new_data;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	80 93 db 20 	sts	0x20DB, r24	; 0x8020db <coordinate_mode>
			portEXIT_CRITICAL ();
    1ad6:	0f 90       	pop	r0
    1ad8:	0f be       	out	0x3f, r0	; 63
							{
								coordinate_mode.put(true);
								transition_to(1);
    1ada:	61 e0       	ldi	r22, 0x01	; 1
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae0:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN8frt_task13transition_toEh>
    1ae4:	22 c5       	rjmp	.+2628   	; 0x252a <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	0f 92       	push	r0
			the_data = new_data;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	80 93 da 20 	sts	0x20DA, r24	; 0x8020da <direct_mode>
			portEXIT_CRITICAL ();
    1af2:	0f 90       	pop	r0
    1af4:	0f be       	out	0x3f, r0	; 63
						
						case('d'):
						
							//print_dir_mode_menu();
							direct_mode.put(true);
							transition_to(2);
    1af6:	62 e0       	ldi	r22, 0x02	; 2
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN8frt_task13transition_toEh>
							break;
    1b00:	14 c5       	rjmp	.+2600   	; 0x252a <_ZN9task_user3runEv+0xc46>
    1b02:	ad 81       	ldd	r26, Y+5	; 0x05
    1b04:	be 81       	ldd	r27, Y+6	; 0x06
							
						case('r'):
							
							reset_device();
    1b06:	cd 01       	movw	r24, r26
    1b08:	0e 94 56 0c 	call	0x18ac	; 0x18ac <_ZN9task_user12reset_deviceEv>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	0f 92       	push	r0
			the_data = new_data;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	80 93 58 21 	sts	0x2158, r24	; 0x802158 <sensor_reading>
			portEXIT_CRITICAL ();
    1b18:	0f 90       	pop	r0
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	06 c5       	rjmp	.+2572   	; 0x252a <_ZN9task_user3runEv+0xc46>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1b24:	0f 90       	pop	r0
    1b26:	0f be       	out	0x3f, r0	; 63
							sensor_reading.put(true);
							break;
							
						case('p'):
							
							if(!(pause.get()))
    1b28:	80 91 47 21 	lds	r24, 0x2147	; 0x802147 <pause>
    1b2c:	81 11       	cpse	r24, r1
    1b2e:	09 c0       	rjmp	.+18     	; 0x1b42 <_ZN9task_user3runEv+0x25e>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	0f 92       	push	r0
			the_data = new_data;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	80 93 47 21 	sts	0x2147, r24	; 0x802147 <pause>
			portEXIT_CRITICAL ();
    1b3c:	0f 90       	pop	r0
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	f4 c4       	rjmp	.+2536   	; 0x252a <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	0f 92       	push	r0
			the_data = new_data;
    1b48:	10 92 47 21 	sts	0x2147, r1	; 0x802147 <pause>
			portEXIT_CRITICAL ();
    1b4c:	0f 90       	pop	r0
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	ec c4       	rjmp	.+2520   	; 0x252a <_ZN9task_user3runEv+0xc46>
				
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In Case 1, the UI is in Coordinate Mode. It waits for the user to specify the x, y, z 
			// coordinates of the device and then activates the device upon the user's command.
            case (1):
				if (p_serial->check_for_char ())        // If the user typed a
    1b52:	ed 81       	ldd	r30, Y+5	; 0x05
    1b54:	fe 81       	ldd	r31, Y+6	; 0x06
    1b56:	86 81       	ldd	r24, Z+6	; 0x06
    1b58:	97 81       	ldd	r25, Z+7	; 0x07
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	ed 91       	ld	r30, X+
    1b5e:	fc 91       	ld	r31, X
    1b60:	04 80       	ldd	r0, Z+4	; 0x04
    1b62:	f5 81       	ldd	r31, Z+5	; 0x05
    1b64:	e0 2d       	mov	r30, r0
    1b66:	19 95       	eicall
    1b68:	88 23       	and	r24, r24
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <_ZN9task_user3runEv+0x28a>
    1b6c:	aa c1       	rjmp	.+852    	; 0x1ec2 <_ZN9task_user3runEv+0x5de>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    1b6e:	ed 81       	ldd	r30, Y+5	; 0x05
    1b70:	fe 81       	ldd	r31, Y+6	; 0x06
    1b72:	86 81       	ldd	r24, Z+6	; 0x06
    1b74:	97 81       	ldd	r25, Z+7	; 0x07
    1b76:	dc 01       	movw	r26, r24
    1b78:	ed 91       	ld	r30, X+
    1b7a:	fc 91       	ld	r31, X
    1b7c:	06 80       	ldd	r0, Z+6	; 0x06
    1b7e:	f7 81       	ldd	r31, Z+7	; 0x07
    1b80:	e0 2d       	mov	r30, r0
    1b82:	19 95       	eicall
    1b84:	bc 01       	movw	r22, r24
					atoi_buf[atoi_index] = char_in;
    1b86:	f8 01       	movw	r30, r16
    1b88:	80 81       	ld	r24, Z
    1b8a:	ed 81       	ldd	r30, Y+5	; 0x05
    1b8c:	fe 81       	ldd	r31, Y+6	; 0x06
    1b8e:	e8 0f       	add	r30, r24
    1b90:	f1 1d       	adc	r31, r1
    1b92:	62 8b       	std	Z+18, r22	; 0x12
					atoi_index++;
    1b94:	8f 5f       	subi	r24, 0xFF	; 255
    1b96:	d8 01       	movw	r26, r16
    1b98:	8c 93       	st	X, r24
					switch (char_in)
    1b9a:	fb 01       	movw	r30, r22
    1b9c:	ff 27       	eor	r31, r31
    1b9e:	bc 97       	sbiw	r30, 0x2c	; 44
    1ba0:	ef 34       	cpi	r30, 0x4F	; 79
    1ba2:	f1 05       	cpc	r31, r1
    1ba4:	08 f0       	brcs	.+2      	; 0x1ba8 <_ZN9task_user3runEv+0x2c4>
    1ba6:	c1 c4       	rjmp	.+2434   	; 0x252a <_ZN9task_user3runEv+0xc46>
    1ba8:	88 27       	eor	r24, r24
    1baa:	ef 5e       	subi	r30, 0xEF	; 239
    1bac:	fe 4f       	sbci	r31, 0xFE	; 254
    1bae:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb0:	0c 94 8f 2e 	jmp	0x5d1e	; 0x5d1e <__tablejump2__>
    1bb4:	ed 81       	ldd	r30, Y+5	; 0x05
    1bb6:	fe 81       	ldd	r31, Y+6	; 0x06
					{
						case('r'):
						
							reset_device();
    1bb8:	cf 01       	movw	r24, r30
    1bba:	0e 94 56 0c 	call	0x18ac	; 0x18ac <_ZN9task_user12reset_deviceEv>
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    1bbe:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <xlocations+0x4>
    1bc2:	90 91 f6 20 	lds	r25, 0x20F6	; 0x8020f6 <xlocations+0x5>
    1bc6:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <uxQueueMessagesWaiting>
    1bca:	d8 2e       	mov	r13, r24
    1bcc:	80 91 eb 20 	lds	r24, 0x20EB	; 0x8020eb <ylocations+0x4>
    1bd0:	90 91 ec 20 	lds	r25, 0x20EC	; 0x8020ec <ylocations+0x5>
    1bd4:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <uxQueueMessagesWaiting>
							break;
						
						case ('e'):
						//print_main_menu();
						//coordinate_mode.put(false);
						if (xlocations.num_items_in() == ylocations.num_items_in() && xlocations.num_items_in() == zlocations.num_items_in())
    1bd8:	d8 12       	cpse	r13, r24
    1bda:	45 c0       	rjmp	.+138    	; 0x1c66 <_ZN9task_user3runEv+0x382>
    1bdc:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <xlocations+0x4>
    1be0:	90 91 f6 20 	lds	r25, 0x20F6	; 0x8020f6 <xlocations+0x5>
    1be4:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <uxQueueMessagesWaiting>
    1be8:	d8 2e       	mov	r13, r24
    1bea:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <zlocations+0x4>
    1bee:	90 91 e2 20 	lds	r25, 0x20E2	; 0x8020e2 <zlocations+0x5>
    1bf2:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <uxQueueMessagesWaiting>
    1bf6:	d8 12       	cpse	r13, r24
    1bf8:	36 c0       	rjmp	.+108    	; 0x1c66 <_ZN9task_user3runEv+0x382>
    1bfa:	80 91 f5 20 	lds	r24, 0x20F5	; 0x8020f5 <xlocations+0x4>
    1bfe:	90 91 f6 20 	lds	r25, 0x20F6	; 0x8020f6 <xlocations+0x5>
    1c02:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <uxQueueMessagesWaiting>
    1c06:	c8 2e       	mov	r12, r24
    1c08:	d1 2c       	mov	r13, r1
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	0f 92       	push	r0
			the_data = new_data;
    1c10:	c0 92 48 21 	sts	0x2148, r12	; 0x802148 <total_nodes>
    1c14:	d0 92 49 21 	sts	0x2149, r13	; 0x802149 <total_nodes+0x1>
			portEXIT_CRITICAL ();
    1c18:	0f 90       	pop	r0
    1c1a:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1c22:	0f 90       	pop	r0
    1c24:	0f be       	out	0x3f, r0	; 63
						{
							total_nodes.put(xlocations.num_items_in());
							*p_serial << PMS ("Total nodes: ") << total_nodes.get() << endl;
    1c26:	6a e0       	ldi	r22, 0x0A	; 10
    1c28:	ad 81       	ldd	r26, Y+5	; 0x05
    1c2a:	be 81       	ldd	r27, Y+6	; 0x06
    1c2c:	16 96       	adiw	r26, 0x06	; 6
    1c2e:	8d 91       	ld	r24, X+
    1c30:	9c 91       	ld	r25, X
    1c32:	17 97       	sbiw	r26, 0x07	; 7
    1c34:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	9a 83       	std	Y+2, r25	; 0x02
    1c3c:	6a ec       	ldi	r22, 0xCA	; 202
    1c3e:	79 e0       	ldi	r23, 0x09	; 9
    1c40:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    1c44:	b6 01       	movw	r22, r12
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	0e 94 96 28 	call	0x512c	; 0x512c <_ZN8emstreamlsEj>
    1c4e:	66 e0       	ldi	r22, 0x06	; 6
    1c50:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	0f 92       	push	r0
			the_data = new_data;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	80 93 4a 21 	sts	0x214A, r24	; 0x80214a <next_node>
			portEXIT_CRITICAL ();
    1c60:	0f 90       	pop	r0
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	10 c0       	rjmp	.+32     	; 0x1c86 <_ZN9task_user3runEv+0x3a2>
							next_node.put(true);
						}
						else
						{
							*p_serial << PMS ("Error: Unequal axis coordinate vectors.") << endl;
    1c66:	6a e0       	ldi	r22, 0x0A	; 10
    1c68:	ed 81       	ldd	r30, Y+5	; 0x05
    1c6a:	fe 81       	ldd	r31, Y+6	; 0x06
    1c6c:	86 81       	ldd	r24, Z+6	; 0x06
    1c6e:	97 81       	ldd	r25, Z+7	; 0x07
    1c70:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    1c74:	6c 01       	movw	r12, r24
    1c76:	62 ea       	ldi	r22, 0xA2	; 162
    1c78:	79 e0       	ldi	r23, 0x09	; 9
    1c7a:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    1c7e:	66 e0       	ldi	r22, 0x06	; 6
    1c80:	c6 01       	movw	r24, r12
    1c82:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
						}
						atoi_index = 0;
    1c86:	d8 01       	movw	r26, r16
    1c88:	1c 92       	st	X, r1
						transition_to(0);
    1c8a:	60 e0       	ldi	r22, 0x00	; 0
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN8frt_task13transition_toEh>
						break;
    1c94:	4a c4       	rjmp	.+2196   	; 0x252a <_ZN9task_user3runEv+0xc46>
						
						// This character acts as an enter which the python file can more easily send.
						case('a'):
						conv_int = str_to_int();
    1c96:	8d 81       	ldd	r24, Y+5	; 0x05
    1c98:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9a:	0e 94 01 0c 	call	0x1802	; 0x1802 <_ZN9task_user10str_to_intEv>
    1c9e:	f7 01       	movw	r30, r14
    1ca0:	60 83       	st	Z, r22
    1ca2:	71 83       	std	Z+1, r23	; 0x01
    1ca4:	82 83       	std	Z+2, r24	; 0x02
    1ca6:	93 83       	std	Z+3, r25	; 0x03
						location_queue->put(conv_int);
    1ca8:	d4 01       	movw	r26, r8
    1caa:	8d 91       	ld	r24, X+
    1cac:	9c 91       	ld	r25, X
    1cae:	dc 01       	movw	r26, r24
    1cb0:	ed 91       	ld	r30, X+
    1cb2:	fc 91       	ld	r31, X
    1cb4:	01 90       	ld	r0, Z+
    1cb6:	f0 81       	ld	r31, Z
    1cb8:	e0 2d       	mov	r30, r0
    1cba:	b7 01       	movw	r22, r14
    1cbc:	19 95       	eicall
						atoi_index = 0;
    1cbe:	f8 01       	movw	r30, r16
    1cc0:	10 82       	st	Z, r1
						//*p_serial << endl << PMS ("Locations stored in memory location: ") << location_queue << endl;
						break;
    1cc2:	33 c4       	rjmp	.+2150   	; 0x252a <_ZN9task_user3runEv+0xc46>
						
						case ('x'):
						atoi_index = 0;
    1cc4:	d8 01       	movw	r26, r16
    1cc6:	1c 92       	st	X, r1
						*p_serial << endl << PMS ("Receiving X-locations.") << endl;
    1cc8:	66 e0       	ldi	r22, 0x06	; 6
    1cca:	ed 81       	ldd	r30, Y+5	; 0x05
    1ccc:	fe 81       	ldd	r31, Y+6	; 0x06
    1cce:	86 81       	ldd	r24, Z+6	; 0x06
    1cd0:	97 81       	ldd	r25, Z+7	; 0x07
    1cd2:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    1cd6:	6a e0       	ldi	r22, 0x0A	; 10
    1cd8:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    1cdc:	6c 01       	movw	r12, r24
    1cde:	6b e8       	ldi	r22, 0x8B	; 139
    1ce0:	79 e0       	ldi	r23, 0x09	; 9
    1ce2:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    1ce6:	66 e0       	ldi	r22, 0x06	; 6
    1ce8:	c6 01       	movw	r24, r12
    1cea:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
						location_queue = &xlocations;
    1cee:	e1 ef       	ldi	r30, 0xF1	; 241
    1cf0:	f0 e2       	ldi	r31, 0x20	; 32
    1cf2:	d4 01       	movw	r26, r8
    1cf4:	ed 93       	st	X+, r30
    1cf6:	fc 93       	st	X, r31
						break;
    1cf8:	18 c4       	rjmp	.+2096   	; 0x252a <_ZN9task_user3runEv+0xc46>
						
						case ('y'):
						atoi_index = 0;
    1cfa:	d8 01       	movw	r26, r16
    1cfc:	1c 92       	st	X, r1
						*p_serial << endl << PMS ("Receiving Y-locations.") << endl;
    1cfe:	66 e0       	ldi	r22, 0x06	; 6
    1d00:	ed 81       	ldd	r30, Y+5	; 0x05
    1d02:	fe 81       	ldd	r31, Y+6	; 0x06
    1d04:	86 81       	ldd	r24, Z+6	; 0x06
    1d06:	97 81       	ldd	r25, Z+7	; 0x07
    1d08:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    1d0c:	6a e0       	ldi	r22, 0x0A	; 10
    1d0e:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    1d12:	6c 01       	movw	r12, r24
    1d14:	64 e7       	ldi	r22, 0x74	; 116
    1d16:	79 e0       	ldi	r23, 0x09	; 9
    1d18:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    1d1c:	66 e0       	ldi	r22, 0x06	; 6
    1d1e:	c6 01       	movw	r24, r12
    1d20:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
						location_queue = &ylocations;
    1d24:	e7 ee       	ldi	r30, 0xE7	; 231
    1d26:	f0 e2       	ldi	r31, 0x20	; 32
    1d28:	d4 01       	movw	r26, r8
    1d2a:	ed 93       	st	X+, r30
    1d2c:	fc 93       	st	X, r31
						break;
    1d2e:	fd c3       	rjmp	.+2042   	; 0x252a <_ZN9task_user3runEv+0xc46>
						
						case ('z'):
						atoi_index = 0;
    1d30:	d8 01       	movw	r26, r16
    1d32:	1c 92       	st	X, r1
						*p_serial << endl << PMS ("Receiving Z-locations.") << endl;
    1d34:	66 e0       	ldi	r22, 0x06	; 6
    1d36:	ed 81       	ldd	r30, Y+5	; 0x05
    1d38:	fe 81       	ldd	r31, Y+6	; 0x06
    1d3a:	86 81       	ldd	r24, Z+6	; 0x06
    1d3c:	97 81       	ldd	r25, Z+7	; 0x07
    1d3e:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    1d42:	6a e0       	ldi	r22, 0x0A	; 10
    1d44:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    1d48:	6c 01       	movw	r12, r24
    1d4a:	6d e5       	ldi	r22, 0x5D	; 93
    1d4c:	79 e0       	ldi	r23, 0x09	; 9
    1d4e:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    1d52:	66 e0       	ldi	r22, 0x06	; 6
    1d54:	c6 01       	movw	r24, r12
    1d56:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
						location_queue = &zlocations;
    1d5a:	ed ed       	ldi	r30, 0xDD	; 221
    1d5c:	f0 e2       	ldi	r31, 0x20	; 32
    1d5e:	d4 01       	movw	r26, r8
    1d60:	ed 93       	st	X+, r30
    1d62:	fc 93       	st	X, r31
						break;
    1d64:	e2 c3       	rjmp	.+1988   	; 0x252a <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	0f 92       	push	r0
			the_data = new_data;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <initialization_complete>
			portEXIT_CRITICAL ();
    1d72:	0f 90       	pop	r0
    1d74:	0f be       	out	0x3f, r0	; 63
						
						case ('g'):
						initialization_complete.put(true);
						*p_serial << endl;
    1d76:	66 e0       	ldi	r22, 0x06	; 6
    1d78:	ad 81       	ldd	r26, Y+5	; 0x05
    1d7a:	be 81       	ldd	r27, Y+6	; 0x06
    1d7c:	16 96       	adiw	r26, 0x06	; 6
    1d7e:	8d 91       	ld	r24, X+
    1d80:	9c 91       	ld	r25, X
    1d82:	17 97       	sbiw	r26, 0x07	; 7
    1d84:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
						break;
    1d88:	d0 c3       	rjmp	.+1952   	; 0x252a <_ZN9task_user3runEv+0xc46>
						
						case (','):
						*p_serial << char_in;
    1d8a:	ed 81       	ldd	r30, Y+5	; 0x05
    1d8c:	fe 81       	ldd	r31, Y+6	; 0x06
    1d8e:	86 81       	ldd	r24, Z+6	; 0x06
    1d90:	97 81       	ldd	r25, Z+7	; 0x07
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    1d92:	dc 01       	movw	r26, r24
    1d94:	ed 91       	ld	r30, X+
    1d96:	fc 91       	ld	r31, X
    1d98:	02 80       	ldd	r0, Z+2	; 0x02
    1d9a:	f3 81       	ldd	r31, Z+3	; 0x03
    1d9c:	e0 2d       	mov	r30, r0
    1d9e:	19 95       	eicall
						conv_int = str_to_int();
    1da0:	8d 81       	ldd	r24, Y+5	; 0x05
    1da2:	9e 81       	ldd	r25, Y+6	; 0x06
    1da4:	0e 94 01 0c 	call	0x1802	; 0x1802 <_ZN9task_user10str_to_intEv>
    1da8:	f7 01       	movw	r30, r14
    1daa:	60 83       	st	Z, r22
    1dac:	71 83       	std	Z+1, r23	; 0x01
    1dae:	82 83       	std	Z+2, r24	; 0x02
    1db0:	93 83       	std	Z+3, r25	; 0x03
						location_queue->put(conv_int);
    1db2:	d4 01       	movw	r26, r8
    1db4:	8d 91       	ld	r24, X+
    1db6:	9c 91       	ld	r25, X
    1db8:	dc 01       	movw	r26, r24
    1dba:	ed 91       	ld	r30, X+
    1dbc:	fc 91       	ld	r31, X
    1dbe:	01 90       	ld	r0, Z+
    1dc0:	f0 81       	ld	r31, Z
    1dc2:	e0 2d       	mov	r30, r0
    1dc4:	b7 01       	movw	r22, r14
    1dc6:	19 95       	eicall
						atoi_index = 0;
    1dc8:	f8 01       	movw	r30, r16
    1dca:	10 82       	st	Z, r1

						break;
    1dcc:	ae c3       	rjmp	.+1884   	; 0x252a <_ZN9task_user3runEv+0xc46>
						
						case('0'):
						
						*p_serial << char_in;
    1dce:	ad 81       	ldd	r26, Y+5	; 0x05
    1dd0:	be 81       	ldd	r27, Y+6	; 0x06
    1dd2:	16 96       	adiw	r26, 0x06	; 6
    1dd4:	8d 91       	ld	r24, X+
    1dd6:	9c 91       	ld	r25, X
    1dd8:	17 97       	sbiw	r26, 0x07	; 7
    1dda:	dc 01       	movw	r26, r24
    1ddc:	ed 91       	ld	r30, X+
    1dde:	fc 91       	ld	r31, X
    1de0:	02 80       	ldd	r0, Z+2	; 0x02
    1de2:	f3 81       	ldd	r31, Z+3	; 0x03
    1de4:	e0 2d       	mov	r30, r0
    1de6:	19 95       	eicall
    1de8:	a0 c3       	rjmp	.+1856   	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('1'):
						
						*p_serial << char_in;
    1dea:	ed 81       	ldd	r30, Y+5	; 0x05
    1dec:	fe 81       	ldd	r31, Y+6	; 0x06
    1dee:	86 81       	ldd	r24, Z+6	; 0x06
    1df0:	97 81       	ldd	r25, Z+7	; 0x07
    1df2:	dc 01       	movw	r26, r24
    1df4:	ed 91       	ld	r30, X+
    1df6:	fc 91       	ld	r31, X
    1df8:	02 80       	ldd	r0, Z+2	; 0x02
    1dfa:	f3 81       	ldd	r31, Z+3	; 0x03
    1dfc:	e0 2d       	mov	r30, r0
    1dfe:	19 95       	eicall
    1e00:	94 c3       	rjmp	.+1832   	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('2'):
						
						*p_serial << char_in;
    1e02:	ed 81       	ldd	r30, Y+5	; 0x05
    1e04:	fe 81       	ldd	r31, Y+6	; 0x06
    1e06:	86 81       	ldd	r24, Z+6	; 0x06
    1e08:	97 81       	ldd	r25, Z+7	; 0x07
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	ed 91       	ld	r30, X+
    1e0e:	fc 91       	ld	r31, X
    1e10:	02 80       	ldd	r0, Z+2	; 0x02
    1e12:	f3 81       	ldd	r31, Z+3	; 0x03
    1e14:	e0 2d       	mov	r30, r0
    1e16:	19 95       	eicall
    1e18:	88 c3       	rjmp	.+1808   	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('3'):
						
						*p_serial << char_in;
    1e1a:	ed 81       	ldd	r30, Y+5	; 0x05
    1e1c:	fe 81       	ldd	r31, Y+6	; 0x06
    1e1e:	86 81       	ldd	r24, Z+6	; 0x06
    1e20:	97 81       	ldd	r25, Z+7	; 0x07
    1e22:	dc 01       	movw	r26, r24
    1e24:	ed 91       	ld	r30, X+
    1e26:	fc 91       	ld	r31, X
    1e28:	02 80       	ldd	r0, Z+2	; 0x02
    1e2a:	f3 81       	ldd	r31, Z+3	; 0x03
    1e2c:	e0 2d       	mov	r30, r0
    1e2e:	19 95       	eicall
    1e30:	7c c3       	rjmp	.+1784   	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('4'):
						
						*p_serial << char_in;
    1e32:	ed 81       	ldd	r30, Y+5	; 0x05
    1e34:	fe 81       	ldd	r31, Y+6	; 0x06
    1e36:	86 81       	ldd	r24, Z+6	; 0x06
    1e38:	97 81       	ldd	r25, Z+7	; 0x07
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	ed 91       	ld	r30, X+
    1e3e:	fc 91       	ld	r31, X
    1e40:	02 80       	ldd	r0, Z+2	; 0x02
    1e42:	f3 81       	ldd	r31, Z+3	; 0x03
    1e44:	e0 2d       	mov	r30, r0
    1e46:	19 95       	eicall
    1e48:	70 c3       	rjmp	.+1760   	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('5'):
						
						*p_serial << char_in;
    1e4a:	ed 81       	ldd	r30, Y+5	; 0x05
    1e4c:	fe 81       	ldd	r31, Y+6	; 0x06
    1e4e:	86 81       	ldd	r24, Z+6	; 0x06
    1e50:	97 81       	ldd	r25, Z+7	; 0x07
    1e52:	dc 01       	movw	r26, r24
    1e54:	ed 91       	ld	r30, X+
    1e56:	fc 91       	ld	r31, X
    1e58:	02 80       	ldd	r0, Z+2	; 0x02
    1e5a:	f3 81       	ldd	r31, Z+3	; 0x03
    1e5c:	e0 2d       	mov	r30, r0
    1e5e:	19 95       	eicall
    1e60:	64 c3       	rjmp	.+1736   	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('6'):
						
						*p_serial << char_in;
    1e62:	ed 81       	ldd	r30, Y+5	; 0x05
    1e64:	fe 81       	ldd	r31, Y+6	; 0x06
    1e66:	86 81       	ldd	r24, Z+6	; 0x06
    1e68:	97 81       	ldd	r25, Z+7	; 0x07
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	ed 91       	ld	r30, X+
    1e6e:	fc 91       	ld	r31, X
    1e70:	02 80       	ldd	r0, Z+2	; 0x02
    1e72:	f3 81       	ldd	r31, Z+3	; 0x03
    1e74:	e0 2d       	mov	r30, r0
    1e76:	19 95       	eicall
    1e78:	58 c3       	rjmp	.+1712   	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('7'):
						
						*p_serial << char_in;
    1e7a:	ed 81       	ldd	r30, Y+5	; 0x05
    1e7c:	fe 81       	ldd	r31, Y+6	; 0x06
    1e7e:	86 81       	ldd	r24, Z+6	; 0x06
    1e80:	97 81       	ldd	r25, Z+7	; 0x07
    1e82:	dc 01       	movw	r26, r24
    1e84:	ed 91       	ld	r30, X+
    1e86:	fc 91       	ld	r31, X
    1e88:	02 80       	ldd	r0, Z+2	; 0x02
    1e8a:	f3 81       	ldd	r31, Z+3	; 0x03
    1e8c:	e0 2d       	mov	r30, r0
    1e8e:	19 95       	eicall
    1e90:	4c c3       	rjmp	.+1688   	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('8'):
						
						*p_serial << char_in;
    1e92:	ed 81       	ldd	r30, Y+5	; 0x05
    1e94:	fe 81       	ldd	r31, Y+6	; 0x06
    1e96:	86 81       	ldd	r24, Z+6	; 0x06
    1e98:	97 81       	ldd	r25, Z+7	; 0x07
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	ed 91       	ld	r30, X+
    1e9e:	fc 91       	ld	r31, X
    1ea0:	02 80       	ldd	r0, Z+2	; 0x02
    1ea2:	f3 81       	ldd	r31, Z+3	; 0x03
    1ea4:	e0 2d       	mov	r30, r0
    1ea6:	19 95       	eicall
    1ea8:	40 c3       	rjmp	.+1664   	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('9'):
						
						*p_serial << char_in;
    1eaa:	ed 81       	ldd	r30, Y+5	; 0x05
    1eac:	fe 81       	ldd	r31, Y+6	; 0x06
    1eae:	86 81       	ldd	r24, Z+6	; 0x06
    1eb0:	97 81       	ldd	r25, Z+7	; 0x07
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	ed 91       	ld	r30, X+
    1eb6:	fc 91       	ld	r31, X
    1eb8:	02 80       	ldd	r0, Z+2	; 0x02
    1eba:	f3 81       	ldd	r31, Z+3	; 0x03
    1ebc:	e0 2d       	mov	r30, r0
    1ebe:	19 95       	eicall
    1ec0:	34 c3       	rjmp	.+1640   	; 0x252a <_ZN9task_user3runEv+0xc46>
					}
				}

				// Check the print queue to see if another task has sent this task
				// something to be printed
				else if (print_ser_queue.check_for_char ())
    1ec2:	8b ef       	ldi	r24, 0xFB	; 251
    1ec4:	90 e2       	ldi	r25, 0x20	; 32
    1ec6:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <_ZN14frt_text_queue14check_for_charEv>
    1eca:	88 23       	and	r24, r24
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <_ZN9task_user3runEv+0x5ec>
    1ece:	2d c3       	rjmp	.+1626   	; 0x252a <_ZN9task_user3runEv+0xc46>
				{
					p_serial->putchar (print_ser_queue.getchar ());
    1ed0:	ad 81       	ldd	r26, Y+5	; 0x05
    1ed2:	be 81       	ldd	r27, Y+6	; 0x06
    1ed4:	16 96       	adiw	r26, 0x06	; 6
    1ed6:	ed 91       	ld	r30, X+
    1ed8:	fc 91       	ld	r31, X
    1eda:	17 97       	sbiw	r26, 0x07	; 7
    1edc:	01 90       	ld	r0, Z+
    1ede:	f0 81       	ld	r31, Z
    1ee0:	e0 2d       	mov	r30, r0
    1ee2:	c2 80       	ldd	r12, Z+2	; 0x02
    1ee4:	d3 80       	ldd	r13, Z+3	; 0x03
    1ee6:	8b ef       	ldi	r24, 0xFB	; 251
    1ee8:	90 e2       	ldi	r25, 0x20	; 32
    1eea:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <_ZN14frt_text_queue7getcharEv>
    1eee:	68 2f       	mov	r22, r24
    1ef0:	ed 81       	ldd	r30, Y+5	; 0x05
    1ef2:	fe 81       	ldd	r31, Y+6	; 0x06
    1ef4:	86 81       	ldd	r24, Z+6	; 0x06
    1ef6:	97 81       	ldd	r25, Z+7	; 0x07
    1ef8:	f6 01       	movw	r30, r12
    1efa:	19 95       	eicall
    1efc:	16 c3       	rjmp	.+1580   	; 0x252a <_ZN9task_user3runEv+0xc46>
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
			// State 2 is Direct Operation Mode. Here, the user can enter commands that directly turn the motors on
			// and off, as well as control their direction.
				
			case (2):
				if (p_serial->check_for_char ())        // If the user typed a
    1efe:	ad 81       	ldd	r26, Y+5	; 0x05
    1f00:	be 81       	ldd	r27, Y+6	; 0x06
    1f02:	16 96       	adiw	r26, 0x06	; 6
    1f04:	8d 91       	ld	r24, X+
    1f06:	9c 91       	ld	r25, X
    1f08:	17 97       	sbiw	r26, 0x07	; 7
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	ed 91       	ld	r30, X+
    1f0e:	fc 91       	ld	r31, X
    1f10:	04 80       	ldd	r0, Z+4	; 0x04
    1f12:	f5 81       	ldd	r31, Z+5	; 0x05
    1f14:	e0 2d       	mov	r30, r0
    1f16:	19 95       	eicall
    1f18:	88 23       	and	r24, r24
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <_ZN9task_user3runEv+0x63a>
    1f1c:	06 c3       	rjmp	.+1548   	; 0x252a <_ZN9task_user3runEv+0xc46>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    1f1e:	ed 81       	ldd	r30, Y+5	; 0x05
    1f20:	fe 81       	ldd	r31, Y+6	; 0x06
    1f22:	86 81       	ldd	r24, Z+6	; 0x06
    1f24:	97 81       	ldd	r25, Z+7	; 0x07
    1f26:	dc 01       	movw	r26, r24
    1f28:	ed 91       	ld	r30, X+
    1f2a:	fc 91       	ld	r31, X
    1f2c:	06 80       	ldd	r0, Z+6	; 0x06
    1f2e:	f7 81       	ldd	r31, Z+7	; 0x07
    1f30:	e0 2d       	mov	r30, r0
    1f32:	19 95       	eicall
					atoi_buf[atoi_index] = char_in;
    1f34:	f8 01       	movw	r30, r16
    1f36:	20 81       	ld	r18, Z
    1f38:	ed 81       	ldd	r30, Y+5	; 0x05
    1f3a:	fe 81       	ldd	r31, Y+6	; 0x06
    1f3c:	e2 0f       	add	r30, r18
    1f3e:	f1 1d       	adc	r31, r1
    1f40:	82 8b       	std	Z+18, r24	; 0x12
					atoi_index++;
    1f42:	2f 5f       	subi	r18, 0xFF	; 255
    1f44:	d8 01       	movw	r26, r16
    1f46:	2c 93       	st	X, r18
					switch (char_in)
    1f48:	99 27       	eor	r25, r25
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	e5 56       	subi	r30, 0x65	; 101
    1f4e:	f1 09       	sbc	r31, r1
    1f50:	e6 31       	cpi	r30, 0x16	; 22
    1f52:	f1 05       	cpc	r31, r1
    1f54:	08 f0       	brcs	.+2      	; 0x1f58 <_ZN9task_user3runEv+0x674>
    1f56:	e9 c2       	rjmp	.+1490   	; 0x252a <_ZN9task_user3runEv+0xc46>
    1f58:	88 27       	eor	r24, r24
    1f5a:	e0 5a       	subi	r30, 0xA0	; 160
    1f5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f60:	0c 94 8f 2e 	jmp	0x5d1e	; 0x5d1e <__tablejump2__>
					{
						case ('x'):
							pmotor_operator = &xmotor_on;
    1f64:	88 ed       	ldi	r24, 0xD8	; 216
    1f66:	90 e2       	ldi	r25, 0x20	; 32
    1f68:	f5 01       	movw	r30, r10
    1f6a:	80 83       	st	Z, r24
    1f6c:	91 83       	std	Z+1, r25	; 0x01
							//*p_serial << endl << PMS ("Press Ctrl-E to return to the main menu.") << endl << endl;
							//*p_serial << PMS ("X-Motor Controls:") << endl;
							
							break;
    1f6e:	dd c2       	rjmp	.+1466   	; 0x252a <_ZN9task_user3runEv+0xc46>
						case ('y'):
							pmotor_operator = &ymotor_on;
    1f70:	87 ed       	ldi	r24, 0xD7	; 215
    1f72:	90 e2       	ldi	r25, 0x20	; 32
    1f74:	d5 01       	movw	r26, r10
    1f76:	8d 93       	st	X+, r24
    1f78:	9c 93       	st	X, r25
							//*p_serial << endl << PMS ("Press Ctrl-E to return to the main menu.") << endl << endl;
							//*p_serial << PMS ("Y-Motor Controls:") << endl;
							//*p_serial << PMS ("Press Ctrl-F to activate forward.") << endl;
							//*p_serial << PMS ("Press Ctrl-R to activate reverse.") << endl;
							//*p_serial << PMS ("Press Ctrl-S to stop.") << endl;
							break;
    1f7a:	d7 c2       	rjmp	.+1454   	; 0x252a <_ZN9task_user3runEv+0xc46>
						case ('z'):
							pmotor_operator = &zmotor_on;
    1f7c:	86 ed       	ldi	r24, 0xD6	; 214
    1f7e:	90 e2       	ldi	r25, 0x20	; 32
    1f80:	f5 01       	movw	r30, r10
    1f82:	80 83       	st	Z, r24
    1f84:	91 83       	std	Z+1, r25	; 0x01
							//*p_serial << endl << PMS ("Press Ctrl-E to return to the main menu.") << endl << endl;
							//*p_serial << PMS ("Z-Motor Controls:") << endl;
							//*p_serial << PMS ("Press Ctrl-F to activate forward.") << endl;
							//*p_serial << PMS ("Press Ctrl-R to activate reverse.") << endl;
							//*p_serial << PMS ("Press Ctrl-S to stop.") << endl;
							break;
    1f86:	d1 c2       	rjmp	.+1442   	; 0x252a <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	0f 92       	push	r0
			the_data = new_data;
    1f8e:	10 92 da 20 	sts	0x20DA, r1	; 0x8020da <direct_mode>
			portEXIT_CRITICAL ();
    1f92:	0f 90       	pop	r0
    1f94:	0f be       	out	0x3f, r0	; 63
							//*p_serial << PMS ("Press Ctrl-B for Coordinate Mode") << endl;
							//*p_serial << PMS ("Press Ctrl-D for Direct Operation Mode") << endl;
							//*p_serial << PMS ("Press Ctrl-R for Routine Operation Mode") << endl;
						
							direct_mode.put(false);
							transition_to(0);
    1f96:	60 e0       	ldi	r22, 0x00	; 0
    1f98:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9c:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN8frt_task13transition_toEh>
							break;
    1fa0:	c4 c2       	rjmp	.+1416   	; 0x252a <_ZN9task_user3runEv+0xc46>
						
						case ('f'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    1fa2:	d5 01       	movw	r26, r10
    1fa4:	ed 91       	ld	r30, X+
    1fa6:	fc 91       	ld	r31, X
    1fa8:	b0 e2       	ldi	r27, 0x20	; 32
    1faa:	e8 3d       	cpi	r30, 0xD8	; 216
    1fac:	fb 07       	cpc	r31, r27
    1fae:	41 f0       	breq	.+16     	; 0x1fc0 <_ZN9task_user3runEv+0x6dc>
    1fb0:	80 e2       	ldi	r24, 0x20	; 32
    1fb2:	e7 3d       	cpi	r30, 0xD7	; 215
    1fb4:	f8 07       	cpc	r31, r24
    1fb6:	21 f0       	breq	.+8      	; 0x1fc0 <_ZN9task_user3runEv+0x6dc>
    1fb8:	90 e2       	ldi	r25, 0x20	; 32
    1fba:	e6 3d       	cpi	r30, 0xD6	; 214
    1fbc:	f9 07       	cpc	r31, r25
    1fbe:	41 f4       	brne	.+16     	; 0x1fd0 <_ZN9task_user3runEv+0x6ec>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	0f 92       	push	r0
			the_data = new_data;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	80 83       	st	Z, r24
			portEXIT_CRITICAL ();
    1fca:	0f 90       	pop	r0
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	ad c2       	rjmp	.+1370   	; 0x252a <_ZN9task_user3runEv+0xc46>
								pmotor_operator->put(1);
								
							}
							else
							{
								*p_serial << PMS ("Please choose the motor you would like to control.") << endl;
    1fd0:	6a e0       	ldi	r22, 0x0A	; 10
    1fd2:	ad 81       	ldd	r26, Y+5	; 0x05
    1fd4:	be 81       	ldd	r27, Y+6	; 0x06
    1fd6:	16 96       	adiw	r26, 0x06	; 6
    1fd8:	8d 91       	ld	r24, X+
    1fda:	9c 91       	ld	r25, X
    1fdc:	17 97       	sbiw	r26, 0x07	; 7
    1fde:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    1fe2:	6c 01       	movw	r12, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    1fe4:	6a e2       	ldi	r22, 0x2A	; 42
    1fe6:	79 e0       	ldi	r23, 0x09	; 9
    1fe8:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    1fec:	66 e0       	ldi	r22, 0x06	; 6
    1fee:	c6 01       	movw	r24, r12
    1ff0:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    1ff4:	9a c2       	rjmp	.+1332   	; 0x252a <_ZN9task_user3runEv+0xc46>
							}
							
							break;
							
						case ('r'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    1ff6:	d5 01       	movw	r26, r10
    1ff8:	ed 91       	ld	r30, X+
    1ffa:	fc 91       	ld	r31, X
    1ffc:	b0 e2       	ldi	r27, 0x20	; 32
    1ffe:	e8 3d       	cpi	r30, 0xD8	; 216
    2000:	fb 07       	cpc	r31, r27
    2002:	41 f0       	breq	.+16     	; 0x2014 <_ZN9task_user3runEv+0x730>
    2004:	80 e2       	ldi	r24, 0x20	; 32
    2006:	e7 3d       	cpi	r30, 0xD7	; 215
    2008:	f8 07       	cpc	r31, r24
    200a:	21 f0       	breq	.+8      	; 0x2014 <_ZN9task_user3runEv+0x730>
    200c:	90 e2       	ldi	r25, 0x20	; 32
    200e:	e6 3d       	cpi	r30, 0xD6	; 214
    2010:	f9 07       	cpc	r31, r25
    2012:	41 f4       	brne	.+16     	; 0x2024 <_ZN9task_user3runEv+0x740>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	f8 94       	cli
    2018:	0f 92       	push	r0
			the_data = new_data;
    201a:	82 e0       	ldi	r24, 0x02	; 2
    201c:	80 83       	st	Z, r24
			portEXIT_CRITICAL ();
    201e:	0f 90       	pop	r0
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	83 c2       	rjmp	.+1286   	; 0x252a <_ZN9task_user3runEv+0xc46>
								pmotor_operator->put(2);
								
							}
							else
							{
								*p_serial << PMS ("Please choose the motor you would like to control.") << endl;
    2024:	6a e0       	ldi	r22, 0x0A	; 10
    2026:	ad 81       	ldd	r26, Y+5	; 0x05
    2028:	be 81       	ldd	r27, Y+6	; 0x06
    202a:	16 96       	adiw	r26, 0x06	; 6
    202c:	8d 91       	ld	r24, X+
    202e:	9c 91       	ld	r25, X
    2030:	17 97       	sbiw	r26, 0x07	; 7
    2032:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    2036:	6c 01       	movw	r12, r24
    2038:	67 ef       	ldi	r22, 0xF7	; 247
    203a:	78 e0       	ldi	r23, 0x08	; 8
    203c:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    2040:	66 e0       	ldi	r22, 0x06	; 6
    2042:	c6 01       	movw	r24, r12
    2044:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    2048:	70 c2       	rjmp	.+1248   	; 0x252a <_ZN9task_user3runEv+0xc46>
							}
							
							break;
							
						case ('s'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    204a:	d5 01       	movw	r26, r10
    204c:	ed 91       	ld	r30, X+
    204e:	fc 91       	ld	r31, X
    2050:	b0 e2       	ldi	r27, 0x20	; 32
    2052:	e8 3d       	cpi	r30, 0xD8	; 216
    2054:	fb 07       	cpc	r31, r27
    2056:	41 f0       	breq	.+16     	; 0x2068 <_ZN9task_user3runEv+0x784>
    2058:	80 e2       	ldi	r24, 0x20	; 32
    205a:	e7 3d       	cpi	r30, 0xD7	; 215
    205c:	f8 07       	cpc	r31, r24
    205e:	21 f0       	breq	.+8      	; 0x2068 <_ZN9task_user3runEv+0x784>
    2060:	90 e2       	ldi	r25, 0x20	; 32
    2062:	e6 3d       	cpi	r30, 0xD6	; 214
    2064:	f9 07       	cpc	r31, r25
    2066:	39 f4       	brne	.+14     	; 0x2076 <_ZN9task_user3runEv+0x792>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	0f 92       	push	r0
			the_data = new_data;
    206e:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    2070:	0f 90       	pop	r0
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	5a c2       	rjmp	.+1204   	; 0x252a <_ZN9task_user3runEv+0xc46>
								pmotor_operator->put(0);
								
							}
							else
							{
								*p_serial << PMS ("Please choose the motor you would like to control.") << endl;
    2076:	6a e0       	ldi	r22, 0x0A	; 10
    2078:	ad 81       	ldd	r26, Y+5	; 0x05
    207a:	be 81       	ldd	r27, Y+6	; 0x06
    207c:	16 96       	adiw	r26, 0x06	; 6
    207e:	8d 91       	ld	r24, X+
    2080:	9c 91       	ld	r25, X
    2082:	17 97       	sbiw	r26, 0x07	; 7
    2084:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    2088:	6c 01       	movw	r12, r24
    208a:	64 ec       	ldi	r22, 0xC4	; 196
    208c:	78 e0       	ldi	r23, 0x08	; 8
    208e:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    2092:	66 e0       	ldi	r22, 0x06	; 6
    2094:	c6 01       	movw	r24, r12
    2096:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    209a:	47 c2       	rjmp	.+1166   	; 0x252a <_ZN9task_user3runEv+0xc46>
			/** In State 3, the interface task is in configuration mode. In this mode, it has the ability to change the
			 *	default values of certain system parameters.
			 */			
				
			case (3):
				if (p_serial->check_for_char ())        // If the user typed a
    209c:	ed 81       	ldd	r30, Y+5	; 0x05
    209e:	fe 81       	ldd	r31, Y+6	; 0x06
    20a0:	86 81       	ldd	r24, Z+6	; 0x06
    20a2:	97 81       	ldd	r25, Z+7	; 0x07
    20a4:	dc 01       	movw	r26, r24
    20a6:	ed 91       	ld	r30, X+
    20a8:	fc 91       	ld	r31, X
    20aa:	04 80       	ldd	r0, Z+4	; 0x04
    20ac:	f5 81       	ldd	r31, Z+5	; 0x05
    20ae:	e0 2d       	mov	r30, r0
    20b0:	19 95       	eicall
    20b2:	88 23       	and	r24, r24
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <_ZN9task_user3runEv+0x7d4>
    20b6:	39 c2       	rjmp	.+1138   	; 0x252a <_ZN9task_user3runEv+0xc46>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    20b8:	ed 81       	ldd	r30, Y+5	; 0x05
    20ba:	fe 81       	ldd	r31, Y+6	; 0x06
    20bc:	86 81       	ldd	r24, Z+6	; 0x06
    20be:	97 81       	ldd	r25, Z+7	; 0x07
    20c0:	dc 01       	movw	r26, r24
    20c2:	ed 91       	ld	r30, X+
    20c4:	fc 91       	ld	r31, X
    20c6:	06 80       	ldd	r0, Z+6	; 0x06
    20c8:	f7 81       	ldd	r31, Z+7	; 0x07
    20ca:	e0 2d       	mov	r30, r0
    20cc:	19 95       	eicall
    20ce:	bc 01       	movw	r22, r24
					atoi_buf[atoi_index] = char_in;
    20d0:	f8 01       	movw	r30, r16
    20d2:	80 81       	ld	r24, Z
    20d4:	ed 81       	ldd	r30, Y+5	; 0x05
    20d6:	fe 81       	ldd	r31, Y+6	; 0x06
    20d8:	e8 0f       	add	r30, r24
    20da:	f1 1d       	adc	r31, r1
    20dc:	62 8b       	std	Z+18, r22	; 0x12
					atoi_index++;
    20de:	8f 5f       	subi	r24, 0xFF	; 255
    20e0:	d8 01       	movw	r26, r16
    20e2:	8c 93       	st	X, r24
					switch (char_in)
    20e4:	fb 01       	movw	r30, r22
    20e6:	ff 27       	eor	r31, r31
    20e8:	bc 97       	sbiw	r30, 0x2c	; 44
    20ea:	ef 34       	cpi	r30, 0x4F	; 79
    20ec:	f1 05       	cpc	r31, r1
    20ee:	08 f0       	brcs	.+2      	; 0x20f2 <_ZN9task_user3runEv+0x80e>
    20f0:	1c c2       	rjmp	.+1080   	; 0x252a <_ZN9task_user3runEv+0xc46>
    20f2:	88 27       	eor	r24, r24
    20f4:	ea 58       	subi	r30, 0x8A	; 138
    20f6:	fe 4f       	sbci	r31, 0xFE	; 254
    20f8:	8f 4f       	sbci	r24, 0xFF	; 255
    20fa:	0c 94 8f 2e 	jmp	0x5d1e	; 0x5d1e <__tablejump2__>
							//atoi_index = 0;
							//data_config = &ramp_run_span;
							//break;
							
						case ('v'):
							*p_serial << PMS ("Max velocity set to:") << endl;
    20fe:	6a e0       	ldi	r22, 0x0A	; 10
    2100:	ed 81       	ldd	r30, Y+5	; 0x05
    2102:	fe 81       	ldd	r31, Y+6	; 0x06
    2104:	86 81       	ldd	r24, Z+6	; 0x06
    2106:	97 81       	ldd	r25, Z+7	; 0x07
    2108:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    210c:	6c 01       	movw	r12, r24
    210e:	6f ea       	ldi	r22, 0xAF	; 175
    2110:	78 e0       	ldi	r23, 0x08	; 8
    2112:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    2116:	66 e0       	ldi	r22, 0x06	; 6
    2118:	c6 01       	movw	r24, r12
    211a:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    211e:	d8 01       	movw	r26, r16
    2120:	1c 92       	st	X, r1
							data_config = &gen_max_v;
    2122:	8f e1       	ldi	r24, 0x1F	; 31
    2124:	91 e2       	ldi	r25, 0x21	; 33
    2126:	f3 01       	movw	r30, r6
    2128:	80 83       	st	Z, r24
    212a:	91 83       	std	Z+1, r25	; 0x01
							break;
    212c:	fe c1       	rjmp	.+1020   	; 0x252a <_ZN9task_user3runEv+0xc46>
							
						case ('x'):
							*p_serial << PMS ("X-axis max velocity set to:") << endl;
    212e:	6a e0       	ldi	r22, 0x0A	; 10
    2130:	ad 81       	ldd	r26, Y+5	; 0x05
    2132:	be 81       	ldd	r27, Y+6	; 0x06
    2134:	16 96       	adiw	r26, 0x06	; 6
    2136:	8d 91       	ld	r24, X+
    2138:	9c 91       	ld	r25, X
    213a:	17 97       	sbiw	r26, 0x07	; 7
    213c:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    2140:	6c 01       	movw	r12, r24
    2142:	63 e9       	ldi	r22, 0x93	; 147
    2144:	78 e0       	ldi	r23, 0x08	; 8
    2146:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    214a:	66 e0       	ldi	r22, 0x06	; 6
    214c:	c6 01       	movw	r24, r12
    214e:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    2152:	f8 01       	movw	r30, r16
    2154:	10 82       	st	Z, r1
							v_config = &x_max_velocity;
    2156:	8d e3       	ldi	r24, 0x3D	; 61
    2158:	91 e2       	ldi	r25, 0x21	; 33
    215a:	d2 01       	movw	r26, r4
    215c:	8d 93       	st	X+, r24
    215e:	9c 93       	st	X, r25
							queue_indicator = true;
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	f1 01       	movw	r30, r2
    2164:	80 83       	st	Z, r24
							break;
    2166:	e1 c1       	rjmp	.+962    	; 0x252a <_ZN9task_user3runEv+0xc46>
							
						case ('y'):
							*p_serial << PMS ("Y-axis max velocity set to:") << endl;
    2168:	6a e0       	ldi	r22, 0x0A	; 10
    216a:	ad 81       	ldd	r26, Y+5	; 0x05
    216c:	be 81       	ldd	r27, Y+6	; 0x06
    216e:	16 96       	adiw	r26, 0x06	; 6
    2170:	8d 91       	ld	r24, X+
    2172:	9c 91       	ld	r25, X
    2174:	17 97       	sbiw	r26, 0x07	; 7
    2176:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    217a:	6c 01       	movw	r12, r24
    217c:	67 e7       	ldi	r22, 0x77	; 119
    217e:	78 e0       	ldi	r23, 0x08	; 8
    2180:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    2184:	66 e0       	ldi	r22, 0x06	; 6
    2186:	c6 01       	movw	r24, r12
    2188:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    218c:	f8 01       	movw	r30, r16
    218e:	10 82       	st	Z, r1
							v_config = &y_max_velocity;
    2190:	83 e3       	ldi	r24, 0x33	; 51
    2192:	91 e2       	ldi	r25, 0x21	; 33
    2194:	d2 01       	movw	r26, r4
    2196:	8d 93       	st	X+, r24
    2198:	9c 93       	st	X, r25
							queue_indicator = true;
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	f1 01       	movw	r30, r2
    219e:	80 83       	st	Z, r24
							break;
    21a0:	c4 c1       	rjmp	.+904    	; 0x252a <_ZN9task_user3runEv+0xc46>
						
						case ('z'):
							*p_serial << PMS ("Z-axis max velocity set to:") << endl;
    21a2:	6a e0       	ldi	r22, 0x0A	; 10
    21a4:	ad 81       	ldd	r26, Y+5	; 0x05
    21a6:	be 81       	ldd	r27, Y+6	; 0x06
    21a8:	16 96       	adiw	r26, 0x06	; 6
    21aa:	8d 91       	ld	r24, X+
    21ac:	9c 91       	ld	r25, X
    21ae:	17 97       	sbiw	r26, 0x07	; 7
    21b0:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    21b4:	6c 01       	movw	r12, r24
    21b6:	6b e5       	ldi	r22, 0x5B	; 91
    21b8:	78 e0       	ldi	r23, 0x08	; 8
    21ba:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    21be:	66 e0       	ldi	r22, 0x06	; 6
    21c0:	c6 01       	movw	r24, r12
    21c2:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    21c6:	f8 01       	movw	r30, r16
    21c8:	10 82       	st	Z, r1
							v_config = &z_max_velocity;
    21ca:	89 e2       	ldi	r24, 0x29	; 41
    21cc:	91 e2       	ldi	r25, 0x21	; 33
    21ce:	d2 01       	movw	r26, r4
    21d0:	8d 93       	st	X+, r24
    21d2:	9c 93       	st	X, r25
							queue_indicator = true;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	f1 01       	movw	r30, r2
    21d8:	80 83       	st	Z, r24
							break;
    21da:	a7 c1       	rjmp	.+846    	; 0x252a <_ZN9task_user3runEv+0xc46>
						
						case ('e'):
							*p_serial << PMS ("Leaving config mode") << endl;
    21dc:	6a e0       	ldi	r22, 0x0A	; 10
    21de:	ad 81       	ldd	r26, Y+5	; 0x05
    21e0:	be 81       	ldd	r27, Y+6	; 0x06
    21e2:	16 96       	adiw	r26, 0x06	; 6
    21e4:	8d 91       	ld	r24, X+
    21e6:	9c 91       	ld	r25, X
    21e8:	17 97       	sbiw	r26, 0x07	; 7
    21ea:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    21ee:	6c 01       	movw	r12, r24
    21f0:	67 e4       	ldi	r22, 0x47	; 71
    21f2:	78 e0       	ldi	r23, 0x08	; 8
    21f4:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    21f8:	66 e0       	ldi	r22, 0x06	; 6
    21fa:	c6 01       	movw	r24, r12
    21fc:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	0f 92       	push	r0
			the_data = new_data;
    2206:	10 92 dc 20 	sts	0x20DC, r1	; 0x8020dc <configuration_mode>
			portEXIT_CRITICAL ();
    220a:	0f 90       	pop	r0
    220c:	0f be       	out	0x3f, r0	; 63
							configuration_mode.put(false);
							transition_to(0);
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	8d 81       	ldd	r24, Y+5	; 0x05
    2212:	9e 81       	ldd	r25, Y+6	; 0x06
    2214:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN8frt_task13transition_toEh>
							break;
    2218:	88 c1       	rjmp	.+784    	; 0x252a <_ZN9task_user3runEv+0xc46>
							
						case('a'):
							conv_int = str_to_int();
    221a:	8d 81       	ldd	r24, Y+5	; 0x05
    221c:	9e 81       	ldd	r25, Y+6	; 0x06
    221e:	0e 94 01 0c 	call	0x1802	; 0x1802 <_ZN9task_user10str_to_intEv>
    2222:	9b 01       	movw	r18, r22
    2224:	ac 01       	movw	r20, r24
    2226:	f7 01       	movw	r30, r14
    2228:	60 83       	st	Z, r22
    222a:	71 83       	std	Z+1, r23	; 0x01
    222c:	82 83       	std	Z+2, r24	; 0x02
    222e:	93 83       	std	Z+3, r25	; 0x03
							if (queue_indicator)
    2230:	d1 01       	movw	r26, r2
    2232:	8c 91       	ld	r24, X
    2234:	88 23       	and	r24, r24
    2236:	b1 f0       	breq	.+44     	; 0x2264 <_ZN9task_user3runEv+0x980>
							{
								conv_int = 1000 * conv_int;
    2238:	a8 ee       	ldi	r26, 0xE8	; 232
    223a:	b3 e0       	ldi	r27, 0x03	; 3
    223c:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__muluhisi3>
    2240:	60 83       	st	Z, r22
    2242:	71 83       	std	Z+1, r23	; 0x01
    2244:	82 83       	std	Z+2, r24	; 0x02
    2246:	93 83       	std	Z+3, r25	; 0x03
								v_config->put(conv_int);
    2248:	d2 01       	movw	r26, r4
    224a:	8d 91       	ld	r24, X+
    224c:	9c 91       	ld	r25, X
    224e:	dc 01       	movw	r26, r24
    2250:	ed 91       	ld	r30, X+
    2252:	fc 91       	ld	r31, X
    2254:	01 90       	ld	r0, Z+
    2256:	f0 81       	ld	r31, Z
    2258:	e0 2d       	mov	r30, r0
    225a:	b7 01       	movw	r22, r14
    225c:	19 95       	eicall
								queue_indicator = false;
    225e:	f1 01       	movw	r30, r2
    2260:	10 82       	st	Z, r1
    2262:	32 c0       	rjmp	.+100    	; 0x22c8 <_ZN9task_user3runEv+0x9e4>
							}
							else
							{
								if (data_config == &ramp_run_span)
    2264:	d3 01       	movw	r26, r6
    2266:	cd 90       	ld	r12, X+
    2268:	dc 90       	ld	r13, X
    226a:	b5 e2       	ldi	r27, 0x25	; 37
    226c:	cb 16       	cp	r12, r27
    226e:	b1 e2       	ldi	r27, 0x21	; 33
    2270:	db 06       	cpc	r13, r27
    2272:	61 f4       	brne	.+24     	; 0x228c <_ZN9task_user3runEv+0x9a8>
								{
									conv_int = 100 / conv_int;
    2274:	64 e6       	ldi	r22, 0x64	; 100
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <__udivmodsi4>
    2280:	f7 01       	movw	r30, r14
    2282:	20 83       	st	Z, r18
    2284:	31 83       	std	Z+1, r19	; 0x01
    2286:	42 83       	std	Z+2, r20	; 0x02
    2288:	53 83       	std	Z+3, r21	; 0x03
    228a:	0f c0       	rjmp	.+30     	; 0x22aa <_ZN9task_user3runEv+0x9c6>
								}
								else if (data_config == &gen_max_v)
    228c:	ff e1       	ldi	r31, 0x1F	; 31
    228e:	cf 16       	cp	r12, r31
    2290:	f1 e2       	ldi	r31, 0x21	; 33
    2292:	df 06       	cpc	r13, r31
    2294:	51 f4       	brne	.+20     	; 0x22aa <_ZN9task_user3runEv+0x9c6>
								{
									conv_int = 1500 * conv_int;
    2296:	ac ed       	ldi	r26, 0xDC	; 220
    2298:	b5 e0       	ldi	r27, 0x05	; 5
    229a:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__muluhisi3>
    229e:	d7 01       	movw	r26, r14
    22a0:	6d 93       	st	X+, r22
    22a2:	7d 93       	st	X+, r23
    22a4:	8d 93       	st	X+, r24
    22a6:	9c 93       	st	X, r25
    22a8:	13 97       	sbiw	r26, 0x03	; 3
								}
								data_config->put(conv_int);
    22aa:	f7 01       	movw	r30, r14
    22ac:	80 81       	ld	r24, Z
    22ae:	91 81       	ldd	r25, Z+1	; 0x01
    22b0:	a2 81       	ldd	r26, Z+2	; 0x02
    22b2:	b3 81       	ldd	r27, Z+3	; 0x03
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	0f 92       	push	r0
			the_data = new_data;
    22ba:	f6 01       	movw	r30, r12
    22bc:	80 83       	st	Z, r24
    22be:	91 83       	std	Z+1, r25	; 0x01
    22c0:	a2 83       	std	Z+2, r26	; 0x02
    22c2:	b3 83       	std	Z+3, r27	; 0x03
			portEXIT_CRITICAL ();
    22c4:	0f 90       	pop	r0
    22c6:	0f be       	out	0x3f, r0	; 63
							}
									
							atoi_index = 0;
    22c8:	d8 01       	movw	r26, r16
    22ca:	1c 92       	st	X, r1
							*p_serial << PMS ("Config entered:") << conv_int << endl;
    22cc:	d7 01       	movw	r26, r14
    22ce:	8d 91       	ld	r24, X+
    22d0:	9d 91       	ld	r25, X+
    22d2:	0d 90       	ld	r0, X+
    22d4:	bc 91       	ld	r27, X
    22d6:	a0 2d       	mov	r26, r0
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	9a 83       	std	Y+2, r25	; 0x02
    22dc:	ab 83       	std	Y+3, r26	; 0x03
    22de:	bc 83       	std	Y+4, r27	; 0x04
    22e0:	6a e0       	ldi	r22, 0x0A	; 10
    22e2:	ed 81       	ldd	r30, Y+5	; 0x05
    22e4:	fe 81       	ldd	r31, Y+6	; 0x06
    22e6:	86 81       	ldd	r24, Z+6	; 0x06
    22e8:	97 81       	ldd	r25, Z+7	; 0x07
    22ea:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    22ee:	6c 01       	movw	r12, r24
    22f0:	67 e3       	ldi	r22, 0x37	; 55
    22f2:	78 e0       	ldi	r23, 0x08	; 8
    22f4:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    22f8:	49 81       	ldd	r20, Y+1	; 0x01
    22fa:	5a 81       	ldd	r21, Y+2	; 0x02
    22fc:	6b 81       	ldd	r22, Y+3	; 0x03
    22fe:	7c 81       	ldd	r23, Y+4	; 0x04
    2300:	c6 01       	movw	r24, r12
    2302:	0e 94 ca 28 	call	0x5194	; 0x5194 <_ZN8emstreamlsEm>
    2306:	66 e0       	ldi	r22, 0x06	; 6
    2308:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
							break;
    230c:	0e c1       	rjmp	.+540    	; 0x252a <_ZN9task_user3runEv+0xc46>
							
						case (','):
							*p_serial << char_in;
    230e:	ad 81       	ldd	r26, Y+5	; 0x05
    2310:	be 81       	ldd	r27, Y+6	; 0x06
    2312:	16 96       	adiw	r26, 0x06	; 6
    2314:	8d 91       	ld	r24, X+
    2316:	9c 91       	ld	r25, X
    2318:	17 97       	sbiw	r26, 0x07	; 7
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    231a:	dc 01       	movw	r26, r24
    231c:	ed 91       	ld	r30, X+
    231e:	fc 91       	ld	r31, X
    2320:	02 80       	ldd	r0, Z+2	; 0x02
    2322:	f3 81       	ldd	r31, Z+3	; 0x03
    2324:	e0 2d       	mov	r30, r0
    2326:	19 95       	eicall
							
							conv_int = str_to_int();
    2328:	8d 81       	ldd	r24, Y+5	; 0x05
    232a:	9e 81       	ldd	r25, Y+6	; 0x06
    232c:	0e 94 01 0c 	call	0x1802	; 0x1802 <_ZN9task_user10str_to_intEv>
    2330:	9b 01       	movw	r18, r22
    2332:	ac 01       	movw	r20, r24
							conv_int = conv_int * 1000;
    2334:	a8 ee       	ldi	r26, 0xE8	; 232
    2336:	b3 e0       	ldi	r27, 0x03	; 3
    2338:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__muluhisi3>
    233c:	f7 01       	movw	r30, r14
    233e:	60 83       	st	Z, r22
    2340:	71 83       	std	Z+1, r23	; 0x01
    2342:	82 83       	std	Z+2, r24	; 0x02
    2344:	93 83       	std	Z+3, r25	; 0x03
							v_config->put(conv_int);
    2346:	d2 01       	movw	r26, r4
    2348:	8d 91       	ld	r24, X+
    234a:	9c 91       	ld	r25, X
    234c:	dc 01       	movw	r26, r24
    234e:	ed 91       	ld	r30, X+
    2350:	fc 91       	ld	r31, X
    2352:	01 90       	ld	r0, Z+
    2354:	f0 81       	ld	r31, Z
    2356:	e0 2d       	mov	r30, r0
    2358:	b7 01       	movw	r22, r14
    235a:	19 95       	eicall
							atoi_index = 0;
    235c:	f8 01       	movw	r30, r16
    235e:	10 82       	st	Z, r1
							break;
    2360:	e4 c0       	rjmp	.+456    	; 0x252a <_ZN9task_user3runEv+0xc46>
							
						case ('u'):
							*p_serial << PMS ("Microstep scaler set to:") << endl;
    2362:	6a e0       	ldi	r22, 0x0A	; 10
    2364:	ad 81       	ldd	r26, Y+5	; 0x05
    2366:	be 81       	ldd	r27, Y+6	; 0x06
    2368:	16 96       	adiw	r26, 0x06	; 6
    236a:	8d 91       	ld	r24, X+
    236c:	9c 91       	ld	r25, X
    236e:	17 97       	sbiw	r26, 0x07	; 7
    2370:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    2374:	6c 01       	movw	r12, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    2376:	6e e1       	ldi	r22, 0x1E	; 30
    2378:	78 e0       	ldi	r23, 0x08	; 8
    237a:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    237e:	66 e0       	ldi	r22, 0x06	; 6
    2380:	c6 01       	movw	r24, r12
    2382:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    2386:	f8 01       	movw	r30, r16
    2388:	10 82       	st	Z, r1
							data_config = &microstep_scaler;
    238a:	8b e4       	ldi	r24, 0x4B	; 75
    238c:	91 e2       	ldi	r25, 0x21	; 33
    238e:	d3 01       	movw	r26, r6
    2390:	8d 93       	st	X+, r24
    2392:	9c 93       	st	X, r25
							break;
    2394:	ca c0       	rjmp	.+404    	; 0x252a <_ZN9task_user3runEv+0xc46>
							
						case ('s'):
							*p_serial << PMS ("Sensor delay set to:") << endl;
    2396:	6a e0       	ldi	r22, 0x0A	; 10
    2398:	ed 81       	ldd	r30, Y+5	; 0x05
    239a:	fe 81       	ldd	r31, Y+6	; 0x06
    239c:	86 81       	ldd	r24, Z+6	; 0x06
    239e:	97 81       	ldd	r25, Z+7	; 0x07
    23a0:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    23a4:	6c 01       	movw	r12, r24
    23a6:	69 e0       	ldi	r22, 0x09	; 9
    23a8:	78 e0       	ldi	r23, 0x08	; 8
    23aa:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    23ae:	66 e0       	ldi	r22, 0x06	; 6
    23b0:	c6 01       	movw	r24, r12
    23b2:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    23b6:	d8 01       	movw	r26, r16
    23b8:	1c 92       	st	X, r1
							data_config = &sensor_delay;
    23ba:	8f e4       	ldi	r24, 0x4F	; 79
    23bc:	91 e2       	ldi	r25, 0x21	; 33
    23be:	f3 01       	movw	r30, r6
    23c0:	80 83       	st	Z, r24
    23c2:	91 83       	std	Z+1, r25	; 0x01
							break;
    23c4:	b2 c0       	rjmp	.+356    	; 0x252a <_ZN9task_user3runEv+0xc46>
							
						case ('n'):
							*p_serial << PMS ("Sensor sample size set to:") << endl;
    23c6:	6a e0       	ldi	r22, 0x0A	; 10
    23c8:	ad 81       	ldd	r26, Y+5	; 0x05
    23ca:	be 81       	ldd	r27, Y+6	; 0x06
    23cc:	16 96       	adiw	r26, 0x06	; 6
    23ce:	8d 91       	ld	r24, X+
    23d0:	9c 91       	ld	r25, X
    23d2:	17 97       	sbiw	r26, 0x07	; 7
    23d4:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    23d8:	6c 01       	movw	r12, r24
    23da:	6e ee       	ldi	r22, 0xEE	; 238
    23dc:	77 e0       	ldi	r23, 0x07	; 7
    23de:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    23e2:	66 e0       	ldi	r22, 0x06	; 6
    23e4:	c6 01       	movw	r24, r12
    23e6:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    23ea:	f8 01       	movw	r30, r16
    23ec:	10 82       	st	Z, r1
							data_config = &sensor_sample_number;
    23ee:	84 e5       	ldi	r24, 0x54	; 84
    23f0:	91 e2       	ldi	r25, 0x21	; 33
    23f2:	d3 01       	movw	r26, r6
    23f4:	8d 93       	st	X+, r24
    23f6:	9c 93       	st	X, r25
							break;
    23f8:	98 c0       	rjmp	.+304    	; 0x252a <_ZN9task_user3runEv+0xc46>
							
						case('0'):
						
						*p_serial << char_in;
    23fa:	ed 81       	ldd	r30, Y+5	; 0x05
    23fc:	fe 81       	ldd	r31, Y+6	; 0x06
    23fe:	86 81       	ldd	r24, Z+6	; 0x06
    2400:	97 81       	ldd	r25, Z+7	; 0x07
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    2402:	dc 01       	movw	r26, r24
    2404:	ed 91       	ld	r30, X+
    2406:	fc 91       	ld	r31, X
    2408:	02 80       	ldd	r0, Z+2	; 0x02
    240a:	f3 81       	ldd	r31, Z+3	; 0x03
    240c:	e0 2d       	mov	r30, r0
    240e:	19 95       	eicall
    2410:	8c c0       	rjmp	.+280    	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('1'):
						
						*p_serial << char_in;
    2412:	ed 81       	ldd	r30, Y+5	; 0x05
    2414:	fe 81       	ldd	r31, Y+6	; 0x06
    2416:	86 81       	ldd	r24, Z+6	; 0x06
    2418:	97 81       	ldd	r25, Z+7	; 0x07
    241a:	dc 01       	movw	r26, r24
    241c:	ed 91       	ld	r30, X+
    241e:	fc 91       	ld	r31, X
    2420:	02 80       	ldd	r0, Z+2	; 0x02
    2422:	f3 81       	ldd	r31, Z+3	; 0x03
    2424:	e0 2d       	mov	r30, r0
    2426:	19 95       	eicall
    2428:	80 c0       	rjmp	.+256    	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('2'):
						
						*p_serial << char_in;
    242a:	ed 81       	ldd	r30, Y+5	; 0x05
    242c:	fe 81       	ldd	r31, Y+6	; 0x06
    242e:	86 81       	ldd	r24, Z+6	; 0x06
    2430:	97 81       	ldd	r25, Z+7	; 0x07
    2432:	dc 01       	movw	r26, r24
    2434:	ed 91       	ld	r30, X+
    2436:	fc 91       	ld	r31, X
    2438:	02 80       	ldd	r0, Z+2	; 0x02
    243a:	f3 81       	ldd	r31, Z+3	; 0x03
    243c:	e0 2d       	mov	r30, r0
    243e:	19 95       	eicall
    2440:	74 c0       	rjmp	.+232    	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('3'):
						
						*p_serial << char_in;
    2442:	ed 81       	ldd	r30, Y+5	; 0x05
    2444:	fe 81       	ldd	r31, Y+6	; 0x06
    2446:	86 81       	ldd	r24, Z+6	; 0x06
    2448:	97 81       	ldd	r25, Z+7	; 0x07
    244a:	dc 01       	movw	r26, r24
    244c:	ed 91       	ld	r30, X+
    244e:	fc 91       	ld	r31, X
    2450:	02 80       	ldd	r0, Z+2	; 0x02
    2452:	f3 81       	ldd	r31, Z+3	; 0x03
    2454:	e0 2d       	mov	r30, r0
    2456:	19 95       	eicall
    2458:	68 c0       	rjmp	.+208    	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('4'):
						
						*p_serial << char_in;
    245a:	ed 81       	ldd	r30, Y+5	; 0x05
    245c:	fe 81       	ldd	r31, Y+6	; 0x06
    245e:	86 81       	ldd	r24, Z+6	; 0x06
    2460:	97 81       	ldd	r25, Z+7	; 0x07
    2462:	dc 01       	movw	r26, r24
    2464:	ed 91       	ld	r30, X+
    2466:	fc 91       	ld	r31, X
    2468:	02 80       	ldd	r0, Z+2	; 0x02
    246a:	f3 81       	ldd	r31, Z+3	; 0x03
    246c:	e0 2d       	mov	r30, r0
    246e:	19 95       	eicall
    2470:	5c c0       	rjmp	.+184    	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('5'):
						
						*p_serial << char_in;
    2472:	ed 81       	ldd	r30, Y+5	; 0x05
    2474:	fe 81       	ldd	r31, Y+6	; 0x06
    2476:	86 81       	ldd	r24, Z+6	; 0x06
    2478:	97 81       	ldd	r25, Z+7	; 0x07
    247a:	dc 01       	movw	r26, r24
    247c:	ed 91       	ld	r30, X+
    247e:	fc 91       	ld	r31, X
    2480:	02 80       	ldd	r0, Z+2	; 0x02
    2482:	f3 81       	ldd	r31, Z+3	; 0x03
    2484:	e0 2d       	mov	r30, r0
    2486:	19 95       	eicall
    2488:	50 c0       	rjmp	.+160    	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('6'):
						
						*p_serial << char_in;
    248a:	ed 81       	ldd	r30, Y+5	; 0x05
    248c:	fe 81       	ldd	r31, Y+6	; 0x06
    248e:	86 81       	ldd	r24, Z+6	; 0x06
    2490:	97 81       	ldd	r25, Z+7	; 0x07
    2492:	dc 01       	movw	r26, r24
    2494:	ed 91       	ld	r30, X+
    2496:	fc 91       	ld	r31, X
    2498:	02 80       	ldd	r0, Z+2	; 0x02
    249a:	f3 81       	ldd	r31, Z+3	; 0x03
    249c:	e0 2d       	mov	r30, r0
    249e:	19 95       	eicall
    24a0:	44 c0       	rjmp	.+136    	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('7'):
						
						*p_serial << char_in;
    24a2:	ed 81       	ldd	r30, Y+5	; 0x05
    24a4:	fe 81       	ldd	r31, Y+6	; 0x06
    24a6:	86 81       	ldd	r24, Z+6	; 0x06
    24a8:	97 81       	ldd	r25, Z+7	; 0x07
    24aa:	dc 01       	movw	r26, r24
    24ac:	ed 91       	ld	r30, X+
    24ae:	fc 91       	ld	r31, X
    24b0:	02 80       	ldd	r0, Z+2	; 0x02
    24b2:	f3 81       	ldd	r31, Z+3	; 0x03
    24b4:	e0 2d       	mov	r30, r0
    24b6:	19 95       	eicall
    24b8:	38 c0       	rjmp	.+112    	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('8'):
						
						*p_serial << char_in;
    24ba:	ed 81       	ldd	r30, Y+5	; 0x05
    24bc:	fe 81       	ldd	r31, Y+6	; 0x06
    24be:	86 81       	ldd	r24, Z+6	; 0x06
    24c0:	97 81       	ldd	r25, Z+7	; 0x07
    24c2:	dc 01       	movw	r26, r24
    24c4:	ed 91       	ld	r30, X+
    24c6:	fc 91       	ld	r31, X
    24c8:	02 80       	ldd	r0, Z+2	; 0x02
    24ca:	f3 81       	ldd	r31, Z+3	; 0x03
    24cc:	e0 2d       	mov	r30, r0
    24ce:	19 95       	eicall
    24d0:	2c c0       	rjmp	.+88     	; 0x252a <_ZN9task_user3runEv+0xc46>
						break;

						case('9'):
						
						*p_serial << char_in;
    24d2:	ed 81       	ldd	r30, Y+5	; 0x05
    24d4:	fe 81       	ldd	r31, Y+6	; 0x06
    24d6:	86 81       	ldd	r24, Z+6	; 0x06
    24d8:	97 81       	ldd	r25, Z+7	; 0x07
    24da:	dc 01       	movw	r26, r24
    24dc:	ed 91       	ld	r30, X+
    24de:	fc 91       	ld	r31, X
    24e0:	02 80       	ldd	r0, Z+2	; 0x02
    24e2:	f3 81       	ldd	r31, Z+3	; 0x03
    24e4:	e0 2d       	mov	r30, r0
    24e6:	19 95       	eicall
    24e8:	20 c0       	rjmp	.+64     	; 0x252a <_ZN9task_user3runEv+0xc46>
    24ea:	a9 83       	std	Y+1, r26	; 0x01
    24ec:	ba 83       	std	Y+2, r27	; 0x02
				break;

			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// We should never get to the default state. If we do, complain and restart
			default:
				*p_serial << PMS ("Illegal state! Resetting AVR") << endl;
    24ee:	6a e0       	ldi	r22, 0x0A	; 10
    24f0:	fd 01       	movw	r30, r26
    24f2:	86 81       	ldd	r24, Z+6	; 0x06
    24f4:	97 81       	ldd	r25, Z+7	; 0x07
    24f6:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    24fa:	89 83       	std	Y+1, r24	; 0x01
    24fc:	9a 83       	std	Y+2, r25	; 0x02
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    24fe:	61 ed       	ldi	r22, 0xD1	; 209
    2500:	77 e0       	ldi	r23, 0x07	; 7
    2502:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    2506:	66 e0       	ldi	r22, 0x06	; 6
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	9a 81       	ldd	r25, Y+2	; 0x02
    250c:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
				wdt_enable (WDTO_120MS);
    2510:	93 e0       	ldi	r25, 0x03	; 3
    2512:	88 ed       	ldi	r24, 0xD8	; 216
    2514:	08 b6       	in	r0, 0x38	; 56
    2516:	18 be       	out	0x38, r1	; 56
    2518:	84 bf       	out	0x34, r24	; 52
    251a:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    251e:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    2522:	81 fd       	sbrc	r24, 1
    2524:	fc cf       	rjmp	.-8      	; 0x251e <_ZN9task_user3runEv+0xc3a>
    2526:	08 be       	out	0x38, r0	; 56
    2528:	ff cf       	rjmp	.-2      	; 0x2528 <_ZN9task_user3runEv+0xc44>
				for (;;);
				break;

		} // End switch state

		runs++;                             // Increment counter for debugging
    252a:	ed 81       	ldd	r30, Y+5	; 0x05
    252c:	fe 81       	ldd	r31, Y+6	; 0x06
    252e:	86 85       	ldd	r24, Z+14	; 0x0e
    2530:	97 85       	ldd	r25, Z+15	; 0x0f
    2532:	a0 89       	ldd	r26, Z+16	; 0x10
    2534:	b1 89       	ldd	r27, Z+17	; 0x11
    2536:	01 96       	adiw	r24, 0x01	; 1
    2538:	a1 1d       	adc	r26, r1
    253a:	b1 1d       	adc	r27, r1
    253c:	86 87       	std	Z+14, r24	; 0x0e
    253e:	97 87       	std	Z+15, r25	; 0x0f
    2540:	a0 8b       	std	Z+16, r26	; 0x10
    2542:	b1 8b       	std	Z+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (1));
    2544:	61 e0       	ldi	r22, 0x01	; 1
    2546:	70 e0       	ldi	r23, 0x00	; 0
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	0e 94 23 22 	call	0x4446	; 0x4446 <vTaskDelay>

	//print_main_menu();

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    2550:	fb c9       	rjmp	.-3082   	; 0x1948 <_ZN9task_user3runEv+0x64>

00002552 <_ZN9frt_queueImE16ISR_num_items_inEv>:
		 *  called only from within an interrupt service routine.
		 *  @return The number of items in the queue
		 */
		size_t ISR_num_items_in (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle));
    2552:	fc 01       	movw	r30, r24
    2554:	84 81       	ldd	r24, Z+4	; 0x04
    2556:	95 81       	ldd	r25, Z+5	; 0x05
    2558:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <uxQueueMessagesWaitingFromISR>
		}
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	08 95       	ret

00002560 <_ZN9frt_queueImE13ISR_not_emptyEv>:
		 *  an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool ISR_not_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) != 0);
    2560:	fc 01       	movw	r30, r24
    2562:	84 81       	ldd	r24, Z+4	; 0x04
    2564:	95 81       	ldd	r25, Z+5	; 0x05
    2566:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <uxQueueMessagesWaitingFromISR>
    256a:	91 e0       	ldi	r25, 0x01	; 1
    256c:	81 11       	cpse	r24, r1
    256e:	01 c0       	rjmp	.+2      	; 0x2572 <_ZN9frt_queueImE13ISR_not_emptyEv+0x12>
    2570:	90 e0       	ldi	r25, 0x00	; 0
		}
    2572:	89 2f       	mov	r24, r25
    2574:	08 95       	ret

00002576 <_ZN9frt_queueImE12ISR_is_emptyEv>:
		 *  routine. It must not be used in normal non-ISR code. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool ISR_is_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) == 0);
    2576:	fc 01       	movw	r30, r24
    2578:	84 81       	ldd	r24, Z+4	; 0x04
    257a:	95 81       	ldd	r25, Z+5	; 0x05
    257c:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <uxQueueMessagesWaitingFromISR>
    2580:	91 e0       	ldi	r25, 0x01	; 1
    2582:	81 11       	cpse	r24, r1
    2584:	90 e0       	ldi	r25, 0x00	; 0
		}
    2586:	89 2f       	mov	r24, r25
    2588:	08 95       	ret

0000258a <_ZN9frt_queueImE12num_items_inEv>:
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    258a:	fc 01       	movw	r30, r24
    258c:	84 81       	ldd	r24, Z+4	; 0x04
    258e:	95 81       	ldd	r25, Z+5	; 0x05
    2590:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <uxQueueMessagesWaiting>
		}
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	08 95       	ret

00002598 <_ZN9frt_queueImE9not_emptyEv>:
		 *  \b not be called from within an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool not_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) != 0);
    2598:	fc 01       	movw	r30, r24
    259a:	84 81       	ldd	r24, Z+4	; 0x04
    259c:	95 81       	ldd	r25, Z+5	; 0x05
    259e:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <uxQueueMessagesWaiting>
    25a2:	91 e0       	ldi	r25, 0x01	; 1
    25a4:	81 11       	cpse	r24, r1
    25a6:	01 c0       	rjmp	.+2      	; 0x25aa <_ZN9frt_queueImE9not_emptyEv+0x12>
    25a8:	90 e0       	ldi	r25, 0x00	; 0
		}
    25aa:	89 2f       	mov	r24, r25
    25ac:	08 95       	ret

000025ae <_ZN9frt_queueImE8is_emptyEv>:
		/** This method checks if the queue is empty. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool is_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) == 0);
    25ae:	fc 01       	movw	r30, r24
    25b0:	84 81       	ldd	r24, Z+4	; 0x04
    25b2:	95 81       	ldd	r25, Z+5	; 0x05
    25b4:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <uxQueueMessagesWaiting>
    25b8:	91 e0       	ldi	r25, 0x01	; 1
    25ba:	81 11       	cpse	r24, r1
    25bc:	90 e0       	ldi	r25, 0x00	; 0
		}
    25be:	89 2f       	mov	r24, r25
    25c0:	08 95       	ret

000025c2 <_ZN9frt_queueImE10get_a_copyERm>:
 *  \c xQueuePeekFromISR() which would allow copying items from a queue in an ISR. 
 *  @param item A reference to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get_a_copy (data_type& item)
    25c2:	0f 93       	push	r16
{
	xQueuePeek (handle, &item, portMAX_DELAY);
    25c4:	01 e0       	ldi	r16, 0x01	; 1
    25c6:	2f ef       	ldi	r18, 0xFF	; 255
    25c8:	3f ef       	ldi	r19, 0xFF	; 255
    25ca:	a9 01       	movw	r20, r18
    25cc:	fc 01       	movw	r30, r24
    25ce:	84 81       	ldd	r24, Z+4	; 0x04
    25d0:	95 81       	ldd	r25, Z+5	; 0x05
    25d2:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <xQueueGenericReceive>
}
    25d6:	0f 91       	pop	r16
    25d8:	08 95       	ret

000025da <_ZN9frt_queueImE10get_a_copyEv>:
 *          data type if we couldn't get any data from the queue and the attempt
 *          timed out
 */

template <class data_type>
inline data_type frt_queue<data_type>::get_a_copy (void)
    25da:	0f 93       	push	r16
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	00 d0       	rcall	.+0      	; 0x25e2 <_ZN9frt_queueImE10get_a_copyEv+0x8>
    25e2:	1f 92       	push	r1
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueuePeek (handle, &recv_item, portMAX_DELAY);
    25e8:	01 e0       	ldi	r16, 0x01	; 1
    25ea:	2f ef       	ldi	r18, 0xFF	; 255
    25ec:	3f ef       	ldi	r19, 0xFF	; 255
    25ee:	a9 01       	movw	r20, r18
    25f0:	be 01       	movw	r22, r28
    25f2:	6f 5f       	subi	r22, 0xFF	; 255
    25f4:	7f 4f       	sbci	r23, 0xFF	; 255
    25f6:	fc 01       	movw	r30, r24
    25f8:	84 81       	ldd	r24, Z+4	; 0x04
    25fa:	95 81       	ldd	r25, Z+5	; 0x05
    25fc:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <xQueueGenericReceive>
	return (recv_item);
    2600:	69 81       	ldd	r22, Y+1	; 0x01
    2602:	7a 81       	ldd	r23, Y+2	; 0x02
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2608:	24 96       	adiw	r28, 0x04	; 4
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	de bf       	out	0x3e, r29	; 62
    260e:	df 91       	pop	r29
    2610:	cf 91       	pop	r28
    2612:	0f 91       	pop	r16
    2614:	08 95       	ret

00002616 <_ZN9frt_queueImE3getEPm>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get (data_type* p_item)
    2616:	0f 93       	push	r16
{
	xQueueReceive (handle, p_item, portMAX_DELAY);
    2618:	00 e0       	ldi	r16, 0x00	; 0
    261a:	2f ef       	ldi	r18, 0xFF	; 255
    261c:	3f ef       	ldi	r19, 0xFF	; 255
    261e:	a9 01       	movw	r20, r18
    2620:	fc 01       	movw	r30, r24
    2622:	84 81       	ldd	r24, Z+4	; 0x04
    2624:	95 81       	ldd	r25, Z+5	; 0x05
    2626:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <xQueueGenericReceive>
}
    262a:	0f 91       	pop	r16
    262c:	08 95       	ret

0000262e <_ZN9frt_queueImE3getEv>:
 *  up. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::get (void)
    262e:	0f 93       	push	r16
    2630:	cf 93       	push	r28
    2632:	df 93       	push	r29
    2634:	00 d0       	rcall	.+0      	; 0x2636 <_ZN9frt_queueImE3getEv+0x8>
    2636:	1f 92       	push	r1
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceive (handle, &recv_item, portMAX_DELAY);
    263c:	00 e0       	ldi	r16, 0x00	; 0
    263e:	2f ef       	ldi	r18, 0xFF	; 255
    2640:	3f ef       	ldi	r19, 0xFF	; 255
    2642:	a9 01       	movw	r20, r18
    2644:	be 01       	movw	r22, r28
    2646:	6f 5f       	subi	r22, 0xFF	; 255
    2648:	7f 4f       	sbci	r23, 0xFF	; 255
    264a:	fc 01       	movw	r30, r24
    264c:	84 81       	ldd	r24, Z+4	; 0x04
    264e:	95 81       	ldd	r25, Z+5	; 0x05
    2650:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <xQueueGenericReceive>
	return (recv_item);
    2654:	69 81       	ldd	r22, Y+1	; 0x01
    2656:	7a 81       	ldd	r23, Y+2	; 0x02
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	9c 81       	ldd	r25, Y+4	; 0x04
}
    265c:	24 96       	adiw	r28, 0x04	; 4
    265e:	cd bf       	out	0x3d, r28	; 61
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	0f 91       	pop	r16
    2668:	08 95       	ret

0000266a <_ZN9frt_queueImE7ISR_getEPm>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::ISR_get (data_type* p_item)
    266a:	cf 93       	push	r28
    266c:	df 93       	push	r29
    266e:	1f 92       	push	r1
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
{
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, and
	// nothing will actually be copied
	xQueueReceiveFromISR (handle, p_item, &task_awakened);
    2674:	ae 01       	movw	r20, r28
    2676:	4f 5f       	subi	r20, 0xFF	; 255
    2678:	5f 4f       	sbci	r21, 0xFF	; 255
    267a:	fc 01       	movw	r30, r24
    267c:	84 81       	ldd	r24, Z+4	; 0x04
    267e:	95 81       	ldd	r25, Z+5	; 0x05
    2680:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <xQueueReceiveFromISR>
}
    2684:	0f 90       	pop	r0
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	08 95       	ret

0000268c <_ZN9frt_queueImE7ISR_getEv>:
 *  service routine. This method must not be called from within normal non-ISR code. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::ISR_get (void)
    268c:	cf 93       	push	r28
    268e:	df 93       	push	r29
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	25 97       	sbiw	r28, 0x05	; 5
    2696:	cd bf       	out	0x3d, r28	; 61
    2698:	de bf       	out	0x3e, r29	; 62
	data_type recv_item;                    // Data item read from the queue
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceiveFromISR (handle, &recv_item, &task_awakened);
    269a:	ae 01       	movw	r20, r28
    269c:	4b 5f       	subi	r20, 0xFB	; 251
    269e:	5f 4f       	sbci	r21, 0xFF	; 255
    26a0:	be 01       	movw	r22, r28
    26a2:	6f 5f       	subi	r22, 0xFF	; 255
    26a4:	7f 4f       	sbci	r23, 0xFF	; 255
    26a6:	fc 01       	movw	r30, r24
    26a8:	84 81       	ldd	r24, Z+4	; 0x04
    26aa:	95 81       	ldd	r25, Z+5	; 0x05
    26ac:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <xQueueReceiveFromISR>
	return (recv_item);
    26b0:	69 81       	ldd	r22, Y+1	; 0x01
    26b2:	7a 81       	ldd	r23, Y+2	; 0x02
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	9c 81       	ldd	r25, Y+4	; 0x04
}
    26b8:	25 96       	adiw	r28, 0x05	; 5
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	de bf       	out	0x3e, r29	; 62
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	08 95       	ret

000026c4 <_ZN9frt_queueImE11ISR_butt_inERKm>:
 *              the front of the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
bool frt_queue<data_type>::ISR_butt_in (const data_type& item)
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
    26c8:	1f 92       	push	r1
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    26ce:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;                      // Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToFrontFromISR (handle, &item, &shouldSwitch));
    26d0:	21 e0       	ldi	r18, 0x01	; 1
    26d2:	ae 01       	movw	r20, r28
    26d4:	4f 5f       	subi	r20, 0xFF	; 255
    26d6:	5f 4f       	sbci	r21, 0xFF	; 255
    26d8:	fc 01       	movw	r30, r24
    26da:	84 81       	ldd	r24, Z+4	; 0x04
    26dc:	95 81       	ldd	r25, Z+5	; 0x05
    26de:	0e 94 56 1d 	call	0x3aac	; 0x3aac <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    26e2:	91 e0       	ldi	r25, 0x01	; 1
    26e4:	81 11       	cpse	r24, r1
    26e6:	01 c0       	rjmp	.+2      	; 0x26ea <_ZN9frt_queueImE11ISR_butt_inERKm+0x26>
    26e8:	90 e0       	ldi	r25, 0x00	; 0
}
    26ea:	89 2f       	mov	r24, r25
    26ec:	0f 90       	pop	r0
    26ee:	df 91       	pop	r29
    26f0:	cf 91       	pop	r28
    26f2:	08 95       	ret

000026f4 <_ZN9frt_queueImE7ISR_putERKm>:
 *  @param item Reference to the item which is going to be put into the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
inline bool frt_queue<data_type>::ISR_put (const data_type& item)
    26f4:	cf 93       	push	r28
    26f6:	df 93       	push	r29
    26f8:	1f 92       	push	r1
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    26fe:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;						// Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToBackFromISR (handle, &item, &shouldSwitch));
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	ae 01       	movw	r20, r28
    2704:	4f 5f       	subi	r20, 0xFF	; 255
    2706:	5f 4f       	sbci	r21, 0xFF	; 255
    2708:	fc 01       	movw	r30, r24
    270a:	84 81       	ldd	r24, Z+4	; 0x04
    270c:	95 81       	ldd	r25, Z+5	; 0x05
    270e:	0e 94 56 1d 	call	0x3aac	; 0x3aac <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    2712:	91 e0       	ldi	r25, 0x01	; 1
    2714:	81 11       	cpse	r24, r1
    2716:	01 c0       	rjmp	.+2      	; 0x271a <_ZN9frt_queueImE7ISR_putERKm+0x26>
    2718:	90 e0       	ldi	r25, 0x00	; 0
}
    271a:	89 2f       	mov	r24, r25
    271c:	0f 90       	pop	r0
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	08 95       	ret

00002724 <_ZN9frt_queueImE7butt_inERKm>:
		 *  \b not be used within an interrupt service routine. 
		 *  @param item Reference to the item which is going to be (rudely) put into 
		 *              the front of the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool butt_in (const data_type& item)
    2724:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToFront (handle, &item, ticks_to_wait)));
    2726:	fc 01       	movw	r30, r24
    2728:	26 81       	ldd	r18, Z+6	; 0x06
    272a:	37 81       	ldd	r19, Z+7	; 0x07
    272c:	40 85       	ldd	r20, Z+8	; 0x08
    272e:	51 85       	ldd	r21, Z+9	; 0x09
    2730:	01 e0       	ldi	r16, 0x01	; 1
    2732:	84 81       	ldd	r24, Z+4	; 0x04
    2734:	95 81       	ldd	r25, Z+5	; 0x05
    2736:	0e 94 bb 1c 	call	0x3976	; 0x3976 <xQueueGenericSend>
    273a:	91 e0       	ldi	r25, 0x01	; 1
    273c:	81 11       	cpse	r24, r1
    273e:	01 c0       	rjmp	.+2      	; 0x2742 <_ZN9frt_queueImE7butt_inERKm+0x1e>
    2740:	90 e0       	ldi	r25, 0x00	; 0
		}
    2742:	89 2f       	mov	r24, r25
    2744:	0f 91       	pop	r16
    2746:	08 95       	ret

00002748 <_ZN9frt_queueImE3putERKm>:
		 *  an item into the front of the queue so it will be retreived first, use 
		 *  \c butt_in() instead. This method must \b not be used within an ISR.
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
    2748:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
    274a:	fc 01       	movw	r30, r24
    274c:	26 81       	ldd	r18, Z+6	; 0x06
    274e:	37 81       	ldd	r19, Z+7	; 0x07
    2750:	40 85       	ldd	r20, Z+8	; 0x08
    2752:	51 85       	ldd	r21, Z+9	; 0x09
    2754:	00 e0       	ldi	r16, 0x00	; 0
    2756:	84 81       	ldd	r24, Z+4	; 0x04
    2758:	95 81       	ldd	r25, Z+5	; 0x05
    275a:	0e 94 bb 1c 	call	0x3976	; 0x3976 <xQueueGenericSend>
    275e:	91 e0       	ldi	r25, 0x01	; 1
    2760:	81 11       	cpse	r24, r1
    2762:	01 c0       	rjmp	.+2      	; 0x2766 <_ZN9frt_queueImE3putERKm+0x1e>
    2764:	90 e0       	ldi	r25, 0x00	; 0
		}
    2766:	89 2f       	mov	r24, r25
    2768:	0f 91       	pop	r16
    276a:	08 95       	ret

0000276c <_Z8CCPWritePVhh>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    276c:	0f 93       	push	r16
    276e:	cf 93       	push	r28
    2770:	df 93       	push	r29
    2772:	1f 92       	push	r1
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
  #if defined __GNUC__
  uint8_t volatile saved_sreg = SREG;
    2778:	2f b7       	in	r18, 0x3f	; 63
    277a:	29 83       	std	Y+1, r18	; 0x01
  cli();
    277c:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
  #ifdef RAMPZ
  RAMPZ = 0;
    277e:	1b be       	out	0x3b, r1	; 59
  "out   %3, r16"       "\n\t"
  "st     Z,  %1"       "\n\t"
  :
  : "r" (tmpAddr), "r" (value), "M" (0xD8), "i" (&CCP)
  : "r16", "r30", "r31"
  );
    2780:	fc 01       	movw	r30, r24
    2782:	08 ed       	ldi	r16, 0xD8	; 216
    2784:	04 bf       	out	0x34, r16	; 52
    2786:	60 83       	st	Z, r22

  SREG = saved_sreg;
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	8f bf       	out	0x3f, r24	; 63
  #endif
}
    278c:	0f 90       	pop	r0
    278e:	df 91       	pop	r29
    2790:	cf 91       	pop	r28
    2792:	0f 91       	pop	r16
    2794:	08 95       	ret

00002796 <main>:
 *  reset.
 *  @return This is a real-time microcontroller program which doesn't return. Ever.
 */

int main (void)
{
    2796:	6f 92       	push	r6
    2798:	7f 92       	push	r7
    279a:	8f 92       	push	r8
    279c:	9f 92       	push	r9
    279e:	af 92       	push	r10
    27a0:	bf 92       	push	r11
    27a2:	cf 92       	push	r12
    27a4:	df 92       	push	r13
    27a6:	ef 92       	push	r14
    27a8:	ff 92       	push	r15
    27aa:	0f 93       	push	r16
    27ac:	1f 93       	push	r17
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	6d 97       	sbiw	r28, 0x1d	; 29
    27b8:	cd bf       	out	0x3d, r28	; 61
    27ba:	de bf       	out	0x3e, r29	; 62
  cli();
    27bc:	f8 94       	cli
  // Configure the system clock
  { 
    // Enable the 32MHz internal RC oscillator and the external 32KHz oscillator
    OSC.CTRL |= (1 << OSC_RC32MEN_bp);
    27be:	e0 e5       	ldi	r30, 0x50	; 80
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	82 60       	ori	r24, 0x02	; 2
    27c6:	80 83       	st	Z, r24
    do {} while((OSC.STATUS & (1 << OSC_RC32MRDY_bp)) != (1 << OSC_RC32MRDY_bp));
    27c8:	81 81       	ldd	r24, Z+1	; 0x01
    27ca:	81 ff       	sbrs	r24, 1
    27cc:	fd cf       	rjmp	.-6      	; 0x27c8 <main+0x32>

    // Select the clock
    CCPWrite(&(CLK.CTRL),((CLK.CTRL & ~CLK_SCLKSEL_gm) | (1 << CLK_SCLKSEL0_bp)));
    27ce:	60 91 40 00 	lds	r22, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    27d2:	68 7f       	andi	r22, 0xF8	; 248
    27d4:	61 60       	ori	r22, 0x01	; 1
    27d6:	80 e4       	ldi	r24, 0x40	; 64
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	0e 94 b6 13 	call	0x276c	; 0x276c <_Z8CCPWritePVhh>
    
    // Disable the 2MHz internal RC oscillator
    OSC.CTRL &= ~(1 << OSC_RC2MEN_bp);
    27de:	e0 e5       	ldi	r30, 0x50	; 80
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	8e 7f       	andi	r24, 0xFE	; 254
    27e6:	80 83       	st	Z, r24
  }
  
  // Disable the watchdog timer unless it's needed later. This is important because
  // sometimes the watchdog timer may have been left on...and it tends to stay on  
  wdt_disable ();
    27e8:	9d ef       	ldi	r25, 0xFD	; 253
    27ea:	88 ed       	ldi	r24, 0xD8	; 216
    27ec:	08 b6       	in	r0, 0x38	; 56
    27ee:	18 be       	out	0x38, r1	; 56
    27f0:	84 bf       	out	0x34, r24	; 52
    27f2:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    27f6:	08 be       	out	0x38, r0	; 56

  // Configure a serial port which can be used by a task to print debugging infor-
  // mation, or to allow user interaction, or for whatever use is appropriate.  The
  // serial port will be used by the user interface task after setup is complete and
  // the task scheduler has been started by the function vTaskStartScheduler()
  rs232 ser_dev(0,&USARTE0); // Create a serial device on USART E0
    27f8:	40 ea       	ldi	r20, 0xA0	; 160
    27fa:	5a e0       	ldi	r21, 0x0A	; 10
    27fc:	60 e0       	ldi	r22, 0x00	; 0
    27fe:	70 e0       	ldi	r23, 0x00	; 0
    2800:	ce 01       	movw	r24, r28
    2802:	01 96       	adiw	r24, 0x01	; 1
    2804:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <_ZN5rs232C1EjP12USART_struct>
  ser_dev << clrscr << "FreeRTOS Xmega Testing Program" << endl << endl;
    2808:	67 e0       	ldi	r22, 0x07	; 7
    280a:	ce 01       	movw	r24, r28
    280c:	01 96       	adiw	r24, 0x01	; 1
    280e:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    2812:	3c 01       	movw	r6, r24
    2814:	6f e2       	ldi	r22, 0x2F	; 47
    2816:	70 e2       	ldi	r23, 0x20	; 32
    2818:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    281c:	66 e0       	ldi	r22, 0x06	; 6
    281e:	c3 01       	movw	r24, r6
    2820:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    2824:	66 e0       	ldi	r22, 0x06	; 6
    2826:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	f8 94       	cli
    282e:	0f 92       	push	r0
			the_data = new_data;
    2830:	82 e0       	ldi	r24, 0x02	; 2
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	a0 e0       	ldi	r26, 0x00	; 0
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	80 93 4f 21 	sts	0x214F, r24	; 0x80214f <sensor_delay>
    283c:	90 93 50 21 	sts	0x2150, r25	; 0x802150 <sensor_delay+0x1>
    2840:	a0 93 51 21 	sts	0x2151, r26	; 0x802151 <sensor_delay+0x2>
    2844:	b0 93 52 21 	sts	0x2152, r27	; 0x802152 <sensor_delay+0x3>
			portEXIT_CRITICAL ();
    2848:	0f 90       	pop	r0
    284a:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	f8 94       	cli
    2850:	0f 92       	push	r0
			the_data = new_data;
    2852:	88 e0       	ldi	r24, 0x08	; 8
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	a0 e0       	ldi	r26, 0x00	; 0
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	80 93 4b 21 	sts	0x214B, r24	; 0x80214b <microstep_scaler>
    285e:	90 93 4c 21 	sts	0x214C, r25	; 0x80214c <microstep_scaler+0x1>
    2862:	a0 93 4d 21 	sts	0x214D, r26	; 0x80214d <microstep_scaler+0x2>
    2866:	b0 93 4e 21 	sts	0x214E, r27	; 0x80214e <microstep_scaler+0x3>
			portEXIT_CRITICAL ();
    286a:	0f 90       	pop	r0
    286c:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	0f 92       	push	r0
			the_data = new_data;
    2874:	88 ee       	ldi	r24, 0xE8	; 232
    2876:	93 e0       	ldi	r25, 0x03	; 3
    2878:	a0 e0       	ldi	r26, 0x00	; 0
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	80 93 54 21 	sts	0x2154, r24	; 0x802154 <sensor_sample_number>
    2880:	90 93 55 21 	sts	0x2155, r25	; 0x802155 <sensor_sample_number+0x1>
    2884:	a0 93 56 21 	sts	0x2156, r26	; 0x802156 <sensor_sample_number+0x2>
    2888:	b0 93 57 21 	sts	0x2157, r27	; 0x802157 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    288c:	0f 90       	pop	r0
    288e:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	f8 94       	cli
    2894:	0f 92       	push	r0
			the_data = new_data;
    2896:	82 e3       	ldi	r24, 0x32	; 50
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	a0 e0       	ldi	r26, 0x00	; 0
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	80 93 25 21 	sts	0x2125, r24	; 0x802125 <ramp_run_span>
    28a2:	90 93 26 21 	sts	0x2126, r25	; 0x802126 <ramp_run_span+0x1>
    28a6:	a0 93 27 21 	sts	0x2127, r26	; 0x802127 <ramp_run_span+0x2>
    28aa:	b0 93 28 21 	sts	0x2128, r27	; 0x802128 <ramp_run_span+0x3>
			portEXIT_CRITICAL ();
    28ae:	0f 90       	pop	r0
    28b0:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	0f 92       	push	r0
			the_data = new_data;
    28b8:	8c e4       	ldi	r24, 0x4C	; 76
    28ba:	9d e1       	ldi	r25, 0x1D	; 29
    28bc:	a0 e0       	ldi	r26, 0x00	; 0
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <gen_max_v>
    28c4:	90 93 20 21 	sts	0x2120, r25	; 0x802120 <gen_max_v+0x1>
    28c8:	a0 93 21 21 	sts	0x2121, r26	; 0x802121 <gen_max_v+0x2>
    28cc:	b0 93 22 21 	sts	0x2122, r27	; 0x802122 <gen_max_v+0x3>
			portEXIT_CRITICAL ();
    28d0:	0f 90       	pop	r0
    28d2:	0f be       	out	0x3f, r0	; 63
  adc = new ADC(&ADCB, &(ADCB.CH0));
  sbg01 = new SBG01(adc, 6.28930818);
  #endif

  #ifdef USE_FAKE_DRIVERS
  sbg01 = new SBG01 ( ) ;
    28d4:	8a e1       	ldi	r24, 0x1A	; 26
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
    28dc:	80 93 1d 21 	sts	0x211D, r24	; 0x80211d <sbg01>
    28e0:	90 93 1e 21 	sts	0x211E, r25	; 0x80211e <sbg01+0x1>
  lim_z1 = new DeviceDriver::LimitSwitch ( &PORTF, PIN1_bm, 0, 0, EVSYS_CHMUX_PORTF_PIN1_gc);
  lim_z2 = new DeviceDriver::LimitSwitch ( &PORTF, PIN2_bm, 0, 1, EVSYS_CHMUX_PORTF_PIN2_gc);
  #endif

  #ifdef USE_FAKE_DRIVERS
  lim_x1 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    28e4:	87 e0       	ldi	r24, 0x07	; 7
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
    28ec:	7c 01       	movw	r14, r24
    28ee:	83 e0       	ldi	r24, 0x03	; 3
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
  {  
  public:
    typedef PeripheralDriver::EventInterrupt EventInterrupt;

    inline LimitSwitch( EventInterrupt * i )
      : interrupt_(i)
    28f6:	fc 01       	movw	r30, r24
    28f8:	e0 82       	st	Z, r14
    28fa:	f1 82       	std	Z+1, r15	; 0x01
    28fc:	80 93 1b 21 	sts	0x211B, r24	; 0x80211b <lim_x1>
    2900:	90 93 1c 21 	sts	0x211C, r25	; 0x80211c <lim_x1+0x1>
  lim_x2 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    2904:	87 e0       	ldi	r24, 0x07	; 7
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
    290c:	7c 01       	movw	r14, r24
    290e:	83 e0       	ldi	r24, 0x03	; 3
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
    2916:	fc 01       	movw	r30, r24
    2918:	e0 82       	st	Z, r14
    291a:	f1 82       	std	Z+1, r15	; 0x01
    291c:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <lim_x2>
    2920:	90 93 1a 21 	sts	0x211A, r25	; 0x80211a <lim_x2+0x1>
  lim_y1 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    2924:	87 e0       	ldi	r24, 0x07	; 7
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
    292c:	7c 01       	movw	r14, r24
    292e:	83 e0       	ldi	r24, 0x03	; 3
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
    2936:	fc 01       	movw	r30, r24
    2938:	e0 82       	st	Z, r14
    293a:	f1 82       	std	Z+1, r15	; 0x01
    293c:	80 93 17 21 	sts	0x2117, r24	; 0x802117 <lim_y1>
    2940:	90 93 18 21 	sts	0x2118, r25	; 0x802118 <lim_y1+0x1>
  lim_y2 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    2944:	87 e0       	ldi	r24, 0x07	; 7
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
    294c:	7c 01       	movw	r14, r24
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
    2956:	fc 01       	movw	r30, r24
    2958:	e0 82       	st	Z, r14
    295a:	f1 82       	std	Z+1, r15	; 0x01
    295c:	80 93 15 21 	sts	0x2115, r24	; 0x802115 <lim_y2>
    2960:	90 93 16 21 	sts	0x2116, r25	; 0x802116 <lim_y2+0x1>
  lim_z1 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    2964:	87 e0       	ldi	r24, 0x07	; 7
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
    296c:	7c 01       	movw	r14, r24
    296e:	83 e0       	ldi	r24, 0x03	; 3
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
    2976:	fc 01       	movw	r30, r24
    2978:	e0 82       	st	Z, r14
    297a:	f1 82       	std	Z+1, r15	; 0x01
    297c:	80 93 13 21 	sts	0x2113, r24	; 0x802113 <lim_z1>
    2980:	90 93 14 21 	sts	0x2114, r25	; 0x802114 <lim_z1+0x1>
  lim_z2 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    2984:	87 e0       	ldi	r24, 0x07	; 7
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
    298c:	7c 01       	movw	r14, r24
    298e:	83 e0       	ldi	r24, 0x03	; 3
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
    2996:	fc 01       	movw	r30, r24
    2998:	e0 82       	st	Z, r14
    299a:	f1 82       	std	Z+1, r15	; 0x01
    299c:	80 93 11 21 	sts	0x2111, r24	; 0x802111 <lim_z2>
    29a0:	90 93 12 21 	sts	0x2112, r25	; 0x802112 <lim_z2+0x1>
  #endif
  
  
  // The user interface is at low priority; it could have been run in the idle task
  // but it is desired to exercise the RTOS more thoroughly in this test program
  new task_user ( "UserInt", task_priority (0), 128, &ser_dev ) ;
    29a4:	83 e2       	ldi	r24, 0x23	; 35
    29a6:	91 e0       	ldi	r25, 0x01	; 1
    29a8:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
    29ac:	8e 01       	movw	r16, r28
    29ae:	0f 5f       	subi	r16, 0xFF	; 255
    29b0:	1f 4f       	sbci	r17, 0xFF	; 255
    29b2:	20 e8       	ldi	r18, 0x80	; 128
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	40 e0       	ldi	r20, 0x00	; 0
    29b8:	6e e4       	ldi	r22, 0x4E	; 78
    29ba:	70 e2       	ldi	r23, 0x20	; 32
    29bc:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN9task_userC1EPKchjP8emstream>
  
  new taskMotion("MDX", task_priority(8), 128, &ser_dev, md_x, lim_x1, lim_x2, &xlocations,
  &x_max_velocity, &xmotor_on, &xmotor_complete, 8);
    29c0:	8a e4       	ldi	r24, 0x4A	; 74
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
    29c8:	a0 90 19 21 	lds	r10, 0x2119	; 0x802119 <lim_x2>
    29cc:	b0 90 1a 21 	lds	r11, 0x211A	; 0x80211a <lim_x2+0x1>
    29d0:	c0 90 1b 21 	lds	r12, 0x211B	; 0x80211b <lim_x1>
    29d4:	d0 90 1c 21 	lds	r13, 0x211C	; 0x80211c <lim_x1+0x1>
    29d8:	e0 90 0f 21 	lds	r14, 0x210F	; 0x80210f <md_x>
    29dc:	f0 90 10 21 	lds	r15, 0x2110	; 0x802110 <md_x+0x1>
    29e0:	1f 92       	push	r1
    29e2:	68 94       	set
    29e4:	77 24       	eor	r7, r7
    29e6:	73 f8       	bld	r7, 3
    29e8:	7f 92       	push	r7
    29ea:	20 e6       	ldi	r18, 0x60	; 96
    29ec:	31 e2       	ldi	r19, 0x21	; 33
    29ee:	3f 93       	push	r19
    29f0:	2f 93       	push	r18
    29f2:	28 ed       	ldi	r18, 0xD8	; 216
    29f4:	30 e2       	ldi	r19, 0x20	; 32
    29f6:	3f 93       	push	r19
    29f8:	2f 93       	push	r18
    29fa:	2d e3       	ldi	r18, 0x3D	; 61
    29fc:	31 e2       	ldi	r19, 0x21	; 33
    29fe:	3f 93       	push	r19
    2a00:	2f 93       	push	r18
    2a02:	0f 2e       	mov	r0, r31
    2a04:	f1 ef       	ldi	r31, 0xF1	; 241
    2a06:	8f 2e       	mov	r8, r31
    2a08:	f0 e2       	ldi	r31, 0x20	; 32
    2a0a:	9f 2e       	mov	r9, r31
    2a0c:	f0 2d       	mov	r31, r0
    2a0e:	20 e8       	ldi	r18, 0x80	; 128
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	44 e0       	ldi	r20, 0x04	; 4
    2a14:	66 e5       	ldi	r22, 0x56	; 86
    2a16:	70 e2       	ldi	r23, 0x20	; 32
    2a18:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN10taskMotionC1EPKchjP8emstreamPN12DeviceDriver6DM542TEPNS4_11LimitSwitchES8_P9frt_queueImESB_P11shared_dataIhEPSC_IbEj>
  
  new taskMotion("MDY", task_priority(8), 128, &ser_dev, md_y, lim_y1, lim_y2, &ylocations,
  &y_max_velocity, &ymotor_on, &ymotor_complete, 8);
    2a1c:	8a e4       	ldi	r24, 0x4A	; 74
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
    2a24:	a0 90 15 21 	lds	r10, 0x2115	; 0x802115 <lim_y2>
    2a28:	b0 90 16 21 	lds	r11, 0x2116	; 0x802116 <lim_y2+0x1>
    2a2c:	c0 90 17 21 	lds	r12, 0x2117	; 0x802117 <lim_y1>
    2a30:	d0 90 18 21 	lds	r13, 0x2118	; 0x802118 <lim_y1+0x1>
    2a34:	e0 90 0d 21 	lds	r14, 0x210D	; 0x80210d <md_y>
    2a38:	f0 90 0e 21 	lds	r15, 0x210E	; 0x80210e <md_y+0x1>
    2a3c:	1f 92       	push	r1
    2a3e:	7f 92       	push	r7
    2a40:	2f e5       	ldi	r18, 0x5F	; 95
    2a42:	31 e2       	ldi	r19, 0x21	; 33
    2a44:	3f 93       	push	r19
    2a46:	2f 93       	push	r18
    2a48:	27 ed       	ldi	r18, 0xD7	; 215
    2a4a:	30 e2       	ldi	r19, 0x20	; 32
    2a4c:	3f 93       	push	r19
    2a4e:	2f 93       	push	r18
    2a50:	23 e3       	ldi	r18, 0x33	; 51
    2a52:	31 e2       	ldi	r19, 0x21	; 33
    2a54:	3f 93       	push	r19
    2a56:	2f 93       	push	r18
    2a58:	0f 2e       	mov	r0, r31
    2a5a:	f7 ee       	ldi	r31, 0xE7	; 231
    2a5c:	8f 2e       	mov	r8, r31
    2a5e:	f0 e2       	ldi	r31, 0x20	; 32
    2a60:	9f 2e       	mov	r9, r31
    2a62:	f0 2d       	mov	r31, r0
    2a64:	20 e8       	ldi	r18, 0x80	; 128
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	44 e0       	ldi	r20, 0x04	; 4
    2a6a:	6a e5       	ldi	r22, 0x5A	; 90
    2a6c:	70 e2       	ldi	r23, 0x20	; 32
    2a6e:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN10taskMotionC1EPKchjP8emstreamPN12DeviceDriver6DM542TEPNS4_11LimitSwitchES8_P9frt_queueImESB_P11shared_dataIhEPSC_IbEj>
  
  new taskMotion("MDZ", task_priority(8), 128, &ser_dev, md_z, lim_z1, lim_z2, &zlocations,
  &z_max_velocity, &zmotor_on, &zmotor_complete, 8);
    2a72:	8a e4       	ldi	r24, 0x4A	; 74
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
    2a7a:	a0 90 11 21 	lds	r10, 0x2111	; 0x802111 <lim_z2>
    2a7e:	b0 90 12 21 	lds	r11, 0x2112	; 0x802112 <lim_z2+0x1>
    2a82:	c0 90 13 21 	lds	r12, 0x2113	; 0x802113 <lim_z1>
    2a86:	d0 90 14 21 	lds	r13, 0x2114	; 0x802114 <lim_z1+0x1>
    2a8a:	e0 90 0b 21 	lds	r14, 0x210B	; 0x80210b <md_z>
    2a8e:	f0 90 0c 21 	lds	r15, 0x210C	; 0x80210c <md_z+0x1>
    2a92:	1f 92       	push	r1
    2a94:	7f 92       	push	r7
    2a96:	2e e5       	ldi	r18, 0x5E	; 94
    2a98:	31 e2       	ldi	r19, 0x21	; 33
    2a9a:	3f 93       	push	r19
    2a9c:	2f 93       	push	r18
    2a9e:	26 ed       	ldi	r18, 0xD6	; 214
    2aa0:	30 e2       	ldi	r19, 0x20	; 32
    2aa2:	3f 93       	push	r19
    2aa4:	2f 93       	push	r18
    2aa6:	29 e2       	ldi	r18, 0x29	; 41
    2aa8:	31 e2       	ldi	r19, 0x21	; 33
    2aaa:	3f 93       	push	r19
    2aac:	2f 93       	push	r18
    2aae:	0f 2e       	mov	r0, r31
    2ab0:	fd ed       	ldi	r31, 0xDD	; 221
    2ab2:	8f 2e       	mov	r8, r31
    2ab4:	f0 e2       	ldi	r31, 0x20	; 32
    2ab6:	9f 2e       	mov	r9, r31
    2ab8:	f0 2d       	mov	r31, r0
    2aba:	20 e8       	ldi	r18, 0x80	; 128
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	44 e0       	ldi	r20, 0x04	; 4
    2ac0:	6e e5       	ldi	r22, 0x5E	; 94
    2ac2:	70 e2       	ldi	r23, 0x20	; 32
    2ac4:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN10taskMotionC1EPKchjP8emstreamPN12DeviceDriver6DM542TEPNS4_11LimitSwitchES8_P9frt_queueImESB_P11shared_dataIhEPSC_IbEj>
  //   8 );
  
  // new task_md ("MDZ", task_priority(8), 128, &ser_dev, 
  //   8 );
  
  new task_sensor ("Gardon_Gauge", task_priority(9), 500, &ser_dev, sbg01);
    2ac8:	83 e2       	ldi	r24, 0x23	; 35
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	0e 94 20 26 	call	0x4c40	; 0x4c40 <_Znwj>
    2ad0:	e0 90 1d 21 	lds	r14, 0x211D	; 0x80211d <sbg01>
    2ad4:	f0 90 1e 21 	lds	r15, 0x211E	; 0x80211e <sbg01+0x1>
    2ad8:	24 ef       	ldi	r18, 0xF4	; 244
    2ada:	31 e0       	ldi	r19, 0x01	; 1
    2adc:	44 e0       	ldi	r20, 0x04	; 4
    2ade:	62 e6       	ldi	r22, 0x62	; 98
    2ae0:	70 e2       	ldi	r23, 0x20	; 32
    2ae2:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN11task_sensorC1EPKchjP8emstreamP5SBG01>
  //new task_thermocouple ("Therm9", task_priority(6), 128, &ser_dev, therm9);
  //
  //new task_thermocouple ("Therm10", task_priority(6), 128, &ser_dev, therm10);
  
  // Enable high level interrupts and global interrupts
  PMIC_CTRL = (1 << PMIC_HILVLEN_bp | 1 << PMIC_MEDLVLEN_bp | 1 << PMIC_LOLVLEN_bp);
    2ae6:	87 e0       	ldi	r24, 0x07	; 7
    2ae8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
  sei();
    2aec:	78 94       	sei

    //initialization_complete.put(false);
  
  // Here's where the RTOS scheduler is started up. It should never exit as long as
  // power is on and the microcontroller isn't rebooted
  vTaskStartScheduler ();
    2aee:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <vTaskStartScheduler>
}
    2af2:	cd bf       	out	0x3d, r28	; 61
    2af4:	de bf       	out	0x3e, r29	; 62
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	6d 96       	adiw	r28, 0x1d	; 29
    2afc:	cd bf       	out	0x3d, r28	; 61
    2afe:	de bf       	out	0x3e, r29	; 62
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	1f 91       	pop	r17
    2b06:	0f 91       	pop	r16
    2b08:	ff 90       	pop	r15
    2b0a:	ef 90       	pop	r14
    2b0c:	df 90       	pop	r13
    2b0e:	cf 90       	pop	r12
    2b10:	bf 90       	pop	r11
    2b12:	af 90       	pop	r10
    2b14:	9f 90       	pop	r9
    2b16:	8f 90       	pop	r8
    2b18:	7f 90       	pop	r7
    2b1a:	6f 90       	pop	r6
    2b1c:	08 95       	ret

00002b1e <__vector_66>:

ISR(PORTA_INT0_vect)
{
    2b1e:	1f 92       	push	r1
    2b20:	0f 92       	push	r0
    2b22:	0f b6       	in	r0, 0x3f	; 63
    2b24:	0f 92       	push	r0
    2b26:	11 24       	eor	r1, r1
    2b28:	0b b6       	in	r0, 0x3b	; 59
    2b2a:	0f 92       	push	r0
    2b2c:	2f 93       	push	r18
    2b2e:	3f 93       	push	r19
    2b30:	4f 93       	push	r20
    2b32:	5f 93       	push	r21
    2b34:	6f 93       	push	r22
    2b36:	7f 93       	push	r23
    2b38:	8f 93       	push	r24
    2b3a:	9f 93       	push	r25
    2b3c:	af 93       	push	r26
    2b3e:	bf 93       	push	r27
    2b40:	ef 93       	push	r30
    2b42:	ff 93       	push	r31
  md_x->min_bound_interrupt_handler();
    2b44:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <md_x>
    2b48:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <md_x+0x1>
    2b4c:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZN12DeviceDriver6DM542T27min_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_x->get_direction() == 1)
    2b50:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    2b54:	88 23       	and	r24, r24
    2b56:	79 f0       	breq	.+30     	; 0x2b76 <__vector_66+0x58>
    2b58:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <md_x>
    2b5c:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <md_x+0x1>
    2b60:	dc 01       	movw	r26, r24
    2b62:	ed 91       	ld	r30, X+
    2b64:	fc 91       	ld	r31, X
    2b66:	06 84       	ldd	r0, Z+14	; 0x0e
    2b68:	f7 85       	ldd	r31, Z+15	; 0x0f
    2b6a:	e0 2d       	mov	r30, r0
    2b6c:	19 95       	eicall
    2b6e:	81 30       	cpi	r24, 0x01	; 1
    2b70:	11 f4       	brne	.+4      	; 0x2b76 <__vector_66+0x58>
		*  default case on most small microcontrollers. 
		*  @param new_data The data which is to be written into the shared data item
		*/
		void ISR_put (data_type new_data)
		{
			the_data = new_data;
    2b72:	80 93 24 21 	sts	0x2124, r24	; 0x802124 <reset>
  {
    reset.ISR_put(true);
  }
}
    2b76:	ff 91       	pop	r31
    2b78:	ef 91       	pop	r30
    2b7a:	bf 91       	pop	r27
    2b7c:	af 91       	pop	r26
    2b7e:	9f 91       	pop	r25
    2b80:	8f 91       	pop	r24
    2b82:	7f 91       	pop	r23
    2b84:	6f 91       	pop	r22
    2b86:	5f 91       	pop	r21
    2b88:	4f 91       	pop	r20
    2b8a:	3f 91       	pop	r19
    2b8c:	2f 91       	pop	r18
    2b8e:	0f 90       	pop	r0
    2b90:	0b be       	out	0x3b, r0	; 59
    2b92:	0f 90       	pop	r0
    2b94:	0f be       	out	0x3f, r0	; 63
    2b96:	0f 90       	pop	r0
    2b98:	1f 90       	pop	r1
    2b9a:	18 95       	reti

00002b9c <__vector_67>:

ISR(PORTA_INT1_vect)
{
    2b9c:	1f 92       	push	r1
    2b9e:	0f 92       	push	r0
    2ba0:	0f b6       	in	r0, 0x3f	; 63
    2ba2:	0f 92       	push	r0
    2ba4:	11 24       	eor	r1, r1
    2ba6:	0b b6       	in	r0, 0x3b	; 59
    2ba8:	0f 92       	push	r0
    2baa:	2f 93       	push	r18
    2bac:	3f 93       	push	r19
    2bae:	4f 93       	push	r20
    2bb0:	5f 93       	push	r21
    2bb2:	6f 93       	push	r22
    2bb4:	7f 93       	push	r23
    2bb6:	8f 93       	push	r24
    2bb8:	9f 93       	push	r25
    2bba:	af 93       	push	r26
    2bbc:	bf 93       	push	r27
    2bbe:	ef 93       	push	r30
    2bc0:	ff 93       	push	r31
  md_x->max_bound_interrupt_handler();
    2bc2:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <md_x>
    2bc6:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <md_x+0x1>
    2bca:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN12DeviceDriver6DM542T27max_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_x->get_direction() == 0)
    2bce:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    2bd2:	88 23       	and	r24, r24
    2bd4:	81 f0       	breq	.+32     	; 0x2bf6 <__vector_67+0x5a>
    2bd6:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <md_x>
    2bda:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <md_x+0x1>
    2bde:	dc 01       	movw	r26, r24
    2be0:	ed 91       	ld	r30, X+
    2be2:	fc 91       	ld	r31, X
    2be4:	06 84       	ldd	r0, Z+14	; 0x0e
    2be6:	f7 85       	ldd	r31, Z+15	; 0x0f
    2be8:	e0 2d       	mov	r30, r0
    2bea:	19 95       	eicall
    2bec:	81 11       	cpse	r24, r1
    2bee:	03 c0       	rjmp	.+6      	; 0x2bf6 <__vector_67+0x5a>
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	80 93 24 21 	sts	0x2124, r24	; 0x802124 <reset>
  {
    reset.ISR_put(true);
  }
}
    2bf6:	ff 91       	pop	r31
    2bf8:	ef 91       	pop	r30
    2bfa:	bf 91       	pop	r27
    2bfc:	af 91       	pop	r26
    2bfe:	9f 91       	pop	r25
    2c00:	8f 91       	pop	r24
    2c02:	7f 91       	pop	r23
    2c04:	6f 91       	pop	r22
    2c06:	5f 91       	pop	r21
    2c08:	4f 91       	pop	r20
    2c0a:	3f 91       	pop	r19
    2c0c:	2f 91       	pop	r18
    2c0e:	0f 90       	pop	r0
    2c10:	0b be       	out	0x3b, r0	; 59
    2c12:	0f 90       	pop	r0
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	0f 90       	pop	r0
    2c18:	1f 90       	pop	r1
    2c1a:	18 95       	reti

00002c1c <__vector_43>:

ISR(PORTE_INT0_vect)
{
    2c1c:	1f 92       	push	r1
    2c1e:	0f 92       	push	r0
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	0f 92       	push	r0
    2c24:	11 24       	eor	r1, r1
    2c26:	0b b6       	in	r0, 0x3b	; 59
    2c28:	0f 92       	push	r0
    2c2a:	2f 93       	push	r18
    2c2c:	3f 93       	push	r19
    2c2e:	4f 93       	push	r20
    2c30:	5f 93       	push	r21
    2c32:	6f 93       	push	r22
    2c34:	7f 93       	push	r23
    2c36:	8f 93       	push	r24
    2c38:	9f 93       	push	r25
    2c3a:	af 93       	push	r26
    2c3c:	bf 93       	push	r27
    2c3e:	ef 93       	push	r30
    2c40:	ff 93       	push	r31
  md_y->min_bound_interrupt_handler();
    2c42:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <md_y>
    2c46:	90 91 0e 21 	lds	r25, 0x210E	; 0x80210e <md_y+0x1>
    2c4a:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZN12DeviceDriver6DM542T27min_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_y->get_direction() == 1)
    2c4e:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    2c52:	88 23       	and	r24, r24
    2c54:	79 f0       	breq	.+30     	; 0x2c74 <__vector_43+0x58>
    2c56:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <md_y>
    2c5a:	90 91 0e 21 	lds	r25, 0x210E	; 0x80210e <md_y+0x1>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	ed 91       	ld	r30, X+
    2c62:	fc 91       	ld	r31, X
    2c64:	06 84       	ldd	r0, Z+14	; 0x0e
    2c66:	f7 85       	ldd	r31, Z+15	; 0x0f
    2c68:	e0 2d       	mov	r30, r0
    2c6a:	19 95       	eicall
    2c6c:	81 30       	cpi	r24, 0x01	; 1
    2c6e:	11 f4       	brne	.+4      	; 0x2c74 <__vector_43+0x58>
    2c70:	80 93 24 21 	sts	0x2124, r24	; 0x802124 <reset>
  {
    reset.ISR_put(true);
  }
}
    2c74:	ff 91       	pop	r31
    2c76:	ef 91       	pop	r30
    2c78:	bf 91       	pop	r27
    2c7a:	af 91       	pop	r26
    2c7c:	9f 91       	pop	r25
    2c7e:	8f 91       	pop	r24
    2c80:	7f 91       	pop	r23
    2c82:	6f 91       	pop	r22
    2c84:	5f 91       	pop	r21
    2c86:	4f 91       	pop	r20
    2c88:	3f 91       	pop	r19
    2c8a:	2f 91       	pop	r18
    2c8c:	0f 90       	pop	r0
    2c8e:	0b be       	out	0x3b, r0	; 59
    2c90:	0f 90       	pop	r0
    2c92:	0f be       	out	0x3f, r0	; 63
    2c94:	0f 90       	pop	r0
    2c96:	1f 90       	pop	r1
    2c98:	18 95       	reti

00002c9a <__vector_44>:

ISR(PORTE_INT1_vect)
{
    2c9a:	1f 92       	push	r1
    2c9c:	0f 92       	push	r0
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	0f 92       	push	r0
    2ca2:	11 24       	eor	r1, r1
    2ca4:	0b b6       	in	r0, 0x3b	; 59
    2ca6:	0f 92       	push	r0
    2ca8:	2f 93       	push	r18
    2caa:	3f 93       	push	r19
    2cac:	4f 93       	push	r20
    2cae:	5f 93       	push	r21
    2cb0:	6f 93       	push	r22
    2cb2:	7f 93       	push	r23
    2cb4:	8f 93       	push	r24
    2cb6:	9f 93       	push	r25
    2cb8:	af 93       	push	r26
    2cba:	bf 93       	push	r27
    2cbc:	ef 93       	push	r30
    2cbe:	ff 93       	push	r31
  md_y->max_bound_interrupt_handler();
    2cc0:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <md_y>
    2cc4:	90 91 0e 21 	lds	r25, 0x210E	; 0x80210e <md_y+0x1>
    2cc8:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN12DeviceDriver6DM542T27max_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_y->get_direction() == 0)
    2ccc:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    2cd0:	88 23       	and	r24, r24
    2cd2:	81 f0       	breq	.+32     	; 0x2cf4 <__vector_44+0x5a>
    2cd4:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <md_y>
    2cd8:	90 91 0e 21 	lds	r25, 0x210E	; 0x80210e <md_y+0x1>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	ed 91       	ld	r30, X+
    2ce0:	fc 91       	ld	r31, X
    2ce2:	06 84       	ldd	r0, Z+14	; 0x0e
    2ce4:	f7 85       	ldd	r31, Z+15	; 0x0f
    2ce6:	e0 2d       	mov	r30, r0
    2ce8:	19 95       	eicall
    2cea:	81 11       	cpse	r24, r1
    2cec:	03 c0       	rjmp	.+6      	; 0x2cf4 <__vector_44+0x5a>
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	80 93 24 21 	sts	0x2124, r24	; 0x802124 <reset>
  {
    reset.ISR_put(true);
  }
}
    2cf4:	ff 91       	pop	r31
    2cf6:	ef 91       	pop	r30
    2cf8:	bf 91       	pop	r27
    2cfa:	af 91       	pop	r26
    2cfc:	9f 91       	pop	r25
    2cfe:	8f 91       	pop	r24
    2d00:	7f 91       	pop	r23
    2d02:	6f 91       	pop	r22
    2d04:	5f 91       	pop	r21
    2d06:	4f 91       	pop	r20
    2d08:	3f 91       	pop	r19
    2d0a:	2f 91       	pop	r18
    2d0c:	0f 90       	pop	r0
    2d0e:	0b be       	out	0x3b, r0	; 59
    2d10:	0f 90       	pop	r0
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	0f 90       	pop	r0
    2d16:	1f 90       	pop	r1
    2d18:	18 95       	reti

00002d1a <__vector_104>:

ISR(PORTF_INT0_vect)
{
    2d1a:	1f 92       	push	r1
    2d1c:	0f 92       	push	r0
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	0f 92       	push	r0
    2d22:	11 24       	eor	r1, r1
    2d24:	0b b6       	in	r0, 0x3b	; 59
    2d26:	0f 92       	push	r0
    2d28:	2f 93       	push	r18
    2d2a:	3f 93       	push	r19
    2d2c:	4f 93       	push	r20
    2d2e:	5f 93       	push	r21
    2d30:	6f 93       	push	r22
    2d32:	7f 93       	push	r23
    2d34:	8f 93       	push	r24
    2d36:	9f 93       	push	r25
    2d38:	af 93       	push	r26
    2d3a:	bf 93       	push	r27
    2d3c:	ef 93       	push	r30
    2d3e:	ff 93       	push	r31
  md_z->min_bound_interrupt_handler();
    2d40:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <md_z>
    2d44:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <md_z+0x1>
    2d48:	0e 94 50 07 	call	0xea0	; 0xea0 <_ZN12DeviceDriver6DM542T27min_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_z->get_direction() == 1)
    2d4c:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    2d50:	88 23       	and	r24, r24
    2d52:	79 f0       	breq	.+30     	; 0x2d72 <__vector_104+0x58>
    2d54:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <md_z>
    2d58:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <md_z+0x1>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	ed 91       	ld	r30, X+
    2d60:	fc 91       	ld	r31, X
    2d62:	06 84       	ldd	r0, Z+14	; 0x0e
    2d64:	f7 85       	ldd	r31, Z+15	; 0x0f
    2d66:	e0 2d       	mov	r30, r0
    2d68:	19 95       	eicall
    2d6a:	81 30       	cpi	r24, 0x01	; 1
    2d6c:	11 f4       	brne	.+4      	; 0x2d72 <__vector_104+0x58>
    2d6e:	80 93 24 21 	sts	0x2124, r24	; 0x802124 <reset>
  {
    reset.ISR_put(true);
  }
}
    2d72:	ff 91       	pop	r31
    2d74:	ef 91       	pop	r30
    2d76:	bf 91       	pop	r27
    2d78:	af 91       	pop	r26
    2d7a:	9f 91       	pop	r25
    2d7c:	8f 91       	pop	r24
    2d7e:	7f 91       	pop	r23
    2d80:	6f 91       	pop	r22
    2d82:	5f 91       	pop	r21
    2d84:	4f 91       	pop	r20
    2d86:	3f 91       	pop	r19
    2d88:	2f 91       	pop	r18
    2d8a:	0f 90       	pop	r0
    2d8c:	0b be       	out	0x3b, r0	; 59
    2d8e:	0f 90       	pop	r0
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	0f 90       	pop	r0
    2d94:	1f 90       	pop	r1
    2d96:	18 95       	reti

00002d98 <__vector_105>:

ISR(PORTF_INT1_vect)
{
    2d98:	1f 92       	push	r1
    2d9a:	0f 92       	push	r0
    2d9c:	0f b6       	in	r0, 0x3f	; 63
    2d9e:	0f 92       	push	r0
    2da0:	11 24       	eor	r1, r1
    2da2:	0b b6       	in	r0, 0x3b	; 59
    2da4:	0f 92       	push	r0
    2da6:	2f 93       	push	r18
    2da8:	3f 93       	push	r19
    2daa:	4f 93       	push	r20
    2dac:	5f 93       	push	r21
    2dae:	6f 93       	push	r22
    2db0:	7f 93       	push	r23
    2db2:	8f 93       	push	r24
    2db4:	9f 93       	push	r25
    2db6:	af 93       	push	r26
    2db8:	bf 93       	push	r27
    2dba:	ef 93       	push	r30
    2dbc:	ff 93       	push	r31
  md_z->max_bound_interrupt_handler();
    2dbe:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <md_z>
    2dc2:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <md_z+0x1>
    2dc6:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN12DeviceDriver6DM542T27max_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_z->get_direction() == 0)
    2dca:	80 91 db 20 	lds	r24, 0x20DB	; 0x8020db <coordinate_mode>
    2dce:	88 23       	and	r24, r24
    2dd0:	81 f0       	breq	.+32     	; 0x2df2 <__vector_105+0x5a>
    2dd2:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <md_z>
    2dd6:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <md_z+0x1>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	ed 91       	ld	r30, X+
    2dde:	fc 91       	ld	r31, X
    2de0:	06 84       	ldd	r0, Z+14	; 0x0e
    2de2:	f7 85       	ldd	r31, Z+15	; 0x0f
    2de4:	e0 2d       	mov	r30, r0
    2de6:	19 95       	eicall
    2de8:	81 11       	cpse	r24, r1
    2dea:	03 c0       	rjmp	.+6      	; 0x2df2 <__vector_105+0x5a>
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	80 93 24 21 	sts	0x2124, r24	; 0x802124 <reset>
  {
    reset.ISR_put(true);
  }
}
    2df2:	ff 91       	pop	r31
    2df4:	ef 91       	pop	r30
    2df6:	bf 91       	pop	r27
    2df8:	af 91       	pop	r26
    2dfa:	9f 91       	pop	r25
    2dfc:	8f 91       	pop	r24
    2dfe:	7f 91       	pop	r23
    2e00:	6f 91       	pop	r22
    2e02:	5f 91       	pop	r21
    2e04:	4f 91       	pop	r20
    2e06:	3f 91       	pop	r19
    2e08:	2f 91       	pop	r18
    2e0a:	0f 90       	pop	r0
    2e0c:	0b be       	out	0x3b, r0	; 59
    2e0e:	0f 90       	pop	r0
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	0f 90       	pop	r0
    2e14:	1f 90       	pop	r1
    2e16:	18 95       	reti

00002e18 <__vector_85>:

ISR(TCD1_CCA_vect)
{
    2e18:	1f 92       	push	r1
    2e1a:	0f 92       	push	r0
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	0f 92       	push	r0
    2e20:	11 24       	eor	r1, r1
    2e22:	0b b6       	in	r0, 0x3b	; 59
    2e24:	0f 92       	push	r0
    2e26:	2f 93       	push	r18
    2e28:	3f 93       	push	r19
    2e2a:	4f 93       	push	r20
    2e2c:	5f 93       	push	r21
    2e2e:	6f 93       	push	r22
    2e30:	7f 93       	push	r23
    2e32:	8f 93       	push	r24
    2e34:	9f 93       	push	r25
    2e36:	af 93       	push	r26
    2e38:	bf 93       	push	r27
    2e3a:	ef 93       	push	r30
    2e3c:	ff 93       	push	r31
  md_x->set_signal_low();
    2e3e:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <md_x>
    2e42:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <md_x+0x1>
    2e46:	dc 01       	movw	r26, r24
    2e48:	ed 91       	ld	r30, X+
    2e4a:	fc 91       	ld	r31, X
    2e4c:	02 88       	ldd	r0, Z+18	; 0x12
    2e4e:	f3 89       	ldd	r31, Z+19	; 0x13
    2e50:	e0 2d       	mov	r30, r0
    2e52:	19 95       	eicall
}
    2e54:	ff 91       	pop	r31
    2e56:	ef 91       	pop	r30
    2e58:	bf 91       	pop	r27
    2e5a:	af 91       	pop	r26
    2e5c:	9f 91       	pop	r25
    2e5e:	8f 91       	pop	r24
    2e60:	7f 91       	pop	r23
    2e62:	6f 91       	pop	r22
    2e64:	5f 91       	pop	r21
    2e66:	4f 91       	pop	r20
    2e68:	3f 91       	pop	r19
    2e6a:	2f 91       	pop	r18
    2e6c:	0f 90       	pop	r0
    2e6e:	0b be       	out	0x3b, r0	; 59
    2e70:	0f 90       	pop	r0
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	0f 90       	pop	r0
    2e76:	1f 90       	pop	r1
    2e78:	18 95       	reti

00002e7a <__vector_83>:

ISR(TCD1_OVF_vect)
{
    2e7a:	1f 92       	push	r1
    2e7c:	0f 92       	push	r0
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	0f 92       	push	r0
    2e82:	11 24       	eor	r1, r1
    2e84:	0b b6       	in	r0, 0x3b	; 59
    2e86:	0f 92       	push	r0
    2e88:	2f 93       	push	r18
    2e8a:	3f 93       	push	r19
    2e8c:	4f 93       	push	r20
    2e8e:	5f 93       	push	r21
    2e90:	6f 93       	push	r22
    2e92:	7f 93       	push	r23
    2e94:	8f 93       	push	r24
    2e96:	9f 93       	push	r25
    2e98:	af 93       	push	r26
    2e9a:	bf 93       	push	r27
    2e9c:	ef 93       	push	r30
    2e9e:	ff 93       	push	r31
  md_x->take_step();
    2ea0:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <md_x>
    2ea4:	90 91 10 21 	lds	r25, 0x2110	; 0x802110 <md_x+0x1>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	ed 91       	ld	r30, X+
    2eac:	fc 91       	ld	r31, X
    2eae:	00 88       	ldd	r0, Z+16	; 0x10
    2eb0:	f1 89       	ldd	r31, Z+17	; 0x11
    2eb2:	e0 2d       	mov	r30, r0
    2eb4:	19 95       	eicall
}
    2eb6:	ff 91       	pop	r31
    2eb8:	ef 91       	pop	r30
    2eba:	bf 91       	pop	r27
    2ebc:	af 91       	pop	r26
    2ebe:	9f 91       	pop	r25
    2ec0:	8f 91       	pop	r24
    2ec2:	7f 91       	pop	r23
    2ec4:	6f 91       	pop	r22
    2ec6:	5f 91       	pop	r21
    2ec8:	4f 91       	pop	r20
    2eca:	3f 91       	pop	r19
    2ecc:	2f 91       	pop	r18
    2ece:	0f 90       	pop	r0
    2ed0:	0b be       	out	0x3b, r0	; 59
    2ed2:	0f 90       	pop	r0
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	0f 90       	pop	r0
    2ed8:	1f 90       	pop	r1
    2eda:	18 95       	reti

00002edc <__vector_82>:

ISR(TCD0_CCD_vect)
{
    2edc:	1f 92       	push	r1
    2ede:	0f 92       	push	r0
    2ee0:	0f b6       	in	r0, 0x3f	; 63
    2ee2:	0f 92       	push	r0
    2ee4:	11 24       	eor	r1, r1
    2ee6:	0b b6       	in	r0, 0x3b	; 59
    2ee8:	0f 92       	push	r0
    2eea:	2f 93       	push	r18
    2eec:	3f 93       	push	r19
    2eee:	4f 93       	push	r20
    2ef0:	5f 93       	push	r21
    2ef2:	6f 93       	push	r22
    2ef4:	7f 93       	push	r23
    2ef6:	8f 93       	push	r24
    2ef8:	9f 93       	push	r25
    2efa:	af 93       	push	r26
    2efc:	bf 93       	push	r27
    2efe:	ef 93       	push	r30
    2f00:	ff 93       	push	r31
  md_y->set_signal_low();
    2f02:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <md_y>
    2f06:	90 91 0e 21 	lds	r25, 0x210E	; 0x80210e <md_y+0x1>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	ed 91       	ld	r30, X+
    2f0e:	fc 91       	ld	r31, X
    2f10:	02 88       	ldd	r0, Z+18	; 0x12
    2f12:	f3 89       	ldd	r31, Z+19	; 0x13
    2f14:	e0 2d       	mov	r30, r0
    2f16:	19 95       	eicall
}
    2f18:	ff 91       	pop	r31
    2f1a:	ef 91       	pop	r30
    2f1c:	bf 91       	pop	r27
    2f1e:	af 91       	pop	r26
    2f20:	9f 91       	pop	r25
    2f22:	8f 91       	pop	r24
    2f24:	7f 91       	pop	r23
    2f26:	6f 91       	pop	r22
    2f28:	5f 91       	pop	r21
    2f2a:	4f 91       	pop	r20
    2f2c:	3f 91       	pop	r19
    2f2e:	2f 91       	pop	r18
    2f30:	0f 90       	pop	r0
    2f32:	0b be       	out	0x3b, r0	; 59
    2f34:	0f 90       	pop	r0
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	0f 90       	pop	r0
    2f3a:	1f 90       	pop	r1
    2f3c:	18 95       	reti

00002f3e <__vector_77>:

ISR(TCD0_OVF_vect)
{
    2f3e:	1f 92       	push	r1
    2f40:	0f 92       	push	r0
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	0f 92       	push	r0
    2f46:	11 24       	eor	r1, r1
    2f48:	0b b6       	in	r0, 0x3b	; 59
    2f4a:	0f 92       	push	r0
    2f4c:	2f 93       	push	r18
    2f4e:	3f 93       	push	r19
    2f50:	4f 93       	push	r20
    2f52:	5f 93       	push	r21
    2f54:	6f 93       	push	r22
    2f56:	7f 93       	push	r23
    2f58:	8f 93       	push	r24
    2f5a:	9f 93       	push	r25
    2f5c:	af 93       	push	r26
    2f5e:	bf 93       	push	r27
    2f60:	ef 93       	push	r30
    2f62:	ff 93       	push	r31
  md_y->take_step();
    2f64:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <md_y>
    2f68:	90 91 0e 21 	lds	r25, 0x210E	; 0x80210e <md_y+0x1>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	ed 91       	ld	r30, X+
    2f70:	fc 91       	ld	r31, X
    2f72:	00 88       	ldd	r0, Z+16	; 0x10
    2f74:	f1 89       	ldd	r31, Z+17	; 0x11
    2f76:	e0 2d       	mov	r30, r0
    2f78:	19 95       	eicall
}
    2f7a:	ff 91       	pop	r31
    2f7c:	ef 91       	pop	r30
    2f7e:	bf 91       	pop	r27
    2f80:	af 91       	pop	r26
    2f82:	9f 91       	pop	r25
    2f84:	8f 91       	pop	r24
    2f86:	7f 91       	pop	r23
    2f88:	6f 91       	pop	r22
    2f8a:	5f 91       	pop	r21
    2f8c:	4f 91       	pop	r20
    2f8e:	3f 91       	pop	r19
    2f90:	2f 91       	pop	r18
    2f92:	0f 90       	pop	r0
    2f94:	0b be       	out	0x3b, r0	; 59
    2f96:	0f 90       	pop	r0
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	0f 90       	pop	r0
    2f9c:	1f 90       	pop	r1
    2f9e:	18 95       	reti

00002fa0 <__vector_16>:

ISR(TCC0_CCA_vect)
{
    2fa0:	1f 92       	push	r1
    2fa2:	0f 92       	push	r0
    2fa4:	0f b6       	in	r0, 0x3f	; 63
    2fa6:	0f 92       	push	r0
    2fa8:	11 24       	eor	r1, r1
    2faa:	0b b6       	in	r0, 0x3b	; 59
    2fac:	0f 92       	push	r0
    2fae:	2f 93       	push	r18
    2fb0:	3f 93       	push	r19
    2fb2:	4f 93       	push	r20
    2fb4:	5f 93       	push	r21
    2fb6:	6f 93       	push	r22
    2fb8:	7f 93       	push	r23
    2fba:	8f 93       	push	r24
    2fbc:	9f 93       	push	r25
    2fbe:	af 93       	push	r26
    2fc0:	bf 93       	push	r27
    2fc2:	ef 93       	push	r30
    2fc4:	ff 93       	push	r31
  md_z->set_signal_low();
    2fc6:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <md_z>
    2fca:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <md_z+0x1>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	ed 91       	ld	r30, X+
    2fd2:	fc 91       	ld	r31, X
    2fd4:	02 88       	ldd	r0, Z+18	; 0x12
    2fd6:	f3 89       	ldd	r31, Z+19	; 0x13
    2fd8:	e0 2d       	mov	r30, r0
    2fda:	19 95       	eicall
}
    2fdc:	ff 91       	pop	r31
    2fde:	ef 91       	pop	r30
    2fe0:	bf 91       	pop	r27
    2fe2:	af 91       	pop	r26
    2fe4:	9f 91       	pop	r25
    2fe6:	8f 91       	pop	r24
    2fe8:	7f 91       	pop	r23
    2fea:	6f 91       	pop	r22
    2fec:	5f 91       	pop	r21
    2fee:	4f 91       	pop	r20
    2ff0:	3f 91       	pop	r19
    2ff2:	2f 91       	pop	r18
    2ff4:	0f 90       	pop	r0
    2ff6:	0b be       	out	0x3b, r0	; 59
    2ff8:	0f 90       	pop	r0
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	0f 90       	pop	r0
    2ffe:	1f 90       	pop	r1
    3000:	18 95       	reti

00003002 <__vector_14>:

ISR(TCC0_OVF_vect)
{
    3002:	1f 92       	push	r1
    3004:	0f 92       	push	r0
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	0f 92       	push	r0
    300a:	11 24       	eor	r1, r1
    300c:	0b b6       	in	r0, 0x3b	; 59
    300e:	0f 92       	push	r0
    3010:	2f 93       	push	r18
    3012:	3f 93       	push	r19
    3014:	4f 93       	push	r20
    3016:	5f 93       	push	r21
    3018:	6f 93       	push	r22
    301a:	7f 93       	push	r23
    301c:	8f 93       	push	r24
    301e:	9f 93       	push	r25
    3020:	af 93       	push	r26
    3022:	bf 93       	push	r27
    3024:	ef 93       	push	r30
    3026:	ff 93       	push	r31
  md_z->take_step();
    3028:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <md_z>
    302c:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <md_z+0x1>
    3030:	dc 01       	movw	r26, r24
    3032:	ed 91       	ld	r30, X+
    3034:	fc 91       	ld	r31, X
    3036:	00 88       	ldd	r0, Z+16	; 0x10
    3038:	f1 89       	ldd	r31, Z+17	; 0x11
    303a:	e0 2d       	mov	r30, r0
    303c:	19 95       	eicall
    303e:	ff 91       	pop	r31
    3040:	ef 91       	pop	r30
    3042:	bf 91       	pop	r27
    3044:	af 91       	pop	r26
    3046:	9f 91       	pop	r25
    3048:	8f 91       	pop	r24
    304a:	7f 91       	pop	r23
    304c:	6f 91       	pop	r22
    304e:	5f 91       	pop	r21
    3050:	4f 91       	pop	r20
    3052:	3f 91       	pop	r19
    3054:	2f 91       	pop	r18
    3056:	0f 90       	pop	r0
    3058:	0b be       	out	0x3b, r0	; 59
    305a:	0f 90       	pop	r0
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	0f 90       	pop	r0
    3060:	1f 90       	pop	r1
    3062:	18 95       	reti

00003064 <_ZN9frt_queueImEC1EhP8emstreamm>:
 *  @param p_ser_dev Pointer to a serial device to be used for debugging printouts
 *                   (Default: NULL)
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
    3064:	cf 92       	push	r12
    3066:	df 92       	push	r13
    3068:	ef 92       	push	r14
    306a:	ff 92       	push	r15
    306c:	0f 93       	push	r16
    306e:	1f 93       	push	r17
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
    3074:	ec 01       	movw	r28, r24
    3076:	86 2f       	mov	r24, r22
    3078:	68 01       	movw	r12, r16
    307a:	79 01       	movw	r14, r18

template <class data_type>
frt_base_queue<data_type>::frt_base_queue (emstream* p_ser_dev)
{
	// Save the pointer to a serial devide so it may be used for debugging
	p_serial = p_ser_dev;
    307c:	4a 83       	std	Y+2, r20	; 0x02
    307e:	5b 83       	std	Y+3, r21	; 0x03
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    3080:	23 e7       	ldi	r18, 0x73	; 115
    3082:	30 e2       	ldi	r19, 0x20	; 32
    3084:	28 83       	st	Y, r18
    3086:	39 83       	std	Y+1, r19	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    3088:	40 e0       	ldi	r20, 0x00	; 0
    308a:	64 e0       	ldi	r22, 0x04	; 4
    308c:	0e 94 8d 1c 	call	0x391a	; 0x391a <xQueueGenericCreate>
    3090:	8c 83       	std	Y+4, r24	; 0x04
    3092:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    3094:	ce 82       	std	Y+6, r12	; 0x06
    3096:	df 82       	std	Y+7, r13	; 0x07
    3098:	e8 86       	std	Y+8, r14	; 0x08
    309a:	f9 86       	std	Y+9, r15	; 0x09
	if (handle == 0)
	{
		DBG (p_ser_dev, PMS ("ERROR creating ") << queue_size << PMS("x") 
			 << sizeof (data_type) << PMS ("B queue #") << handle << endl);
	}
}
    309c:	df 91       	pop	r29
    309e:	cf 91       	pop	r28
    30a0:	1f 91       	pop	r17
    30a2:	0f 91       	pop	r16
    30a4:	ff 90       	pop	r15
    30a6:	ef 90       	pop	r14
    30a8:	df 90       	pop	r13
    30aa:	cf 90       	pop	r12
    30ac:	08 95       	ret

000030ae <_GLOBAL__sub_I_counter>:
    30ae:	0f 93       	push	r16
    30b0:	1f 93       	push	r17
shared_data<bool> emergency_shutdown;
shared_data<bool> next_node;
shared_data<uint16_t> current_node;
shared_data<uint16_t> total_nodes;
shared_data<bool> pause;
frt_queue<uint32_t> x_max_velocity(50,NULL,10);
    30b2:	0a e0       	ldi	r16, 0x0A	; 10
    30b4:	10 e0       	ldi	r17, 0x00	; 0
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	40 e0       	ldi	r20, 0x00	; 0
    30bc:	50 e0       	ldi	r21, 0x00	; 0
    30be:	62 e3       	ldi	r22, 0x32	; 50
    30c0:	8d e3       	ldi	r24, 0x3D	; 61
    30c2:	91 e2       	ldi	r25, 0x21	; 33
    30c4:	0e 94 32 18 	call	0x3064	; 0x3064 <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> y_max_velocity(50,NULL,10);
    30c8:	0a e0       	ldi	r16, 0x0A	; 10
    30ca:	10 e0       	ldi	r17, 0x00	; 0
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e0       	ldi	r20, 0x00	; 0
    30d2:	50 e0       	ldi	r21, 0x00	; 0
    30d4:	62 e3       	ldi	r22, 0x32	; 50
    30d6:	83 e3       	ldi	r24, 0x33	; 51
    30d8:	91 e2       	ldi	r25, 0x21	; 33
    30da:	0e 94 32 18 	call	0x3064	; 0x3064 <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> z_max_velocity(50,NULL,10);
    30de:	0a e0       	ldi	r16, 0x0A	; 10
    30e0:	10 e0       	ldi	r17, 0x00	; 0
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	40 e0       	ldi	r20, 0x00	; 0
    30e8:	50 e0       	ldi	r21, 0x00	; 0
    30ea:	62 e3       	ldi	r22, 0x32	; 50
    30ec:	89 e2       	ldi	r24, 0x29	; 41
    30ee:	91 e2       	ldi	r25, 0x21	; 33
    30f0:	0e 94 32 18 	call	0x3064	; 0x3064 <_ZN9frt_queueImEC1EhP8emstreamm>
PeripheralDriver::InterruptTimer* timer_C0_pin0;
DeviceDriver::DM542T* md_x;
DeviceDriver::DM542T* md_y;
DeviceDriver::DM542T* md_z;

frt_text_queue print_ser_queue (32, NULL, 10);
    30f4:	0a e0       	ldi	r16, 0x0A	; 10
    30f6:	10 e0       	ldi	r17, 0x00	; 0
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	40 e0       	ldi	r20, 0x00	; 0
    30fe:	50 e0       	ldi	r21, 0x00	; 0
    3100:	60 e2       	ldi	r22, 0x20	; 32
    3102:	70 e0       	ldi	r23, 0x00	; 0
    3104:	8b ef       	ldi	r24, 0xFB	; 251
    3106:	90 e2       	ldi	r25, 0x20	; 32
    3108:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <_ZN14frt_text_queueC1EjP8emstreamm>

frt_queue<uint32_t> xlocations(50,NULL,10);
    310c:	0a e0       	ldi	r16, 0x0A	; 10
    310e:	10 e0       	ldi	r17, 0x00	; 0
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e0       	ldi	r20, 0x00	; 0
    3116:	50 e0       	ldi	r21, 0x00	; 0
    3118:	62 e3       	ldi	r22, 0x32	; 50
    311a:	81 ef       	ldi	r24, 0xF1	; 241
    311c:	90 e2       	ldi	r25, 0x20	; 32
    311e:	0e 94 32 18 	call	0x3064	; 0x3064 <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> ylocations(50,NULL,10);
    3122:	0a e0       	ldi	r16, 0x0A	; 10
    3124:	10 e0       	ldi	r17, 0x00	; 0
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	40 e0       	ldi	r20, 0x00	; 0
    312c:	50 e0       	ldi	r21, 0x00	; 0
    312e:	62 e3       	ldi	r22, 0x32	; 50
    3130:	87 ee       	ldi	r24, 0xE7	; 231
    3132:	90 e2       	ldi	r25, 0x20	; 32
    3134:	0e 94 32 18 	call	0x3064	; 0x3064 <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> zlocations(50,NULL,10);
    3138:	0a e0       	ldi	r16, 0x0A	; 10
    313a:	10 e0       	ldi	r17, 0x00	; 0
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	40 e0       	ldi	r20, 0x00	; 0
    3142:	50 e0       	ldi	r21, 0x00	; 0
    3144:	62 e3       	ldi	r22, 0x32	; 50
    3146:	8d ed       	ldi	r24, 0xDD	; 221
    3148:	90 e2       	ldi	r25, 0x20	; 32
    314a:	0e 94 32 18 	call	0x3064	; 0x3064 <_ZN9frt_queueImEC1EhP8emstreamm>
}

ISR(TCC0_OVF_vect)
{
  md_z->take_step();
    314e:	1f 91       	pop	r17
    3150:	0f 91       	pop	r16
    3152:	08 95       	ret

00003154 <pvPortMalloc>:
    3154:	0f 93       	push	r16
    3156:	1f 93       	push	r17
    3158:	cf 93       	push	r28
    315a:	df 93       	push	r29
    315c:	ec 01       	movw	r28, r24
    315e:	0e 94 17 20 	call	0x402e	; 0x402e <vTaskSuspendAll>
    3162:	80 91 61 21 	lds	r24, 0x2161	; 0x802161 <xHeapHasBeenInitialised.4146>
    3166:	81 11       	cpse	r24, r1
    3168:	1d c0       	rjmp	.+58     	; 0x31a4 <pvPortMalloc+0x50>
    316a:	a6 e6       	ldi	r26, 0x66	; 102
    316c:	b1 e2       	ldi	r27, 0x21	; 33
    316e:	ea e6       	ldi	r30, 0x6A	; 106
    3170:	f1 e2       	ldi	r31, 0x21	; 33
    3172:	ed 93       	st	X+, r30
    3174:	fc 93       	st	X, r31
    3176:	11 97       	sbiw	r26, 0x01	; 1
    3178:	12 96       	adiw	r26, 0x02	; 2
    317a:	1d 92       	st	X+, r1
    317c:	1c 92       	st	X, r1
    317e:	13 97       	sbiw	r26, 0x03	; 3
    3180:	a2 e6       	ldi	r26, 0x62	; 98
    3182:	b1 e2       	ldi	r27, 0x21	; 33
    3184:	8f ef       	ldi	r24, 0xFF	; 255
    3186:	9f e1       	ldi	r25, 0x1F	; 31
    3188:	12 96       	adiw	r26, 0x02	; 2
    318a:	8d 93       	st	X+, r24
    318c:	9c 93       	st	X, r25
    318e:	13 97       	sbiw	r26, 0x03	; 3
    3190:	1d 92       	st	X+, r1
    3192:	1c 92       	st	X, r1
    3194:	11 97       	sbiw	r26, 0x01	; 1
    3196:	82 83       	std	Z+2, r24	; 0x02
    3198:	93 83       	std	Z+3, r25	; 0x03
    319a:	a0 83       	st	Z, r26
    319c:	b1 83       	std	Z+1, r27	; 0x01
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	80 93 61 21 	sts	0x2161, r24	; 0x802161 <xHeapHasBeenInitialised.4146>
    31a4:	20 97       	sbiw	r28, 0x00	; 0
    31a6:	09 f4       	brne	.+2      	; 0x31aa <pvPortMalloc+0x56>
    31a8:	5f c0       	rjmp	.+190    	; 0x3268 <pvPortMalloc+0x114>
    31aa:	9e 01       	movw	r18, r28
    31ac:	2b 5f       	subi	r18, 0xFB	; 251
    31ae:	3f 4f       	sbci	r19, 0xFF	; 255
    31b0:	24 96       	adiw	r28, 0x04	; 4
    31b2:	ce 3f       	cpi	r28, 0xFE	; 254
    31b4:	df 41       	sbci	r29, 0x1F	; 31
    31b6:	08 f0       	brcs	.+2      	; 0x31ba <pvPortMalloc+0x66>
    31b8:	5a c0       	rjmp	.+180    	; 0x326e <pvPortMalloc+0x11a>
    31ba:	e0 91 66 21 	lds	r30, 0x2166	; 0x802166 <xStart>
    31be:	f0 91 67 21 	lds	r31, 0x2167	; 0x802167 <xStart+0x1>
    31c2:	a6 e6       	ldi	r26, 0x66	; 102
    31c4:	b1 e2       	ldi	r27, 0x21	; 33
    31c6:	02 c0       	rjmp	.+4      	; 0x31cc <pvPortMalloc+0x78>
    31c8:	df 01       	movw	r26, r30
    31ca:	fc 01       	movw	r30, r24
    31cc:	82 81       	ldd	r24, Z+2	; 0x02
    31ce:	93 81       	ldd	r25, Z+3	; 0x03
    31d0:	82 17       	cp	r24, r18
    31d2:	93 07       	cpc	r25, r19
    31d4:	20 f4       	brcc	.+8      	; 0x31de <pvPortMalloc+0x8a>
    31d6:	80 81       	ld	r24, Z
    31d8:	91 81       	ldd	r25, Z+1	; 0x01
    31da:	00 97       	sbiw	r24, 0x00	; 0
    31dc:	a9 f7       	brne	.-22     	; 0x31c8 <pvPortMalloc+0x74>
    31de:	c1 e2       	ldi	r28, 0x21	; 33
    31e0:	e2 36       	cpi	r30, 0x62	; 98
    31e2:	fc 07       	cpc	r31, r28
    31e4:	09 f4       	brne	.+2      	; 0x31e8 <pvPortMalloc+0x94>
    31e6:	46 c0       	rjmp	.+140    	; 0x3274 <pvPortMalloc+0x120>
    31e8:	cd 91       	ld	r28, X+
    31ea:	dc 91       	ld	r29, X
    31ec:	11 97       	sbiw	r26, 0x01	; 1
    31ee:	8e 01       	movw	r16, r28
    31f0:	0b 5f       	subi	r16, 0xFB	; 251
    31f2:	1f 4f       	sbci	r17, 0xFF	; 255
    31f4:	80 81       	ld	r24, Z
    31f6:	91 81       	ldd	r25, Z+1	; 0x01
    31f8:	8d 93       	st	X+, r24
    31fa:	9c 93       	st	X, r25
    31fc:	82 81       	ldd	r24, Z+2	; 0x02
    31fe:	93 81       	ldd	r25, Z+3	; 0x03
    3200:	82 1b       	sub	r24, r18
    3202:	93 0b       	sbc	r25, r19
    3204:	8b 30       	cpi	r24, 0x0B	; 11
    3206:	91 05       	cpc	r25, r1
    3208:	10 f1       	brcs	.+68     	; 0x324e <pvPortMalloc+0xfa>
    320a:	bf 01       	movw	r22, r30
    320c:	62 0f       	add	r22, r18
    320e:	73 1f       	adc	r23, r19
    3210:	db 01       	movw	r26, r22
    3212:	12 96       	adiw	r26, 0x02	; 2
    3214:	8d 93       	st	X+, r24
    3216:	9c 93       	st	X, r25
    3218:	13 97       	sbiw	r26, 0x03	; 3
    321a:	22 83       	std	Z+2, r18	; 0x02
    321c:	33 83       	std	Z+3, r19	; 0x03
    321e:	12 96       	adiw	r26, 0x02	; 2
    3220:	4d 91       	ld	r20, X+
    3222:	5c 91       	ld	r21, X
    3224:	13 97       	sbiw	r26, 0x03	; 3
    3226:	86 e6       	ldi	r24, 0x66	; 102
    3228:	91 e2       	ldi	r25, 0x21	; 33
    322a:	01 c0       	rjmp	.+2      	; 0x322e <pvPortMalloc+0xda>
    322c:	cd 01       	movw	r24, r26
    322e:	ec 01       	movw	r28, r24
    3230:	a8 81       	ld	r26, Y
    3232:	b9 81       	ldd	r27, Y+1	; 0x01
    3234:	12 96       	adiw	r26, 0x02	; 2
    3236:	2d 91       	ld	r18, X+
    3238:	3c 91       	ld	r19, X
    323a:	13 97       	sbiw	r26, 0x03	; 3
    323c:	24 17       	cp	r18, r20
    323e:	35 07       	cpc	r19, r21
    3240:	a8 f3       	brcs	.-22     	; 0x322c <pvPortMalloc+0xd8>
    3242:	eb 01       	movw	r28, r22
    3244:	a8 83       	st	Y, r26
    3246:	b9 83       	std	Y+1, r27	; 0x01
    3248:	dc 01       	movw	r26, r24
    324a:	6d 93       	st	X+, r22
    324c:	7c 93       	st	X, r23
    324e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    3252:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    3256:	22 81       	ldd	r18, Z+2	; 0x02
    3258:	33 81       	ldd	r19, Z+3	; 0x03
    325a:	82 1b       	sub	r24, r18
    325c:	93 0b       	sbc	r25, r19
    325e:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    3262:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    3266:	08 c0       	rjmp	.+16     	; 0x3278 <pvPortMalloc+0x124>
    3268:	00 e0       	ldi	r16, 0x00	; 0
    326a:	10 e0       	ldi	r17, 0x00	; 0
    326c:	05 c0       	rjmp	.+10     	; 0x3278 <pvPortMalloc+0x124>
    326e:	00 e0       	ldi	r16, 0x00	; 0
    3270:	10 e0       	ldi	r17, 0x00	; 0
    3272:	02 c0       	rjmp	.+4      	; 0x3278 <pvPortMalloc+0x124>
    3274:	00 e0       	ldi	r16, 0x00	; 0
    3276:	10 e0       	ldi	r17, 0x00	; 0
    3278:	0e 94 34 21 	call	0x4268	; 0x4268 <xTaskResumeAll>
    327c:	c8 01       	movw	r24, r16
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	1f 91       	pop	r17
    3284:	0f 91       	pop	r16
    3286:	08 95       	ret

00003288 <vPortFree>:
    3288:	0f 93       	push	r16
    328a:	1f 93       	push	r17
    328c:	cf 93       	push	r28
    328e:	df 93       	push	r29
    3290:	00 97       	sbiw	r24, 0x00	; 0
    3292:	41 f1       	breq	.+80     	; 0x32e4 <vPortFree+0x5c>
    3294:	ec 01       	movw	r28, r24
    3296:	8c 01       	movw	r16, r24
    3298:	05 50       	subi	r16, 0x05	; 5
    329a:	11 09       	sbc	r17, r1
    329c:	0e 94 17 20 	call	0x402e	; 0x402e <vTaskSuspendAll>
    32a0:	f8 01       	movw	r30, r16
    32a2:	42 81       	ldd	r20, Z+2	; 0x02
    32a4:	53 81       	ldd	r21, Z+3	; 0x03
    32a6:	a6 e6       	ldi	r26, 0x66	; 102
    32a8:	b1 e2       	ldi	r27, 0x21	; 33
    32aa:	01 c0       	rjmp	.+2      	; 0x32ae <vPortFree+0x26>
    32ac:	df 01       	movw	r26, r30
    32ae:	ed 91       	ld	r30, X+
    32b0:	fc 91       	ld	r31, X
    32b2:	11 97       	sbiw	r26, 0x01	; 1
    32b4:	22 81       	ldd	r18, Z+2	; 0x02
    32b6:	33 81       	ldd	r19, Z+3	; 0x03
    32b8:	24 17       	cp	r18, r20
    32ba:	35 07       	cpc	r19, r21
    32bc:	b8 f3       	brcs	.-18     	; 0x32ac <vPortFree+0x24>
    32be:	25 97       	sbiw	r28, 0x05	; 5
    32c0:	e8 83       	st	Y, r30
    32c2:	f9 83       	std	Y+1, r31	; 0x01
    32c4:	0d 93       	st	X+, r16
    32c6:	1c 93       	st	X, r17
    32c8:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    32cc:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    32d0:	8a 81       	ldd	r24, Y+2	; 0x02
    32d2:	9b 81       	ldd	r25, Y+3	; 0x03
    32d4:	82 0f       	add	r24, r18
    32d6:	93 1f       	adc	r25, r19
    32d8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    32dc:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    32e0:	0e 94 34 21 	call	0x4268	; 0x4268 <xTaskResumeAll>
    32e4:	df 91       	pop	r29
    32e6:	cf 91       	pop	r28
    32e8:	1f 91       	pop	r17
    32ea:	0f 91       	pop	r16
    32ec:	08 95       	ret

000032ee <vListInitialise>:
    32ee:	fc 01       	movw	r30, r24
    32f0:	03 96       	adiw	r24, 0x03	; 3
    32f2:	81 83       	std	Z+1, r24	; 0x01
    32f4:	92 83       	std	Z+2, r25	; 0x02
    32f6:	4f ef       	ldi	r20, 0xFF	; 255
    32f8:	5f ef       	ldi	r21, 0xFF	; 255
    32fa:	ba 01       	movw	r22, r20
    32fc:	43 83       	std	Z+3, r20	; 0x03
    32fe:	54 83       	std	Z+4, r21	; 0x04
    3300:	65 83       	std	Z+5, r22	; 0x05
    3302:	76 83       	std	Z+6, r23	; 0x06
    3304:	87 83       	std	Z+7, r24	; 0x07
    3306:	90 87       	std	Z+8, r25	; 0x08
    3308:	81 87       	std	Z+9, r24	; 0x09
    330a:	92 87       	std	Z+10, r25	; 0x0a
    330c:	10 82       	st	Z, r1
    330e:	08 95       	ret

00003310 <vListInitialiseItem>:
    3310:	fc 01       	movw	r30, r24
    3312:	12 86       	std	Z+10, r1	; 0x0a
    3314:	13 86       	std	Z+11, r1	; 0x0b
    3316:	08 95       	ret

00003318 <vListInsertEnd>:
    3318:	cf 93       	push	r28
    331a:	df 93       	push	r29
    331c:	fc 01       	movw	r30, r24
    331e:	db 01       	movw	r26, r22
    3320:	21 81       	ldd	r18, Z+1	; 0x01
    3322:	32 81       	ldd	r19, Z+2	; 0x02
    3324:	e9 01       	movw	r28, r18
    3326:	8c 81       	ldd	r24, Y+4	; 0x04
    3328:	9d 81       	ldd	r25, Y+5	; 0x05
    332a:	14 96       	adiw	r26, 0x04	; 4
    332c:	8d 93       	st	X+, r24
    332e:	9c 93       	st	X, r25
    3330:	15 97       	sbiw	r26, 0x05	; 5
    3332:	81 81       	ldd	r24, Z+1	; 0x01
    3334:	92 81       	ldd	r25, Z+2	; 0x02
    3336:	16 96       	adiw	r26, 0x06	; 6
    3338:	8d 93       	st	X+, r24
    333a:	9c 93       	st	X, r25
    333c:	17 97       	sbiw	r26, 0x07	; 7
    333e:	8c 81       	ldd	r24, Y+4	; 0x04
    3340:	9d 81       	ldd	r25, Y+5	; 0x05
    3342:	ec 01       	movw	r28, r24
    3344:	6e 83       	std	Y+6, r22	; 0x06
    3346:	7f 83       	std	Y+7, r23	; 0x07
    3348:	e9 01       	movw	r28, r18
    334a:	6c 83       	std	Y+4, r22	; 0x04
    334c:	7d 83       	std	Y+5, r23	; 0x05
    334e:	61 83       	std	Z+1, r22	; 0x01
    3350:	72 83       	std	Z+2, r23	; 0x02
    3352:	1a 96       	adiw	r26, 0x0a	; 10
    3354:	ed 93       	st	X+, r30
    3356:	fc 93       	st	X, r31
    3358:	1b 97       	sbiw	r26, 0x0b	; 11
    335a:	80 81       	ld	r24, Z
    335c:	8f 5f       	subi	r24, 0xFF	; 255
    335e:	80 83       	st	Z, r24
    3360:	df 91       	pop	r29
    3362:	cf 91       	pop	r28
    3364:	08 95       	ret

00003366 <vListInsert>:
    3366:	0f 93       	push	r16
    3368:	1f 93       	push	r17
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
    336e:	eb 01       	movw	r28, r22
    3370:	08 81       	ld	r16, Y
    3372:	19 81       	ldd	r17, Y+1	; 0x01
    3374:	2a 81       	ldd	r18, Y+2	; 0x02
    3376:	3b 81       	ldd	r19, Y+3	; 0x03
    3378:	0f 3f       	cpi	r16, 0xFF	; 255
    337a:	4f ef       	ldi	r20, 0xFF	; 255
    337c:	14 07       	cpc	r17, r20
    337e:	24 07       	cpc	r18, r20
    3380:	34 07       	cpc	r19, r20
    3382:	31 f4       	brne	.+12     	; 0x3390 <vListInsert+0x2a>
    3384:	dc 01       	movw	r26, r24
    3386:	19 96       	adiw	r26, 0x09	; 9
    3388:	ed 91       	ld	r30, X+
    338a:	fc 91       	ld	r31, X
    338c:	1a 97       	sbiw	r26, 0x0a	; 10
    338e:	1f c0       	rjmp	.+62     	; 0x33ce <vListInsert+0x68>
    3390:	fc 01       	movw	r30, r24
    3392:	33 96       	adiw	r30, 0x03	; 3
    3394:	dc 01       	movw	r26, r24
    3396:	17 96       	adiw	r26, 0x07	; 7
    3398:	4d 91       	ld	r20, X+
    339a:	5c 91       	ld	r21, X
    339c:	18 97       	sbiw	r26, 0x08	; 8
    339e:	da 01       	movw	r26, r20
    33a0:	4d 91       	ld	r20, X+
    33a2:	5d 91       	ld	r21, X+
    33a4:	6d 91       	ld	r22, X+
    33a6:	7c 91       	ld	r23, X
    33a8:	04 17       	cp	r16, r20
    33aa:	15 07       	cpc	r17, r21
    33ac:	26 07       	cpc	r18, r22
    33ae:	37 07       	cpc	r19, r23
    33b0:	70 f0       	brcs	.+28     	; 0x33ce <vListInsert+0x68>
    33b2:	04 80       	ldd	r0, Z+4	; 0x04
    33b4:	f5 81       	ldd	r31, Z+5	; 0x05
    33b6:	e0 2d       	mov	r30, r0
    33b8:	a4 81       	ldd	r26, Z+4	; 0x04
    33ba:	b5 81       	ldd	r27, Z+5	; 0x05
    33bc:	4d 91       	ld	r20, X+
    33be:	5d 91       	ld	r21, X+
    33c0:	6d 91       	ld	r22, X+
    33c2:	7c 91       	ld	r23, X
    33c4:	04 17       	cp	r16, r20
    33c6:	15 07       	cpc	r17, r21
    33c8:	26 07       	cpc	r18, r22
    33ca:	37 07       	cpc	r19, r23
    33cc:	90 f7       	brcc	.-28     	; 0x33b2 <vListInsert+0x4c>
    33ce:	a4 81       	ldd	r26, Z+4	; 0x04
    33d0:	b5 81       	ldd	r27, Z+5	; 0x05
    33d2:	ac 83       	std	Y+4, r26	; 0x04
    33d4:	bd 83       	std	Y+5, r27	; 0x05
    33d6:	16 96       	adiw	r26, 0x06	; 6
    33d8:	cd 93       	st	X+, r28
    33da:	dc 93       	st	X, r29
    33dc:	17 97       	sbiw	r26, 0x07	; 7
    33de:	ee 83       	std	Y+6, r30	; 0x06
    33e0:	ff 83       	std	Y+7, r31	; 0x07
    33e2:	c4 83       	std	Z+4, r28	; 0x04
    33e4:	d5 83       	std	Z+5, r29	; 0x05
    33e6:	8a 87       	std	Y+10, r24	; 0x0a
    33e8:	9b 87       	std	Y+11, r25	; 0x0b
    33ea:	fc 01       	movw	r30, r24
    33ec:	20 81       	ld	r18, Z
    33ee:	2f 5f       	subi	r18, 0xFF	; 255
    33f0:	20 83       	st	Z, r18
    33f2:	df 91       	pop	r29
    33f4:	cf 91       	pop	r28
    33f6:	1f 91       	pop	r17
    33f8:	0f 91       	pop	r16
    33fa:	08 95       	ret

000033fc <vListRemove>:
    33fc:	fc 01       	movw	r30, r24
    33fe:	a4 81       	ldd	r26, Z+4	; 0x04
    3400:	b5 81       	ldd	r27, Z+5	; 0x05
    3402:	86 81       	ldd	r24, Z+6	; 0x06
    3404:	97 81       	ldd	r25, Z+7	; 0x07
    3406:	16 96       	adiw	r26, 0x06	; 6
    3408:	8d 93       	st	X+, r24
    340a:	9c 93       	st	X, r25
    340c:	17 97       	sbiw	r26, 0x07	; 7
    340e:	a6 81       	ldd	r26, Z+6	; 0x06
    3410:	b7 81       	ldd	r27, Z+7	; 0x07
    3412:	84 81       	ldd	r24, Z+4	; 0x04
    3414:	95 81       	ldd	r25, Z+5	; 0x05
    3416:	14 96       	adiw	r26, 0x04	; 4
    3418:	8d 93       	st	X+, r24
    341a:	9c 93       	st	X, r25
    341c:	15 97       	sbiw	r26, 0x05	; 5
    341e:	a2 85       	ldd	r26, Z+10	; 0x0a
    3420:	b3 85       	ldd	r27, Z+11	; 0x0b
    3422:	11 96       	adiw	r26, 0x01	; 1
    3424:	8d 91       	ld	r24, X+
    3426:	9c 91       	ld	r25, X
    3428:	12 97       	sbiw	r26, 0x02	; 2
    342a:	e8 17       	cp	r30, r24
    342c:	f9 07       	cpc	r31, r25
    342e:	31 f4       	brne	.+12     	; 0x343c <vListRemove+0x40>
    3430:	86 81       	ldd	r24, Z+6	; 0x06
    3432:	97 81       	ldd	r25, Z+7	; 0x07
    3434:	11 96       	adiw	r26, 0x01	; 1
    3436:	8d 93       	st	X+, r24
    3438:	9c 93       	st	X, r25
    343a:	12 97       	sbiw	r26, 0x02	; 2
    343c:	12 86       	std	Z+10, r1	; 0x0a
    343e:	13 86       	std	Z+11, r1	; 0x0b
    3440:	8c 91       	ld	r24, X
    3442:	81 50       	subi	r24, 0x01	; 1
    3444:	8c 93       	st	X, r24
    3446:	08 95       	ret

00003448 <pxPortInitialiseStack>:
    3448:	80 93 f1 41 	sts	0x41F1, r24	; 0x8041f1 <portStackTopForTask>
    344c:	90 93 f2 41 	sts	0x41F2, r25	; 0x8041f2 <portStackTopForTask+0x1>
    3450:	31 e1       	ldi	r19, 0x11	; 17
    3452:	fc 01       	movw	r30, r24
    3454:	30 83       	st	Z, r19
    3456:	31 97       	sbiw	r30, 0x01	; 1
    3458:	22 e2       	ldi	r18, 0x22	; 34
    345a:	20 83       	st	Z, r18
    345c:	31 97       	sbiw	r30, 0x01	; 1
    345e:	a3 e3       	ldi	r26, 0x33	; 51
    3460:	a0 83       	st	Z, r26
    3462:	31 97       	sbiw	r30, 0x01	; 1
    3464:	60 83       	st	Z, r22
    3466:	31 97       	sbiw	r30, 0x01	; 1
    3468:	70 83       	st	Z, r23
    346a:	31 97       	sbiw	r30, 0x01	; 1
    346c:	10 82       	st	Z, r1
    346e:	31 97       	sbiw	r30, 0x01	; 1
    3470:	10 82       	st	Z, r1
    3472:	31 97       	sbiw	r30, 0x01	; 1
    3474:	60 e8       	ldi	r22, 0x80	; 128
    3476:	60 83       	st	Z, r22
    3478:	31 97       	sbiw	r30, 0x01	; 1
    347a:	10 82       	st	Z, r1
    347c:	31 97       	sbiw	r30, 0x01	; 1
    347e:	10 82       	st	Z, r1
    3480:	31 97       	sbiw	r30, 0x01	; 1
    3482:	10 82       	st	Z, r1
    3484:	31 97       	sbiw	r30, 0x01	; 1
    3486:	62 e0       	ldi	r22, 0x02	; 2
    3488:	60 83       	st	Z, r22
    348a:	31 97       	sbiw	r30, 0x01	; 1
    348c:	63 e0       	ldi	r22, 0x03	; 3
    348e:	60 83       	st	Z, r22
    3490:	31 97       	sbiw	r30, 0x01	; 1
    3492:	64 e0       	ldi	r22, 0x04	; 4
    3494:	60 83       	st	Z, r22
    3496:	31 97       	sbiw	r30, 0x01	; 1
    3498:	65 e0       	ldi	r22, 0x05	; 5
    349a:	60 83       	st	Z, r22
    349c:	31 97       	sbiw	r30, 0x01	; 1
    349e:	66 e0       	ldi	r22, 0x06	; 6
    34a0:	60 83       	st	Z, r22
    34a2:	31 97       	sbiw	r30, 0x01	; 1
    34a4:	67 e0       	ldi	r22, 0x07	; 7
    34a6:	60 83       	st	Z, r22
    34a8:	31 97       	sbiw	r30, 0x01	; 1
    34aa:	68 e0       	ldi	r22, 0x08	; 8
    34ac:	60 83       	st	Z, r22
    34ae:	31 97       	sbiw	r30, 0x01	; 1
    34b0:	69 e0       	ldi	r22, 0x09	; 9
    34b2:	60 83       	st	Z, r22
    34b4:	31 97       	sbiw	r30, 0x01	; 1
    34b6:	60 e1       	ldi	r22, 0x10	; 16
    34b8:	60 83       	st	Z, r22
    34ba:	31 97       	sbiw	r30, 0x01	; 1
    34bc:	30 83       	st	Z, r19
    34be:	31 97       	sbiw	r30, 0x01	; 1
    34c0:	32 e1       	ldi	r19, 0x12	; 18
    34c2:	30 83       	st	Z, r19
    34c4:	31 97       	sbiw	r30, 0x01	; 1
    34c6:	33 e1       	ldi	r19, 0x13	; 19
    34c8:	30 83       	st	Z, r19
    34ca:	31 97       	sbiw	r30, 0x01	; 1
    34cc:	34 e1       	ldi	r19, 0x14	; 20
    34ce:	30 83       	st	Z, r19
    34d0:	31 97       	sbiw	r30, 0x01	; 1
    34d2:	35 e1       	ldi	r19, 0x15	; 21
    34d4:	30 83       	st	Z, r19
    34d6:	31 97       	sbiw	r30, 0x01	; 1
    34d8:	36 e1       	ldi	r19, 0x16	; 22
    34da:	30 83       	st	Z, r19
    34dc:	31 97       	sbiw	r30, 0x01	; 1
    34de:	37 e1       	ldi	r19, 0x17	; 23
    34e0:	30 83       	st	Z, r19
    34e2:	31 97       	sbiw	r30, 0x01	; 1
    34e4:	38 e1       	ldi	r19, 0x18	; 24
    34e6:	30 83       	st	Z, r19
    34e8:	31 97       	sbiw	r30, 0x01	; 1
    34ea:	39 e1       	ldi	r19, 0x19	; 25
    34ec:	30 83       	st	Z, r19
    34ee:	31 97       	sbiw	r30, 0x01	; 1
    34f0:	30 e2       	ldi	r19, 0x20	; 32
    34f2:	30 83       	st	Z, r19
    34f4:	31 97       	sbiw	r30, 0x01	; 1
    34f6:	31 e2       	ldi	r19, 0x21	; 33
    34f8:	30 83       	st	Z, r19
    34fa:	31 97       	sbiw	r30, 0x01	; 1
    34fc:	20 83       	st	Z, r18
    34fe:	31 97       	sbiw	r30, 0x01	; 1
    3500:	23 e2       	ldi	r18, 0x23	; 35
    3502:	20 83       	st	Z, r18
    3504:	31 97       	sbiw	r30, 0x01	; 1
    3506:	40 83       	st	Z, r20
    3508:	31 97       	sbiw	r30, 0x01	; 1
    350a:	50 83       	st	Z, r21
    350c:	31 97       	sbiw	r30, 0x01	; 1
    350e:	26 e2       	ldi	r18, 0x26	; 38
    3510:	20 83       	st	Z, r18
    3512:	31 97       	sbiw	r30, 0x01	; 1
    3514:	27 e2       	ldi	r18, 0x27	; 39
    3516:	20 83       	st	Z, r18
    3518:	31 97       	sbiw	r30, 0x01	; 1
    351a:	28 e2       	ldi	r18, 0x28	; 40
    351c:	20 83       	st	Z, r18
    351e:	31 97       	sbiw	r30, 0x01	; 1
    3520:	29 e2       	ldi	r18, 0x29	; 41
    3522:	20 83       	st	Z, r18
    3524:	31 97       	sbiw	r30, 0x01	; 1
    3526:	20 e3       	ldi	r18, 0x30	; 48
    3528:	20 83       	st	Z, r18
    352a:	31 97       	sbiw	r30, 0x01	; 1
    352c:	21 e3       	ldi	r18, 0x31	; 49
    352e:	20 83       	st	Z, r18
    3530:	89 97       	sbiw	r24, 0x29	; 41
    3532:	08 95       	ret

00003534 <xPortStartScheduler>:
    3534:	8c e7       	ldi	r24, 0x7C	; 124
    3536:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <__TEXT_REGION_LENGTH__+0x700a69>
    353a:	8f ef       	ldi	r24, 0xFF	; 255
    353c:	80 93 68 0a 	sts	0x0A68, r24	; 0x800a68 <__TEXT_REGION_LENGTH__+0x700a68>
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
    3546:	81 e1       	ldi	r24, 0x11	; 17
    3548:	80 93 41 0a 	sts	0x0A41, r24	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
    354c:	83 e0       	ldi	r24, 0x03	; 3
    354e:	80 93 47 0a 	sts	0x0A47, r24	; 0x800a47 <__TEXT_REGION_LENGTH__+0x700a47>
    3552:	a0 91 c9 41 	lds	r26, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    3556:	b0 91 ca 41 	lds	r27, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    355a:	cd 91       	ld	r28, X+
    355c:	cd bf       	out	0x3d, r28	; 61
    355e:	dd 91       	ld	r29, X+
    3560:	de bf       	out	0x3e, r29	; 62
    3562:	ff 91       	pop	r31
    3564:	ef 91       	pop	r30
    3566:	df 91       	pop	r29
    3568:	cf 91       	pop	r28
    356a:	bf 91       	pop	r27
    356c:	af 91       	pop	r26
    356e:	9f 91       	pop	r25
    3570:	8f 91       	pop	r24
    3572:	7f 91       	pop	r23
    3574:	6f 91       	pop	r22
    3576:	5f 91       	pop	r21
    3578:	4f 91       	pop	r20
    357a:	3f 91       	pop	r19
    357c:	2f 91       	pop	r18
    357e:	1f 91       	pop	r17
    3580:	0f 91       	pop	r16
    3582:	ff 90       	pop	r15
    3584:	ef 90       	pop	r14
    3586:	df 90       	pop	r13
    3588:	cf 90       	pop	r12
    358a:	bf 90       	pop	r11
    358c:	af 90       	pop	r10
    358e:	9f 90       	pop	r9
    3590:	8f 90       	pop	r8
    3592:	7f 90       	pop	r7
    3594:	6f 90       	pop	r6
    3596:	5f 90       	pop	r5
    3598:	4f 90       	pop	r4
    359a:	3f 90       	pop	r3
    359c:	2f 90       	pop	r2
    359e:	1f 90       	pop	r1
    35a0:	0f 90       	pop	r0
    35a2:	0c be       	out	0x3c, r0	; 60
    35a4:	0f 90       	pop	r0
    35a6:	0b be       	out	0x3b, r0	; 59
    35a8:	0f 90       	pop	r0
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	0f 90       	pop	r0
    35ae:	08 95       	ret
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	08 95       	ret

000035b4 <vPortYield>:
    35b4:	0f 92       	push	r0
    35b6:	0f b6       	in	r0, 0x3f	; 63
    35b8:	f8 94       	cli
    35ba:	0f 92       	push	r0
    35bc:	0b b6       	in	r0, 0x3b	; 59
    35be:	0f 92       	push	r0
    35c0:	0c b6       	in	r0, 0x3c	; 60
    35c2:	0f 92       	push	r0
    35c4:	1f 92       	push	r1
    35c6:	11 24       	eor	r1, r1
    35c8:	2f 92       	push	r2
    35ca:	3f 92       	push	r3
    35cc:	4f 92       	push	r4
    35ce:	5f 92       	push	r5
    35d0:	6f 92       	push	r6
    35d2:	7f 92       	push	r7
    35d4:	8f 92       	push	r8
    35d6:	9f 92       	push	r9
    35d8:	af 92       	push	r10
    35da:	bf 92       	push	r11
    35dc:	cf 92       	push	r12
    35de:	df 92       	push	r13
    35e0:	ef 92       	push	r14
    35e2:	ff 92       	push	r15
    35e4:	0f 93       	push	r16
    35e6:	1f 93       	push	r17
    35e8:	2f 93       	push	r18
    35ea:	3f 93       	push	r19
    35ec:	4f 93       	push	r20
    35ee:	5f 93       	push	r21
    35f0:	6f 93       	push	r22
    35f2:	7f 93       	push	r23
    35f4:	8f 93       	push	r24
    35f6:	9f 93       	push	r25
    35f8:	af 93       	push	r26
    35fa:	bf 93       	push	r27
    35fc:	cf 93       	push	r28
    35fe:	df 93       	push	r29
    3600:	ef 93       	push	r30
    3602:	ff 93       	push	r31
    3604:	a0 91 c9 41 	lds	r26, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    3608:	b0 91 ca 41 	lds	r27, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    360c:	0d b6       	in	r0, 0x3d	; 61
    360e:	0d 92       	st	X+, r0
    3610:	0e b6       	in	r0, 0x3e	; 62
    3612:	0d 92       	st	X+, r0
    3614:	0e 94 51 22 	call	0x44a2	; 0x44a2 <vTaskSwitchContext>
    3618:	a0 91 c9 41 	lds	r26, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    361c:	b0 91 ca 41 	lds	r27, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    3620:	cd 91       	ld	r28, X+
    3622:	cd bf       	out	0x3d, r28	; 61
    3624:	dd 91       	ld	r29, X+
    3626:	de bf       	out	0x3e, r29	; 62
    3628:	ff 91       	pop	r31
    362a:	ef 91       	pop	r30
    362c:	df 91       	pop	r29
    362e:	cf 91       	pop	r28
    3630:	bf 91       	pop	r27
    3632:	af 91       	pop	r26
    3634:	9f 91       	pop	r25
    3636:	8f 91       	pop	r24
    3638:	7f 91       	pop	r23
    363a:	6f 91       	pop	r22
    363c:	5f 91       	pop	r21
    363e:	4f 91       	pop	r20
    3640:	3f 91       	pop	r19
    3642:	2f 91       	pop	r18
    3644:	1f 91       	pop	r17
    3646:	0f 91       	pop	r16
    3648:	ff 90       	pop	r15
    364a:	ef 90       	pop	r14
    364c:	df 90       	pop	r13
    364e:	cf 90       	pop	r12
    3650:	bf 90       	pop	r11
    3652:	af 90       	pop	r10
    3654:	9f 90       	pop	r9
    3656:	8f 90       	pop	r8
    3658:	7f 90       	pop	r7
    365a:	6f 90       	pop	r6
    365c:	5f 90       	pop	r5
    365e:	4f 90       	pop	r4
    3660:	3f 90       	pop	r3
    3662:	2f 90       	pop	r2
    3664:	1f 90       	pop	r1
    3666:	0f 90       	pop	r0
    3668:	0c be       	out	0x3c, r0	; 60
    366a:	0f 90       	pop	r0
    366c:	0b be       	out	0x3b, r0	; 59
    366e:	0f 90       	pop	r0
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	0f 90       	pop	r0
    3674:	08 95       	ret

00003676 <vPortYieldFromTick>:
    3676:	0f 92       	push	r0
    3678:	0f b6       	in	r0, 0x3f	; 63
    367a:	f8 94       	cli
    367c:	0f 92       	push	r0
    367e:	0b b6       	in	r0, 0x3b	; 59
    3680:	0f 92       	push	r0
    3682:	0c b6       	in	r0, 0x3c	; 60
    3684:	0f 92       	push	r0
    3686:	1f 92       	push	r1
    3688:	11 24       	eor	r1, r1
    368a:	2f 92       	push	r2
    368c:	3f 92       	push	r3
    368e:	4f 92       	push	r4
    3690:	5f 92       	push	r5
    3692:	6f 92       	push	r6
    3694:	7f 92       	push	r7
    3696:	8f 92       	push	r8
    3698:	9f 92       	push	r9
    369a:	af 92       	push	r10
    369c:	bf 92       	push	r11
    369e:	cf 92       	push	r12
    36a0:	df 92       	push	r13
    36a2:	ef 92       	push	r14
    36a4:	ff 92       	push	r15
    36a6:	0f 93       	push	r16
    36a8:	1f 93       	push	r17
    36aa:	2f 93       	push	r18
    36ac:	3f 93       	push	r19
    36ae:	4f 93       	push	r20
    36b0:	5f 93       	push	r21
    36b2:	6f 93       	push	r22
    36b4:	7f 93       	push	r23
    36b6:	8f 93       	push	r24
    36b8:	9f 93       	push	r25
    36ba:	af 93       	push	r26
    36bc:	bf 93       	push	r27
    36be:	cf 93       	push	r28
    36c0:	df 93       	push	r29
    36c2:	ef 93       	push	r30
    36c4:	ff 93       	push	r31
    36c6:	a0 91 c9 41 	lds	r26, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    36ca:	b0 91 ca 41 	lds	r27, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    36ce:	0d b6       	in	r0, 0x3d	; 61
    36d0:	0d 92       	st	X+, r0
    36d2:	0e b6       	in	r0, 0x3e	; 62
    36d4:	0d 92       	st	X+, r0
    36d6:	0e 94 33 20 	call	0x4066	; 0x4066 <vTaskIncrementTick>
    36da:	0e 94 51 22 	call	0x44a2	; 0x44a2 <vTaskSwitchContext>
    36de:	a0 91 c9 41 	lds	r26, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    36e2:	b0 91 ca 41 	lds	r27, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    36e6:	cd 91       	ld	r28, X+
    36e8:	cd bf       	out	0x3d, r28	; 61
    36ea:	dd 91       	ld	r29, X+
    36ec:	de bf       	out	0x3e, r29	; 62
    36ee:	ff 91       	pop	r31
    36f0:	ef 91       	pop	r30
    36f2:	df 91       	pop	r29
    36f4:	cf 91       	pop	r28
    36f6:	bf 91       	pop	r27
    36f8:	af 91       	pop	r26
    36fa:	9f 91       	pop	r25
    36fc:	8f 91       	pop	r24
    36fe:	7f 91       	pop	r23
    3700:	6f 91       	pop	r22
    3702:	5f 91       	pop	r21
    3704:	4f 91       	pop	r20
    3706:	3f 91       	pop	r19
    3708:	2f 91       	pop	r18
    370a:	1f 91       	pop	r17
    370c:	0f 91       	pop	r16
    370e:	ff 90       	pop	r15
    3710:	ef 90       	pop	r14
    3712:	df 90       	pop	r13
    3714:	cf 90       	pop	r12
    3716:	bf 90       	pop	r11
    3718:	af 90       	pop	r10
    371a:	9f 90       	pop	r9
    371c:	8f 90       	pop	r8
    371e:	7f 90       	pop	r7
    3720:	6f 90       	pop	r6
    3722:	5f 90       	pop	r5
    3724:	4f 90       	pop	r4
    3726:	3f 90       	pop	r3
    3728:	2f 90       	pop	r2
    372a:	1f 90       	pop	r1
    372c:	0f 90       	pop	r0
    372e:	0c be       	out	0x3c, r0	; 60
    3730:	0f 90       	pop	r0
    3732:	0b be       	out	0x3b, r0	; 59
    3734:	0f 90       	pop	r0
    3736:	0f be       	out	0x3f, r0	; 63
    3738:	0f 90       	pop	r0
    373a:	08 95       	ret

0000373c <__vector_55>:
    373c:	0e 94 3b 1b 	call	0x3676	; 0x3676 <vPortYieldFromTick>
    3740:	18 95       	reti

00003742 <prvCopyDataToQueue>:
    3742:	cf 93       	push	r28
    3744:	df 93       	push	r29
    3746:	ec 01       	movw	r28, r24
    3748:	88 a1       	ldd	r24, Y+32	; 0x20
    374a:	81 11       	cpse	r24, r1
    374c:	0b c0       	rjmp	.+22     	; 0x3764 <prvCopyDataToQueue+0x22>
    374e:	88 81       	ld	r24, Y
    3750:	99 81       	ldd	r25, Y+1	; 0x01
    3752:	89 2b       	or	r24, r25
    3754:	e1 f5       	brne	.+120    	; 0x37ce <prvCopyDataToQueue+0x8c>
    3756:	8a 81       	ldd	r24, Y+2	; 0x02
    3758:	9b 81       	ldd	r25, Y+3	; 0x03
    375a:	0e 94 0c 24 	call	0x4818	; 0x4818 <vTaskPriorityDisinherit>
    375e:	1a 82       	std	Y+2, r1	; 0x02
    3760:	1b 82       	std	Y+3, r1	; 0x03
    3762:	35 c0       	rjmp	.+106    	; 0x37ce <prvCopyDataToQueue+0x8c>
    3764:	41 11       	cpse	r20, r1
    3766:	17 c0       	rjmp	.+46     	; 0x3796 <prvCopyDataToQueue+0x54>
    3768:	48 2f       	mov	r20, r24
    376a:	50 e0       	ldi	r21, 0x00	; 0
    376c:	8c 81       	ldd	r24, Y+4	; 0x04
    376e:	9d 81       	ldd	r25, Y+5	; 0x05
    3770:	0e 94 89 2f 	call	0x5f12	; 0x5f12 <memcpy>
    3774:	28 a1       	ldd	r18, Y+32	; 0x20
    3776:	8c 81       	ldd	r24, Y+4	; 0x04
    3778:	9d 81       	ldd	r25, Y+5	; 0x05
    377a:	82 0f       	add	r24, r18
    377c:	91 1d       	adc	r25, r1
    377e:	8c 83       	std	Y+4, r24	; 0x04
    3780:	9d 83       	std	Y+5, r25	; 0x05
    3782:	2a 81       	ldd	r18, Y+2	; 0x02
    3784:	3b 81       	ldd	r19, Y+3	; 0x03
    3786:	82 17       	cp	r24, r18
    3788:	93 07       	cpc	r25, r19
    378a:	08 f1       	brcs	.+66     	; 0x37ce <prvCopyDataToQueue+0x8c>
    378c:	88 81       	ld	r24, Y
    378e:	99 81       	ldd	r25, Y+1	; 0x01
    3790:	8c 83       	std	Y+4, r24	; 0x04
    3792:	9d 83       	std	Y+5, r25	; 0x05
    3794:	1c c0       	rjmp	.+56     	; 0x37ce <prvCopyDataToQueue+0x8c>
    3796:	48 2f       	mov	r20, r24
    3798:	50 e0       	ldi	r21, 0x00	; 0
    379a:	8e 81       	ldd	r24, Y+6	; 0x06
    379c:	9f 81       	ldd	r25, Y+7	; 0x07
    379e:	0e 94 89 2f 	call	0x5f12	; 0x5f12 <memcpy>
    37a2:	88 a1       	ldd	r24, Y+32	; 0x20
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	91 95       	neg	r25
    37a8:	81 95       	neg	r24
    37aa:	91 09       	sbc	r25, r1
    37ac:	2e 81       	ldd	r18, Y+6	; 0x06
    37ae:	3f 81       	ldd	r19, Y+7	; 0x07
    37b0:	28 0f       	add	r18, r24
    37b2:	39 1f       	adc	r19, r25
    37b4:	2e 83       	std	Y+6, r18	; 0x06
    37b6:	3f 83       	std	Y+7, r19	; 0x07
    37b8:	48 81       	ld	r20, Y
    37ba:	59 81       	ldd	r21, Y+1	; 0x01
    37bc:	24 17       	cp	r18, r20
    37be:	35 07       	cpc	r19, r21
    37c0:	30 f4       	brcc	.+12     	; 0x37ce <prvCopyDataToQueue+0x8c>
    37c2:	2a 81       	ldd	r18, Y+2	; 0x02
    37c4:	3b 81       	ldd	r19, Y+3	; 0x03
    37c6:	82 0f       	add	r24, r18
    37c8:	93 1f       	adc	r25, r19
    37ca:	8e 83       	std	Y+6, r24	; 0x06
    37cc:	9f 83       	std	Y+7, r25	; 0x07
    37ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37d0:	8f 5f       	subi	r24, 0xFF	; 255
    37d2:	8e 8f       	std	Y+30, r24	; 0x1e
    37d4:	df 91       	pop	r29
    37d6:	cf 91       	pop	r28
    37d8:	08 95       	ret

000037da <prvCopyDataFromQueue>:
    37da:	fc 01       	movw	r30, r24
    37dc:	80 81       	ld	r24, Z
    37de:	91 81       	ldd	r25, Z+1	; 0x01
    37e0:	00 97       	sbiw	r24, 0x00	; 0
    37e2:	a1 f0       	breq	.+40     	; 0x380c <prvCopyDataFromQueue+0x32>
    37e4:	40 a1       	ldd	r20, Z+32	; 0x20
    37e6:	50 e0       	ldi	r21, 0x00	; 0
    37e8:	26 81       	ldd	r18, Z+6	; 0x06
    37ea:	37 81       	ldd	r19, Z+7	; 0x07
    37ec:	24 0f       	add	r18, r20
    37ee:	35 1f       	adc	r19, r21
    37f0:	26 83       	std	Z+6, r18	; 0x06
    37f2:	37 83       	std	Z+7, r19	; 0x07
    37f4:	a2 81       	ldd	r26, Z+2	; 0x02
    37f6:	b3 81       	ldd	r27, Z+3	; 0x03
    37f8:	2a 17       	cp	r18, r26
    37fa:	3b 07       	cpc	r19, r27
    37fc:	10 f0       	brcs	.+4      	; 0x3802 <prvCopyDataFromQueue+0x28>
    37fe:	86 83       	std	Z+6, r24	; 0x06
    3800:	97 83       	std	Z+7, r25	; 0x07
    3802:	cb 01       	movw	r24, r22
    3804:	66 81       	ldd	r22, Z+6	; 0x06
    3806:	77 81       	ldd	r23, Z+7	; 0x07
    3808:	0e 94 89 2f 	call	0x5f12	; 0x5f12 <memcpy>
    380c:	08 95       	ret

0000380e <prvUnlockQueue>:
    380e:	0f 93       	push	r16
    3810:	1f 93       	push	r17
    3812:	cf 93       	push	r28
    3814:	df 93       	push	r29
    3816:	ec 01       	movw	r28, r24
    3818:	0f b6       	in	r0, 0x3f	; 63
    381a:	f8 94       	cli
    381c:	0f 92       	push	r0
    381e:	8a a1       	ldd	r24, Y+34	; 0x22
    3820:	18 16       	cp	r1, r24
    3822:	b4 f4       	brge	.+44     	; 0x3850 <prvUnlockQueue+0x42>
    3824:	8b 89       	ldd	r24, Y+19	; 0x13
    3826:	81 11       	cpse	r24, r1
    3828:	05 c0       	rjmp	.+10     	; 0x3834 <prvUnlockQueue+0x26>
    382a:	12 c0       	rjmp	.+36     	; 0x3850 <prvUnlockQueue+0x42>
    382c:	8b 89       	ldd	r24, Y+19	; 0x13
    382e:	81 11       	cpse	r24, r1
    3830:	04 c0       	rjmp	.+8      	; 0x383a <prvUnlockQueue+0x2c>
    3832:	0e c0       	rjmp	.+28     	; 0x3850 <prvUnlockQueue+0x42>
    3834:	8e 01       	movw	r16, r28
    3836:	0d 5e       	subi	r16, 0xED	; 237
    3838:	1f 4f       	sbci	r17, 0xFF	; 255
    383a:	c8 01       	movw	r24, r16
    383c:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <xTaskRemoveFromEventList>
    3840:	81 11       	cpse	r24, r1
    3842:	0e 94 95 23 	call	0x472a	; 0x472a <vTaskMissedYield>
    3846:	8a a1       	ldd	r24, Y+34	; 0x22
    3848:	81 50       	subi	r24, 0x01	; 1
    384a:	8a a3       	std	Y+34, r24	; 0x22
    384c:	18 16       	cp	r1, r24
    384e:	74 f3       	brlt	.-36     	; 0x382c <prvUnlockQueue+0x1e>
    3850:	8f ef       	ldi	r24, 0xFF	; 255
    3852:	8a a3       	std	Y+34, r24	; 0x22
    3854:	0f 90       	pop	r0
    3856:	0f be       	out	0x3f, r0	; 63
    3858:	0f b6       	in	r0, 0x3f	; 63
    385a:	f8 94       	cli
    385c:	0f 92       	push	r0
    385e:	89 a1       	ldd	r24, Y+33	; 0x21
    3860:	18 16       	cp	r1, r24
    3862:	b4 f4       	brge	.+44     	; 0x3890 <prvUnlockQueue+0x82>
    3864:	88 85       	ldd	r24, Y+8	; 0x08
    3866:	81 11       	cpse	r24, r1
    3868:	05 c0       	rjmp	.+10     	; 0x3874 <prvUnlockQueue+0x66>
    386a:	12 c0       	rjmp	.+36     	; 0x3890 <prvUnlockQueue+0x82>
    386c:	88 85       	ldd	r24, Y+8	; 0x08
    386e:	81 11       	cpse	r24, r1
    3870:	04 c0       	rjmp	.+8      	; 0x387a <prvUnlockQueue+0x6c>
    3872:	0e c0       	rjmp	.+28     	; 0x3890 <prvUnlockQueue+0x82>
    3874:	8e 01       	movw	r16, r28
    3876:	08 5f       	subi	r16, 0xF8	; 248
    3878:	1f 4f       	sbci	r17, 0xFF	; 255
    387a:	c8 01       	movw	r24, r16
    387c:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <xTaskRemoveFromEventList>
    3880:	81 11       	cpse	r24, r1
    3882:	0e 94 95 23 	call	0x472a	; 0x472a <vTaskMissedYield>
    3886:	89 a1       	ldd	r24, Y+33	; 0x21
    3888:	81 50       	subi	r24, 0x01	; 1
    388a:	89 a3       	std	Y+33, r24	; 0x21
    388c:	18 16       	cp	r1, r24
    388e:	74 f3       	brlt	.-36     	; 0x386c <prvUnlockQueue+0x5e>
    3890:	8f ef       	ldi	r24, 0xFF	; 255
    3892:	89 a3       	std	Y+33, r24	; 0x21
    3894:	0f 90       	pop	r0
    3896:	0f be       	out	0x3f, r0	; 63
    3898:	df 91       	pop	r29
    389a:	cf 91       	pop	r28
    389c:	1f 91       	pop	r17
    389e:	0f 91       	pop	r16
    38a0:	08 95       	ret

000038a2 <xQueueGenericReset>:
    38a2:	1f 93       	push	r17
    38a4:	cf 93       	push	r28
    38a6:	df 93       	push	r29
    38a8:	61 30       	cpi	r22, 0x01	; 1
    38aa:	59 f0       	breq	.+22     	; 0x38c2 <xQueueGenericReset+0x20>
    38ac:	fc 01       	movw	r30, r24
    38ae:	23 89       	ldd	r18, Z+19	; 0x13
    38b0:	30 85       	ldd	r19, Z+8	; 0x08
    38b2:	31 11       	cpse	r19, r1
    38b4:	2c c0       	rjmp	.+88     	; 0x390e <xQueueGenericReset+0x6c>
    38b6:	11 e0       	ldi	r17, 0x01	; 1
    38b8:	21 11       	cpse	r18, r1
    38ba:	10 e0       	ldi	r17, 0x00	; 0
    38bc:	21 11       	cpse	r18, r1
    38be:	28 c0       	rjmp	.+80     	; 0x3910 <xQueueGenericReset+0x6e>
    38c0:	01 c0       	rjmp	.+2      	; 0x38c4 <xQueueGenericReset+0x22>
    38c2:	11 e0       	ldi	r17, 0x01	; 1
    38c4:	ec 01       	movw	r28, r24
    38c6:	48 81       	ld	r20, Y
    38c8:	59 81       	ldd	r21, Y+1	; 0x01
    38ca:	28 a1       	ldd	r18, Y+32	; 0x20
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	6f 8d       	ldd	r22, Y+31	; 0x1f
    38d0:	62 9f       	mul	r22, r18
    38d2:	c0 01       	movw	r24, r0
    38d4:	63 9f       	mul	r22, r19
    38d6:	90 0d       	add	r25, r0
    38d8:	11 24       	eor	r1, r1
    38da:	ba 01       	movw	r22, r20
    38dc:	68 0f       	add	r22, r24
    38de:	79 1f       	adc	r23, r25
    38e0:	6a 83       	std	Y+2, r22	; 0x02
    38e2:	7b 83       	std	Y+3, r23	; 0x03
    38e4:	1e 8e       	std	Y+30, r1	; 0x1e
    38e6:	4c 83       	std	Y+4, r20	; 0x04
    38e8:	5d 83       	std	Y+5, r21	; 0x05
    38ea:	82 1b       	sub	r24, r18
    38ec:	93 0b       	sbc	r25, r19
    38ee:	84 0f       	add	r24, r20
    38f0:	95 1f       	adc	r25, r21
    38f2:	8e 83       	std	Y+6, r24	; 0x06
    38f4:	9f 83       	std	Y+7, r25	; 0x07
    38f6:	8f ef       	ldi	r24, 0xFF	; 255
    38f8:	89 a3       	std	Y+33, r24	; 0x21
    38fa:	8a a3       	std	Y+34, r24	; 0x22
    38fc:	ce 01       	movw	r24, r28
    38fe:	08 96       	adiw	r24, 0x08	; 8
    3900:	0e 94 77 19 	call	0x32ee	; 0x32ee <vListInitialise>
    3904:	ce 01       	movw	r24, r28
    3906:	43 96       	adiw	r24, 0x13	; 19
    3908:	0e 94 77 19 	call	0x32ee	; 0x32ee <vListInitialise>
    390c:	01 c0       	rjmp	.+2      	; 0x3910 <xQueueGenericReset+0x6e>
    390e:	10 e0       	ldi	r17, 0x00	; 0
    3910:	81 2f       	mov	r24, r17
    3912:	df 91       	pop	r29
    3914:	cf 91       	pop	r28
    3916:	1f 91       	pop	r17
    3918:	08 95       	ret

0000391a <xQueueGenericCreate>:
    391a:	0f 93       	push	r16
    391c:	1f 93       	push	r17
    391e:	cf 93       	push	r28
    3920:	df 93       	push	r29
    3922:	88 23       	and	r24, r24
    3924:	01 f1       	breq	.+64     	; 0x3966 <xQueueGenericCreate+0x4c>
    3926:	06 2f       	mov	r16, r22
    3928:	18 2f       	mov	r17, r24
    392a:	83 e2       	ldi	r24, 0x23	; 35
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	0e 94 aa 18 	call	0x3154	; 0x3154 <pvPortMalloc>
    3932:	ec 01       	movw	r28, r24
    3934:	89 2b       	or	r24, r25
    3936:	c9 f0       	breq	.+50     	; 0x396a <xQueueGenericCreate+0x50>
    3938:	10 9f       	mul	r17, r16
    393a:	c0 01       	movw	r24, r0
    393c:	11 24       	eor	r1, r1
    393e:	01 96       	adiw	r24, 0x01	; 1
    3940:	0e 94 aa 18 	call	0x3154	; 0x3154 <pvPortMalloc>
    3944:	88 83       	st	Y, r24
    3946:	99 83       	std	Y+1, r25	; 0x01
    3948:	89 2b       	or	r24, r25
    394a:	39 f0       	breq	.+14     	; 0x395a <xQueueGenericCreate+0x40>
    394c:	1f 8f       	std	Y+31, r17	; 0x1f
    394e:	08 a3       	std	Y+32, r16	; 0x20
    3950:	61 e0       	ldi	r22, 0x01	; 1
    3952:	ce 01       	movw	r24, r28
    3954:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <xQueueGenericReset>
    3958:	08 c0       	rjmp	.+16     	; 0x396a <xQueueGenericCreate+0x50>
    395a:	ce 01       	movw	r24, r28
    395c:	0e 94 44 19 	call	0x3288	; 0x3288 <vPortFree>
    3960:	c0 e0       	ldi	r28, 0x00	; 0
    3962:	d0 e0       	ldi	r29, 0x00	; 0
    3964:	02 c0       	rjmp	.+4      	; 0x396a <xQueueGenericCreate+0x50>
    3966:	c0 e0       	ldi	r28, 0x00	; 0
    3968:	d0 e0       	ldi	r29, 0x00	; 0
    396a:	ce 01       	movw	r24, r28
    396c:	df 91       	pop	r29
    396e:	cf 91       	pop	r28
    3970:	1f 91       	pop	r17
    3972:	0f 91       	pop	r16
    3974:	08 95       	ret

00003976 <xQueueGenericSend>:
    3976:	af 92       	push	r10
    3978:	bf 92       	push	r11
    397a:	cf 92       	push	r12
    397c:	df 92       	push	r13
    397e:	ef 92       	push	r14
    3980:	ff 92       	push	r15
    3982:	0f 93       	push	r16
    3984:	1f 93       	push	r17
    3986:	cf 93       	push	r28
    3988:	df 93       	push	r29
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
    398e:	29 97       	sbiw	r28, 0x09	; 9
    3990:	cd bf       	out	0x3d, r28	; 61
    3992:	de bf       	out	0x3e, r29	; 62
    3994:	7c 01       	movw	r14, r24
    3996:	5b 01       	movw	r10, r22
    3998:	2e 83       	std	Y+6, r18	; 0x06
    399a:	3f 83       	std	Y+7, r19	; 0x07
    399c:	48 87       	std	Y+8, r20	; 0x08
    399e:	59 87       	std	Y+9, r21	; 0x09
    39a0:	10 e0       	ldi	r17, 0x00	; 0
    39a2:	6c 01       	movw	r12, r24
    39a4:	88 e0       	ldi	r24, 0x08	; 8
    39a6:	c8 0e       	add	r12, r24
    39a8:	d1 1c       	adc	r13, r1
    39aa:	0f b6       	in	r0, 0x3f	; 63
    39ac:	f8 94       	cli
    39ae:	0f 92       	push	r0
    39b0:	f7 01       	movw	r30, r14
    39b2:	96 8d       	ldd	r25, Z+30	; 0x1e
    39b4:	87 8d       	ldd	r24, Z+31	; 0x1f
    39b6:	98 17       	cp	r25, r24
    39b8:	a8 f4       	brcc	.+42     	; 0x39e4 <xQueueGenericSend+0x6e>
    39ba:	40 2f       	mov	r20, r16
    39bc:	b5 01       	movw	r22, r10
    39be:	c7 01       	movw	r24, r14
    39c0:	0e 94 a1 1b 	call	0x3742	; 0x3742 <prvCopyDataToQueue>
    39c4:	f7 01       	movw	r30, r14
    39c6:	83 89       	ldd	r24, Z+19	; 0x13
    39c8:	88 23       	and	r24, r24
    39ca:	41 f0       	breq	.+16     	; 0x39dc <xQueueGenericSend+0x66>
    39cc:	c7 01       	movw	r24, r14
    39ce:	43 96       	adiw	r24, 0x13	; 19
    39d0:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <xTaskRemoveFromEventList>
    39d4:	81 30       	cpi	r24, 0x01	; 1
    39d6:	11 f4       	brne	.+4      	; 0x39dc <xQueueGenericSend+0x66>
    39d8:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <vPortYield>
    39dc:	0f 90       	pop	r0
    39de:	0f be       	out	0x3f, r0	; 63
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	56 c0       	rjmp	.+172    	; 0x3a90 <xQueueGenericSend+0x11a>
    39e4:	8e 81       	ldd	r24, Y+6	; 0x06
    39e6:	9f 81       	ldd	r25, Y+7	; 0x07
    39e8:	a8 85       	ldd	r26, Y+8	; 0x08
    39ea:	b9 85       	ldd	r27, Y+9	; 0x09
    39ec:	89 2b       	or	r24, r25
    39ee:	8a 2b       	or	r24, r26
    39f0:	8b 2b       	or	r24, r27
    39f2:	21 f4       	brne	.+8      	; 0x39fc <xQueueGenericSend+0x86>
    39f4:	0f 90       	pop	r0
    39f6:	0f be       	out	0x3f, r0	; 63
    39f8:	80 e0       	ldi	r24, 0x00	; 0
    39fa:	4a c0       	rjmp	.+148    	; 0x3a90 <xQueueGenericSend+0x11a>
    39fc:	11 11       	cpse	r17, r1
    39fe:	05 c0       	rjmp	.+10     	; 0x3a0a <xQueueGenericSend+0x94>
    3a00:	ce 01       	movw	r24, r28
    3a02:	01 96       	adiw	r24, 0x01	; 1
    3a04:	0e 94 17 23 	call	0x462e	; 0x462e <vTaskSetTimeOutState>
    3a08:	11 e0       	ldi	r17, 0x01	; 1
    3a0a:	0f 90       	pop	r0
    3a0c:	0f be       	out	0x3f, r0	; 63
    3a0e:	0e 94 17 20 	call	0x402e	; 0x402e <vTaskSuspendAll>
    3a12:	0f b6       	in	r0, 0x3f	; 63
    3a14:	f8 94       	cli
    3a16:	0f 92       	push	r0
    3a18:	f7 01       	movw	r30, r14
    3a1a:	81 a1       	ldd	r24, Z+33	; 0x21
    3a1c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a1e:	09 f4       	brne	.+2      	; 0x3a22 <xQueueGenericSend+0xac>
    3a20:	11 a2       	std	Z+33, r1	; 0x21
    3a22:	f7 01       	movw	r30, r14
    3a24:	82 a1       	ldd	r24, Z+34	; 0x22
    3a26:	8f 3f       	cpi	r24, 0xFF	; 255
    3a28:	09 f4       	brne	.+2      	; 0x3a2c <xQueueGenericSend+0xb6>
    3a2a:	12 a2       	std	Z+34, r1	; 0x22
    3a2c:	0f 90       	pop	r0
    3a2e:	0f be       	out	0x3f, r0	; 63
    3a30:	be 01       	movw	r22, r28
    3a32:	6a 5f       	subi	r22, 0xFA	; 250
    3a34:	7f 4f       	sbci	r23, 0xFF	; 255
    3a36:	ce 01       	movw	r24, r28
    3a38:	01 96       	adiw	r24, 0x01	; 1
    3a3a:	0e 94 28 23 	call	0x4650	; 0x4650 <xTaskCheckForTimeOut>
    3a3e:	81 11       	cpse	r24, r1
    3a40:	21 c0       	rjmp	.+66     	; 0x3a84 <xQueueGenericSend+0x10e>
    3a42:	0f b6       	in	r0, 0x3f	; 63
    3a44:	f8 94       	cli
    3a46:	0f 92       	push	r0
    3a48:	f7 01       	movw	r30, r14
    3a4a:	96 8d       	ldd	r25, Z+30	; 0x1e
    3a4c:	0f 90       	pop	r0
    3a4e:	0f be       	out	0x3f, r0	; 63
    3a50:	87 8d       	ldd	r24, Z+31	; 0x1f
    3a52:	98 13       	cpse	r25, r24
    3a54:	11 c0       	rjmp	.+34     	; 0x3a78 <xQueueGenericSend+0x102>
    3a56:	4e 81       	ldd	r20, Y+6	; 0x06
    3a58:	5f 81       	ldd	r21, Y+7	; 0x07
    3a5a:	68 85       	ldd	r22, Y+8	; 0x08
    3a5c:	79 85       	ldd	r23, Y+9	; 0x09
    3a5e:	c6 01       	movw	r24, r12
    3a60:	0e 94 ae 22 	call	0x455c	; 0x455c <vTaskPlaceOnEventList>
    3a64:	c7 01       	movw	r24, r14
    3a66:	0e 94 07 1c 	call	0x380e	; 0x380e <prvUnlockQueue>
    3a6a:	0e 94 34 21 	call	0x4268	; 0x4268 <xTaskResumeAll>
    3a6e:	81 11       	cpse	r24, r1
    3a70:	9c cf       	rjmp	.-200    	; 0x39aa <xQueueGenericSend+0x34>
    3a72:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <vPortYield>
    3a76:	99 cf       	rjmp	.-206    	; 0x39aa <xQueueGenericSend+0x34>
    3a78:	c7 01       	movw	r24, r14
    3a7a:	0e 94 07 1c 	call	0x380e	; 0x380e <prvUnlockQueue>
    3a7e:	0e 94 34 21 	call	0x4268	; 0x4268 <xTaskResumeAll>
    3a82:	93 cf       	rjmp	.-218    	; 0x39aa <xQueueGenericSend+0x34>
    3a84:	c7 01       	movw	r24, r14
    3a86:	0e 94 07 1c 	call	0x380e	; 0x380e <prvUnlockQueue>
    3a8a:	0e 94 34 21 	call	0x4268	; 0x4268 <xTaskResumeAll>
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	29 96       	adiw	r28, 0x09	; 9
    3a92:	cd bf       	out	0x3d, r28	; 61
    3a94:	de bf       	out	0x3e, r29	; 62
    3a96:	df 91       	pop	r29
    3a98:	cf 91       	pop	r28
    3a9a:	1f 91       	pop	r17
    3a9c:	0f 91       	pop	r16
    3a9e:	ff 90       	pop	r15
    3aa0:	ef 90       	pop	r14
    3aa2:	df 90       	pop	r13
    3aa4:	cf 90       	pop	r12
    3aa6:	bf 90       	pop	r11
    3aa8:	af 90       	pop	r10
    3aaa:	08 95       	ret

00003aac <xQueueGenericSendFromISR>:
    3aac:	0f 93       	push	r16
    3aae:	1f 93       	push	r17
    3ab0:	cf 93       	push	r28
    3ab2:	df 93       	push	r29
    3ab4:	8a 01       	movw	r16, r20
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	56 8d       	ldd	r21, Z+30	; 0x1e
    3aba:	37 8d       	ldd	r19, Z+31	; 0x1f
    3abc:	53 17       	cp	r21, r19
    3abe:	c0 f4       	brcc	.+48     	; 0x3af0 <xQueueGenericSendFromISR+0x44>
    3ac0:	42 2f       	mov	r20, r18
    3ac2:	ec 01       	movw	r28, r24
    3ac4:	0e 94 a1 1b 	call	0x3742	; 0x3742 <prvCopyDataToQueue>
    3ac8:	8a a1       	ldd	r24, Y+34	; 0x22
    3aca:	8f 3f       	cpi	r24, 0xFF	; 255
    3acc:	69 f4       	brne	.+26     	; 0x3ae8 <xQueueGenericSendFromISR+0x3c>
    3ace:	8b 89       	ldd	r24, Y+19	; 0x13
    3ad0:	88 23       	and	r24, r24
    3ad2:	81 f0       	breq	.+32     	; 0x3af4 <xQueueGenericSendFromISR+0x48>
    3ad4:	ce 01       	movw	r24, r28
    3ad6:	43 96       	adiw	r24, 0x13	; 19
    3ad8:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <xTaskRemoveFromEventList>
    3adc:	88 23       	and	r24, r24
    3ade:	61 f0       	breq	.+24     	; 0x3af8 <xQueueGenericSendFromISR+0x4c>
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	f8 01       	movw	r30, r16
    3ae4:	80 83       	st	Z, r24
    3ae6:	09 c0       	rjmp	.+18     	; 0x3afa <xQueueGenericSendFromISR+0x4e>
    3ae8:	8f 5f       	subi	r24, 0xFF	; 255
    3aea:	8a a3       	std	Y+34, r24	; 0x22
    3aec:	81 e0       	ldi	r24, 0x01	; 1
    3aee:	05 c0       	rjmp	.+10     	; 0x3afa <xQueueGenericSendFromISR+0x4e>
    3af0:	80 e0       	ldi	r24, 0x00	; 0
    3af2:	03 c0       	rjmp	.+6      	; 0x3afa <xQueueGenericSendFromISR+0x4e>
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	01 c0       	rjmp	.+2      	; 0x3afa <xQueueGenericSendFromISR+0x4e>
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	df 91       	pop	r29
    3afc:	cf 91       	pop	r28
    3afe:	1f 91       	pop	r17
    3b00:	0f 91       	pop	r16
    3b02:	08 95       	ret

00003b04 <xQueueGenericReceive>:
    3b04:	af 92       	push	r10
    3b06:	bf 92       	push	r11
    3b08:	cf 92       	push	r12
    3b0a:	df 92       	push	r13
    3b0c:	ef 92       	push	r14
    3b0e:	ff 92       	push	r15
    3b10:	0f 93       	push	r16
    3b12:	1f 93       	push	r17
    3b14:	cf 93       	push	r28
    3b16:	df 93       	push	r29
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
    3b1c:	29 97       	sbiw	r28, 0x09	; 9
    3b1e:	cd bf       	out	0x3d, r28	; 61
    3b20:	de bf       	out	0x3e, r29	; 62
    3b22:	7c 01       	movw	r14, r24
    3b24:	5b 01       	movw	r10, r22
    3b26:	2e 83       	std	Y+6, r18	; 0x06
    3b28:	3f 83       	std	Y+7, r19	; 0x07
    3b2a:	48 87       	std	Y+8, r20	; 0x08
    3b2c:	59 87       	std	Y+9, r21	; 0x09
    3b2e:	10 e0       	ldi	r17, 0x00	; 0
    3b30:	6c 01       	movw	r12, r24
    3b32:	83 e1       	ldi	r24, 0x13	; 19
    3b34:	c8 0e       	add	r12, r24
    3b36:	d1 1c       	adc	r13, r1
    3b38:	0f b6       	in	r0, 0x3f	; 63
    3b3a:	f8 94       	cli
    3b3c:	0f 92       	push	r0
    3b3e:	f7 01       	movw	r30, r14
    3b40:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b42:	88 23       	and	r24, r24
    3b44:	99 f1       	breq	.+102    	; 0x3bac <xQueueGenericReceive+0xa8>
    3b46:	c6 80       	ldd	r12, Z+6	; 0x06
    3b48:	d7 80       	ldd	r13, Z+7	; 0x07
    3b4a:	b5 01       	movw	r22, r10
    3b4c:	c7 01       	movw	r24, r14
    3b4e:	0e 94 ed 1b 	call	0x37da	; 0x37da <prvCopyDataFromQueue>
    3b52:	01 11       	cpse	r16, r1
    3b54:	1a c0       	rjmp	.+52     	; 0x3b8a <xQueueGenericReceive+0x86>
    3b56:	f7 01       	movw	r30, r14
    3b58:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b5a:	81 50       	subi	r24, 0x01	; 1
    3b5c:	86 8f       	std	Z+30, r24	; 0x1e
    3b5e:	80 81       	ld	r24, Z
    3b60:	91 81       	ldd	r25, Z+1	; 0x01
    3b62:	89 2b       	or	r24, r25
    3b64:	29 f4       	brne	.+10     	; 0x3b70 <xQueueGenericReceive+0x6c>
    3b66:	0e 94 b2 23 	call	0x4764	; 0x4764 <xTaskGetCurrentTaskHandle>
    3b6a:	f7 01       	movw	r30, r14
    3b6c:	82 83       	std	Z+2, r24	; 0x02
    3b6e:	93 83       	std	Z+3, r25	; 0x03
    3b70:	f7 01       	movw	r30, r14
    3b72:	80 85       	ldd	r24, Z+8	; 0x08
    3b74:	88 23       	and	r24, r24
    3b76:	b1 f0       	breq	.+44     	; 0x3ba4 <xQueueGenericReceive+0xa0>
    3b78:	c7 01       	movw	r24, r14
    3b7a:	08 96       	adiw	r24, 0x08	; 8
    3b7c:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <xTaskRemoveFromEventList>
    3b80:	81 30       	cpi	r24, 0x01	; 1
    3b82:	81 f4       	brne	.+32     	; 0x3ba4 <xQueueGenericReceive+0xa0>
    3b84:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <vPortYield>
    3b88:	0d c0       	rjmp	.+26     	; 0x3ba4 <xQueueGenericReceive+0xa0>
    3b8a:	f7 01       	movw	r30, r14
    3b8c:	c6 82       	std	Z+6, r12	; 0x06
    3b8e:	d7 82       	std	Z+7, r13	; 0x07
    3b90:	83 89       	ldd	r24, Z+19	; 0x13
    3b92:	88 23       	and	r24, r24
    3b94:	39 f0       	breq	.+14     	; 0x3ba4 <xQueueGenericReceive+0xa0>
    3b96:	c7 01       	movw	r24, r14
    3b98:	43 96       	adiw	r24, 0x13	; 19
    3b9a:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <xTaskRemoveFromEventList>
    3b9e:	81 11       	cpse	r24, r1
    3ba0:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <vPortYield>
    3ba4:	0f 90       	pop	r0
    3ba6:	0f be       	out	0x3f, r0	; 63
    3ba8:	81 e0       	ldi	r24, 0x01	; 1
    3baa:	62 c0       	rjmp	.+196    	; 0x3c70 <xQueueGenericReceive+0x16c>
    3bac:	8e 81       	ldd	r24, Y+6	; 0x06
    3bae:	9f 81       	ldd	r25, Y+7	; 0x07
    3bb0:	a8 85       	ldd	r26, Y+8	; 0x08
    3bb2:	b9 85       	ldd	r27, Y+9	; 0x09
    3bb4:	89 2b       	or	r24, r25
    3bb6:	8a 2b       	or	r24, r26
    3bb8:	8b 2b       	or	r24, r27
    3bba:	21 f4       	brne	.+8      	; 0x3bc4 <xQueueGenericReceive+0xc0>
    3bbc:	0f 90       	pop	r0
    3bbe:	0f be       	out	0x3f, r0	; 63
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	56 c0       	rjmp	.+172    	; 0x3c70 <xQueueGenericReceive+0x16c>
    3bc4:	11 11       	cpse	r17, r1
    3bc6:	05 c0       	rjmp	.+10     	; 0x3bd2 <xQueueGenericReceive+0xce>
    3bc8:	ce 01       	movw	r24, r28
    3bca:	01 96       	adiw	r24, 0x01	; 1
    3bcc:	0e 94 17 23 	call	0x462e	; 0x462e <vTaskSetTimeOutState>
    3bd0:	11 e0       	ldi	r17, 0x01	; 1
    3bd2:	0f 90       	pop	r0
    3bd4:	0f be       	out	0x3f, r0	; 63
    3bd6:	0e 94 17 20 	call	0x402e	; 0x402e <vTaskSuspendAll>
    3bda:	0f b6       	in	r0, 0x3f	; 63
    3bdc:	f8 94       	cli
    3bde:	0f 92       	push	r0
    3be0:	f7 01       	movw	r30, r14
    3be2:	81 a1       	ldd	r24, Z+33	; 0x21
    3be4:	8f 3f       	cpi	r24, 0xFF	; 255
    3be6:	09 f4       	brne	.+2      	; 0x3bea <xQueueGenericReceive+0xe6>
    3be8:	11 a2       	std	Z+33, r1	; 0x21
    3bea:	f7 01       	movw	r30, r14
    3bec:	82 a1       	ldd	r24, Z+34	; 0x22
    3bee:	8f 3f       	cpi	r24, 0xFF	; 255
    3bf0:	09 f4       	brne	.+2      	; 0x3bf4 <xQueueGenericReceive+0xf0>
    3bf2:	12 a2       	std	Z+34, r1	; 0x22
    3bf4:	0f 90       	pop	r0
    3bf6:	0f be       	out	0x3f, r0	; 63
    3bf8:	be 01       	movw	r22, r28
    3bfa:	6a 5f       	subi	r22, 0xFA	; 250
    3bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    3bfe:	ce 01       	movw	r24, r28
    3c00:	01 96       	adiw	r24, 0x01	; 1
    3c02:	0e 94 28 23 	call	0x4650	; 0x4650 <xTaskCheckForTimeOut>
    3c06:	81 11       	cpse	r24, r1
    3c08:	2d c0       	rjmp	.+90     	; 0x3c64 <xQueueGenericReceive+0x160>
    3c0a:	0f b6       	in	r0, 0x3f	; 63
    3c0c:	f8 94       	cli
    3c0e:	0f 92       	push	r0
    3c10:	f7 01       	movw	r30, r14
    3c12:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c14:	0f 90       	pop	r0
    3c16:	0f be       	out	0x3f, r0	; 63
    3c18:	81 11       	cpse	r24, r1
    3c1a:	1e c0       	rjmp	.+60     	; 0x3c58 <xQueueGenericReceive+0x154>
    3c1c:	80 81       	ld	r24, Z
    3c1e:	91 81       	ldd	r25, Z+1	; 0x01
    3c20:	89 2b       	or	r24, r25
    3c22:	49 f4       	brne	.+18     	; 0x3c36 <xQueueGenericReceive+0x132>
    3c24:	0f b6       	in	r0, 0x3f	; 63
    3c26:	f8 94       	cli
    3c28:	0f 92       	push	r0
    3c2a:	82 81       	ldd	r24, Z+2	; 0x02
    3c2c:	93 81       	ldd	r25, Z+3	; 0x03
    3c2e:	0e 94 b7 23 	call	0x476e	; 0x476e <vTaskPriorityInherit>
    3c32:	0f 90       	pop	r0
    3c34:	0f be       	out	0x3f, r0	; 63
    3c36:	4e 81       	ldd	r20, Y+6	; 0x06
    3c38:	5f 81       	ldd	r21, Y+7	; 0x07
    3c3a:	68 85       	ldd	r22, Y+8	; 0x08
    3c3c:	79 85       	ldd	r23, Y+9	; 0x09
    3c3e:	c6 01       	movw	r24, r12
    3c40:	0e 94 ae 22 	call	0x455c	; 0x455c <vTaskPlaceOnEventList>
    3c44:	c7 01       	movw	r24, r14
    3c46:	0e 94 07 1c 	call	0x380e	; 0x380e <prvUnlockQueue>
    3c4a:	0e 94 34 21 	call	0x4268	; 0x4268 <xTaskResumeAll>
    3c4e:	81 11       	cpse	r24, r1
    3c50:	73 cf       	rjmp	.-282    	; 0x3b38 <xQueueGenericReceive+0x34>
    3c52:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <vPortYield>
    3c56:	70 cf       	rjmp	.-288    	; 0x3b38 <xQueueGenericReceive+0x34>
    3c58:	c7 01       	movw	r24, r14
    3c5a:	0e 94 07 1c 	call	0x380e	; 0x380e <prvUnlockQueue>
    3c5e:	0e 94 34 21 	call	0x4268	; 0x4268 <xTaskResumeAll>
    3c62:	6a cf       	rjmp	.-300    	; 0x3b38 <xQueueGenericReceive+0x34>
    3c64:	c7 01       	movw	r24, r14
    3c66:	0e 94 07 1c 	call	0x380e	; 0x380e <prvUnlockQueue>
    3c6a:	0e 94 34 21 	call	0x4268	; 0x4268 <xTaskResumeAll>
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	29 96       	adiw	r28, 0x09	; 9
    3c72:	cd bf       	out	0x3d, r28	; 61
    3c74:	de bf       	out	0x3e, r29	; 62
    3c76:	df 91       	pop	r29
    3c78:	cf 91       	pop	r28
    3c7a:	1f 91       	pop	r17
    3c7c:	0f 91       	pop	r16
    3c7e:	ff 90       	pop	r15
    3c80:	ef 90       	pop	r14
    3c82:	df 90       	pop	r13
    3c84:	cf 90       	pop	r12
    3c86:	bf 90       	pop	r11
    3c88:	af 90       	pop	r10
    3c8a:	08 95       	ret

00003c8c <xQueueReceiveFromISR>:
    3c8c:	0f 93       	push	r16
    3c8e:	1f 93       	push	r17
    3c90:	cf 93       	push	r28
    3c92:	df 93       	push	r29
    3c94:	fc 01       	movw	r30, r24
    3c96:	26 8d       	ldd	r18, Z+30	; 0x1e
    3c98:	22 23       	and	r18, r18
    3c9a:	d9 f0       	breq	.+54     	; 0x3cd2 <xQueueReceiveFromISR+0x46>
    3c9c:	8a 01       	movw	r16, r20
    3c9e:	ec 01       	movw	r28, r24
    3ca0:	0e 94 ed 1b 	call	0x37da	; 0x37da <prvCopyDataFromQueue>
    3ca4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ca6:	81 50       	subi	r24, 0x01	; 1
    3ca8:	8e 8f       	std	Y+30, r24	; 0x1e
    3caa:	89 a1       	ldd	r24, Y+33	; 0x21
    3cac:	8f 3f       	cpi	r24, 0xFF	; 255
    3cae:	69 f4       	brne	.+26     	; 0x3cca <xQueueReceiveFromISR+0x3e>
    3cb0:	88 85       	ldd	r24, Y+8	; 0x08
    3cb2:	88 23       	and	r24, r24
    3cb4:	81 f0       	breq	.+32     	; 0x3cd6 <xQueueReceiveFromISR+0x4a>
    3cb6:	ce 01       	movw	r24, r28
    3cb8:	08 96       	adiw	r24, 0x08	; 8
    3cba:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <xTaskRemoveFromEventList>
    3cbe:	88 23       	and	r24, r24
    3cc0:	61 f0       	breq	.+24     	; 0x3cda <xQueueReceiveFromISR+0x4e>
    3cc2:	81 e0       	ldi	r24, 0x01	; 1
    3cc4:	f8 01       	movw	r30, r16
    3cc6:	80 83       	st	Z, r24
    3cc8:	09 c0       	rjmp	.+18     	; 0x3cdc <xQueueReceiveFromISR+0x50>
    3cca:	8f 5f       	subi	r24, 0xFF	; 255
    3ccc:	89 a3       	std	Y+33, r24	; 0x21
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	05 c0       	rjmp	.+10     	; 0x3cdc <xQueueReceiveFromISR+0x50>
    3cd2:	80 e0       	ldi	r24, 0x00	; 0
    3cd4:	03 c0       	rjmp	.+6      	; 0x3cdc <xQueueReceiveFromISR+0x50>
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	01 c0       	rjmp	.+2      	; 0x3cdc <xQueueReceiveFromISR+0x50>
    3cda:	81 e0       	ldi	r24, 0x01	; 1
    3cdc:	df 91       	pop	r29
    3cde:	cf 91       	pop	r28
    3ce0:	1f 91       	pop	r17
    3ce2:	0f 91       	pop	r16
    3ce4:	08 95       	ret

00003ce6 <uxQueueMessagesWaiting>:
    3ce6:	0f b6       	in	r0, 0x3f	; 63
    3ce8:	f8 94       	cli
    3cea:	0f 92       	push	r0
    3cec:	fc 01       	movw	r30, r24
    3cee:	86 8d       	ldd	r24, Z+30	; 0x1e
    3cf0:	0f 90       	pop	r0
    3cf2:	0f be       	out	0x3f, r0	; 63
    3cf4:	08 95       	ret

00003cf6 <uxQueueMessagesWaitingFromISR>:
    3cf6:	fc 01       	movw	r30, r24
    3cf8:	86 8d       	ldd	r24, Z+30	; 0x1e
    3cfa:	08 95       	ret

00003cfc <prvIdleTask>:
    3cfc:	cd e9       	ldi	r28, 0x9D	; 157
    3cfe:	d1 e4       	ldi	r29, 0x41	; 65
    3d00:	88 81       	ld	r24, Y
    3d02:	82 30       	cpi	r24, 0x02	; 2
    3d04:	e8 f3       	brcs	.-6      	; 0x3d00 <prvIdleTask+0x4>
    3d06:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <vPortYield>
    3d0a:	fa cf       	rjmp	.-12     	; 0x3d00 <prvIdleTask+0x4>

00003d0c <prvAddCurrentTaskToDelayedList>:
    3d0c:	cf 92       	push	r12
    3d0e:	df 92       	push	r13
    3d10:	ef 92       	push	r14
    3d12:	ff 92       	push	r15
    3d14:	6b 01       	movw	r12, r22
    3d16:	7c 01       	movw	r14, r24
    3d18:	e0 91 c9 41 	lds	r30, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    3d1c:	f0 91 ca 41 	lds	r31, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    3d20:	62 83       	std	Z+2, r22	; 0x02
    3d22:	73 83       	std	Z+3, r23	; 0x03
    3d24:	84 83       	std	Z+4, r24	; 0x04
    3d26:	95 83       	std	Z+5, r25	; 0x05
    3d28:	80 91 71 41 	lds	r24, 0x4171	; 0x804171 <xTickCount>
    3d2c:	90 91 72 41 	lds	r25, 0x4172	; 0x804172 <xTickCount+0x1>
    3d30:	a0 91 73 41 	lds	r26, 0x4173	; 0x804173 <xTickCount+0x2>
    3d34:	b0 91 74 41 	lds	r27, 0x4174	; 0x804174 <xTickCount+0x3>
    3d38:	c8 16       	cp	r12, r24
    3d3a:	d9 06       	cpc	r13, r25
    3d3c:	ea 06       	cpc	r14, r26
    3d3e:	fb 06       	cpc	r15, r27
    3d40:	68 f4       	brcc	.+26     	; 0x3d5c <prvAddCurrentTaskToDelayedList+0x50>
    3d42:	60 91 c9 41 	lds	r22, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    3d46:	70 91 ca 41 	lds	r23, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    3d4a:	80 91 83 41 	lds	r24, 0x4183	; 0x804183 <pxOverflowDelayedTaskList>
    3d4e:	90 91 84 41 	lds	r25, 0x4184	; 0x804184 <pxOverflowDelayedTaskList+0x1>
    3d52:	6e 5f       	subi	r22, 0xFE	; 254
    3d54:	7f 4f       	sbci	r23, 0xFF	; 255
    3d56:	0e 94 b3 19 	call	0x3366	; 0x3366 <vListInsert>
    3d5a:	21 c0       	rjmp	.+66     	; 0x3d9e <prvAddCurrentTaskToDelayedList+0x92>
    3d5c:	60 91 c9 41 	lds	r22, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    3d60:	70 91 ca 41 	lds	r23, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    3d64:	80 91 85 41 	lds	r24, 0x4185	; 0x804185 <pxDelayedTaskList>
    3d68:	90 91 86 41 	lds	r25, 0x4186	; 0x804186 <pxDelayedTaskList+0x1>
    3d6c:	6e 5f       	subi	r22, 0xFE	; 254
    3d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d70:	0e 94 b3 19 	call	0x3366	; 0x3366 <vListInsert>
    3d74:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    3d78:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    3d7c:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    3d80:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    3d84:	c8 16       	cp	r12, r24
    3d86:	d9 06       	cpc	r13, r25
    3d88:	ea 06       	cpc	r14, r26
    3d8a:	fb 06       	cpc	r15, r27
    3d8c:	40 f4       	brcc	.+16     	; 0x3d9e <prvAddCurrentTaskToDelayedList+0x92>
    3d8e:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    3d92:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    3d96:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    3d9a:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    3d9e:	ff 90       	pop	r15
    3da0:	ef 90       	pop	r14
    3da2:	df 90       	pop	r13
    3da4:	cf 90       	pop	r12
    3da6:	08 95       	ret

00003da8 <xTaskGenericCreate>:
    3da8:	4f 92       	push	r4
    3daa:	5f 92       	push	r5
    3dac:	6f 92       	push	r6
    3dae:	7f 92       	push	r7
    3db0:	8f 92       	push	r8
    3db2:	9f 92       	push	r9
    3db4:	af 92       	push	r10
    3db6:	bf 92       	push	r11
    3db8:	cf 92       	push	r12
    3dba:	df 92       	push	r13
    3dbc:	ef 92       	push	r14
    3dbe:	ff 92       	push	r15
    3dc0:	0f 93       	push	r16
    3dc2:	1f 93       	push	r17
    3dc4:	cf 93       	push	r28
    3dc6:	df 93       	push	r29
    3dc8:	5c 01       	movw	r10, r24
    3dca:	4b 01       	movw	r8, r22
    3dcc:	3a 01       	movw	r6, r20
    3dce:	29 01       	movw	r4, r18
    3dd0:	88 e2       	ldi	r24, 0x28	; 40
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	0e 94 aa 18 	call	0x3154	; 0x3154 <pvPortMalloc>
    3dd8:	ec 01       	movw	r28, r24
    3dda:	89 2b       	or	r24, r25
    3ddc:	09 f4       	brne	.+2      	; 0x3de0 <xTaskGenericCreate+0x38>
    3dde:	d4 c0       	rjmp	.+424    	; 0x3f88 <xTaskGenericCreate+0x1e0>
    3de0:	c1 14       	cp	r12, r1
    3de2:	d1 04       	cpc	r13, r1
    3de4:	09 f0       	breq	.+2      	; 0x3de8 <xTaskGenericCreate+0x40>
    3de6:	cc c0       	rjmp	.+408    	; 0x3f80 <xTaskGenericCreate+0x1d8>
    3de8:	c3 01       	movw	r24, r6
    3dea:	0e 94 aa 18 	call	0x3154	; 0x3154 <pvPortMalloc>
    3dee:	8b 8f       	std	Y+27, r24	; 0x1b
    3df0:	9c 8f       	std	Y+28, r25	; 0x1c
    3df2:	00 97       	sbiw	r24, 0x00	; 0
    3df4:	21 f4       	brne	.+8      	; 0x3dfe <xTaskGenericCreate+0x56>
    3df6:	ce 01       	movw	r24, r28
    3df8:	0e 94 44 19 	call	0x3288	; 0x3288 <vPortFree>
    3dfc:	c5 c0       	rjmp	.+394    	; 0x3f88 <xTaskGenericCreate+0x1e0>
    3dfe:	a3 01       	movw	r20, r6
    3e00:	61 e1       	ldi	r22, 0x11	; 17
    3e02:	70 e0       	ldi	r23, 0x00	; 0
    3e04:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <memset>
    3e08:	93 01       	movw	r18, r6
    3e0a:	21 50       	subi	r18, 0x01	; 1
    3e0c:	31 09       	sbc	r19, r1
    3e0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e12:	3c 01       	movw	r6, r24
    3e14:	62 0e       	add	r6, r18
    3e16:	73 1e       	adc	r7, r19
    3e18:	4a e0       	ldi	r20, 0x0A	; 10
    3e1a:	50 e0       	ldi	r21, 0x00	; 0
    3e1c:	b4 01       	movw	r22, r8
    3e1e:	ce 01       	movw	r24, r28
    3e20:	4d 96       	adiw	r24, 0x1d	; 29
    3e22:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <strncpy>
    3e26:	1e a2       	std	Y+38, r1	; 0x26
    3e28:	10 2f       	mov	r17, r16
    3e2a:	04 30       	cpi	r16, 0x04	; 4
    3e2c:	08 f0       	brcs	.+2      	; 0x3e30 <xTaskGenericCreate+0x88>
    3e2e:	13 e0       	ldi	r17, 0x03	; 3
    3e30:	1a 8f       	std	Y+26, r17	; 0x1a
    3e32:	1f a3       	std	Y+39, r17	; 0x27
    3e34:	6e 01       	movw	r12, r28
    3e36:	22 e0       	ldi	r18, 0x02	; 2
    3e38:	c2 0e       	add	r12, r18
    3e3a:	d1 1c       	adc	r13, r1
    3e3c:	c6 01       	movw	r24, r12
    3e3e:	0e 94 88 19 	call	0x3310	; 0x3310 <vListInitialiseItem>
    3e42:	ce 01       	movw	r24, r28
    3e44:	0e 96       	adiw	r24, 0x0e	; 14
    3e46:	0e 94 88 19 	call	0x3310	; 0x3310 <vListInitialiseItem>
    3e4a:	ca 87       	std	Y+10, r28	; 0x0a
    3e4c:	db 87       	std	Y+11, r29	; 0x0b
    3e4e:	84 e0       	ldi	r24, 0x04	; 4
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	a0 e0       	ldi	r26, 0x00	; 0
    3e54:	b0 e0       	ldi	r27, 0x00	; 0
    3e56:	81 1b       	sub	r24, r17
    3e58:	91 09       	sbc	r25, r1
    3e5a:	a1 09       	sbc	r26, r1
    3e5c:	b1 09       	sbc	r27, r1
    3e5e:	8e 87       	std	Y+14, r24	; 0x0e
    3e60:	9f 87       	std	Y+15, r25	; 0x0f
    3e62:	a8 8b       	std	Y+16, r26	; 0x10
    3e64:	b9 8b       	std	Y+17, r27	; 0x11
    3e66:	ce 8b       	std	Y+22, r28	; 0x16
    3e68:	df 8b       	std	Y+23, r29	; 0x17
    3e6a:	a2 01       	movw	r20, r4
    3e6c:	b5 01       	movw	r22, r10
    3e6e:	c3 01       	movw	r24, r6
    3e70:	0e 94 24 1a 	call	0x3448	; 0x3448 <pxPortInitialiseStack>
    3e74:	88 83       	st	Y, r24
    3e76:	99 83       	std	Y+1, r25	; 0x01
    3e78:	e1 14       	cp	r14, r1
    3e7a:	f1 04       	cpc	r15, r1
    3e7c:	19 f0       	breq	.+6      	; 0x3e84 <xTaskGenericCreate+0xdc>
    3e7e:	f7 01       	movw	r30, r14
    3e80:	c0 83       	st	Z, r28
    3e82:	d1 83       	std	Z+1, r29	; 0x01
    3e84:	0f b6       	in	r0, 0x3f	; 63
    3e86:	f8 94       	cli
    3e88:	0f 92       	push	r0
    3e8a:	80 91 75 41 	lds	r24, 0x4175	; 0x804175 <uxCurrentNumberOfTasks>
    3e8e:	8f 5f       	subi	r24, 0xFF	; 255
    3e90:	80 93 75 41 	sts	0x4175, r24	; 0x804175 <uxCurrentNumberOfTasks>
    3e94:	80 91 c9 41 	lds	r24, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    3e98:	90 91 ca 41 	lds	r25, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    3e9c:	89 2b       	or	r24, r25
    3e9e:	89 f5       	brne	.+98     	; 0x3f02 <xTaskGenericCreate+0x15a>
    3ea0:	c0 93 c9 41 	sts	0x41C9, r28	; 0x8041c9 <pxCurrentTCB>
    3ea4:	d0 93 ca 41 	sts	0x41CA, r29	; 0x8041ca <pxCurrentTCB+0x1>
    3ea8:	80 91 75 41 	lds	r24, 0x4175	; 0x804175 <uxCurrentNumberOfTasks>
    3eac:	81 30       	cpi	r24, 0x01	; 1
    3eae:	c1 f5       	brne	.+112    	; 0x3f20 <xTaskGenericCreate+0x178>
    3eb0:	8d e9       	ldi	r24, 0x9D	; 157
    3eb2:	91 e4       	ldi	r25, 0x41	; 65
    3eb4:	0e 94 77 19 	call	0x32ee	; 0x32ee <vListInitialise>
    3eb8:	88 ea       	ldi	r24, 0xA8	; 168
    3eba:	91 e4       	ldi	r25, 0x41	; 65
    3ebc:	0e 94 77 19 	call	0x32ee	; 0x32ee <vListInitialise>
    3ec0:	83 eb       	ldi	r24, 0xB3	; 179
    3ec2:	91 e4       	ldi	r25, 0x41	; 65
    3ec4:	0e 94 77 19 	call	0x32ee	; 0x32ee <vListInitialise>
    3ec8:	8e eb       	ldi	r24, 0xBE	; 190
    3eca:	91 e4       	ldi	r25, 0x41	; 65
    3ecc:	0e 94 77 19 	call	0x32ee	; 0x32ee <vListInitialise>
    3ed0:	82 e9       	ldi	r24, 0x92	; 146
    3ed2:	91 e4       	ldi	r25, 0x41	; 65
    3ed4:	0e 94 77 19 	call	0x32ee	; 0x32ee <vListInitialise>
    3ed8:	87 e8       	ldi	r24, 0x87	; 135
    3eda:	91 e4       	ldi	r25, 0x41	; 65
    3edc:	0e 94 77 19 	call	0x32ee	; 0x32ee <vListInitialise>
    3ee0:	88 e7       	ldi	r24, 0x78	; 120
    3ee2:	91 e4       	ldi	r25, 0x41	; 65
    3ee4:	0e 94 77 19 	call	0x32ee	; 0x32ee <vListInitialise>
    3ee8:	82 e9       	ldi	r24, 0x92	; 146
    3eea:	91 e4       	ldi	r25, 0x41	; 65
    3eec:	80 93 85 41 	sts	0x4185, r24	; 0x804185 <pxDelayedTaskList>
    3ef0:	90 93 86 41 	sts	0x4186, r25	; 0x804186 <pxDelayedTaskList+0x1>
    3ef4:	87 e8       	ldi	r24, 0x87	; 135
    3ef6:	91 e4       	ldi	r25, 0x41	; 65
    3ef8:	80 93 83 41 	sts	0x4183, r24	; 0x804183 <pxOverflowDelayedTaskList>
    3efc:	90 93 84 41 	sts	0x4184, r25	; 0x804184 <pxOverflowDelayedTaskList+0x1>
    3f00:	0f c0       	rjmp	.+30     	; 0x3f20 <xTaskGenericCreate+0x178>
    3f02:	80 91 6e 41 	lds	r24, 0x416E	; 0x80416e <xSchedulerRunning>
    3f06:	81 11       	cpse	r24, r1
    3f08:	0b c0       	rjmp	.+22     	; 0x3f20 <xTaskGenericCreate+0x178>
    3f0a:	e0 91 c9 41 	lds	r30, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    3f0e:	f0 91 ca 41 	lds	r31, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    3f12:	82 8d       	ldd	r24, Z+26	; 0x1a
    3f14:	08 17       	cp	r16, r24
    3f16:	20 f0       	brcs	.+8      	; 0x3f20 <xTaskGenericCreate+0x178>
    3f18:	c0 93 c9 41 	sts	0x41C9, r28	; 0x8041c9 <pxCurrentTCB>
    3f1c:	d0 93 ca 41 	sts	0x41CA, r29	; 0x8041ca <pxCurrentTCB+0x1>
    3f20:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3f22:	90 91 70 41 	lds	r25, 0x4170	; 0x804170 <uxTopUsedPriority>
    3f26:	98 17       	cp	r25, r24
    3f28:	10 f4       	brcc	.+4      	; 0x3f2e <xTaskGenericCreate+0x186>
    3f2a:	80 93 70 41 	sts	0x4170, r24	; 0x804170 <uxTopUsedPriority>
    3f2e:	90 91 69 41 	lds	r25, 0x4169	; 0x804169 <uxTaskNumber>
    3f32:	9f 5f       	subi	r25, 0xFF	; 255
    3f34:	90 93 69 41 	sts	0x4169, r25	; 0x804169 <uxTaskNumber>
    3f38:	90 91 6f 41 	lds	r25, 0x416F	; 0x80416f <uxTopReadyPriority>
    3f3c:	98 17       	cp	r25, r24
    3f3e:	10 f4       	brcc	.+4      	; 0x3f44 <xTaskGenericCreate+0x19c>
    3f40:	80 93 6f 41 	sts	0x416F, r24	; 0x80416f <uxTopReadyPriority>
    3f44:	fb e0       	ldi	r31, 0x0B	; 11
    3f46:	8f 9f       	mul	r24, r31
    3f48:	c0 01       	movw	r24, r0
    3f4a:	11 24       	eor	r1, r1
    3f4c:	b6 01       	movw	r22, r12
    3f4e:	83 56       	subi	r24, 0x63	; 99
    3f50:	9e 4b       	sbci	r25, 0xBE	; 190
    3f52:	0e 94 8c 19 	call	0x3318	; 0x3318 <vListInsertEnd>
    3f56:	0f 90       	pop	r0
    3f58:	0f be       	out	0x3f, r0	; 63
    3f5a:	80 91 6e 41 	lds	r24, 0x416E	; 0x80416e <xSchedulerRunning>
    3f5e:	88 23       	and	r24, r24
    3f60:	59 f0       	breq	.+22     	; 0x3f78 <xTaskGenericCreate+0x1d0>
    3f62:	e0 91 c9 41 	lds	r30, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    3f66:	f0 91 ca 41 	lds	r31, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    3f6a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3f6c:	80 17       	cp	r24, r16
    3f6e:	30 f4       	brcc	.+12     	; 0x3f7c <xTaskGenericCreate+0x1d4>
    3f70:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <vPortYield>
    3f74:	81 e0       	ldi	r24, 0x01	; 1
    3f76:	09 c0       	rjmp	.+18     	; 0x3f8a <xTaskGenericCreate+0x1e2>
    3f78:	81 e0       	ldi	r24, 0x01	; 1
    3f7a:	07 c0       	rjmp	.+14     	; 0x3f8a <xTaskGenericCreate+0x1e2>
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	05 c0       	rjmp	.+10     	; 0x3f8a <xTaskGenericCreate+0x1e2>
    3f80:	cb 8e       	std	Y+27, r12	; 0x1b
    3f82:	dc 8e       	std	Y+28, r13	; 0x1c
    3f84:	c6 01       	movw	r24, r12
    3f86:	3b cf       	rjmp	.-394    	; 0x3dfe <xTaskGenericCreate+0x56>
    3f88:	8f ef       	ldi	r24, 0xFF	; 255
    3f8a:	df 91       	pop	r29
    3f8c:	cf 91       	pop	r28
    3f8e:	1f 91       	pop	r17
    3f90:	0f 91       	pop	r16
    3f92:	ff 90       	pop	r15
    3f94:	ef 90       	pop	r14
    3f96:	df 90       	pop	r13
    3f98:	cf 90       	pop	r12
    3f9a:	bf 90       	pop	r11
    3f9c:	af 90       	pop	r10
    3f9e:	9f 90       	pop	r9
    3fa0:	8f 90       	pop	r8
    3fa2:	7f 90       	pop	r7
    3fa4:	6f 90       	pop	r6
    3fa6:	5f 90       	pop	r5
    3fa8:	4f 90       	pop	r4
    3faa:	08 95       	ret

00003fac <uxTaskPriorityGet>:
    3fac:	0f b6       	in	r0, 0x3f	; 63
    3fae:	f8 94       	cli
    3fb0:	0f 92       	push	r0
    3fb2:	00 97       	sbiw	r24, 0x00	; 0
    3fb4:	21 f4       	brne	.+8      	; 0x3fbe <uxTaskPriorityGet+0x12>
    3fb6:	80 91 c9 41 	lds	r24, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    3fba:	90 91 ca 41 	lds	r25, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    3fbe:	0f 90       	pop	r0
    3fc0:	0f be       	out	0x3f, r0	; 63
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	82 8d       	ldd	r24, Z+26	; 0x1a
    3fc6:	08 95       	ret

00003fc8 <vTaskStartScheduler>:
    3fc8:	af 92       	push	r10
    3fca:	bf 92       	push	r11
    3fcc:	cf 92       	push	r12
    3fce:	df 92       	push	r13
    3fd0:	ef 92       	push	r14
    3fd2:	ff 92       	push	r15
    3fd4:	0f 93       	push	r16
    3fd6:	a1 2c       	mov	r10, r1
    3fd8:	b1 2c       	mov	r11, r1
    3fda:	c1 2c       	mov	r12, r1
    3fdc:	d1 2c       	mov	r13, r1
    3fde:	0f 2e       	mov	r0, r31
    3fe0:	f6 e7       	ldi	r31, 0x76	; 118
    3fe2:	ef 2e       	mov	r14, r31
    3fe4:	f1 e4       	ldi	r31, 0x41	; 65
    3fe6:	ff 2e       	mov	r15, r31
    3fe8:	f0 2d       	mov	r31, r0
    3fea:	00 e0       	ldi	r16, 0x00	; 0
    3fec:	20 e0       	ldi	r18, 0x00	; 0
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	44 e6       	ldi	r20, 0x64	; 100
    3ff2:	50 e0       	ldi	r21, 0x00	; 0
    3ff4:	63 e9       	ldi	r22, 0x93	; 147
    3ff6:	70 e2       	ldi	r23, 0x20	; 32
    3ff8:	8e e7       	ldi	r24, 0x7E	; 126
    3ffa:	9e e1       	ldi	r25, 0x1E	; 30
    3ffc:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <xTaskGenericCreate>
    4000:	81 30       	cpi	r24, 0x01	; 1
    4002:	69 f4       	brne	.+26     	; 0x401e <vTaskStartScheduler+0x56>
    4004:	f8 94       	cli
    4006:	80 93 6e 41 	sts	0x416E, r24	; 0x80416e <xSchedulerRunning>
    400a:	10 92 71 41 	sts	0x4171, r1	; 0x804171 <xTickCount>
    400e:	10 92 72 41 	sts	0x4172, r1	; 0x804172 <xTickCount+0x1>
    4012:	10 92 73 41 	sts	0x4173, r1	; 0x804173 <xTickCount+0x2>
    4016:	10 92 74 41 	sts	0x4174, r1	; 0x804174 <xTickCount+0x3>
    401a:	0e 94 9a 1a 	call	0x3534	; 0x3534 <xPortStartScheduler>
    401e:	0f 91       	pop	r16
    4020:	ff 90       	pop	r15
    4022:	ef 90       	pop	r14
    4024:	df 90       	pop	r13
    4026:	cf 90       	pop	r12
    4028:	bf 90       	pop	r11
    402a:	af 90       	pop	r10
    402c:	08 95       	ret

0000402e <vTaskSuspendAll>:
    402e:	80 91 6d 41 	lds	r24, 0x416D	; 0x80416d <uxSchedulerSuspended>
    4032:	8f 5f       	subi	r24, 0xFF	; 255
    4034:	80 93 6d 41 	sts	0x416D, r24	; 0x80416d <uxSchedulerSuspended>
    4038:	08 95       	ret

0000403a <xTaskGetTickCount>:
    403a:	0f b6       	in	r0, 0x3f	; 63
    403c:	f8 94       	cli
    403e:	0f 92       	push	r0
    4040:	60 91 71 41 	lds	r22, 0x4171	; 0x804171 <xTickCount>
    4044:	70 91 72 41 	lds	r23, 0x4172	; 0x804172 <xTickCount+0x1>
    4048:	80 91 73 41 	lds	r24, 0x4173	; 0x804173 <xTickCount+0x2>
    404c:	90 91 74 41 	lds	r25, 0x4174	; 0x804174 <xTickCount+0x3>
    4050:	0f 90       	pop	r0
    4052:	0f be       	out	0x3f, r0	; 63
    4054:	08 95       	ret

00004056 <pcTaskGetTaskName>:
    4056:	00 97       	sbiw	r24, 0x00	; 0
    4058:	21 f4       	brne	.+8      	; 0x4062 <pcTaskGetTaskName+0xc>
    405a:	80 91 c9 41 	lds	r24, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    405e:	90 91 ca 41 	lds	r25, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    4062:	4d 96       	adiw	r24, 0x1d	; 29
    4064:	08 95       	ret

00004066 <vTaskIncrementTick>:
    4066:	ff 92       	push	r15
    4068:	0f 93       	push	r16
    406a:	1f 93       	push	r17
    406c:	cf 93       	push	r28
    406e:	df 93       	push	r29
    4070:	80 91 6d 41 	lds	r24, 0x416D	; 0x80416d <uxSchedulerSuspended>
    4074:	81 11       	cpse	r24, r1
    4076:	ed c0       	rjmp	.+474    	; 0x4252 <vTaskIncrementTick+0x1ec>
    4078:	80 91 71 41 	lds	r24, 0x4171	; 0x804171 <xTickCount>
    407c:	90 91 72 41 	lds	r25, 0x4172	; 0x804172 <xTickCount+0x1>
    4080:	a0 91 73 41 	lds	r26, 0x4173	; 0x804173 <xTickCount+0x2>
    4084:	b0 91 74 41 	lds	r27, 0x4174	; 0x804174 <xTickCount+0x3>
    4088:	01 96       	adiw	r24, 0x01	; 1
    408a:	a1 1d       	adc	r26, r1
    408c:	b1 1d       	adc	r27, r1
    408e:	80 93 71 41 	sts	0x4171, r24	; 0x804171 <xTickCount>
    4092:	90 93 72 41 	sts	0x4172, r25	; 0x804172 <xTickCount+0x1>
    4096:	a0 93 73 41 	sts	0x4173, r26	; 0x804173 <xTickCount+0x2>
    409a:	b0 93 74 41 	sts	0x4174, r27	; 0x804174 <xTickCount+0x3>
    409e:	80 91 71 41 	lds	r24, 0x4171	; 0x804171 <xTickCount>
    40a2:	90 91 72 41 	lds	r25, 0x4172	; 0x804172 <xTickCount+0x1>
    40a6:	a0 91 73 41 	lds	r26, 0x4173	; 0x804173 <xTickCount+0x2>
    40aa:	b0 91 74 41 	lds	r27, 0x4174	; 0x804174 <xTickCount+0x3>
    40ae:	89 2b       	or	r24, r25
    40b0:	8a 2b       	or	r24, r26
    40b2:	8b 2b       	or	r24, r27
    40b4:	f1 f5       	brne	.+124    	; 0x4132 <vTaskIncrementTick+0xcc>
    40b6:	80 91 85 41 	lds	r24, 0x4185	; 0x804185 <pxDelayedTaskList>
    40ba:	90 91 86 41 	lds	r25, 0x4186	; 0x804186 <pxDelayedTaskList+0x1>
    40be:	20 91 83 41 	lds	r18, 0x4183	; 0x804183 <pxOverflowDelayedTaskList>
    40c2:	30 91 84 41 	lds	r19, 0x4184	; 0x804184 <pxOverflowDelayedTaskList+0x1>
    40c6:	20 93 85 41 	sts	0x4185, r18	; 0x804185 <pxDelayedTaskList>
    40ca:	30 93 86 41 	sts	0x4186, r19	; 0x804186 <pxDelayedTaskList+0x1>
    40ce:	80 93 83 41 	sts	0x4183, r24	; 0x804183 <pxOverflowDelayedTaskList>
    40d2:	90 93 84 41 	sts	0x4184, r25	; 0x804184 <pxOverflowDelayedTaskList+0x1>
    40d6:	80 91 6a 41 	lds	r24, 0x416A	; 0x80416a <xNumOfOverflows>
    40da:	8f 5f       	subi	r24, 0xFF	; 255
    40dc:	80 93 6a 41 	sts	0x416A, r24	; 0x80416a <xNumOfOverflows>
    40e0:	e0 91 85 41 	lds	r30, 0x4185	; 0x804185 <pxDelayedTaskList>
    40e4:	f0 91 86 41 	lds	r31, 0x4186	; 0x804186 <pxDelayedTaskList+0x1>
    40e8:	80 81       	ld	r24, Z
    40ea:	81 11       	cpse	r24, r1
    40ec:	0c c0       	rjmp	.+24     	; 0x4106 <vTaskIncrementTick+0xa0>
    40ee:	8f ef       	ldi	r24, 0xFF	; 255
    40f0:	9f ef       	ldi	r25, 0xFF	; 255
    40f2:	dc 01       	movw	r26, r24
    40f4:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    40f8:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    40fc:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    4100:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    4104:	16 c0       	rjmp	.+44     	; 0x4132 <vTaskIncrementTick+0xcc>
    4106:	e0 91 85 41 	lds	r30, 0x4185	; 0x804185 <pxDelayedTaskList>
    410a:	f0 91 86 41 	lds	r31, 0x4186	; 0x804186 <pxDelayedTaskList+0x1>
    410e:	07 80       	ldd	r0, Z+7	; 0x07
    4110:	f0 85       	ldd	r31, Z+8	; 0x08
    4112:	e0 2d       	mov	r30, r0
    4114:	00 84       	ldd	r0, Z+8	; 0x08
    4116:	f1 85       	ldd	r31, Z+9	; 0x09
    4118:	e0 2d       	mov	r30, r0
    411a:	82 81       	ldd	r24, Z+2	; 0x02
    411c:	93 81       	ldd	r25, Z+3	; 0x03
    411e:	a4 81       	ldd	r26, Z+4	; 0x04
    4120:	b5 81       	ldd	r27, Z+5	; 0x05
    4122:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    4126:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    412a:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    412e:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    4132:	40 91 71 41 	lds	r20, 0x4171	; 0x804171 <xTickCount>
    4136:	50 91 72 41 	lds	r21, 0x4172	; 0x804172 <xTickCount+0x1>
    413a:	60 91 73 41 	lds	r22, 0x4173	; 0x804173 <xTickCount+0x2>
    413e:	70 91 74 41 	lds	r23, 0x4174	; 0x804174 <xTickCount+0x3>
    4142:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    4146:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    414a:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    414e:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    4152:	48 17       	cp	r20, r24
    4154:	59 07       	cpc	r21, r25
    4156:	6a 07       	cpc	r22, r26
    4158:	7b 07       	cpc	r23, r27
    415a:	08 f4       	brcc	.+2      	; 0x415e <vTaskIncrementTick+0xf8>
    415c:	7f c0       	rjmp	.+254    	; 0x425c <vTaskIncrementTick+0x1f6>
    415e:	e0 91 85 41 	lds	r30, 0x4185	; 0x804185 <pxDelayedTaskList>
    4162:	f0 91 86 41 	lds	r31, 0x4186	; 0x804186 <pxDelayedTaskList+0x1>
    4166:	80 81       	ld	r24, Z
    4168:	88 23       	and	r24, r24
    416a:	f9 f0       	breq	.+62     	; 0x41aa <vTaskIncrementTick+0x144>
    416c:	e0 91 85 41 	lds	r30, 0x4185	; 0x804185 <pxDelayedTaskList>
    4170:	f0 91 86 41 	lds	r31, 0x4186	; 0x804186 <pxDelayedTaskList+0x1>
    4174:	07 80       	ldd	r0, Z+7	; 0x07
    4176:	f0 85       	ldd	r31, Z+8	; 0x08
    4178:	e0 2d       	mov	r30, r0
    417a:	c0 85       	ldd	r28, Z+8	; 0x08
    417c:	d1 85       	ldd	r29, Z+9	; 0x09
    417e:	8a 81       	ldd	r24, Y+2	; 0x02
    4180:	9b 81       	ldd	r25, Y+3	; 0x03
    4182:	ac 81       	ldd	r26, Y+4	; 0x04
    4184:	bd 81       	ldd	r27, Y+5	; 0x05
    4186:	40 91 71 41 	lds	r20, 0x4171	; 0x804171 <xTickCount>
    418a:	50 91 72 41 	lds	r21, 0x4172	; 0x804172 <xTickCount+0x1>
    418e:	60 91 73 41 	lds	r22, 0x4173	; 0x804173 <xTickCount+0x2>
    4192:	70 91 74 41 	lds	r23, 0x4174	; 0x804174 <xTickCount+0x3>
    4196:	48 17       	cp	r20, r24
    4198:	59 07       	cpc	r21, r25
    419a:	6a 07       	cpc	r22, r26
    419c:	7b 07       	cpc	r23, r27
    419e:	58 f1       	brcs	.+86     	; 0x41f6 <vTaskIncrementTick+0x190>
    41a0:	0f 2e       	mov	r0, r31
    41a2:	fb e0       	ldi	r31, 0x0B	; 11
    41a4:	ff 2e       	mov	r15, r31
    41a6:	f0 2d       	mov	r31, r0
    41a8:	2f c0       	rjmp	.+94     	; 0x4208 <vTaskIncrementTick+0x1a2>
    41aa:	8f ef       	ldi	r24, 0xFF	; 255
    41ac:	9f ef       	ldi	r25, 0xFF	; 255
    41ae:	dc 01       	movw	r26, r24
    41b0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    41b4:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    41b8:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    41bc:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    41c0:	4d c0       	rjmp	.+154    	; 0x425c <vTaskIncrementTick+0x1f6>
    41c2:	e0 91 85 41 	lds	r30, 0x4185	; 0x804185 <pxDelayedTaskList>
    41c6:	f0 91 86 41 	lds	r31, 0x4186	; 0x804186 <pxDelayedTaskList+0x1>
    41ca:	07 80       	ldd	r0, Z+7	; 0x07
    41cc:	f0 85       	ldd	r31, Z+8	; 0x08
    41ce:	e0 2d       	mov	r30, r0
    41d0:	c0 85       	ldd	r28, Z+8	; 0x08
    41d2:	d1 85       	ldd	r29, Z+9	; 0x09
    41d4:	8a 81       	ldd	r24, Y+2	; 0x02
    41d6:	9b 81       	ldd	r25, Y+3	; 0x03
    41d8:	ac 81       	ldd	r26, Y+4	; 0x04
    41da:	bd 81       	ldd	r27, Y+5	; 0x05
    41dc:	40 91 71 41 	lds	r20, 0x4171	; 0x804171 <xTickCount>
    41e0:	50 91 72 41 	lds	r21, 0x4172	; 0x804172 <xTickCount+0x1>
    41e4:	60 91 73 41 	lds	r22, 0x4173	; 0x804173 <xTickCount+0x2>
    41e8:	70 91 74 41 	lds	r23, 0x4174	; 0x804174 <xTickCount+0x3>
    41ec:	48 17       	cp	r20, r24
    41ee:	59 07       	cpc	r21, r25
    41f0:	6a 07       	cpc	r22, r26
    41f2:	7b 07       	cpc	r23, r27
    41f4:	48 f4       	brcc	.+18     	; 0x4208 <vTaskIncrementTick+0x1a2>
    41f6:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    41fa:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    41fe:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    4202:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    4206:	2a c0       	rjmp	.+84     	; 0x425c <vTaskIncrementTick+0x1f6>
    4208:	8e 01       	movw	r16, r28
    420a:	0e 5f       	subi	r16, 0xFE	; 254
    420c:	1f 4f       	sbci	r17, 0xFF	; 255
    420e:	c8 01       	movw	r24, r16
    4210:	0e 94 fe 19 	call	0x33fc	; 0x33fc <vListRemove>
    4214:	88 8d       	ldd	r24, Y+24	; 0x18
    4216:	99 8d       	ldd	r25, Y+25	; 0x19
    4218:	89 2b       	or	r24, r25
    421a:	21 f0       	breq	.+8      	; 0x4224 <vTaskIncrementTick+0x1be>
    421c:	ce 01       	movw	r24, r28
    421e:	0e 96       	adiw	r24, 0x0e	; 14
    4220:	0e 94 fe 19 	call	0x33fc	; 0x33fc <vListRemove>
    4224:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4226:	90 91 6f 41 	lds	r25, 0x416F	; 0x80416f <uxTopReadyPriority>
    422a:	98 17       	cp	r25, r24
    422c:	10 f4       	brcc	.+4      	; 0x4232 <vTaskIncrementTick+0x1cc>
    422e:	80 93 6f 41 	sts	0x416F, r24	; 0x80416f <uxTopReadyPriority>
    4232:	f8 9e       	mul	r15, r24
    4234:	c0 01       	movw	r24, r0
    4236:	11 24       	eor	r1, r1
    4238:	b8 01       	movw	r22, r16
    423a:	83 56       	subi	r24, 0x63	; 99
    423c:	9e 4b       	sbci	r25, 0xBE	; 190
    423e:	0e 94 8c 19 	call	0x3318	; 0x3318 <vListInsertEnd>
    4242:	e0 91 85 41 	lds	r30, 0x4185	; 0x804185 <pxDelayedTaskList>
    4246:	f0 91 86 41 	lds	r31, 0x4186	; 0x804186 <pxDelayedTaskList+0x1>
    424a:	80 81       	ld	r24, Z
    424c:	81 11       	cpse	r24, r1
    424e:	b9 cf       	rjmp	.-142    	; 0x41c2 <vTaskIncrementTick+0x15c>
    4250:	ac cf       	rjmp	.-168    	; 0x41aa <vTaskIncrementTick+0x144>
    4252:	80 91 6c 41 	lds	r24, 0x416C	; 0x80416c <uxMissedTicks>
    4256:	8f 5f       	subi	r24, 0xFF	; 255
    4258:	80 93 6c 41 	sts	0x416C, r24	; 0x80416c <uxMissedTicks>
    425c:	df 91       	pop	r29
    425e:	cf 91       	pop	r28
    4260:	1f 91       	pop	r17
    4262:	0f 91       	pop	r16
    4264:	ff 90       	pop	r15
    4266:	08 95       	ret

00004268 <xTaskResumeAll>:
    4268:	cf 92       	push	r12
    426a:	df 92       	push	r13
    426c:	ef 92       	push	r14
    426e:	ff 92       	push	r15
    4270:	0f 93       	push	r16
    4272:	1f 93       	push	r17
    4274:	cf 93       	push	r28
    4276:	df 93       	push	r29
    4278:	0f b6       	in	r0, 0x3f	; 63
    427a:	f8 94       	cli
    427c:	0f 92       	push	r0
    427e:	80 91 6d 41 	lds	r24, 0x416D	; 0x80416d <uxSchedulerSuspended>
    4282:	81 50       	subi	r24, 0x01	; 1
    4284:	80 93 6d 41 	sts	0x416D, r24	; 0x80416d <uxSchedulerSuspended>
    4288:	80 91 6d 41 	lds	r24, 0x416D	; 0x80416d <uxSchedulerSuspended>
    428c:	81 11       	cpse	r24, r1
    428e:	60 c0       	rjmp	.+192    	; 0x4350 <xTaskResumeAll+0xe8>
    4290:	80 91 75 41 	lds	r24, 0x4175	; 0x804175 <uxCurrentNumberOfTasks>
    4294:	81 11       	cpse	r24, r1
    4296:	2c c0       	rjmp	.+88     	; 0x42f0 <xTaskResumeAll+0x88>
    4298:	5e c0       	rjmp	.+188    	; 0x4356 <xTaskResumeAll+0xee>
    429a:	d7 01       	movw	r26, r14
    429c:	17 96       	adiw	r26, 0x07	; 7
    429e:	ed 91       	ld	r30, X+
    42a0:	fc 91       	ld	r31, X
    42a2:	18 97       	sbiw	r26, 0x08	; 8
    42a4:	c0 85       	ldd	r28, Z+8	; 0x08
    42a6:	d1 85       	ldd	r29, Z+9	; 0x09
    42a8:	ce 01       	movw	r24, r28
    42aa:	0e 96       	adiw	r24, 0x0e	; 14
    42ac:	0e 94 fe 19 	call	0x33fc	; 0x33fc <vListRemove>
    42b0:	8e 01       	movw	r16, r28
    42b2:	0e 5f       	subi	r16, 0xFE	; 254
    42b4:	1f 4f       	sbci	r17, 0xFF	; 255
    42b6:	c8 01       	movw	r24, r16
    42b8:	0e 94 fe 19 	call	0x33fc	; 0x33fc <vListRemove>
    42bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    42be:	90 91 6f 41 	lds	r25, 0x416F	; 0x80416f <uxTopReadyPriority>
    42c2:	98 17       	cp	r25, r24
    42c4:	10 f4       	brcc	.+4      	; 0x42ca <xTaskResumeAll+0x62>
    42c6:	80 93 6f 41 	sts	0x416F, r24	; 0x80416f <uxTopReadyPriority>
    42ca:	d8 9e       	mul	r13, r24
    42cc:	c0 01       	movw	r24, r0
    42ce:	11 24       	eor	r1, r1
    42d0:	b8 01       	movw	r22, r16
    42d2:	83 56       	subi	r24, 0x63	; 99
    42d4:	9e 4b       	sbci	r25, 0xBE	; 190
    42d6:	0e 94 8c 19 	call	0x3318	; 0x3318 <vListInsertEnd>
    42da:	e0 91 c9 41 	lds	r30, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    42de:	f0 91 ca 41 	lds	r31, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    42e2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    42e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    42e6:	98 17       	cp	r25, r24
    42e8:	70 f0       	brcs	.+28     	; 0x4306 <xTaskResumeAll+0x9e>
    42ea:	cc 24       	eor	r12, r12
    42ec:	c3 94       	inc	r12
    42ee:	0b c0       	rjmp	.+22     	; 0x4306 <xTaskResumeAll+0x9e>
    42f0:	c1 2c       	mov	r12, r1
    42f2:	0f 2e       	mov	r0, r31
    42f4:	f8 e7       	ldi	r31, 0x78	; 120
    42f6:	ef 2e       	mov	r14, r31
    42f8:	f1 e4       	ldi	r31, 0x41	; 65
    42fa:	ff 2e       	mov	r15, r31
    42fc:	f0 2d       	mov	r31, r0
    42fe:	0f 2e       	mov	r0, r31
    4300:	fb e0       	ldi	r31, 0x0B	; 11
    4302:	df 2e       	mov	r13, r31
    4304:	f0 2d       	mov	r31, r0
    4306:	f7 01       	movw	r30, r14
    4308:	80 81       	ld	r24, Z
    430a:	81 11       	cpse	r24, r1
    430c:	c6 cf       	rjmp	.-116    	; 0x429a <xTaskResumeAll+0x32>
    430e:	80 91 6c 41 	lds	r24, 0x416C	; 0x80416c <uxMissedTicks>
    4312:	88 23       	and	r24, r24
    4314:	81 f0       	breq	.+32     	; 0x4336 <xTaskResumeAll+0xce>
    4316:	80 91 6c 41 	lds	r24, 0x416C	; 0x80416c <uxMissedTicks>
    431a:	88 23       	and	r24, r24
    431c:	99 f0       	breq	.+38     	; 0x4344 <xTaskResumeAll+0xdc>
    431e:	0e 94 33 20 	call	0x4066	; 0x4066 <vTaskIncrementTick>
    4322:	80 91 6c 41 	lds	r24, 0x416C	; 0x80416c <uxMissedTicks>
    4326:	81 50       	subi	r24, 0x01	; 1
    4328:	80 93 6c 41 	sts	0x416C, r24	; 0x80416c <uxMissedTicks>
    432c:	80 91 6c 41 	lds	r24, 0x416C	; 0x80416c <uxMissedTicks>
    4330:	81 11       	cpse	r24, r1
    4332:	f5 cf       	rjmp	.-22     	; 0x431e <xTaskResumeAll+0xb6>
    4334:	07 c0       	rjmp	.+14     	; 0x4344 <xTaskResumeAll+0xdc>
    4336:	f1 e0       	ldi	r31, 0x01	; 1
    4338:	cf 16       	cp	r12, r31
    433a:	21 f0       	breq	.+8      	; 0x4344 <xTaskResumeAll+0xdc>
    433c:	80 91 6b 41 	lds	r24, 0x416B	; 0x80416b <xMissedYield>
    4340:	81 30       	cpi	r24, 0x01	; 1
    4342:	41 f4       	brne	.+16     	; 0x4354 <xTaskResumeAll+0xec>
    4344:	10 92 6b 41 	sts	0x416B, r1	; 0x80416b <xMissedYield>
    4348:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <vPortYield>
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	03 c0       	rjmp	.+6      	; 0x4356 <xTaskResumeAll+0xee>
    4350:	80 e0       	ldi	r24, 0x00	; 0
    4352:	01 c0       	rjmp	.+2      	; 0x4356 <xTaskResumeAll+0xee>
    4354:	80 e0       	ldi	r24, 0x00	; 0
    4356:	0f 90       	pop	r0
    4358:	0f be       	out	0x3f, r0	; 63
    435a:	df 91       	pop	r29
    435c:	cf 91       	pop	r28
    435e:	1f 91       	pop	r17
    4360:	0f 91       	pop	r16
    4362:	ff 90       	pop	r15
    4364:	ef 90       	pop	r14
    4366:	df 90       	pop	r13
    4368:	cf 90       	pop	r12
    436a:	08 95       	ret

0000436c <vTaskDelayUntil>:
    436c:	cf 92       	push	r12
    436e:	df 92       	push	r13
    4370:	ef 92       	push	r14
    4372:	ff 92       	push	r15
    4374:	cf 93       	push	r28
    4376:	df 93       	push	r29
    4378:	ec 01       	movw	r28, r24
    437a:	6a 01       	movw	r12, r20
    437c:	7b 01       	movw	r14, r22
    437e:	0e 94 17 20 	call	0x402e	; 0x402e <vTaskSuspendAll>
    4382:	88 81       	ld	r24, Y
    4384:	99 81       	ldd	r25, Y+1	; 0x01
    4386:	aa 81       	ldd	r26, Y+2	; 0x02
    4388:	bb 81       	ldd	r27, Y+3	; 0x03
    438a:	c8 0e       	add	r12, r24
    438c:	d9 1e       	adc	r13, r25
    438e:	ea 1e       	adc	r14, r26
    4390:	fb 1e       	adc	r15, r27
    4392:	40 91 71 41 	lds	r20, 0x4171	; 0x804171 <xTickCount>
    4396:	50 91 72 41 	lds	r21, 0x4172	; 0x804172 <xTickCount+0x1>
    439a:	60 91 73 41 	lds	r22, 0x4173	; 0x804173 <xTickCount+0x2>
    439e:	70 91 74 41 	lds	r23, 0x4174	; 0x804174 <xTickCount+0x3>
    43a2:	48 17       	cp	r20, r24
    43a4:	59 07       	cpc	r21, r25
    43a6:	6a 07       	cpc	r22, r26
    43a8:	7b 07       	cpc	r23, r27
    43aa:	b8 f4       	brcc	.+46     	; 0x43da <vTaskDelayUntil+0x6e>
    43ac:	c8 16       	cp	r12, r24
    43ae:	d9 06       	cpc	r13, r25
    43b0:	ea 06       	cpc	r14, r26
    43b2:	fb 06       	cpc	r15, r27
    43b4:	e0 f5       	brcc	.+120    	; 0x442e <vTaskDelayUntil+0xc2>
    43b6:	80 91 71 41 	lds	r24, 0x4171	; 0x804171 <xTickCount>
    43ba:	90 91 72 41 	lds	r25, 0x4172	; 0x804172 <xTickCount+0x1>
    43be:	a0 91 73 41 	lds	r26, 0x4173	; 0x804173 <xTickCount+0x2>
    43c2:	b0 91 74 41 	lds	r27, 0x4174	; 0x804174 <xTickCount+0x3>
    43c6:	c8 82       	st	Y, r12
    43c8:	d9 82       	std	Y+1, r13	; 0x01
    43ca:	ea 82       	std	Y+2, r14	; 0x02
    43cc:	fb 82       	std	Y+3, r15	; 0x03
    43ce:	8c 15       	cp	r24, r12
    43d0:	9d 05       	cpc	r25, r13
    43d2:	ae 05       	cpc	r26, r14
    43d4:	bf 05       	cpc	r27, r15
    43d6:	f8 f4       	brcc	.+62     	; 0x4416 <vTaskDelayUntil+0xaa>
    43d8:	13 c0       	rjmp	.+38     	; 0x4400 <vTaskDelayUntil+0x94>
    43da:	c8 16       	cp	r12, r24
    43dc:	d9 06       	cpc	r13, r25
    43de:	ea 06       	cpc	r14, r26
    43e0:	fb 06       	cpc	r15, r27
    43e2:	00 f1       	brcs	.+64     	; 0x4424 <vTaskDelayUntil+0xb8>
    43e4:	80 91 71 41 	lds	r24, 0x4171	; 0x804171 <xTickCount>
    43e8:	90 91 72 41 	lds	r25, 0x4172	; 0x804172 <xTickCount+0x1>
    43ec:	a0 91 73 41 	lds	r26, 0x4173	; 0x804173 <xTickCount+0x2>
    43f0:	b0 91 74 41 	lds	r27, 0x4174	; 0x804174 <xTickCount+0x3>
    43f4:	8c 15       	cp	r24, r12
    43f6:	9d 05       	cpc	r25, r13
    43f8:	ae 05       	cpc	r26, r14
    43fa:	bf 05       	cpc	r27, r15
    43fc:	98 f0       	brcs	.+38     	; 0x4424 <vTaskDelayUntil+0xb8>
    43fe:	17 c0       	rjmp	.+46     	; 0x442e <vTaskDelayUntil+0xc2>
    4400:	80 91 c9 41 	lds	r24, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    4404:	90 91 ca 41 	lds	r25, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    4408:	02 96       	adiw	r24, 0x02	; 2
    440a:	0e 94 fe 19 	call	0x33fc	; 0x33fc <vListRemove>
    440e:	c7 01       	movw	r24, r14
    4410:	b6 01       	movw	r22, r12
    4412:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <prvAddCurrentTaskToDelayedList>
    4416:	0e 94 34 21 	call	0x4268	; 0x4268 <xTaskResumeAll>
    441a:	81 11       	cpse	r24, r1
    441c:	0d c0       	rjmp	.+26     	; 0x4438 <vTaskDelayUntil+0xcc>
    441e:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <vPortYield>
    4422:	0a c0       	rjmp	.+20     	; 0x4438 <vTaskDelayUntil+0xcc>
    4424:	c8 82       	st	Y, r12
    4426:	d9 82       	std	Y+1, r13	; 0x01
    4428:	ea 82       	std	Y+2, r14	; 0x02
    442a:	fb 82       	std	Y+3, r15	; 0x03
    442c:	e9 cf       	rjmp	.-46     	; 0x4400 <vTaskDelayUntil+0x94>
    442e:	c8 82       	st	Y, r12
    4430:	d9 82       	std	Y+1, r13	; 0x01
    4432:	ea 82       	std	Y+2, r14	; 0x02
    4434:	fb 82       	std	Y+3, r15	; 0x03
    4436:	ef cf       	rjmp	.-34     	; 0x4416 <vTaskDelayUntil+0xaa>
    4438:	df 91       	pop	r29
    443a:	cf 91       	pop	r28
    443c:	ff 90       	pop	r15
    443e:	ef 90       	pop	r14
    4440:	df 90       	pop	r13
    4442:	cf 90       	pop	r12
    4444:	08 95       	ret

00004446 <vTaskDelay>:
    4446:	cf 92       	push	r12
    4448:	df 92       	push	r13
    444a:	ef 92       	push	r14
    444c:	ff 92       	push	r15
    444e:	6b 01       	movw	r12, r22
    4450:	7c 01       	movw	r14, r24
    4452:	67 2b       	or	r22, r23
    4454:	68 2b       	or	r22, r24
    4456:	69 2b       	or	r22, r25
    4458:	e9 f0       	breq	.+58     	; 0x4494 <vTaskDelay+0x4e>
    445a:	0e 94 17 20 	call	0x402e	; 0x402e <vTaskSuspendAll>
    445e:	80 91 71 41 	lds	r24, 0x4171	; 0x804171 <xTickCount>
    4462:	90 91 72 41 	lds	r25, 0x4172	; 0x804172 <xTickCount+0x1>
    4466:	a0 91 73 41 	lds	r26, 0x4173	; 0x804173 <xTickCount+0x2>
    446a:	b0 91 74 41 	lds	r27, 0x4174	; 0x804174 <xTickCount+0x3>
    446e:	c8 0e       	add	r12, r24
    4470:	d9 1e       	adc	r13, r25
    4472:	ea 1e       	adc	r14, r26
    4474:	fb 1e       	adc	r15, r27
    4476:	80 91 c9 41 	lds	r24, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    447a:	90 91 ca 41 	lds	r25, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    447e:	02 96       	adiw	r24, 0x02	; 2
    4480:	0e 94 fe 19 	call	0x33fc	; 0x33fc <vListRemove>
    4484:	c7 01       	movw	r24, r14
    4486:	b6 01       	movw	r22, r12
    4488:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <prvAddCurrentTaskToDelayedList>
    448c:	0e 94 34 21 	call	0x4268	; 0x4268 <xTaskResumeAll>
    4490:	81 11       	cpse	r24, r1
    4492:	02 c0       	rjmp	.+4      	; 0x4498 <vTaskDelay+0x52>
    4494:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <vPortYield>
    4498:	ff 90       	pop	r15
    449a:	ef 90       	pop	r14
    449c:	df 90       	pop	r13
    449e:	cf 90       	pop	r12
    44a0:	08 95       	ret

000044a2 <vTaskSwitchContext>:
    44a2:	80 91 6d 41 	lds	r24, 0x416D	; 0x80416d <uxSchedulerSuspended>
    44a6:	81 11       	cpse	r24, r1
    44a8:	0c c0       	rjmp	.+24     	; 0x44c2 <vTaskSwitchContext+0x20>
    44aa:	e0 91 6f 41 	lds	r30, 0x416F	; 0x80416f <uxTopReadyPriority>
    44ae:	4b e0       	ldi	r20, 0x0B	; 11
    44b0:	e4 9f       	mul	r30, r20
    44b2:	f0 01       	movw	r30, r0
    44b4:	11 24       	eor	r1, r1
    44b6:	e3 56       	subi	r30, 0x63	; 99
    44b8:	fe 4b       	sbci	r31, 0xBE	; 190
    44ba:	80 81       	ld	r24, Z
    44bc:	88 23       	and	r24, r24
    44be:	29 f0       	breq	.+10     	; 0x44ca <vTaskSwitchContext+0x28>
    44c0:	14 c0       	rjmp	.+40     	; 0x44ea <vTaskSwitchContext+0x48>
    44c2:	81 e0       	ldi	r24, 0x01	; 1
    44c4:	80 93 6b 41 	sts	0x416B, r24	; 0x80416b <xMissedYield>
    44c8:	08 95       	ret
    44ca:	9b e0       	ldi	r25, 0x0B	; 11
    44cc:	80 91 6f 41 	lds	r24, 0x416F	; 0x80416f <uxTopReadyPriority>
    44d0:	81 50       	subi	r24, 0x01	; 1
    44d2:	80 93 6f 41 	sts	0x416F, r24	; 0x80416f <uxTopReadyPriority>
    44d6:	e0 91 6f 41 	lds	r30, 0x416F	; 0x80416f <uxTopReadyPriority>
    44da:	9e 9f       	mul	r25, r30
    44dc:	f0 01       	movw	r30, r0
    44de:	11 24       	eor	r1, r1
    44e0:	e3 56       	subi	r30, 0x63	; 99
    44e2:	fe 4b       	sbci	r31, 0xBE	; 190
    44e4:	80 81       	ld	r24, Z
    44e6:	88 23       	and	r24, r24
    44e8:	89 f3       	breq	.-30     	; 0x44cc <vTaskSwitchContext+0x2a>
    44ea:	80 91 6f 41 	lds	r24, 0x416F	; 0x80416f <uxTopReadyPriority>
    44ee:	28 2f       	mov	r18, r24
    44f0:	30 e0       	ldi	r19, 0x00	; 0
    44f2:	4b e0       	ldi	r20, 0x0B	; 11
    44f4:	84 9f       	mul	r24, r20
    44f6:	c0 01       	movw	r24, r0
    44f8:	11 24       	eor	r1, r1
    44fa:	dc 01       	movw	r26, r24
    44fc:	a3 56       	subi	r26, 0x63	; 99
    44fe:	be 4b       	sbci	r27, 0xBE	; 190
    4500:	11 96       	adiw	r26, 0x01	; 1
    4502:	ed 91       	ld	r30, X+
    4504:	fc 91       	ld	r31, X
    4506:	12 97       	sbiw	r26, 0x02	; 2
    4508:	04 80       	ldd	r0, Z+4	; 0x04
    450a:	f5 81       	ldd	r31, Z+5	; 0x05
    450c:	e0 2d       	mov	r30, r0
    450e:	11 96       	adiw	r26, 0x01	; 1
    4510:	ed 93       	st	X+, r30
    4512:	fc 93       	st	X, r31
    4514:	12 97       	sbiw	r26, 0x02	; 2
    4516:	80 56       	subi	r24, 0x60	; 96
    4518:	9e 4b       	sbci	r25, 0xBE	; 190
    451a:	e8 17       	cp	r30, r24
    451c:	f9 07       	cpc	r31, r25
    451e:	61 f4       	brne	.+24     	; 0x4538 <vTaskSwitchContext+0x96>
    4520:	84 81       	ldd	r24, Z+4	; 0x04
    4522:	95 81       	ldd	r25, Z+5	; 0x05
    4524:	4b e0       	ldi	r20, 0x0B	; 11
    4526:	42 9f       	mul	r20, r18
    4528:	f0 01       	movw	r30, r0
    452a:	43 9f       	mul	r20, r19
    452c:	f0 0d       	add	r31, r0
    452e:	11 24       	eor	r1, r1
    4530:	e3 56       	subi	r30, 0x63	; 99
    4532:	fe 4b       	sbci	r31, 0xBE	; 190
    4534:	81 83       	std	Z+1, r24	; 0x01
    4536:	92 83       	std	Z+2, r25	; 0x02
    4538:	8b e0       	ldi	r24, 0x0B	; 11
    453a:	82 9f       	mul	r24, r18
    453c:	f0 01       	movw	r30, r0
    453e:	83 9f       	mul	r24, r19
    4540:	f0 0d       	add	r31, r0
    4542:	11 24       	eor	r1, r1
    4544:	e3 56       	subi	r30, 0x63	; 99
    4546:	fe 4b       	sbci	r31, 0xBE	; 190
    4548:	01 80       	ldd	r0, Z+1	; 0x01
    454a:	f2 81       	ldd	r31, Z+2	; 0x02
    454c:	e0 2d       	mov	r30, r0
    454e:	80 85       	ldd	r24, Z+8	; 0x08
    4550:	91 85       	ldd	r25, Z+9	; 0x09
    4552:	80 93 c9 41 	sts	0x41C9, r24	; 0x8041c9 <pxCurrentTCB>
    4556:	90 93 ca 41 	sts	0x41CA, r25	; 0x8041ca <pxCurrentTCB+0x1>
    455a:	08 95       	ret

0000455c <vTaskPlaceOnEventList>:
    455c:	cf 92       	push	r12
    455e:	df 92       	push	r13
    4560:	ef 92       	push	r14
    4562:	ff 92       	push	r15
    4564:	6a 01       	movw	r12, r20
    4566:	7b 01       	movw	r14, r22
    4568:	60 91 c9 41 	lds	r22, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    456c:	70 91 ca 41 	lds	r23, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    4570:	62 5f       	subi	r22, 0xF2	; 242
    4572:	7f 4f       	sbci	r23, 0xFF	; 255
    4574:	0e 94 b3 19 	call	0x3366	; 0x3366 <vListInsert>
    4578:	80 91 c9 41 	lds	r24, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    457c:	90 91 ca 41 	lds	r25, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    4580:	02 96       	adiw	r24, 0x02	; 2
    4582:	0e 94 fe 19 	call	0x33fc	; 0x33fc <vListRemove>
    4586:	80 91 71 41 	lds	r24, 0x4171	; 0x804171 <xTickCount>
    458a:	90 91 72 41 	lds	r25, 0x4172	; 0x804172 <xTickCount+0x1>
    458e:	a0 91 73 41 	lds	r26, 0x4173	; 0x804173 <xTickCount+0x2>
    4592:	b0 91 74 41 	lds	r27, 0x4174	; 0x804174 <xTickCount+0x3>
    4596:	bc 01       	movw	r22, r24
    4598:	cd 01       	movw	r24, r26
    459a:	6c 0d       	add	r22, r12
    459c:	7d 1d       	adc	r23, r13
    459e:	8e 1d       	adc	r24, r14
    45a0:	9f 1d       	adc	r25, r15
    45a2:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <prvAddCurrentTaskToDelayedList>
    45a6:	ff 90       	pop	r15
    45a8:	ef 90       	pop	r14
    45aa:	df 90       	pop	r13
    45ac:	cf 90       	pop	r12
    45ae:	08 95       	ret

000045b0 <xTaskRemoveFromEventList>:
    45b0:	0f 93       	push	r16
    45b2:	1f 93       	push	r17
    45b4:	cf 93       	push	r28
    45b6:	df 93       	push	r29
    45b8:	dc 01       	movw	r26, r24
    45ba:	17 96       	adiw	r26, 0x07	; 7
    45bc:	ed 91       	ld	r30, X+
    45be:	fc 91       	ld	r31, X
    45c0:	18 97       	sbiw	r26, 0x08	; 8
    45c2:	c0 85       	ldd	r28, Z+8	; 0x08
    45c4:	d1 85       	ldd	r29, Z+9	; 0x09
    45c6:	8e 01       	movw	r16, r28
    45c8:	02 5f       	subi	r16, 0xF2	; 242
    45ca:	1f 4f       	sbci	r17, 0xFF	; 255
    45cc:	c8 01       	movw	r24, r16
    45ce:	0e 94 fe 19 	call	0x33fc	; 0x33fc <vListRemove>
    45d2:	80 91 6d 41 	lds	r24, 0x416D	; 0x80416d <uxSchedulerSuspended>
    45d6:	81 11       	cpse	r24, r1
    45d8:	16 c0       	rjmp	.+44     	; 0x4606 <xTaskRemoveFromEventList+0x56>
    45da:	0c 50       	subi	r16, 0x0C	; 12
    45dc:	11 09       	sbc	r17, r1
    45de:	c8 01       	movw	r24, r16
    45e0:	0e 94 fe 19 	call	0x33fc	; 0x33fc <vListRemove>
    45e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    45e6:	90 91 6f 41 	lds	r25, 0x416F	; 0x80416f <uxTopReadyPriority>
    45ea:	98 17       	cp	r25, r24
    45ec:	10 f4       	brcc	.+4      	; 0x45f2 <xTaskRemoveFromEventList+0x42>
    45ee:	80 93 6f 41 	sts	0x416F, r24	; 0x80416f <uxTopReadyPriority>
    45f2:	bb e0       	ldi	r27, 0x0B	; 11
    45f4:	8b 9f       	mul	r24, r27
    45f6:	c0 01       	movw	r24, r0
    45f8:	11 24       	eor	r1, r1
    45fa:	b8 01       	movw	r22, r16
    45fc:	83 56       	subi	r24, 0x63	; 99
    45fe:	9e 4b       	sbci	r25, 0xBE	; 190
    4600:	0e 94 8c 19 	call	0x3318	; 0x3318 <vListInsertEnd>
    4604:	05 c0       	rjmp	.+10     	; 0x4610 <xTaskRemoveFromEventList+0x60>
    4606:	b8 01       	movw	r22, r16
    4608:	88 e7       	ldi	r24, 0x78	; 120
    460a:	91 e4       	ldi	r25, 0x41	; 65
    460c:	0e 94 8c 19 	call	0x3318	; 0x3318 <vListInsertEnd>
    4610:	e0 91 c9 41 	lds	r30, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    4614:	f0 91 ca 41 	lds	r31, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    4618:	81 e0       	ldi	r24, 0x01	; 1
    461a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    461c:	92 8d       	ldd	r25, Z+26	; 0x1a
    461e:	29 17       	cp	r18, r25
    4620:	08 f4       	brcc	.+2      	; 0x4624 <xTaskRemoveFromEventList+0x74>
    4622:	80 e0       	ldi	r24, 0x00	; 0
    4624:	df 91       	pop	r29
    4626:	cf 91       	pop	r28
    4628:	1f 91       	pop	r17
    462a:	0f 91       	pop	r16
    462c:	08 95       	ret

0000462e <vTaskSetTimeOutState>:
    462e:	20 91 6a 41 	lds	r18, 0x416A	; 0x80416a <xNumOfOverflows>
    4632:	fc 01       	movw	r30, r24
    4634:	20 83       	st	Z, r18
    4636:	40 91 71 41 	lds	r20, 0x4171	; 0x804171 <xTickCount>
    463a:	50 91 72 41 	lds	r21, 0x4172	; 0x804172 <xTickCount+0x1>
    463e:	60 91 73 41 	lds	r22, 0x4173	; 0x804173 <xTickCount+0x2>
    4642:	70 91 74 41 	lds	r23, 0x4174	; 0x804174 <xTickCount+0x3>
    4646:	41 83       	std	Z+1, r20	; 0x01
    4648:	52 83       	std	Z+2, r21	; 0x02
    464a:	63 83       	std	Z+3, r22	; 0x03
    464c:	74 83       	std	Z+4, r23	; 0x04
    464e:	08 95       	ret

00004650 <xTaskCheckForTimeOut>:
    4650:	8f 92       	push	r8
    4652:	9f 92       	push	r9
    4654:	af 92       	push	r10
    4656:	bf 92       	push	r11
    4658:	cf 92       	push	r12
    465a:	df 92       	push	r13
    465c:	ef 92       	push	r14
    465e:	ff 92       	push	r15
    4660:	0f 93       	push	r16
    4662:	1f 93       	push	r17
    4664:	cf 93       	push	r28
    4666:	df 93       	push	r29
    4668:	fc 01       	movw	r30, r24
    466a:	0f b6       	in	r0, 0x3f	; 63
    466c:	f8 94       	cli
    466e:	0f 92       	push	r0
    4670:	80 91 6a 41 	lds	r24, 0x416A	; 0x80416a <xNumOfOverflows>
    4674:	90 81       	ld	r25, Z
    4676:	98 17       	cp	r25, r24
    4678:	89 f0       	breq	.+34     	; 0x469c <xTaskCheckForTimeOut+0x4c>
    467a:	80 91 71 41 	lds	r24, 0x4171	; 0x804171 <xTickCount>
    467e:	90 91 72 41 	lds	r25, 0x4172	; 0x804172 <xTickCount+0x1>
    4682:	a0 91 73 41 	lds	r26, 0x4173	; 0x804173 <xTickCount+0x2>
    4686:	b0 91 74 41 	lds	r27, 0x4174	; 0x804174 <xTickCount+0x3>
    468a:	01 81       	ldd	r16, Z+1	; 0x01
    468c:	12 81       	ldd	r17, Z+2	; 0x02
    468e:	23 81       	ldd	r18, Z+3	; 0x03
    4690:	34 81       	ldd	r19, Z+4	; 0x04
    4692:	80 17       	cp	r24, r16
    4694:	91 07       	cpc	r25, r17
    4696:	a2 07       	cpc	r26, r18
    4698:	b3 07       	cpc	r27, r19
    469a:	a8 f5       	brcc	.+106    	; 0x4706 <xTaskCheckForTimeOut+0xb6>
    469c:	80 91 71 41 	lds	r24, 0x4171	; 0x804171 <xTickCount>
    46a0:	90 91 72 41 	lds	r25, 0x4172	; 0x804172 <xTickCount+0x1>
    46a4:	a0 91 73 41 	lds	r26, 0x4173	; 0x804173 <xTickCount+0x2>
    46a8:	b0 91 74 41 	lds	r27, 0x4174	; 0x804174 <xTickCount+0x3>
    46ac:	c1 80       	ldd	r12, Z+1	; 0x01
    46ae:	d2 80       	ldd	r13, Z+2	; 0x02
    46b0:	e3 80       	ldd	r14, Z+3	; 0x03
    46b2:	f4 80       	ldd	r15, Z+4	; 0x04
    46b4:	eb 01       	movw	r28, r22
    46b6:	08 81       	ld	r16, Y
    46b8:	19 81       	ldd	r17, Y+1	; 0x01
    46ba:	2a 81       	ldd	r18, Y+2	; 0x02
    46bc:	3b 81       	ldd	r19, Y+3	; 0x03
    46be:	8c 19       	sub	r24, r12
    46c0:	9d 09       	sbc	r25, r13
    46c2:	ae 09       	sbc	r26, r14
    46c4:	bf 09       	sbc	r27, r15
    46c6:	80 17       	cp	r24, r16
    46c8:	91 07       	cpc	r25, r17
    46ca:	a2 07       	cpc	r26, r18
    46cc:	b3 07       	cpc	r27, r19
    46ce:	e8 f4       	brcc	.+58     	; 0x470a <xTaskCheckForTimeOut+0xba>
    46d0:	cf 01       	movw	r24, r30
    46d2:	80 90 71 41 	lds	r8, 0x4171	; 0x804171 <xTickCount>
    46d6:	90 90 72 41 	lds	r9, 0x4172	; 0x804172 <xTickCount+0x1>
    46da:	a0 90 73 41 	lds	r10, 0x4173	; 0x804173 <xTickCount+0x2>
    46de:	b0 90 74 41 	lds	r11, 0x4174	; 0x804174 <xTickCount+0x3>
    46e2:	b5 01       	movw	r22, r10
    46e4:	a4 01       	movw	r20, r8
    46e6:	4c 19       	sub	r20, r12
    46e8:	5d 09       	sbc	r21, r13
    46ea:	6e 09       	sbc	r22, r14
    46ec:	7f 09       	sbc	r23, r15
    46ee:	04 1b       	sub	r16, r20
    46f0:	15 0b       	sbc	r17, r21
    46f2:	26 0b       	sbc	r18, r22
    46f4:	37 0b       	sbc	r19, r23
    46f6:	08 83       	st	Y, r16
    46f8:	19 83       	std	Y+1, r17	; 0x01
    46fa:	2a 83       	std	Y+2, r18	; 0x02
    46fc:	3b 83       	std	Y+3, r19	; 0x03
    46fe:	0e 94 17 23 	call	0x462e	; 0x462e <vTaskSetTimeOutState>
    4702:	80 e0       	ldi	r24, 0x00	; 0
    4704:	03 c0       	rjmp	.+6      	; 0x470c <xTaskCheckForTimeOut+0xbc>
    4706:	81 e0       	ldi	r24, 0x01	; 1
    4708:	01 c0       	rjmp	.+2      	; 0x470c <xTaskCheckForTimeOut+0xbc>
    470a:	81 e0       	ldi	r24, 0x01	; 1
    470c:	0f 90       	pop	r0
    470e:	0f be       	out	0x3f, r0	; 63
    4710:	df 91       	pop	r29
    4712:	cf 91       	pop	r28
    4714:	1f 91       	pop	r17
    4716:	0f 91       	pop	r16
    4718:	ff 90       	pop	r15
    471a:	ef 90       	pop	r14
    471c:	df 90       	pop	r13
    471e:	cf 90       	pop	r12
    4720:	bf 90       	pop	r11
    4722:	af 90       	pop	r10
    4724:	9f 90       	pop	r9
    4726:	8f 90       	pop	r8
    4728:	08 95       	ret

0000472a <vTaskMissedYield>:
    472a:	81 e0       	ldi	r24, 0x01	; 1
    472c:	80 93 6b 41 	sts	0x416B, r24	; 0x80416b <xMissedYield>
    4730:	08 95       	ret

00004732 <uxTaskGetStackHighWaterMark>:
    4732:	00 97       	sbiw	r24, 0x00	; 0
    4734:	21 f4       	brne	.+8      	; 0x473e <uxTaskGetStackHighWaterMark+0xc>
    4736:	80 91 c9 41 	lds	r24, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    473a:	90 91 ca 41 	lds	r25, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    473e:	dc 01       	movw	r26, r24
    4740:	5b 96       	adiw	r26, 0x1b	; 27
    4742:	ed 91       	ld	r30, X+
    4744:	fc 91       	ld	r31, X
    4746:	5c 97       	sbiw	r26, 0x1c	; 28
    4748:	80 81       	ld	r24, Z
    474a:	81 31       	cpi	r24, 0x11	; 17
    474c:	41 f4       	brne	.+16     	; 0x475e <uxTaskGetStackHighWaterMark+0x2c>
    474e:	31 96       	adiw	r30, 0x01	; 1
    4750:	80 e0       	ldi	r24, 0x00	; 0
    4752:	90 e0       	ldi	r25, 0x00	; 0
    4754:	01 96       	adiw	r24, 0x01	; 1
    4756:	21 91       	ld	r18, Z+
    4758:	21 31       	cpi	r18, 0x11	; 17
    475a:	e1 f3       	breq	.-8      	; 0x4754 <uxTaskGetStackHighWaterMark+0x22>
    475c:	08 95       	ret
    475e:	80 e0       	ldi	r24, 0x00	; 0
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	08 95       	ret

00004764 <xTaskGetCurrentTaskHandle>:
    4764:	80 91 c9 41 	lds	r24, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    4768:	90 91 ca 41 	lds	r25, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    476c:	08 95       	ret

0000476e <vTaskPriorityInherit>:
    476e:	0f 93       	push	r16
    4770:	1f 93       	push	r17
    4772:	cf 93       	push	r28
    4774:	df 93       	push	r29
    4776:	fc 01       	movw	r30, r24
    4778:	22 8d       	ldd	r18, Z+26	; 0x1a
    477a:	a0 91 c9 41 	lds	r26, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    477e:	b0 91 ca 41 	lds	r27, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    4782:	5a 96       	adiw	r26, 0x1a	; 26
    4784:	8c 91       	ld	r24, X
    4786:	28 17       	cp	r18, r24
    4788:	08 f0       	brcs	.+2      	; 0x478c <vTaskPriorityInherit+0x1e>
    478a:	41 c0       	rjmp	.+130    	; 0x480e <vTaskPriorityInherit+0xa0>
    478c:	a0 91 c9 41 	lds	r26, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    4790:	b0 91 ca 41 	lds	r27, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    4794:	5a 96       	adiw	r26, 0x1a	; 26
    4796:	3c 91       	ld	r19, X
    4798:	84 e0       	ldi	r24, 0x04	; 4
    479a:	90 e0       	ldi	r25, 0x00	; 0
    479c:	a0 e0       	ldi	r26, 0x00	; 0
    479e:	b0 e0       	ldi	r27, 0x00	; 0
    47a0:	83 1b       	sub	r24, r19
    47a2:	91 09       	sbc	r25, r1
    47a4:	a1 09       	sbc	r26, r1
    47a6:	b1 09       	sbc	r27, r1
    47a8:	86 87       	std	Z+14, r24	; 0x0e
    47aa:	97 87       	std	Z+15, r25	; 0x0f
    47ac:	a0 8b       	std	Z+16, r26	; 0x10
    47ae:	b1 8b       	std	Z+17, r27	; 0x11
    47b0:	8b e0       	ldi	r24, 0x0B	; 11
    47b2:	28 9f       	mul	r18, r24
    47b4:	90 01       	movw	r18, r0
    47b6:	11 24       	eor	r1, r1
    47b8:	23 56       	subi	r18, 0x63	; 99
    47ba:	3e 4b       	sbci	r19, 0xBE	; 190
    47bc:	84 85       	ldd	r24, Z+12	; 0x0c
    47be:	95 85       	ldd	r25, Z+13	; 0x0d
    47c0:	82 17       	cp	r24, r18
    47c2:	93 07       	cpc	r25, r19
    47c4:	e9 f4       	brne	.+58     	; 0x4800 <vTaskPriorityInherit+0x92>
    47c6:	8f 01       	movw	r16, r30
    47c8:	ef 01       	movw	r28, r30
    47ca:	22 96       	adiw	r28, 0x02	; 2
    47cc:	ce 01       	movw	r24, r28
    47ce:	0e 94 fe 19 	call	0x33fc	; 0x33fc <vListRemove>
    47d2:	e0 91 c9 41 	lds	r30, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    47d6:	f0 91 ca 41 	lds	r31, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    47da:	82 8d       	ldd	r24, Z+26	; 0x1a
    47dc:	f8 01       	movw	r30, r16
    47de:	82 8f       	std	Z+26, r24	; 0x1a
    47e0:	90 91 6f 41 	lds	r25, 0x416F	; 0x80416f <uxTopReadyPriority>
    47e4:	98 17       	cp	r25, r24
    47e6:	10 f4       	brcc	.+4      	; 0x47ec <vTaskPriorityInherit+0x7e>
    47e8:	80 93 6f 41 	sts	0x416F, r24	; 0x80416f <uxTopReadyPriority>
    47ec:	fb e0       	ldi	r31, 0x0B	; 11
    47ee:	8f 9f       	mul	r24, r31
    47f0:	c0 01       	movw	r24, r0
    47f2:	11 24       	eor	r1, r1
    47f4:	be 01       	movw	r22, r28
    47f6:	83 56       	subi	r24, 0x63	; 99
    47f8:	9e 4b       	sbci	r25, 0xBE	; 190
    47fa:	0e 94 8c 19 	call	0x3318	; 0x3318 <vListInsertEnd>
    47fe:	07 c0       	rjmp	.+14     	; 0x480e <vTaskPriorityInherit+0xa0>
    4800:	a0 91 c9 41 	lds	r26, 0x41C9	; 0x8041c9 <pxCurrentTCB>
    4804:	b0 91 ca 41 	lds	r27, 0x41CA	; 0x8041ca <pxCurrentTCB+0x1>
    4808:	5a 96       	adiw	r26, 0x1a	; 26
    480a:	8c 91       	ld	r24, X
    480c:	82 8f       	std	Z+26, r24	; 0x1a
    480e:	df 91       	pop	r29
    4810:	cf 91       	pop	r28
    4812:	1f 91       	pop	r17
    4814:	0f 91       	pop	r16
    4816:	08 95       	ret

00004818 <vTaskPriorityDisinherit>:
    4818:	0f 93       	push	r16
    481a:	1f 93       	push	r17
    481c:	cf 93       	push	r28
    481e:	df 93       	push	r29
    4820:	00 97       	sbiw	r24, 0x00	; 0
    4822:	49 f1       	breq	.+82     	; 0x4876 <vTaskPriorityDisinherit+0x5e>
    4824:	fc 01       	movw	r30, r24
    4826:	32 8d       	ldd	r19, Z+26	; 0x1a
    4828:	27 a1       	ldd	r18, Z+39	; 0x27
    482a:	32 17       	cp	r19, r18
    482c:	21 f1       	breq	.+72     	; 0x4876 <vTaskPriorityDisinherit+0x5e>
    482e:	ec 01       	movw	r28, r24
    4830:	8c 01       	movw	r16, r24
    4832:	0e 5f       	subi	r16, 0xFE	; 254
    4834:	1f 4f       	sbci	r17, 0xFF	; 255
    4836:	c8 01       	movw	r24, r16
    4838:	0e 94 fe 19 	call	0x33fc	; 0x33fc <vListRemove>
    483c:	8f a1       	ldd	r24, Y+39	; 0x27
    483e:	8a 8f       	std	Y+26, r24	; 0x1a
    4840:	44 e0       	ldi	r20, 0x04	; 4
    4842:	50 e0       	ldi	r21, 0x00	; 0
    4844:	60 e0       	ldi	r22, 0x00	; 0
    4846:	70 e0       	ldi	r23, 0x00	; 0
    4848:	48 1b       	sub	r20, r24
    484a:	51 09       	sbc	r21, r1
    484c:	61 09       	sbc	r22, r1
    484e:	71 09       	sbc	r23, r1
    4850:	4e 87       	std	Y+14, r20	; 0x0e
    4852:	5f 87       	std	Y+15, r21	; 0x0f
    4854:	68 8b       	std	Y+16, r22	; 0x10
    4856:	79 8b       	std	Y+17, r23	; 0x11
    4858:	90 91 6f 41 	lds	r25, 0x416F	; 0x80416f <uxTopReadyPriority>
    485c:	98 17       	cp	r25, r24
    485e:	10 f4       	brcc	.+4      	; 0x4864 <vTaskPriorityDisinherit+0x4c>
    4860:	80 93 6f 41 	sts	0x416F, r24	; 0x80416f <uxTopReadyPriority>
    4864:	fb e0       	ldi	r31, 0x0B	; 11
    4866:	8f 9f       	mul	r24, r31
    4868:	c0 01       	movw	r24, r0
    486a:	11 24       	eor	r1, r1
    486c:	b8 01       	movw	r22, r16
    486e:	83 56       	subi	r24, 0x63	; 99
    4870:	9e 4b       	sbci	r25, 0xBE	; 190
    4872:	0e 94 8c 19 	call	0x3318	; 0x3318 <vListInsertEnd>
    4876:	df 91       	pop	r29
    4878:	cf 91       	pop	r28
    487a:	1f 91       	pop	r17
    487c:	0f 91       	pop	r16
    487e:	08 95       	ret

00004880 <_ZN8frt_task22_call_users_run_methodEPS_>:
    4880:	ec 01       	movw	r28, r24
    4882:	e8 81       	ld	r30, Y
    4884:	f9 81       	ldd	r31, Y+1	; 0x01
    4886:	01 90       	ld	r0, Z+
    4888:	f0 81       	ld	r31, Z
    488a:	e0 2d       	mov	r30, r0
    488c:	19 95       	eicall
    488e:	1a 82       	std	Y+2, r1	; 0x02
    4890:	1b 82       	std	Y+3, r1	; 0x03
    4892:	6f ef       	ldi	r22, 0xFF	; 255
    4894:	7f ef       	ldi	r23, 0xFF	; 255
    4896:	cb 01       	movw	r24, r22
    4898:	0e 94 23 22 	call	0x4446	; 0x4446 <vTaskDelay>
    489c:	fa cf       	rjmp	.-12     	; 0x4892 <_ZN8frt_task22_call_users_run_methodEPS_+0x12>

0000489e <_ZN8frt_task13transition_toEh>:
    489e:	fc 01       	movw	r30, r24
    48a0:	64 87       	std	Z+12, r22	; 0x0c
    48a2:	65 87       	std	Z+13, r22	; 0x0d
    48a4:	08 95       	ret

000048a6 <_ZN8frt_taskC1EPKchjP8emstream>:
    48a6:	4f 92       	push	r4
    48a8:	5f 92       	push	r5
    48aa:	6f 92       	push	r6
    48ac:	7f 92       	push	r7
    48ae:	8f 92       	push	r8
    48b0:	9f 92       	push	r9
    48b2:	af 92       	push	r10
    48b4:	bf 92       	push	r11
    48b6:	cf 92       	push	r12
    48b8:	df 92       	push	r13
    48ba:	ef 92       	push	r14
    48bc:	ff 92       	push	r15
    48be:	0f 93       	push	r16
    48c0:	1f 93       	push	r17
    48c2:	cf 93       	push	r28
    48c4:	df 93       	push	r29
    48c6:	cd b7       	in	r28, 0x3d	; 61
    48c8:	de b7       	in	r29, 0x3e	; 62
    48ca:	2a 97       	sbiw	r28, 0x0a	; 10
    48cc:	cd bf       	out	0x3d, r28	; 61
    48ce:	de bf       	out	0x3e, r29	; 62
    48d0:	4c 01       	movw	r8, r24
    48d2:	29 01       	movw	r4, r18
    48d4:	38 01       	movw	r6, r16
    48d6:	8c e9       	ldi	r24, 0x9C	; 156
    48d8:	90 e2       	ldi	r25, 0x20	; 32
    48da:	f4 01       	movw	r30, r8
    48dc:	80 83       	st	Z, r24
    48de:	91 83       	std	Z+1, r25	; 0x01
    48e0:	fb 01       	movw	r30, r22
    48e2:	80 81       	ld	r24, Z
    48e4:	88 23       	and	r24, r24
    48e6:	69 f0       	breq	.+26     	; 0x4902 <_ZN8frt_taskC1EPKchjP8emstream+0x5c>
    48e8:	de 01       	movw	r26, r28
    48ea:	11 96       	adiw	r26, 0x01	; 1
    48ec:	31 96       	adiw	r30, 0x01	; 1
    48ee:	90 e0       	ldi	r25, 0x00	; 0
    48f0:	02 c0       	rjmp	.+4      	; 0x48f6 <_ZN8frt_taskC1EPKchjP8emstream+0x50>
    48f2:	99 30       	cpi	r25, 0x09	; 9
    48f4:	39 f0       	breq	.+14     	; 0x4904 <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
    48f6:	9f 5f       	subi	r25, 0xFF	; 255
    48f8:	8d 93       	st	X+, r24
    48fa:	81 91       	ld	r24, Z+
    48fc:	81 11       	cpse	r24, r1
    48fe:	f9 cf       	rjmp	.-14     	; 0x48f2 <_ZN8frt_taskC1EPKchjP8emstream+0x4c>
    4900:	01 c0       	rjmp	.+2      	; 0x4904 <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
    4902:	90 e0       	ldi	r25, 0x00	; 0
    4904:	e1 e0       	ldi	r30, 0x01	; 1
    4906:	f0 e0       	ldi	r31, 0x00	; 0
    4908:	ec 0f       	add	r30, r28
    490a:	fd 1f       	adc	r31, r29
    490c:	e9 0f       	add	r30, r25
    490e:	f1 1d       	adc	r31, r1
    4910:	10 82       	st	Z, r1
    4912:	74 01       	movw	r14, r8
    4914:	f2 e0       	ldi	r31, 0x02	; 2
    4916:	ef 0e       	add	r14, r31
    4918:	f1 1c       	adc	r15, r1
    491a:	a1 2c       	mov	r10, r1
    491c:	b1 2c       	mov	r11, r1
    491e:	c1 2c       	mov	r12, r1
    4920:	d1 2c       	mov	r13, r1
    4922:	04 2f       	mov	r16, r20
    4924:	94 01       	movw	r18, r8
    4926:	a2 01       	movw	r20, r4
    4928:	be 01       	movw	r22, r28
    492a:	6f 5f       	subi	r22, 0xFF	; 255
    492c:	7f 4f       	sbci	r23, 0xFF	; 255
    492e:	8a e1       	ldi	r24, 0x1A	; 26
    4930:	97 e0       	ldi	r25, 0x07	; 7
    4932:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <xTaskGenericCreate>
    4936:	f4 01       	movw	r30, r8
    4938:	66 82       	std	Z+6, r6	; 0x06
    493a:	77 82       	std	Z+7, r7	; 0x07
    493c:	40 86       	std	Z+8, r4	; 0x08
    493e:	51 86       	std	Z+9, r5	; 0x09
    4940:	20 91 cb 41 	lds	r18, 0x41CB	; 0x8041cb <last_created_task_pointer>
    4944:	30 91 cc 41 	lds	r19, 0x41CC	; 0x8041cc <last_created_task_pointer+0x1>
    4948:	24 83       	std	Z+4, r18	; 0x04
    494a:	35 83       	std	Z+5, r19	; 0x05
    494c:	80 92 cb 41 	sts	0x41CB, r8	; 0x8041cb <last_created_task_pointer>
    4950:	90 92 cc 41 	sts	0x41CC, r9	; 0x8041cc <last_created_task_pointer+0x1>
    4954:	14 86       	std	Z+12, r1	; 0x0c
    4956:	15 86       	std	Z+13, r1	; 0x0d
    4958:	40 90 f1 41 	lds	r4, 0x41F1	; 0x8041f1 <portStackTopForTask>
    495c:	50 90 f2 41 	lds	r5, 0x41F2	; 0x8041f2 <portStackTopForTask+0x1>
    4960:	ff ef       	ldi	r31, 0xFF	; 255
    4962:	4f 1a       	sub	r4, r31
    4964:	5f 0a       	sbc	r5, r31
    4966:	40 92 f1 41 	sts	0x41F1, r4	; 0x8041f1 <portStackTopForTask>
    496a:	50 92 f2 41 	sts	0x41F2, r5	; 0x8041f2 <portStackTopForTask+0x1>
    496e:	f4 01       	movw	r30, r8
    4970:	42 86       	std	Z+10, r4	; 0x0a
    4972:	53 86       	std	Z+11, r5	; 0x0b
    4974:	16 86       	std	Z+14, r1	; 0x0e
    4976:	17 86       	std	Z+15, r1	; 0x0f
    4978:	10 8a       	std	Z+16, r1	; 0x10
    497a:	11 8a       	std	Z+17, r1	; 0x11
    497c:	61 14       	cp	r6, r1
    497e:	71 04       	cpc	r7, r1
    4980:	09 f4       	brne	.+2      	; 0x4984 <_ZN8frt_taskC1EPKchjP8emstream+0xde>
    4982:	44 c0       	rjmp	.+136    	; 0x4a0c <_ZN8frt_taskC1EPKchjP8emstream+0x166>
    4984:	81 30       	cpi	r24, 0x01	; 1
    4986:	79 f5       	brne	.+94     	; 0x49e6 <_ZN8frt_taskC1EPKchjP8emstream+0x140>
    4988:	6a e0       	ldi	r22, 0x0A	; 10
    498a:	c3 01       	movw	r24, r6
    498c:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    4990:	7c 01       	movw	r14, r24
    4992:	6b eb       	ldi	r22, 0xBB	; 187
    4994:	7d e0       	ldi	r23, 0x0D	; 13
    4996:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    499a:	be 01       	movw	r22, r28
    499c:	6f 5f       	subi	r22, 0xFF	; 255
    499e:	7f 4f       	sbci	r23, 0xFF	; 255
    49a0:	c7 01       	movw	r24, r14
    49a2:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    49a6:	6a e0       	ldi	r22, 0x0A	; 10
    49a8:	c7 01       	movw	r24, r14
    49aa:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    49ae:	7c 01       	movw	r14, r24
    49b0:	62 eb       	ldi	r22, 0xB2	; 178
    49b2:	7d e0       	ldi	r23, 0x0D	; 13
    49b4:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    49b8:	6a e0       	ldi	r22, 0x0A	; 10
    49ba:	c7 01       	movw	r24, r14
    49bc:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    49c0:	7c 01       	movw	r14, r24
    49c2:	64 ea       	ldi	r22, 0xA4	; 164
    49c4:	7d e0       	ldi	r23, 0x0D	; 13
    49c6:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    49ca:	63 e0       	ldi	r22, 0x03	; 3
    49cc:	c7 01       	movw	r24, r14
    49ce:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    49d2:	b2 01       	movw	r22, r4
    49d4:	0e 94 96 28 	call	0x512c	; 0x512c <_ZN8emstreamlsEj>
    49d8:	62 e0       	ldi	r22, 0x02	; 2
    49da:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    49de:	66 e0       	ldi	r22, 0x06	; 6
    49e0:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    49e4:	13 c0       	rjmp	.+38     	; 0x4a0c <_ZN8frt_taskC1EPKchjP8emstream+0x166>
    49e6:	6a e0       	ldi	r22, 0x0A	; 10
    49e8:	c3 01       	movw	r24, r6
    49ea:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    49ee:	4c 01       	movw	r8, r24
    49f0:	6f e8       	ldi	r22, 0x8F	; 143
    49f2:	7d e0       	ldi	r23, 0x0D	; 13
    49f4:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    49f8:	be 01       	movw	r22, r28
    49fa:	6f 5f       	subi	r22, 0xFF	; 255
    49fc:	7f 4f       	sbci	r23, 0xFF	; 255
    49fe:	c4 01       	movw	r24, r8
    4a00:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    4a04:	66 e0       	ldi	r22, 0x06	; 6
    4a06:	c4 01       	movw	r24, r8
    4a08:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    4a0c:	2a 96       	adiw	r28, 0x0a	; 10
    4a0e:	cd bf       	out	0x3d, r28	; 61
    4a10:	de bf       	out	0x3e, r29	; 62
    4a12:	df 91       	pop	r29
    4a14:	cf 91       	pop	r28
    4a16:	1f 91       	pop	r17
    4a18:	0f 91       	pop	r16
    4a1a:	ff 90       	pop	r15
    4a1c:	ef 90       	pop	r14
    4a1e:	df 90       	pop	r13
    4a20:	cf 90       	pop	r12
    4a22:	bf 90       	pop	r11
    4a24:	af 90       	pop	r10
    4a26:	9f 90       	pop	r9
    4a28:	8f 90       	pop	r8
    4a2a:	7f 90       	pop	r7
    4a2c:	6f 90       	pop	r6
    4a2e:	5f 90       	pop	r5
    4a30:	4f 90       	pop	r4
    4a32:	08 95       	ret

00004a34 <_ZN8frt_task12print_statusER8emstream>:
    4a34:	8f 92       	push	r8
    4a36:	9f 92       	push	r9
    4a38:	af 92       	push	r10
    4a3a:	bf 92       	push	r11
    4a3c:	cf 92       	push	r12
    4a3e:	df 92       	push	r13
    4a40:	ef 92       	push	r14
    4a42:	ff 92       	push	r15
    4a44:	0f 93       	push	r16
    4a46:	1f 93       	push	r17
    4a48:	cf 93       	push	r28
    4a4a:	df 93       	push	r29
    4a4c:	ec 01       	movw	r28, r24
    4a4e:	8b 01       	movw	r16, r22
    4a50:	8a 81       	ldd	r24, Y+2	; 0x02
    4a52:	9b 81       	ldd	r25, Y+3	; 0x03
    4a54:	0e 94 2b 20 	call	0x4056	; 0x4056 <pcTaskGetTaskName>
    4a58:	bc 01       	movw	r22, r24
    4a5a:	c8 01       	movw	r24, r16
    4a5c:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    4a60:	d8 01       	movw	r26, r16
    4a62:	ed 91       	ld	r30, X+
    4a64:	fc 91       	ld	r31, X
    4a66:	02 80       	ldd	r0, Z+2	; 0x02
    4a68:	f3 81       	ldd	r31, Z+3	; 0x03
    4a6a:	e0 2d       	mov	r30, r0
    4a6c:	69 e0       	ldi	r22, 0x09	; 9
    4a6e:	c8 01       	movw	r24, r16
    4a70:	19 95       	eicall
    4a72:	8a 81       	ldd	r24, Y+2	; 0x02
    4a74:	9b 81       	ldd	r25, Y+3	; 0x03
    4a76:	0e 94 2b 20 	call	0x4056	; 0x4056 <pcTaskGetTaskName>
    4a7a:	fc 01       	movw	r30, r24
    4a7c:	01 90       	ld	r0, Z+
    4a7e:	00 20       	and	r0, r0
    4a80:	e9 f7       	brne	.-6      	; 0x4a7c <_ZN8frt_task12print_statusER8emstream+0x48>
    4a82:	31 97       	sbiw	r30, 0x01	; 1
    4a84:	e8 1b       	sub	r30, r24
    4a86:	f9 0b       	sbc	r31, r25
    4a88:	38 97       	sbiw	r30, 0x08	; 8
    4a8a:	48 f4       	brcc	.+18     	; 0x4a9e <_ZN8frt_task12print_statusER8emstream+0x6a>
    4a8c:	d8 01       	movw	r26, r16
    4a8e:	ed 91       	ld	r30, X+
    4a90:	fc 91       	ld	r31, X
    4a92:	02 80       	ldd	r0, Z+2	; 0x02
    4a94:	f3 81       	ldd	r31, Z+3	; 0x03
    4a96:	e0 2d       	mov	r30, r0
    4a98:	69 e0       	ldi	r22, 0x09	; 9
    4a9a:	c8 01       	movw	r24, r16
    4a9c:	19 95       	eicall
    4a9e:	ce 84       	ldd	r12, Y+14	; 0x0e
    4aa0:	df 84       	ldd	r13, Y+15	; 0x0f
    4aa2:	e8 88       	ldd	r14, Y+16	; 0x10
    4aa4:	f9 88       	ldd	r15, Y+17	; 0x11
    4aa6:	a8 84       	ldd	r10, Y+8	; 0x08
    4aa8:	b9 84       	ldd	r11, Y+9	; 0x09
    4aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    4aac:	9b 81       	ldd	r25, Y+3	; 0x03
    4aae:	0e 94 99 23 	call	0x4732	; 0x4732 <uxTaskGetStackHighWaterMark>
    4ab2:	98 2e       	mov	r9, r24
    4ab4:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    4aba:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <uxTaskPriorityGet>
    4abe:	68 2f       	mov	r22, r24
    4ac0:	c8 01       	movw	r24, r16
    4ac2:	0e 94 0c 29 	call	0x5218	; 0x5218 <_ZN8emstreamlsEh>
    4ac6:	6a e0       	ldi	r22, 0x0A	; 10
    4ac8:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    4acc:	ec 01       	movw	r28, r24
    4ace:	61 e3       	ldi	r22, 0x31	; 49
    4ad0:	7e e0       	ldi	r23, 0x0E	; 14
    4ad2:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    4ad6:	68 2d       	mov	r22, r8
    4ad8:	ce 01       	movw	r24, r28
    4ada:	0e 94 0c 29 	call	0x5218	; 0x5218 <_ZN8emstreamlsEh>
    4ade:	6a e0       	ldi	r22, 0x0A	; 10
    4ae0:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    4ae4:	ec 01       	movw	r28, r24
    4ae6:	6f e2       	ldi	r22, 0x2F	; 47
    4ae8:	7e e0       	ldi	r23, 0x0E	; 14
    4aea:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    4aee:	69 2d       	mov	r22, r9
    4af0:	ce 01       	movw	r24, r28
    4af2:	0e 94 0c 29 	call	0x5218	; 0x5218 <_ZN8emstreamlsEh>
    4af6:	6a e0       	ldi	r22, 0x0A	; 10
    4af8:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    4afc:	ec 01       	movw	r28, r24
    4afe:	6d e2       	ldi	r22, 0x2D	; 45
    4b00:	7e e0       	ldi	r23, 0x0E	; 14
    4b02:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    4b06:	b5 01       	movw	r22, r10
    4b08:	ce 01       	movw	r24, r28
    4b0a:	0e 94 96 28 	call	0x512c	; 0x512c <_ZN8emstreamlsEj>
    4b0e:	6a e0       	ldi	r22, 0x0A	; 10
    4b10:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    4b14:	ec 01       	movw	r28, r24
    4b16:	6b e2       	ldi	r22, 0x2B	; 43
    4b18:	7e e0       	ldi	r23, 0x0E	; 14
    4b1a:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    4b1e:	6a e0       	ldi	r22, 0x0A	; 10
    4b20:	ce 01       	movw	r24, r28
    4b22:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8emstreamlsE15ser_manipulator>
    4b26:	ec 01       	movw	r28, r24
    4b28:	69 e2       	ldi	r22, 0x29	; 41
    4b2a:	7e e0       	ldi	r23, 0x0E	; 14
    4b2c:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    4b30:	b7 01       	movw	r22, r14
    4b32:	a6 01       	movw	r20, r12
    4b34:	ce 01       	movw	r24, r28
    4b36:	0e 94 ca 28 	call	0x5194	; 0x5194 <_ZN8emstreamlsEm>
    4b3a:	df 91       	pop	r29
    4b3c:	cf 91       	pop	r28
    4b3e:	1f 91       	pop	r17
    4b40:	0f 91       	pop	r16
    4b42:	ff 90       	pop	r15
    4b44:	ef 90       	pop	r14
    4b46:	df 90       	pop	r13
    4b48:	cf 90       	pop	r12
    4b4a:	bf 90       	pop	r11
    4b4c:	af 90       	pop	r10
    4b4e:	9f 90       	pop	r9
    4b50:	8f 90       	pop	r8
    4b52:	08 95       	ret

00004b54 <_ZN14frt_text_queue7getcharEv>:
    4b54:	0f 93       	push	r16
    4b56:	cf 93       	push	r28
    4b58:	df 93       	push	r29
    4b5a:	1f 92       	push	r1
    4b5c:	cd b7       	in	r28, 0x3d	; 61
    4b5e:	de b7       	in	r29, 0x3e	; 62
    4b60:	00 e0       	ldi	r16, 0x00	; 0
    4b62:	2f ef       	ldi	r18, 0xFF	; 255
    4b64:	3f ef       	ldi	r19, 0xFF	; 255
    4b66:	a9 01       	movw	r20, r18
    4b68:	be 01       	movw	r22, r28
    4b6a:	6f 5f       	subi	r22, 0xFF	; 255
    4b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b6e:	fc 01       	movw	r30, r24
    4b70:	80 85       	ldd	r24, Z+8	; 0x08
    4b72:	91 85       	ldd	r25, Z+9	; 0x09
    4b74:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <xQueueGenericReceive>
    4b78:	81 30       	cpi	r24, 0x01	; 1
    4b7a:	19 f4       	brne	.+6      	; 0x4b82 <_ZN14frt_text_queue7getcharEv+0x2e>
    4b7c:	89 81       	ldd	r24, Y+1	; 0x01
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	02 c0       	rjmp	.+4      	; 0x4b86 <_ZN14frt_text_queue7getcharEv+0x32>
    4b82:	8f ef       	ldi	r24, 0xFF	; 255
    4b84:	9f ef       	ldi	r25, 0xFF	; 255
    4b86:	0f 90       	pop	r0
    4b88:	df 91       	pop	r29
    4b8a:	cf 91       	pop	r28
    4b8c:	0f 91       	pop	r16
    4b8e:	08 95       	ret

00004b90 <_ZN14frt_text_queue14check_for_charEv>:
    4b90:	fc 01       	movw	r30, r24
    4b92:	80 85       	ldd	r24, Z+8	; 0x08
    4b94:	91 85       	ldd	r25, Z+9	; 0x09
    4b96:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <uxQueueMessagesWaiting>
    4b9a:	91 e0       	ldi	r25, 0x01	; 1
    4b9c:	81 11       	cpse	r24, r1
    4b9e:	01 c0       	rjmp	.+2      	; 0x4ba2 <_ZN14frt_text_queue14check_for_charEv+0x12>
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	89 2f       	mov	r24, r25
    4ba4:	08 95       	ret

00004ba6 <_ZN14frt_text_queue7putcharEc>:
    4ba6:	0f 93       	push	r16
    4ba8:	cf 93       	push	r28
    4baa:	df 93       	push	r29
    4bac:	1f 92       	push	r1
    4bae:	cd b7       	in	r28, 0x3d	; 61
    4bb0:	de b7       	in	r29, 0x3e	; 62
    4bb2:	69 83       	std	Y+1, r22	; 0x01
    4bb4:	fc 01       	movw	r30, r24
    4bb6:	22 85       	ldd	r18, Z+10	; 0x0a
    4bb8:	33 85       	ldd	r19, Z+11	; 0x0b
    4bba:	44 85       	ldd	r20, Z+12	; 0x0c
    4bbc:	55 85       	ldd	r21, Z+13	; 0x0d
    4bbe:	00 e0       	ldi	r16, 0x00	; 0
    4bc0:	be 01       	movw	r22, r28
    4bc2:	6f 5f       	subi	r22, 0xFF	; 255
    4bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    4bc6:	80 85       	ldd	r24, Z+8	; 0x08
    4bc8:	91 85       	ldd	r25, Z+9	; 0x09
    4bca:	0e 94 bb 1c 	call	0x3976	; 0x3976 <xQueueGenericSend>
    4bce:	91 e0       	ldi	r25, 0x01	; 1
    4bd0:	81 11       	cpse	r24, r1
    4bd2:	01 c0       	rjmp	.+2      	; 0x4bd6 <_ZN14frt_text_queue7putcharEc+0x30>
    4bd4:	90 e0       	ldi	r25, 0x00	; 0
    4bd6:	89 2f       	mov	r24, r25
    4bd8:	0f 90       	pop	r0
    4bda:	df 91       	pop	r29
    4bdc:	cf 91       	pop	r28
    4bde:	0f 91       	pop	r16
    4be0:	08 95       	ret

00004be2 <_ZN14frt_text_queueC1EjP8emstreamm>:
    4be2:	8f 92       	push	r8
    4be4:	9f 92       	push	r9
    4be6:	bf 92       	push	r11
    4be8:	cf 92       	push	r12
    4bea:	df 92       	push	r13
    4bec:	ef 92       	push	r14
    4bee:	ff 92       	push	r15
    4bf0:	0f 93       	push	r16
    4bf2:	1f 93       	push	r17
    4bf4:	cf 93       	push	r28
    4bf6:	df 93       	push	r29
    4bf8:	ec 01       	movw	r28, r24
    4bfa:	b6 2e       	mov	r11, r22
    4bfc:	4a 01       	movw	r8, r20
    4bfe:	68 01       	movw	r12, r16
    4c00:	79 01       	movw	r14, r18
    4c02:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN8emstreamC1Ev>
    4c06:	84 ea       	ldi	r24, 0xA4	; 164
    4c08:	90 e2       	ldi	r25, 0x20	; 32
    4c0a:	88 83       	st	Y, r24
    4c0c:	99 83       	std	Y+1, r25	; 0x01
    4c0e:	8e 86       	std	Y+14, r8	; 0x0e
    4c10:	9f 86       	std	Y+15, r9	; 0x0f
    4c12:	40 e0       	ldi	r20, 0x00	; 0
    4c14:	61 e0       	ldi	r22, 0x01	; 1
    4c16:	8b 2d       	mov	r24, r11
    4c18:	0e 94 8d 1c 	call	0x391a	; 0x391a <xQueueGenericCreate>
    4c1c:	88 87       	std	Y+8, r24	; 0x08
    4c1e:	99 87       	std	Y+9, r25	; 0x09
    4c20:	ca 86       	std	Y+10, r12	; 0x0a
    4c22:	db 86       	std	Y+11, r13	; 0x0b
    4c24:	ec 86       	std	Y+12, r14	; 0x0c
    4c26:	fd 86       	std	Y+13, r15	; 0x0d
    4c28:	df 91       	pop	r29
    4c2a:	cf 91       	pop	r28
    4c2c:	1f 91       	pop	r17
    4c2e:	0f 91       	pop	r16
    4c30:	ff 90       	pop	r15
    4c32:	ef 90       	pop	r14
    4c34:	df 90       	pop	r13
    4c36:	cf 90       	pop	r12
    4c38:	bf 90       	pop	r11
    4c3a:	9f 90       	pop	r9
    4c3c:	8f 90       	pop	r8
    4c3e:	08 95       	ret

00004c40 <_Znwj>:
    4c40:	0e 94 aa 18 	call	0x3154	; 0x3154 <pvPortMalloc>
    4c44:	08 95       	ret

00004c46 <_Znaj>:
    4c46:	0e 94 aa 18 	call	0x3154	; 0x3154 <pvPortMalloc>
    4c4a:	08 95       	ret

00004c4c <__cxa_pure_virtual>:
    4c4c:	08 95       	ret

00004c4e <_ZN7base232C1EjP12USART_struct>:
    4c4e:	cf 93       	push	r28
    4c50:	df 93       	push	r29
    4c52:	fc 01       	movw	r30, r24
    4c54:	da 01       	movw	r26, r20
    4c56:	40 3a       	cpi	r20, 0xA0	; 160
    4c58:	68 e0       	ldi	r22, 0x08	; 8
    4c5a:	56 07       	cpc	r21, r22
    4c5c:	49 f4       	brne	.+18     	; 0x4c70 <_ZN7base232C1EjP12USART_struct+0x22>
    4c5e:	80 e4       	ldi	r24, 0x40	; 64
    4c60:	96 e0       	ldi	r25, 0x06	; 6
    4c62:	82 83       	std	Z+2, r24	; 0x02
    4c64:	93 83       	std	Z+3, r25	; 0x03
    4c66:	82 e0       	ldi	r24, 0x02	; 2
    4c68:	84 83       	std	Z+4, r24	; 0x04
    4c6a:	83 e0       	ldi	r24, 0x03	; 3
    4c6c:	85 83       	std	Z+5, r24	; 0x05
    4c6e:	3f c0       	rjmp	.+126    	; 0x4cee <_ZN7base232C1EjP12USART_struct+0xa0>
    4c70:	40 3b       	cpi	r20, 0xB0	; 176
    4c72:	78 e0       	ldi	r23, 0x08	; 8
    4c74:	57 07       	cpc	r21, r23
    4c76:	49 f4       	brne	.+18     	; 0x4c8a <_ZN7base232C1EjP12USART_struct+0x3c>
    4c78:	80 e4       	ldi	r24, 0x40	; 64
    4c7a:	96 e0       	ldi	r25, 0x06	; 6
    4c7c:	82 83       	std	Z+2, r24	; 0x02
    4c7e:	93 83       	std	Z+3, r25	; 0x03
    4c80:	86 e0       	ldi	r24, 0x06	; 6
    4c82:	84 83       	std	Z+4, r24	; 0x04
    4c84:	87 e0       	ldi	r24, 0x07	; 7
    4c86:	85 83       	std	Z+5, r24	; 0x05
    4c88:	32 c0       	rjmp	.+100    	; 0x4cee <_ZN7base232C1EjP12USART_struct+0xa0>
    4c8a:	40 3a       	cpi	r20, 0xA0	; 160
    4c8c:	89 e0       	ldi	r24, 0x09	; 9
    4c8e:	58 07       	cpc	r21, r24
    4c90:	49 f4       	brne	.+18     	; 0x4ca4 <_ZN7base232C1EjP12USART_struct+0x56>
    4c92:	80 e6       	ldi	r24, 0x60	; 96
    4c94:	96 e0       	ldi	r25, 0x06	; 6
    4c96:	82 83       	std	Z+2, r24	; 0x02
    4c98:	93 83       	std	Z+3, r25	; 0x03
    4c9a:	82 e0       	ldi	r24, 0x02	; 2
    4c9c:	84 83       	std	Z+4, r24	; 0x04
    4c9e:	83 e0       	ldi	r24, 0x03	; 3
    4ca0:	85 83       	std	Z+5, r24	; 0x05
    4ca2:	25 c0       	rjmp	.+74     	; 0x4cee <_ZN7base232C1EjP12USART_struct+0xa0>
    4ca4:	40 3b       	cpi	r20, 0xB0	; 176
    4ca6:	69 e0       	ldi	r22, 0x09	; 9
    4ca8:	56 07       	cpc	r21, r22
    4caa:	49 f4       	brne	.+18     	; 0x4cbe <_ZN7base232C1EjP12USART_struct+0x70>
    4cac:	80 e6       	ldi	r24, 0x60	; 96
    4cae:	96 e0       	ldi	r25, 0x06	; 6
    4cb0:	82 83       	std	Z+2, r24	; 0x02
    4cb2:	93 83       	std	Z+3, r25	; 0x03
    4cb4:	86 e0       	ldi	r24, 0x06	; 6
    4cb6:	84 83       	std	Z+4, r24	; 0x04
    4cb8:	87 e0       	ldi	r24, 0x07	; 7
    4cba:	85 83       	std	Z+5, r24	; 0x05
    4cbc:	18 c0       	rjmp	.+48     	; 0x4cee <_ZN7base232C1EjP12USART_struct+0xa0>
    4cbe:	40 3a       	cpi	r20, 0xA0	; 160
    4cc0:	7a e0       	ldi	r23, 0x0A	; 10
    4cc2:	57 07       	cpc	r21, r23
    4cc4:	49 f4       	brne	.+18     	; 0x4cd8 <_ZN7base232C1EjP12USART_struct+0x8a>
    4cc6:	80 e8       	ldi	r24, 0x80	; 128
    4cc8:	96 e0       	ldi	r25, 0x06	; 6
    4cca:	82 83       	std	Z+2, r24	; 0x02
    4ccc:	93 83       	std	Z+3, r25	; 0x03
    4cce:	82 e0       	ldi	r24, 0x02	; 2
    4cd0:	84 83       	std	Z+4, r24	; 0x04
    4cd2:	83 e0       	ldi	r24, 0x03	; 3
    4cd4:	85 83       	std	Z+5, r24	; 0x05
    4cd6:	0b c0       	rjmp	.+22     	; 0x4cee <_ZN7base232C1EjP12USART_struct+0xa0>
    4cd8:	40 3a       	cpi	r20, 0xA0	; 160
    4cda:	5b 40       	sbci	r21, 0x0B	; 11
    4cdc:	41 f4       	brne	.+16     	; 0x4cee <_ZN7base232C1EjP12USART_struct+0xa0>
    4cde:	80 ea       	ldi	r24, 0xA0	; 160
    4ce0:	96 e0       	ldi	r25, 0x06	; 6
    4ce2:	82 83       	std	Z+2, r24	; 0x02
    4ce4:	93 83       	std	Z+3, r25	; 0x03
    4ce6:	82 e0       	ldi	r24, 0x02	; 2
    4ce8:	84 83       	std	Z+4, r24	; 0x04
    4cea:	83 e0       	ldi	r24, 0x03	; 3
    4cec:	85 83       	std	Z+5, r24	; 0x05
    4cee:	a6 83       	std	Z+6, r26	; 0x06
    4cf0:	b7 83       	std	Z+7, r27	; 0x07
    4cf2:	cd 01       	movw	r24, r26
    4cf4:	01 96       	adiw	r24, 0x01	; 1
    4cf6:	80 87       	std	Z+8, r24	; 0x08
    4cf8:	91 87       	std	Z+9, r25	; 0x09
    4cfa:	03 96       	adiw	r24, 0x03	; 3
    4cfc:	82 87       	std	Z+10, r24	; 0x0a
    4cfe:	93 87       	std	Z+11, r25	; 0x0b
    4d00:	25 81       	ldd	r18, Z+5	; 0x05
    4d02:	c2 81       	ldd	r28, Z+2	; 0x02
    4d04:	d3 81       	ldd	r29, Z+3	; 0x03
    4d06:	4c 81       	ldd	r20, Y+4	; 0x04
    4d08:	81 e0       	ldi	r24, 0x01	; 1
    4d0a:	90 e0       	ldi	r25, 0x00	; 0
    4d0c:	bc 01       	movw	r22, r24
    4d0e:	02 c0       	rjmp	.+4      	; 0x4d14 <_ZN7base232C1EjP12USART_struct+0xc6>
    4d10:	66 0f       	add	r22, r22
    4d12:	77 1f       	adc	r23, r23
    4d14:	2a 95       	dec	r18
    4d16:	e2 f7       	brpl	.-8      	; 0x4d10 <_ZN7base232C1EjP12USART_struct+0xc2>
    4d18:	9b 01       	movw	r18, r22
    4d1a:	24 2b       	or	r18, r20
    4d1c:	2c 83       	std	Y+4, r18	; 0x04
    4d1e:	25 81       	ldd	r18, Z+5	; 0x05
    4d20:	c2 81       	ldd	r28, Z+2	; 0x02
    4d22:	d3 81       	ldd	r29, Z+3	; 0x03
    4d24:	48 81       	ld	r20, Y
    4d26:	bc 01       	movw	r22, r24
    4d28:	02 c0       	rjmp	.+4      	; 0x4d2e <_ZN7base232C1EjP12USART_struct+0xe0>
    4d2a:	66 0f       	add	r22, r22
    4d2c:	77 1f       	adc	r23, r23
    4d2e:	2a 95       	dec	r18
    4d30:	e2 f7       	brpl	.-8      	; 0x4d2a <_ZN7base232C1EjP12USART_struct+0xdc>
    4d32:	9b 01       	movw	r18, r22
    4d34:	24 2b       	or	r18, r20
    4d36:	28 83       	st	Y, r18
    4d38:	34 81       	ldd	r19, Z+4	; 0x04
    4d3a:	c2 81       	ldd	r28, Z+2	; 0x02
    4d3c:	d3 81       	ldd	r29, Z+3	; 0x03
    4d3e:	28 81       	ld	r18, Y
    4d40:	02 c0       	rjmp	.+4      	; 0x4d46 <_ZN7base232C1EjP12USART_struct+0xf8>
    4d42:	88 0f       	add	r24, r24
    4d44:	99 1f       	adc	r25, r25
    4d46:	3a 95       	dec	r19
    4d48:	e2 f7       	brpl	.-8      	; 0x4d42 <_ZN7base232C1EjP12USART_struct+0xf4>
    4d4a:	80 95       	com	r24
    4d4c:	90 95       	com	r25
    4d4e:	82 23       	and	r24, r18
    4d50:	88 83       	st	Y, r24
    4d52:	80 e1       	ldi	r24, 0x10	; 16
    4d54:	13 96       	adiw	r26, 0x03	; 3
    4d56:	8c 93       	st	X, r24
    4d58:	13 97       	sbiw	r26, 0x03	; 3
    4d5a:	83 e0       	ldi	r24, 0x03	; 3
    4d5c:	15 96       	adiw	r26, 0x05	; 5
    4d5e:	8c 93       	st	X, r24
    4d60:	15 97       	sbiw	r26, 0x05	; 5
    4d62:	80 ef       	ldi	r24, 0xF0	; 240
    4d64:	17 96       	adiw	r26, 0x07	; 7
    4d66:	8c 93       	st	X, r24
    4d68:	17 97       	sbiw	r26, 0x07	; 7
    4d6a:	81 e2       	ldi	r24, 0x21	; 33
    4d6c:	16 96       	adiw	r26, 0x06	; 6
    4d6e:	8c 93       	st	X, r24
    4d70:	16 97       	sbiw	r26, 0x06	; 6
    4d72:	88 e1       	ldi	r24, 0x18	; 24
    4d74:	14 96       	adiw	r26, 0x04	; 4
    4d76:	8c 93       	st	X, r24
    4d78:	80 e8       	ldi	r24, 0x80	; 128
    4d7a:	85 87       	std	Z+13, r24	; 0x0d
    4d7c:	80 e4       	ldi	r24, 0x40	; 64
    4d7e:	86 87       	std	Z+14, r24	; 0x0e
    4d80:	80 e2       	ldi	r24, 0x20	; 32
    4d82:	84 87       	std	Z+12, r24	; 0x0c
    4d84:	06 80       	ldd	r0, Z+6	; 0x06
    4d86:	f7 81       	ldd	r31, Z+7	; 0x07
    4d88:	e0 2d       	mov	r30, r0
    4d8a:	80 81       	ld	r24, Z
    4d8c:	80 81       	ld	r24, Z
    4d8e:	df 91       	pop	r29
    4d90:	cf 91       	pop	r28
    4d92:	08 95       	ret

00004d94 <_ZN8emstream13ready_to_sendEv>:
    4d94:	81 e0       	ldi	r24, 0x01	; 1
    4d96:	08 95       	ret

00004d98 <_ZN8emstream7getcharEv>:
    4d98:	80 e0       	ldi	r24, 0x00	; 0
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	08 95       	ret

00004d9e <_ZN8emstream14check_for_charEv>:
    4d9e:	80 e0       	ldi	r24, 0x00	; 0
    4da0:	08 95       	ret

00004da2 <_ZN8emstream12transmit_nowEv>:
    4da2:	08 95       	ret

00004da4 <_ZN8emstream12clear_screenEv>:
    4da4:	08 95       	ret

00004da6 <_ZN8emstreamC1Ev>:
    4da6:	fc 01       	movw	r30, r24
    4da8:	84 eb       	ldi	r24, 0xB4	; 180
    4daa:	90 e2       	ldi	r25, 0x20	; 32
    4dac:	80 83       	st	Z, r24
    4dae:	91 83       	std	Z+1, r25	; 0x01
    4db0:	8a e0       	ldi	r24, 0x0A	; 10
    4db2:	82 83       	std	Z+2, r24	; 0x02
    4db4:	13 82       	std	Z+3, r1	; 0x03
    4db6:	83 e0       	ldi	r24, 0x03	; 3
    4db8:	85 83       	std	Z+5, r24	; 0x05
    4dba:	14 82       	std	Z+4, r1	; 0x04
    4dbc:	16 82       	std	Z+6, r1	; 0x06
    4dbe:	17 82       	std	Z+7, r1	; 0x07
    4dc0:	08 95       	ret

00004dc2 <_ZN8emstream4putsEPKc>:
    4dc2:	0f 93       	push	r16
    4dc4:	1f 93       	push	r17
    4dc6:	cf 93       	push	r28
    4dc8:	df 93       	push	r29
    4dca:	8c 01       	movw	r16, r24
    4dcc:	fb 01       	movw	r30, r22
    4dce:	dc 01       	movw	r26, r24
    4dd0:	14 96       	adiw	r26, 0x04	; 4
    4dd2:	8c 91       	ld	r24, X
    4dd4:	81 11       	cpse	r24, r1
    4dd6:	04 c0       	rjmp	.+8      	; 0x4de0 <_ZN8emstream4putsEPKc+0x1e>
    4dd8:	60 81       	ld	r22, Z
    4dda:	61 11       	cpse	r22, r1
    4ddc:	17 c0       	rjmp	.+46     	; 0x4e0c <_ZN8emstream4putsEPKc+0x4a>
    4dde:	23 c0       	rjmp	.+70     	; 0x4e26 <_ZN8emstream4putsEPKc+0x64>
    4de0:	d8 01       	movw	r26, r16
    4de2:	14 96       	adiw	r26, 0x04	; 4
    4de4:	1c 92       	st	X, r1
    4de6:	eb 01       	movw	r28, r22
    4de8:	21 96       	adiw	r28, 0x01	; 1
    4dea:	64 91       	lpm	r22, Z
    4dec:	66 23       	and	r22, r22
    4dee:	d9 f0       	breq	.+54     	; 0x4e26 <_ZN8emstream4putsEPKc+0x64>
    4df0:	d8 01       	movw	r26, r16
    4df2:	ed 91       	ld	r30, X+
    4df4:	fc 91       	ld	r31, X
    4df6:	02 80       	ldd	r0, Z+2	; 0x02
    4df8:	f3 81       	ldd	r31, Z+3	; 0x03
    4dfa:	e0 2d       	mov	r30, r0
    4dfc:	c8 01       	movw	r24, r16
    4dfe:	19 95       	eicall
    4e00:	fe 01       	movw	r30, r28
    4e02:	64 91       	lpm	r22, Z
    4e04:	21 96       	adiw	r28, 0x01	; 1
    4e06:	61 11       	cpse	r22, r1
    4e08:	f3 cf       	rjmp	.-26     	; 0x4df0 <_ZN8emstream4putsEPKc+0x2e>
    4e0a:	0d c0       	rjmp	.+26     	; 0x4e26 <_ZN8emstream4putsEPKc+0x64>
    4e0c:	ef 01       	movw	r28, r30
    4e0e:	21 96       	adiw	r28, 0x01	; 1
    4e10:	d8 01       	movw	r26, r16
    4e12:	ed 91       	ld	r30, X+
    4e14:	fc 91       	ld	r31, X
    4e16:	02 80       	ldd	r0, Z+2	; 0x02
    4e18:	f3 81       	ldd	r31, Z+3	; 0x03
    4e1a:	e0 2d       	mov	r30, r0
    4e1c:	c8 01       	movw	r24, r16
    4e1e:	19 95       	eicall
    4e20:	69 91       	ld	r22, Y+
    4e22:	61 11       	cpse	r22, r1
    4e24:	f5 cf       	rjmp	.-22     	; 0x4e10 <_ZN8emstream4putsEPKc+0x4e>
    4e26:	df 91       	pop	r29
    4e28:	cf 91       	pop	r28
    4e2a:	1f 91       	pop	r17
    4e2c:	0f 91       	pop	r16
    4e2e:	08 95       	ret

00004e30 <_ZN8emstreamlsE15ser_manipulator>:
    4e30:	cf 93       	push	r28
    4e32:	df 93       	push	r29
    4e34:	ec 01       	movw	r28, r24
    4e36:	86 2f       	mov	r24, r22
    4e38:	90 e0       	ldi	r25, 0x00	; 0
    4e3a:	8b 30       	cpi	r24, 0x0B	; 11
    4e3c:	91 05       	cpc	r25, r1
    4e3e:	d8 f5       	brcc	.+118    	; 0x4eb6 <_ZN8emstreamlsE15ser_manipulator+0x86>
    4e40:	fc 01       	movw	r30, r24
    4e42:	88 27       	eor	r24, r24
    4e44:	eb 53       	subi	r30, 0x3B	; 59
    4e46:	fe 4f       	sbci	r31, 0xFE	; 254
    4e48:	8f 4f       	sbci	r24, 0xFF	; 255
    4e4a:	0c 94 8f 2e 	jmp	0x5d1e	; 0x5d1e <__tablejump2__>
    4e4e:	82 e0       	ldi	r24, 0x02	; 2
    4e50:	8a 83       	std	Y+2, r24	; 0x02
    4e52:	31 c0       	rjmp	.+98     	; 0x4eb6 <_ZN8emstreamlsE15ser_manipulator+0x86>
    4e54:	88 e0       	ldi	r24, 0x08	; 8
    4e56:	8a 83       	std	Y+2, r24	; 0x02
    4e58:	2e c0       	rjmp	.+92     	; 0x4eb6 <_ZN8emstreamlsE15ser_manipulator+0x86>
    4e5a:	8a e0       	ldi	r24, 0x0A	; 10
    4e5c:	8a 83       	std	Y+2, r24	; 0x02
    4e5e:	2b c0       	rjmp	.+86     	; 0x4eb6 <_ZN8emstreamlsE15ser_manipulator+0x86>
    4e60:	80 e1       	ldi	r24, 0x10	; 16
    4e62:	8a 83       	std	Y+2, r24	; 0x02
    4e64:	28 c0       	rjmp	.+80     	; 0x4eb6 <_ZN8emstreamlsE15ser_manipulator+0x86>
    4e66:	81 e0       	ldi	r24, 0x01	; 1
    4e68:	8b 83       	std	Y+3, r24	; 0x03
    4e6a:	25 c0       	rjmp	.+74     	; 0x4eb6 <_ZN8emstreamlsE15ser_manipulator+0x86>
    4e6c:	1b 82       	std	Y+3, r1	; 0x03
    4e6e:	23 c0       	rjmp	.+70     	; 0x4eb6 <_ZN8emstreamlsE15ser_manipulator+0x86>
    4e70:	e8 81       	ld	r30, Y
    4e72:	f9 81       	ldd	r31, Y+1	; 0x01
    4e74:	02 80       	ldd	r0, Z+2	; 0x02
    4e76:	f3 81       	ldd	r31, Z+3	; 0x03
    4e78:	e0 2d       	mov	r30, r0
    4e7a:	6d e0       	ldi	r22, 0x0D	; 13
    4e7c:	ce 01       	movw	r24, r28
    4e7e:	19 95       	eicall
    4e80:	e8 81       	ld	r30, Y
    4e82:	f9 81       	ldd	r31, Y+1	; 0x01
    4e84:	02 80       	ldd	r0, Z+2	; 0x02
    4e86:	f3 81       	ldd	r31, Z+3	; 0x03
    4e88:	e0 2d       	mov	r30, r0
    4e8a:	6a e0       	ldi	r22, 0x0A	; 10
    4e8c:	ce 01       	movw	r24, r28
    4e8e:	19 95       	eicall
    4e90:	12 c0       	rjmp	.+36     	; 0x4eb6 <_ZN8emstreamlsE15ser_manipulator+0x86>
    4e92:	e8 81       	ld	r30, Y
    4e94:	f9 81       	ldd	r31, Y+1	; 0x01
    4e96:	02 84       	ldd	r0, Z+10	; 0x0a
    4e98:	f3 85       	ldd	r31, Z+11	; 0x0b
    4e9a:	e0 2d       	mov	r30, r0
    4e9c:	ce 01       	movw	r24, r28
    4e9e:	19 95       	eicall
    4ea0:	0a c0       	rjmp	.+20     	; 0x4eb6 <_ZN8emstreamlsE15ser_manipulator+0x86>
    4ea2:	e8 81       	ld	r30, Y
    4ea4:	f9 81       	ldd	r31, Y+1	; 0x01
    4ea6:	00 84       	ldd	r0, Z+8	; 0x08
    4ea8:	f1 85       	ldd	r31, Z+9	; 0x09
    4eaa:	e0 2d       	mov	r30, r0
    4eac:	ce 01       	movw	r24, r28
    4eae:	19 95       	eicall
    4eb0:	02 c0       	rjmp	.+4      	; 0x4eb6 <_ZN8emstreamlsE15ser_manipulator+0x86>
    4eb2:	81 e0       	ldi	r24, 0x01	; 1
    4eb4:	8c 83       	std	Y+4, r24	; 0x04
    4eb6:	ce 01       	movw	r24, r28
    4eb8:	df 91       	pop	r29
    4eba:	cf 91       	pop	r28
    4ebc:	08 95       	ret

00004ebe <_ZN8emstreamlsEf>:
    4ebe:	af 92       	push	r10
    4ec0:	bf 92       	push	r11
    4ec2:	cf 92       	push	r12
    4ec4:	df 92       	push	r13
    4ec6:	ef 92       	push	r14
    4ec8:	ff 92       	push	r15
    4eca:	0f 93       	push	r16
    4ecc:	1f 93       	push	r17
    4ece:	cf 93       	push	r28
    4ed0:	df 93       	push	r29
    4ed2:	cd b7       	in	r28, 0x3d	; 61
    4ed4:	de b7       	in	r29, 0x3e	; 62
    4ed6:	64 97       	sbiw	r28, 0x14	; 20
    4ed8:	cd bf       	out	0x3d, r28	; 61
    4eda:	de bf       	out	0x3e, r29	; 62
    4edc:	7c 01       	movw	r14, r24
    4ede:	cb 01       	movw	r24, r22
    4ee0:	ba 01       	movw	r22, r20
    4ee2:	d0 90 06 20 	lds	r13, 0x2006	; 0x802006 <bts_glob_prec>
    4ee6:	00 e1       	ldi	r16, 0x10	; 16
    4ee8:	2d 2d       	mov	r18, r13
    4eea:	ae 01       	movw	r20, r28
    4eec:	4f 5f       	subi	r20, 0xFF	; 255
    4eee:	5f 4f       	sbci	r21, 0xFF	; 255
    4ef0:	0e 94 b1 2e 	call	0x5d62	; 0x5d62 <__ftoa_engine>
    4ef4:	5c 01       	movw	r10, r24
    4ef6:	89 81       	ldd	r24, Y+1	; 0x01
    4ef8:	83 ff       	sbrs	r24, 3
    4efa:	06 c0       	rjmp	.+12     	; 0x4f08 <_ZN8emstreamlsEf+0x4a>
    4efc:	62 ec       	ldi	r22, 0xC2	; 194
    4efe:	70 e2       	ldi	r23, 0x20	; 32
    4f00:	c7 01       	movw	r24, r14
    4f02:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    4f06:	56 c0       	rjmp	.+172    	; 0x4fb4 <_ZN8emstreamlsEf+0xf6>
    4f08:	80 ff       	sbrs	r24, 0
    4f0a:	09 c0       	rjmp	.+18     	; 0x4f1e <_ZN8emstreamlsEf+0x60>
    4f0c:	d7 01       	movw	r26, r14
    4f0e:	ed 91       	ld	r30, X+
    4f10:	fc 91       	ld	r31, X
    4f12:	02 80       	ldd	r0, Z+2	; 0x02
    4f14:	f3 81       	ldd	r31, Z+3	; 0x03
    4f16:	e0 2d       	mov	r30, r0
    4f18:	6d e2       	ldi	r22, 0x2D	; 45
    4f1a:	c7 01       	movw	r24, r14
    4f1c:	19 95       	eicall
    4f1e:	d7 01       	movw	r26, r14
    4f20:	ed 91       	ld	r30, X+
    4f22:	fc 91       	ld	r31, X
    4f24:	02 80       	ldd	r0, Z+2	; 0x02
    4f26:	f3 81       	ldd	r31, Z+3	; 0x03
    4f28:	e0 2d       	mov	r30, r0
    4f2a:	6a 81       	ldd	r22, Y+2	; 0x02
    4f2c:	c7 01       	movw	r24, r14
    4f2e:	19 95       	eicall
    4f30:	dd 20       	and	r13, r13
    4f32:	49 f0       	breq	.+18     	; 0x4f46 <_ZN8emstreamlsEf+0x88>
    4f34:	d7 01       	movw	r26, r14
    4f36:	ed 91       	ld	r30, X+
    4f38:	fc 91       	ld	r31, X
    4f3a:	02 80       	ldd	r0, Z+2	; 0x02
    4f3c:	f3 81       	ldd	r31, Z+3	; 0x03
    4f3e:	e0 2d       	mov	r30, r0
    4f40:	6e e2       	ldi	r22, 0x2E	; 46
    4f42:	c7 01       	movw	r24, r14
    4f44:	19 95       	eicall
    4f46:	8e 01       	movw	r16, r28
    4f48:	0d 5f       	subi	r16, 0xFD	; 253
    4f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f4c:	ce 01       	movw	r24, r28
    4f4e:	8d 0d       	add	r24, r13
    4f50:	91 1d       	adc	r25, r1
    4f52:	fc 01       	movw	r30, r24
    4f54:	33 96       	adiw	r30, 0x03	; 3
    4f56:	6f 01       	movw	r12, r30
    4f58:	0c 15       	cp	r16, r12
    4f5a:	1d 05       	cpc	r17, r13
    4f5c:	99 f0       	breq	.+38     	; 0x4f84 <_ZN8emstreamlsEf+0xc6>
    4f5e:	d8 01       	movw	r26, r16
    4f60:	6c 91       	ld	r22, X
    4f62:	61 11       	cpse	r22, r1
    4f64:	1c c0       	rjmp	.+56     	; 0x4f9e <_ZN8emstreamlsEf+0xe0>
    4f66:	0e c0       	rjmp	.+28     	; 0x4f84 <_ZN8emstreamlsEf+0xc6>
    4f68:	d7 01       	movw	r26, r14
    4f6a:	ed 91       	ld	r30, X+
    4f6c:	fc 91       	ld	r31, X
    4f6e:	02 80       	ldd	r0, Z+2	; 0x02
    4f70:	f3 81       	ldd	r31, Z+3	; 0x03
    4f72:	e0 2d       	mov	r30, r0
    4f74:	6b e2       	ldi	r22, 0x2B	; 43
    4f76:	c7 01       	movw	r24, r14
    4f78:	19 95       	eicall
    4f7a:	b5 01       	movw	r22, r10
    4f7c:	c7 01       	movw	r24, r14
    4f7e:	0e 94 6d 28 	call	0x50da	; 0x50da <_ZN8emstreamlsEi>
    4f82:	18 c0       	rjmp	.+48     	; 0x4fb4 <_ZN8emstreamlsEf+0xf6>
    4f84:	d7 01       	movw	r26, r14
    4f86:	ed 91       	ld	r30, X+
    4f88:	fc 91       	ld	r31, X
    4f8a:	02 80       	ldd	r0, Z+2	; 0x02
    4f8c:	f3 81       	ldd	r31, Z+3	; 0x03
    4f8e:	e0 2d       	mov	r30, r0
    4f90:	65 e4       	ldi	r22, 0x45	; 69
    4f92:	c7 01       	movw	r24, r14
    4f94:	19 95       	eicall
    4f96:	1a 14       	cp	r1, r10
    4f98:	1b 04       	cpc	r1, r11
    4f9a:	34 f3       	brlt	.-52     	; 0x4f68 <_ZN8emstreamlsEf+0xaa>
    4f9c:	ee cf       	rjmp	.-36     	; 0x4f7a <_ZN8emstreamlsEf+0xbc>
    4f9e:	0f 5f       	subi	r16, 0xFF	; 255
    4fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    4fa2:	d7 01       	movw	r26, r14
    4fa4:	ed 91       	ld	r30, X+
    4fa6:	fc 91       	ld	r31, X
    4fa8:	02 80       	ldd	r0, Z+2	; 0x02
    4faa:	f3 81       	ldd	r31, Z+3	; 0x03
    4fac:	e0 2d       	mov	r30, r0
    4fae:	c7 01       	movw	r24, r14
    4fb0:	19 95       	eicall
    4fb2:	d2 cf       	rjmp	.-92     	; 0x4f58 <_ZN8emstreamlsEf+0x9a>
    4fb4:	c7 01       	movw	r24, r14
    4fb6:	64 96       	adiw	r28, 0x14	; 20
    4fb8:	cd bf       	out	0x3d, r28	; 61
    4fba:	de bf       	out	0x3e, r29	; 62
    4fbc:	df 91       	pop	r29
    4fbe:	cf 91       	pop	r28
    4fc0:	1f 91       	pop	r17
    4fc2:	0f 91       	pop	r16
    4fc4:	ff 90       	pop	r15
    4fc6:	ef 90       	pop	r14
    4fc8:	df 90       	pop	r13
    4fca:	cf 90       	pop	r12
    4fcc:	bf 90       	pop	r11
    4fce:	af 90       	pop	r10
    4fd0:	08 95       	ret

00004fd2 <_ZN8emstreamlsEd>:
    4fd2:	af 92       	push	r10
    4fd4:	bf 92       	push	r11
    4fd6:	cf 92       	push	r12
    4fd8:	df 92       	push	r13
    4fda:	ef 92       	push	r14
    4fdc:	ff 92       	push	r15
    4fde:	0f 93       	push	r16
    4fe0:	1f 93       	push	r17
    4fe2:	cf 93       	push	r28
    4fe4:	df 93       	push	r29
    4fe6:	cd b7       	in	r28, 0x3d	; 61
    4fe8:	de b7       	in	r29, 0x3e	; 62
    4fea:	64 97       	sbiw	r28, 0x14	; 20
    4fec:	cd bf       	out	0x3d, r28	; 61
    4fee:	de bf       	out	0x3e, r29	; 62
    4ff0:	7c 01       	movw	r14, r24
    4ff2:	cb 01       	movw	r24, r22
    4ff4:	ba 01       	movw	r22, r20
    4ff6:	10 91 06 20 	lds	r17, 0x2006	; 0x802006 <bts_glob_prec>
    4ffa:	00 e1       	ldi	r16, 0x10	; 16
    4ffc:	21 2f       	mov	r18, r17
    4ffe:	ae 01       	movw	r20, r28
    5000:	4f 5f       	subi	r20, 0xFF	; 255
    5002:	5f 4f       	sbci	r21, 0xFF	; 255
    5004:	0e 94 b1 2e 	call	0x5d62	; 0x5d62 <__ftoa_engine>
    5008:	5c 01       	movw	r10, r24
    500a:	89 81       	ldd	r24, Y+1	; 0x01
    500c:	83 ff       	sbrs	r24, 3
    500e:	06 c0       	rjmp	.+12     	; 0x501c <_ZN8emstreamlsEd+0x4a>
    5010:	60 ec       	ldi	r22, 0xC0	; 192
    5012:	70 e2       	ldi	r23, 0x20	; 32
    5014:	c7 01       	movw	r24, r14
    5016:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    501a:	50 c0       	rjmp	.+160    	; 0x50bc <_ZN8emstreamlsEd+0xea>
    501c:	80 ff       	sbrs	r24, 0
    501e:	09 c0       	rjmp	.+18     	; 0x5032 <_ZN8emstreamlsEd+0x60>
    5020:	d7 01       	movw	r26, r14
    5022:	ed 91       	ld	r30, X+
    5024:	fc 91       	ld	r31, X
    5026:	02 80       	ldd	r0, Z+2	; 0x02
    5028:	f3 81       	ldd	r31, Z+3	; 0x03
    502a:	e0 2d       	mov	r30, r0
    502c:	6d e2       	ldi	r22, 0x2D	; 45
    502e:	c7 01       	movw	r24, r14
    5030:	19 95       	eicall
    5032:	d7 01       	movw	r26, r14
    5034:	ed 91       	ld	r30, X+
    5036:	fc 91       	ld	r31, X
    5038:	02 80       	ldd	r0, Z+2	; 0x02
    503a:	f3 81       	ldd	r31, Z+3	; 0x03
    503c:	e0 2d       	mov	r30, r0
    503e:	6a 81       	ldd	r22, Y+2	; 0x02
    5040:	c7 01       	movw	r24, r14
    5042:	19 95       	eicall
    5044:	11 23       	and	r17, r17
    5046:	49 f0       	breq	.+18     	; 0x505a <_ZN8emstreamlsEd+0x88>
    5048:	d7 01       	movw	r26, r14
    504a:	ed 91       	ld	r30, X+
    504c:	fc 91       	ld	r31, X
    504e:	02 80       	ldd	r0, Z+2	; 0x02
    5050:	f3 81       	ldd	r31, Z+3	; 0x03
    5052:	e0 2d       	mov	r30, r0
    5054:	6e e2       	ldi	r22, 0x2E	; 46
    5056:	c7 01       	movw	r24, r14
    5058:	19 95       	eicall
    505a:	6e 01       	movw	r12, r28
    505c:	b3 e0       	ldi	r27, 0x03	; 3
    505e:	cb 0e       	add	r12, r27
    5060:	d1 1c       	adc	r13, r1
    5062:	f6 01       	movw	r30, r12
    5064:	61 91       	ld	r22, Z+
    5066:	6f 01       	movw	r12, r30
    5068:	d7 01       	movw	r26, r14
    506a:	ed 91       	ld	r30, X+
    506c:	fc 91       	ld	r31, X
    506e:	02 80       	ldd	r0, Z+2	; 0x02
    5070:	f3 81       	ldd	r31, Z+3	; 0x03
    5072:	e0 2d       	mov	r30, r0
    5074:	c7 01       	movw	r24, r14
    5076:	19 95       	eicall
    5078:	11 50       	subi	r17, 0x01	; 1
    507a:	99 f0       	breq	.+38     	; 0x50a2 <_ZN8emstreamlsEd+0xd0>
    507c:	f6 01       	movw	r30, r12
    507e:	80 81       	ld	r24, Z
    5080:	81 11       	cpse	r24, r1
    5082:	ef cf       	rjmp	.-34     	; 0x5062 <_ZN8emstreamlsEd+0x90>
    5084:	0e c0       	rjmp	.+28     	; 0x50a2 <_ZN8emstreamlsEd+0xd0>
    5086:	d7 01       	movw	r26, r14
    5088:	ed 91       	ld	r30, X+
    508a:	fc 91       	ld	r31, X
    508c:	02 80       	ldd	r0, Z+2	; 0x02
    508e:	f3 81       	ldd	r31, Z+3	; 0x03
    5090:	e0 2d       	mov	r30, r0
    5092:	6b e2       	ldi	r22, 0x2B	; 43
    5094:	c7 01       	movw	r24, r14
    5096:	19 95       	eicall
    5098:	b5 01       	movw	r22, r10
    509a:	c7 01       	movw	r24, r14
    509c:	0e 94 6d 28 	call	0x50da	; 0x50da <_ZN8emstreamlsEi>
    50a0:	0d c0       	rjmp	.+26     	; 0x50bc <_ZN8emstreamlsEd+0xea>
    50a2:	d7 01       	movw	r26, r14
    50a4:	ed 91       	ld	r30, X+
    50a6:	fc 91       	ld	r31, X
    50a8:	02 80       	ldd	r0, Z+2	; 0x02
    50aa:	f3 81       	ldd	r31, Z+3	; 0x03
    50ac:	e0 2d       	mov	r30, r0
    50ae:	65 e6       	ldi	r22, 0x65	; 101
    50b0:	c7 01       	movw	r24, r14
    50b2:	19 95       	eicall
    50b4:	1a 14       	cp	r1, r10
    50b6:	1b 04       	cpc	r1, r11
    50b8:	34 f3       	brlt	.-52     	; 0x5086 <_ZN8emstreamlsEd+0xb4>
    50ba:	ee cf       	rjmp	.-36     	; 0x5098 <_ZN8emstreamlsEd+0xc6>
    50bc:	c7 01       	movw	r24, r14
    50be:	64 96       	adiw	r28, 0x14	; 20
    50c0:	cd bf       	out	0x3d, r28	; 61
    50c2:	de bf       	out	0x3e, r29	; 62
    50c4:	df 91       	pop	r29
    50c6:	cf 91       	pop	r28
    50c8:	1f 91       	pop	r17
    50ca:	0f 91       	pop	r16
    50cc:	ff 90       	pop	r15
    50ce:	ef 90       	pop	r14
    50d0:	df 90       	pop	r13
    50d2:	cf 90       	pop	r12
    50d4:	bf 90       	pop	r11
    50d6:	af 90       	pop	r10
    50d8:	08 95       	ret

000050da <_ZN8emstreamlsEi>:
    50da:	0f 93       	push	r16
    50dc:	1f 93       	push	r17
    50de:	cf 93       	push	r28
    50e0:	df 93       	push	r29
    50e2:	cd b7       	in	r28, 0x3d	; 61
    50e4:	de b7       	in	r29, 0x3e	; 62
    50e6:	61 97       	sbiw	r28, 0x11	; 17
    50e8:	cd bf       	out	0x3d, r28	; 61
    50ea:	de bf       	out	0x3e, r29	; 62
    50ec:	8c 01       	movw	r16, r24
    50ee:	9b 01       	movw	r18, r22
    50f0:	fc 01       	movw	r30, r24
    50f2:	92 81       	ldd	r25, Z+2	; 0x02
    50f4:	9a 30       	cpi	r25, 0x0A	; 10
    50f6:	21 f0       	breq	.+8      	; 0x5100 <_ZN8emstreamlsEi+0x26>
    50f8:	c8 01       	movw	r24, r16
    50fa:	0e 94 96 28 	call	0x512c	; 0x512c <_ZN8emstreamlsEj>
    50fe:	0d c0       	rjmp	.+26     	; 0x511a <_ZN8emstreamlsEi+0x40>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    5100:	4a e0       	ldi	r20, 0x0A	; 10
    5102:	be 01       	movw	r22, r28
    5104:	6f 5f       	subi	r22, 0xFF	; 255
    5106:	7f 4f       	sbci	r23, 0xFF	; 255
    5108:	c9 01       	movw	r24, r18
    510a:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <__itoa_ncheck>
    510e:	be 01       	movw	r22, r28
    5110:	6f 5f       	subi	r22, 0xFF	; 255
    5112:	7f 4f       	sbci	r23, 0xFF	; 255
    5114:	c8 01       	movw	r24, r16
    5116:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    511a:	c8 01       	movw	r24, r16
    511c:	61 96       	adiw	r28, 0x11	; 17
    511e:	cd bf       	out	0x3d, r28	; 61
    5120:	de bf       	out	0x3e, r29	; 62
    5122:	df 91       	pop	r29
    5124:	cf 91       	pop	r28
    5126:	1f 91       	pop	r17
    5128:	0f 91       	pop	r16
    512a:	08 95       	ret

0000512c <_ZN8emstreamlsEj>:
    512c:	ff 92       	push	r15
    512e:	0f 93       	push	r16
    5130:	1f 93       	push	r17
    5132:	cf 93       	push	r28
    5134:	df 93       	push	r29
    5136:	cd b7       	in	r28, 0x3d	; 61
    5138:	de b7       	in	r29, 0x3e	; 62
    513a:	61 97       	sbiw	r28, 0x11	; 17
    513c:	cd bf       	out	0x3d, r28	; 61
    513e:	de bf       	out	0x3e, r29	; 62
    5140:	8c 01       	movw	r16, r24
    5142:	f6 2e       	mov	r15, r22
    5144:	97 2f       	mov	r25, r23
    5146:	f8 01       	movw	r30, r16
    5148:	42 81       	ldd	r20, Z+2	; 0x02
    514a:	40 31       	cpi	r20, 0x10	; 16
    514c:	21 f0       	breq	.+8      	; 0x5156 <_ZN8emstreamlsEj+0x2a>
    514e:	48 30       	cpi	r20, 0x08	; 8
    5150:	11 f0       	breq	.+4      	; 0x5156 <_ZN8emstreamlsEj+0x2a>
    5152:	42 30       	cpi	r20, 0x02	; 2
    5154:	41 f4       	brne	.+16     	; 0x5166 <_ZN8emstreamlsEj+0x3a>
    5156:	69 2f       	mov	r22, r25
    5158:	c8 01       	movw	r24, r16
    515a:	0e 94 0c 29 	call	0x5218	; 0x5218 <_ZN8emstreamlsEh>
    515e:	6f 2d       	mov	r22, r15
    5160:	0e 94 0c 29 	call	0x5218	; 0x5218 <_ZN8emstreamlsEh>
    5164:	0d c0       	rjmp	.+26     	; 0x5180 <_ZN8emstreamlsEj+0x54>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    5166:	50 e0       	ldi	r21, 0x00	; 0
    5168:	be 01       	movw	r22, r28
    516a:	6f 5f       	subi	r22, 0xFF	; 255
    516c:	7f 4f       	sbci	r23, 0xFF	; 255
    516e:	8f 2d       	mov	r24, r15
    5170:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <utoa>
    5174:	be 01       	movw	r22, r28
    5176:	6f 5f       	subi	r22, 0xFF	; 255
    5178:	7f 4f       	sbci	r23, 0xFF	; 255
    517a:	c8 01       	movw	r24, r16
    517c:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    5180:	c8 01       	movw	r24, r16
    5182:	61 96       	adiw	r28, 0x11	; 17
    5184:	cd bf       	out	0x3d, r28	; 61
    5186:	de bf       	out	0x3e, r29	; 62
    5188:	df 91       	pop	r29
    518a:	cf 91       	pop	r28
    518c:	1f 91       	pop	r17
    518e:	0f 91       	pop	r16
    5190:	ff 90       	pop	r15
    5192:	08 95       	ret

00005194 <_ZN8emstreamlsEm>:
    5194:	df 92       	push	r13
    5196:	ef 92       	push	r14
    5198:	ff 92       	push	r15
    519a:	0f 93       	push	r16
    519c:	1f 93       	push	r17
    519e:	cf 93       	push	r28
    51a0:	df 93       	push	r29
    51a2:	cd b7       	in	r28, 0x3d	; 61
    51a4:	de b7       	in	r29, 0x3e	; 62
    51a6:	a1 97       	sbiw	r28, 0x21	; 33
    51a8:	cd bf       	out	0x3d, r28	; 61
    51aa:	de bf       	out	0x3e, r29	; 62
    51ac:	8c 01       	movw	r16, r24
    51ae:	d4 2e       	mov	r13, r20
    51b0:	e5 2e       	mov	r14, r21
    51b2:	f6 2e       	mov	r15, r22
    51b4:	97 2f       	mov	r25, r23
    51b6:	f8 01       	movw	r30, r16
    51b8:	22 81       	ldd	r18, Z+2	; 0x02
    51ba:	20 31       	cpi	r18, 0x10	; 16
    51bc:	21 f0       	breq	.+8      	; 0x51c6 <_ZN8emstreamlsEm+0x32>
    51be:	28 30       	cpi	r18, 0x08	; 8
    51c0:	11 f0       	breq	.+4      	; 0x51c6 <_ZN8emstreamlsEm+0x32>
    51c2:	22 30       	cpi	r18, 0x02	; 2
    51c4:	71 f4       	brne	.+28     	; 0x51e2 <_ZN8emstreamlsEm+0x4e>
    51c6:	69 2f       	mov	r22, r25
    51c8:	c8 01       	movw	r24, r16
    51ca:	0e 94 0c 29 	call	0x5218	; 0x5218 <_ZN8emstreamlsEh>
    51ce:	6f 2d       	mov	r22, r15
    51d0:	0e 94 0c 29 	call	0x5218	; 0x5218 <_ZN8emstreamlsEh>
    51d4:	6e 2d       	mov	r22, r14
    51d6:	0e 94 0c 29 	call	0x5218	; 0x5218 <_ZN8emstreamlsEh>
    51da:	6d 2d       	mov	r22, r13
    51dc:	0e 94 0c 29 	call	0x5218	; 0x5218 <_ZN8emstreamlsEh>
    51e0:	0f c0       	rjmp	.+30     	; 0x5200 <_ZN8emstreamlsEm+0x6c>
extern __inline__ __ATTR_GNU_INLINE__
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ultoa (unsigned long, char *, int);
	return __ultoa (__val, __s, __radix);
    51e2:	30 e0       	ldi	r19, 0x00	; 0
    51e4:	ae 01       	movw	r20, r28
    51e6:	4f 5f       	subi	r20, 0xFF	; 255
    51e8:	5f 4f       	sbci	r21, 0xFF	; 255
    51ea:	6d 2d       	mov	r22, r13
    51ec:	7e 2d       	mov	r23, r14
    51ee:	8f 2d       	mov	r24, r15
    51f0:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <ultoa>
    51f4:	be 01       	movw	r22, r28
    51f6:	6f 5f       	subi	r22, 0xFF	; 255
    51f8:	7f 4f       	sbci	r23, 0xFF	; 255
    51fa:	c8 01       	movw	r24, r16
    51fc:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    5200:	c8 01       	movw	r24, r16
    5202:	a1 96       	adiw	r28, 0x21	; 33
    5204:	cd bf       	out	0x3d, r28	; 61
    5206:	de bf       	out	0x3e, r29	; 62
    5208:	df 91       	pop	r29
    520a:	cf 91       	pop	r28
    520c:	1f 91       	pop	r17
    520e:	0f 91       	pop	r16
    5210:	ff 90       	pop	r15
    5212:	ef 90       	pop	r14
    5214:	df 90       	pop	r13
    5216:	08 95       	ret

00005218 <_ZN8emstreamlsEh>:
    5218:	cf 92       	push	r12
    521a:	df 92       	push	r13
    521c:	ef 92       	push	r14
    521e:	ff 92       	push	r15
    5220:	0f 93       	push	r16
    5222:	1f 93       	push	r17
    5224:	cf 93       	push	r28
    5226:	df 93       	push	r29
    5228:	cd b7       	in	r28, 0x3d	; 61
    522a:	de b7       	in	r29, 0x3e	; 62
    522c:	29 97       	sbiw	r28, 0x09	; 9
    522e:	cd bf       	out	0x3d, r28	; 61
    5230:	de bf       	out	0x3e, r29	; 62
    5232:	8c 01       	movw	r16, r24
    5234:	e6 2e       	mov	r14, r22
    5236:	dc 01       	movw	r26, r24
    5238:	13 96       	adiw	r26, 0x03	; 3
    523a:	8c 91       	ld	r24, X
    523c:	13 97       	sbiw	r26, 0x03	; 3
    523e:	88 23       	and	r24, r24
    5240:	41 f0       	breq	.+16     	; 0x5252 <_ZN8emstreamlsEh+0x3a>
    5242:	ed 91       	ld	r30, X+
    5244:	fc 91       	ld	r31, X
    5246:	02 80       	ldd	r0, Z+2	; 0x02
    5248:	f3 81       	ldd	r31, Z+3	; 0x03
    524a:	e0 2d       	mov	r30, r0
    524c:	c8 01       	movw	r24, r16
    524e:	19 95       	eicall
    5250:	56 c0       	rjmp	.+172    	; 0x52fe <_ZN8emstreamlsEh+0xe6>
    5252:	f8 01       	movw	r30, r16
    5254:	42 81       	ldd	r20, Z+2	; 0x02
    5256:	42 30       	cpi	r20, 0x02	; 2
    5258:	19 f5       	brne	.+70     	; 0x52a0 <_ZN8emstreamlsEh+0x88>
    525a:	68 94       	set
    525c:	cc 24       	eor	r12, r12
    525e:	c3 f8       	bld	r12, 3
    5260:	d1 2c       	mov	r13, r1
    5262:	68 94       	set
    5264:	ff 24       	eor	r15, r15
    5266:	f7 f8       	bld	r15, 7
    5268:	8e 2d       	mov	r24, r14
    526a:	8f 21       	and	r24, r15
    526c:	51 f0       	breq	.+20     	; 0x5282 <_ZN8emstreamlsEh+0x6a>
    526e:	d8 01       	movw	r26, r16
    5270:	ed 91       	ld	r30, X+
    5272:	fc 91       	ld	r31, X
    5274:	02 80       	ldd	r0, Z+2	; 0x02
    5276:	f3 81       	ldd	r31, Z+3	; 0x03
    5278:	e0 2d       	mov	r30, r0
    527a:	61 e3       	ldi	r22, 0x31	; 49
    527c:	c8 01       	movw	r24, r16
    527e:	19 95       	eicall
    5280:	09 c0       	rjmp	.+18     	; 0x5294 <_ZN8emstreamlsEh+0x7c>
    5282:	d8 01       	movw	r26, r16
    5284:	ed 91       	ld	r30, X+
    5286:	fc 91       	ld	r31, X
    5288:	02 80       	ldd	r0, Z+2	; 0x02
    528a:	f3 81       	ldd	r31, Z+3	; 0x03
    528c:	e0 2d       	mov	r30, r0
    528e:	60 e3       	ldi	r22, 0x30	; 48
    5290:	c8 01       	movw	r24, r16
    5292:	19 95       	eicall
    5294:	f6 94       	lsr	r15
    5296:	b1 e0       	ldi	r27, 0x01	; 1
    5298:	cb 1a       	sub	r12, r27
    529a:	d1 08       	sbc	r13, r1
    529c:	29 f7       	brne	.-54     	; 0x5268 <_ZN8emstreamlsEh+0x50>
    529e:	2f c0       	rjmp	.+94     	; 0x52fe <_ZN8emstreamlsEh+0xe6>
    52a0:	40 31       	cpi	r20, 0x10	; 16
    52a2:	f9 f4       	brne	.+62     	; 0x52e2 <_ZN8emstreamlsEh+0xca>
    52a4:	62 95       	swap	r22
    52a6:	6f 70       	andi	r22, 0x0F	; 15
    52a8:	01 90       	ld	r0, Z+
    52aa:	f0 81       	ld	r31, Z
    52ac:	e0 2d       	mov	r30, r0
    52ae:	02 80       	ldd	r0, Z+2	; 0x02
    52b0:	f3 81       	ldd	r31, Z+3	; 0x03
    52b2:	e0 2d       	mov	r30, r0
    52b4:	6a 30       	cpi	r22, 0x0A	; 10
    52b6:	10 f0       	brcs	.+4      	; 0x52bc <_ZN8emstreamlsEh+0xa4>
    52b8:	69 5c       	subi	r22, 0xC9	; 201
    52ba:	01 c0       	rjmp	.+2      	; 0x52be <_ZN8emstreamlsEh+0xa6>
    52bc:	60 5d       	subi	r22, 0xD0	; 208
    52be:	c8 01       	movw	r24, r16
    52c0:	19 95       	eicall
    52c2:	6e 2d       	mov	r22, r14
    52c4:	6f 70       	andi	r22, 0x0F	; 15
    52c6:	d8 01       	movw	r26, r16
    52c8:	ed 91       	ld	r30, X+
    52ca:	fc 91       	ld	r31, X
    52cc:	02 80       	ldd	r0, Z+2	; 0x02
    52ce:	f3 81       	ldd	r31, Z+3	; 0x03
    52d0:	e0 2d       	mov	r30, r0
    52d2:	6a 30       	cpi	r22, 0x0A	; 10
    52d4:	10 f0       	brcs	.+4      	; 0x52da <_ZN8emstreamlsEh+0xc2>
    52d6:	69 5c       	subi	r22, 0xC9	; 201
    52d8:	01 c0       	rjmp	.+2      	; 0x52dc <_ZN8emstreamlsEh+0xc4>
    52da:	60 5d       	subi	r22, 0xD0	; 208
    52dc:	c8 01       	movw	r24, r16
    52de:	19 95       	eicall
    52e0:	0e c0       	rjmp	.+28     	; 0x52fe <_ZN8emstreamlsEh+0xe6>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    52e2:	50 e0       	ldi	r21, 0x00	; 0
    52e4:	be 01       	movw	r22, r28
    52e6:	6f 5f       	subi	r22, 0xFF	; 255
    52e8:	7f 4f       	sbci	r23, 0xFF	; 255
    52ea:	8e 2d       	mov	r24, r14
    52ec:	90 e0       	ldi	r25, 0x00	; 0
    52ee:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <utoa>
    52f2:	be 01       	movw	r22, r28
    52f4:	6f 5f       	subi	r22, 0xFF	; 255
    52f6:	7f 4f       	sbci	r23, 0xFF	; 255
    52f8:	c8 01       	movw	r24, r16
    52fa:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <_ZN8emstream4putsEPKc>
    52fe:	c8 01       	movw	r24, r16
    5300:	29 96       	adiw	r28, 0x09	; 9
    5302:	cd bf       	out	0x3d, r28	; 61
    5304:	de bf       	out	0x3e, r29	; 62
    5306:	df 91       	pop	r29
    5308:	cf 91       	pop	r28
    530a:	1f 91       	pop	r17
    530c:	0f 91       	pop	r16
    530e:	ff 90       	pop	r15
    5310:	ef 90       	pop	r14
    5312:	df 90       	pop	r13
    5314:	cf 90       	pop	r12
    5316:	08 95       	ret

00005318 <_ZN5rs2327putcharEc>:
    5318:	dc 01       	movw	r26, r24
    531a:	50 96       	adiw	r26, 0x10	; 16
    531c:	ed 91       	ld	r30, X+
    531e:	fc 91       	ld	r31, X
    5320:	51 97       	sbiw	r26, 0x11	; 17
    5322:	80 81       	ld	r24, Z
    5324:	54 96       	adiw	r26, 0x14	; 20
    5326:	4c 91       	ld	r20, X
    5328:	54 97       	sbiw	r26, 0x14	; 20
    532a:	84 23       	and	r24, r20
    532c:	29 f0       	breq	.+10     	; 0x5338 <_ZN5rs2327putcharEc+0x20>
    532e:	09 c0       	rjmp	.+18     	; 0x5342 <_ZN5rs2327putcharEc+0x2a>
    5330:	21 50       	subi	r18, 0x01	; 1
    5332:	31 09       	sbc	r19, r1
    5334:	19 f4       	brne	.+6      	; 0x533c <_ZN5rs2327putcharEc+0x24>
    5336:	12 c0       	rjmp	.+36     	; 0x535c <_ZN5rs2327putcharEc+0x44>
    5338:	21 e2       	ldi	r18, 0x21	; 33
    533a:	3e e4       	ldi	r19, 0x4E	; 78
    533c:	90 81       	ld	r25, Z
    533e:	94 23       	and	r25, r20
    5340:	b9 f3       	breq	.-18     	; 0x5330 <_ZN5rs2327putcharEc+0x18>
    5342:	90 81       	ld	r25, Z
    5344:	56 96       	adiw	r26, 0x16	; 22
    5346:	8c 91       	ld	r24, X
    5348:	56 97       	sbiw	r26, 0x16	; 22
    534a:	89 2b       	or	r24, r25
    534c:	80 83       	st	Z, r24
    534e:	1e 96       	adiw	r26, 0x0e	; 14
    5350:	ed 91       	ld	r30, X+
    5352:	fc 91       	ld	r31, X
    5354:	1f 97       	sbiw	r26, 0x0f	; 15
    5356:	60 83       	st	Z, r22
    5358:	81 e0       	ldi	r24, 0x01	; 1
    535a:	08 95       	ret
    535c:	80 e0       	ldi	r24, 0x00	; 0
    535e:	08 95       	ret

00005360 <_ZN5rs2327getcharEv>:
    5360:	cf 93       	push	r28
    5362:	df 93       	push	r29
    5364:	fc 01       	movw	r30, r24
    5366:	c1 8d       	ldd	r28, Z+25	; 0x19
    5368:	d2 8d       	ldd	r29, Z+26	; 0x1a
    536a:	28 81       	ld	r18, Y
    536c:	39 81       	ldd	r19, Y+1	; 0x01
    536e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    5370:	b4 8d       	ldd	r27, Z+28	; 0x1c
    5372:	4d 91       	ld	r20, X+
    5374:	5c 91       	ld	r21, X
    5376:	24 17       	cp	r18, r20
    5378:	35 07       	cpc	r19, r21
    537a:	e9 f3       	breq	.-6      	; 0x5376 <_ZN5rs2327getcharEv+0x16>
    537c:	a7 89       	ldd	r26, Z+23	; 0x17
    537e:	b0 8d       	ldd	r27, Z+24	; 0x18
    5380:	0d 90       	ld	r0, X+
    5382:	bc 91       	ld	r27, X
    5384:	a0 2d       	mov	r26, r0
    5386:	a2 0f       	add	r26, r18
    5388:	b3 1f       	adc	r27, r19
    538a:	8c 91       	ld	r24, X
    538c:	2f 5f       	subi	r18, 0xFF	; 255
    538e:	3f 4f       	sbci	r19, 0xFF	; 255
    5390:	28 83       	st	Y, r18
    5392:	39 83       	std	Y+1, r19	; 0x01
    5394:	24 36       	cpi	r18, 0x64	; 100
    5396:	31 05       	cpc	r19, r1
    5398:	28 f0       	brcs	.+10     	; 0x53a4 <_ZN5rs2327getcharEv+0x44>
    539a:	01 8c       	ldd	r0, Z+25	; 0x19
    539c:	f2 8d       	ldd	r31, Z+26	; 0x1a
    539e:	e0 2d       	mov	r30, r0
    53a0:	10 82       	st	Z, r1
    53a2:	11 82       	std	Z+1, r1	; 0x01
    53a4:	90 e0       	ldi	r25, 0x00	; 0
    53a6:	df 91       	pop	r29
    53a8:	cf 91       	pop	r28
    53aa:	08 95       	ret

000053ac <_ZN5rs23214check_for_charEv>:
    53ac:	cf 93       	push	r28
    53ae:	df 93       	push	r29
    53b0:	ec 01       	movw	r28, r24
    53b2:	a9 8d       	ldd	r26, Y+25	; 0x19
    53b4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    53b6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    53b8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    53ba:	81 e0       	ldi	r24, 0x01	; 1
    53bc:	4d 91       	ld	r20, X+
    53be:	5c 91       	ld	r21, X
    53c0:	20 81       	ld	r18, Z
    53c2:	31 81       	ldd	r19, Z+1	; 0x01
    53c4:	42 17       	cp	r20, r18
    53c6:	53 07       	cpc	r21, r19
    53c8:	09 f4       	brne	.+2      	; 0x53cc <_ZN5rs23214check_for_charEv+0x20>
    53ca:	80 e0       	ldi	r24, 0x00	; 0
    53cc:	df 91       	pop	r29
    53ce:	cf 91       	pop	r28
    53d0:	08 95       	ret

000053d2 <_ZN5rs23212clear_screenEv>:
    53d2:	dc 01       	movw	r26, r24
    53d4:	ed 91       	ld	r30, X+
    53d6:	fc 91       	ld	r31, X
    53d8:	02 80       	ldd	r0, Z+2	; 0x02
    53da:	f3 81       	ldd	r31, Z+3	; 0x03
    53dc:	e0 2d       	mov	r30, r0
    53de:	6c e0       	ldi	r22, 0x0C	; 12
    53e0:	19 95       	eicall
    53e2:	08 95       	ret

000053e4 <_ZN5rs232C1EjP12USART_struct>:
    53e4:	ef 92       	push	r14
    53e6:	ff 92       	push	r15
    53e8:	0f 93       	push	r16
    53ea:	1f 93       	push	r17
    53ec:	cf 93       	push	r28
    53ee:	df 93       	push	r29
    53f0:	ec 01       	movw	r28, r24
    53f2:	7b 01       	movw	r14, r22
    53f4:	8a 01       	movw	r16, r20
    53f6:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN8emstreamC1Ev>
    53fa:	a8 01       	movw	r20, r16
    53fc:	b7 01       	movw	r22, r14
    53fe:	ce 01       	movw	r24, r28
    5400:	08 96       	adiw	r24, 0x08	; 8
    5402:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <_ZN7base232C1EjP12USART_struct>
    5406:	8a ec       	ldi	r24, 0xCA	; 202
    5408:	90 e2       	ldi	r25, 0x20	; 32
    540a:	88 83       	st	Y, r24
    540c:	99 83       	std	Y+1, r25	; 0x01
    540e:	00 3a       	cpi	r16, 0xA0	; 160
    5410:	88 e0       	ldi	r24, 0x08	; 8
    5412:	18 07       	cpc	r17, r24
    5414:	69 f4       	brne	.+26     	; 0x5430 <_ZN5rs232C1EjP12USART_struct+0x4c>
    5416:	8f ee       	ldi	r24, 0xEF	; 239
    5418:	91 e4       	ldi	r25, 0x41	; 65
    541a:	8f 8b       	std	Y+23, r24	; 0x17
    541c:	98 8f       	std	Y+24, r25	; 0x18
    541e:	83 ee       	ldi	r24, 0xE3	; 227
    5420:	91 e4       	ldi	r25, 0x41	; 65
    5422:	89 8f       	std	Y+25, r24	; 0x19
    5424:	9a 8f       	std	Y+26, r25	; 0x1a
    5426:	87 ed       	ldi	r24, 0xD7	; 215
    5428:	91 e4       	ldi	r25, 0x41	; 65
    542a:	8b 8f       	std	Y+27, r24	; 0x1b
    542c:	9c 8f       	std	Y+28, r25	; 0x1c
    542e:	53 c0       	rjmp	.+166    	; 0x54d6 <_ZN5rs232C1EjP12USART_struct+0xf2>
    5430:	00 3b       	cpi	r16, 0xB0	; 176
    5432:	e8 e0       	ldi	r30, 0x08	; 8
    5434:	1e 07       	cpc	r17, r30
    5436:	69 f4       	brne	.+26     	; 0x5452 <_ZN5rs232C1EjP12USART_struct+0x6e>
    5438:	8d ee       	ldi	r24, 0xED	; 237
    543a:	91 e4       	ldi	r25, 0x41	; 65
    543c:	8f 8b       	std	Y+23, r24	; 0x17
    543e:	98 8f       	std	Y+24, r25	; 0x18
    5440:	81 ee       	ldi	r24, 0xE1	; 225
    5442:	91 e4       	ldi	r25, 0x41	; 65
    5444:	89 8f       	std	Y+25, r24	; 0x19
    5446:	9a 8f       	std	Y+26, r25	; 0x1a
    5448:	85 ed       	ldi	r24, 0xD5	; 213
    544a:	91 e4       	ldi	r25, 0x41	; 65
    544c:	8b 8f       	std	Y+27, r24	; 0x1b
    544e:	9c 8f       	std	Y+28, r25	; 0x1c
    5450:	42 c0       	rjmp	.+132    	; 0x54d6 <_ZN5rs232C1EjP12USART_struct+0xf2>
    5452:	00 3a       	cpi	r16, 0xA0	; 160
    5454:	f9 e0       	ldi	r31, 0x09	; 9
    5456:	1f 07       	cpc	r17, r31
    5458:	69 f4       	brne	.+26     	; 0x5474 <_ZN5rs232C1EjP12USART_struct+0x90>
    545a:	8b ee       	ldi	r24, 0xEB	; 235
    545c:	91 e4       	ldi	r25, 0x41	; 65
    545e:	8f 8b       	std	Y+23, r24	; 0x17
    5460:	98 8f       	std	Y+24, r25	; 0x18
    5462:	8f ed       	ldi	r24, 0xDF	; 223
    5464:	91 e4       	ldi	r25, 0x41	; 65
    5466:	89 8f       	std	Y+25, r24	; 0x19
    5468:	9a 8f       	std	Y+26, r25	; 0x1a
    546a:	83 ed       	ldi	r24, 0xD3	; 211
    546c:	91 e4       	ldi	r25, 0x41	; 65
    546e:	8b 8f       	std	Y+27, r24	; 0x1b
    5470:	9c 8f       	std	Y+28, r25	; 0x1c
    5472:	31 c0       	rjmp	.+98     	; 0x54d6 <_ZN5rs232C1EjP12USART_struct+0xf2>
    5474:	00 3b       	cpi	r16, 0xB0	; 176
    5476:	89 e0       	ldi	r24, 0x09	; 9
    5478:	18 07       	cpc	r17, r24
    547a:	69 f4       	brne	.+26     	; 0x5496 <_ZN5rs232C1EjP12USART_struct+0xb2>
    547c:	89 ee       	ldi	r24, 0xE9	; 233
    547e:	91 e4       	ldi	r25, 0x41	; 65
    5480:	8f 8b       	std	Y+23, r24	; 0x17
    5482:	98 8f       	std	Y+24, r25	; 0x18
    5484:	8d ed       	ldi	r24, 0xDD	; 221
    5486:	91 e4       	ldi	r25, 0x41	; 65
    5488:	89 8f       	std	Y+25, r24	; 0x19
    548a:	9a 8f       	std	Y+26, r25	; 0x1a
    548c:	81 ed       	ldi	r24, 0xD1	; 209
    548e:	91 e4       	ldi	r25, 0x41	; 65
    5490:	8b 8f       	std	Y+27, r24	; 0x1b
    5492:	9c 8f       	std	Y+28, r25	; 0x1c
    5494:	20 c0       	rjmp	.+64     	; 0x54d6 <_ZN5rs232C1EjP12USART_struct+0xf2>
    5496:	00 3a       	cpi	r16, 0xA0	; 160
    5498:	ea e0       	ldi	r30, 0x0A	; 10
    549a:	1e 07       	cpc	r17, r30
    549c:	69 f4       	brne	.+26     	; 0x54b8 <_ZN5rs232C1EjP12USART_struct+0xd4>
    549e:	87 ee       	ldi	r24, 0xE7	; 231
    54a0:	91 e4       	ldi	r25, 0x41	; 65
    54a2:	8f 8b       	std	Y+23, r24	; 0x17
    54a4:	98 8f       	std	Y+24, r25	; 0x18
    54a6:	8b ed       	ldi	r24, 0xDB	; 219
    54a8:	91 e4       	ldi	r25, 0x41	; 65
    54aa:	89 8f       	std	Y+25, r24	; 0x19
    54ac:	9a 8f       	std	Y+26, r25	; 0x1a
    54ae:	8f ec       	ldi	r24, 0xCF	; 207
    54b0:	91 e4       	ldi	r25, 0x41	; 65
    54b2:	8b 8f       	std	Y+27, r24	; 0x1b
    54b4:	9c 8f       	std	Y+28, r25	; 0x1c
    54b6:	0f c0       	rjmp	.+30     	; 0x54d6 <_ZN5rs232C1EjP12USART_struct+0xf2>
    54b8:	00 3a       	cpi	r16, 0xA0	; 160
    54ba:	1b 40       	sbci	r17, 0x0B	; 11
    54bc:	61 f4       	brne	.+24     	; 0x54d6 <_ZN5rs232C1EjP12USART_struct+0xf2>
    54be:	85 ee       	ldi	r24, 0xE5	; 229
    54c0:	91 e4       	ldi	r25, 0x41	; 65
    54c2:	8f 8b       	std	Y+23, r24	; 0x17
    54c4:	98 8f       	std	Y+24, r25	; 0x18
    54c6:	89 ed       	ldi	r24, 0xD9	; 217
    54c8:	91 e4       	ldi	r25, 0x41	; 65
    54ca:	89 8f       	std	Y+25, r24	; 0x19
    54cc:	9a 8f       	std	Y+26, r25	; 0x1a
    54ce:	8d ec       	ldi	r24, 0xCD	; 205
    54d0:	91 e4       	ldi	r25, 0x41	; 65
    54d2:	8b 8f       	std	Y+27, r24	; 0x1b
    54d4:	9c 8f       	std	Y+28, r25	; 0x1c
    54d6:	0f 89       	ldd	r16, Y+23	; 0x17
    54d8:	18 8d       	ldd	r17, Y+24	; 0x18
    54da:	84 e6       	ldi	r24, 0x64	; 100
    54dc:	90 e0       	ldi	r25, 0x00	; 0
    54de:	0e 94 23 26 	call	0x4c46	; 0x4c46 <_Znaj>
    54e2:	f8 01       	movw	r30, r16
    54e4:	80 83       	st	Z, r24
    54e6:	91 83       	std	Z+1, r25	; 0x01
    54e8:	e9 8d       	ldd	r30, Y+25	; 0x19
    54ea:	fa 8d       	ldd	r31, Y+26	; 0x1a
    54ec:	10 82       	st	Z, r1
    54ee:	11 82       	std	Z+1, r1	; 0x01
    54f0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    54f2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    54f4:	10 82       	st	Z, r1
    54f6:	11 82       	std	Z+1, r1	; 0x01
    54f8:	df 91       	pop	r29
    54fa:	cf 91       	pop	r28
    54fc:	1f 91       	pop	r17
    54fe:	0f 91       	pop	r16
    5500:	ff 90       	pop	r15
    5502:	ef 90       	pop	r14
    5504:	08 95       	ret

00005506 <__vector_25>:
    5506:	1f 92       	push	r1
    5508:	0f 92       	push	r0
    550a:	0f b6       	in	r0, 0x3f	; 63
    550c:	0f 92       	push	r0
    550e:	11 24       	eor	r1, r1
    5510:	0b b6       	in	r0, 0x3b	; 59
    5512:	0f 92       	push	r0
    5514:	2f 93       	push	r18
    5516:	3f 93       	push	r19
    5518:	8f 93       	push	r24
    551a:	9f 93       	push	r25
    551c:	ef 93       	push	r30
    551e:	ff 93       	push	r31
    5520:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    5524:	e0 91 ef 41 	lds	r30, 0x41EF	; 0x8041ef <rcvC0_buffer>
    5528:	f0 91 f0 41 	lds	r31, 0x41F0	; 0x8041f0 <rcvC0_buffer+0x1>
    552c:	80 91 d7 41 	lds	r24, 0x41D7	; 0x8041d7 <rcvC0_write_index>
    5530:	90 91 d8 41 	lds	r25, 0x41D8	; 0x8041d8 <rcvC0_write_index+0x1>
    5534:	e8 0f       	add	r30, r24
    5536:	f9 1f       	adc	r31, r25
    5538:	20 83       	st	Z, r18
    553a:	80 91 d7 41 	lds	r24, 0x41D7	; 0x8041d7 <rcvC0_write_index>
    553e:	90 91 d8 41 	lds	r25, 0x41D8	; 0x8041d8 <rcvC0_write_index+0x1>
    5542:	01 96       	adiw	r24, 0x01	; 1
    5544:	84 36       	cpi	r24, 0x64	; 100
    5546:	91 05       	cpc	r25, r1
    5548:	60 f4       	brcc	.+24     	; 0x5562 <__vector_25+0x5c>
    554a:	80 93 d7 41 	sts	0x41D7, r24	; 0x8041d7 <rcvC0_write_index>
    554e:	90 93 d8 41 	sts	0x41D8, r25	; 0x8041d8 <rcvC0_write_index+0x1>
    5552:	20 91 e3 41 	lds	r18, 0x41E3	; 0x8041e3 <rcvC0_read_index>
    5556:	30 91 e4 41 	lds	r19, 0x41E4	; 0x8041e4 <rcvC0_read_index+0x1>
    555a:	82 17       	cp	r24, r18
    555c:	93 07       	cpc	r25, r19
    555e:	f1 f4       	brne	.+60     	; 0x559c <__vector_25+0x96>
    5560:	0c c0       	rjmp	.+24     	; 0x557a <__vector_25+0x74>
    5562:	10 92 d7 41 	sts	0x41D7, r1	; 0x8041d7 <rcvC0_write_index>
    5566:	10 92 d8 41 	sts	0x41D8, r1	; 0x8041d8 <rcvC0_write_index+0x1>
    556a:	80 91 e3 41 	lds	r24, 0x41E3	; 0x8041e3 <rcvC0_read_index>
    556e:	90 91 e4 41 	lds	r25, 0x41E4	; 0x8041e4 <rcvC0_read_index+0x1>
    5572:	18 16       	cp	r1, r24
    5574:	19 06       	cpc	r1, r25
    5576:	91 f4       	brne	.+36     	; 0x559c <__vector_25+0x96>
    5578:	0e c0       	rjmp	.+28     	; 0x5596 <__vector_25+0x90>
    557a:	01 96       	adiw	r24, 0x01	; 1
    557c:	84 36       	cpi	r24, 0x64	; 100
    557e:	91 05       	cpc	r25, r1
    5580:	28 f4       	brcc	.+10     	; 0x558c <__vector_25+0x86>
    5582:	80 93 e3 41 	sts	0x41E3, r24	; 0x8041e3 <rcvC0_read_index>
    5586:	90 93 e4 41 	sts	0x41E4, r25	; 0x8041e4 <rcvC0_read_index+0x1>
    558a:	08 c0       	rjmp	.+16     	; 0x559c <__vector_25+0x96>
    558c:	10 92 e3 41 	sts	0x41E3, r1	; 0x8041e3 <rcvC0_read_index>
    5590:	10 92 e4 41 	sts	0x41E4, r1	; 0x8041e4 <rcvC0_read_index+0x1>
    5594:	03 c0       	rjmp	.+6      	; 0x559c <__vector_25+0x96>
    5596:	81 e0       	ldi	r24, 0x01	; 1
    5598:	90 e0       	ldi	r25, 0x00	; 0
    559a:	f3 cf       	rjmp	.-26     	; 0x5582 <__vector_25+0x7c>
    559c:	ff 91       	pop	r31
    559e:	ef 91       	pop	r30
    55a0:	9f 91       	pop	r25
    55a2:	8f 91       	pop	r24
    55a4:	3f 91       	pop	r19
    55a6:	2f 91       	pop	r18
    55a8:	0f 90       	pop	r0
    55aa:	0b be       	out	0x3b, r0	; 59
    55ac:	0f 90       	pop	r0
    55ae:	0f be       	out	0x3f, r0	; 63
    55b0:	0f 90       	pop	r0
    55b2:	1f 90       	pop	r1
    55b4:	18 95       	reti

000055b6 <__vector_28>:
    55b6:	1f 92       	push	r1
    55b8:	0f 92       	push	r0
    55ba:	0f b6       	in	r0, 0x3f	; 63
    55bc:	0f 92       	push	r0
    55be:	11 24       	eor	r1, r1
    55c0:	0b b6       	in	r0, 0x3b	; 59
    55c2:	0f 92       	push	r0
    55c4:	2f 93       	push	r18
    55c6:	3f 93       	push	r19
    55c8:	8f 93       	push	r24
    55ca:	9f 93       	push	r25
    55cc:	ef 93       	push	r30
    55ce:	ff 93       	push	r31
    55d0:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    55d4:	e0 91 ed 41 	lds	r30, 0x41ED	; 0x8041ed <rcvC1_buffer>
    55d8:	f0 91 ee 41 	lds	r31, 0x41EE	; 0x8041ee <rcvC1_buffer+0x1>
    55dc:	80 91 d5 41 	lds	r24, 0x41D5	; 0x8041d5 <rcvC1_write_index>
    55e0:	90 91 d6 41 	lds	r25, 0x41D6	; 0x8041d6 <rcvC1_write_index+0x1>
    55e4:	e8 0f       	add	r30, r24
    55e6:	f9 1f       	adc	r31, r25
    55e8:	20 83       	st	Z, r18
    55ea:	80 91 d5 41 	lds	r24, 0x41D5	; 0x8041d5 <rcvC1_write_index>
    55ee:	90 91 d6 41 	lds	r25, 0x41D6	; 0x8041d6 <rcvC1_write_index+0x1>
    55f2:	01 96       	adiw	r24, 0x01	; 1
    55f4:	84 36       	cpi	r24, 0x64	; 100
    55f6:	91 05       	cpc	r25, r1
    55f8:	60 f4       	brcc	.+24     	; 0x5612 <__vector_28+0x5c>
    55fa:	80 93 d5 41 	sts	0x41D5, r24	; 0x8041d5 <rcvC1_write_index>
    55fe:	90 93 d6 41 	sts	0x41D6, r25	; 0x8041d6 <rcvC1_write_index+0x1>
    5602:	20 91 e1 41 	lds	r18, 0x41E1	; 0x8041e1 <rcvC1_read_index>
    5606:	30 91 e2 41 	lds	r19, 0x41E2	; 0x8041e2 <rcvC1_read_index+0x1>
    560a:	82 17       	cp	r24, r18
    560c:	93 07       	cpc	r25, r19
    560e:	f1 f4       	brne	.+60     	; 0x564c <__vector_28+0x96>
    5610:	0c c0       	rjmp	.+24     	; 0x562a <__vector_28+0x74>
    5612:	10 92 d5 41 	sts	0x41D5, r1	; 0x8041d5 <rcvC1_write_index>
    5616:	10 92 d6 41 	sts	0x41D6, r1	; 0x8041d6 <rcvC1_write_index+0x1>
    561a:	80 91 e1 41 	lds	r24, 0x41E1	; 0x8041e1 <rcvC1_read_index>
    561e:	90 91 e2 41 	lds	r25, 0x41E2	; 0x8041e2 <rcvC1_read_index+0x1>
    5622:	18 16       	cp	r1, r24
    5624:	19 06       	cpc	r1, r25
    5626:	91 f4       	brne	.+36     	; 0x564c <__vector_28+0x96>
    5628:	0e c0       	rjmp	.+28     	; 0x5646 <__vector_28+0x90>
    562a:	01 96       	adiw	r24, 0x01	; 1
    562c:	84 36       	cpi	r24, 0x64	; 100
    562e:	91 05       	cpc	r25, r1
    5630:	28 f4       	brcc	.+10     	; 0x563c <__vector_28+0x86>
    5632:	80 93 e1 41 	sts	0x41E1, r24	; 0x8041e1 <rcvC1_read_index>
    5636:	90 93 e2 41 	sts	0x41E2, r25	; 0x8041e2 <rcvC1_read_index+0x1>
    563a:	08 c0       	rjmp	.+16     	; 0x564c <__vector_28+0x96>
    563c:	10 92 e1 41 	sts	0x41E1, r1	; 0x8041e1 <rcvC1_read_index>
    5640:	10 92 e2 41 	sts	0x41E2, r1	; 0x8041e2 <rcvC1_read_index+0x1>
    5644:	03 c0       	rjmp	.+6      	; 0x564c <__vector_28+0x96>
    5646:	81 e0       	ldi	r24, 0x01	; 1
    5648:	90 e0       	ldi	r25, 0x00	; 0
    564a:	f3 cf       	rjmp	.-26     	; 0x5632 <__vector_28+0x7c>
    564c:	ff 91       	pop	r31
    564e:	ef 91       	pop	r30
    5650:	9f 91       	pop	r25
    5652:	8f 91       	pop	r24
    5654:	3f 91       	pop	r19
    5656:	2f 91       	pop	r18
    5658:	0f 90       	pop	r0
    565a:	0b be       	out	0x3b, r0	; 59
    565c:	0f 90       	pop	r0
    565e:	0f be       	out	0x3f, r0	; 63
    5660:	0f 90       	pop	r0
    5662:	1f 90       	pop	r1
    5664:	18 95       	reti

00005666 <__vector_88>:
    5666:	1f 92       	push	r1
    5668:	0f 92       	push	r0
    566a:	0f b6       	in	r0, 0x3f	; 63
    566c:	0f 92       	push	r0
    566e:	11 24       	eor	r1, r1
    5670:	0b b6       	in	r0, 0x3b	; 59
    5672:	0f 92       	push	r0
    5674:	2f 93       	push	r18
    5676:	3f 93       	push	r19
    5678:	8f 93       	push	r24
    567a:	9f 93       	push	r25
    567c:	ef 93       	push	r30
    567e:	ff 93       	push	r31
    5680:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    5684:	e0 91 eb 41 	lds	r30, 0x41EB	; 0x8041eb <rcvD0_buffer>
    5688:	f0 91 ec 41 	lds	r31, 0x41EC	; 0x8041ec <rcvD0_buffer+0x1>
    568c:	80 91 d7 41 	lds	r24, 0x41D7	; 0x8041d7 <rcvC0_write_index>
    5690:	90 91 d8 41 	lds	r25, 0x41D8	; 0x8041d8 <rcvC0_write_index+0x1>
    5694:	e8 0f       	add	r30, r24
    5696:	f9 1f       	adc	r31, r25
    5698:	20 83       	st	Z, r18
    569a:	80 91 d3 41 	lds	r24, 0x41D3	; 0x8041d3 <rcvD0_write_index>
    569e:	90 91 d4 41 	lds	r25, 0x41D4	; 0x8041d4 <rcvD0_write_index+0x1>
    56a2:	01 96       	adiw	r24, 0x01	; 1
    56a4:	84 36       	cpi	r24, 0x64	; 100
    56a6:	91 05       	cpc	r25, r1
    56a8:	60 f4       	brcc	.+24     	; 0x56c2 <__vector_88+0x5c>
    56aa:	80 93 d3 41 	sts	0x41D3, r24	; 0x8041d3 <rcvD0_write_index>
    56ae:	90 93 d4 41 	sts	0x41D4, r25	; 0x8041d4 <rcvD0_write_index+0x1>
    56b2:	20 91 df 41 	lds	r18, 0x41DF	; 0x8041df <rcvD0_read_index>
    56b6:	30 91 e0 41 	lds	r19, 0x41E0	; 0x8041e0 <rcvD0_read_index+0x1>
    56ba:	82 17       	cp	r24, r18
    56bc:	93 07       	cpc	r25, r19
    56be:	f1 f4       	brne	.+60     	; 0x56fc <__vector_88+0x96>
    56c0:	0c c0       	rjmp	.+24     	; 0x56da <__vector_88+0x74>
    56c2:	10 92 d3 41 	sts	0x41D3, r1	; 0x8041d3 <rcvD0_write_index>
    56c6:	10 92 d4 41 	sts	0x41D4, r1	; 0x8041d4 <rcvD0_write_index+0x1>
    56ca:	80 91 df 41 	lds	r24, 0x41DF	; 0x8041df <rcvD0_read_index>
    56ce:	90 91 e0 41 	lds	r25, 0x41E0	; 0x8041e0 <rcvD0_read_index+0x1>
    56d2:	18 16       	cp	r1, r24
    56d4:	19 06       	cpc	r1, r25
    56d6:	91 f4       	brne	.+36     	; 0x56fc <__vector_88+0x96>
    56d8:	0e c0       	rjmp	.+28     	; 0x56f6 <__vector_88+0x90>
    56da:	01 96       	adiw	r24, 0x01	; 1
    56dc:	84 36       	cpi	r24, 0x64	; 100
    56de:	91 05       	cpc	r25, r1
    56e0:	28 f4       	brcc	.+10     	; 0x56ec <__vector_88+0x86>
    56e2:	80 93 df 41 	sts	0x41DF, r24	; 0x8041df <rcvD0_read_index>
    56e6:	90 93 e0 41 	sts	0x41E0, r25	; 0x8041e0 <rcvD0_read_index+0x1>
    56ea:	08 c0       	rjmp	.+16     	; 0x56fc <__vector_88+0x96>
    56ec:	10 92 df 41 	sts	0x41DF, r1	; 0x8041df <rcvD0_read_index>
    56f0:	10 92 e0 41 	sts	0x41E0, r1	; 0x8041e0 <rcvD0_read_index+0x1>
    56f4:	03 c0       	rjmp	.+6      	; 0x56fc <__vector_88+0x96>
    56f6:	81 e0       	ldi	r24, 0x01	; 1
    56f8:	90 e0       	ldi	r25, 0x00	; 0
    56fa:	f3 cf       	rjmp	.-26     	; 0x56e2 <__vector_88+0x7c>
    56fc:	ff 91       	pop	r31
    56fe:	ef 91       	pop	r30
    5700:	9f 91       	pop	r25
    5702:	8f 91       	pop	r24
    5704:	3f 91       	pop	r19
    5706:	2f 91       	pop	r18
    5708:	0f 90       	pop	r0
    570a:	0b be       	out	0x3b, r0	; 59
    570c:	0f 90       	pop	r0
    570e:	0f be       	out	0x3f, r0	; 63
    5710:	0f 90       	pop	r0
    5712:	1f 90       	pop	r1
    5714:	18 95       	reti

00005716 <__vector_91>:
    5716:	1f 92       	push	r1
    5718:	0f 92       	push	r0
    571a:	0f b6       	in	r0, 0x3f	; 63
    571c:	0f 92       	push	r0
    571e:	11 24       	eor	r1, r1
    5720:	0b b6       	in	r0, 0x3b	; 59
    5722:	0f 92       	push	r0
    5724:	2f 93       	push	r18
    5726:	3f 93       	push	r19
    5728:	8f 93       	push	r24
    572a:	9f 93       	push	r25
    572c:	ef 93       	push	r30
    572e:	ff 93       	push	r31
    5730:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    5734:	e0 91 e9 41 	lds	r30, 0x41E9	; 0x8041e9 <rcvD1_buffer>
    5738:	f0 91 ea 41 	lds	r31, 0x41EA	; 0x8041ea <rcvD1_buffer+0x1>
    573c:	80 91 d1 41 	lds	r24, 0x41D1	; 0x8041d1 <rcvD1_write_index>
    5740:	90 91 d2 41 	lds	r25, 0x41D2	; 0x8041d2 <rcvD1_write_index+0x1>
    5744:	e8 0f       	add	r30, r24
    5746:	f9 1f       	adc	r31, r25
    5748:	20 83       	st	Z, r18
    574a:	80 91 d1 41 	lds	r24, 0x41D1	; 0x8041d1 <rcvD1_write_index>
    574e:	90 91 d2 41 	lds	r25, 0x41D2	; 0x8041d2 <rcvD1_write_index+0x1>
    5752:	01 96       	adiw	r24, 0x01	; 1
    5754:	84 36       	cpi	r24, 0x64	; 100
    5756:	91 05       	cpc	r25, r1
    5758:	60 f4       	brcc	.+24     	; 0x5772 <__vector_91+0x5c>
    575a:	80 93 d1 41 	sts	0x41D1, r24	; 0x8041d1 <rcvD1_write_index>
    575e:	90 93 d2 41 	sts	0x41D2, r25	; 0x8041d2 <rcvD1_write_index+0x1>
    5762:	20 91 dd 41 	lds	r18, 0x41DD	; 0x8041dd <rcvD1_read_index>
    5766:	30 91 de 41 	lds	r19, 0x41DE	; 0x8041de <rcvD1_read_index+0x1>
    576a:	82 17       	cp	r24, r18
    576c:	93 07       	cpc	r25, r19
    576e:	f1 f4       	brne	.+60     	; 0x57ac <__vector_91+0x96>
    5770:	0c c0       	rjmp	.+24     	; 0x578a <__vector_91+0x74>
    5772:	10 92 d1 41 	sts	0x41D1, r1	; 0x8041d1 <rcvD1_write_index>
    5776:	10 92 d2 41 	sts	0x41D2, r1	; 0x8041d2 <rcvD1_write_index+0x1>
    577a:	80 91 dd 41 	lds	r24, 0x41DD	; 0x8041dd <rcvD1_read_index>
    577e:	90 91 de 41 	lds	r25, 0x41DE	; 0x8041de <rcvD1_read_index+0x1>
    5782:	18 16       	cp	r1, r24
    5784:	19 06       	cpc	r1, r25
    5786:	91 f4       	brne	.+36     	; 0x57ac <__vector_91+0x96>
    5788:	0e c0       	rjmp	.+28     	; 0x57a6 <__vector_91+0x90>
    578a:	01 96       	adiw	r24, 0x01	; 1
    578c:	84 36       	cpi	r24, 0x64	; 100
    578e:	91 05       	cpc	r25, r1
    5790:	28 f4       	brcc	.+10     	; 0x579c <__vector_91+0x86>
    5792:	80 93 dd 41 	sts	0x41DD, r24	; 0x8041dd <rcvD1_read_index>
    5796:	90 93 de 41 	sts	0x41DE, r25	; 0x8041de <rcvD1_read_index+0x1>
    579a:	08 c0       	rjmp	.+16     	; 0x57ac <__vector_91+0x96>
    579c:	10 92 dd 41 	sts	0x41DD, r1	; 0x8041dd <rcvD1_read_index>
    57a0:	10 92 de 41 	sts	0x41DE, r1	; 0x8041de <rcvD1_read_index+0x1>
    57a4:	03 c0       	rjmp	.+6      	; 0x57ac <__vector_91+0x96>
    57a6:	81 e0       	ldi	r24, 0x01	; 1
    57a8:	90 e0       	ldi	r25, 0x00	; 0
    57aa:	f3 cf       	rjmp	.-26     	; 0x5792 <__vector_91+0x7c>
    57ac:	ff 91       	pop	r31
    57ae:	ef 91       	pop	r30
    57b0:	9f 91       	pop	r25
    57b2:	8f 91       	pop	r24
    57b4:	3f 91       	pop	r19
    57b6:	2f 91       	pop	r18
    57b8:	0f 90       	pop	r0
    57ba:	0b be       	out	0x3b, r0	; 59
    57bc:	0f 90       	pop	r0
    57be:	0f be       	out	0x3f, r0	; 63
    57c0:	0f 90       	pop	r0
    57c2:	1f 90       	pop	r1
    57c4:	18 95       	reti

000057c6 <__vector_58>:
    57c6:	1f 92       	push	r1
    57c8:	0f 92       	push	r0
    57ca:	0f b6       	in	r0, 0x3f	; 63
    57cc:	0f 92       	push	r0
    57ce:	11 24       	eor	r1, r1
    57d0:	0b b6       	in	r0, 0x3b	; 59
    57d2:	0f 92       	push	r0
    57d4:	2f 93       	push	r18
    57d6:	3f 93       	push	r19
    57d8:	8f 93       	push	r24
    57da:	9f 93       	push	r25
    57dc:	ef 93       	push	r30
    57de:	ff 93       	push	r31
    57e0:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    57e4:	e0 91 e7 41 	lds	r30, 0x41E7	; 0x8041e7 <rcvE0_buffer>
    57e8:	f0 91 e8 41 	lds	r31, 0x41E8	; 0x8041e8 <rcvE0_buffer+0x1>
    57ec:	80 91 cf 41 	lds	r24, 0x41CF	; 0x8041cf <rcvE0_write_index>
    57f0:	90 91 d0 41 	lds	r25, 0x41D0	; 0x8041d0 <rcvE0_write_index+0x1>
    57f4:	e8 0f       	add	r30, r24
    57f6:	f9 1f       	adc	r31, r25
    57f8:	20 83       	st	Z, r18
    57fa:	80 91 cf 41 	lds	r24, 0x41CF	; 0x8041cf <rcvE0_write_index>
    57fe:	90 91 d0 41 	lds	r25, 0x41D0	; 0x8041d0 <rcvE0_write_index+0x1>
    5802:	01 96       	adiw	r24, 0x01	; 1
    5804:	84 36       	cpi	r24, 0x64	; 100
    5806:	91 05       	cpc	r25, r1
    5808:	60 f4       	brcc	.+24     	; 0x5822 <__vector_58+0x5c>
    580a:	80 93 cf 41 	sts	0x41CF, r24	; 0x8041cf <rcvE0_write_index>
    580e:	90 93 d0 41 	sts	0x41D0, r25	; 0x8041d0 <rcvE0_write_index+0x1>
    5812:	20 91 db 41 	lds	r18, 0x41DB	; 0x8041db <rcvE0_read_index>
    5816:	30 91 dc 41 	lds	r19, 0x41DC	; 0x8041dc <rcvE0_read_index+0x1>
    581a:	82 17       	cp	r24, r18
    581c:	93 07       	cpc	r25, r19
    581e:	f1 f4       	brne	.+60     	; 0x585c <__vector_58+0x96>
    5820:	0c c0       	rjmp	.+24     	; 0x583a <__vector_58+0x74>
    5822:	10 92 cf 41 	sts	0x41CF, r1	; 0x8041cf <rcvE0_write_index>
    5826:	10 92 d0 41 	sts	0x41D0, r1	; 0x8041d0 <rcvE0_write_index+0x1>
    582a:	80 91 db 41 	lds	r24, 0x41DB	; 0x8041db <rcvE0_read_index>
    582e:	90 91 dc 41 	lds	r25, 0x41DC	; 0x8041dc <rcvE0_read_index+0x1>
    5832:	18 16       	cp	r1, r24
    5834:	19 06       	cpc	r1, r25
    5836:	91 f4       	brne	.+36     	; 0x585c <__vector_58+0x96>
    5838:	0e c0       	rjmp	.+28     	; 0x5856 <__vector_58+0x90>
    583a:	01 96       	adiw	r24, 0x01	; 1
    583c:	84 36       	cpi	r24, 0x64	; 100
    583e:	91 05       	cpc	r25, r1
    5840:	28 f4       	brcc	.+10     	; 0x584c <__vector_58+0x86>
    5842:	80 93 db 41 	sts	0x41DB, r24	; 0x8041db <rcvE0_read_index>
    5846:	90 93 dc 41 	sts	0x41DC, r25	; 0x8041dc <rcvE0_read_index+0x1>
    584a:	08 c0       	rjmp	.+16     	; 0x585c <__vector_58+0x96>
    584c:	10 92 db 41 	sts	0x41DB, r1	; 0x8041db <rcvE0_read_index>
    5850:	10 92 dc 41 	sts	0x41DC, r1	; 0x8041dc <rcvE0_read_index+0x1>
    5854:	03 c0       	rjmp	.+6      	; 0x585c <__vector_58+0x96>
    5856:	81 e0       	ldi	r24, 0x01	; 1
    5858:	90 e0       	ldi	r25, 0x00	; 0
    585a:	f3 cf       	rjmp	.-26     	; 0x5842 <__vector_58+0x7c>
    585c:	ff 91       	pop	r31
    585e:	ef 91       	pop	r30
    5860:	9f 91       	pop	r25
    5862:	8f 91       	pop	r24
    5864:	3f 91       	pop	r19
    5866:	2f 91       	pop	r18
    5868:	0f 90       	pop	r0
    586a:	0b be       	out	0x3b, r0	; 59
    586c:	0f 90       	pop	r0
    586e:	0f be       	out	0x3f, r0	; 63
    5870:	0f 90       	pop	r0
    5872:	1f 90       	pop	r1
    5874:	18 95       	reti

00005876 <__vector_119>:
    5876:	1f 92       	push	r1
    5878:	0f 92       	push	r0
    587a:	0f b6       	in	r0, 0x3f	; 63
    587c:	0f 92       	push	r0
    587e:	11 24       	eor	r1, r1
    5880:	0b b6       	in	r0, 0x3b	; 59
    5882:	0f 92       	push	r0
    5884:	2f 93       	push	r18
    5886:	3f 93       	push	r19
    5888:	8f 93       	push	r24
    588a:	9f 93       	push	r25
    588c:	ef 93       	push	r30
    588e:	ff 93       	push	r31
    5890:	20 91 a0 0b 	lds	r18, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
    5894:	e0 91 e5 41 	lds	r30, 0x41E5	; 0x8041e5 <rcvF0_buffer>
    5898:	f0 91 e6 41 	lds	r31, 0x41E6	; 0x8041e6 <rcvF0_buffer+0x1>
    589c:	80 91 cd 41 	lds	r24, 0x41CD	; 0x8041cd <rcvF0_write_index>
    58a0:	90 91 ce 41 	lds	r25, 0x41CE	; 0x8041ce <rcvF0_write_index+0x1>
    58a4:	e8 0f       	add	r30, r24
    58a6:	f9 1f       	adc	r31, r25
    58a8:	20 83       	st	Z, r18
    58aa:	80 91 cd 41 	lds	r24, 0x41CD	; 0x8041cd <rcvF0_write_index>
    58ae:	90 91 ce 41 	lds	r25, 0x41CE	; 0x8041ce <rcvF0_write_index+0x1>
    58b2:	01 96       	adiw	r24, 0x01	; 1
    58b4:	84 36       	cpi	r24, 0x64	; 100
    58b6:	91 05       	cpc	r25, r1
    58b8:	60 f4       	brcc	.+24     	; 0x58d2 <__vector_119+0x5c>
    58ba:	80 93 cd 41 	sts	0x41CD, r24	; 0x8041cd <rcvF0_write_index>
    58be:	90 93 ce 41 	sts	0x41CE, r25	; 0x8041ce <rcvF0_write_index+0x1>
    58c2:	20 91 d9 41 	lds	r18, 0x41D9	; 0x8041d9 <rcvF0_read_index>
    58c6:	30 91 da 41 	lds	r19, 0x41DA	; 0x8041da <rcvF0_read_index+0x1>
    58ca:	82 17       	cp	r24, r18
    58cc:	93 07       	cpc	r25, r19
    58ce:	f1 f4       	brne	.+60     	; 0x590c <__vector_119+0x96>
    58d0:	0c c0       	rjmp	.+24     	; 0x58ea <__vector_119+0x74>
    58d2:	10 92 cd 41 	sts	0x41CD, r1	; 0x8041cd <rcvF0_write_index>
    58d6:	10 92 ce 41 	sts	0x41CE, r1	; 0x8041ce <rcvF0_write_index+0x1>
    58da:	80 91 d9 41 	lds	r24, 0x41D9	; 0x8041d9 <rcvF0_read_index>
    58de:	90 91 da 41 	lds	r25, 0x41DA	; 0x8041da <rcvF0_read_index+0x1>
    58e2:	18 16       	cp	r1, r24
    58e4:	19 06       	cpc	r1, r25
    58e6:	91 f4       	brne	.+36     	; 0x590c <__vector_119+0x96>
    58e8:	0e c0       	rjmp	.+28     	; 0x5906 <__vector_119+0x90>
    58ea:	01 96       	adiw	r24, 0x01	; 1
    58ec:	84 36       	cpi	r24, 0x64	; 100
    58ee:	91 05       	cpc	r25, r1
    58f0:	28 f4       	brcc	.+10     	; 0x58fc <__vector_119+0x86>
    58f2:	80 93 d9 41 	sts	0x41D9, r24	; 0x8041d9 <rcvF0_read_index>
    58f6:	90 93 da 41 	sts	0x41DA, r25	; 0x8041da <rcvF0_read_index+0x1>
    58fa:	08 c0       	rjmp	.+16     	; 0x590c <__vector_119+0x96>
    58fc:	10 92 d9 41 	sts	0x41D9, r1	; 0x8041d9 <rcvF0_read_index>
    5900:	10 92 da 41 	sts	0x41DA, r1	; 0x8041da <rcvF0_read_index+0x1>
    5904:	03 c0       	rjmp	.+6      	; 0x590c <__vector_119+0x96>
    5906:	81 e0       	ldi	r24, 0x01	; 1
    5908:	90 e0       	ldi	r25, 0x00	; 0
    590a:	f3 cf       	rjmp	.-26     	; 0x58f2 <__vector_119+0x7c>
    590c:	ff 91       	pop	r31
    590e:	ef 91       	pop	r30
    5910:	9f 91       	pop	r25
    5912:	8f 91       	pop	r24
    5914:	3f 91       	pop	r19
    5916:	2f 91       	pop	r18
    5918:	0f 90       	pop	r0
    591a:	0b be       	out	0x3b, r0	; 59
    591c:	0f 90       	pop	r0
    591e:	0f be       	out	0x3f, r0	; 63
    5920:	0f 90       	pop	r0
    5922:	1f 90       	pop	r1
    5924:	18 95       	reti

00005926 <__subsf3>:
    5926:	50 58       	subi	r21, 0x80	; 128

00005928 <__addsf3>:
    5928:	bb 27       	eor	r27, r27
    592a:	aa 27       	eor	r26, r26
    592c:	0e 94 ab 2c 	call	0x5956	; 0x5956 <__addsf3x>
    5930:	0c 94 c6 2d 	jmp	0x5b8c	; 0x5b8c <__fp_round>
    5934:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <__fp_pscA>
    5938:	38 f0       	brcs	.+14     	; 0x5948 <__addsf3+0x20>
    593a:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <__fp_pscB>
    593e:	20 f0       	brcs	.+8      	; 0x5948 <__addsf3+0x20>
    5940:	39 f4       	brne	.+14     	; 0x5950 <__addsf3+0x28>
    5942:	9f 3f       	cpi	r25, 0xFF	; 255
    5944:	19 f4       	brne	.+6      	; 0x594c <__addsf3+0x24>
    5946:	26 f4       	brtc	.+8      	; 0x5950 <__addsf3+0x28>
    5948:	0c 94 b5 2d 	jmp	0x5b6a	; 0x5b6a <__fp_nan>
    594c:	0e f4       	brtc	.+2      	; 0x5950 <__addsf3+0x28>
    594e:	e0 95       	com	r30
    5950:	e7 fb       	bst	r30, 7
    5952:	0c 94 af 2d 	jmp	0x5b5e	; 0x5b5e <__fp_inf>

00005956 <__addsf3x>:
    5956:	e9 2f       	mov	r30, r25
    5958:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <__fp_split3>
    595c:	58 f3       	brcs	.-42     	; 0x5934 <__addsf3+0xc>
    595e:	ba 17       	cp	r27, r26
    5960:	62 07       	cpc	r22, r18
    5962:	73 07       	cpc	r23, r19
    5964:	84 07       	cpc	r24, r20
    5966:	95 07       	cpc	r25, r21
    5968:	20 f0       	brcs	.+8      	; 0x5972 <__addsf3x+0x1c>
    596a:	79 f4       	brne	.+30     	; 0x598a <__addsf3x+0x34>
    596c:	a6 f5       	brtc	.+104    	; 0x59d6 <__addsf3x+0x80>
    596e:	0c 94 f9 2d 	jmp	0x5bf2	; 0x5bf2 <__fp_zero>
    5972:	0e f4       	brtc	.+2      	; 0x5976 <__addsf3x+0x20>
    5974:	e0 95       	com	r30
    5976:	0b 2e       	mov	r0, r27
    5978:	ba 2f       	mov	r27, r26
    597a:	a0 2d       	mov	r26, r0
    597c:	0b 01       	movw	r0, r22
    597e:	b9 01       	movw	r22, r18
    5980:	90 01       	movw	r18, r0
    5982:	0c 01       	movw	r0, r24
    5984:	ca 01       	movw	r24, r20
    5986:	a0 01       	movw	r20, r0
    5988:	11 24       	eor	r1, r1
    598a:	ff 27       	eor	r31, r31
    598c:	59 1b       	sub	r21, r25
    598e:	99 f0       	breq	.+38     	; 0x59b6 <__addsf3x+0x60>
    5990:	59 3f       	cpi	r21, 0xF9	; 249
    5992:	50 f4       	brcc	.+20     	; 0x59a8 <__addsf3x+0x52>
    5994:	50 3e       	cpi	r21, 0xE0	; 224
    5996:	68 f1       	brcs	.+90     	; 0x59f2 <__addsf3x+0x9c>
    5998:	1a 16       	cp	r1, r26
    599a:	f0 40       	sbci	r31, 0x00	; 0
    599c:	a2 2f       	mov	r26, r18
    599e:	23 2f       	mov	r18, r19
    59a0:	34 2f       	mov	r19, r20
    59a2:	44 27       	eor	r20, r20
    59a4:	58 5f       	subi	r21, 0xF8	; 248
    59a6:	f3 cf       	rjmp	.-26     	; 0x598e <__addsf3x+0x38>
    59a8:	46 95       	lsr	r20
    59aa:	37 95       	ror	r19
    59ac:	27 95       	ror	r18
    59ae:	a7 95       	ror	r26
    59b0:	f0 40       	sbci	r31, 0x00	; 0
    59b2:	53 95       	inc	r21
    59b4:	c9 f7       	brne	.-14     	; 0x59a8 <__addsf3x+0x52>
    59b6:	7e f4       	brtc	.+30     	; 0x59d6 <__addsf3x+0x80>
    59b8:	1f 16       	cp	r1, r31
    59ba:	ba 0b       	sbc	r27, r26
    59bc:	62 0b       	sbc	r22, r18
    59be:	73 0b       	sbc	r23, r19
    59c0:	84 0b       	sbc	r24, r20
    59c2:	ba f0       	brmi	.+46     	; 0x59f2 <__addsf3x+0x9c>
    59c4:	91 50       	subi	r25, 0x01	; 1
    59c6:	a1 f0       	breq	.+40     	; 0x59f0 <__addsf3x+0x9a>
    59c8:	ff 0f       	add	r31, r31
    59ca:	bb 1f       	adc	r27, r27
    59cc:	66 1f       	adc	r22, r22
    59ce:	77 1f       	adc	r23, r23
    59d0:	88 1f       	adc	r24, r24
    59d2:	c2 f7       	brpl	.-16     	; 0x59c4 <__addsf3x+0x6e>
    59d4:	0e c0       	rjmp	.+28     	; 0x59f2 <__addsf3x+0x9c>
    59d6:	ba 0f       	add	r27, r26
    59d8:	62 1f       	adc	r22, r18
    59da:	73 1f       	adc	r23, r19
    59dc:	84 1f       	adc	r24, r20
    59de:	48 f4       	brcc	.+18     	; 0x59f2 <__addsf3x+0x9c>
    59e0:	87 95       	ror	r24
    59e2:	77 95       	ror	r23
    59e4:	67 95       	ror	r22
    59e6:	b7 95       	ror	r27
    59e8:	f7 95       	ror	r31
    59ea:	9e 3f       	cpi	r25, 0xFE	; 254
    59ec:	08 f0       	brcs	.+2      	; 0x59f0 <__addsf3x+0x9a>
    59ee:	b0 cf       	rjmp	.-160    	; 0x5950 <__addsf3+0x28>
    59f0:	93 95       	inc	r25
    59f2:	88 0f       	add	r24, r24
    59f4:	08 f0       	brcs	.+2      	; 0x59f8 <__addsf3x+0xa2>
    59f6:	99 27       	eor	r25, r25
    59f8:	ee 0f       	add	r30, r30
    59fa:	97 95       	ror	r25
    59fc:	87 95       	ror	r24
    59fe:	08 95       	ret

00005a00 <__divsf3>:
    5a00:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__divsf3x>
    5a04:	0c 94 c6 2d 	jmp	0x5b8c	; 0x5b8c <__fp_round>
    5a08:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <__fp_pscB>
    5a0c:	58 f0       	brcs	.+22     	; 0x5a24 <__divsf3+0x24>
    5a0e:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <__fp_pscA>
    5a12:	40 f0       	brcs	.+16     	; 0x5a24 <__divsf3+0x24>
    5a14:	29 f4       	brne	.+10     	; 0x5a20 <__divsf3+0x20>
    5a16:	5f 3f       	cpi	r21, 0xFF	; 255
    5a18:	29 f0       	breq	.+10     	; 0x5a24 <__divsf3+0x24>
    5a1a:	0c 94 af 2d 	jmp	0x5b5e	; 0x5b5e <__fp_inf>
    5a1e:	51 11       	cpse	r21, r1
    5a20:	0c 94 fa 2d 	jmp	0x5bf4	; 0x5bf4 <__fp_szero>
    5a24:	0c 94 b5 2d 	jmp	0x5b6a	; 0x5b6a <__fp_nan>

00005a28 <__divsf3x>:
    5a28:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <__fp_split3>
    5a2c:	68 f3       	brcs	.-38     	; 0x5a08 <__divsf3+0x8>

00005a2e <__divsf3_pse>:
    5a2e:	99 23       	and	r25, r25
    5a30:	b1 f3       	breq	.-20     	; 0x5a1e <__divsf3+0x1e>
    5a32:	55 23       	and	r21, r21
    5a34:	91 f3       	breq	.-28     	; 0x5a1a <__divsf3+0x1a>
    5a36:	95 1b       	sub	r25, r21
    5a38:	55 0b       	sbc	r21, r21
    5a3a:	bb 27       	eor	r27, r27
    5a3c:	aa 27       	eor	r26, r26
    5a3e:	62 17       	cp	r22, r18
    5a40:	73 07       	cpc	r23, r19
    5a42:	84 07       	cpc	r24, r20
    5a44:	38 f0       	brcs	.+14     	; 0x5a54 <__divsf3_pse+0x26>
    5a46:	9f 5f       	subi	r25, 0xFF	; 255
    5a48:	5f 4f       	sbci	r21, 0xFF	; 255
    5a4a:	22 0f       	add	r18, r18
    5a4c:	33 1f       	adc	r19, r19
    5a4e:	44 1f       	adc	r20, r20
    5a50:	aa 1f       	adc	r26, r26
    5a52:	a9 f3       	breq	.-22     	; 0x5a3e <__divsf3_pse+0x10>
    5a54:	35 d0       	rcall	.+106    	; 0x5ac0 <__divsf3_pse+0x92>
    5a56:	0e 2e       	mov	r0, r30
    5a58:	3a f0       	brmi	.+14     	; 0x5a68 <__divsf3_pse+0x3a>
    5a5a:	e0 e8       	ldi	r30, 0x80	; 128
    5a5c:	32 d0       	rcall	.+100    	; 0x5ac2 <__divsf3_pse+0x94>
    5a5e:	91 50       	subi	r25, 0x01	; 1
    5a60:	50 40       	sbci	r21, 0x00	; 0
    5a62:	e6 95       	lsr	r30
    5a64:	00 1c       	adc	r0, r0
    5a66:	ca f7       	brpl	.-14     	; 0x5a5a <__divsf3_pse+0x2c>
    5a68:	2b d0       	rcall	.+86     	; 0x5ac0 <__divsf3_pse+0x92>
    5a6a:	fe 2f       	mov	r31, r30
    5a6c:	29 d0       	rcall	.+82     	; 0x5ac0 <__divsf3_pse+0x92>
    5a6e:	66 0f       	add	r22, r22
    5a70:	77 1f       	adc	r23, r23
    5a72:	88 1f       	adc	r24, r24
    5a74:	bb 1f       	adc	r27, r27
    5a76:	26 17       	cp	r18, r22
    5a78:	37 07       	cpc	r19, r23
    5a7a:	48 07       	cpc	r20, r24
    5a7c:	ab 07       	cpc	r26, r27
    5a7e:	b0 e8       	ldi	r27, 0x80	; 128
    5a80:	09 f0       	breq	.+2      	; 0x5a84 <__divsf3_pse+0x56>
    5a82:	bb 0b       	sbc	r27, r27
    5a84:	80 2d       	mov	r24, r0
    5a86:	bf 01       	movw	r22, r30
    5a88:	ff 27       	eor	r31, r31
    5a8a:	93 58       	subi	r25, 0x83	; 131
    5a8c:	5f 4f       	sbci	r21, 0xFF	; 255
    5a8e:	3a f0       	brmi	.+14     	; 0x5a9e <__divsf3_pse+0x70>
    5a90:	9e 3f       	cpi	r25, 0xFE	; 254
    5a92:	51 05       	cpc	r21, r1
    5a94:	78 f0       	brcs	.+30     	; 0x5ab4 <__divsf3_pse+0x86>
    5a96:	0c 94 af 2d 	jmp	0x5b5e	; 0x5b5e <__fp_inf>
    5a9a:	0c 94 fa 2d 	jmp	0x5bf4	; 0x5bf4 <__fp_szero>
    5a9e:	5f 3f       	cpi	r21, 0xFF	; 255
    5aa0:	e4 f3       	brlt	.-8      	; 0x5a9a <__divsf3_pse+0x6c>
    5aa2:	98 3e       	cpi	r25, 0xE8	; 232
    5aa4:	d4 f3       	brlt	.-12     	; 0x5a9a <__divsf3_pse+0x6c>
    5aa6:	86 95       	lsr	r24
    5aa8:	77 95       	ror	r23
    5aaa:	67 95       	ror	r22
    5aac:	b7 95       	ror	r27
    5aae:	f7 95       	ror	r31
    5ab0:	9f 5f       	subi	r25, 0xFF	; 255
    5ab2:	c9 f7       	brne	.-14     	; 0x5aa6 <__divsf3_pse+0x78>
    5ab4:	88 0f       	add	r24, r24
    5ab6:	91 1d       	adc	r25, r1
    5ab8:	96 95       	lsr	r25
    5aba:	87 95       	ror	r24
    5abc:	97 f9       	bld	r25, 7
    5abe:	08 95       	ret
    5ac0:	e1 e0       	ldi	r30, 0x01	; 1
    5ac2:	66 0f       	add	r22, r22
    5ac4:	77 1f       	adc	r23, r23
    5ac6:	88 1f       	adc	r24, r24
    5ac8:	bb 1f       	adc	r27, r27
    5aca:	62 17       	cp	r22, r18
    5acc:	73 07       	cpc	r23, r19
    5ace:	84 07       	cpc	r24, r20
    5ad0:	ba 07       	cpc	r27, r26
    5ad2:	20 f0       	brcs	.+8      	; 0x5adc <__divsf3_pse+0xae>
    5ad4:	62 1b       	sub	r22, r18
    5ad6:	73 0b       	sbc	r23, r19
    5ad8:	84 0b       	sbc	r24, r20
    5ada:	ba 0b       	sbc	r27, r26
    5adc:	ee 1f       	adc	r30, r30
    5ade:	88 f7       	brcc	.-30     	; 0x5ac2 <__divsf3_pse+0x94>
    5ae0:	e0 95       	com	r30
    5ae2:	08 95       	ret

00005ae4 <__floatunsisf>:
    5ae4:	e8 94       	clt
    5ae6:	09 c0       	rjmp	.+18     	; 0x5afa <__floatsisf+0x12>

00005ae8 <__floatsisf>:
    5ae8:	97 fb       	bst	r25, 7
    5aea:	3e f4       	brtc	.+14     	; 0x5afa <__floatsisf+0x12>
    5aec:	90 95       	com	r25
    5aee:	80 95       	com	r24
    5af0:	70 95       	com	r23
    5af2:	61 95       	neg	r22
    5af4:	7f 4f       	sbci	r23, 0xFF	; 255
    5af6:	8f 4f       	sbci	r24, 0xFF	; 255
    5af8:	9f 4f       	sbci	r25, 0xFF	; 255
    5afa:	99 23       	and	r25, r25
    5afc:	a9 f0       	breq	.+42     	; 0x5b28 <__floatsisf+0x40>
    5afe:	f9 2f       	mov	r31, r25
    5b00:	96 e9       	ldi	r25, 0x96	; 150
    5b02:	bb 27       	eor	r27, r27
    5b04:	93 95       	inc	r25
    5b06:	f6 95       	lsr	r31
    5b08:	87 95       	ror	r24
    5b0a:	77 95       	ror	r23
    5b0c:	67 95       	ror	r22
    5b0e:	b7 95       	ror	r27
    5b10:	f1 11       	cpse	r31, r1
    5b12:	f8 cf       	rjmp	.-16     	; 0x5b04 <__floatsisf+0x1c>
    5b14:	fa f4       	brpl	.+62     	; 0x5b54 <__floatsisf+0x6c>
    5b16:	bb 0f       	add	r27, r27
    5b18:	11 f4       	brne	.+4      	; 0x5b1e <__floatsisf+0x36>
    5b1a:	60 ff       	sbrs	r22, 0
    5b1c:	1b c0       	rjmp	.+54     	; 0x5b54 <__floatsisf+0x6c>
    5b1e:	6f 5f       	subi	r22, 0xFF	; 255
    5b20:	7f 4f       	sbci	r23, 0xFF	; 255
    5b22:	8f 4f       	sbci	r24, 0xFF	; 255
    5b24:	9f 4f       	sbci	r25, 0xFF	; 255
    5b26:	16 c0       	rjmp	.+44     	; 0x5b54 <__floatsisf+0x6c>
    5b28:	88 23       	and	r24, r24
    5b2a:	11 f0       	breq	.+4      	; 0x5b30 <__floatsisf+0x48>
    5b2c:	96 e9       	ldi	r25, 0x96	; 150
    5b2e:	11 c0       	rjmp	.+34     	; 0x5b52 <__floatsisf+0x6a>
    5b30:	77 23       	and	r23, r23
    5b32:	21 f0       	breq	.+8      	; 0x5b3c <__floatsisf+0x54>
    5b34:	9e e8       	ldi	r25, 0x8E	; 142
    5b36:	87 2f       	mov	r24, r23
    5b38:	76 2f       	mov	r23, r22
    5b3a:	05 c0       	rjmp	.+10     	; 0x5b46 <__floatsisf+0x5e>
    5b3c:	66 23       	and	r22, r22
    5b3e:	71 f0       	breq	.+28     	; 0x5b5c <__floatsisf+0x74>
    5b40:	96 e8       	ldi	r25, 0x86	; 134
    5b42:	86 2f       	mov	r24, r22
    5b44:	70 e0       	ldi	r23, 0x00	; 0
    5b46:	60 e0       	ldi	r22, 0x00	; 0
    5b48:	2a f0       	brmi	.+10     	; 0x5b54 <__floatsisf+0x6c>
    5b4a:	9a 95       	dec	r25
    5b4c:	66 0f       	add	r22, r22
    5b4e:	77 1f       	adc	r23, r23
    5b50:	88 1f       	adc	r24, r24
    5b52:	da f7       	brpl	.-10     	; 0x5b4a <__floatsisf+0x62>
    5b54:	88 0f       	add	r24, r24
    5b56:	96 95       	lsr	r25
    5b58:	87 95       	ror	r24
    5b5a:	97 f9       	bld	r25, 7
    5b5c:	08 95       	ret

00005b5e <__fp_inf>:
    5b5e:	97 f9       	bld	r25, 7
    5b60:	9f 67       	ori	r25, 0x7F	; 127
    5b62:	80 e8       	ldi	r24, 0x80	; 128
    5b64:	70 e0       	ldi	r23, 0x00	; 0
    5b66:	60 e0       	ldi	r22, 0x00	; 0
    5b68:	08 95       	ret

00005b6a <__fp_nan>:
    5b6a:	9f ef       	ldi	r25, 0xFF	; 255
    5b6c:	80 ec       	ldi	r24, 0xC0	; 192
    5b6e:	08 95       	ret

00005b70 <__fp_pscA>:
    5b70:	00 24       	eor	r0, r0
    5b72:	0a 94       	dec	r0
    5b74:	16 16       	cp	r1, r22
    5b76:	17 06       	cpc	r1, r23
    5b78:	18 06       	cpc	r1, r24
    5b7a:	09 06       	cpc	r0, r25
    5b7c:	08 95       	ret

00005b7e <__fp_pscB>:
    5b7e:	00 24       	eor	r0, r0
    5b80:	0a 94       	dec	r0
    5b82:	12 16       	cp	r1, r18
    5b84:	13 06       	cpc	r1, r19
    5b86:	14 06       	cpc	r1, r20
    5b88:	05 06       	cpc	r0, r21
    5b8a:	08 95       	ret

00005b8c <__fp_round>:
    5b8c:	09 2e       	mov	r0, r25
    5b8e:	03 94       	inc	r0
    5b90:	00 0c       	add	r0, r0
    5b92:	11 f4       	brne	.+4      	; 0x5b98 <__fp_round+0xc>
    5b94:	88 23       	and	r24, r24
    5b96:	52 f0       	brmi	.+20     	; 0x5bac <__fp_round+0x20>
    5b98:	bb 0f       	add	r27, r27
    5b9a:	40 f4       	brcc	.+16     	; 0x5bac <__fp_round+0x20>
    5b9c:	bf 2b       	or	r27, r31
    5b9e:	11 f4       	brne	.+4      	; 0x5ba4 <__fp_round+0x18>
    5ba0:	60 ff       	sbrs	r22, 0
    5ba2:	04 c0       	rjmp	.+8      	; 0x5bac <__fp_round+0x20>
    5ba4:	6f 5f       	subi	r22, 0xFF	; 255
    5ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    5baa:	9f 4f       	sbci	r25, 0xFF	; 255
    5bac:	08 95       	ret

00005bae <__fp_split3>:
    5bae:	57 fd       	sbrc	r21, 7
    5bb0:	90 58       	subi	r25, 0x80	; 128
    5bb2:	44 0f       	add	r20, r20
    5bb4:	55 1f       	adc	r21, r21
    5bb6:	59 f0       	breq	.+22     	; 0x5bce <__fp_splitA+0x10>
    5bb8:	5f 3f       	cpi	r21, 0xFF	; 255
    5bba:	71 f0       	breq	.+28     	; 0x5bd8 <__fp_splitA+0x1a>
    5bbc:	47 95       	ror	r20

00005bbe <__fp_splitA>:
    5bbe:	88 0f       	add	r24, r24
    5bc0:	97 fb       	bst	r25, 7
    5bc2:	99 1f       	adc	r25, r25
    5bc4:	61 f0       	breq	.+24     	; 0x5bde <__fp_splitA+0x20>
    5bc6:	9f 3f       	cpi	r25, 0xFF	; 255
    5bc8:	79 f0       	breq	.+30     	; 0x5be8 <__fp_splitA+0x2a>
    5bca:	87 95       	ror	r24
    5bcc:	08 95       	ret
    5bce:	12 16       	cp	r1, r18
    5bd0:	13 06       	cpc	r1, r19
    5bd2:	14 06       	cpc	r1, r20
    5bd4:	55 1f       	adc	r21, r21
    5bd6:	f2 cf       	rjmp	.-28     	; 0x5bbc <__fp_split3+0xe>
    5bd8:	46 95       	lsr	r20
    5bda:	f1 df       	rcall	.-30     	; 0x5bbe <__fp_splitA>
    5bdc:	08 c0       	rjmp	.+16     	; 0x5bee <__fp_splitA+0x30>
    5bde:	16 16       	cp	r1, r22
    5be0:	17 06       	cpc	r1, r23
    5be2:	18 06       	cpc	r1, r24
    5be4:	99 1f       	adc	r25, r25
    5be6:	f1 cf       	rjmp	.-30     	; 0x5bca <__fp_splitA+0xc>
    5be8:	86 95       	lsr	r24
    5bea:	71 05       	cpc	r23, r1
    5bec:	61 05       	cpc	r22, r1
    5bee:	08 94       	sec
    5bf0:	08 95       	ret

00005bf2 <__fp_zero>:
    5bf2:	e8 94       	clt

00005bf4 <__fp_szero>:
    5bf4:	bb 27       	eor	r27, r27
    5bf6:	66 27       	eor	r22, r22
    5bf8:	77 27       	eor	r23, r23
    5bfa:	cb 01       	movw	r24, r22
    5bfc:	97 f9       	bld	r25, 7
    5bfe:	08 95       	ret

00005c00 <__mulsf3>:
    5c00:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__mulsf3x>
    5c04:	0c 94 c6 2d 	jmp	0x5b8c	; 0x5b8c <__fp_round>
    5c08:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <__fp_pscA>
    5c0c:	38 f0       	brcs	.+14     	; 0x5c1c <__mulsf3+0x1c>
    5c0e:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <__fp_pscB>
    5c12:	20 f0       	brcs	.+8      	; 0x5c1c <__mulsf3+0x1c>
    5c14:	95 23       	and	r25, r21
    5c16:	11 f0       	breq	.+4      	; 0x5c1c <__mulsf3+0x1c>
    5c18:	0c 94 af 2d 	jmp	0x5b5e	; 0x5b5e <__fp_inf>
    5c1c:	0c 94 b5 2d 	jmp	0x5b6a	; 0x5b6a <__fp_nan>
    5c20:	11 24       	eor	r1, r1
    5c22:	0c 94 fa 2d 	jmp	0x5bf4	; 0x5bf4 <__fp_szero>

00005c26 <__mulsf3x>:
    5c26:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <__fp_split3>
    5c2a:	70 f3       	brcs	.-36     	; 0x5c08 <__mulsf3+0x8>

00005c2c <__mulsf3_pse>:
    5c2c:	95 9f       	mul	r25, r21
    5c2e:	c1 f3       	breq	.-16     	; 0x5c20 <__mulsf3+0x20>
    5c30:	95 0f       	add	r25, r21
    5c32:	50 e0       	ldi	r21, 0x00	; 0
    5c34:	55 1f       	adc	r21, r21
    5c36:	62 9f       	mul	r22, r18
    5c38:	f0 01       	movw	r30, r0
    5c3a:	72 9f       	mul	r23, r18
    5c3c:	bb 27       	eor	r27, r27
    5c3e:	f0 0d       	add	r31, r0
    5c40:	b1 1d       	adc	r27, r1
    5c42:	63 9f       	mul	r22, r19
    5c44:	aa 27       	eor	r26, r26
    5c46:	f0 0d       	add	r31, r0
    5c48:	b1 1d       	adc	r27, r1
    5c4a:	aa 1f       	adc	r26, r26
    5c4c:	64 9f       	mul	r22, r20
    5c4e:	66 27       	eor	r22, r22
    5c50:	b0 0d       	add	r27, r0
    5c52:	a1 1d       	adc	r26, r1
    5c54:	66 1f       	adc	r22, r22
    5c56:	82 9f       	mul	r24, r18
    5c58:	22 27       	eor	r18, r18
    5c5a:	b0 0d       	add	r27, r0
    5c5c:	a1 1d       	adc	r26, r1
    5c5e:	62 1f       	adc	r22, r18
    5c60:	73 9f       	mul	r23, r19
    5c62:	b0 0d       	add	r27, r0
    5c64:	a1 1d       	adc	r26, r1
    5c66:	62 1f       	adc	r22, r18
    5c68:	83 9f       	mul	r24, r19
    5c6a:	a0 0d       	add	r26, r0
    5c6c:	61 1d       	adc	r22, r1
    5c6e:	22 1f       	adc	r18, r18
    5c70:	74 9f       	mul	r23, r20
    5c72:	33 27       	eor	r19, r19
    5c74:	a0 0d       	add	r26, r0
    5c76:	61 1d       	adc	r22, r1
    5c78:	23 1f       	adc	r18, r19
    5c7a:	84 9f       	mul	r24, r20
    5c7c:	60 0d       	add	r22, r0
    5c7e:	21 1d       	adc	r18, r1
    5c80:	82 2f       	mov	r24, r18
    5c82:	76 2f       	mov	r23, r22
    5c84:	6a 2f       	mov	r22, r26
    5c86:	11 24       	eor	r1, r1
    5c88:	9f 57       	subi	r25, 0x7F	; 127
    5c8a:	50 40       	sbci	r21, 0x00	; 0
    5c8c:	9a f0       	brmi	.+38     	; 0x5cb4 <__mulsf3_pse+0x88>
    5c8e:	f1 f0       	breq	.+60     	; 0x5ccc <__mulsf3_pse+0xa0>
    5c90:	88 23       	and	r24, r24
    5c92:	4a f0       	brmi	.+18     	; 0x5ca6 <__mulsf3_pse+0x7a>
    5c94:	ee 0f       	add	r30, r30
    5c96:	ff 1f       	adc	r31, r31
    5c98:	bb 1f       	adc	r27, r27
    5c9a:	66 1f       	adc	r22, r22
    5c9c:	77 1f       	adc	r23, r23
    5c9e:	88 1f       	adc	r24, r24
    5ca0:	91 50       	subi	r25, 0x01	; 1
    5ca2:	50 40       	sbci	r21, 0x00	; 0
    5ca4:	a9 f7       	brne	.-22     	; 0x5c90 <__mulsf3_pse+0x64>
    5ca6:	9e 3f       	cpi	r25, 0xFE	; 254
    5ca8:	51 05       	cpc	r21, r1
    5caa:	80 f0       	brcs	.+32     	; 0x5ccc <__mulsf3_pse+0xa0>
    5cac:	0c 94 af 2d 	jmp	0x5b5e	; 0x5b5e <__fp_inf>
    5cb0:	0c 94 fa 2d 	jmp	0x5bf4	; 0x5bf4 <__fp_szero>
    5cb4:	5f 3f       	cpi	r21, 0xFF	; 255
    5cb6:	e4 f3       	brlt	.-8      	; 0x5cb0 <__mulsf3_pse+0x84>
    5cb8:	98 3e       	cpi	r25, 0xE8	; 232
    5cba:	d4 f3       	brlt	.-12     	; 0x5cb0 <__mulsf3_pse+0x84>
    5cbc:	86 95       	lsr	r24
    5cbe:	77 95       	ror	r23
    5cc0:	67 95       	ror	r22
    5cc2:	b7 95       	ror	r27
    5cc4:	f7 95       	ror	r31
    5cc6:	e7 95       	ror	r30
    5cc8:	9f 5f       	subi	r25, 0xFF	; 255
    5cca:	c1 f7       	brne	.-16     	; 0x5cbc <__mulsf3_pse+0x90>
    5ccc:	fe 2b       	or	r31, r30
    5cce:	88 0f       	add	r24, r24
    5cd0:	91 1d       	adc	r25, r1
    5cd2:	96 95       	lsr	r25
    5cd4:	87 95       	ror	r24
    5cd6:	97 f9       	bld	r25, 7
    5cd8:	08 95       	ret

00005cda <__udivmodsi4>:
    5cda:	a1 e2       	ldi	r26, 0x21	; 33
    5cdc:	1a 2e       	mov	r1, r26
    5cde:	aa 1b       	sub	r26, r26
    5ce0:	bb 1b       	sub	r27, r27
    5ce2:	fd 01       	movw	r30, r26
    5ce4:	0d c0       	rjmp	.+26     	; 0x5d00 <__udivmodsi4_ep>

00005ce6 <__udivmodsi4_loop>:
    5ce6:	aa 1f       	adc	r26, r26
    5ce8:	bb 1f       	adc	r27, r27
    5cea:	ee 1f       	adc	r30, r30
    5cec:	ff 1f       	adc	r31, r31
    5cee:	a2 17       	cp	r26, r18
    5cf0:	b3 07       	cpc	r27, r19
    5cf2:	e4 07       	cpc	r30, r20
    5cf4:	f5 07       	cpc	r31, r21
    5cf6:	20 f0       	brcs	.+8      	; 0x5d00 <__udivmodsi4_ep>
    5cf8:	a2 1b       	sub	r26, r18
    5cfa:	b3 0b       	sbc	r27, r19
    5cfc:	e4 0b       	sbc	r30, r20
    5cfe:	f5 0b       	sbc	r31, r21

00005d00 <__udivmodsi4_ep>:
    5d00:	66 1f       	adc	r22, r22
    5d02:	77 1f       	adc	r23, r23
    5d04:	88 1f       	adc	r24, r24
    5d06:	99 1f       	adc	r25, r25
    5d08:	1a 94       	dec	r1
    5d0a:	69 f7       	brne	.-38     	; 0x5ce6 <__udivmodsi4_loop>
    5d0c:	60 95       	com	r22
    5d0e:	70 95       	com	r23
    5d10:	80 95       	com	r24
    5d12:	90 95       	com	r25
    5d14:	9b 01       	movw	r18, r22
    5d16:	ac 01       	movw	r20, r24
    5d18:	bd 01       	movw	r22, r26
    5d1a:	cf 01       	movw	r24, r30
    5d1c:	08 95       	ret

00005d1e <__tablejump2__>:
    5d1e:	ee 0f       	add	r30, r30
    5d20:	ff 1f       	adc	r31, r31
    5d22:	88 1f       	adc	r24, r24
    5d24:	8b bf       	out	0x3b, r24	; 59
    5d26:	07 90       	elpm	r0, Z+
    5d28:	f6 91       	elpm	r31, Z
    5d2a:	e0 2d       	mov	r30, r0
    5d2c:	19 94       	eijmp

00005d2e <__umulhisi3>:
    5d2e:	a2 9f       	mul	r26, r18
    5d30:	b0 01       	movw	r22, r0
    5d32:	b3 9f       	mul	r27, r19
    5d34:	c0 01       	movw	r24, r0
    5d36:	a3 9f       	mul	r26, r19
    5d38:	70 0d       	add	r23, r0
    5d3a:	81 1d       	adc	r24, r1
    5d3c:	11 24       	eor	r1, r1
    5d3e:	91 1d       	adc	r25, r1
    5d40:	b2 9f       	mul	r27, r18
    5d42:	70 0d       	add	r23, r0
    5d44:	81 1d       	adc	r24, r1
    5d46:	11 24       	eor	r1, r1
    5d48:	91 1d       	adc	r25, r1
    5d4a:	08 95       	ret

00005d4c <__muluhisi3>:
    5d4c:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <__umulhisi3>
    5d50:	a5 9f       	mul	r26, r21
    5d52:	90 0d       	add	r25, r0
    5d54:	b4 9f       	mul	r27, r20
    5d56:	90 0d       	add	r25, r0
    5d58:	a4 9f       	mul	r26, r20
    5d5a:	80 0d       	add	r24, r0
    5d5c:	91 1d       	adc	r25, r1
    5d5e:	11 24       	eor	r1, r1
    5d60:	08 95       	ret

00005d62 <__ftoa_engine>:
    5d62:	28 30       	cpi	r18, 0x08	; 8
    5d64:	08 f0       	brcs	.+2      	; 0x5d68 <__ftoa_engine+0x6>
    5d66:	27 e0       	ldi	r18, 0x07	; 7
    5d68:	33 27       	eor	r19, r19
    5d6a:	da 01       	movw	r26, r20
    5d6c:	99 0f       	add	r25, r25
    5d6e:	31 1d       	adc	r19, r1
    5d70:	87 fd       	sbrc	r24, 7
    5d72:	91 60       	ori	r25, 0x01	; 1
    5d74:	00 96       	adiw	r24, 0x00	; 0
    5d76:	61 05       	cpc	r22, r1
    5d78:	71 05       	cpc	r23, r1
    5d7a:	39 f4       	brne	.+14     	; 0x5d8a <__ftoa_engine+0x28>
    5d7c:	32 60       	ori	r19, 0x02	; 2
    5d7e:	2e 5f       	subi	r18, 0xFE	; 254
    5d80:	3d 93       	st	X+, r19
    5d82:	30 e3       	ldi	r19, 0x30	; 48
    5d84:	2a 95       	dec	r18
    5d86:	e1 f7       	brne	.-8      	; 0x5d80 <__ftoa_engine+0x1e>
    5d88:	08 95       	ret
    5d8a:	9f 3f       	cpi	r25, 0xFF	; 255
    5d8c:	30 f0       	brcs	.+12     	; 0x5d9a <__ftoa_engine+0x38>
    5d8e:	80 38       	cpi	r24, 0x80	; 128
    5d90:	71 05       	cpc	r23, r1
    5d92:	61 05       	cpc	r22, r1
    5d94:	09 f0       	breq	.+2      	; 0x5d98 <__ftoa_engine+0x36>
    5d96:	3c 5f       	subi	r19, 0xFC	; 252
    5d98:	3c 5f       	subi	r19, 0xFC	; 252
    5d9a:	3d 93       	st	X+, r19
    5d9c:	91 30       	cpi	r25, 0x01	; 1
    5d9e:	08 f0       	brcs	.+2      	; 0x5da2 <__ftoa_engine+0x40>
    5da0:	80 68       	ori	r24, 0x80	; 128
    5da2:	91 1d       	adc	r25, r1
    5da4:	df 93       	push	r29
    5da6:	cf 93       	push	r28
    5da8:	1f 93       	push	r17
    5daa:	0f 93       	push	r16
    5dac:	ff 92       	push	r15
    5dae:	ef 92       	push	r14
    5db0:	19 2f       	mov	r17, r25
    5db2:	98 7f       	andi	r25, 0xF8	; 248
    5db4:	96 95       	lsr	r25
    5db6:	e9 2f       	mov	r30, r25
    5db8:	96 95       	lsr	r25
    5dba:	96 95       	lsr	r25
    5dbc:	e9 0f       	add	r30, r25
    5dbe:	ff 27       	eor	r31, r31
    5dc0:	ee 56       	subi	r30, 0x6E	; 110
    5dc2:	fa 4f       	sbci	r31, 0xFA	; 250
    5dc4:	99 27       	eor	r25, r25
    5dc6:	33 27       	eor	r19, r19
    5dc8:	ee 24       	eor	r14, r14
    5dca:	ff 24       	eor	r15, r15
    5dcc:	a7 01       	movw	r20, r14
    5dce:	e7 01       	movw	r28, r14
    5dd0:	05 90       	lpm	r0, Z+
    5dd2:	08 94       	sec
    5dd4:	07 94       	ror	r0
    5dd6:	28 f4       	brcc	.+10     	; 0x5de2 <__ftoa_engine+0x80>
    5dd8:	36 0f       	add	r19, r22
    5dda:	e7 1e       	adc	r14, r23
    5ddc:	f8 1e       	adc	r15, r24
    5dde:	49 1f       	adc	r20, r25
    5de0:	51 1d       	adc	r21, r1
    5de2:	66 0f       	add	r22, r22
    5de4:	77 1f       	adc	r23, r23
    5de6:	88 1f       	adc	r24, r24
    5de8:	99 1f       	adc	r25, r25
    5dea:	06 94       	lsr	r0
    5dec:	a1 f7       	brne	.-24     	; 0x5dd6 <__ftoa_engine+0x74>
    5dee:	05 90       	lpm	r0, Z+
    5df0:	07 94       	ror	r0
    5df2:	28 f4       	brcc	.+10     	; 0x5dfe <__ftoa_engine+0x9c>
    5df4:	e7 0e       	add	r14, r23
    5df6:	f8 1e       	adc	r15, r24
    5df8:	49 1f       	adc	r20, r25
    5dfa:	56 1f       	adc	r21, r22
    5dfc:	c1 1d       	adc	r28, r1
    5dfe:	77 0f       	add	r23, r23
    5e00:	88 1f       	adc	r24, r24
    5e02:	99 1f       	adc	r25, r25
    5e04:	66 1f       	adc	r22, r22
    5e06:	06 94       	lsr	r0
    5e08:	a1 f7       	brne	.-24     	; 0x5df2 <__ftoa_engine+0x90>
    5e0a:	05 90       	lpm	r0, Z+
    5e0c:	07 94       	ror	r0
    5e0e:	28 f4       	brcc	.+10     	; 0x5e1a <__ftoa_engine+0xb8>
    5e10:	f8 0e       	add	r15, r24
    5e12:	49 1f       	adc	r20, r25
    5e14:	56 1f       	adc	r21, r22
    5e16:	c7 1f       	adc	r28, r23
    5e18:	d1 1d       	adc	r29, r1
    5e1a:	88 0f       	add	r24, r24
    5e1c:	99 1f       	adc	r25, r25
    5e1e:	66 1f       	adc	r22, r22
    5e20:	77 1f       	adc	r23, r23
    5e22:	06 94       	lsr	r0
    5e24:	a1 f7       	brne	.-24     	; 0x5e0e <__ftoa_engine+0xac>
    5e26:	05 90       	lpm	r0, Z+
    5e28:	07 94       	ror	r0
    5e2a:	20 f4       	brcc	.+8      	; 0x5e34 <__ftoa_engine+0xd2>
    5e2c:	49 0f       	add	r20, r25
    5e2e:	56 1f       	adc	r21, r22
    5e30:	c7 1f       	adc	r28, r23
    5e32:	d8 1f       	adc	r29, r24
    5e34:	99 0f       	add	r25, r25
    5e36:	66 1f       	adc	r22, r22
    5e38:	77 1f       	adc	r23, r23
    5e3a:	88 1f       	adc	r24, r24
    5e3c:	06 94       	lsr	r0
    5e3e:	a9 f7       	brne	.-22     	; 0x5e2a <__ftoa_engine+0xc8>
    5e40:	84 91       	lpm	r24, Z
    5e42:	10 95       	com	r17
    5e44:	17 70       	andi	r17, 0x07	; 7
    5e46:	41 f0       	breq	.+16     	; 0x5e58 <__ftoa_engine+0xf6>
    5e48:	d6 95       	lsr	r29
    5e4a:	c7 95       	ror	r28
    5e4c:	57 95       	ror	r21
    5e4e:	47 95       	ror	r20
    5e50:	f7 94       	ror	r15
    5e52:	e7 94       	ror	r14
    5e54:	1a 95       	dec	r17
    5e56:	c1 f7       	brne	.-16     	; 0x5e48 <__ftoa_engine+0xe6>
    5e58:	e8 e3       	ldi	r30, 0x38	; 56
    5e5a:	f5 e0       	ldi	r31, 0x05	; 5
    5e5c:	68 94       	set
    5e5e:	15 90       	lpm	r1, Z+
    5e60:	15 91       	lpm	r17, Z+
    5e62:	35 91       	lpm	r19, Z+
    5e64:	65 91       	lpm	r22, Z+
    5e66:	95 91       	lpm	r25, Z+
    5e68:	05 90       	lpm	r0, Z+
    5e6a:	7f e2       	ldi	r23, 0x2F	; 47
    5e6c:	73 95       	inc	r23
    5e6e:	e1 18       	sub	r14, r1
    5e70:	f1 0a       	sbc	r15, r17
    5e72:	43 0b       	sbc	r20, r19
    5e74:	56 0b       	sbc	r21, r22
    5e76:	c9 0b       	sbc	r28, r25
    5e78:	d0 09       	sbc	r29, r0
    5e7a:	c0 f7       	brcc	.-16     	; 0x5e6c <__ftoa_engine+0x10a>
    5e7c:	e1 0c       	add	r14, r1
    5e7e:	f1 1e       	adc	r15, r17
    5e80:	43 1f       	adc	r20, r19
    5e82:	56 1f       	adc	r21, r22
    5e84:	c9 1f       	adc	r28, r25
    5e86:	d0 1d       	adc	r29, r0
    5e88:	7e f4       	brtc	.+30     	; 0x5ea8 <__ftoa_engine+0x146>
    5e8a:	70 33       	cpi	r23, 0x30	; 48
    5e8c:	11 f4       	brne	.+4      	; 0x5e92 <__ftoa_engine+0x130>
    5e8e:	8a 95       	dec	r24
    5e90:	e6 cf       	rjmp	.-52     	; 0x5e5e <__ftoa_engine+0xfc>
    5e92:	e8 94       	clt
    5e94:	01 50       	subi	r16, 0x01	; 1
    5e96:	30 f0       	brcs	.+12     	; 0x5ea4 <__ftoa_engine+0x142>
    5e98:	08 0f       	add	r16, r24
    5e9a:	0a f4       	brpl	.+2      	; 0x5e9e <__ftoa_engine+0x13c>
    5e9c:	00 27       	eor	r16, r16
    5e9e:	02 17       	cp	r16, r18
    5ea0:	08 f4       	brcc	.+2      	; 0x5ea4 <__ftoa_engine+0x142>
    5ea2:	20 2f       	mov	r18, r16
    5ea4:	23 95       	inc	r18
    5ea6:	02 2f       	mov	r16, r18
    5ea8:	7a 33       	cpi	r23, 0x3A	; 58
    5eaa:	28 f0       	brcs	.+10     	; 0x5eb6 <__ftoa_engine+0x154>
    5eac:	79 e3       	ldi	r23, 0x39	; 57
    5eae:	7d 93       	st	X+, r23
    5eb0:	2a 95       	dec	r18
    5eb2:	e9 f7       	brne	.-6      	; 0x5eae <__ftoa_engine+0x14c>
    5eb4:	10 c0       	rjmp	.+32     	; 0x5ed6 <__ftoa_engine+0x174>
    5eb6:	7d 93       	st	X+, r23
    5eb8:	2a 95       	dec	r18
    5eba:	89 f6       	brne	.-94     	; 0x5e5e <__ftoa_engine+0xfc>
    5ebc:	06 94       	lsr	r0
    5ebe:	97 95       	ror	r25
    5ec0:	67 95       	ror	r22
    5ec2:	37 95       	ror	r19
    5ec4:	17 95       	ror	r17
    5ec6:	17 94       	ror	r1
    5ec8:	e1 18       	sub	r14, r1
    5eca:	f1 0a       	sbc	r15, r17
    5ecc:	43 0b       	sbc	r20, r19
    5ece:	56 0b       	sbc	r21, r22
    5ed0:	c9 0b       	sbc	r28, r25
    5ed2:	d0 09       	sbc	r29, r0
    5ed4:	98 f0       	brcs	.+38     	; 0x5efc <__ftoa_engine+0x19a>
    5ed6:	23 95       	inc	r18
    5ed8:	7e 91       	ld	r23, -X
    5eda:	73 95       	inc	r23
    5edc:	7a 33       	cpi	r23, 0x3A	; 58
    5ede:	08 f0       	brcs	.+2      	; 0x5ee2 <__ftoa_engine+0x180>
    5ee0:	70 e3       	ldi	r23, 0x30	; 48
    5ee2:	7c 93       	st	X, r23
    5ee4:	20 13       	cpse	r18, r16
    5ee6:	b8 f7       	brcc	.-18     	; 0x5ed6 <__ftoa_engine+0x174>
    5ee8:	7e 91       	ld	r23, -X
    5eea:	70 61       	ori	r23, 0x10	; 16
    5eec:	7d 93       	st	X+, r23
    5eee:	30 f0       	brcs	.+12     	; 0x5efc <__ftoa_engine+0x19a>
    5ef0:	83 95       	inc	r24
    5ef2:	71 e3       	ldi	r23, 0x31	; 49
    5ef4:	7d 93       	st	X+, r23
    5ef6:	70 e3       	ldi	r23, 0x30	; 48
    5ef8:	2a 95       	dec	r18
    5efa:	e1 f7       	brne	.-8      	; 0x5ef4 <__ftoa_engine+0x192>
    5efc:	11 24       	eor	r1, r1
    5efe:	ef 90       	pop	r14
    5f00:	ff 90       	pop	r15
    5f02:	0f 91       	pop	r16
    5f04:	1f 91       	pop	r17
    5f06:	cf 91       	pop	r28
    5f08:	df 91       	pop	r29
    5f0a:	99 27       	eor	r25, r25
    5f0c:	87 fd       	sbrc	r24, 7
    5f0e:	90 95       	com	r25
    5f10:	08 95       	ret

00005f12 <memcpy>:
    5f12:	fb 01       	movw	r30, r22
    5f14:	dc 01       	movw	r26, r24
    5f16:	02 c0       	rjmp	.+4      	; 0x5f1c <memcpy+0xa>
    5f18:	01 90       	ld	r0, Z+
    5f1a:	0d 92       	st	X+, r0
    5f1c:	41 50       	subi	r20, 0x01	; 1
    5f1e:	50 40       	sbci	r21, 0x00	; 0
    5f20:	d8 f7       	brcc	.-10     	; 0x5f18 <memcpy+0x6>
    5f22:	08 95       	ret

00005f24 <memset>:
    5f24:	dc 01       	movw	r26, r24
    5f26:	01 c0       	rjmp	.+2      	; 0x5f2a <memset+0x6>
    5f28:	6d 93       	st	X+, r22
    5f2a:	41 50       	subi	r20, 0x01	; 1
    5f2c:	50 40       	sbci	r21, 0x00	; 0
    5f2e:	e0 f7       	brcc	.-8      	; 0x5f28 <memset+0x4>
    5f30:	08 95       	ret

00005f32 <strncpy>:
    5f32:	fb 01       	movw	r30, r22
    5f34:	dc 01       	movw	r26, r24
    5f36:	41 50       	subi	r20, 0x01	; 1
    5f38:	50 40       	sbci	r21, 0x00	; 0
    5f3a:	48 f0       	brcs	.+18     	; 0x5f4e <strncpy+0x1c>
    5f3c:	01 90       	ld	r0, Z+
    5f3e:	0d 92       	st	X+, r0
    5f40:	00 20       	and	r0, r0
    5f42:	c9 f7       	brne	.-14     	; 0x5f36 <strncpy+0x4>
    5f44:	01 c0       	rjmp	.+2      	; 0x5f48 <strncpy+0x16>
    5f46:	1d 92       	st	X+, r1
    5f48:	41 50       	subi	r20, 0x01	; 1
    5f4a:	50 40       	sbci	r21, 0x00	; 0
    5f4c:	e0 f7       	brcc	.-8      	; 0x5f46 <strncpy+0x14>
    5f4e:	08 95       	ret

00005f50 <__itoa_ncheck>:
    5f50:	bb 27       	eor	r27, r27
    5f52:	4a 30       	cpi	r20, 0x0A	; 10
    5f54:	31 f4       	brne	.+12     	; 0x5f62 <__itoa_ncheck+0x12>
    5f56:	99 23       	and	r25, r25
    5f58:	22 f4       	brpl	.+8      	; 0x5f62 <__itoa_ncheck+0x12>
    5f5a:	bd e2       	ldi	r27, 0x2D	; 45
    5f5c:	90 95       	com	r25
    5f5e:	81 95       	neg	r24
    5f60:	9f 4f       	sbci	r25, 0xFF	; 255
    5f62:	0c 94 ec 2f 	jmp	0x5fd8	; 0x5fd8 <__utoa_common>

00005f66 <ultoa>:
    5f66:	25 32       	cpi	r18, 0x25	; 37
    5f68:	31 05       	cpc	r19, r1
    5f6a:	20 f4       	brcc	.+8      	; 0x5f74 <ultoa+0xe>
    5f6c:	22 30       	cpi	r18, 0x02	; 2
    5f6e:	10 f0       	brcs	.+4      	; 0x5f74 <ultoa+0xe>
    5f70:	0c 94 be 2f 	jmp	0x5f7c	; 0x5f7c <__ultoa_ncheck>
    5f74:	fa 01       	movw	r30, r20
    5f76:	10 82       	st	Z, r1
    5f78:	ca 01       	movw	r24, r20
    5f7a:	08 95       	ret

00005f7c <__ultoa_ncheck>:
    5f7c:	bb 27       	eor	r27, r27

00005f7e <__ultoa_common>:
    5f7e:	fa 01       	movw	r30, r20
    5f80:	a6 2f       	mov	r26, r22
    5f82:	62 17       	cp	r22, r18
    5f84:	71 05       	cpc	r23, r1
    5f86:	81 05       	cpc	r24, r1
    5f88:	91 05       	cpc	r25, r1
    5f8a:	33 0b       	sbc	r19, r19
    5f8c:	30 fb       	bst	r19, 0
    5f8e:	66 f0       	brts	.+24     	; 0x5fa8 <__ultoa_common+0x2a>
    5f90:	aa 27       	eor	r26, r26
    5f92:	66 0f       	add	r22, r22
    5f94:	77 1f       	adc	r23, r23
    5f96:	88 1f       	adc	r24, r24
    5f98:	99 1f       	adc	r25, r25
    5f9a:	aa 1f       	adc	r26, r26
    5f9c:	a2 17       	cp	r26, r18
    5f9e:	10 f0       	brcs	.+4      	; 0x5fa4 <__ultoa_common+0x26>
    5fa0:	a2 1b       	sub	r26, r18
    5fa2:	63 95       	inc	r22
    5fa4:	38 50       	subi	r19, 0x08	; 8
    5fa6:	a9 f7       	brne	.-22     	; 0x5f92 <__ultoa_common+0x14>
    5fa8:	a0 5d       	subi	r26, 0xD0	; 208
    5faa:	aa 33       	cpi	r26, 0x3A	; 58
    5fac:	08 f0       	brcs	.+2      	; 0x5fb0 <__ultoa_common+0x32>
    5fae:	a9 5d       	subi	r26, 0xD9	; 217
    5fb0:	a1 93       	st	Z+, r26
    5fb2:	36 f7       	brtc	.-52     	; 0x5f80 <__ultoa_common+0x2>
    5fb4:	b1 11       	cpse	r27, r1
    5fb6:	b1 93       	st	Z+, r27
    5fb8:	10 82       	st	Z, r1
    5fba:	ca 01       	movw	r24, r20
    5fbc:	0c 94 05 30 	jmp	0x600a	; 0x600a <strrev>

00005fc0 <utoa>:
    5fc0:	45 32       	cpi	r20, 0x25	; 37
    5fc2:	51 05       	cpc	r21, r1
    5fc4:	20 f4       	brcc	.+8      	; 0x5fce <utoa+0xe>
    5fc6:	42 30       	cpi	r20, 0x02	; 2
    5fc8:	10 f0       	brcs	.+4      	; 0x5fce <utoa+0xe>
    5fca:	0c 94 eb 2f 	jmp	0x5fd6	; 0x5fd6 <__utoa_ncheck>
    5fce:	fb 01       	movw	r30, r22
    5fd0:	10 82       	st	Z, r1
    5fd2:	cb 01       	movw	r24, r22
    5fd4:	08 95       	ret

00005fd6 <__utoa_ncheck>:
    5fd6:	bb 27       	eor	r27, r27

00005fd8 <__utoa_common>:
    5fd8:	fb 01       	movw	r30, r22
    5fda:	55 27       	eor	r21, r21
    5fdc:	aa 27       	eor	r26, r26
    5fde:	88 0f       	add	r24, r24
    5fe0:	99 1f       	adc	r25, r25
    5fe2:	aa 1f       	adc	r26, r26
    5fe4:	a4 17       	cp	r26, r20
    5fe6:	10 f0       	brcs	.+4      	; 0x5fec <__utoa_common+0x14>
    5fe8:	a4 1b       	sub	r26, r20
    5fea:	83 95       	inc	r24
    5fec:	50 51       	subi	r21, 0x10	; 16
    5fee:	b9 f7       	brne	.-18     	; 0x5fde <__utoa_common+0x6>
    5ff0:	a0 5d       	subi	r26, 0xD0	; 208
    5ff2:	aa 33       	cpi	r26, 0x3A	; 58
    5ff4:	08 f0       	brcs	.+2      	; 0x5ff8 <__utoa_common+0x20>
    5ff6:	a9 5d       	subi	r26, 0xD9	; 217
    5ff8:	a1 93       	st	Z+, r26
    5ffa:	00 97       	sbiw	r24, 0x00	; 0
    5ffc:	79 f7       	brne	.-34     	; 0x5fdc <__utoa_common+0x4>
    5ffe:	b1 11       	cpse	r27, r1
    6000:	b1 93       	st	Z+, r27
    6002:	11 92       	st	Z+, r1
    6004:	cb 01       	movw	r24, r22
    6006:	0c 94 05 30 	jmp	0x600a	; 0x600a <strrev>

0000600a <strrev>:
    600a:	dc 01       	movw	r26, r24
    600c:	fc 01       	movw	r30, r24
    600e:	67 2f       	mov	r22, r23
    6010:	71 91       	ld	r23, Z+
    6012:	77 23       	and	r23, r23
    6014:	e1 f7       	brne	.-8      	; 0x600e <strrev+0x4>
    6016:	32 97       	sbiw	r30, 0x02	; 2
    6018:	04 c0       	rjmp	.+8      	; 0x6022 <strrev+0x18>
    601a:	7c 91       	ld	r23, X
    601c:	6d 93       	st	X+, r22
    601e:	70 83       	st	Z, r23
    6020:	62 91       	ld	r22, -Z
    6022:	ae 17       	cp	r26, r30
    6024:	bf 07       	cpc	r27, r31
    6026:	c8 f3       	brcs	.-14     	; 0x601a <strrev+0x10>
    6028:	08 95       	ret

0000602a <_exit>:
    602a:	f8 94       	cli

0000602c <__stop_program>:
    602c:	ff cf       	rjmp	.-2      	; 0x602c <__stop_program>
