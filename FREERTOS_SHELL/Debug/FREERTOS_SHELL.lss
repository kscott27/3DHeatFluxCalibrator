
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004bea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00802000  00004bea  00004c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002115  00802096  00802096  00004d14  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00004d14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00004d74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006e0  00000000  00000000  00004db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000137cd  00000000  00000000  00005498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005de6  00000000  00000000  00018c65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000050ca  00000000  00000000  0001ea4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000177c  00000000  00000000  00023b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006d90  00000000  00000000  00025294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007094  00000000  00000000  0002c024  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000620  00000000  00000000  000330b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__ctors_end>
       4:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
       8:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
       c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      10:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      14:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      18:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      1c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      20:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      24:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      28:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      2c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      30:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      34:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      38:	0c 94 4e 12 	jmp	0x249c	; 0x249c <__vector_14>
      3c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      40:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__vector_16>
      44:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      48:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      4c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      50:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      54:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      58:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      5c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      60:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      64:	0c 94 1e 23 	jmp	0x463c	; 0x463c <__vector_25>
      68:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      6c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      70:	0c 94 76 23 	jmp	0x46ec	; 0x46ec <__vector_28>
      74:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      78:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      7c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      80:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      84:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      88:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      8c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      90:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      94:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      98:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      9c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      a0:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      a4:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      a8:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      ac:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__vector_43>
      b0:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <__vector_44>
      b4:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      b8:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      bc:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      c0:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      c4:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      c8:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      cc:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      d0:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      d4:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      d8:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      dc:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__vector_55>
      e0:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      e4:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      e8:	0c 94 7e 24 	jmp	0x48fc	; 0x48fc <__vector_58>
      ec:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      f0:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      f4:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      f8:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
      fc:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     100:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     104:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     108:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <__vector_66>
     10c:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__vector_67>
     110:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     114:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     118:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     11c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     120:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     124:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     128:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     12c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     130:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     134:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__vector_77>
     138:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     13c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     140:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     144:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     148:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__vector_82>
     14c:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__vector_83>
     150:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     154:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__vector_85>
     158:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     15c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     160:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__vector_88>
     164:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     168:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     16c:	0c 94 26 24 	jmp	0x484c	; 0x484c <__vector_91>
     170:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     174:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     178:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     17c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     180:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     184:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     188:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     18c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     190:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     194:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     198:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     19c:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1a0:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__vector_104>
     1a4:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__vector_105>
     1a8:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1ac:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1b0:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1b4:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1b8:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1bc:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1c0:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1c4:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1c8:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1cc:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1d0:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1d4:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1d8:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1dc:	0c 94 d6 24 	jmp	0x49ac	; 0x49ac <__vector_119>
     1e0:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1e4:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1e8:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1ec:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1f0:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1f4:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1f8:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__bad_interrupt>
     1fc:	db 07       	cpc	r29, r27
     1fe:	8b 0d       	add	r24, r11
     200:	52 08       	sbc	r5, r2
     202:	69 08       	sbc	r6, r9
     204:	0f 08       	sbc	r0, r15
     206:	8b 0d       	add	r24, r11
     208:	8b 0d       	add	r24, r11
     20a:	8b 0d       	add	r24, r11
     20c:	3b 08       	sbc	r3, r11
     20e:	8b 0d       	add	r24, r11
     210:	8b 0d       	add	r24, r11
     212:	8b 0d       	add	r24, r11
     214:	8b 0d       	add	r24, r11
     216:	8b 0d       	add	r24, r11
     218:	f9 07       	cpc	r31, r25
     21a:	85 08       	sbc	r8, r5
     21c:	8b 0d       	add	r24, r11
     21e:	77 08       	sbc	r7, r7
     220:	7c 08       	sbc	r7, r12
     222:	bb 09       	sbc	r27, r11
     224:	8b 0d       	add	r24, r11
     226:	8b 0d       	add	r24, r11
     228:	8b 0d       	add	r24, r11
     22a:	dd 09       	sbc	r29, r13
     22c:	eb 09       	sbc	r30, r11
     22e:	f7 09       	sbc	r31, r7
     230:	03 0a       	sbc	r0, r19
     232:	0f 0a       	sbc	r0, r31
     234:	1b 0a       	sbc	r1, r27
     236:	27 0a       	sbc	r2, r23
     238:	33 0a       	sbc	r3, r19
     23a:	3f 0a       	sbc	r3, r31
     23c:	4b 0a       	sbc	r4, r27
     23e:	8b 0d       	add	r24, r11
     240:	8b 0d       	add	r24, r11
     242:	8b 0d       	add	r24, r11
     244:	8b 0d       	add	r24, r11
     246:	8b 0d       	add	r24, r11
     248:	8b 0d       	add	r24, r11
     24a:	8b 0d       	add	r24, r11
     24c:	8b 0d       	add	r24, r11
     24e:	8b 0d       	add	r24, r11
     250:	8b 0d       	add	r24, r11
     252:	8b 0d       	add	r24, r11
     254:	8b 0d       	add	r24, r11
     256:	8b 0d       	add	r24, r11
     258:	8b 0d       	add	r24, r11
     25a:	8b 0d       	add	r24, r11
     25c:	8b 0d       	add	r24, r11
     25e:	8b 0d       	add	r24, r11
     260:	8b 0d       	add	r24, r11
     262:	8b 0d       	add	r24, r11
     264:	8b 0d       	add	r24, r11
     266:	8b 0d       	add	r24, r11
     268:	8b 0d       	add	r24, r11
     26a:	8b 0d       	add	r24, r11
     26c:	8b 0d       	add	r24, r11
     26e:	8b 0d       	add	r24, r11
     270:	8b 0d       	add	r24, r11
     272:	8b 0d       	add	r24, r11
     274:	8b 0d       	add	r24, r11
     276:	8b 0d       	add	r24, r11
     278:	8b 0d       	add	r24, r11
     27a:	8b 0d       	add	r24, r11
     27c:	8b 0d       	add	r24, r11
     27e:	8b 0d       	add	r24, r11
     280:	8b 0d       	add	r24, r11
     282:	8b 0d       	add	r24, r11
     284:	8b 0d       	add	r24, r11
     286:	8b 0d       	add	r24, r11
     288:	8b 0d       	add	r24, r11
     28a:	8b 0d       	add	r24, r11
     28c:	41 09       	sbc	r20, r1
     28e:	8b 0d       	add	r24, r11
     290:	8b 0d       	add	r24, r11
     292:	8b 0d       	add	r24, r11
     294:	d5 08       	sbc	r13, r5
     296:	8b 0d       	add	r24, r11
     298:	a9 09       	sbc	r26, r9
     29a:	8b 0d       	add	r24, r11
     29c:	8b 0d       	add	r24, r11
     29e:	8b 0d       	add	r24, r11
     2a0:	8b 0d       	add	r24, r11
     2a2:	8b 0d       	add	r24, r11
     2a4:	8b 0d       	add	r24, r11
     2a6:	8b 0d       	add	r24, r11
     2a8:	8b 0d       	add	r24, r11
     2aa:	8b 0d       	add	r24, r11
     2ac:	8b 0d       	add	r24, r11
     2ae:	d0 08       	sbc	r13, r0
     2b0:	8b 0d       	add	r24, r11
     2b2:	8b 0d       	add	r24, r11
     2b4:	8b 0d       	add	r24, r11
     2b6:	8b 0d       	add	r24, r11
     2b8:	8b 0d       	add	r24, r11
     2ba:	58 09       	sbc	r21, r8
     2bc:	73 09       	sbc	r23, r3
     2be:	8e 09       	sbc	r24, r14
     2c0:	ba 0a       	sbc	r11, r26
     2c2:	c7 0a       	sbc	r12, r23
     2c4:	8b 0d       	add	r24, r11
     2c6:	8b 0d       	add	r24, r11
     2c8:	8b 0d       	add	r24, r11
     2ca:	8b 0d       	add	r24, r11
     2cc:	8b 0d       	add	r24, r11
     2ce:	8b 0d       	add	r24, r11
     2d0:	8b 0d       	add	r24, r11
     2d2:	8b 0d       	add	r24, r11
     2d4:	8b 0d       	add	r24, r11
     2d6:	8b 0d       	add	r24, r11
     2d8:	8b 0d       	add	r24, r11
     2da:	f1 0a       	sbc	r15, r17
     2dc:	1b 0b       	sbc	r17, r27
     2de:	8b 0d       	add	r24, r11
     2e0:	8b 0d       	add	r24, r11
     2e2:	8b 0d       	add	r24, r11
     2e4:	8b 0d       	add	r24, r11
     2e6:	a8 0a       	sbc	r10, r24
     2e8:	ae 0a       	sbc	r10, r30
     2ea:	b4 0a       	sbc	r11, r20
     2ec:	7d 0c       	add	r7, r13
     2ee:	8b 0d       	add	r24, r11
     2f0:	8b 0d       	add	r24, r11
     2f2:	8b 0d       	add	r24, r11
     2f4:	f3 0c       	add	r15, r3
     2f6:	ff 0c       	add	r15, r15
     2f8:	0b 0d       	add	r16, r11
     2fa:	17 0d       	add	r17, r7
     2fc:	23 0d       	add	r18, r3
     2fe:	2f 0d       	add	r18, r15
     300:	3b 0d       	add	r19, r11
     302:	47 0d       	add	r20, r7
     304:	53 0d       	add	r21, r3
     306:	5f 0d       	add	r21, r15
     308:	8b 0d       	add	r24, r11
     30a:	8b 0d       	add	r24, r11
     30c:	8b 0d       	add	r24, r11
     30e:	8b 0d       	add	r24, r11
     310:	8b 0d       	add	r24, r11
     312:	8b 0d       	add	r24, r11
     314:	8b 0d       	add	r24, r11
     316:	8b 0d       	add	r24, r11
     318:	8b 0d       	add	r24, r11
     31a:	8b 0d       	add	r24, r11
     31c:	8b 0d       	add	r24, r11
     31e:	8b 0d       	add	r24, r11
     320:	8b 0d       	add	r24, r11
     322:	8b 0d       	add	r24, r11
     324:	8b 0d       	add	r24, r11
     326:	8b 0d       	add	r24, r11
     328:	8b 0d       	add	r24, r11
     32a:	8b 0d       	add	r24, r11
     32c:	8b 0d       	add	r24, r11
     32e:	8b 0d       	add	r24, r11
     330:	8b 0d       	add	r24, r11
     332:	8b 0d       	add	r24, r11
     334:	8b 0d       	add	r24, r11
     336:	8b 0d       	add	r24, r11
     338:	8b 0d       	add	r24, r11
     33a:	8b 0d       	add	r24, r11
     33c:	8b 0d       	add	r24, r11
     33e:	8b 0d       	add	r24, r11
     340:	8b 0d       	add	r24, r11
     342:	8b 0d       	add	r24, r11
     344:	8b 0d       	add	r24, r11
     346:	8b 0d       	add	r24, r11
     348:	8b 0d       	add	r24, r11
     34a:	8b 0d       	add	r24, r11
     34c:	8b 0d       	add	r24, r11
     34e:	8b 0d       	add	r24, r11
     350:	8b 0d       	add	r24, r11
     352:	8b 0d       	add	r24, r11
     354:	8b 0d       	add	r24, r11
     356:	03 0c       	add	r0, r3
     358:	8b 0d       	add	r24, r11
     35a:	8b 0d       	add	r24, r11
     35c:	8b 0d       	add	r24, r11
     35e:	e4 0b       	sbc	r30, r20
     360:	8b 0d       	add	r24, r11
     362:	8b 0d       	add	r24, r11
     364:	8b 0d       	add	r24, r11
     366:	8b 0d       	add	r24, r11
     368:	8b 0d       	add	r24, r11
     36a:	8b 0d       	add	r24, r11
     36c:	8b 0d       	add	r24, r11
     36e:	8b 0d       	add	r24, r11
     370:	d9 0c       	add	r13, r9
     372:	8b 0d       	add	r24, r11
     374:	8b 0d       	add	r24, r11
     376:	8b 0d       	add	r24, r11
     378:	8b 0d       	add	r24, r11
     37a:	c1 0c       	add	r12, r1
     37c:	8b 0d       	add	r24, r11
     37e:	a7 0c       	add	r10, r7
     380:	75 0b       	sbc	r23, r21
     382:	8b 0d       	add	r24, r11
     384:	8d 0b       	sbc	r24, r29
     386:	aa 0b       	sbc	r26, r26
     388:	c7 0b       	sbc	r28, r23
     38a:	f9 20       	and	r15, r9
     38c:	fc 20       	and	r15, r12
     38e:	ff 20       	and	r15, r15
     390:	02 21       	and	r16, r2
     392:	05 21       	and	r16, r5
     394:	08 21       	and	r16, r8
     396:	0a 21       	and	r16, r10
     398:	1b 21       	and	r17, r11
     39a:	23 21       	and	r18, r3
     39c:	2d 21       	and	r18, r13
     39e:	2b 21       	and	r18, r11

000003a0 <__trampolines_start>:
     3a0:	0c 94 84 22 	jmp	0x4508	; 0x4508 <_ZN5rs23212clear_screenEv>
     3a4:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <_ZN9task_user3runEv+0x936>
     3a8:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <_ZN9task_user3runEv+0x1d4>
     3ac:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <_ZN9frt_queueImE7butt_inERKm>
     3b0:	0c 94 8e 09 	jmp	0x131c	; 0x131c <_ZN9task_user3runEv+0x44c>
     3b4:	0c 94 9e 20 	jmp	0x413c	; 0x413c <_ZN8emstream7getcharEv>
     3b8:	0c 94 bb 0d 	jmp	0x1b76	; 0x1b76 <_ZN9frt_queueImE12num_items_inEv>
     3bc:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <_GLOBAL__sub_I_counter>
     3c0:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <_ZN9frt_queueImE10get_a_copyEv>
     3c4:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <_ZN9task_user3runEv+0x81a>
     3c8:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <_ZN9task_user3runEv+0x8f8>
     3cc:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <_ZN9frt_queueImE7ISR_getEPm>
     3d0:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <_ZN9task_user3runEv+0x712>
     3d4:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <_ZN9frt_queueImE3putERKm>
     3d8:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <_ZN9task_user3runEv+0x416>
     3dc:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <_ZN9task_user3runEv+0x4ea>
     3e0:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <_ZN8emstreamlsE15ser_manipulator+0x82>
     3e4:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <_ZN9task_user3runEv+0xb5e>
     3e8:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <_ZN9task_user3runEv+0xb76>
     3ec:	0c 94 08 21 	jmp	0x4210	; 0x4210 <_ZN8emstreamlsE15ser_manipulator+0x3c>
     3f0:	0c 94 1b 21 	jmp	0x4236	; 0x4236 <_ZN8emstreamlsE15ser_manipulator+0x62>
     3f4:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <_ZN9task_user3runEv+0xb8e>
     3f8:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <_ZN9frt_queueImE7ISR_getEv>
     3fc:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <_ZN9task_user3runEv+0x122>
     400:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <__cxa_pure_virtual>
     404:	0c 94 76 06 	jmp	0xcec	; 0xcec <_call_static_run_method>
     408:	0c 94 05 21 	jmp	0x420a	; 0x420a <_ZN8emstreamlsE15ser_manipulator+0x36>
     40c:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <_ZN9task_user3runEv+0x54e>
     410:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <_ZN9task_user3runEv+0x2d0>
     414:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <_ZN9task_user3runEv+0xbee>
     418:	0c 94 68 07 	jmp	0xed0	; 0xed0 <_ZN9task_user3runEv>
     41c:	0c 94 7c 1f 	jmp	0x3ef8	; 0x3ef8 <_ZN14frt_text_queue7getcharEv>
     420:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <_ZN9task_user3runEv+0xc46>
     424:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <_ZN9task_user3runEv+0x566>
     428:	0c 94 a4 20 	jmp	0x4148	; 0x4148 <_ZN8emstream12clear_screenEv>
     42c:	0c 94 02 21 	jmp	0x4204	; 0x4204 <_ZN8emstreamlsE15ser_manipulator+0x30>
     430:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <_ZN9task_user3runEv+0x596>
     434:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <_ZN9task_user3runEv+0xa2a>
     438:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <_ZN9frt_queueImE8is_emptyEv>
     43c:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <_ZN9task_user3runEv+0x202>
     440:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <_ZN9task_user3runEv+0x698>
     444:	0c 94 9a 1f 	jmp	0x3f34	; 0x3f34 <_ZN14frt_text_queue14check_for_charEv>
     448:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <_ZN9task_user3runEv+0xab2>
     44c:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <_ZN9frt_queueImE3getEPm>
     450:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <_ZN9task_user3runEv+0x8be>
     454:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <_ZN9task_user3runEv+0x506>
     458:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <_ZN8frt_task12print_statusER8emstream>
     45c:	0c 94 f9 20 	jmp	0x41f2	; 0x41f2 <_ZN8emstreamlsE15ser_manipulator+0x1e>
     460:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <_ZN9task_user3runEv+0xbd6>
     464:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <_ZN9frt_queueImE3getEv>
     468:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <_ZN9task_user3runEv+0x5ae>
     46c:	0c 94 a3 20 	jmp	0x4146	; 0x4146 <_ZN8emstream12transmit_nowEv>
     470:	0c 94 27 0a 	jmp	0x144e	; 0x144e <_ZN9task_user3runEv+0x57e>
     474:	0c 94 a5 1f 	jmp	0x3f4a	; 0x3f4a <_ZN14frt_text_queue7putcharEc>
     478:	0c 94 4b 22 	jmp	0x4496	; 0x4496 <_ZN5rs2327getcharEv>
     47c:	0c 94 fc 20 	jmp	0x41f8	; 0x41f8 <_ZN8emstreamlsE15ser_manipulator+0x24>
     480:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <prvIdleTask>
     484:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <_ZN9task_user3runEv+0x1a6>
     488:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <_ZN9task_user3runEv+0x4a6>
     48c:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <_ZN9frt_queueImE9not_emptyEv>
     490:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <_ZN9task_user3runEv+0x5c6>
     494:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <_ZN9task_user3runEv+0x3e0>
     498:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <_ZN8emstreamlsE15ser_manipulator+0x2a>
     49c:	0c 94 41 09 	jmp	0x1282	; 0x1282 <_ZN9task_user3runEv+0x3b2>
     4a0:	0c 94 3b 0d 	jmp	0x1a76	; 0x1a76 <_ZN9task_user3runEv+0xba6>
     4a4:	0c 94 2d 21 	jmp	0x425a	; 0x425a <_ZN8emstreamlsE15ser_manipulator+0x86>
     4a8:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <_ZN9task_user3runEv+0x482>
     4ac:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <_ZN9frt_queueImE11ISR_butt_inERKm>
     4b0:	0c 94 9f 0d 	jmp	0x1b3e	; 0x1b3e <_ZN9frt_queueImE16ISR_num_items_inEv>
     4b4:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <_ZN9task_user3runEv+0x766>
     4b8:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <_ZN9task_user3runEv+0xbbe>
     4bc:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <_ZN9frt_queueImE13ISR_not_emptyEv>
     4c0:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <_ZN9task_user3runEv+0x6be>
     4c4:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <_ZN9task_user3runEv+0x51e>
     4c8:	0c 94 0f 08 	jmp	0x101e	; 0x101e <_ZN9task_user3runEv+0x14e>
     4cc:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <_ZN9task_user3runEv+0x2da>
     4d0:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <_ZN9task_user3runEv+0x6a4>
     4d4:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <_ZN9task_user3runEv+0x884>
     4d8:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <_ZN9task_user3runEv+0x536>
     4dc:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <_ZN9task_user3runEv+0xe6>
     4e0:	0c 94 b1 0d 	jmp	0x1b62	; 0x1b62 <_ZN9frt_queueImE12ISR_is_emptyEv>
     4e4:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <_ZN8emstream13ready_to_sendEv>
     4e8:	0c 94 a1 20 	jmp	0x4142	; 0x4142 <_ZN8emstream14check_for_charEv>
     4ec:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <_ZN9task_user3runEv+0x21e>
     4f0:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <_ZN9task_user3runEv+0x228>
     4f4:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <_ZN9task_user3runEv+0xb16>
     4f8:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <_ZN9task_user3runEv+0xae2>
     4fc:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <_ZN9task_user3runEv+0xb2e>
     500:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <_ZN9frt_queueImE7ISR_putERKm>
     504:	0c 94 23 21 	jmp	0x4246	; 0x4246 <_ZN8emstreamlsE15ser_manipulator+0x72>
     508:	0c 94 27 22 	jmp	0x444e	; 0x444e <_ZN5rs2327putcharEc>
     50c:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <_ZN9frt_queueImE10get_a_copyERm>
     510:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <_ZN9task_user3runEv+0x84a>
     514:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <_ZN9task_user3runEv+0x68c>
     518:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <_ZN9task_user3runEv+0xa7e>
     51c:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <_ZN9task_user3runEv+0xb46>
     520:	0c 94 0a 21 	jmp	0x4214	; 0x4214 <_ZN8emstreamlsE15ser_manipulator+0x40>
     524:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <_ZN5rs23214check_for_charEv>
     528:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <_ZN9task_user3runEv+0x680>
     52c:	0c 94 85 08 	jmp	0x110a	; 0x110a <_ZN9task_user3runEv+0x23a>

00000530 <__trampolines_end>:
     530:	2c 20       	and	r2, r12
     532:	54 43       	sbci	r21, 0x34	; 52
     534:	43 30       	cpi	r20, 0x03	; 3
     536:	43 43       	sbci	r20, 0x33	; 51
     538:	41 3d       	cpi	r20, 0xD1	; 209
	...

0000053b <_ZZN9task_user11show_statusEvE3__c_3>:
     53b:	2f 00                                               /.

0000053d <_ZZN9task_user11show_statusEvE3__c_2>:
     53d:	2c 20 48 65 61 70 20 66 72 65 65 3a 20 00           , Heap free: .

0000054b <_ZZN9task_user11show_statusEvE3__c_1>:
     54b:	54 69 6d 65 3a 20 00                                Time: .

00000552 <_ZZN9task_user11show_statusEvE3__c_0>:
     552:	4f 63 74 20 31 31 20 32 30 31 38 00                 Oct 11 2018.

0000055e <_ZZN9task_user11show_statusEvE3__c>:
     55e:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     56e:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000057d <_ZZN9task_user18print_help_messageEvE3__c_10>:
     57d:	20 20 20 20 68 3a 20 20 20 48 41 4c 50 21 00            h:   HALP!.

0000058c <_ZZN9task_user18print_help_messageEvE3__c_9>:
     58c:	20 20 20 20 65 3a 20 20 20 45 78 69 74 20 63 6f         e:   Exit co
     59c:	6d 6d 61 6e 64 20 6d 6f 64 65 00                    mmand mode.

000005a7 <_ZZN9task_user18print_help_messageEvE3__c_8>:
     5a7:	20 20 20 20 73 3a 20 20 20 53 74 61 63 6b 20 64         s:   Stack d
     5b7:	75 6d 70 20 66 6f 72 20 74 61 73 6b 73 00           ump for tasks.

000005c5 <_ZZN9task_user18print_help_messageEvE3__c_7>:
     5c5:	20 20 20 20 76 3a 20 20 20 56 65 72 73 69 6f 6e         v:   Version
     5d5:	20 61 6e 64 20 73 65 74 75 70 20 69 6e 66 6f 72      and setup infor
     5e5:	6d 61 74 69 6f 6e 00                                mation.

000005ec <_ZZN9task_user18print_help_messageEvE3__c_6>:
     5ec:	20 20 20 20 6e 3a 20 20 20 53 68 6f 77 20 74 68         n:   Show th
     5fc:	65 20 74 69 6d 65 20 72 69 67 68 74 20 6e 6f 77     e time right now
	...

0000060d <_ZZN9task_user18print_help_messageEvE3__c_5>:
     60d:	20 20 49 6e 20 63 6f 6d 6d 61 6e 64 20 6d 6f 64       In command mod
     61d:	65 20 6f 6e 6c 79 3a 00                             e only:.

00000625 <_ZZN9task_user18print_help_messageEvE3__c_4>:
     625:	20 20 43 74 6c 2d 41 3a 20 45 6e 74 65 72 20 63       Ctl-A: Enter c
     635:	6f 6d 6d 61 6e 64 20 6d 6f 64 65 00                 ommand mode.

00000641 <_ZZN9task_user18print_help_messageEvE3__c_3>:
     641:	20 20 43 74 6c 2d 43 3a 20 52 65 73 65 74 20 74       Ctl-C: Reset t
     651:	68 65 20 41 56 52 00                                he AVR.

00000658 <_ZZN9task_user18print_help_messageEvE3__c_2>:
     658:	20 68 65 6c 70 00                                    help.

0000065e <_ZZN9task_user18print_help_messageEvE3__c_1>:
     65e:	4d 45 34 30 35 20 62 61 73 65 20 72 61 64 69 6f     ME405 base radio
     66e:	20 70 72 6f 67 72 61 6d 20 56 30 2e 34 20 00         program V0.4 .

0000067d <_ZZN9task_user18print_help_messageEvE3__c_0>:
     67d:	1b 5b 33 30 6d 00                                   .[30m.

00000683 <_ZZN9task_user18print_help_messageEvE3__c>:
     683:	1b 5b 34 36 6d 00                                   .[46m.

00000689 <_ZZN9task_user3runEvE3__c_17>:
     689:	49 6c 6c 65 67 61 6c 20 73 74 61 74 65 21 20 52     Illegal state! R
     699:	65 73 65 74 74 69 6e 67 20 41 56 52 00              esetting AVR.

000006a6 <_ZZN9task_user3runEvE3__c_16>:
     6a6:	53 65 6e 73 6f 72 20 73 61 6d 70 6c 65 20 73 69     Sensor sample si
     6b6:	7a 65 20 73 65 74 20 74 6f 3a 00                    ze set to:.

000006c1 <_ZZN9task_user3runEvE3__c_15>:
     6c1:	53 65 6e 73 6f 72 20 64 65 6c 61 79 20 73 65 74     Sensor delay set
     6d1:	20 74 6f 3a 00                                       to:.

000006d6 <_ZZN9task_user3runEvE3__c_14>:
     6d6:	4d 69 63 72 6f 73 74 65 70 20 73 63 61 6c 65 72     Microstep scaler
     6e6:	20 73 65 74 20 74 6f 3a 00                           set to:.

000006ef <_ZZN9task_user3runEvE3__c_13>:
     6ef:	43 6f 6e 66 69 67 20 65 6e 74 65 72 65 64 3a 00     Config entered:.

000006ff <_ZZN9task_user3runEvE3__c_12>:
     6ff:	4c 65 61 76 69 6e 67 20 63 6f 6e 66 69 67 20 6d     Leaving config m
     70f:	6f 64 65 00                                         ode.

00000713 <_ZZN9task_user3runEvE3__c_11>:
     713:	5a 2d 61 78 69 73 20 6d 61 78 20 76 65 6c 6f 63     Z-axis max veloc
     723:	69 74 79 20 73 65 74 20 74 6f 3a 00                 ity set to:.

0000072f <_ZZN9task_user3runEvE3__c_10>:
     72f:	59 2d 61 78 69 73 20 6d 61 78 20 76 65 6c 6f 63     Y-axis max veloc
     73f:	69 74 79 20 73 65 74 20 74 6f 3a 00                 ity set to:.

0000074b <_ZZN9task_user3runEvE3__c_9>:
     74b:	58 2d 61 78 69 73 20 6d 61 78 20 76 65 6c 6f 63     X-axis max veloc
     75b:	69 74 79 20 73 65 74 20 74 6f 3a 00                 ity set to:.

00000767 <_ZZN9task_user3runEvE3__c_8>:
     767:	4d 61 78 20 76 65 6c 6f 63 69 74 79 20 73 65 74     Max velocity set
     777:	20 74 6f 3a 00                                       to:.

0000077c <_ZZN9task_user3runEvE3__c_7>:
     77c:	50 6c 65 61 73 65 20 63 68 6f 6f 73 65 20 74 68     Please choose th
     78c:	65 20 6d 6f 74 6f 72 20 79 6f 75 20 77 6f 75 6c     e motor you woul
     79c:	64 20 6c 69 6b 65 20 74 6f 20 63 6f 6e 74 72 6f     d like to contro
     7ac:	6c 2e 00                                            l..

000007af <_ZZN9task_user3runEvE3__c_6>:
     7af:	50 6c 65 61 73 65 20 63 68 6f 6f 73 65 20 74 68     Please choose th
     7bf:	65 20 6d 6f 74 6f 72 20 79 6f 75 20 77 6f 75 6c     e motor you woul
     7cf:	64 20 6c 69 6b 65 20 74 6f 20 63 6f 6e 74 72 6f     d like to contro
     7df:	6c 2e 00                                            l..

000007e2 <_ZZN9task_user3runEvE3__c_5>:
     7e2:	50 6c 65 61 73 65 20 63 68 6f 6f 73 65 20 74 68     Please choose th
     7f2:	65 20 6d 6f 74 6f 72 20 79 6f 75 20 77 6f 75 6c     e motor you woul
     802:	64 20 6c 69 6b 65 20 74 6f 20 63 6f 6e 74 72 6f     d like to contro
     812:	6c 2e 00                                            l..

00000815 <_ZZN9task_user3runEvE3__c_4>:
     815:	52 65 63 65 69 76 69 6e 67 20 5a 2d 6c 6f 63 61     Receiving Z-loca
     825:	74 69 6f 6e 73 2e 00                                tions..

0000082c <_ZZN9task_user3runEvE3__c_3>:
     82c:	52 65 63 65 69 76 69 6e 67 20 59 2d 6c 6f 63 61     Receiving Y-loca
     83c:	74 69 6f 6e 73 2e 00                                tions..

00000843 <_ZZN9task_user3runEvE3__c_2>:
     843:	52 65 63 65 69 76 69 6e 67 20 58 2d 6c 6f 63 61     Receiving X-loca
     853:	74 69 6f 6e 73 2e 00                                tions..

0000085a <_ZZN9task_user3runEvE3__c_1>:
     85a:	45 72 72 6f 72 3a 20 55 6e 65 71 75 61 6c 20 61     Error: Unequal a
     86a:	78 69 73 20 63 6f 6f 72 64 69 6e 61 74 65 20 76     xis coordinate v
     87a:	65 63 74 6f 72 73 2e 00                             ectors..

00000882 <_ZZN9task_user3runEvE3__c_0>:
     882:	54 6f 74 61 6c 20 6e 6f 64 65 73 3a 20 00           Total nodes: .

00000890 <_ZZN9task_user3runEvE3__c>:
     890:	45 6e 74 65 72 69 6e 67 20 63 6f 6e 66 69 67 20     Entering config 
     8a0:	6d 6f 64 65 00                                      mode.

000008a5 <_ZZN9task_user12reset_deviceEvE3__c>:
     8a5:	52 65 73 65 74 74 69 6e 67 20 64 65 76 69 63 65     Resetting device
     8b5:	2e 00                                               ..

000008b7 <_ZZN9task_user24print_dir_motor_commandsEvE3__c_1>:
     8b7:	50 72 65 73 73 20 43 74 72 6c 2d 53 20 74 6f 20     Press Ctrl-S to 
     8c7:	73 74 6f 70 2e 00                                   stop..

000008cd <_ZZN9task_user24print_dir_motor_commandsEvE3__c_0>:
     8cd:	50 72 65 73 73 20 43 74 72 6c 2d 52 20 74 6f 20     Press Ctrl-R to 
     8dd:	61 63 74 69 76 61 74 65 20 72 65 76 65 72 73 65     activate reverse
     8ed:	2e 00                                               ..

000008ef <_ZZN9task_user24print_dir_motor_commandsEvE3__c>:
     8ef:	50 72 65 73 73 20 43 74 72 6c 2d 46 20 74 6f 20     Press Ctrl-F to 
     8ff:	61 63 74 69 76 61 74 65 20 66 6f 72 77 61 72 64     activate forward
     90f:	2e 00                                               ..

00000911 <_ZZN9task_user19print_dir_mode_menuEvE3__c_2>:
     911:	50 72 65 73 73 20 43 74 72 6c 2d 5a 20 66 6f 72     Press Ctrl-Z for
     921:	20 5a 2d 4d 6f 74 6f 72 20 63 6f 6d 6d 61 6e 64      Z-Motor command
     931:	73 2e 00                                            s..

00000934 <_ZZN9task_user19print_dir_mode_menuEvE3__c_1>:
     934:	50 72 65 73 73 20 43 74 72 6c 2d 59 20 66 6f 72     Press Ctrl-Y for
     944:	20 59 2d 4d 6f 74 6f 72 20 63 6f 6d 6d 61 6e 64      Y-Motor command
     954:	73 2e 00                                            s..

00000957 <_ZZN9task_user19print_dir_mode_menuEvE3__c_0>:
     957:	50 72 65 73 73 20 43 74 72 6c 2d 58 20 66 6f 72     Press Ctrl-X for
     967:	20 58 2d 4d 6f 74 6f 72 20 63 6f 6d 6d 61 6e 64      X-Motor command
     977:	73 2e 00                                            s..

0000097a <_ZZN9task_user19print_dir_mode_menuEvE3__c>:
     97a:	45 6e 74 65 72 69 6e 67 20 44 69 72 65 63 74 20     Entering Direct 
     98a:	4f 70 65 72 61 74 69 6f 6e 20 4d 6f 64 65 2e 00     Operation Mode..

0000099a <_ZZN9task_user21print_coord_mode_menuEvE3__c_5>:
     99a:	50 72 65 73 73 20 45 20 74 6f 20 72 65 74 75 72     Press E to retur
     9aa:	6e 20 74 6f 20 74 68 65 20 6d 61 69 6e 20 6d 65     n to the main me
     9ba:	6e 75 2e 00                                         nu..

000009be <_ZZN9task_user21print_coord_mode_menuEvE3__c_4>:
     9be:	50 72 65 73 73 20 52 20 74 6f 20 72 65 73 65 74     Press R to reset
     9ce:	20 74 68 65 20 64 65 76 69 63 65 2e 00               the device..

000009db <_ZZN9task_user21print_coord_mode_menuEvE3__c_3>:
     9db:	50 72 65 73 73 20 47 20 74 6f 20 72 75 6e 20 74     Press G to run t
     9eb:	68 65 20 64 65 76 69 63 65 2e 00                    he device..

000009f6 <_ZZN9task_user21print_coord_mode_menuEvE3__c_2>:
     9f6:	50 72 65 73 73 20 5a 20 74 6f 20 65 6e 74 65 72     Press Z to enter
     a06:	20 5a 2d 63 6f 6f 72 64 69 6e 61 74 65 73 2e 00      Z-coordinates..

00000a16 <_ZZN9task_user21print_coord_mode_menuEvE3__c_1>:
     a16:	50 72 65 73 73 20 59 20 74 6f 20 65 6e 74 65 72     Press Y to enter
     a26:	20 59 2d 63 6f 6f 72 64 69 6e 61 74 65 73 2e 00      Y-coordinates..

00000a36 <_ZZN9task_user21print_coord_mode_menuEvE3__c_0>:
     a36:	50 72 65 73 73 20 58 20 74 6f 20 65 6e 74 65 72     Press X to enter
     a46:	20 58 2d 63 6f 6f 72 64 69 6e 61 74 65 73 2e 00      X-coordinates..

00000a56 <_ZZN9task_user21print_coord_mode_menuEvE3__c>:
     a56:	45 6e 74 65 72 69 6e 67 20 43 6f 6f 72 64 69 6e     Entering Coordin
     a66:	61 74 65 20 4d 6f 64 65 2e 00                       ate Mode..

00000a70 <_ZZN9task_user22print_config_mode_menuEvE3__c_4>:
     a70:	50 72 65 73 73 20 45 20 74 6f 20 72 65 74 75 72     Press E to retur
     a80:	6e 20 74 6f 20 74 68 65 20 6d 61 69 6e 20 6d 65     n to the main me
     a90:	6e 75 2e 00                                         nu..

00000a94 <_ZZN9task_user22print_config_mode_menuEvE3__c_3>:
     a94:	50 72 65 73 73 20 52 20 74 6f 20 72 65 73 65 74     Press R to reset
     aa4:	20 74 68 65 20 64 65 76 69 63 65 2e 00               the device..

00000ab1 <_ZZN9task_user22print_config_mode_menuEvE3__c_2>:
     ab1:	50 72 65 73 73 20 5a 20 74 6f 20 72 65 74 75 72     Press Z to retur
     ac1:	6e 20 74 68 65 20 64 65 76 69 63 65 20 74 6f 20     n the device to 
     ad1:	74 68 65 20 6f 72 69 67 69 6e 2e 00                 the origin..

00000add <_ZZN9task_user22print_config_mode_menuEvE3__c_1>:
     add:	50 72 65 73 73 20 53 20 74 6f 20 63 68 61 6e 67     Press S to chang
     aed:	65 20 74 68 65 20 64 65 66 61 75 6c 74 20 73 65     e the default se
     afd:	6e 73 6f 72 20 72 65 61 64 69 6e 67 20 64 65 6c     nsor reading del
     b0d:	61 79 20 74 69 6d 65 2e 00                          ay time..

00000b16 <_ZZN9task_user22print_config_mode_menuEvE3__c_0>:
     b16:	50 72 65 73 73 20 55 20 74 6f 20 63 68 61 6e 67     Press U to chang
     b26:	65 20 74 68 65 20 64 65 66 61 75 6c 74 20 6d 6f     e the default mo
     b36:	74 6f 72 20 6d 69 63 72 6f 73 74 65 70 20 73 63     tor microstep sc
     b46:	61 6c 65 72 2e 00                                   aler..

00000b4c <_ZZN9task_user22print_config_mode_menuEvE3__c>:
     b4c:	45 6e 74 65 72 69 6e 67 20 43 6f 6e 66 69 67 75     Entering Configu
     b5c:	72 61 74 69 6f 6e 20 4d 6f 64 65 2e 00              ration Mode..

00000b69 <_ZZN9task_user15print_main_menuEvE3__c_3>:
     b69:	50 72 65 73 73 20 52 20 74 6f 20 72 65 73 65 74     Press R to reset
     b79:	20 74 68 65 20 64 65 76 69 63 65 2e 00               the device..

00000b86 <_ZZN9task_user15print_main_menuEvE3__c_2>:
     b86:	50 72 65 73 73 20 44 20 66 6f 72 20 44 69 72 65     Press D for Dire
     b96:	63 74 20 4f 70 65 72 61 74 69 6f 6e 20 4d 6f 64     ct Operation Mod
     ba6:	65 2e 00                                            e..

00000ba9 <_ZZN9task_user15print_main_menuEvE3__c_1>:
     ba9:	50 72 65 73 73 20 43 20 66 6f 72 20 43 6f 6f 72     Press C for Coor
     bb9:	64 69 6e 61 74 65 20 4d 6f 64 65 2e 00              dinate Mode..

00000bc6 <_ZZN9task_user15print_main_menuEvE3__c_0>:
     bc6:	50 72 65 73 73 20 41 20 66 6f 72 20 43 6f 6e 66     Press A for Conf
     bd6:	69 67 75 72 61 74 69 6f 6e 20 4d 6f 64 65 2e 00     iguration Mode..

00000be6 <_ZZN9task_user15print_main_menuEvE3__c>:
     be6:	57 65 6c 63 6f 6d 65 20 74 6f 20 74 68 65 20 55     Welcome to the U
     bf6:	73 65 72 20 49 6e 74 65 72 66 61 63 65 20 6d 61     ser Interface ma
     c06:	69 6e 20 6d 65 6e 75 20 6f 66 20 74 68 65 20 33     in menu of the 3
     c16:	44 20 48 65 61 74 20 46 6c 75 78 20 43 61 6c 69     D Heat Flux Cali
     c26:	62 72 61 74 6f 72 2e 00                             brator..

00000c2e <_ZZN8frt_task15emergency_resetEvE3__c_0>:
     c2e:	52 65 73 65 74 74 69 6e 67 00                       Resetting.

00000c38 <_ZZN8frt_task15emergency_resetEvE3__c>:
     c38:	45 52 52 4f 52 20 69 6e 20 74 61 73 6b 20 00        ERROR in task .

00000c47 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_2>:
     c47:	45 52 52 4f 52 20 63 72 65 61 74 69 6e 67 20 74     ERROR creating t
     c57:	61 73 6b 20 00                                      ask .

00000c5c <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_1>:
     c5c:	2c 20 73 74 61 63 6b 20 61 74 20 30 78 00           , stack at 0x.

00000c6a <_ZZN8frt_taskC4EPKchjP8emstreamE3__c_0>:
     c6a:	20 63 72 65 61 74 65 64 00                           created.

00000c73 <_ZZN8frt_taskC4EPKchjP8emstreamE3__c>:
     c73:	54 61 73 6b 20 00                                   Task .

00000c79 <_ZZ15print_task_listP8emstreamE3__c_9>:
     c79:	09 09 00                                            ...

00000c7c <_ZZ15print_task_listP8emstreamE3__c_8>:
     c7c:	2f 00                                               /.

00000c7e <_ZZ15print_task_listP8emstreamE3__c_7>:
     c7e:	49 44 4c 45 09 09 30 09 2d 09 00                    IDLE..0.-..

00000c89 <_ZZ15print_task_listP8emstreamE3__c_6>:
     c89:	09 2d 2d 2d 2d 00                                   .----.

00000c8f <_ZZ15print_task_listP8emstreamE3__c_5>:
     c8f:	09 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                 .----------.

00000c9b <_ZZ15print_task_listP8emstreamE3__c_4>:
     c9b:	2d 2d 2d 2d 09 09 2d 2d 2d 2d 09 2d 2d 2d 2d 2d     ----..----.-----
	...

00000cac <_ZZ15print_task_listP8emstreamE3__c_3>:
     cac:	09 52 75 6e 73 00                                   .Runs.

00000cb2 <_ZZ15print_task_listP8emstreamE3__c_2>:
     cb2:	09 46 72 65 65 2f 54 6f 74 61 6c 00                 .Free/Total.

00000cbe <_ZZ15print_task_listP8emstreamE3__c_1>:
     cbe:	4e 61 6d 65 09 09 50 72 69 2e 09 53 74 61 74 65     Name..Pri..State
	...

00000ccf <_ZZ15print_task_listP8emstreamE3__c_0>:
     ccf:	09 53 74 61 63 6b 00                                .Stack.

00000cd6 <_ZZ15print_task_listP8emstreamE3__c>:
     cd6:	54 61 73 6b 09 09 20 20 09 20 00                    Task..  . .

00000ce1 <_ZZN8frt_task12print_statusER8emstreamE3__c_3>:
     ce1:	09 00                                               ..

00000ce3 <_ZZN8frt_task12print_statusER8emstreamE3__c_2>:
     ce3:	09 00                                               ..

00000ce5 <_ZZN8frt_task12print_statusER8emstreamE3__c_1>:
     ce5:	2f 00                                               /.

00000ce7 <_ZZN8frt_task12print_statusER8emstreamE3__c_0>:
     ce7:	09 00                                               ..

00000ce9 <_ZZN8frt_task12print_statusER8emstreamE3__c>:
     ce9:	09 00 00                                            ...

00000cec <_call_static_run_method>:
     cec:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <_ZN8frt_task22_call_users_run_methodEPS_>

00000cf0 <__ctors_start>:
     cf0:	a4 12       	cpse	r10, r20

00000cf2 <__ctors_end>:
     cf2:	11 24       	eor	r1, r1
     cf4:	1f be       	out	0x3f, r1	; 63
     cf6:	cf ef       	ldi	r28, 0xFF	; 255
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	df e5       	ldi	r29, 0x5F	; 95
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	00 e0       	ldi	r16, 0x00	; 0
     d00:	0c bf       	out	0x3c, r16	; 60

00000d02 <__do_copy_data>:
     d02:	10 e2       	ldi	r17, 0x20	; 32
     d04:	a0 e0       	ldi	r26, 0x00	; 0
     d06:	b0 e2       	ldi	r27, 0x20	; 32
     d08:	ea ee       	ldi	r30, 0xEA	; 234
     d0a:	fb e4       	ldi	r31, 0x4B	; 75
     d0c:	00 e0       	ldi	r16, 0x00	; 0
     d0e:	0b bf       	out	0x3b, r16	; 59
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <__do_copy_data+0x14>
     d12:	07 90       	elpm	r0, Z+
     d14:	0d 92       	st	X+, r0
     d16:	a6 39       	cpi	r26, 0x96	; 150
     d18:	b1 07       	cpc	r27, r17
     d1a:	d9 f7       	brne	.-10     	; 0xd12 <__do_copy_data+0x10>

00000d1c <__do_clear_bss>:
     d1c:	21 e4       	ldi	r18, 0x41	; 65
     d1e:	a6 e9       	ldi	r26, 0x96	; 150
     d20:	b0 e2       	ldi	r27, 0x20	; 32
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <.do_clear_bss_start>

00000d24 <.do_clear_bss_loop>:
     d24:	1d 92       	st	X+, r1

00000d26 <.do_clear_bss_start>:
     d26:	ab 3a       	cpi	r26, 0xAB	; 171
     d28:	b2 07       	cpc	r27, r18
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <.do_clear_bss_loop>

00000d2c <__do_global_ctors>:
     d2c:	16 e0       	ldi	r17, 0x06	; 6
     d2e:	c9 e7       	ldi	r28, 0x79	; 121
     d30:	d6 e0       	ldi	r29, 0x06	; 6
     d32:	00 e0       	ldi	r16, 0x00	; 0
     d34:	06 c0       	rjmp	.+12     	; 0xd42 <__do_global_ctors+0x16>
     d36:	21 97       	sbiw	r28, 0x01	; 1
     d38:	01 09       	sbc	r16, r1
     d3a:	80 2f       	mov	r24, r16
     d3c:	fe 01       	movw	r30, r28
     d3e:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <__tablejump2__>
     d42:	c8 37       	cpi	r28, 0x78	; 120
     d44:	d1 07       	cpc	r29, r17
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	08 07       	cpc	r16, r24
     d4a:	a9 f7       	brne	.-22     	; 0xd36 <__do_global_ctors+0xa>
     d4c:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <main>
     d50:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <_exit>

00000d54 <__bad_interrupt>:
     d54:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000d58 <_ZN12DeviceDriver6DM542T27min_bound_interrupt_handlerEv>:
  {
    timer_->low();
  }
  
  void DM542T::min_bound_interrupt_handler(void)
  {
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	ec 01       	movw	r28, r24
    if (get_direction() == 1)
     d5e:	e8 81       	ld	r30, Y
     d60:	f9 81       	ldd	r31, Y+1	; 0x01
     d62:	06 84       	ldd	r0, Z+14	; 0x0e
     d64:	f7 85       	ldd	r31, Z+15	; 0x0f
     d66:	e0 2d       	mov	r30, r0
     d68:	19 95       	eicall
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	59 f4       	brne	.+22     	; 0xd84 <_ZN12DeviceDriver6DM542T27min_bound_interrupt_handlerEv+0x2c>
    {
      motorOff();
     d6e:	e8 81       	ld	r30, Y
     d70:	f9 81       	ldd	r31, Y+1	; 0x01
     d72:	06 80       	ldd	r0, Z+6	; 0x06
     d74:	f7 81       	ldd	r31, Z+7	; 0x07
     d76:	e0 2d       	mov	r30, r0
     d78:	ce 01       	movw	r24, r28
     d7a:	19 95       	eicall
  
    void max_bound_interrupt_handler( ) ;
    
    virtual bool get_status(void);
  
    void reset_steps( ) { steps = 0 ; }
     d7c:	1a 82       	std	Y+2, r1	; 0x02
     d7e:	1b 82       	std	Y+3, r1	; 0x03
     d80:	1c 82       	std	Y+4, r1	; 0x04
     d82:	1d 82       	std	Y+5, r1	; 0x05
      reset_steps();
    }
  }
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <_ZN12DeviceDriver6DM542T27max_bound_interrupt_handlerEv>:
  
  void DM542T::max_bound_interrupt_handler(void)
  {
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	ec 01       	movw	r28, r24
    if (get_direction() == 0)
     d90:	e8 81       	ld	r30, Y
     d92:	f9 81       	ldd	r31, Y+1	; 0x01
     d94:	06 84       	ldd	r0, Z+14	; 0x0e
     d96:	f7 85       	ldd	r31, Z+15	; 0x0f
     d98:	e0 2d       	mov	r30, r0
     d9a:	19 95       	eicall
     d9c:	81 11       	cpse	r24, r1
     d9e:	07 c0       	rjmp	.+14     	; 0xdae <_ZN12DeviceDriver6DM542T27max_bound_interrupt_handlerEv+0x24>
    {
      motorOff();
     da0:	e8 81       	ld	r30, Y
     da2:	f9 81       	ldd	r31, Y+1	; 0x01
     da4:	06 80       	ldd	r0, Z+6	; 0x06
     da6:	f7 81       	ldd	r31, Z+7	; 0x07
     da8:	e0 2d       	mov	r30, r0
     daa:	ce 01       	movw	r24, r28
     dac:	19 95       	eicall
    }
  }
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	08 95       	ret

00000db4 <_ZN9task_userC1EPKchjP8emstream>:
	// Show how the timer/counter is set up to cause RTOS timer ticks
	*p_serial << PMS (", TCC0CCA=") << TCC0.CCA << endl << endl;

	// Have the tasks print their status
	print_task_list (p_serial);
}
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	ec 01       	movw	r28, r24
     dc2:	7b 01       	movw	r14, r22
     dc4:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <_ZN8frt_taskC1EPKchjP8emstream>
     dc8:	8a e0       	ldi	r24, 0x0A	; 10
     dca:	90 e2       	ldi	r25, 0x20	; 32
     dcc:	88 83       	st	Y, r24
     dce:	99 83       	std	Y+1, r25	; 0x01
     dd0:	fe 01       	movw	r30, r28
     dd2:	e0 5e       	subi	r30, 0xE0	; 224
     dd4:	fe 4f       	sbci	r31, 0xFE	; 254
     dd6:	e0 82       	st	Z, r14
     dd8:	f1 82       	std	Z+1, r15	; 0x01
     dda:	ce 5e       	subi	r28, 0xEE	; 238
     ddc:	de 4f       	sbci	r29, 0xFE	; 254
     dde:	18 82       	st	Y, r1
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	08 95       	ret

00000dee <_ZN9task_user10str_to_intEv>:
     dee:	bf 92       	push	r11
     df0:	cf 92       	push	r12
     df2:	df 92       	push	r13
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	fc 01       	movw	r30, r24
     e02:	dc 01       	movw	r26, r24
     e04:	ae 5e       	subi	r26, 0xEE	; 238
     e06:	be 4f       	sbci	r27, 0xFE	; 254
     e08:	2c 91       	ld	r18, X
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	21 50       	subi	r18, 0x01	; 1
     e0e:	31 09       	sbc	r19, r1
     e10:	12 16       	cp	r1, r18
     e12:	13 06       	cpc	r1, r19
     e14:	a4 f5       	brge	.+104    	; 0xe7e <_ZN9task_user10str_to_intEv+0x90>
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	b1 2c       	mov	r11, r1
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	cb 01       	movw	r24, r22
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	aa 1f       	adc	r26, r26
     e2c:	bb 1f       	adc	r27, r27
     e2e:	6c 01       	movw	r12, r24
     e30:	7d 01       	movw	r14, r26
     e32:	cc 0c       	add	r12, r12
     e34:	dd 1c       	adc	r13, r13
     e36:	ee 1c       	adc	r14, r14
     e38:	ff 1c       	adc	r15, r15
     e3a:	cc 0c       	add	r12, r12
     e3c:	dd 1c       	adc	r13, r13
     e3e:	ee 1c       	adc	r14, r14
     e40:	ff 1c       	adc	r15, r15
     e42:	8c 0d       	add	r24, r12
     e44:	9d 1d       	adc	r25, r13
     e46:	ae 1d       	adc	r26, r14
     e48:	bf 1d       	adc	r27, r15
     e4a:	4e 0f       	add	r20, r30
     e4c:	5f 1f       	adc	r21, r31
     e4e:	ea 01       	movw	r28, r20
     e50:	4a 89       	ldd	r20, Y+18	; 0x12
     e52:	50 e0       	ldi	r21, 0x00	; 0
     e54:	40 53       	subi	r20, 0x30	; 48
     e56:	51 09       	sbc	r21, r1
     e58:	05 2e       	mov	r0, r21
     e5a:	00 0c       	add	r0, r0
     e5c:	66 0b       	sbc	r22, r22
     e5e:	77 0b       	sbc	r23, r23
     e60:	7a 01       	movw	r14, r20
     e62:	8b 01       	movw	r16, r22
     e64:	e8 0e       	add	r14, r24
     e66:	f9 1e       	adc	r15, r25
     e68:	0a 1f       	adc	r16, r26
     e6a:	1b 1f       	adc	r17, r27
     e6c:	c8 01       	movw	r24, r16
     e6e:	b7 01       	movw	r22, r14
     e70:	b3 94       	inc	r11
     e72:	4b 2d       	mov	r20, r11
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	42 17       	cp	r20, r18
     e78:	53 07       	cpc	r21, r19
     e7a:	9c f2       	brlt	.-90     	; 0xe22 <_ZN9task_user10str_to_intEv+0x34>
     e7c:	03 c0       	rjmp	.+6      	; 0xe84 <_ZN9task_user10str_to_intEv+0x96>
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	cb 01       	movw	r24, r22
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	ff 90       	pop	r15
     e8e:	ef 90       	pop	r14
     e90:	df 90       	pop	r13
     e92:	cf 90       	pop	r12
     e94:	bf 90       	pop	r11
     e96:	08 95       	ret

00000e98 <_ZN9task_user12reset_deviceEv>:
     e98:	6a e0       	ldi	r22, 0x0A	; 10
     e9a:	fc 01       	movw	r30, r24
     e9c:	86 81       	ldd	r24, Z+6	; 0x06
     e9e:	97 81       	ldd	r25, Z+7	; 0x07
     ea0:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
     ea4:	ec 01       	movw	r28, r24
     ea6:	65 ea       	ldi	r22, 0xA5	; 165
     ea8:	78 e0       	ldi	r23, 0x08	; 8
     eaa:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
     eae:	66 e0       	ldi	r22, 0x06	; 6
     eb0:	ce 01       	movw	r24, r28
     eb2:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
     eb6:	93 e0       	ldi	r25, 0x03	; 3
     eb8:	88 ed       	ldi	r24, 0xD8	; 216
     eba:	08 b6       	in	r0, 0x38	; 56
     ebc:	18 be       	out	0x38, r1	; 56
     ebe:	84 bf       	out	0x34, r24	; 52
     ec0:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     ec4:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     ec8:	81 fd       	sbrc	r24, 1
     eca:	fc cf       	rjmp	.-8      	; 0xec4 <_ZN9task_user12reset_deviceEv+0x2c>
     ecc:	08 be       	out	0x38, r0	; 56
     ece:	ff cf       	rjmp	.-2      	; 0xece <_ZN9task_user12reset_deviceEv+0x36>

00000ed0 <_ZN9task_user3runEv>:
/** This task interacts with the user by transmitting and receiving bytes over USB to 
 *  and from a computer.
 */

void task_user::run (void)
{
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <_ZN9task_user3runEv+0x6>
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <_ZN9task_user3runEv+0x8>
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	89 83       	std	Y+1, r24	; 0x01
     ede:	9a 83       	std	Y+2, r25	; 0x02
			// coordinates of the device and then activates the device upon the user's command.
            case (1):
				if (p_serial->check_for_char ())        // If the user typed a
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
					atoi_buf[atoi_index] = char_in;
     ee0:	8c 01       	movw	r16, r24
     ee2:	0e 5e       	subi	r16, 0xEE	; 238
     ee4:	1e 4f       	sbci	r17, 0xFE	; 254
						*p_serial << endl;
						break;
						
						case (','):
						*p_serial << char_in;
						conv_int = str_to_int();
     ee6:	7c 01       	movw	r14, r24
     ee8:	8d ee       	ldi	r24, 0xED	; 237
     eea:	e8 1a       	sub	r14, r24
     eec:	8e ef       	ldi	r24, 0xFE	; 254
     eee:	f8 0a       	sbc	r15, r24
						location_queue->put(conv_int);
     ef0:	89 80       	ldd	r8, Y+1	; 0x01
     ef2:	9a 80       	ldd	r9, Y+2	; 0x02
     ef4:	99 ee       	ldi	r25, 0xE9	; 233
     ef6:	89 1a       	sub	r8, r25
     ef8:	9e ef       	ldi	r25, 0xFE	; 254
     efa:	99 0a       	sbc	r9, r25
							}
							
							break;
							
						case ('s'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
     efc:	a9 80       	ldd	r10, Y+1	; 0x01
     efe:	ba 80       	ldd	r11, Y+2	; 0x02
     f00:	a3 ee       	ldi	r26, 0xE3	; 227
     f02:	aa 1a       	sub	r10, r26
     f04:	ae ef       	ldi	r26, 0xFE	; 254
     f06:	ba 0a       	sbc	r11, r26
							break;
							
						case ('n'):
							*p_serial << PMS ("Sensor sample size set to:") << endl;
							atoi_index = 0;
							data_config = &sensor_sample_number;
     f08:	69 80       	ldd	r6, Y+1	; 0x01
     f0a:	7a 80       	ldd	r7, Y+2	; 0x02
     f0c:	b7 ee       	ldi	r27, 0xE7	; 231
     f0e:	6b 1a       	sub	r6, r27
     f10:	be ef       	ldi	r27, 0xFE	; 254
     f12:	7b 0a       	sbc	r7, r27
						case (','):
							*p_serial << char_in;
							
							conv_int = str_to_int();
							conv_int = conv_int * 1000;
							v_config->put(conv_int);
     f14:	49 80       	ldd	r4, Y+1	; 0x01
     f16:	5a 80       	ldd	r5, Y+2	; 0x02
     f18:	e5 ee       	ldi	r30, 0xE5	; 229
     f1a:	4e 1a       	sub	r4, r30
     f1c:	ee ef       	ldi	r30, 0xFE	; 254
     f1e:	5e 0a       	sbc	r5, r30
							transition_to(0);
							break;
							
						case('a'):
							conv_int = str_to_int();
							if (queue_indicator)
     f20:	29 80       	ldd	r2, Y+1	; 0x01
     f22:	3a 80       	ldd	r3, Y+2	; 0x02
     f24:	fe ed       	ldi	r31, 0xDE	; 222
     f26:	2f 1a       	sub	r2, r31
     f28:	fe ef       	ldi	r31, 0xFE	; 254
     f2a:	3f 0a       	sbc	r3, r31
							}
							else
							{
								if (data_config == &ramp_run_span)
								{
									conv_int = 100 / conv_int;
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	8d 83       	std	Y+5, r24	; 0x05
     f32:	9e 83       	std	Y+6, r25	; 0x06
			//*p_serial << PMS ("interrupt reset") << endl;
			//reset_device();
		//}
		
		// Run the finite state machine. The variable 'state' is kept by the parent class
		switch (state)
     f34:	ad 81       	ldd	r26, Y+5	; 0x05
     f36:	be 81       	ldd	r27, Y+6	; 0x06
     f38:	1c 96       	adiw	r26, 0x0c	; 12
     f3a:	8c 91       	ld	r24, X
     f3c:	1c 97       	sbiw	r26, 0x0c	; 12
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	09 f4       	brne	.+2      	; 0xf44 <_ZN9task_user3runEv+0x74>
     f42:	fd c0       	rjmp	.+506    	; 0x113e <_ZN9task_user3runEv+0x26e>
     f44:	38 f0       	brcs	.+14     	; 0xf54 <_ZN9task_user3runEv+0x84>
     f46:	82 30       	cpi	r24, 0x02	; 2
     f48:	09 f4       	brne	.+2      	; 0xf4c <_ZN9task_user3runEv+0x7c>
     f4a:	cf c2       	rjmp	.+1438   	; 0x14ea <_ZN9task_user3runEv+0x61a>
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	09 f4       	brne	.+2      	; 0xf52 <_ZN9task_user3runEv+0x82>
     f50:	9b c3       	rjmp	.+1846   	; 0x1688 <_ZN9task_user3runEv+0x7b8>
     f52:	c1 c5       	rjmp	.+2946   	; 0x1ad6 <_ZN9task_user3runEv+0xc06>
		{
			// In Case 0, the interface is in the main menu.
			case (0):
			
				if (p_serial->check_for_char ())        // If the user typed a
     f54:	ed 81       	ldd	r30, Y+5	; 0x05
     f56:	fe 81       	ldd	r31, Y+6	; 0x06
     f58:	86 81       	ldd	r24, Z+6	; 0x06
     f5a:	97 81       	ldd	r25, Z+7	; 0x07
     f5c:	dc 01       	movw	r26, r24
     f5e:	ed 91       	ld	r30, X+
     f60:	fc 91       	ld	r31, X
     f62:	04 80       	ldd	r0, Z+4	; 0x04
     f64:	f5 81       	ldd	r31, Z+5	; 0x05
     f66:	e0 2d       	mov	r30, r0
     f68:	19 95       	eicall
     f6a:	88 23       	and	r24, r24
     f6c:	09 f4       	brne	.+2      	; 0xf70 <_ZN9task_user3runEv+0xa0>
     f6e:	d3 c5       	rjmp	.+2982   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
     f70:	ed 81       	ldd	r30, Y+5	; 0x05
     f72:	fe 81       	ldd	r31, Y+6	; 0x06
     f74:	86 81       	ldd	r24, Z+6	; 0x06
     f76:	97 81       	ldd	r25, Z+7	; 0x07
     f78:	dc 01       	movw	r26, r24
     f7a:	ed 91       	ld	r30, X+
     f7c:	fc 91       	ld	r31, X
     f7e:	06 80       	ldd	r0, Z+6	; 0x06
     f80:	f7 81       	ldd	r31, Z+7	; 0x07
     f82:	e0 2d       	mov	r30, r0
     f84:	19 95       	eicall
					atoi_buf[atoi_index] = char_in;
     f86:	f8 01       	movw	r30, r16
     f88:	20 81       	ld	r18, Z
     f8a:	ed 81       	ldd	r30, Y+5	; 0x05
     f8c:	fe 81       	ldd	r31, Y+6	; 0x06
     f8e:	e2 0f       	add	r30, r18
     f90:	f1 1d       	adc	r31, r1
     f92:	82 8b       	std	Z+18, r24	; 0x12
					atoi_index++;
     f94:	2f 5f       	subi	r18, 0xFF	; 255
     f96:	d8 01       	movw	r26, r16
     f98:	2c 93       	st	X, r18
					switch(char_in)
     f9a:	99 27       	eor	r25, r25
     f9c:	fc 01       	movw	r30, r24
     f9e:	e1 56       	subi	r30, 0x61	; 97
     fa0:	f1 09       	sbc	r31, r1
     fa2:	e3 31       	cpi	r30, 0x13	; 19
     fa4:	f1 05       	cpc	r31, r1
     fa6:	08 f0       	brcs	.+2      	; 0xfaa <_ZN9task_user3runEv+0xda>
     fa8:	b6 c5       	rjmp	.+2924   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
     faa:	88 27       	eor	r24, r24
     fac:	e2 50       	subi	r30, 0x02	; 2
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	8f 4f       	sbci	r24, 0xFF	; 255
     fb2:	0c 94 50 25 	jmp	0x4aa0	; 0x4aa0 <__tablejump2__>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	0f 92       	push	r0
			the_data = new_data;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <configuration_mode>
			portEXIT_CRITICAL ();
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
					{
						case(CMD_CONFIG_MODE):
						
							//print_config_mode_menu();
							configuration_mode.put(true);
							*p_serial << PMS ("Entering config mode") << endl;
     fc6:	6a e0       	ldi	r22, 0x0A	; 10
     fc8:	ed 81       	ldd	r30, Y+5	; 0x05
     fca:	fe 81       	ldd	r31, Y+6	; 0x06
     fcc:	86 81       	ldd	r24, Z+6	; 0x06
     fce:	97 81       	ldd	r25, Z+7	; 0x07
     fd0:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
     fd4:	6c 01       	movw	r12, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
     fd6:	60 e9       	ldi	r22, 0x90	; 144
     fd8:	78 e0       	ldi	r23, 0x08	; 8
     fda:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
     fde:	66 e0       	ldi	r22, 0x06	; 6
     fe0:	c6 01       	movw	r24, r12
     fe2:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
							transition_to(3);
     fe6:	63 e0       	ldi	r22, 0x03	; 3
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
     fea:	9e 81       	ldd	r25, Y+6	; 0x06
     fec:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <_ZN8frt_task13transition_toEh>
							break;
     ff0:	92 c5       	rjmp	.+2852   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	0f 92       	push	r0
			the_data = new_data;
     ff8:	10 92 98 20 	sts	0x2098, r1	; 0x802098 <xmotor_on>
			portEXIT_CRITICAL ();
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	0f 92       	push	r0
			the_data = new_data;
    1006:	10 92 97 20 	sts	0x2097, r1	; 0x802097 <ymotor_on>
			portEXIT_CRITICAL ();
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	0f 92       	push	r0
			the_data = new_data;
    1014:	10 92 96 20 	sts	0x2096, r1	; 0x802096 <__data_end>
			portEXIT_CRITICAL ();
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	7c c5       	rjmp	.+2808   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	0f 92       	push	r0
			the_data = new_data;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	80 93 e3 20 	sts	0x20E3, r24	; 0x8020e3 <drawing_mode>
			portEXIT_CRITICAL ();
    102a:	0f 90       	pop	r0
    102c:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	0f 92       	push	r0
			the_data = new_data;
    1034:	10 92 0f 21 	sts	0x210F, r1	; 0x80210f <sensor_delay>
    1038:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <sensor_delay+0x1>
    103c:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <sensor_delay+0x2>
    1040:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <sensor_delay+0x3>
			portEXIT_CRITICAL ();
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	0f 92       	push	r0
			the_data = new_data;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a0 e0       	ldi	r26, 0x00	; 0
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <sensor_sample_number>
    105a:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <sensor_sample_number+0x1>
    105e:	a0 93 16 21 	sts	0x2116, r26	; 0x802116 <sensor_sample_number+0x2>
    1062:	b0 93 17 21 	sts	0x2117, r27	; 0x802117 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    1066:	0f 90       	pop	r0
    1068:	0f be       	out	0x3f, r0	; 63
							
						case('e'):
							drawing_mode.put(true);
							sensor_delay.put(0);
							sensor_sample_number.put(1);
							transition_to(1);
    106a:	61 e0       	ldi	r22, 0x01	; 1
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	9e 81       	ldd	r25, Y+6	; 0x06
    1070:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <_ZN8frt_task13transition_toEh>
							break ;
    1074:	50 c5       	rjmp	.+2720   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    107c:	0f 90       	pop	r0
    107e:	0f be       	out	0x3f, r0	; 63
							
						case('i'):
							if (!(incremental_mode.get()))
    1080:	80 91 99 20 	lds	r24, 0x2099	; 0x802099 <incremental_mode>
    1084:	81 11       	cpse	r24, r1
    1086:	47 c5       	rjmp	.+2702   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	0f 92       	push	r0
			the_data = new_data;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	80 93 99 20 	sts	0x2099, r24	; 0x802099 <incremental_mode>
			portEXIT_CRITICAL ();
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
							{
								incremental_mode.put(true);
								transition_to(1);
    1098:	61 e0       	ldi	r22, 0x01	; 1
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <_ZN8frt_task13transition_toEh>
    10a2:	39 c5       	rjmp	.+2674   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    10aa:	0f 90       	pop	r0
    10ac:	0f be       	out	0x3f, r0	; 63
							
							break;
							
						case('c'):
						
							if (!(coordinate_mode.get()))
    10ae:	80 91 9b 20 	lds	r24, 0x209B	; 0x80209b <coordinate_mode>
    10b2:	81 11       	cpse	r24, r1
    10b4:	30 c5       	rjmp	.+2656   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	0f 92       	push	r0
			the_data = new_data;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	80 93 9b 20 	sts	0x209B, r24	; 0x80209b <coordinate_mode>
			portEXIT_CRITICAL ();
    10c2:	0f 90       	pop	r0
    10c4:	0f be       	out	0x3f, r0	; 63
							{
								coordinate_mode.put(true);
								transition_to(1);
    10c6:	61 e0       	ldi	r22, 0x01	; 1
    10c8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ca:	9e 81       	ldd	r25, Y+6	; 0x06
    10cc:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <_ZN8frt_task13transition_toEh>
    10d0:	22 c5       	rjmp	.+2628   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	0f 92       	push	r0
			the_data = new_data;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	80 93 9a 20 	sts	0x209A, r24	; 0x80209a <direct_mode>
			portEXIT_CRITICAL ();
    10de:	0f 90       	pop	r0
    10e0:	0f be       	out	0x3f, r0	; 63
						
						case('d'):
						
							//print_dir_mode_menu();
							direct_mode.put(true);
							transition_to(2);
    10e2:	62 e0       	ldi	r22, 0x02	; 2
    10e4:	8d 81       	ldd	r24, Y+5	; 0x05
    10e6:	9e 81       	ldd	r25, Y+6	; 0x06
    10e8:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <_ZN8frt_task13transition_toEh>
							break;
    10ec:	14 c5       	rjmp	.+2600   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
    10ee:	ad 81       	ldd	r26, Y+5	; 0x05
    10f0:	be 81       	ldd	r27, Y+6	; 0x06
							
						case('r'):
							
							reset_device();
    10f2:	cd 01       	movw	r24, r26
    10f4:	0e 94 4c 07 	call	0xe98	; 0xe98 <_ZN9task_user12reset_deviceEv>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	0f 92       	push	r0
			the_data = new_data;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	80 93 18 21 	sts	0x2118, r24	; 0x802118 <sensor_reading>
			portEXIT_CRITICAL ();
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	06 c5       	rjmp	.+2572   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    1110:	0f 90       	pop	r0
    1112:	0f be       	out	0x3f, r0	; 63
							sensor_reading.put(true);
							break;
							
						case('p'):
							
							if(!(pause.get()))
    1114:	80 91 07 21 	lds	r24, 0x2107	; 0x802107 <pause>
    1118:	81 11       	cpse	r24, r1
    111a:	09 c0       	rjmp	.+18     	; 0x112e <_ZN9task_user3runEv+0x25e>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	0f 92       	push	r0
			the_data = new_data;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <pause>
			portEXIT_CRITICAL ();
    1128:	0f 90       	pop	r0
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	f4 c4       	rjmp	.+2536   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	0f 92       	push	r0
			the_data = new_data;
    1134:	10 92 07 21 	sts	0x2107, r1	; 0x802107 <pause>
			portEXIT_CRITICAL ();
    1138:	0f 90       	pop	r0
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	ec c4       	rjmp	.+2520   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
				
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// In Case 1, the UI is in Coordinate Mode. It waits for the user to specify the x, y, z 
			// coordinates of the device and then activates the device upon the user's command.
            case (1):
				if (p_serial->check_for_char ())        // If the user typed a
    113e:	ed 81       	ldd	r30, Y+5	; 0x05
    1140:	fe 81       	ldd	r31, Y+6	; 0x06
    1142:	86 81       	ldd	r24, Z+6	; 0x06
    1144:	97 81       	ldd	r25, Z+7	; 0x07
    1146:	dc 01       	movw	r26, r24
    1148:	ed 91       	ld	r30, X+
    114a:	fc 91       	ld	r31, X
    114c:	04 80       	ldd	r0, Z+4	; 0x04
    114e:	f5 81       	ldd	r31, Z+5	; 0x05
    1150:	e0 2d       	mov	r30, r0
    1152:	19 95       	eicall
    1154:	88 23       	and	r24, r24
    1156:	09 f4       	brne	.+2      	; 0x115a <_ZN9task_user3runEv+0x28a>
    1158:	aa c1       	rjmp	.+852    	; 0x14ae <_ZN9task_user3runEv+0x5de>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    115a:	ed 81       	ldd	r30, Y+5	; 0x05
    115c:	fe 81       	ldd	r31, Y+6	; 0x06
    115e:	86 81       	ldd	r24, Z+6	; 0x06
    1160:	97 81       	ldd	r25, Z+7	; 0x07
    1162:	dc 01       	movw	r26, r24
    1164:	ed 91       	ld	r30, X+
    1166:	fc 91       	ld	r31, X
    1168:	06 80       	ldd	r0, Z+6	; 0x06
    116a:	f7 81       	ldd	r31, Z+7	; 0x07
    116c:	e0 2d       	mov	r30, r0
    116e:	19 95       	eicall
    1170:	bc 01       	movw	r22, r24
					atoi_buf[atoi_index] = char_in;
    1172:	f8 01       	movw	r30, r16
    1174:	80 81       	ld	r24, Z
    1176:	ed 81       	ldd	r30, Y+5	; 0x05
    1178:	fe 81       	ldd	r31, Y+6	; 0x06
    117a:	e8 0f       	add	r30, r24
    117c:	f1 1d       	adc	r31, r1
    117e:	62 8b       	std	Z+18, r22	; 0x12
					atoi_index++;
    1180:	8f 5f       	subi	r24, 0xFF	; 255
    1182:	d8 01       	movw	r26, r16
    1184:	8c 93       	st	X, r24
					switch (char_in)
    1186:	fb 01       	movw	r30, r22
    1188:	ff 27       	eor	r31, r31
    118a:	bc 97       	sbiw	r30, 0x2c	; 44
    118c:	ef 34       	cpi	r30, 0x4F	; 79
    118e:	f1 05       	cpc	r31, r1
    1190:	08 f0       	brcs	.+2      	; 0x1194 <_ZN9task_user3runEv+0x2c4>
    1192:	c1 c4       	rjmp	.+2434   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
    1194:	88 27       	eor	r24, r24
    1196:	ef 5e       	subi	r30, 0xEF	; 239
    1198:	fe 4f       	sbci	r31, 0xFE	; 254
    119a:	8f 4f       	sbci	r24, 0xFF	; 255
    119c:	0c 94 50 25 	jmp	0x4aa0	; 0x4aa0 <__tablejump2__>
    11a0:	ed 81       	ldd	r30, Y+5	; 0x05
    11a2:	fe 81       	ldd	r31, Y+6	; 0x06
					{
						case('r'):
						
							reset_device();
    11a4:	cf 01       	movw	r24, r30
    11a6:	0e 94 4c 07 	call	0xe98	; 0xe98 <_ZN9task_user12reset_deviceEv>
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    11aa:	80 91 b5 20 	lds	r24, 0x20B5	; 0x8020b5 <xlocations+0x4>
    11ae:	90 91 b6 20 	lds	r25, 0x20B6	; 0x8020b6 <xlocations+0x5>
    11b2:	0e 94 c0 18 	call	0x3180	; 0x3180 <uxQueueMessagesWaiting>
    11b6:	d8 2e       	mov	r13, r24
    11b8:	80 91 ab 20 	lds	r24, 0x20AB	; 0x8020ab <ylocations+0x4>
    11bc:	90 91 ac 20 	lds	r25, 0x20AC	; 0x8020ac <ylocations+0x5>
    11c0:	0e 94 c0 18 	call	0x3180	; 0x3180 <uxQueueMessagesWaiting>
							break;
						
						case ('e'):
						//print_main_menu();
						//coordinate_mode.put(false);
						if (xlocations.num_items_in() == ylocations.num_items_in() && xlocations.num_items_in() == zlocations.num_items_in())
    11c4:	d8 12       	cpse	r13, r24
    11c6:	45 c0       	rjmp	.+138    	; 0x1252 <_ZN9task_user3runEv+0x382>
    11c8:	80 91 b5 20 	lds	r24, 0x20B5	; 0x8020b5 <xlocations+0x4>
    11cc:	90 91 b6 20 	lds	r25, 0x20B6	; 0x8020b6 <xlocations+0x5>
    11d0:	0e 94 c0 18 	call	0x3180	; 0x3180 <uxQueueMessagesWaiting>
    11d4:	d8 2e       	mov	r13, r24
    11d6:	80 91 a1 20 	lds	r24, 0x20A1	; 0x8020a1 <zlocations+0x4>
    11da:	90 91 a2 20 	lds	r25, 0x20A2	; 0x8020a2 <zlocations+0x5>
    11de:	0e 94 c0 18 	call	0x3180	; 0x3180 <uxQueueMessagesWaiting>
    11e2:	d8 12       	cpse	r13, r24
    11e4:	36 c0       	rjmp	.+108    	; 0x1252 <_ZN9task_user3runEv+0x382>
    11e6:	80 91 b5 20 	lds	r24, 0x20B5	; 0x8020b5 <xlocations+0x4>
    11ea:	90 91 b6 20 	lds	r25, 0x20B6	; 0x8020b6 <xlocations+0x5>
    11ee:	0e 94 c0 18 	call	0x3180	; 0x3180 <uxQueueMessagesWaiting>
    11f2:	c8 2e       	mov	r12, r24
    11f4:	d1 2c       	mov	r13, r1
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	0f 92       	push	r0
			the_data = new_data;
    11fc:	c0 92 08 21 	sts	0x2108, r12	; 0x802108 <total_nodes>
    1200:	d0 92 09 21 	sts	0x2109, r13	; 0x802109 <total_nodes+0x1>
			portEXIT_CRITICAL ();
    1204:	0f 90       	pop	r0
    1206:	0f be       	out	0x3f, r0	; 63
			// It's necessary to make an extra, temporary copy of the data so that the
			// temporary copy can be returned. We can't call return() from within the
			// critical section for reasons that are obvious if you think about it
			data_type temporary_copy;

			portENTER_CRITICAL ();
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	0f 92       	push	r0
			temporary_copy = the_data;
			portEXIT_CRITICAL ();
    120e:	0f 90       	pop	r0
    1210:	0f be       	out	0x3f, r0	; 63
						{
							total_nodes.put(xlocations.num_items_in());
							*p_serial << PMS ("Total nodes: ") << total_nodes.get() << endl;
    1212:	6a e0       	ldi	r22, 0x0A	; 10
    1214:	ad 81       	ldd	r26, Y+5	; 0x05
    1216:	be 81       	ldd	r27, Y+6	; 0x06
    1218:	16 96       	adiw	r26, 0x06	; 6
    121a:	8d 91       	ld	r24, X+
    121c:	9c 91       	ld	r25, X
    121e:	17 97       	sbiw	r26, 0x07	; 7
    1220:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	9a 83       	std	Y+2, r25	; 0x02
    1228:	62 e8       	ldi	r22, 0x82	; 130
    122a:	78 e0       	ldi	r23, 0x08	; 8
    122c:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    1230:	b6 01       	movw	r22, r12
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	0e 94 31 21 	call	0x4262	; 0x4262 <_ZN8emstreamlsEj>
    123a:	66 e0       	ldi	r22, 0x06	; 6
    123c:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	0f 92       	push	r0
			the_data = new_data;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <next_node>
			portEXIT_CRITICAL ();
    124c:	0f 90       	pop	r0
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	10 c0       	rjmp	.+32     	; 0x1272 <_ZN9task_user3runEv+0x3a2>
							next_node.put(true);
						}
						else
						{
							*p_serial << PMS ("Error: Unequal axis coordinate vectors.") << endl;
    1252:	6a e0       	ldi	r22, 0x0A	; 10
    1254:	ed 81       	ldd	r30, Y+5	; 0x05
    1256:	fe 81       	ldd	r31, Y+6	; 0x06
    1258:	86 81       	ldd	r24, Z+6	; 0x06
    125a:	97 81       	ldd	r25, Z+7	; 0x07
    125c:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    1260:	6c 01       	movw	r12, r24
    1262:	6a e5       	ldi	r22, 0x5A	; 90
    1264:	78 e0       	ldi	r23, 0x08	; 8
    1266:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    126a:	66 e0       	ldi	r22, 0x06	; 6
    126c:	c6 01       	movw	r24, r12
    126e:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
						}
						atoi_index = 0;
    1272:	d8 01       	movw	r26, r16
    1274:	1c 92       	st	X, r1
						transition_to(0);
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <_ZN8frt_task13transition_toEh>
						break;
    1280:	4a c4       	rjmp	.+2196   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						
						// This character acts as an enter which the python file can more easily send.
						case('a'):
						conv_int = str_to_int();
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN9task_user10str_to_intEv>
    128a:	f7 01       	movw	r30, r14
    128c:	60 83       	st	Z, r22
    128e:	71 83       	std	Z+1, r23	; 0x01
    1290:	82 83       	std	Z+2, r24	; 0x02
    1292:	93 83       	std	Z+3, r25	; 0x03
						location_queue->put(conv_int);
    1294:	d4 01       	movw	r26, r8
    1296:	8d 91       	ld	r24, X+
    1298:	9c 91       	ld	r25, X
    129a:	dc 01       	movw	r26, r24
    129c:	ed 91       	ld	r30, X+
    129e:	fc 91       	ld	r31, X
    12a0:	01 90       	ld	r0, Z+
    12a2:	f0 81       	ld	r31, Z
    12a4:	e0 2d       	mov	r30, r0
    12a6:	b7 01       	movw	r22, r14
    12a8:	19 95       	eicall
						atoi_index = 0;
    12aa:	f8 01       	movw	r30, r16
    12ac:	10 82       	st	Z, r1
						//*p_serial << endl << PMS ("Locations stored in memory location: ") << location_queue << endl;
						break;
    12ae:	33 c4       	rjmp	.+2150   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						
						case ('x'):
						atoi_index = 0;
    12b0:	d8 01       	movw	r26, r16
    12b2:	1c 92       	st	X, r1
						*p_serial << endl << PMS ("Receiving X-locations.") << endl;
    12b4:	66 e0       	ldi	r22, 0x06	; 6
    12b6:	ed 81       	ldd	r30, Y+5	; 0x05
    12b8:	fe 81       	ldd	r31, Y+6	; 0x06
    12ba:	86 81       	ldd	r24, Z+6	; 0x06
    12bc:	97 81       	ldd	r25, Z+7	; 0x07
    12be:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    12c2:	6a e0       	ldi	r22, 0x0A	; 10
    12c4:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    12c8:	6c 01       	movw	r12, r24
    12ca:	63 e4       	ldi	r22, 0x43	; 67
    12cc:	78 e0       	ldi	r23, 0x08	; 8
    12ce:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    12d2:	66 e0       	ldi	r22, 0x06	; 6
    12d4:	c6 01       	movw	r24, r12
    12d6:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
						location_queue = &xlocations;
    12da:	e1 eb       	ldi	r30, 0xB1	; 177
    12dc:	f0 e2       	ldi	r31, 0x20	; 32
    12de:	d4 01       	movw	r26, r8
    12e0:	ed 93       	st	X+, r30
    12e2:	fc 93       	st	X, r31
						break;
    12e4:	18 c4       	rjmp	.+2096   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						
						case ('y'):
						atoi_index = 0;
    12e6:	d8 01       	movw	r26, r16
    12e8:	1c 92       	st	X, r1
						*p_serial << endl << PMS ("Receiving Y-locations.") << endl;
    12ea:	66 e0       	ldi	r22, 0x06	; 6
    12ec:	ed 81       	ldd	r30, Y+5	; 0x05
    12ee:	fe 81       	ldd	r31, Y+6	; 0x06
    12f0:	86 81       	ldd	r24, Z+6	; 0x06
    12f2:	97 81       	ldd	r25, Z+7	; 0x07
    12f4:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    12f8:	6a e0       	ldi	r22, 0x0A	; 10
    12fa:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    12fe:	6c 01       	movw	r12, r24
    1300:	6c e2       	ldi	r22, 0x2C	; 44
    1302:	78 e0       	ldi	r23, 0x08	; 8
    1304:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    1308:	66 e0       	ldi	r22, 0x06	; 6
    130a:	c6 01       	movw	r24, r12
    130c:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
						location_queue = &ylocations;
    1310:	e7 ea       	ldi	r30, 0xA7	; 167
    1312:	f0 e2       	ldi	r31, 0x20	; 32
    1314:	d4 01       	movw	r26, r8
    1316:	ed 93       	st	X+, r30
    1318:	fc 93       	st	X, r31
						break;
    131a:	fd c3       	rjmp	.+2042   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						
						case ('z'):
						atoi_index = 0;
    131c:	d8 01       	movw	r26, r16
    131e:	1c 92       	st	X, r1
						*p_serial << endl << PMS ("Receiving Z-locations.") << endl;
    1320:	66 e0       	ldi	r22, 0x06	; 6
    1322:	ed 81       	ldd	r30, Y+5	; 0x05
    1324:	fe 81       	ldd	r31, Y+6	; 0x06
    1326:	86 81       	ldd	r24, Z+6	; 0x06
    1328:	97 81       	ldd	r25, Z+7	; 0x07
    132a:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    132e:	6a e0       	ldi	r22, 0x0A	; 10
    1330:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    1334:	6c 01       	movw	r12, r24
    1336:	65 e1       	ldi	r22, 0x15	; 21
    1338:	78 e0       	ldi	r23, 0x08	; 8
    133a:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    133e:	66 e0       	ldi	r22, 0x06	; 6
    1340:	c6 01       	movw	r24, r12
    1342:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
						location_queue = &zlocations;
    1346:	ed e9       	ldi	r30, 0x9D	; 157
    1348:	f0 e2       	ldi	r31, 0x20	; 32
    134a:	d4 01       	movw	r26, r8
    134c:	ed 93       	st	X+, r30
    134e:	fc 93       	st	X, r31
						break;
    1350:	e2 c3       	rjmp	.+1988   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	0f 92       	push	r0
			the_data = new_data;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	80 93 13 21 	sts	0x2113, r24	; 0x802113 <initialization_complete>
			portEXIT_CRITICAL ();
    135e:	0f 90       	pop	r0
    1360:	0f be       	out	0x3f, r0	; 63
						
						case ('g'):
						initialization_complete.put(true);
						*p_serial << endl;
    1362:	66 e0       	ldi	r22, 0x06	; 6
    1364:	ad 81       	ldd	r26, Y+5	; 0x05
    1366:	be 81       	ldd	r27, Y+6	; 0x06
    1368:	16 96       	adiw	r26, 0x06	; 6
    136a:	8d 91       	ld	r24, X+
    136c:	9c 91       	ld	r25, X
    136e:	17 97       	sbiw	r26, 0x07	; 7
    1370:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
						break;
    1374:	d0 c3       	rjmp	.+1952   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						
						case (','):
						*p_serial << char_in;
    1376:	ed 81       	ldd	r30, Y+5	; 0x05
    1378:	fe 81       	ldd	r31, Y+6	; 0x06
    137a:	86 81       	ldd	r24, Z+6	; 0x06
    137c:	97 81       	ldd	r25, Z+7	; 0x07
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    137e:	dc 01       	movw	r26, r24
    1380:	ed 91       	ld	r30, X+
    1382:	fc 91       	ld	r31, X
    1384:	02 80       	ldd	r0, Z+2	; 0x02
    1386:	f3 81       	ldd	r31, Z+3	; 0x03
    1388:	e0 2d       	mov	r30, r0
    138a:	19 95       	eicall
						conv_int = str_to_int();
    138c:	8d 81       	ldd	r24, Y+5	; 0x05
    138e:	9e 81       	ldd	r25, Y+6	; 0x06
    1390:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN9task_user10str_to_intEv>
    1394:	f7 01       	movw	r30, r14
    1396:	60 83       	st	Z, r22
    1398:	71 83       	std	Z+1, r23	; 0x01
    139a:	82 83       	std	Z+2, r24	; 0x02
    139c:	93 83       	std	Z+3, r25	; 0x03
						location_queue->put(conv_int);
    139e:	d4 01       	movw	r26, r8
    13a0:	8d 91       	ld	r24, X+
    13a2:	9c 91       	ld	r25, X
    13a4:	dc 01       	movw	r26, r24
    13a6:	ed 91       	ld	r30, X+
    13a8:	fc 91       	ld	r31, X
    13aa:	01 90       	ld	r0, Z+
    13ac:	f0 81       	ld	r31, Z
    13ae:	e0 2d       	mov	r30, r0
    13b0:	b7 01       	movw	r22, r14
    13b2:	19 95       	eicall
						atoi_index = 0;
    13b4:	f8 01       	movw	r30, r16
    13b6:	10 82       	st	Z, r1

						break;
    13b8:	ae c3       	rjmp	.+1884   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						
						case('0'):
						
						*p_serial << char_in;
    13ba:	ad 81       	ldd	r26, Y+5	; 0x05
    13bc:	be 81       	ldd	r27, Y+6	; 0x06
    13be:	16 96       	adiw	r26, 0x06	; 6
    13c0:	8d 91       	ld	r24, X+
    13c2:	9c 91       	ld	r25, X
    13c4:	17 97       	sbiw	r26, 0x07	; 7
    13c6:	dc 01       	movw	r26, r24
    13c8:	ed 91       	ld	r30, X+
    13ca:	fc 91       	ld	r31, X
    13cc:	02 80       	ldd	r0, Z+2	; 0x02
    13ce:	f3 81       	ldd	r31, Z+3	; 0x03
    13d0:	e0 2d       	mov	r30, r0
    13d2:	19 95       	eicall
    13d4:	a0 c3       	rjmp	.+1856   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('1'):
						
						*p_serial << char_in;
    13d6:	ed 81       	ldd	r30, Y+5	; 0x05
    13d8:	fe 81       	ldd	r31, Y+6	; 0x06
    13da:	86 81       	ldd	r24, Z+6	; 0x06
    13dc:	97 81       	ldd	r25, Z+7	; 0x07
    13de:	dc 01       	movw	r26, r24
    13e0:	ed 91       	ld	r30, X+
    13e2:	fc 91       	ld	r31, X
    13e4:	02 80       	ldd	r0, Z+2	; 0x02
    13e6:	f3 81       	ldd	r31, Z+3	; 0x03
    13e8:	e0 2d       	mov	r30, r0
    13ea:	19 95       	eicall
    13ec:	94 c3       	rjmp	.+1832   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('2'):
						
						*p_serial << char_in;
    13ee:	ed 81       	ldd	r30, Y+5	; 0x05
    13f0:	fe 81       	ldd	r31, Y+6	; 0x06
    13f2:	86 81       	ldd	r24, Z+6	; 0x06
    13f4:	97 81       	ldd	r25, Z+7	; 0x07
    13f6:	dc 01       	movw	r26, r24
    13f8:	ed 91       	ld	r30, X+
    13fa:	fc 91       	ld	r31, X
    13fc:	02 80       	ldd	r0, Z+2	; 0x02
    13fe:	f3 81       	ldd	r31, Z+3	; 0x03
    1400:	e0 2d       	mov	r30, r0
    1402:	19 95       	eicall
    1404:	88 c3       	rjmp	.+1808   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('3'):
						
						*p_serial << char_in;
    1406:	ed 81       	ldd	r30, Y+5	; 0x05
    1408:	fe 81       	ldd	r31, Y+6	; 0x06
    140a:	86 81       	ldd	r24, Z+6	; 0x06
    140c:	97 81       	ldd	r25, Z+7	; 0x07
    140e:	dc 01       	movw	r26, r24
    1410:	ed 91       	ld	r30, X+
    1412:	fc 91       	ld	r31, X
    1414:	02 80       	ldd	r0, Z+2	; 0x02
    1416:	f3 81       	ldd	r31, Z+3	; 0x03
    1418:	e0 2d       	mov	r30, r0
    141a:	19 95       	eicall
    141c:	7c c3       	rjmp	.+1784   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('4'):
						
						*p_serial << char_in;
    141e:	ed 81       	ldd	r30, Y+5	; 0x05
    1420:	fe 81       	ldd	r31, Y+6	; 0x06
    1422:	86 81       	ldd	r24, Z+6	; 0x06
    1424:	97 81       	ldd	r25, Z+7	; 0x07
    1426:	dc 01       	movw	r26, r24
    1428:	ed 91       	ld	r30, X+
    142a:	fc 91       	ld	r31, X
    142c:	02 80       	ldd	r0, Z+2	; 0x02
    142e:	f3 81       	ldd	r31, Z+3	; 0x03
    1430:	e0 2d       	mov	r30, r0
    1432:	19 95       	eicall
    1434:	70 c3       	rjmp	.+1760   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('5'):
						
						*p_serial << char_in;
    1436:	ed 81       	ldd	r30, Y+5	; 0x05
    1438:	fe 81       	ldd	r31, Y+6	; 0x06
    143a:	86 81       	ldd	r24, Z+6	; 0x06
    143c:	97 81       	ldd	r25, Z+7	; 0x07
    143e:	dc 01       	movw	r26, r24
    1440:	ed 91       	ld	r30, X+
    1442:	fc 91       	ld	r31, X
    1444:	02 80       	ldd	r0, Z+2	; 0x02
    1446:	f3 81       	ldd	r31, Z+3	; 0x03
    1448:	e0 2d       	mov	r30, r0
    144a:	19 95       	eicall
    144c:	64 c3       	rjmp	.+1736   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('6'):
						
						*p_serial << char_in;
    144e:	ed 81       	ldd	r30, Y+5	; 0x05
    1450:	fe 81       	ldd	r31, Y+6	; 0x06
    1452:	86 81       	ldd	r24, Z+6	; 0x06
    1454:	97 81       	ldd	r25, Z+7	; 0x07
    1456:	dc 01       	movw	r26, r24
    1458:	ed 91       	ld	r30, X+
    145a:	fc 91       	ld	r31, X
    145c:	02 80       	ldd	r0, Z+2	; 0x02
    145e:	f3 81       	ldd	r31, Z+3	; 0x03
    1460:	e0 2d       	mov	r30, r0
    1462:	19 95       	eicall
    1464:	58 c3       	rjmp	.+1712   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('7'):
						
						*p_serial << char_in;
    1466:	ed 81       	ldd	r30, Y+5	; 0x05
    1468:	fe 81       	ldd	r31, Y+6	; 0x06
    146a:	86 81       	ldd	r24, Z+6	; 0x06
    146c:	97 81       	ldd	r25, Z+7	; 0x07
    146e:	dc 01       	movw	r26, r24
    1470:	ed 91       	ld	r30, X+
    1472:	fc 91       	ld	r31, X
    1474:	02 80       	ldd	r0, Z+2	; 0x02
    1476:	f3 81       	ldd	r31, Z+3	; 0x03
    1478:	e0 2d       	mov	r30, r0
    147a:	19 95       	eicall
    147c:	4c c3       	rjmp	.+1688   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('8'):
						
						*p_serial << char_in;
    147e:	ed 81       	ldd	r30, Y+5	; 0x05
    1480:	fe 81       	ldd	r31, Y+6	; 0x06
    1482:	86 81       	ldd	r24, Z+6	; 0x06
    1484:	97 81       	ldd	r25, Z+7	; 0x07
    1486:	dc 01       	movw	r26, r24
    1488:	ed 91       	ld	r30, X+
    148a:	fc 91       	ld	r31, X
    148c:	02 80       	ldd	r0, Z+2	; 0x02
    148e:	f3 81       	ldd	r31, Z+3	; 0x03
    1490:	e0 2d       	mov	r30, r0
    1492:	19 95       	eicall
    1494:	40 c3       	rjmp	.+1664   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('9'):
						
						*p_serial << char_in;
    1496:	ed 81       	ldd	r30, Y+5	; 0x05
    1498:	fe 81       	ldd	r31, Y+6	; 0x06
    149a:	86 81       	ldd	r24, Z+6	; 0x06
    149c:	97 81       	ldd	r25, Z+7	; 0x07
    149e:	dc 01       	movw	r26, r24
    14a0:	ed 91       	ld	r30, X+
    14a2:	fc 91       	ld	r31, X
    14a4:	02 80       	ldd	r0, Z+2	; 0x02
    14a6:	f3 81       	ldd	r31, Z+3	; 0x03
    14a8:	e0 2d       	mov	r30, r0
    14aa:	19 95       	eicall
    14ac:	34 c3       	rjmp	.+1640   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
					}
				}

				// Check the print queue to see if another task has sent this task
				// something to be printed
				else if (print_ser_queue.check_for_char ())
    14ae:	8b eb       	ldi	r24, 0xBB	; 187
    14b0:	90 e2       	ldi	r25, 0x20	; 32
    14b2:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <_ZN14frt_text_queue14check_for_charEv>
    14b6:	88 23       	and	r24, r24
    14b8:	09 f4       	brne	.+2      	; 0x14bc <_ZN9task_user3runEv+0x5ec>
    14ba:	2d c3       	rjmp	.+1626   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
				{
					p_serial->putchar (print_ser_queue.getchar ());
    14bc:	ad 81       	ldd	r26, Y+5	; 0x05
    14be:	be 81       	ldd	r27, Y+6	; 0x06
    14c0:	16 96       	adiw	r26, 0x06	; 6
    14c2:	ed 91       	ld	r30, X+
    14c4:	fc 91       	ld	r31, X
    14c6:	17 97       	sbiw	r26, 0x07	; 7
    14c8:	01 90       	ld	r0, Z+
    14ca:	f0 81       	ld	r31, Z
    14cc:	e0 2d       	mov	r30, r0
    14ce:	c2 80       	ldd	r12, Z+2	; 0x02
    14d0:	d3 80       	ldd	r13, Z+3	; 0x03
    14d2:	8b eb       	ldi	r24, 0xBB	; 187
    14d4:	90 e2       	ldi	r25, 0x20	; 32
    14d6:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <_ZN14frt_text_queue7getcharEv>
    14da:	68 2f       	mov	r22, r24
    14dc:	ed 81       	ldd	r30, Y+5	; 0x05
    14de:	fe 81       	ldd	r31, Y+6	; 0x06
    14e0:	86 81       	ldd	r24, Z+6	; 0x06
    14e2:	97 81       	ldd	r25, Z+7	; 0x07
    14e4:	f6 01       	movw	r30, r12
    14e6:	19 95       	eicall
    14e8:	16 c3       	rjmp	.+1580   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
			// State 2 is Direct Operation Mode. Here, the user can enter commands that directly turn the motors on
			// and off, as well as control their direction.
				
			case (2):
				if (p_serial->check_for_char ())        // If the user typed a
    14ea:	ad 81       	ldd	r26, Y+5	; 0x05
    14ec:	be 81       	ldd	r27, Y+6	; 0x06
    14ee:	16 96       	adiw	r26, 0x06	; 6
    14f0:	8d 91       	ld	r24, X+
    14f2:	9c 91       	ld	r25, X
    14f4:	17 97       	sbiw	r26, 0x07	; 7
    14f6:	dc 01       	movw	r26, r24
    14f8:	ed 91       	ld	r30, X+
    14fa:	fc 91       	ld	r31, X
    14fc:	04 80       	ldd	r0, Z+4	; 0x04
    14fe:	f5 81       	ldd	r31, Z+5	; 0x05
    1500:	e0 2d       	mov	r30, r0
    1502:	19 95       	eicall
    1504:	88 23       	and	r24, r24
    1506:	09 f4       	brne	.+2      	; 0x150a <_ZN9task_user3runEv+0x63a>
    1508:	06 c3       	rjmp	.+1548   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    150a:	ed 81       	ldd	r30, Y+5	; 0x05
    150c:	fe 81       	ldd	r31, Y+6	; 0x06
    150e:	86 81       	ldd	r24, Z+6	; 0x06
    1510:	97 81       	ldd	r25, Z+7	; 0x07
    1512:	dc 01       	movw	r26, r24
    1514:	ed 91       	ld	r30, X+
    1516:	fc 91       	ld	r31, X
    1518:	06 80       	ldd	r0, Z+6	; 0x06
    151a:	f7 81       	ldd	r31, Z+7	; 0x07
    151c:	e0 2d       	mov	r30, r0
    151e:	19 95       	eicall
					atoi_buf[atoi_index] = char_in;
    1520:	f8 01       	movw	r30, r16
    1522:	20 81       	ld	r18, Z
    1524:	ed 81       	ldd	r30, Y+5	; 0x05
    1526:	fe 81       	ldd	r31, Y+6	; 0x06
    1528:	e2 0f       	add	r30, r18
    152a:	f1 1d       	adc	r31, r1
    152c:	82 8b       	std	Z+18, r24	; 0x12
					atoi_index++;
    152e:	2f 5f       	subi	r18, 0xFF	; 255
    1530:	d8 01       	movw	r26, r16
    1532:	2c 93       	st	X, r18
					switch (char_in)
    1534:	99 27       	eor	r25, r25
    1536:	fc 01       	movw	r30, r24
    1538:	e5 56       	subi	r30, 0x65	; 101
    153a:	f1 09       	sbc	r31, r1
    153c:	e6 31       	cpi	r30, 0x16	; 22
    153e:	f1 05       	cpc	r31, r1
    1540:	08 f0       	brcs	.+2      	; 0x1544 <_ZN9task_user3runEv+0x674>
    1542:	e9 c2       	rjmp	.+1490   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
    1544:	88 27       	eor	r24, r24
    1546:	e0 5a       	subi	r30, 0xA0	; 160
    1548:	fe 4f       	sbci	r31, 0xFE	; 254
    154a:	8f 4f       	sbci	r24, 0xFF	; 255
    154c:	0c 94 50 25 	jmp	0x4aa0	; 0x4aa0 <__tablejump2__>
					{
						case ('x'):
							pmotor_operator = &xmotor_on;
    1550:	88 e9       	ldi	r24, 0x98	; 152
    1552:	90 e2       	ldi	r25, 0x20	; 32
    1554:	f5 01       	movw	r30, r10
    1556:	80 83       	st	Z, r24
    1558:	91 83       	std	Z+1, r25	; 0x01
							//*p_serial << endl << PMS ("Press Ctrl-E to return to the main menu.") << endl << endl;
							//*p_serial << PMS ("X-Motor Controls:") << endl;
							
							break;
    155a:	dd c2       	rjmp	.+1466   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						case ('y'):
							pmotor_operator = &ymotor_on;
    155c:	87 e9       	ldi	r24, 0x97	; 151
    155e:	90 e2       	ldi	r25, 0x20	; 32
    1560:	d5 01       	movw	r26, r10
    1562:	8d 93       	st	X+, r24
    1564:	9c 93       	st	X, r25
							//*p_serial << endl << PMS ("Press Ctrl-E to return to the main menu.") << endl << endl;
							//*p_serial << PMS ("Y-Motor Controls:") << endl;
							//*p_serial << PMS ("Press Ctrl-F to activate forward.") << endl;
							//*p_serial << PMS ("Press Ctrl-R to activate reverse.") << endl;
							//*p_serial << PMS ("Press Ctrl-S to stop.") << endl;
							break;
    1566:	d7 c2       	rjmp	.+1454   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						case ('z'):
							pmotor_operator = &zmotor_on;
    1568:	86 e9       	ldi	r24, 0x96	; 150
    156a:	90 e2       	ldi	r25, 0x20	; 32
    156c:	f5 01       	movw	r30, r10
    156e:	80 83       	st	Z, r24
    1570:	91 83       	std	Z+1, r25	; 0x01
							//*p_serial << endl << PMS ("Press Ctrl-E to return to the main menu.") << endl << endl;
							//*p_serial << PMS ("Z-Motor Controls:") << endl;
							//*p_serial << PMS ("Press Ctrl-F to activate forward.") << endl;
							//*p_serial << PMS ("Press Ctrl-R to activate reverse.") << endl;
							//*p_serial << PMS ("Press Ctrl-S to stop.") << endl;
							break;
    1572:	d1 c2       	rjmp	.+1442   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	0f 92       	push	r0
			the_data = new_data;
    157a:	10 92 9a 20 	sts	0x209A, r1	; 0x80209a <direct_mode>
			portEXIT_CRITICAL ();
    157e:	0f 90       	pop	r0
    1580:	0f be       	out	0x3f, r0	; 63
							//*p_serial << PMS ("Press Ctrl-B for Coordinate Mode") << endl;
							//*p_serial << PMS ("Press Ctrl-D for Direct Operation Mode") << endl;
							//*p_serial << PMS ("Press Ctrl-R for Routine Operation Mode") << endl;
						
							direct_mode.put(false);
							transition_to(0);
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <_ZN8frt_task13transition_toEh>
							break;
    158c:	c4 c2       	rjmp	.+1416   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						
						case ('f'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    158e:	d5 01       	movw	r26, r10
    1590:	ed 91       	ld	r30, X+
    1592:	fc 91       	ld	r31, X
    1594:	b0 e2       	ldi	r27, 0x20	; 32
    1596:	e8 39       	cpi	r30, 0x98	; 152
    1598:	fb 07       	cpc	r31, r27
    159a:	41 f0       	breq	.+16     	; 0x15ac <_ZN9task_user3runEv+0x6dc>
    159c:	80 e2       	ldi	r24, 0x20	; 32
    159e:	e7 39       	cpi	r30, 0x97	; 151
    15a0:	f8 07       	cpc	r31, r24
    15a2:	21 f0       	breq	.+8      	; 0x15ac <_ZN9task_user3runEv+0x6dc>
    15a4:	90 e2       	ldi	r25, 0x20	; 32
    15a6:	e6 39       	cpi	r30, 0x96	; 150
    15a8:	f9 07       	cpc	r31, r25
    15aa:	41 f4       	brne	.+16     	; 0x15bc <_ZN9task_user3runEv+0x6ec>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	0f 92       	push	r0
			the_data = new_data;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	80 83       	st	Z, r24
			portEXIT_CRITICAL ();
    15b6:	0f 90       	pop	r0
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	ad c2       	rjmp	.+1370   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
								pmotor_operator->put(1);
								
							}
							else
							{
								*p_serial << PMS ("Please choose the motor you would like to control.") << endl;
    15bc:	6a e0       	ldi	r22, 0x0A	; 10
    15be:	ad 81       	ldd	r26, Y+5	; 0x05
    15c0:	be 81       	ldd	r27, Y+6	; 0x06
    15c2:	16 96       	adiw	r26, 0x06	; 6
    15c4:	8d 91       	ld	r24, X+
    15c6:	9c 91       	ld	r25, X
    15c8:	17 97       	sbiw	r26, 0x07	; 7
    15ca:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    15ce:	6c 01       	movw	r12, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    15d0:	62 ee       	ldi	r22, 0xE2	; 226
    15d2:	77 e0       	ldi	r23, 0x07	; 7
    15d4:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    15d8:	66 e0       	ldi	r22, 0x06	; 6
    15da:	c6 01       	movw	r24, r12
    15dc:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    15e0:	9a c2       	rjmp	.+1332   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
							}
							
							break;
							
						case ('r'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    15e2:	d5 01       	movw	r26, r10
    15e4:	ed 91       	ld	r30, X+
    15e6:	fc 91       	ld	r31, X
    15e8:	b0 e2       	ldi	r27, 0x20	; 32
    15ea:	e8 39       	cpi	r30, 0x98	; 152
    15ec:	fb 07       	cpc	r31, r27
    15ee:	41 f0       	breq	.+16     	; 0x1600 <_ZN9task_user3runEv+0x730>
    15f0:	80 e2       	ldi	r24, 0x20	; 32
    15f2:	e7 39       	cpi	r30, 0x97	; 151
    15f4:	f8 07       	cpc	r31, r24
    15f6:	21 f0       	breq	.+8      	; 0x1600 <_ZN9task_user3runEv+0x730>
    15f8:	90 e2       	ldi	r25, 0x20	; 32
    15fa:	e6 39       	cpi	r30, 0x96	; 150
    15fc:	f9 07       	cpc	r31, r25
    15fe:	41 f4       	brne	.+16     	; 0x1610 <_ZN9task_user3runEv+0x740>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	0f 92       	push	r0
			the_data = new_data;
    1606:	82 e0       	ldi	r24, 0x02	; 2
    1608:	80 83       	st	Z, r24
			portEXIT_CRITICAL ();
    160a:	0f 90       	pop	r0
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	83 c2       	rjmp	.+1286   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
								pmotor_operator->put(2);
								
							}
							else
							{
								*p_serial << PMS ("Please choose the motor you would like to control.") << endl;
    1610:	6a e0       	ldi	r22, 0x0A	; 10
    1612:	ad 81       	ldd	r26, Y+5	; 0x05
    1614:	be 81       	ldd	r27, Y+6	; 0x06
    1616:	16 96       	adiw	r26, 0x06	; 6
    1618:	8d 91       	ld	r24, X+
    161a:	9c 91       	ld	r25, X
    161c:	17 97       	sbiw	r26, 0x07	; 7
    161e:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    1622:	6c 01       	movw	r12, r24
    1624:	6f ea       	ldi	r22, 0xAF	; 175
    1626:	77 e0       	ldi	r23, 0x07	; 7
    1628:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    162c:	66 e0       	ldi	r22, 0x06	; 6
    162e:	c6 01       	movw	r24, r12
    1630:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    1634:	70 c2       	rjmp	.+1248   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
							}
							
							break;
							
						case ('s'):
							if(pmotor_operator == &xmotor_on || pmotor_operator == &ymotor_on || pmotor_operator == &zmotor_on)
    1636:	d5 01       	movw	r26, r10
    1638:	ed 91       	ld	r30, X+
    163a:	fc 91       	ld	r31, X
    163c:	b0 e2       	ldi	r27, 0x20	; 32
    163e:	e8 39       	cpi	r30, 0x98	; 152
    1640:	fb 07       	cpc	r31, r27
    1642:	41 f0       	breq	.+16     	; 0x1654 <_ZN9task_user3runEv+0x784>
    1644:	80 e2       	ldi	r24, 0x20	; 32
    1646:	e7 39       	cpi	r30, 0x97	; 151
    1648:	f8 07       	cpc	r31, r24
    164a:	21 f0       	breq	.+8      	; 0x1654 <_ZN9task_user3runEv+0x784>
    164c:	90 e2       	ldi	r25, 0x20	; 32
    164e:	e6 39       	cpi	r30, 0x96	; 150
    1650:	f9 07       	cpc	r31, r25
    1652:	39 f4       	brne	.+14     	; 0x1662 <_ZN9task_user3runEv+0x792>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	0f 92       	push	r0
			the_data = new_data;
    165a:	10 82       	st	Z, r1
			portEXIT_CRITICAL ();
    165c:	0f 90       	pop	r0
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	5a c2       	rjmp	.+1204   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
								pmotor_operator->put(0);
								
							}
							else
							{
								*p_serial << PMS ("Please choose the motor you would like to control.") << endl;
    1662:	6a e0       	ldi	r22, 0x0A	; 10
    1664:	ad 81       	ldd	r26, Y+5	; 0x05
    1666:	be 81       	ldd	r27, Y+6	; 0x06
    1668:	16 96       	adiw	r26, 0x06	; 6
    166a:	8d 91       	ld	r24, X+
    166c:	9c 91       	ld	r25, X
    166e:	17 97       	sbiw	r26, 0x07	; 7
    1670:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    1674:	6c 01       	movw	r12, r24
    1676:	6c e7       	ldi	r22, 0x7C	; 124
    1678:	77 e0       	ldi	r23, 0x07	; 7
    167a:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    167e:	66 e0       	ldi	r22, 0x06	; 6
    1680:	c6 01       	movw	r24, r12
    1682:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    1686:	47 c2       	rjmp	.+1166   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
			/** In State 3, the interface task is in configuration mode. In this mode, it has the ability to change the
			 *	default values of certain system parameters.
			 */			
				
			case (3):
				if (p_serial->check_for_char ())        // If the user typed a
    1688:	ed 81       	ldd	r30, Y+5	; 0x05
    168a:	fe 81       	ldd	r31, Y+6	; 0x06
    168c:	86 81       	ldd	r24, Z+6	; 0x06
    168e:	97 81       	ldd	r25, Z+7	; 0x07
    1690:	dc 01       	movw	r26, r24
    1692:	ed 91       	ld	r30, X+
    1694:	fc 91       	ld	r31, X
    1696:	04 80       	ldd	r0, Z+4	; 0x04
    1698:	f5 81       	ldd	r31, Z+5	; 0x05
    169a:	e0 2d       	mov	r30, r0
    169c:	19 95       	eicall
    169e:	88 23       	and	r24, r24
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <_ZN9task_user3runEv+0x7d4>
    16a2:	39 c2       	rjmp	.+1138   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
				{                                       // character, read
					char_in = p_serial->getchar ();     // the character
    16a4:	ed 81       	ldd	r30, Y+5	; 0x05
    16a6:	fe 81       	ldd	r31, Y+6	; 0x06
    16a8:	86 81       	ldd	r24, Z+6	; 0x06
    16aa:	97 81       	ldd	r25, Z+7	; 0x07
    16ac:	dc 01       	movw	r26, r24
    16ae:	ed 91       	ld	r30, X+
    16b0:	fc 91       	ld	r31, X
    16b2:	06 80       	ldd	r0, Z+6	; 0x06
    16b4:	f7 81       	ldd	r31, Z+7	; 0x07
    16b6:	e0 2d       	mov	r30, r0
    16b8:	19 95       	eicall
    16ba:	bc 01       	movw	r22, r24
					atoi_buf[atoi_index] = char_in;
    16bc:	f8 01       	movw	r30, r16
    16be:	80 81       	ld	r24, Z
    16c0:	ed 81       	ldd	r30, Y+5	; 0x05
    16c2:	fe 81       	ldd	r31, Y+6	; 0x06
    16c4:	e8 0f       	add	r30, r24
    16c6:	f1 1d       	adc	r31, r1
    16c8:	62 8b       	std	Z+18, r22	; 0x12
					atoi_index++;
    16ca:	8f 5f       	subi	r24, 0xFF	; 255
    16cc:	d8 01       	movw	r26, r16
    16ce:	8c 93       	st	X, r24
					switch (char_in)
    16d0:	fb 01       	movw	r30, r22
    16d2:	ff 27       	eor	r31, r31
    16d4:	bc 97       	sbiw	r30, 0x2c	; 44
    16d6:	ef 34       	cpi	r30, 0x4F	; 79
    16d8:	f1 05       	cpc	r31, r1
    16da:	08 f0       	brcs	.+2      	; 0x16de <_ZN9task_user3runEv+0x80e>
    16dc:	1c c2       	rjmp	.+1080   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
    16de:	88 27       	eor	r24, r24
    16e0:	ea 58       	subi	r30, 0x8A	; 138
    16e2:	fe 4f       	sbci	r31, 0xFE	; 254
    16e4:	8f 4f       	sbci	r24, 0xFF	; 255
    16e6:	0c 94 50 25 	jmp	0x4aa0	; 0x4aa0 <__tablejump2__>
							//atoi_index = 0;
							//data_config = &ramp_run_span;
							//break;
							
						case ('v'):
							*p_serial << PMS ("Max velocity set to:") << endl;
    16ea:	6a e0       	ldi	r22, 0x0A	; 10
    16ec:	ed 81       	ldd	r30, Y+5	; 0x05
    16ee:	fe 81       	ldd	r31, Y+6	; 0x06
    16f0:	86 81       	ldd	r24, Z+6	; 0x06
    16f2:	97 81       	ldd	r25, Z+7	; 0x07
    16f4:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    16f8:	6c 01       	movw	r12, r24
    16fa:	67 e6       	ldi	r22, 0x67	; 103
    16fc:	77 e0       	ldi	r23, 0x07	; 7
    16fe:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    1702:	66 e0       	ldi	r22, 0x06	; 6
    1704:	c6 01       	movw	r24, r12
    1706:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    170a:	d8 01       	movw	r26, r16
    170c:	1c 92       	st	X, r1
							data_config = &gen_max_v;
    170e:	8f ed       	ldi	r24, 0xDF	; 223
    1710:	90 e2       	ldi	r25, 0x20	; 32
    1712:	f3 01       	movw	r30, r6
    1714:	80 83       	st	Z, r24
    1716:	91 83       	std	Z+1, r25	; 0x01
							break;
    1718:	fe c1       	rjmp	.+1020   	; 0x1b16 <_ZN9task_user3runEv+0xc46>
							
						case ('x'):
							*p_serial << PMS ("X-axis max velocity set to:") << endl;
    171a:	6a e0       	ldi	r22, 0x0A	; 10
    171c:	ad 81       	ldd	r26, Y+5	; 0x05
    171e:	be 81       	ldd	r27, Y+6	; 0x06
    1720:	16 96       	adiw	r26, 0x06	; 6
    1722:	8d 91       	ld	r24, X+
    1724:	9c 91       	ld	r25, X
    1726:	17 97       	sbiw	r26, 0x07	; 7
    1728:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    172c:	6c 01       	movw	r12, r24
    172e:	6b e4       	ldi	r22, 0x4B	; 75
    1730:	77 e0       	ldi	r23, 0x07	; 7
    1732:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    1736:	66 e0       	ldi	r22, 0x06	; 6
    1738:	c6 01       	movw	r24, r12
    173a:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    173e:	f8 01       	movw	r30, r16
    1740:	10 82       	st	Z, r1
							v_config = &x_max_velocity;
    1742:	8d ef       	ldi	r24, 0xFD	; 253
    1744:	90 e2       	ldi	r25, 0x20	; 32
    1746:	d2 01       	movw	r26, r4
    1748:	8d 93       	st	X+, r24
    174a:	9c 93       	st	X, r25
							queue_indicator = true;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	f1 01       	movw	r30, r2
    1750:	80 83       	st	Z, r24
							break;
    1752:	e1 c1       	rjmp	.+962    	; 0x1b16 <_ZN9task_user3runEv+0xc46>
							
						case ('y'):
							*p_serial << PMS ("Y-axis max velocity set to:") << endl;
    1754:	6a e0       	ldi	r22, 0x0A	; 10
    1756:	ad 81       	ldd	r26, Y+5	; 0x05
    1758:	be 81       	ldd	r27, Y+6	; 0x06
    175a:	16 96       	adiw	r26, 0x06	; 6
    175c:	8d 91       	ld	r24, X+
    175e:	9c 91       	ld	r25, X
    1760:	17 97       	sbiw	r26, 0x07	; 7
    1762:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    1766:	6c 01       	movw	r12, r24
    1768:	6f e2       	ldi	r22, 0x2F	; 47
    176a:	77 e0       	ldi	r23, 0x07	; 7
    176c:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    1770:	66 e0       	ldi	r22, 0x06	; 6
    1772:	c6 01       	movw	r24, r12
    1774:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    1778:	f8 01       	movw	r30, r16
    177a:	10 82       	st	Z, r1
							v_config = &y_max_velocity;
    177c:	83 ef       	ldi	r24, 0xF3	; 243
    177e:	90 e2       	ldi	r25, 0x20	; 32
    1780:	d2 01       	movw	r26, r4
    1782:	8d 93       	st	X+, r24
    1784:	9c 93       	st	X, r25
							queue_indicator = true;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	f1 01       	movw	r30, r2
    178a:	80 83       	st	Z, r24
							break;
    178c:	c4 c1       	rjmp	.+904    	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						
						case ('z'):
							*p_serial << PMS ("Z-axis max velocity set to:") << endl;
    178e:	6a e0       	ldi	r22, 0x0A	; 10
    1790:	ad 81       	ldd	r26, Y+5	; 0x05
    1792:	be 81       	ldd	r27, Y+6	; 0x06
    1794:	16 96       	adiw	r26, 0x06	; 6
    1796:	8d 91       	ld	r24, X+
    1798:	9c 91       	ld	r25, X
    179a:	17 97       	sbiw	r26, 0x07	; 7
    179c:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    17a0:	6c 01       	movw	r12, r24
    17a2:	63 e1       	ldi	r22, 0x13	; 19
    17a4:	77 e0       	ldi	r23, 0x07	; 7
    17a6:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    17aa:	66 e0       	ldi	r22, 0x06	; 6
    17ac:	c6 01       	movw	r24, r12
    17ae:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    17b2:	f8 01       	movw	r30, r16
    17b4:	10 82       	st	Z, r1
							v_config = &z_max_velocity;
    17b6:	89 ee       	ldi	r24, 0xE9	; 233
    17b8:	90 e2       	ldi	r25, 0x20	; 32
    17ba:	d2 01       	movw	r26, r4
    17bc:	8d 93       	st	X+, r24
    17be:	9c 93       	st	X, r25
							queue_indicator = true;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	f1 01       	movw	r30, r2
    17c4:	80 83       	st	Z, r24
							break;
    17c6:	a7 c1       	rjmp	.+846    	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						
						case ('e'):
							*p_serial << PMS ("Leaving config mode") << endl;
    17c8:	6a e0       	ldi	r22, 0x0A	; 10
    17ca:	ad 81       	ldd	r26, Y+5	; 0x05
    17cc:	be 81       	ldd	r27, Y+6	; 0x06
    17ce:	16 96       	adiw	r26, 0x06	; 6
    17d0:	8d 91       	ld	r24, X+
    17d2:	9c 91       	ld	r25, X
    17d4:	17 97       	sbiw	r26, 0x07	; 7
    17d6:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    17da:	6c 01       	movw	r12, r24
    17dc:	6f ef       	ldi	r22, 0xFF	; 255
    17de:	76 e0       	ldi	r23, 0x06	; 6
    17e0:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    17e4:	66 e0       	ldi	r22, 0x06	; 6
    17e6:	c6 01       	movw	r24, r12
    17e8:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	0f 92       	push	r0
			the_data = new_data;
    17f2:	10 92 9c 20 	sts	0x209C, r1	; 0x80209c <configuration_mode>
			portEXIT_CRITICAL ();
    17f6:	0f 90       	pop	r0
    17f8:	0f be       	out	0x3f, r0	; 63
							configuration_mode.put(false);
							transition_to(0);
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
    17fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1800:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <_ZN8frt_task13transition_toEh>
							break;
    1804:	88 c1       	rjmp	.+784    	; 0x1b16 <_ZN9task_user3runEv+0xc46>
							
						case('a'):
							conv_int = str_to_int();
    1806:	8d 81       	ldd	r24, Y+5	; 0x05
    1808:	9e 81       	ldd	r25, Y+6	; 0x06
    180a:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN9task_user10str_to_intEv>
    180e:	9b 01       	movw	r18, r22
    1810:	ac 01       	movw	r20, r24
    1812:	f7 01       	movw	r30, r14
    1814:	60 83       	st	Z, r22
    1816:	71 83       	std	Z+1, r23	; 0x01
    1818:	82 83       	std	Z+2, r24	; 0x02
    181a:	93 83       	std	Z+3, r25	; 0x03
							if (queue_indicator)
    181c:	d1 01       	movw	r26, r2
    181e:	8c 91       	ld	r24, X
    1820:	88 23       	and	r24, r24
    1822:	b1 f0       	breq	.+44     	; 0x1850 <_ZN9task_user3runEv+0x980>
							{
								conv_int = 1000 * conv_int;
    1824:	a8 ee       	ldi	r26, 0xE8	; 232
    1826:	b3 e0       	ldi	r27, 0x03	; 3
    1828:	0e 94 67 25 	call	0x4ace	; 0x4ace <__muluhisi3>
    182c:	60 83       	st	Z, r22
    182e:	71 83       	std	Z+1, r23	; 0x01
    1830:	82 83       	std	Z+2, r24	; 0x02
    1832:	93 83       	std	Z+3, r25	; 0x03
								v_config->put(conv_int);
    1834:	d2 01       	movw	r26, r4
    1836:	8d 91       	ld	r24, X+
    1838:	9c 91       	ld	r25, X
    183a:	dc 01       	movw	r26, r24
    183c:	ed 91       	ld	r30, X+
    183e:	fc 91       	ld	r31, X
    1840:	01 90       	ld	r0, Z+
    1842:	f0 81       	ld	r31, Z
    1844:	e0 2d       	mov	r30, r0
    1846:	b7 01       	movw	r22, r14
    1848:	19 95       	eicall
								queue_indicator = false;
    184a:	f1 01       	movw	r30, r2
    184c:	10 82       	st	Z, r1
    184e:	32 c0       	rjmp	.+100    	; 0x18b4 <_ZN9task_user3runEv+0x9e4>
							}
							else
							{
								if (data_config == &ramp_run_span)
    1850:	d3 01       	movw	r26, r6
    1852:	cd 90       	ld	r12, X+
    1854:	dc 90       	ld	r13, X
    1856:	b5 ee       	ldi	r27, 0xE5	; 229
    1858:	cb 16       	cp	r12, r27
    185a:	b0 e2       	ldi	r27, 0x20	; 32
    185c:	db 06       	cpc	r13, r27
    185e:	61 f4       	brne	.+24     	; 0x1878 <_ZN9task_user3runEv+0x9a8>
								{
									conv_int = 100 / conv_int;
    1860:	64 e6       	ldi	r22, 0x64	; 100
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__udivmodsi4>
    186c:	f7 01       	movw	r30, r14
    186e:	20 83       	st	Z, r18
    1870:	31 83       	std	Z+1, r19	; 0x01
    1872:	42 83       	std	Z+2, r20	; 0x02
    1874:	53 83       	std	Z+3, r21	; 0x03
    1876:	0f c0       	rjmp	.+30     	; 0x1896 <_ZN9task_user3runEv+0x9c6>
								}
								else if (data_config == &gen_max_v)
    1878:	ff ed       	ldi	r31, 0xDF	; 223
    187a:	cf 16       	cp	r12, r31
    187c:	f0 e2       	ldi	r31, 0x20	; 32
    187e:	df 06       	cpc	r13, r31
    1880:	51 f4       	brne	.+20     	; 0x1896 <_ZN9task_user3runEv+0x9c6>
								{
									conv_int = 1500 * conv_int;
    1882:	ac ed       	ldi	r26, 0xDC	; 220
    1884:	b5 e0       	ldi	r27, 0x05	; 5
    1886:	0e 94 67 25 	call	0x4ace	; 0x4ace <__muluhisi3>
    188a:	d7 01       	movw	r26, r14
    188c:	6d 93       	st	X+, r22
    188e:	7d 93       	st	X+, r23
    1890:	8d 93       	st	X+, r24
    1892:	9c 93       	st	X, r25
    1894:	13 97       	sbiw	r26, 0x03	; 3
								}
								data_config->put(conv_int);
    1896:	f7 01       	movw	r30, r14
    1898:	80 81       	ld	r24, Z
    189a:	91 81       	ldd	r25, Z+1	; 0x01
    189c:	a2 81       	ldd	r26, Z+2	; 0x02
    189e:	b3 81       	ldd	r27, Z+3	; 0x03
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	0f 92       	push	r0
			the_data = new_data;
    18a6:	f6 01       	movw	r30, r12
    18a8:	80 83       	st	Z, r24
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	a2 83       	std	Z+2, r26	; 0x02
    18ae:	b3 83       	std	Z+3, r27	; 0x03
			portEXIT_CRITICAL ();
    18b0:	0f 90       	pop	r0
    18b2:	0f be       	out	0x3f, r0	; 63
							}
									
							atoi_index = 0;
    18b4:	d8 01       	movw	r26, r16
    18b6:	1c 92       	st	X, r1
							*p_serial << PMS ("Config entered:") << conv_int << endl;
    18b8:	d7 01       	movw	r26, r14
    18ba:	8d 91       	ld	r24, X+
    18bc:	9d 91       	ld	r25, X+
    18be:	0d 90       	ld	r0, X+
    18c0:	bc 91       	ld	r27, X
    18c2:	a0 2d       	mov	r26, r0
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	9a 83       	std	Y+2, r25	; 0x02
    18c8:	ab 83       	std	Y+3, r26	; 0x03
    18ca:	bc 83       	std	Y+4, r27	; 0x04
    18cc:	6a e0       	ldi	r22, 0x0A	; 10
    18ce:	ed 81       	ldd	r30, Y+5	; 0x05
    18d0:	fe 81       	ldd	r31, Y+6	; 0x06
    18d2:	86 81       	ldd	r24, Z+6	; 0x06
    18d4:	97 81       	ldd	r25, Z+7	; 0x07
    18d6:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    18da:	6c 01       	movw	r12, r24
    18dc:	6f ee       	ldi	r22, 0xEF	; 239
    18de:	76 e0       	ldi	r23, 0x06	; 6
    18e0:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    18e4:	49 81       	ldd	r20, Y+1	; 0x01
    18e6:	5a 81       	ldd	r21, Y+2	; 0x02
    18e8:	6b 81       	ldd	r22, Y+3	; 0x03
    18ea:	7c 81       	ldd	r23, Y+4	; 0x04
    18ec:	c6 01       	movw	r24, r12
    18ee:	0e 94 65 21 	call	0x42ca	; 0x42ca <_ZN8emstreamlsEm>
    18f2:	66 e0       	ldi	r22, 0x06	; 6
    18f4:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
							break;
    18f8:	0e c1       	rjmp	.+540    	; 0x1b16 <_ZN9task_user3runEv+0xc46>
							
						case (','):
							*p_serial << char_in;
    18fa:	ad 81       	ldd	r26, Y+5	; 0x05
    18fc:	be 81       	ldd	r27, Y+6	; 0x06
    18fe:	16 96       	adiw	r26, 0x06	; 6
    1900:	8d 91       	ld	r24, X+
    1902:	9c 91       	ld	r25, X
    1904:	17 97       	sbiw	r26, 0x07	; 7
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    1906:	dc 01       	movw	r26, r24
    1908:	ed 91       	ld	r30, X+
    190a:	fc 91       	ld	r31, X
    190c:	02 80       	ldd	r0, Z+2	; 0x02
    190e:	f3 81       	ldd	r31, Z+3	; 0x03
    1910:	e0 2d       	mov	r30, r0
    1912:	19 95       	eicall
							
							conv_int = str_to_int();
    1914:	8d 81       	ldd	r24, Y+5	; 0x05
    1916:	9e 81       	ldd	r25, Y+6	; 0x06
    1918:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN9task_user10str_to_intEv>
    191c:	9b 01       	movw	r18, r22
    191e:	ac 01       	movw	r20, r24
							conv_int = conv_int * 1000;
    1920:	a8 ee       	ldi	r26, 0xE8	; 232
    1922:	b3 e0       	ldi	r27, 0x03	; 3
    1924:	0e 94 67 25 	call	0x4ace	; 0x4ace <__muluhisi3>
    1928:	f7 01       	movw	r30, r14
    192a:	60 83       	st	Z, r22
    192c:	71 83       	std	Z+1, r23	; 0x01
    192e:	82 83       	std	Z+2, r24	; 0x02
    1930:	93 83       	std	Z+3, r25	; 0x03
							v_config->put(conv_int);
    1932:	d2 01       	movw	r26, r4
    1934:	8d 91       	ld	r24, X+
    1936:	9c 91       	ld	r25, X
    1938:	dc 01       	movw	r26, r24
    193a:	ed 91       	ld	r30, X+
    193c:	fc 91       	ld	r31, X
    193e:	01 90       	ld	r0, Z+
    1940:	f0 81       	ld	r31, Z
    1942:	e0 2d       	mov	r30, r0
    1944:	b7 01       	movw	r22, r14
    1946:	19 95       	eicall
							atoi_index = 0;
    1948:	f8 01       	movw	r30, r16
    194a:	10 82       	st	Z, r1
							break;
    194c:	e4 c0       	rjmp	.+456    	; 0x1b16 <_ZN9task_user3runEv+0xc46>
							
						case ('u'):
							*p_serial << PMS ("Microstep scaler set to:") << endl;
    194e:	6a e0       	ldi	r22, 0x0A	; 10
    1950:	ad 81       	ldd	r26, Y+5	; 0x05
    1952:	be 81       	ldd	r27, Y+6	; 0x06
    1954:	16 96       	adiw	r26, 0x06	; 6
    1956:	8d 91       	ld	r24, X+
    1958:	9c 91       	ld	r25, X
    195a:	17 97       	sbiw	r26, 0x07	; 7
    195c:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    1960:	6c 01       	movw	r12, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    1962:	66 ed       	ldi	r22, 0xD6	; 214
    1964:	76 e0       	ldi	r23, 0x06	; 6
    1966:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    196a:	66 e0       	ldi	r22, 0x06	; 6
    196c:	c6 01       	movw	r24, r12
    196e:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    1972:	f8 01       	movw	r30, r16
    1974:	10 82       	st	Z, r1
							data_config = &microstep_scaler;
    1976:	8b e0       	ldi	r24, 0x0B	; 11
    1978:	91 e2       	ldi	r25, 0x21	; 33
    197a:	d3 01       	movw	r26, r6
    197c:	8d 93       	st	X+, r24
    197e:	9c 93       	st	X, r25
							break;
    1980:	ca c0       	rjmp	.+404    	; 0x1b16 <_ZN9task_user3runEv+0xc46>
							
						case ('s'):
							*p_serial << PMS ("Sensor delay set to:") << endl;
    1982:	6a e0       	ldi	r22, 0x0A	; 10
    1984:	ed 81       	ldd	r30, Y+5	; 0x05
    1986:	fe 81       	ldd	r31, Y+6	; 0x06
    1988:	86 81       	ldd	r24, Z+6	; 0x06
    198a:	97 81       	ldd	r25, Z+7	; 0x07
    198c:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    1990:	6c 01       	movw	r12, r24
    1992:	61 ec       	ldi	r22, 0xC1	; 193
    1994:	76 e0       	ldi	r23, 0x06	; 6
    1996:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    199a:	66 e0       	ldi	r22, 0x06	; 6
    199c:	c6 01       	movw	r24, r12
    199e:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    19a2:	d8 01       	movw	r26, r16
    19a4:	1c 92       	st	X, r1
							data_config = &sensor_delay;
    19a6:	8f e0       	ldi	r24, 0x0F	; 15
    19a8:	91 e2       	ldi	r25, 0x21	; 33
    19aa:	f3 01       	movw	r30, r6
    19ac:	80 83       	st	Z, r24
    19ae:	91 83       	std	Z+1, r25	; 0x01
							break;
    19b0:	b2 c0       	rjmp	.+356    	; 0x1b16 <_ZN9task_user3runEv+0xc46>
							
						case ('n'):
							*p_serial << PMS ("Sensor sample size set to:") << endl;
    19b2:	6a e0       	ldi	r22, 0x0A	; 10
    19b4:	ad 81       	ldd	r26, Y+5	; 0x05
    19b6:	be 81       	ldd	r27, Y+6	; 0x06
    19b8:	16 96       	adiw	r26, 0x06	; 6
    19ba:	8d 91       	ld	r24, X+
    19bc:	9c 91       	ld	r25, X
    19be:	17 97       	sbiw	r26, 0x07	; 7
    19c0:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    19c4:	6c 01       	movw	r12, r24
    19c6:	66 ea       	ldi	r22, 0xA6	; 166
    19c8:	76 e0       	ldi	r23, 0x06	; 6
    19ca:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    19ce:	66 e0       	ldi	r22, 0x06	; 6
    19d0:	c6 01       	movw	r24, r12
    19d2:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
							atoi_index = 0;
    19d6:	f8 01       	movw	r30, r16
    19d8:	10 82       	st	Z, r1
							data_config = &sensor_sample_number;
    19da:	84 e1       	ldi	r24, 0x14	; 20
    19dc:	91 e2       	ldi	r25, 0x21	; 33
    19de:	d3 01       	movw	r26, r6
    19e0:	8d 93       	st	X+, r24
    19e2:	9c 93       	st	X, r25
							break;
    19e4:	98 c0       	rjmp	.+304    	; 0x1b16 <_ZN9task_user3runEv+0xc46>
							
						case('0'):
						
						*p_serial << char_in;
    19e6:	ed 81       	ldd	r30, Y+5	; 0x05
    19e8:	fe 81       	ldd	r31, Y+6	; 0x06
    19ea:	86 81       	ldd	r24, Z+6	; 0x06
    19ec:	97 81       	ldd	r25, Z+7	; 0x07
		 *  @param ch The character to be printed
		 *  @return A reference to the serial device on which the printing is done
		 */
		emstream& operator<< (char ch)
		{
			putchar (ch); 
    19ee:	dc 01       	movw	r26, r24
    19f0:	ed 91       	ld	r30, X+
    19f2:	fc 91       	ld	r31, X
    19f4:	02 80       	ldd	r0, Z+2	; 0x02
    19f6:	f3 81       	ldd	r31, Z+3	; 0x03
    19f8:	e0 2d       	mov	r30, r0
    19fa:	19 95       	eicall
    19fc:	8c c0       	rjmp	.+280    	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('1'):
						
						*p_serial << char_in;
    19fe:	ed 81       	ldd	r30, Y+5	; 0x05
    1a00:	fe 81       	ldd	r31, Y+6	; 0x06
    1a02:	86 81       	ldd	r24, Z+6	; 0x06
    1a04:	97 81       	ldd	r25, Z+7	; 0x07
    1a06:	dc 01       	movw	r26, r24
    1a08:	ed 91       	ld	r30, X+
    1a0a:	fc 91       	ld	r31, X
    1a0c:	02 80       	ldd	r0, Z+2	; 0x02
    1a0e:	f3 81       	ldd	r31, Z+3	; 0x03
    1a10:	e0 2d       	mov	r30, r0
    1a12:	19 95       	eicall
    1a14:	80 c0       	rjmp	.+256    	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('2'):
						
						*p_serial << char_in;
    1a16:	ed 81       	ldd	r30, Y+5	; 0x05
    1a18:	fe 81       	ldd	r31, Y+6	; 0x06
    1a1a:	86 81       	ldd	r24, Z+6	; 0x06
    1a1c:	97 81       	ldd	r25, Z+7	; 0x07
    1a1e:	dc 01       	movw	r26, r24
    1a20:	ed 91       	ld	r30, X+
    1a22:	fc 91       	ld	r31, X
    1a24:	02 80       	ldd	r0, Z+2	; 0x02
    1a26:	f3 81       	ldd	r31, Z+3	; 0x03
    1a28:	e0 2d       	mov	r30, r0
    1a2a:	19 95       	eicall
    1a2c:	74 c0       	rjmp	.+232    	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('3'):
						
						*p_serial << char_in;
    1a2e:	ed 81       	ldd	r30, Y+5	; 0x05
    1a30:	fe 81       	ldd	r31, Y+6	; 0x06
    1a32:	86 81       	ldd	r24, Z+6	; 0x06
    1a34:	97 81       	ldd	r25, Z+7	; 0x07
    1a36:	dc 01       	movw	r26, r24
    1a38:	ed 91       	ld	r30, X+
    1a3a:	fc 91       	ld	r31, X
    1a3c:	02 80       	ldd	r0, Z+2	; 0x02
    1a3e:	f3 81       	ldd	r31, Z+3	; 0x03
    1a40:	e0 2d       	mov	r30, r0
    1a42:	19 95       	eicall
    1a44:	68 c0       	rjmp	.+208    	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('4'):
						
						*p_serial << char_in;
    1a46:	ed 81       	ldd	r30, Y+5	; 0x05
    1a48:	fe 81       	ldd	r31, Y+6	; 0x06
    1a4a:	86 81       	ldd	r24, Z+6	; 0x06
    1a4c:	97 81       	ldd	r25, Z+7	; 0x07
    1a4e:	dc 01       	movw	r26, r24
    1a50:	ed 91       	ld	r30, X+
    1a52:	fc 91       	ld	r31, X
    1a54:	02 80       	ldd	r0, Z+2	; 0x02
    1a56:	f3 81       	ldd	r31, Z+3	; 0x03
    1a58:	e0 2d       	mov	r30, r0
    1a5a:	19 95       	eicall
    1a5c:	5c c0       	rjmp	.+184    	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('5'):
						
						*p_serial << char_in;
    1a5e:	ed 81       	ldd	r30, Y+5	; 0x05
    1a60:	fe 81       	ldd	r31, Y+6	; 0x06
    1a62:	86 81       	ldd	r24, Z+6	; 0x06
    1a64:	97 81       	ldd	r25, Z+7	; 0x07
    1a66:	dc 01       	movw	r26, r24
    1a68:	ed 91       	ld	r30, X+
    1a6a:	fc 91       	ld	r31, X
    1a6c:	02 80       	ldd	r0, Z+2	; 0x02
    1a6e:	f3 81       	ldd	r31, Z+3	; 0x03
    1a70:	e0 2d       	mov	r30, r0
    1a72:	19 95       	eicall
    1a74:	50 c0       	rjmp	.+160    	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('6'):
						
						*p_serial << char_in;
    1a76:	ed 81       	ldd	r30, Y+5	; 0x05
    1a78:	fe 81       	ldd	r31, Y+6	; 0x06
    1a7a:	86 81       	ldd	r24, Z+6	; 0x06
    1a7c:	97 81       	ldd	r25, Z+7	; 0x07
    1a7e:	dc 01       	movw	r26, r24
    1a80:	ed 91       	ld	r30, X+
    1a82:	fc 91       	ld	r31, X
    1a84:	02 80       	ldd	r0, Z+2	; 0x02
    1a86:	f3 81       	ldd	r31, Z+3	; 0x03
    1a88:	e0 2d       	mov	r30, r0
    1a8a:	19 95       	eicall
    1a8c:	44 c0       	rjmp	.+136    	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('7'):
						
						*p_serial << char_in;
    1a8e:	ed 81       	ldd	r30, Y+5	; 0x05
    1a90:	fe 81       	ldd	r31, Y+6	; 0x06
    1a92:	86 81       	ldd	r24, Z+6	; 0x06
    1a94:	97 81       	ldd	r25, Z+7	; 0x07
    1a96:	dc 01       	movw	r26, r24
    1a98:	ed 91       	ld	r30, X+
    1a9a:	fc 91       	ld	r31, X
    1a9c:	02 80       	ldd	r0, Z+2	; 0x02
    1a9e:	f3 81       	ldd	r31, Z+3	; 0x03
    1aa0:	e0 2d       	mov	r30, r0
    1aa2:	19 95       	eicall
    1aa4:	38 c0       	rjmp	.+112    	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('8'):
						
						*p_serial << char_in;
    1aa6:	ed 81       	ldd	r30, Y+5	; 0x05
    1aa8:	fe 81       	ldd	r31, Y+6	; 0x06
    1aaa:	86 81       	ldd	r24, Z+6	; 0x06
    1aac:	97 81       	ldd	r25, Z+7	; 0x07
    1aae:	dc 01       	movw	r26, r24
    1ab0:	ed 91       	ld	r30, X+
    1ab2:	fc 91       	ld	r31, X
    1ab4:	02 80       	ldd	r0, Z+2	; 0x02
    1ab6:	f3 81       	ldd	r31, Z+3	; 0x03
    1ab8:	e0 2d       	mov	r30, r0
    1aba:	19 95       	eicall
    1abc:	2c c0       	rjmp	.+88     	; 0x1b16 <_ZN9task_user3runEv+0xc46>
						break;

						case('9'):
						
						*p_serial << char_in;
    1abe:	ed 81       	ldd	r30, Y+5	; 0x05
    1ac0:	fe 81       	ldd	r31, Y+6	; 0x06
    1ac2:	86 81       	ldd	r24, Z+6	; 0x06
    1ac4:	97 81       	ldd	r25, Z+7	; 0x07
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	ed 91       	ld	r30, X+
    1aca:	fc 91       	ld	r31, X
    1acc:	02 80       	ldd	r0, Z+2	; 0x02
    1ace:	f3 81       	ldd	r31, Z+3	; 0x03
    1ad0:	e0 2d       	mov	r30, r0
    1ad2:	19 95       	eicall
    1ad4:	20 c0       	rjmp	.+64     	; 0x1b16 <_ZN9task_user3runEv+0xc46>
    1ad6:	a9 83       	std	Y+1, r26	; 0x01
    1ad8:	ba 83       	std	Y+2, r27	; 0x02
				break;

			// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			// We should never get to the default state. If we do, complain and restart
			default:
				*p_serial << PMS ("Illegal state! Resetting AVR") << endl;
    1ada:	6a e0       	ldi	r22, 0x0A	; 10
    1adc:	fd 01       	movw	r30, r26
    1ade:	86 81       	ldd	r24, Z+6	; 0x06
    1ae0:	97 81       	ldd	r25, Z+7	; 0x07
    1ae2:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	9a 83       	std	Y+2, r25	; 0x02
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    1aea:	69 e8       	ldi	r22, 0x89	; 137
    1aec:	76 e0       	ldi	r23, 0x06	; 6
    1aee:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    1af2:	66 e0       	ldi	r22, 0x06	; 6
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	9a 81       	ldd	r25, Y+2	; 0x02
    1af8:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
				wdt_enable (WDTO_120MS);
    1afc:	93 e0       	ldi	r25, 0x03	; 3
    1afe:	88 ed       	ldi	r24, 0xD8	; 216
    1b00:	08 b6       	in	r0, 0x38	; 56
    1b02:	18 be       	out	0x38, r1	; 56
    1b04:	84 bf       	out	0x34, r24	; 52
    1b06:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1b0a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
    1b0e:	81 fd       	sbrc	r24, 1
    1b10:	fc cf       	rjmp	.-8      	; 0x1b0a <_ZN9task_user3runEv+0xc3a>
    1b12:	08 be       	out	0x38, r0	; 56
    1b14:	ff cf       	rjmp	.-2      	; 0x1b14 <_ZN9task_user3runEv+0xc44>
				for (;;);
				break;

		} // End switch state

		runs++;                             // Increment counter for debugging
    1b16:	ed 81       	ldd	r30, Y+5	; 0x05
    1b18:	fe 81       	ldd	r31, Y+6	; 0x06
    1b1a:	86 85       	ldd	r24, Z+14	; 0x0e
    1b1c:	97 85       	ldd	r25, Z+15	; 0x0f
    1b1e:	a0 89       	ldd	r26, Z+16	; 0x10
    1b20:	b1 89       	ldd	r27, Z+17	; 0x11
    1b22:	01 96       	adiw	r24, 0x01	; 1
    1b24:	a1 1d       	adc	r26, r1
    1b26:	b1 1d       	adc	r27, r1
    1b28:	86 87       	std	Z+14, r24	; 0x0e
    1b2a:	97 87       	std	Z+15, r25	; 0x0f
    1b2c:	a0 8b       	std	Z+16, r26	; 0x10
    1b2e:	b1 8b       	std	Z+17, r27	; 0x11

		// No matter the state, wait for approximately a millisecond before we 
		// run the loop again. This gives lower priority tasks a chance to run
		vTaskDelay (configMS_TO_TICKS (1));
    1b30:	61 e0       	ldi	r22, 0x01	; 1
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <vTaskDelay>

	//print_main_menu();

	// This is an infinite loop; it runs until the power is turned off. There is one 
	// such loop inside the code for each task
	for (;;)
    1b3c:	fb c9       	rjmp	.-3082   	; 0xf34 <_ZN9task_user3runEv+0x64>

00001b3e <_ZN9frt_queueImE16ISR_num_items_inEv>:
		 *  called only from within an interrupt service routine.
		 *  @return The number of items in the queue
		 */
		size_t ISR_num_items_in (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle));
    1b3e:	fc 01       	movw	r30, r24
    1b40:	84 81       	ldd	r24, Z+4	; 0x04
    1b42:	95 81       	ldd	r25, Z+5	; 0x05
    1b44:	0e 94 c8 18 	call	0x3190	; 0x3190 <uxQueueMessagesWaitingFromISR>
		}
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	08 95       	ret

00001b4c <_ZN9frt_queueImE13ISR_not_emptyEv>:
		 *  an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool ISR_not_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) != 0);
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	84 81       	ldd	r24, Z+4	; 0x04
    1b50:	95 81       	ldd	r25, Z+5	; 0x05
    1b52:	0e 94 c8 18 	call	0x3190	; 0x3190 <uxQueueMessagesWaitingFromISR>
    1b56:	91 e0       	ldi	r25, 0x01	; 1
    1b58:	81 11       	cpse	r24, r1
    1b5a:	01 c0       	rjmp	.+2      	; 0x1b5e <_ZN9frt_queueImE13ISR_not_emptyEv+0x12>
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
		}
    1b5e:	89 2f       	mov	r24, r25
    1b60:	08 95       	ret

00001b62 <_ZN9frt_queueImE12ISR_is_emptyEv>:
		 *  routine. It must not be used in normal non-ISR code. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool ISR_is_empty (void)
		{
			return (uxQueueMessagesWaitingFromISR (handle) == 0);
    1b62:	fc 01       	movw	r30, r24
    1b64:	84 81       	ldd	r24, Z+4	; 0x04
    1b66:	95 81       	ldd	r25, Z+5	; 0x05
    1b68:	0e 94 c8 18 	call	0x3190	; 0x3190 <uxQueueMessagesWaitingFromISR>
    1b6c:	91 e0       	ldi	r25, 0x01	; 1
    1b6e:	81 11       	cpse	r24, r1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
		}
    1b72:	89 2f       	mov	r24, r25
    1b74:	08 95       	ret

00001b76 <_ZN9frt_queueImE12num_items_inEv>:
		 *  ISR_num_items_in() can be called from within an ISR. 
		 *  @return The number of items in the queue
		 */
		size_t num_items_in (void)
		{
			return (uxQueueMessagesWaiting (handle));
    1b76:	fc 01       	movw	r30, r24
    1b78:	84 81       	ldd	r24, Z+4	; 0x04
    1b7a:	95 81       	ldd	r25, Z+5	; 0x05
    1b7c:	0e 94 c0 18 	call	0x3180	; 0x3180 <uxQueueMessagesWaiting>
		}
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	08 95       	ret

00001b84 <_ZN9frt_queueImE9not_emptyEv>:
		 *  \b not be called from within an interrupt service routine. 
		 *  @return True if there's something in the queue, false if not
		 */
		bool not_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) != 0);
    1b84:	fc 01       	movw	r30, r24
    1b86:	84 81       	ldd	r24, Z+4	; 0x04
    1b88:	95 81       	ldd	r25, Z+5	; 0x05
    1b8a:	0e 94 c0 18 	call	0x3180	; 0x3180 <uxQueueMessagesWaiting>
    1b8e:	91 e0       	ldi	r25, 0x01	; 1
    1b90:	81 11       	cpse	r24, r1
    1b92:	01 c0       	rjmp	.+2      	; 0x1b96 <_ZN9frt_queueImE9not_emptyEv+0x12>
    1b94:	90 e0       	ldi	r25, 0x00	; 0
		}
    1b96:	89 2f       	mov	r24, r25
    1b98:	08 95       	ret

00001b9a <_ZN9frt_queueImE8is_emptyEv>:
		/** This method checks if the queue is empty. 
		*  @return true if the queue is empty, false if there's something in it
		*/
		bool is_empty (void)
		{
			return (uxQueueMessagesWaiting (handle) == 0);
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	84 81       	ldd	r24, Z+4	; 0x04
    1b9e:	95 81       	ldd	r25, Z+5	; 0x05
    1ba0:	0e 94 c0 18 	call	0x3180	; 0x3180 <uxQueueMessagesWaiting>
    1ba4:	91 e0       	ldi	r25, 0x01	; 1
    1ba6:	81 11       	cpse	r24, r1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
		}
    1baa:	89 2f       	mov	r24, r25
    1bac:	08 95       	ret

00001bae <_ZN9frt_queueImE10get_a_copyERm>:
 *  \c xQueuePeekFromISR() which would allow copying items from a queue in an ISR. 
 *  @param item A reference to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get_a_copy (data_type& item)
    1bae:	0f 93       	push	r16
{
	xQueuePeek (handle, &item, portMAX_DELAY);
    1bb0:	01 e0       	ldi	r16, 0x01	; 1
    1bb2:	2f ef       	ldi	r18, 0xFF	; 255
    1bb4:	3f ef       	ldi	r19, 0xFF	; 255
    1bb6:	a9 01       	movw	r20, r18
    1bb8:	fc 01       	movw	r30, r24
    1bba:	84 81       	ldd	r24, Z+4	; 0x04
    1bbc:	95 81       	ldd	r25, Z+5	; 0x05
    1bbe:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <xQueueGenericReceive>
}
    1bc2:	0f 91       	pop	r16
    1bc4:	08 95       	ret

00001bc6 <_ZN9frt_queueImE10get_a_copyEv>:
 *          data type if we couldn't get any data from the queue and the attempt
 *          timed out
 */

template <class data_type>
inline data_type frt_queue<data_type>::get_a_copy (void)
    1bc6:	0f 93       	push	r16
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <_ZN9frt_queueImE10get_a_copyEv+0x8>
    1bce:	1f 92       	push	r1
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueuePeek (handle, &recv_item, portMAX_DELAY);
    1bd4:	01 e0       	ldi	r16, 0x01	; 1
    1bd6:	2f ef       	ldi	r18, 0xFF	; 255
    1bd8:	3f ef       	ldi	r19, 0xFF	; 255
    1bda:	a9 01       	movw	r20, r18
    1bdc:	be 01       	movw	r22, r28
    1bde:	6f 5f       	subi	r22, 0xFF	; 255
    1be0:	7f 4f       	sbci	r23, 0xFF	; 255
    1be2:	fc 01       	movw	r30, r24
    1be4:	84 81       	ldd	r24, Z+4	; 0x04
    1be6:	95 81       	ldd	r25, Z+5	; 0x05
    1be8:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <xQueueGenericReceive>
	return (recv_item);
    1bec:	69 81       	ldd	r22, Y+1	; 0x01
    1bee:	7a 81       	ldd	r23, Y+2	; 0x02
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1bf4:	24 96       	adiw	r28, 0x04	; 4
    1bf6:	cd bf       	out	0x3d, r28	; 61
    1bf8:	de bf       	out	0x3e, r29	; 62
    1bfa:	df 91       	pop	r29
    1bfc:	cf 91       	pop	r28
    1bfe:	0f 91       	pop	r16
    1c00:	08 95       	ret

00001c02 <_ZN9frt_queueImE3getEPm>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::get (data_type* p_item)
    1c02:	0f 93       	push	r16
{
	xQueueReceive (handle, p_item, portMAX_DELAY);
    1c04:	00 e0       	ldi	r16, 0x00	; 0
    1c06:	2f ef       	ldi	r18, 0xFF	; 255
    1c08:	3f ef       	ldi	r19, 0xFF	; 255
    1c0a:	a9 01       	movw	r20, r18
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	84 81       	ldd	r24, Z+4	; 0x04
    1c10:	95 81       	ldd	r25, Z+5	; 0x05
    1c12:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <xQueueGenericReceive>
}
    1c16:	0f 91       	pop	r16
    1c18:	08 95       	ret

00001c1a <_ZN9frt_queueImE3getEv>:
 *  up. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::get (void)
    1c1a:	0f 93       	push	r16
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <_ZN9frt_queueImE3getEv+0x8>
    1c22:	1f 92       	push	r1
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
{
	data_type recv_item;                    // Data item read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceive (handle, &recv_item, portMAX_DELAY);
    1c28:	00 e0       	ldi	r16, 0x00	; 0
    1c2a:	2f ef       	ldi	r18, 0xFF	; 255
    1c2c:	3f ef       	ldi	r19, 0xFF	; 255
    1c2e:	a9 01       	movw	r20, r18
    1c30:	be 01       	movw	r22, r28
    1c32:	6f 5f       	subi	r22, 0xFF	; 255
    1c34:	7f 4f       	sbci	r23, 0xFF	; 255
    1c36:	fc 01       	movw	r30, r24
    1c38:	84 81       	ldd	r24, Z+4	; 0x04
    1c3a:	95 81       	ldd	r25, Z+5	; 0x05
    1c3c:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <xQueueGenericReceive>
	return (recv_item);
    1c40:	69 81       	ldd	r22, Y+1	; 0x01
    1c42:	7a 81       	ldd	r23, Y+2	; 0x02
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1c48:	24 96       	adiw	r28, 0x04	; 4
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	0f 91       	pop	r16
    1c54:	08 95       	ret

00001c56 <_ZN9frt_queueImE7ISR_getEPm>:
 *  service routine. 
 *  @param p_item A pointer to the data item into which received data will go
 */

template <class data_type>
inline void frt_queue<data_type>::ISR_get (data_type* p_item)
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
    1c5a:	1f 92       	push	r1
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
{
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, and
	// nothing will actually be copied
	xQueueReceiveFromISR (handle, p_item, &task_awakened);
    1c60:	ae 01       	movw	r20, r28
    1c62:	4f 5f       	subi	r20, 0xFF	; 255
    1c64:	5f 4f       	sbci	r21, 0xFF	; 255
    1c66:	fc 01       	movw	r30, r24
    1c68:	84 81       	ldd	r24, Z+4	; 0x04
    1c6a:	95 81       	ldd	r25, Z+5	; 0x05
    1c6c:	0e 94 93 18 	call	0x3126	; 0x3126 <xQueueReceiveFromISR>
}
    1c70:	0f 90       	pop	r0
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	08 95       	ret

00001c78 <_ZN9frt_queueImE7ISR_getEv>:
 *  service routine. This method must not be called from within normal non-ISR code. 
 *  @return The data retrieved from the queue
 */

template <class data_type>
inline data_type frt_queue<data_type>::ISR_get (void)
    1c78:	cf 93       	push	r28
    1c7a:	df 93       	push	r29
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	25 97       	sbiw	r28, 0x05	; 5
    1c82:	cd bf       	out	0x3d, r28	; 61
    1c84:	de bf       	out	0x3e, r29	; 62
	data_type recv_item;                    // Data item read from the queue
	signed portBASE_TYPE task_awakened;     // Checks if a task will wake up

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue, so
	// we'll return the item as created by its default constructor
	xQueueReceiveFromISR (handle, &recv_item, &task_awakened);
    1c86:	ae 01       	movw	r20, r28
    1c88:	4b 5f       	subi	r20, 0xFB	; 251
    1c8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c8c:	be 01       	movw	r22, r28
    1c8e:	6f 5f       	subi	r22, 0xFF	; 255
    1c90:	7f 4f       	sbci	r23, 0xFF	; 255
    1c92:	fc 01       	movw	r30, r24
    1c94:	84 81       	ldd	r24, Z+4	; 0x04
    1c96:	95 81       	ldd	r25, Z+5	; 0x05
    1c98:	0e 94 93 18 	call	0x3126	; 0x3126 <xQueueReceiveFromISR>
	return (recv_item);
    1c9c:	69 81       	ldd	r22, Y+1	; 0x01
    1c9e:	7a 81       	ldd	r23, Y+2	; 0x02
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1ca4:	25 96       	adiw	r28, 0x05	; 5
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	08 95       	ret

00001cb0 <_ZN9frt_queueImE11ISR_butt_inERKm>:
 *              the front of the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
bool frt_queue<data_type>::ISR_butt_in (const data_type& item)
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	1f 92       	push	r1
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    1cba:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;                      // Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToFrontFromISR (handle, &item, &shouldSwitch));
    1cbc:	21 e0       	ldi	r18, 0x01	; 1
    1cbe:	ae 01       	movw	r20, r28
    1cc0:	4f 5f       	subi	r20, 0xFF	; 255
    1cc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	84 81       	ldd	r24, Z+4	; 0x04
    1cc8:	95 81       	ldd	r25, Z+5	; 0x05
    1cca:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    1cce:	91 e0       	ldi	r25, 0x01	; 1
    1cd0:	81 11       	cpse	r24, r1
    1cd2:	01 c0       	rjmp	.+2      	; 0x1cd6 <_ZN9frt_queueImE11ISR_butt_inERKm+0x26>
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
}
    1cd6:	89 2f       	mov	r24, r25
    1cd8:	0f 90       	pop	r0
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	08 95       	ret

00001ce0 <_ZN9frt_queueImE7ISR_putERKm>:
 *  @param item Reference to the item which is going to be put into the queue
 *  @return True if the item was successfully queued, false if not
 */

template <class data_type>
inline bool frt_queue<data_type>::ISR_put (const data_type& item)
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	1f 92       	push	r1
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
{
	// This value is set to true if a context switch should occur due to this data
	signed portBASE_TYPE shouldSwitch = pdFALSE;
    1cea:	19 82       	std	Y+1, r1	; 0x01

	bool return_value;						// Value returned from this method

	// Call the FreeRTOS function and save its return value
	return_value = (bool)(xQueueSendToBackFromISR (handle, &item, &shouldSwitch));
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	ae 01       	movw	r20, r28
    1cf0:	4f 5f       	subi	r20, 0xFF	; 255
    1cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	84 81       	ldd	r24, Z+4	; 0x04
    1cf8:	95 81       	ldd	r25, Z+5	; 0x05
    1cfa:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <xQueueGenericSendFromISR>
// 	{
// 		taskYIELD_FROM_ISR ();
// 	}

	// Return the return value saved from the call to xQueueSendToBackFromISR()
	return (return_value);
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	81 11       	cpse	r24, r1
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <_ZN9frt_queueImE7ISR_putERKm+0x26>
    1d04:	90 e0       	ldi	r25, 0x00	; 0
}
    1d06:	89 2f       	mov	r24, r25
    1d08:	0f 90       	pop	r0
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	08 95       	ret

00001d10 <_ZN9frt_queueImE7butt_inERKm>:
		 *  \b not be used within an interrupt service routine. 
		 *  @param item Reference to the item which is going to be (rudely) put into 
		 *              the front of the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool butt_in (const data_type& item)
    1d10:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToFront (handle, &item, ticks_to_wait)));
    1d12:	fc 01       	movw	r30, r24
    1d14:	26 81       	ldd	r18, Z+6	; 0x06
    1d16:	37 81       	ldd	r19, Z+7	; 0x07
    1d18:	40 85       	ldd	r20, Z+8	; 0x08
    1d1a:	51 85       	ldd	r21, Z+9	; 0x09
    1d1c:	01 e0       	ldi	r16, 0x01	; 1
    1d1e:	84 81       	ldd	r24, Z+4	; 0x04
    1d20:	95 81       	ldd	r25, Z+5	; 0x05
    1d22:	0e 94 08 17 	call	0x2e10	; 0x2e10 <xQueueGenericSend>
    1d26:	91 e0       	ldi	r25, 0x01	; 1
    1d28:	81 11       	cpse	r24, r1
    1d2a:	01 c0       	rjmp	.+2      	; 0x1d2e <_ZN9frt_queueImE7butt_inERKm+0x1e>
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
		}
    1d2e:	89 2f       	mov	r24, r25
    1d30:	0f 91       	pop	r16
    1d32:	08 95       	ret

00001d34 <_ZN9frt_queueImE3putERKm>:
		 *  an item into the front of the queue so it will be retreived first, use 
		 *  \c butt_in() instead. This method must \b not be used within an ISR.
		 *  @param item Reference to the item which is going to be put into the queue
		 *  @return True if the item was successfully queued, false if not
		 */
		bool put (const data_type& item)
    1d34:	0f 93       	push	r16
		{
			return ((bool)(xQueueSendToBack (handle, &item, ticks_to_wait)));
    1d36:	fc 01       	movw	r30, r24
    1d38:	26 81       	ldd	r18, Z+6	; 0x06
    1d3a:	37 81       	ldd	r19, Z+7	; 0x07
    1d3c:	40 85       	ldd	r20, Z+8	; 0x08
    1d3e:	51 85       	ldd	r21, Z+9	; 0x09
    1d40:	00 e0       	ldi	r16, 0x00	; 0
    1d42:	84 81       	ldd	r24, Z+4	; 0x04
    1d44:	95 81       	ldd	r25, Z+5	; 0x05
    1d46:	0e 94 08 17 	call	0x2e10	; 0x2e10 <xQueueGenericSend>
    1d4a:	91 e0       	ldi	r25, 0x01	; 1
    1d4c:	81 11       	cpse	r24, r1
    1d4e:	01 c0       	rjmp	.+2      	; 0x1d52 <_ZN9frt_queueImE3putERKm+0x1e>
    1d50:	90 e0       	ldi	r25, 0x00	; 0
		}
    1d52:	89 2f       	mov	r24, r25
    1d54:	0f 91       	pop	r16
    1d56:	08 95       	ret

00001d58 <_Z8CCPWritePVhh>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    1d58:	0f 93       	push	r16
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	1f 92       	push	r1
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
  #if defined __GNUC__
  uint8_t volatile saved_sreg = SREG;
    1d64:	2f b7       	in	r18, 0x3f	; 63
    1d66:	29 83       	std	Y+1, r18	; 0x01
  cli();
    1d68:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
  #ifdef RAMPZ
  RAMPZ = 0;
    1d6a:	1b be       	out	0x3b, r1	; 59
  "out   %3, r16"       "\n\t"
  "st     Z,  %1"       "\n\t"
  :
  : "r" (tmpAddr), "r" (value), "M" (0xD8), "i" (&CCP)
  : "r16", "r30", "r31"
  );
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	08 ed       	ldi	r16, 0xD8	; 216
    1d70:	04 bf       	out	0x34, r16	; 52
    1d72:	60 83       	st	Z, r22

  SREG = saved_sreg;
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	8f bf       	out	0x3f, r24	; 63
  #endif
}
    1d78:	0f 90       	pop	r0
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	0f 91       	pop	r16
    1d80:	08 95       	ret

00001d82 <main>:
 *  reset.
 *  @return This is a real-time microcontroller program which doesn't return. Ever.
 */

int main (void)
{
    1d82:	0f 93       	push	r16
    1d84:	1f 93       	push	r17
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	6d 97       	sbiw	r28, 0x1d	; 29
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	de bf       	out	0x3e, r29	; 62
  cli();
    1d94:	f8 94       	cli
  // Configure the system clock
  { 
    // Enable the 32MHz internal RC oscillator and the external 32KHz oscillator
    OSC.CTRL |= (1 << OSC_RC32MEN_bp);
    1d96:	e0 e5       	ldi	r30, 0x50	; 80
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	82 60       	ori	r24, 0x02	; 2
    1d9e:	80 83       	st	Z, r24
    do {} while((OSC.STATUS & (1 << OSC_RC32MRDY_bp)) != (1 << OSC_RC32MRDY_bp));
    1da0:	81 81       	ldd	r24, Z+1	; 0x01
    1da2:	81 ff       	sbrs	r24, 1
    1da4:	fd cf       	rjmp	.-6      	; 0x1da0 <main+0x1e>

    // Select the clock
    CCPWrite(&(CLK.CTRL),((CLK.CTRL & ~CLK_SCLKSEL_gm) | (1 << CLK_SCLKSEL0_bp)));
    1da6:	60 91 40 00 	lds	r22, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    1daa:	68 7f       	andi	r22, 0xF8	; 248
    1dac:	61 60       	ori	r22, 0x01	; 1
    1dae:	80 e4       	ldi	r24, 0x40	; 64
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_Z8CCPWritePVhh>
    
    // Disable the 2MHz internal RC oscillator
    OSC.CTRL &= ~(1 << OSC_RC2MEN_bp);
    1db6:	e0 e5       	ldi	r30, 0x50	; 80
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	8e 7f       	andi	r24, 0xFE	; 254
    1dbe:	80 83       	st	Z, r24
  }
  
  // Disable the watchdog timer unless it's needed later. This is important because
  // sometimes the watchdog timer may have been left on...and it tends to stay on  
  wdt_disable ();
    1dc0:	9d ef       	ldi	r25, 0xFD	; 253
    1dc2:	88 ed       	ldi	r24, 0xD8	; 216
    1dc4:	08 b6       	in	r0, 0x38	; 56
    1dc6:	18 be       	out	0x38, r1	; 56
    1dc8:	84 bf       	out	0x34, r24	; 52
    1dca:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1dce:	08 be       	out	0x38, r0	; 56

  // Configure a serial port which can be used by a task to print debugging infor-
  // mation, or to allow user interaction, or for whatever use is appropriate.  The
  // serial port will be used by the user interface task after setup is complete and
  // the task scheduler has been started by the function vTaskStartScheduler()
  rs232 ser_dev(0,&USARTE0); // Create a serial device on USART E0
    1dd0:	40 ea       	ldi	r20, 0xA0	; 160
    1dd2:	5a e0       	ldi	r21, 0x0A	; 10
    1dd4:	60 e0       	ldi	r22, 0x00	; 0
    1dd6:	70 e0       	ldi	r23, 0x00	; 0
    1dd8:	ce 01       	movw	r24, r28
    1dda:	01 96       	adiw	r24, 0x01	; 1
    1ddc:	0e 94 8d 22 	call	0x451a	; 0x451a <_ZN5rs232C1EjP12USART_struct>
  ser_dev << clrscr << "FreeRTOS Xmega Testing Program" << endl << endl;
    1de0:	67 e0       	ldi	r22, 0x07	; 7
    1de2:	ce 01       	movw	r24, r28
    1de4:	01 96       	adiw	r24, 0x01	; 1
    1de6:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    1dea:	8c 01       	movw	r16, r24
    1dec:	6e e0       	ldi	r22, 0x0E	; 14
    1dee:	70 e2       	ldi	r23, 0x20	; 32
    1df0:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    1df4:	66 e0       	ldi	r22, 0x06	; 6
    1df6:	c8 01       	movw	r24, r16
    1df8:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    1dfc:	66 e0       	ldi	r22, 0x06	; 6
    1dfe:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	0f 92       	push	r0
			the_data = new_data;
    1e08:	82 e0       	ldi	r24, 0x02	; 2
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	a0 e0       	ldi	r26, 0x00	; 0
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	80 93 0f 21 	sts	0x210F, r24	; 0x80210f <sensor_delay>
    1e14:	90 93 10 21 	sts	0x2110, r25	; 0x802110 <sensor_delay+0x1>
    1e18:	a0 93 11 21 	sts	0x2111, r26	; 0x802111 <sensor_delay+0x2>
    1e1c:	b0 93 12 21 	sts	0x2112, r27	; 0x802112 <sensor_delay+0x3>
			portEXIT_CRITICAL ();
    1e20:	0f 90       	pop	r0
    1e22:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	0f 92       	push	r0
			the_data = new_data;
    1e2a:	88 e0       	ldi	r24, 0x08	; 8
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	a0 e0       	ldi	r26, 0x00	; 0
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	80 93 0b 21 	sts	0x210B, r24	; 0x80210b <microstep_scaler>
    1e36:	90 93 0c 21 	sts	0x210C, r25	; 0x80210c <microstep_scaler+0x1>
    1e3a:	a0 93 0d 21 	sts	0x210D, r26	; 0x80210d <microstep_scaler+0x2>
    1e3e:	b0 93 0e 21 	sts	0x210E, r27	; 0x80210e <microstep_scaler+0x3>
			portEXIT_CRITICAL ();
    1e42:	0f 90       	pop	r0
    1e44:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	0f 92       	push	r0
			the_data = new_data;
    1e4c:	88 ee       	ldi	r24, 0xE8	; 232
    1e4e:	93 e0       	ldi	r25, 0x03	; 3
    1e50:	a0 e0       	ldi	r26, 0x00	; 0
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	80 93 14 21 	sts	0x2114, r24	; 0x802114 <sensor_sample_number>
    1e58:	90 93 15 21 	sts	0x2115, r25	; 0x802115 <sensor_sample_number+0x1>
    1e5c:	a0 93 16 21 	sts	0x2116, r26	; 0x802116 <sensor_sample_number+0x2>
    1e60:	b0 93 17 21 	sts	0x2117, r27	; 0x802117 <sensor_sample_number+0x3>
			portEXIT_CRITICAL ();
    1e64:	0f 90       	pop	r0
    1e66:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	0f 92       	push	r0
			the_data = new_data;
    1e6e:	82 e3       	ldi	r24, 0x32	; 50
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	a0 e0       	ldi	r26, 0x00	; 0
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	80 93 e5 20 	sts	0x20E5, r24	; 0x8020e5 <ramp_run_span>
    1e7a:	90 93 e6 20 	sts	0x20E6, r25	; 0x8020e6 <ramp_run_span+0x1>
    1e7e:	a0 93 e7 20 	sts	0x20E7, r26	; 0x8020e7 <ramp_run_span+0x2>
    1e82:	b0 93 e8 20 	sts	0x20E8, r27	; 0x8020e8 <ramp_run_span+0x3>
			portEXIT_CRITICAL ();
    1e86:	0f 90       	pop	r0
    1e88:	0f be       	out	0x3f, r0	; 63
		*  stack, jumping, jumping back and popping the program counter, yawn, zzz...
		*  @param new_data The data which is to be written
		*/
		void put (data_type new_data)
		{
			portENTER_CRITICAL ();
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	0f 92       	push	r0
			the_data = new_data;
    1e90:	8c e4       	ldi	r24, 0x4C	; 76
    1e92:	9d e1       	ldi	r25, 0x1D	; 29
    1e94:	a0 e0       	ldi	r26, 0x00	; 0
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	80 93 df 20 	sts	0x20DF, r24	; 0x8020df <gen_max_v>
    1e9c:	90 93 e0 20 	sts	0x20E0, r25	; 0x8020e0 <gen_max_v+0x1>
    1ea0:	a0 93 e1 20 	sts	0x20E1, r26	; 0x8020e1 <gen_max_v+0x2>
    1ea4:	b0 93 e2 20 	sts	0x20E2, r27	; 0x8020e2 <gen_max_v+0x3>
			portEXIT_CRITICAL ();
    1ea8:	0f 90       	pop	r0
    1eaa:	0f be       	out	0x3f, r0	; 63
  adc = new ADC(&ADCB, &(ADCB.CH0));
  sbg01 = new SBG01(adc, 6.28930818);
  #endif

  #ifdef USE_FAKE_DRIVERS
  sbg01 = new SBG01 ( ) ;
    1eac:	8a e1       	ldi	r24, 0x1A	; 26
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <_Znwj>
    1eb4:	80 93 dd 20 	sts	0x20DD, r24	; 0x8020dd <sbg01>
    1eb8:	90 93 de 20 	sts	0x20DE, r25	; 0x8020de <sbg01+0x1>
  lim_z1 = new DeviceDriver::LimitSwitch ( &PORTF, PIN1_bm, 0, 0, EVSYS_CHMUX_PORTF_PIN1_gc);
  lim_z2 = new DeviceDriver::LimitSwitch ( &PORTF, PIN2_bm, 0, 1, EVSYS_CHMUX_PORTF_PIN2_gc);
  #endif

  #ifdef USE_FAKE_DRIVERS
  lim_x1 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    1ebc:	87 e0       	ldi	r24, 0x07	; 7
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <_Znwj>
    1ec4:	8c 01       	movw	r16, r24
    1ec6:	83 e0       	ldi	r24, 0x03	; 3
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <_Znwj>
  {  
  public:
    typedef PeripheralDriver::EventInterrupt EventInterrupt;

    inline LimitSwitch( EventInterrupt * i )
      : interrupt_(i)
    1ece:	fc 01       	movw	r30, r24
    1ed0:	00 83       	st	Z, r16
    1ed2:	11 83       	std	Z+1, r17	; 0x01
    1ed4:	80 93 db 20 	sts	0x20DB, r24	; 0x8020db <lim_x1>
    1ed8:	90 93 dc 20 	sts	0x20DC, r25	; 0x8020dc <lim_x1+0x1>
  lim_x2 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    1edc:	87 e0       	ldi	r24, 0x07	; 7
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <_Znwj>
    1ee4:	8c 01       	movw	r16, r24
    1ee6:	83 e0       	ldi	r24, 0x03	; 3
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <_Znwj>
    1eee:	fc 01       	movw	r30, r24
    1ef0:	00 83       	st	Z, r16
    1ef2:	11 83       	std	Z+1, r17	; 0x01
    1ef4:	80 93 d9 20 	sts	0x20D9, r24	; 0x8020d9 <lim_x2>
    1ef8:	90 93 da 20 	sts	0x20DA, r25	; 0x8020da <lim_x2+0x1>
  lim_y1 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    1efc:	87 e0       	ldi	r24, 0x07	; 7
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <_Znwj>
    1f04:	8c 01       	movw	r16, r24
    1f06:	83 e0       	ldi	r24, 0x03	; 3
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <_Znwj>
    1f0e:	fc 01       	movw	r30, r24
    1f10:	00 83       	st	Z, r16
    1f12:	11 83       	std	Z+1, r17	; 0x01
    1f14:	80 93 d7 20 	sts	0x20D7, r24	; 0x8020d7 <lim_y1>
    1f18:	90 93 d8 20 	sts	0x20D8, r25	; 0x8020d8 <lim_y1+0x1>
  lim_y2 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    1f1c:	87 e0       	ldi	r24, 0x07	; 7
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <_Znwj>
    1f24:	8c 01       	movw	r16, r24
    1f26:	83 e0       	ldi	r24, 0x03	; 3
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <_Znwj>
    1f2e:	fc 01       	movw	r30, r24
    1f30:	00 83       	st	Z, r16
    1f32:	11 83       	std	Z+1, r17	; 0x01
    1f34:	80 93 d5 20 	sts	0x20D5, r24	; 0x8020d5 <lim_y2>
    1f38:	90 93 d6 20 	sts	0x20D6, r25	; 0x8020d6 <lim_y2+0x1>
  lim_z1 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    1f3c:	87 e0       	ldi	r24, 0x07	; 7
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <_Znwj>
    1f44:	8c 01       	movw	r16, r24
    1f46:	83 e0       	ldi	r24, 0x03	; 3
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <_Znwj>
    1f4e:	fc 01       	movw	r30, r24
    1f50:	00 83       	st	Z, r16
    1f52:	11 83       	std	Z+1, r17	; 0x01
    1f54:	80 93 d3 20 	sts	0x20D3, r24	; 0x8020d3 <lim_z1>
    1f58:	90 93 d4 20 	sts	0x20D4, r25	; 0x8020d4 <lim_z1+0x1>
  lim_z2 = new DeviceDriver::LimitSwitch ( new PeripheralDriver::EventInterrupt() ) ;
    1f5c:	87 e0       	ldi	r24, 0x07	; 7
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <_Znwj>
    1f64:	8c 01       	movw	r16, r24
    1f66:	83 e0       	ldi	r24, 0x03	; 3
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <_Znwj>
    1f6e:	fc 01       	movw	r30, r24
    1f70:	00 83       	st	Z, r16
    1f72:	11 83       	std	Z+1, r17	; 0x01
    1f74:	80 93 d1 20 	sts	0x20D1, r24	; 0x8020d1 <lim_z2>
    1f78:	90 93 d2 20 	sts	0x20D2, r25	; 0x8020d2 <lim_z2+0x1>
  #endif
  
  
  // The user interface is at low priority; it could have been run in the idle task
  // but it is desired to exercise the RTOS more thoroughly in this test program
  new task_user ( "UserInt", task_priority (0), 128, &ser_dev ) ;
    1f7c:	83 e2       	ldi	r24, 0x23	; 35
    1f7e:	91 e0       	ldi	r25, 0x01	; 1
    1f80:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <_Znwj>
    1f84:	8e 01       	movw	r16, r28
    1f86:	0f 5f       	subi	r16, 0xFF	; 255
    1f88:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8a:	20 e8       	ldi	r18, 0x80	; 128
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	6d e2       	ldi	r22, 0x2D	; 45
    1f92:	70 e2       	ldi	r23, 0x20	; 32
    1f94:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_ZN9task_userC1EPKchjP8emstream>
  //new task_thermocouple ("Therm9", task_priority(6), 128, &ser_dev, therm9);
  //
  //new task_thermocouple ("Therm10", task_priority(6), 128, &ser_dev, therm10);
  
  // Enable high level interrupts and global interrupts
  PMIC_CTRL = (1 << PMIC_HILVLEN_bp | 1 << PMIC_MEDLVLEN_bp | 1 << PMIC_LOLVLEN_bp);
    1f98:	87 e0       	ldi	r24, 0x07	; 7
    1f9a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
  sei();
    1f9e:	78 94       	sei

    //initialization_complete.put(false);
  
  // Here's where the RTOS scheduler is started up. It should never exit as long as
  // power is on and the microcontroller isn't rebooted
  vTaskStartScheduler ();
    1fa0:	0e 94 31 1a 	call	0x3462	; 0x3462 <vTaskStartScheduler>
}
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	6d 96       	adiw	r28, 0x1d	; 29
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	df 91       	pop	r29
    1fb0:	cf 91       	pop	r28
    1fb2:	1f 91       	pop	r17
    1fb4:	0f 91       	pop	r16
    1fb6:	08 95       	ret

00001fb8 <__vector_66>:

ISR(PORTA_INT0_vect)
{
    1fb8:	1f 92       	push	r1
    1fba:	0f 92       	push	r0
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	0f 92       	push	r0
    1fc0:	11 24       	eor	r1, r1
    1fc2:	0b b6       	in	r0, 0x3b	; 59
    1fc4:	0f 92       	push	r0
    1fc6:	2f 93       	push	r18
    1fc8:	3f 93       	push	r19
    1fca:	4f 93       	push	r20
    1fcc:	5f 93       	push	r21
    1fce:	6f 93       	push	r22
    1fd0:	7f 93       	push	r23
    1fd2:	8f 93       	push	r24
    1fd4:	9f 93       	push	r25
    1fd6:	af 93       	push	r26
    1fd8:	bf 93       	push	r27
    1fda:	ef 93       	push	r30
    1fdc:	ff 93       	push	r31
  md_x->min_bound_interrupt_handler();
    1fde:	80 91 cf 20 	lds	r24, 0x20CF	; 0x8020cf <md_x>
    1fe2:	90 91 d0 20 	lds	r25, 0x20D0	; 0x8020d0 <md_x+0x1>
    1fe6:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN12DeviceDriver6DM542T27min_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_x->get_direction() == 1)
    1fea:	80 91 9b 20 	lds	r24, 0x209B	; 0x80209b <coordinate_mode>
    1fee:	88 23       	and	r24, r24
    1ff0:	79 f0       	breq	.+30     	; 0x2010 <__vector_66+0x58>
    1ff2:	80 91 cf 20 	lds	r24, 0x20CF	; 0x8020cf <md_x>
    1ff6:	90 91 d0 20 	lds	r25, 0x20D0	; 0x8020d0 <md_x+0x1>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	ed 91       	ld	r30, X+
    1ffe:	fc 91       	ld	r31, X
    2000:	06 84       	ldd	r0, Z+14	; 0x0e
    2002:	f7 85       	ldd	r31, Z+15	; 0x0f
    2004:	e0 2d       	mov	r30, r0
    2006:	19 95       	eicall
    2008:	81 30       	cpi	r24, 0x01	; 1
    200a:	11 f4       	brne	.+4      	; 0x2010 <__vector_66+0x58>
		*  default case on most small microcontrollers. 
		*  @param new_data The data which is to be written into the shared data item
		*/
		void ISR_put (data_type new_data)
		{
			the_data = new_data;
    200c:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <reset>
  {
    reset.ISR_put(true);
  }
}
    2010:	ff 91       	pop	r31
    2012:	ef 91       	pop	r30
    2014:	bf 91       	pop	r27
    2016:	af 91       	pop	r26
    2018:	9f 91       	pop	r25
    201a:	8f 91       	pop	r24
    201c:	7f 91       	pop	r23
    201e:	6f 91       	pop	r22
    2020:	5f 91       	pop	r21
    2022:	4f 91       	pop	r20
    2024:	3f 91       	pop	r19
    2026:	2f 91       	pop	r18
    2028:	0f 90       	pop	r0
    202a:	0b be       	out	0x3b, r0	; 59
    202c:	0f 90       	pop	r0
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	0f 90       	pop	r0
    2032:	1f 90       	pop	r1
    2034:	18 95       	reti

00002036 <__vector_67>:

ISR(PORTA_INT1_vect)
{
    2036:	1f 92       	push	r1
    2038:	0f 92       	push	r0
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	0f 92       	push	r0
    203e:	11 24       	eor	r1, r1
    2040:	0b b6       	in	r0, 0x3b	; 59
    2042:	0f 92       	push	r0
    2044:	2f 93       	push	r18
    2046:	3f 93       	push	r19
    2048:	4f 93       	push	r20
    204a:	5f 93       	push	r21
    204c:	6f 93       	push	r22
    204e:	7f 93       	push	r23
    2050:	8f 93       	push	r24
    2052:	9f 93       	push	r25
    2054:	af 93       	push	r26
    2056:	bf 93       	push	r27
    2058:	ef 93       	push	r30
    205a:	ff 93       	push	r31
  md_x->max_bound_interrupt_handler();
    205c:	80 91 cf 20 	lds	r24, 0x20CF	; 0x8020cf <md_x>
    2060:	90 91 d0 20 	lds	r25, 0x20D0	; 0x8020d0 <md_x+0x1>
    2064:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN12DeviceDriver6DM542T27max_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_x->get_direction() == 0)
    2068:	80 91 9b 20 	lds	r24, 0x209B	; 0x80209b <coordinate_mode>
    206c:	88 23       	and	r24, r24
    206e:	81 f0       	breq	.+32     	; 0x2090 <__vector_67+0x5a>
    2070:	80 91 cf 20 	lds	r24, 0x20CF	; 0x8020cf <md_x>
    2074:	90 91 d0 20 	lds	r25, 0x20D0	; 0x8020d0 <md_x+0x1>
    2078:	dc 01       	movw	r26, r24
    207a:	ed 91       	ld	r30, X+
    207c:	fc 91       	ld	r31, X
    207e:	06 84       	ldd	r0, Z+14	; 0x0e
    2080:	f7 85       	ldd	r31, Z+15	; 0x0f
    2082:	e0 2d       	mov	r30, r0
    2084:	19 95       	eicall
    2086:	81 11       	cpse	r24, r1
    2088:	03 c0       	rjmp	.+6      	; 0x2090 <__vector_67+0x5a>
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <reset>
  {
    reset.ISR_put(true);
  }
}
    2090:	ff 91       	pop	r31
    2092:	ef 91       	pop	r30
    2094:	bf 91       	pop	r27
    2096:	af 91       	pop	r26
    2098:	9f 91       	pop	r25
    209a:	8f 91       	pop	r24
    209c:	7f 91       	pop	r23
    209e:	6f 91       	pop	r22
    20a0:	5f 91       	pop	r21
    20a2:	4f 91       	pop	r20
    20a4:	3f 91       	pop	r19
    20a6:	2f 91       	pop	r18
    20a8:	0f 90       	pop	r0
    20aa:	0b be       	out	0x3b, r0	; 59
    20ac:	0f 90       	pop	r0
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	0f 90       	pop	r0
    20b2:	1f 90       	pop	r1
    20b4:	18 95       	reti

000020b6 <__vector_43>:

ISR(PORTE_INT0_vect)
{
    20b6:	1f 92       	push	r1
    20b8:	0f 92       	push	r0
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	0f 92       	push	r0
    20be:	11 24       	eor	r1, r1
    20c0:	0b b6       	in	r0, 0x3b	; 59
    20c2:	0f 92       	push	r0
    20c4:	2f 93       	push	r18
    20c6:	3f 93       	push	r19
    20c8:	4f 93       	push	r20
    20ca:	5f 93       	push	r21
    20cc:	6f 93       	push	r22
    20ce:	7f 93       	push	r23
    20d0:	8f 93       	push	r24
    20d2:	9f 93       	push	r25
    20d4:	af 93       	push	r26
    20d6:	bf 93       	push	r27
    20d8:	ef 93       	push	r30
    20da:	ff 93       	push	r31
  md_y->min_bound_interrupt_handler();
    20dc:	80 91 cd 20 	lds	r24, 0x20CD	; 0x8020cd <md_y>
    20e0:	90 91 ce 20 	lds	r25, 0x20CE	; 0x8020ce <md_y+0x1>
    20e4:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN12DeviceDriver6DM542T27min_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_y->get_direction() == 1)
    20e8:	80 91 9b 20 	lds	r24, 0x209B	; 0x80209b <coordinate_mode>
    20ec:	88 23       	and	r24, r24
    20ee:	79 f0       	breq	.+30     	; 0x210e <__vector_43+0x58>
    20f0:	80 91 cd 20 	lds	r24, 0x20CD	; 0x8020cd <md_y>
    20f4:	90 91 ce 20 	lds	r25, 0x20CE	; 0x8020ce <md_y+0x1>
    20f8:	dc 01       	movw	r26, r24
    20fa:	ed 91       	ld	r30, X+
    20fc:	fc 91       	ld	r31, X
    20fe:	06 84       	ldd	r0, Z+14	; 0x0e
    2100:	f7 85       	ldd	r31, Z+15	; 0x0f
    2102:	e0 2d       	mov	r30, r0
    2104:	19 95       	eicall
    2106:	81 30       	cpi	r24, 0x01	; 1
    2108:	11 f4       	brne	.+4      	; 0x210e <__vector_43+0x58>
    210a:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <reset>
  {
    reset.ISR_put(true);
  }
}
    210e:	ff 91       	pop	r31
    2110:	ef 91       	pop	r30
    2112:	bf 91       	pop	r27
    2114:	af 91       	pop	r26
    2116:	9f 91       	pop	r25
    2118:	8f 91       	pop	r24
    211a:	7f 91       	pop	r23
    211c:	6f 91       	pop	r22
    211e:	5f 91       	pop	r21
    2120:	4f 91       	pop	r20
    2122:	3f 91       	pop	r19
    2124:	2f 91       	pop	r18
    2126:	0f 90       	pop	r0
    2128:	0b be       	out	0x3b, r0	; 59
    212a:	0f 90       	pop	r0
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	0f 90       	pop	r0
    2130:	1f 90       	pop	r1
    2132:	18 95       	reti

00002134 <__vector_44>:

ISR(PORTE_INT1_vect)
{
    2134:	1f 92       	push	r1
    2136:	0f 92       	push	r0
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	0f 92       	push	r0
    213c:	11 24       	eor	r1, r1
    213e:	0b b6       	in	r0, 0x3b	; 59
    2140:	0f 92       	push	r0
    2142:	2f 93       	push	r18
    2144:	3f 93       	push	r19
    2146:	4f 93       	push	r20
    2148:	5f 93       	push	r21
    214a:	6f 93       	push	r22
    214c:	7f 93       	push	r23
    214e:	8f 93       	push	r24
    2150:	9f 93       	push	r25
    2152:	af 93       	push	r26
    2154:	bf 93       	push	r27
    2156:	ef 93       	push	r30
    2158:	ff 93       	push	r31
  md_y->max_bound_interrupt_handler();
    215a:	80 91 cd 20 	lds	r24, 0x20CD	; 0x8020cd <md_y>
    215e:	90 91 ce 20 	lds	r25, 0x20CE	; 0x8020ce <md_y+0x1>
    2162:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN12DeviceDriver6DM542T27max_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_y->get_direction() == 0)
    2166:	80 91 9b 20 	lds	r24, 0x209B	; 0x80209b <coordinate_mode>
    216a:	88 23       	and	r24, r24
    216c:	81 f0       	breq	.+32     	; 0x218e <__vector_44+0x5a>
    216e:	80 91 cd 20 	lds	r24, 0x20CD	; 0x8020cd <md_y>
    2172:	90 91 ce 20 	lds	r25, 0x20CE	; 0x8020ce <md_y+0x1>
    2176:	dc 01       	movw	r26, r24
    2178:	ed 91       	ld	r30, X+
    217a:	fc 91       	ld	r31, X
    217c:	06 84       	ldd	r0, Z+14	; 0x0e
    217e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2180:	e0 2d       	mov	r30, r0
    2182:	19 95       	eicall
    2184:	81 11       	cpse	r24, r1
    2186:	03 c0       	rjmp	.+6      	; 0x218e <__vector_44+0x5a>
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <reset>
  {
    reset.ISR_put(true);
  }
}
    218e:	ff 91       	pop	r31
    2190:	ef 91       	pop	r30
    2192:	bf 91       	pop	r27
    2194:	af 91       	pop	r26
    2196:	9f 91       	pop	r25
    2198:	8f 91       	pop	r24
    219a:	7f 91       	pop	r23
    219c:	6f 91       	pop	r22
    219e:	5f 91       	pop	r21
    21a0:	4f 91       	pop	r20
    21a2:	3f 91       	pop	r19
    21a4:	2f 91       	pop	r18
    21a6:	0f 90       	pop	r0
    21a8:	0b be       	out	0x3b, r0	; 59
    21aa:	0f 90       	pop	r0
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	0f 90       	pop	r0
    21b0:	1f 90       	pop	r1
    21b2:	18 95       	reti

000021b4 <__vector_104>:

ISR(PORTF_INT0_vect)
{
    21b4:	1f 92       	push	r1
    21b6:	0f 92       	push	r0
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	0f 92       	push	r0
    21bc:	11 24       	eor	r1, r1
    21be:	0b b6       	in	r0, 0x3b	; 59
    21c0:	0f 92       	push	r0
    21c2:	2f 93       	push	r18
    21c4:	3f 93       	push	r19
    21c6:	4f 93       	push	r20
    21c8:	5f 93       	push	r21
    21ca:	6f 93       	push	r22
    21cc:	7f 93       	push	r23
    21ce:	8f 93       	push	r24
    21d0:	9f 93       	push	r25
    21d2:	af 93       	push	r26
    21d4:	bf 93       	push	r27
    21d6:	ef 93       	push	r30
    21d8:	ff 93       	push	r31
  md_z->min_bound_interrupt_handler();
    21da:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <md_z>
    21de:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <md_z+0x1>
    21e2:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN12DeviceDriver6DM542T27min_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_z->get_direction() == 1)
    21e6:	80 91 9b 20 	lds	r24, 0x209B	; 0x80209b <coordinate_mode>
    21ea:	88 23       	and	r24, r24
    21ec:	79 f0       	breq	.+30     	; 0x220c <__vector_104+0x58>
    21ee:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <md_z>
    21f2:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <md_z+0x1>
    21f6:	dc 01       	movw	r26, r24
    21f8:	ed 91       	ld	r30, X+
    21fa:	fc 91       	ld	r31, X
    21fc:	06 84       	ldd	r0, Z+14	; 0x0e
    21fe:	f7 85       	ldd	r31, Z+15	; 0x0f
    2200:	e0 2d       	mov	r30, r0
    2202:	19 95       	eicall
    2204:	81 30       	cpi	r24, 0x01	; 1
    2206:	11 f4       	brne	.+4      	; 0x220c <__vector_104+0x58>
    2208:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <reset>
  {
    reset.ISR_put(true);
  }
}
    220c:	ff 91       	pop	r31
    220e:	ef 91       	pop	r30
    2210:	bf 91       	pop	r27
    2212:	af 91       	pop	r26
    2214:	9f 91       	pop	r25
    2216:	8f 91       	pop	r24
    2218:	7f 91       	pop	r23
    221a:	6f 91       	pop	r22
    221c:	5f 91       	pop	r21
    221e:	4f 91       	pop	r20
    2220:	3f 91       	pop	r19
    2222:	2f 91       	pop	r18
    2224:	0f 90       	pop	r0
    2226:	0b be       	out	0x3b, r0	; 59
    2228:	0f 90       	pop	r0
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	0f 90       	pop	r0
    222e:	1f 90       	pop	r1
    2230:	18 95       	reti

00002232 <__vector_105>:

ISR(PORTF_INT1_vect)
{
    2232:	1f 92       	push	r1
    2234:	0f 92       	push	r0
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	0f 92       	push	r0
    223a:	11 24       	eor	r1, r1
    223c:	0b b6       	in	r0, 0x3b	; 59
    223e:	0f 92       	push	r0
    2240:	2f 93       	push	r18
    2242:	3f 93       	push	r19
    2244:	4f 93       	push	r20
    2246:	5f 93       	push	r21
    2248:	6f 93       	push	r22
    224a:	7f 93       	push	r23
    224c:	8f 93       	push	r24
    224e:	9f 93       	push	r25
    2250:	af 93       	push	r26
    2252:	bf 93       	push	r27
    2254:	ef 93       	push	r30
    2256:	ff 93       	push	r31
  md_z->max_bound_interrupt_handler();
    2258:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <md_z>
    225c:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <md_z+0x1>
    2260:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN12DeviceDriver6DM542T27max_bound_interrupt_handlerEv>
  if (coordinate_mode.ISR_get() && md_z->get_direction() == 0)
    2264:	80 91 9b 20 	lds	r24, 0x209B	; 0x80209b <coordinate_mode>
    2268:	88 23       	and	r24, r24
    226a:	81 f0       	breq	.+32     	; 0x228c <__vector_105+0x5a>
    226c:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <md_z>
    2270:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <md_z+0x1>
    2274:	dc 01       	movw	r26, r24
    2276:	ed 91       	ld	r30, X+
    2278:	fc 91       	ld	r31, X
    227a:	06 84       	ldd	r0, Z+14	; 0x0e
    227c:	f7 85       	ldd	r31, Z+15	; 0x0f
    227e:	e0 2d       	mov	r30, r0
    2280:	19 95       	eicall
    2282:	81 11       	cpse	r24, r1
    2284:	03 c0       	rjmp	.+6      	; 0x228c <__vector_105+0x5a>
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <reset>
  {
    reset.ISR_put(true);
  }
}
    228c:	ff 91       	pop	r31
    228e:	ef 91       	pop	r30
    2290:	bf 91       	pop	r27
    2292:	af 91       	pop	r26
    2294:	9f 91       	pop	r25
    2296:	8f 91       	pop	r24
    2298:	7f 91       	pop	r23
    229a:	6f 91       	pop	r22
    229c:	5f 91       	pop	r21
    229e:	4f 91       	pop	r20
    22a0:	3f 91       	pop	r19
    22a2:	2f 91       	pop	r18
    22a4:	0f 90       	pop	r0
    22a6:	0b be       	out	0x3b, r0	; 59
    22a8:	0f 90       	pop	r0
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	0f 90       	pop	r0
    22ae:	1f 90       	pop	r1
    22b0:	18 95       	reti

000022b2 <__vector_85>:

ISR(TCD1_CCA_vect)
{
    22b2:	1f 92       	push	r1
    22b4:	0f 92       	push	r0
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	0f 92       	push	r0
    22ba:	11 24       	eor	r1, r1
    22bc:	0b b6       	in	r0, 0x3b	; 59
    22be:	0f 92       	push	r0
    22c0:	2f 93       	push	r18
    22c2:	3f 93       	push	r19
    22c4:	4f 93       	push	r20
    22c6:	5f 93       	push	r21
    22c8:	6f 93       	push	r22
    22ca:	7f 93       	push	r23
    22cc:	8f 93       	push	r24
    22ce:	9f 93       	push	r25
    22d0:	af 93       	push	r26
    22d2:	bf 93       	push	r27
    22d4:	ef 93       	push	r30
    22d6:	ff 93       	push	r31
  md_x->set_signal_low();
    22d8:	80 91 cf 20 	lds	r24, 0x20CF	; 0x8020cf <md_x>
    22dc:	90 91 d0 20 	lds	r25, 0x20D0	; 0x8020d0 <md_x+0x1>
    22e0:	dc 01       	movw	r26, r24
    22e2:	ed 91       	ld	r30, X+
    22e4:	fc 91       	ld	r31, X
    22e6:	02 88       	ldd	r0, Z+18	; 0x12
    22e8:	f3 89       	ldd	r31, Z+19	; 0x13
    22ea:	e0 2d       	mov	r30, r0
    22ec:	19 95       	eicall
}
    22ee:	ff 91       	pop	r31
    22f0:	ef 91       	pop	r30
    22f2:	bf 91       	pop	r27
    22f4:	af 91       	pop	r26
    22f6:	9f 91       	pop	r25
    22f8:	8f 91       	pop	r24
    22fa:	7f 91       	pop	r23
    22fc:	6f 91       	pop	r22
    22fe:	5f 91       	pop	r21
    2300:	4f 91       	pop	r20
    2302:	3f 91       	pop	r19
    2304:	2f 91       	pop	r18
    2306:	0f 90       	pop	r0
    2308:	0b be       	out	0x3b, r0	; 59
    230a:	0f 90       	pop	r0
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	0f 90       	pop	r0
    2310:	1f 90       	pop	r1
    2312:	18 95       	reti

00002314 <__vector_83>:

ISR(TCD1_OVF_vect)
{
    2314:	1f 92       	push	r1
    2316:	0f 92       	push	r0
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	0f 92       	push	r0
    231c:	11 24       	eor	r1, r1
    231e:	0b b6       	in	r0, 0x3b	; 59
    2320:	0f 92       	push	r0
    2322:	2f 93       	push	r18
    2324:	3f 93       	push	r19
    2326:	4f 93       	push	r20
    2328:	5f 93       	push	r21
    232a:	6f 93       	push	r22
    232c:	7f 93       	push	r23
    232e:	8f 93       	push	r24
    2330:	9f 93       	push	r25
    2332:	af 93       	push	r26
    2334:	bf 93       	push	r27
    2336:	ef 93       	push	r30
    2338:	ff 93       	push	r31
  md_x->take_step();
    233a:	80 91 cf 20 	lds	r24, 0x20CF	; 0x8020cf <md_x>
    233e:	90 91 d0 20 	lds	r25, 0x20D0	; 0x8020d0 <md_x+0x1>
    2342:	dc 01       	movw	r26, r24
    2344:	ed 91       	ld	r30, X+
    2346:	fc 91       	ld	r31, X
    2348:	00 88       	ldd	r0, Z+16	; 0x10
    234a:	f1 89       	ldd	r31, Z+17	; 0x11
    234c:	e0 2d       	mov	r30, r0
    234e:	19 95       	eicall
}
    2350:	ff 91       	pop	r31
    2352:	ef 91       	pop	r30
    2354:	bf 91       	pop	r27
    2356:	af 91       	pop	r26
    2358:	9f 91       	pop	r25
    235a:	8f 91       	pop	r24
    235c:	7f 91       	pop	r23
    235e:	6f 91       	pop	r22
    2360:	5f 91       	pop	r21
    2362:	4f 91       	pop	r20
    2364:	3f 91       	pop	r19
    2366:	2f 91       	pop	r18
    2368:	0f 90       	pop	r0
    236a:	0b be       	out	0x3b, r0	; 59
    236c:	0f 90       	pop	r0
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	0f 90       	pop	r0
    2372:	1f 90       	pop	r1
    2374:	18 95       	reti

00002376 <__vector_82>:

ISR(TCD0_CCD_vect)
{
    2376:	1f 92       	push	r1
    2378:	0f 92       	push	r0
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	0f 92       	push	r0
    237e:	11 24       	eor	r1, r1
    2380:	0b b6       	in	r0, 0x3b	; 59
    2382:	0f 92       	push	r0
    2384:	2f 93       	push	r18
    2386:	3f 93       	push	r19
    2388:	4f 93       	push	r20
    238a:	5f 93       	push	r21
    238c:	6f 93       	push	r22
    238e:	7f 93       	push	r23
    2390:	8f 93       	push	r24
    2392:	9f 93       	push	r25
    2394:	af 93       	push	r26
    2396:	bf 93       	push	r27
    2398:	ef 93       	push	r30
    239a:	ff 93       	push	r31
  md_y->set_signal_low();
    239c:	80 91 cd 20 	lds	r24, 0x20CD	; 0x8020cd <md_y>
    23a0:	90 91 ce 20 	lds	r25, 0x20CE	; 0x8020ce <md_y+0x1>
    23a4:	dc 01       	movw	r26, r24
    23a6:	ed 91       	ld	r30, X+
    23a8:	fc 91       	ld	r31, X
    23aa:	02 88       	ldd	r0, Z+18	; 0x12
    23ac:	f3 89       	ldd	r31, Z+19	; 0x13
    23ae:	e0 2d       	mov	r30, r0
    23b0:	19 95       	eicall
}
    23b2:	ff 91       	pop	r31
    23b4:	ef 91       	pop	r30
    23b6:	bf 91       	pop	r27
    23b8:	af 91       	pop	r26
    23ba:	9f 91       	pop	r25
    23bc:	8f 91       	pop	r24
    23be:	7f 91       	pop	r23
    23c0:	6f 91       	pop	r22
    23c2:	5f 91       	pop	r21
    23c4:	4f 91       	pop	r20
    23c6:	3f 91       	pop	r19
    23c8:	2f 91       	pop	r18
    23ca:	0f 90       	pop	r0
    23cc:	0b be       	out	0x3b, r0	; 59
    23ce:	0f 90       	pop	r0
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	0f 90       	pop	r0
    23d4:	1f 90       	pop	r1
    23d6:	18 95       	reti

000023d8 <__vector_77>:

ISR(TCD0_OVF_vect)
{
    23d8:	1f 92       	push	r1
    23da:	0f 92       	push	r0
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	0f 92       	push	r0
    23e0:	11 24       	eor	r1, r1
    23e2:	0b b6       	in	r0, 0x3b	; 59
    23e4:	0f 92       	push	r0
    23e6:	2f 93       	push	r18
    23e8:	3f 93       	push	r19
    23ea:	4f 93       	push	r20
    23ec:	5f 93       	push	r21
    23ee:	6f 93       	push	r22
    23f0:	7f 93       	push	r23
    23f2:	8f 93       	push	r24
    23f4:	9f 93       	push	r25
    23f6:	af 93       	push	r26
    23f8:	bf 93       	push	r27
    23fa:	ef 93       	push	r30
    23fc:	ff 93       	push	r31
  md_y->take_step();
    23fe:	80 91 cd 20 	lds	r24, 0x20CD	; 0x8020cd <md_y>
    2402:	90 91 ce 20 	lds	r25, 0x20CE	; 0x8020ce <md_y+0x1>
    2406:	dc 01       	movw	r26, r24
    2408:	ed 91       	ld	r30, X+
    240a:	fc 91       	ld	r31, X
    240c:	00 88       	ldd	r0, Z+16	; 0x10
    240e:	f1 89       	ldd	r31, Z+17	; 0x11
    2410:	e0 2d       	mov	r30, r0
    2412:	19 95       	eicall
}
    2414:	ff 91       	pop	r31
    2416:	ef 91       	pop	r30
    2418:	bf 91       	pop	r27
    241a:	af 91       	pop	r26
    241c:	9f 91       	pop	r25
    241e:	8f 91       	pop	r24
    2420:	7f 91       	pop	r23
    2422:	6f 91       	pop	r22
    2424:	5f 91       	pop	r21
    2426:	4f 91       	pop	r20
    2428:	3f 91       	pop	r19
    242a:	2f 91       	pop	r18
    242c:	0f 90       	pop	r0
    242e:	0b be       	out	0x3b, r0	; 59
    2430:	0f 90       	pop	r0
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	0f 90       	pop	r0
    2436:	1f 90       	pop	r1
    2438:	18 95       	reti

0000243a <__vector_16>:

ISR(TCC0_CCA_vect)
{
    243a:	1f 92       	push	r1
    243c:	0f 92       	push	r0
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	0f 92       	push	r0
    2442:	11 24       	eor	r1, r1
    2444:	0b b6       	in	r0, 0x3b	; 59
    2446:	0f 92       	push	r0
    2448:	2f 93       	push	r18
    244a:	3f 93       	push	r19
    244c:	4f 93       	push	r20
    244e:	5f 93       	push	r21
    2450:	6f 93       	push	r22
    2452:	7f 93       	push	r23
    2454:	8f 93       	push	r24
    2456:	9f 93       	push	r25
    2458:	af 93       	push	r26
    245a:	bf 93       	push	r27
    245c:	ef 93       	push	r30
    245e:	ff 93       	push	r31
  md_z->set_signal_low();
    2460:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <md_z>
    2464:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <md_z+0x1>
    2468:	dc 01       	movw	r26, r24
    246a:	ed 91       	ld	r30, X+
    246c:	fc 91       	ld	r31, X
    246e:	02 88       	ldd	r0, Z+18	; 0x12
    2470:	f3 89       	ldd	r31, Z+19	; 0x13
    2472:	e0 2d       	mov	r30, r0
    2474:	19 95       	eicall
}
    2476:	ff 91       	pop	r31
    2478:	ef 91       	pop	r30
    247a:	bf 91       	pop	r27
    247c:	af 91       	pop	r26
    247e:	9f 91       	pop	r25
    2480:	8f 91       	pop	r24
    2482:	7f 91       	pop	r23
    2484:	6f 91       	pop	r22
    2486:	5f 91       	pop	r21
    2488:	4f 91       	pop	r20
    248a:	3f 91       	pop	r19
    248c:	2f 91       	pop	r18
    248e:	0f 90       	pop	r0
    2490:	0b be       	out	0x3b, r0	; 59
    2492:	0f 90       	pop	r0
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	0f 90       	pop	r0
    2498:	1f 90       	pop	r1
    249a:	18 95       	reti

0000249c <__vector_14>:

ISR(TCC0_OVF_vect)
{
    249c:	1f 92       	push	r1
    249e:	0f 92       	push	r0
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	0f 92       	push	r0
    24a4:	11 24       	eor	r1, r1
    24a6:	0b b6       	in	r0, 0x3b	; 59
    24a8:	0f 92       	push	r0
    24aa:	2f 93       	push	r18
    24ac:	3f 93       	push	r19
    24ae:	4f 93       	push	r20
    24b0:	5f 93       	push	r21
    24b2:	6f 93       	push	r22
    24b4:	7f 93       	push	r23
    24b6:	8f 93       	push	r24
    24b8:	9f 93       	push	r25
    24ba:	af 93       	push	r26
    24bc:	bf 93       	push	r27
    24be:	ef 93       	push	r30
    24c0:	ff 93       	push	r31
  md_z->take_step();
    24c2:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <md_z>
    24c6:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <md_z+0x1>
    24ca:	dc 01       	movw	r26, r24
    24cc:	ed 91       	ld	r30, X+
    24ce:	fc 91       	ld	r31, X
    24d0:	00 88       	ldd	r0, Z+16	; 0x10
    24d2:	f1 89       	ldd	r31, Z+17	; 0x11
    24d4:	e0 2d       	mov	r30, r0
    24d6:	19 95       	eicall
    24d8:	ff 91       	pop	r31
    24da:	ef 91       	pop	r30
    24dc:	bf 91       	pop	r27
    24de:	af 91       	pop	r26
    24e0:	9f 91       	pop	r25
    24e2:	8f 91       	pop	r24
    24e4:	7f 91       	pop	r23
    24e6:	6f 91       	pop	r22
    24e8:	5f 91       	pop	r21
    24ea:	4f 91       	pop	r20
    24ec:	3f 91       	pop	r19
    24ee:	2f 91       	pop	r18
    24f0:	0f 90       	pop	r0
    24f2:	0b be       	out	0x3b, r0	; 59
    24f4:	0f 90       	pop	r0
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	0f 90       	pop	r0
    24fa:	1f 90       	pop	r1
    24fc:	18 95       	reti

000024fe <_ZN9frt_queueImEC1EhP8emstreamm>:
 *  @param p_ser_dev Pointer to a serial device to be used for debugging printouts
 *                   (Default: NULL)
 */

template <class data_type>
frt_queue<data_type>::frt_queue (uint8_t queue_size, emstream* p_ser_dev,
    24fe:	cf 92       	push	r12
    2500:	df 92       	push	r13
    2502:	ef 92       	push	r14
    2504:	ff 92       	push	r15
    2506:	0f 93       	push	r16
    2508:	1f 93       	push	r17
    250a:	cf 93       	push	r28
    250c:	df 93       	push	r29
    250e:	ec 01       	movw	r28, r24
    2510:	86 2f       	mov	r24, r22
    2512:	68 01       	movw	r12, r16
    2514:	79 01       	movw	r14, r18

template <class data_type>
frt_base_queue<data_type>::frt_base_queue (emstream* p_ser_dev)
{
	// Save the pointer to a serial devide so it may be used for debugging
	p_serial = p_ser_dev;
    2516:	4a 83       	std	Y+2, r20	; 0x02
    2518:	5b 83       	std	Y+3, r21	; 0x03
								portTickType wait_time)
	: frt_base_queue<data_type> (p_ser_dev)
    251a:	29 e3       	ldi	r18, 0x39	; 57
    251c:	30 e2       	ldi	r19, 0x20	; 32
    251e:	28 83       	st	Y, r18
    2520:	39 83       	std	Y+1, r19	; 0x01
{
	// Create a FreeRTOS queue object with space for the data items
	handle = xQueueCreate (queue_size, sizeof (data_type));
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	64 e0       	ldi	r22, 0x04	; 4
    2526:	0e 94 da 16 	call	0x2db4	; 0x2db4 <xQueueGenericCreate>
    252a:	8c 83       	std	Y+4, r24	; 0x04
    252c:	9d 83       	std	Y+5, r25	; 0x05

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = wait_time;
    252e:	ce 82       	std	Y+6, r12	; 0x06
    2530:	df 82       	std	Y+7, r13	; 0x07
    2532:	e8 86       	std	Y+8, r14	; 0x08
    2534:	f9 86       	std	Y+9, r15	; 0x09
	if (handle == 0)
	{
		DBG (p_ser_dev, PMS ("ERROR creating ") << queue_size << PMS("x") 
			 << sizeof (data_type) << PMS ("B queue #") << handle << endl);
	}
}
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	1f 91       	pop	r17
    253c:	0f 91       	pop	r16
    253e:	ff 90       	pop	r15
    2540:	ef 90       	pop	r14
    2542:	df 90       	pop	r13
    2544:	cf 90       	pop	r12
    2546:	08 95       	ret

00002548 <_GLOBAL__sub_I_counter>:
    2548:	0f 93       	push	r16
    254a:	1f 93       	push	r17
shared_data<bool> emergency_shutdown;
shared_data<bool> next_node;
shared_data<uint16_t> current_node;
shared_data<uint16_t> total_nodes;
shared_data<bool> pause;
frt_queue<uint32_t> x_max_velocity(50,NULL,10);
    254c:	0a e0       	ldi	r16, 0x0A	; 10
    254e:	10 e0       	ldi	r17, 0x00	; 0
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e0       	ldi	r20, 0x00	; 0
    2556:	50 e0       	ldi	r21, 0x00	; 0
    2558:	62 e3       	ldi	r22, 0x32	; 50
    255a:	8d ef       	ldi	r24, 0xFD	; 253
    255c:	90 e2       	ldi	r25, 0x20	; 32
    255e:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> y_max_velocity(50,NULL,10);
    2562:	0a e0       	ldi	r16, 0x0A	; 10
    2564:	10 e0       	ldi	r17, 0x00	; 0
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e0       	ldi	r20, 0x00	; 0
    256c:	50 e0       	ldi	r21, 0x00	; 0
    256e:	62 e3       	ldi	r22, 0x32	; 50
    2570:	83 ef       	ldi	r24, 0xF3	; 243
    2572:	90 e2       	ldi	r25, 0x20	; 32
    2574:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> z_max_velocity(50,NULL,10);
    2578:	0a e0       	ldi	r16, 0x0A	; 10
    257a:	10 e0       	ldi	r17, 0x00	; 0
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	50 e0       	ldi	r21, 0x00	; 0
    2584:	62 e3       	ldi	r22, 0x32	; 50
    2586:	89 ee       	ldi	r24, 0xE9	; 233
    2588:	90 e2       	ldi	r25, 0x20	; 32
    258a:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN9frt_queueImEC1EhP8emstreamm>
PeripheralDriver::InterruptTimer* timer_C0_pin0;
DeviceDriver::DM542T* md_x;
DeviceDriver::DM542T* md_y;
DeviceDriver::DM542T* md_z;

frt_text_queue print_ser_queue (32, NULL, 10);
    258e:	0a e0       	ldi	r16, 0x0A	; 10
    2590:	10 e0       	ldi	r17, 0x00	; 0
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e0       	ldi	r20, 0x00	; 0
    2598:	50 e0       	ldi	r21, 0x00	; 0
    259a:	60 e2       	ldi	r22, 0x20	; 32
    259c:	70 e0       	ldi	r23, 0x00	; 0
    259e:	8b eb       	ldi	r24, 0xBB	; 187
    25a0:	90 e2       	ldi	r25, 0x20	; 32
    25a2:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <_ZN14frt_text_queueC1EjP8emstreamm>

frt_queue<uint32_t> xlocations(50,NULL,10);
    25a6:	0a e0       	ldi	r16, 0x0A	; 10
    25a8:	10 e0       	ldi	r17, 0x00	; 0
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	40 e0       	ldi	r20, 0x00	; 0
    25b0:	50 e0       	ldi	r21, 0x00	; 0
    25b2:	62 e3       	ldi	r22, 0x32	; 50
    25b4:	81 eb       	ldi	r24, 0xB1	; 177
    25b6:	90 e2       	ldi	r25, 0x20	; 32
    25b8:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> ylocations(50,NULL,10);
    25bc:	0a e0       	ldi	r16, 0x0A	; 10
    25be:	10 e0       	ldi	r17, 0x00	; 0
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e0       	ldi	r20, 0x00	; 0
    25c6:	50 e0       	ldi	r21, 0x00	; 0
    25c8:	62 e3       	ldi	r22, 0x32	; 50
    25ca:	87 ea       	ldi	r24, 0xA7	; 167
    25cc:	90 e2       	ldi	r25, 0x20	; 32
    25ce:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN9frt_queueImEC1EhP8emstreamm>
frt_queue<uint32_t> zlocations(50,NULL,10);
    25d2:	0a e0       	ldi	r16, 0x0A	; 10
    25d4:	10 e0       	ldi	r17, 0x00	; 0
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e0       	ldi	r20, 0x00	; 0
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	62 e3       	ldi	r22, 0x32	; 50
    25e0:	8d e9       	ldi	r24, 0x9D	; 157
    25e2:	90 e2       	ldi	r25, 0x20	; 32
    25e4:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN9frt_queueImEC1EhP8emstreamm>
}

ISR(TCC0_OVF_vect)
{
  md_z->take_step();
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	08 95       	ret

000025ee <pvPortMalloc>:
    25ee:	0f 93       	push	r16
    25f0:	1f 93       	push	r17
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
    25f6:	ec 01       	movw	r28, r24
    25f8:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <vTaskSuspendAll>
    25fc:	80 91 19 21 	lds	r24, 0x2119	; 0x802119 <xHeapHasBeenInitialised.4146>
    2600:	81 11       	cpse	r24, r1
    2602:	1d c0       	rjmp	.+58     	; 0x263e <pvPortMalloc+0x50>
    2604:	ae e1       	ldi	r26, 0x1E	; 30
    2606:	b1 e2       	ldi	r27, 0x21	; 33
    2608:	e2 e2       	ldi	r30, 0x22	; 34
    260a:	f1 e2       	ldi	r31, 0x21	; 33
    260c:	ed 93       	st	X+, r30
    260e:	fc 93       	st	X, r31
    2610:	11 97       	sbiw	r26, 0x01	; 1
    2612:	12 96       	adiw	r26, 0x02	; 2
    2614:	1d 92       	st	X+, r1
    2616:	1c 92       	st	X, r1
    2618:	13 97       	sbiw	r26, 0x03	; 3
    261a:	aa e1       	ldi	r26, 0x1A	; 26
    261c:	b1 e2       	ldi	r27, 0x21	; 33
    261e:	8f ef       	ldi	r24, 0xFF	; 255
    2620:	9f e1       	ldi	r25, 0x1F	; 31
    2622:	12 96       	adiw	r26, 0x02	; 2
    2624:	8d 93       	st	X+, r24
    2626:	9c 93       	st	X, r25
    2628:	13 97       	sbiw	r26, 0x03	; 3
    262a:	1d 92       	st	X+, r1
    262c:	1c 92       	st	X, r1
    262e:	11 97       	sbiw	r26, 0x01	; 1
    2630:	82 83       	std	Z+2, r24	; 0x02
    2632:	93 83       	std	Z+3, r25	; 0x03
    2634:	a0 83       	st	Z, r26
    2636:	b1 83       	std	Z+1, r27	; 0x01
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	80 93 19 21 	sts	0x2119, r24	; 0x802119 <xHeapHasBeenInitialised.4146>
    263e:	20 97       	sbiw	r28, 0x00	; 0
    2640:	09 f4       	brne	.+2      	; 0x2644 <pvPortMalloc+0x56>
    2642:	5f c0       	rjmp	.+190    	; 0x2702 <pvPortMalloc+0x114>
    2644:	9e 01       	movw	r18, r28
    2646:	2b 5f       	subi	r18, 0xFB	; 251
    2648:	3f 4f       	sbci	r19, 0xFF	; 255
    264a:	24 96       	adiw	r28, 0x04	; 4
    264c:	ce 3f       	cpi	r28, 0xFE	; 254
    264e:	df 41       	sbci	r29, 0x1F	; 31
    2650:	08 f0       	brcs	.+2      	; 0x2654 <pvPortMalloc+0x66>
    2652:	5a c0       	rjmp	.+180    	; 0x2708 <pvPortMalloc+0x11a>
    2654:	e0 91 1e 21 	lds	r30, 0x211E	; 0x80211e <xStart>
    2658:	f0 91 1f 21 	lds	r31, 0x211F	; 0x80211f <xStart+0x1>
    265c:	ae e1       	ldi	r26, 0x1E	; 30
    265e:	b1 e2       	ldi	r27, 0x21	; 33
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <pvPortMalloc+0x78>
    2662:	df 01       	movw	r26, r30
    2664:	fc 01       	movw	r30, r24
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	93 81       	ldd	r25, Z+3	; 0x03
    266a:	82 17       	cp	r24, r18
    266c:	93 07       	cpc	r25, r19
    266e:	20 f4       	brcc	.+8      	; 0x2678 <pvPortMalloc+0x8a>
    2670:	80 81       	ld	r24, Z
    2672:	91 81       	ldd	r25, Z+1	; 0x01
    2674:	00 97       	sbiw	r24, 0x00	; 0
    2676:	a9 f7       	brne	.-22     	; 0x2662 <pvPortMalloc+0x74>
    2678:	c1 e2       	ldi	r28, 0x21	; 33
    267a:	ea 31       	cpi	r30, 0x1A	; 26
    267c:	fc 07       	cpc	r31, r28
    267e:	09 f4       	brne	.+2      	; 0x2682 <pvPortMalloc+0x94>
    2680:	46 c0       	rjmp	.+140    	; 0x270e <pvPortMalloc+0x120>
    2682:	cd 91       	ld	r28, X+
    2684:	dc 91       	ld	r29, X
    2686:	11 97       	sbiw	r26, 0x01	; 1
    2688:	8e 01       	movw	r16, r28
    268a:	0b 5f       	subi	r16, 0xFB	; 251
    268c:	1f 4f       	sbci	r17, 0xFF	; 255
    268e:	80 81       	ld	r24, Z
    2690:	91 81       	ldd	r25, Z+1	; 0x01
    2692:	8d 93       	st	X+, r24
    2694:	9c 93       	st	X, r25
    2696:	82 81       	ldd	r24, Z+2	; 0x02
    2698:	93 81       	ldd	r25, Z+3	; 0x03
    269a:	82 1b       	sub	r24, r18
    269c:	93 0b       	sbc	r25, r19
    269e:	8b 30       	cpi	r24, 0x0B	; 11
    26a0:	91 05       	cpc	r25, r1
    26a2:	10 f1       	brcs	.+68     	; 0x26e8 <pvPortMalloc+0xfa>
    26a4:	bf 01       	movw	r22, r30
    26a6:	62 0f       	add	r22, r18
    26a8:	73 1f       	adc	r23, r19
    26aa:	db 01       	movw	r26, r22
    26ac:	12 96       	adiw	r26, 0x02	; 2
    26ae:	8d 93       	st	X+, r24
    26b0:	9c 93       	st	X, r25
    26b2:	13 97       	sbiw	r26, 0x03	; 3
    26b4:	22 83       	std	Z+2, r18	; 0x02
    26b6:	33 83       	std	Z+3, r19	; 0x03
    26b8:	12 96       	adiw	r26, 0x02	; 2
    26ba:	4d 91       	ld	r20, X+
    26bc:	5c 91       	ld	r21, X
    26be:	13 97       	sbiw	r26, 0x03	; 3
    26c0:	8e e1       	ldi	r24, 0x1E	; 30
    26c2:	91 e2       	ldi	r25, 0x21	; 33
    26c4:	01 c0       	rjmp	.+2      	; 0x26c8 <pvPortMalloc+0xda>
    26c6:	cd 01       	movw	r24, r26
    26c8:	ec 01       	movw	r28, r24
    26ca:	a8 81       	ld	r26, Y
    26cc:	b9 81       	ldd	r27, Y+1	; 0x01
    26ce:	12 96       	adiw	r26, 0x02	; 2
    26d0:	2d 91       	ld	r18, X+
    26d2:	3c 91       	ld	r19, X
    26d4:	13 97       	sbiw	r26, 0x03	; 3
    26d6:	24 17       	cp	r18, r20
    26d8:	35 07       	cpc	r19, r21
    26da:	a8 f3       	brcs	.-22     	; 0x26c6 <pvPortMalloc+0xd8>
    26dc:	eb 01       	movw	r28, r22
    26de:	a8 83       	st	Y, r26
    26e0:	b9 83       	std	Y+1, r27	; 0x01
    26e2:	dc 01       	movw	r26, r24
    26e4:	6d 93       	st	X+, r22
    26e6:	7c 93       	st	X, r23
    26e8:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    26ec:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    26f0:	22 81       	ldd	r18, Z+2	; 0x02
    26f2:	33 81       	ldd	r19, Z+3	; 0x03
    26f4:	82 1b       	sub	r24, r18
    26f6:	93 0b       	sbc	r25, r19
    26f8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    26fc:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    2700:	08 c0       	rjmp	.+16     	; 0x2712 <pvPortMalloc+0x124>
    2702:	00 e0       	ldi	r16, 0x00	; 0
    2704:	10 e0       	ldi	r17, 0x00	; 0
    2706:	05 c0       	rjmp	.+10     	; 0x2712 <pvPortMalloc+0x124>
    2708:	00 e0       	ldi	r16, 0x00	; 0
    270a:	10 e0       	ldi	r17, 0x00	; 0
    270c:	02 c0       	rjmp	.+4      	; 0x2712 <pvPortMalloc+0x124>
    270e:	00 e0       	ldi	r16, 0x00	; 0
    2710:	10 e0       	ldi	r17, 0x00	; 0
    2712:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <xTaskResumeAll>
    2716:	c8 01       	movw	r24, r16
    2718:	df 91       	pop	r29
    271a:	cf 91       	pop	r28
    271c:	1f 91       	pop	r17
    271e:	0f 91       	pop	r16
    2720:	08 95       	ret

00002722 <vPortFree>:
    2722:	0f 93       	push	r16
    2724:	1f 93       	push	r17
    2726:	cf 93       	push	r28
    2728:	df 93       	push	r29
    272a:	00 97       	sbiw	r24, 0x00	; 0
    272c:	41 f1       	breq	.+80     	; 0x277e <vPortFree+0x5c>
    272e:	ec 01       	movw	r28, r24
    2730:	8c 01       	movw	r16, r24
    2732:	05 50       	subi	r16, 0x05	; 5
    2734:	11 09       	sbc	r17, r1
    2736:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <vTaskSuspendAll>
    273a:	f8 01       	movw	r30, r16
    273c:	42 81       	ldd	r20, Z+2	; 0x02
    273e:	53 81       	ldd	r21, Z+3	; 0x03
    2740:	ae e1       	ldi	r26, 0x1E	; 30
    2742:	b1 e2       	ldi	r27, 0x21	; 33
    2744:	01 c0       	rjmp	.+2      	; 0x2748 <vPortFree+0x26>
    2746:	df 01       	movw	r26, r30
    2748:	ed 91       	ld	r30, X+
    274a:	fc 91       	ld	r31, X
    274c:	11 97       	sbiw	r26, 0x01	; 1
    274e:	22 81       	ldd	r18, Z+2	; 0x02
    2750:	33 81       	ldd	r19, Z+3	; 0x03
    2752:	24 17       	cp	r18, r20
    2754:	35 07       	cpc	r19, r21
    2756:	b8 f3       	brcs	.-18     	; 0x2746 <vPortFree+0x24>
    2758:	25 97       	sbiw	r28, 0x05	; 5
    275a:	e8 83       	st	Y, r30
    275c:	f9 83       	std	Y+1, r31	; 0x01
    275e:	0d 93       	st	X+, r16
    2760:	1c 93       	st	X, r17
    2762:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    2766:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	9b 81       	ldd	r25, Y+3	; 0x03
    276e:	82 0f       	add	r24, r18
    2770:	93 1f       	adc	r25, r19
    2772:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    2776:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    277a:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <xTaskResumeAll>
    277e:	df 91       	pop	r29
    2780:	cf 91       	pop	r28
    2782:	1f 91       	pop	r17
    2784:	0f 91       	pop	r16
    2786:	08 95       	ret

00002788 <vListInitialise>:
    2788:	fc 01       	movw	r30, r24
    278a:	03 96       	adiw	r24, 0x03	; 3
    278c:	81 83       	std	Z+1, r24	; 0x01
    278e:	92 83       	std	Z+2, r25	; 0x02
    2790:	4f ef       	ldi	r20, 0xFF	; 255
    2792:	5f ef       	ldi	r21, 0xFF	; 255
    2794:	ba 01       	movw	r22, r20
    2796:	43 83       	std	Z+3, r20	; 0x03
    2798:	54 83       	std	Z+4, r21	; 0x04
    279a:	65 83       	std	Z+5, r22	; 0x05
    279c:	76 83       	std	Z+6, r23	; 0x06
    279e:	87 83       	std	Z+7, r24	; 0x07
    27a0:	90 87       	std	Z+8, r25	; 0x08
    27a2:	81 87       	std	Z+9, r24	; 0x09
    27a4:	92 87       	std	Z+10, r25	; 0x0a
    27a6:	10 82       	st	Z, r1
    27a8:	08 95       	ret

000027aa <vListInitialiseItem>:
    27aa:	fc 01       	movw	r30, r24
    27ac:	12 86       	std	Z+10, r1	; 0x0a
    27ae:	13 86       	std	Z+11, r1	; 0x0b
    27b0:	08 95       	ret

000027b2 <vListInsertEnd>:
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	fc 01       	movw	r30, r24
    27b8:	db 01       	movw	r26, r22
    27ba:	21 81       	ldd	r18, Z+1	; 0x01
    27bc:	32 81       	ldd	r19, Z+2	; 0x02
    27be:	e9 01       	movw	r28, r18
    27c0:	8c 81       	ldd	r24, Y+4	; 0x04
    27c2:	9d 81       	ldd	r25, Y+5	; 0x05
    27c4:	14 96       	adiw	r26, 0x04	; 4
    27c6:	8d 93       	st	X+, r24
    27c8:	9c 93       	st	X, r25
    27ca:	15 97       	sbiw	r26, 0x05	; 5
    27cc:	81 81       	ldd	r24, Z+1	; 0x01
    27ce:	92 81       	ldd	r25, Z+2	; 0x02
    27d0:	16 96       	adiw	r26, 0x06	; 6
    27d2:	8d 93       	st	X+, r24
    27d4:	9c 93       	st	X, r25
    27d6:	17 97       	sbiw	r26, 0x07	; 7
    27d8:	8c 81       	ldd	r24, Y+4	; 0x04
    27da:	9d 81       	ldd	r25, Y+5	; 0x05
    27dc:	ec 01       	movw	r28, r24
    27de:	6e 83       	std	Y+6, r22	; 0x06
    27e0:	7f 83       	std	Y+7, r23	; 0x07
    27e2:	e9 01       	movw	r28, r18
    27e4:	6c 83       	std	Y+4, r22	; 0x04
    27e6:	7d 83       	std	Y+5, r23	; 0x05
    27e8:	61 83       	std	Z+1, r22	; 0x01
    27ea:	72 83       	std	Z+2, r23	; 0x02
    27ec:	1a 96       	adiw	r26, 0x0a	; 10
    27ee:	ed 93       	st	X+, r30
    27f0:	fc 93       	st	X, r31
    27f2:	1b 97       	sbiw	r26, 0x0b	; 11
    27f4:	80 81       	ld	r24, Z
    27f6:	8f 5f       	subi	r24, 0xFF	; 255
    27f8:	80 83       	st	Z, r24
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	08 95       	ret

00002800 <vListInsert>:
    2800:	0f 93       	push	r16
    2802:	1f 93       	push	r17
    2804:	cf 93       	push	r28
    2806:	df 93       	push	r29
    2808:	eb 01       	movw	r28, r22
    280a:	08 81       	ld	r16, Y
    280c:	19 81       	ldd	r17, Y+1	; 0x01
    280e:	2a 81       	ldd	r18, Y+2	; 0x02
    2810:	3b 81       	ldd	r19, Y+3	; 0x03
    2812:	0f 3f       	cpi	r16, 0xFF	; 255
    2814:	4f ef       	ldi	r20, 0xFF	; 255
    2816:	14 07       	cpc	r17, r20
    2818:	24 07       	cpc	r18, r20
    281a:	34 07       	cpc	r19, r20
    281c:	31 f4       	brne	.+12     	; 0x282a <vListInsert+0x2a>
    281e:	dc 01       	movw	r26, r24
    2820:	19 96       	adiw	r26, 0x09	; 9
    2822:	ed 91       	ld	r30, X+
    2824:	fc 91       	ld	r31, X
    2826:	1a 97       	sbiw	r26, 0x0a	; 10
    2828:	1f c0       	rjmp	.+62     	; 0x2868 <vListInsert+0x68>
    282a:	fc 01       	movw	r30, r24
    282c:	33 96       	adiw	r30, 0x03	; 3
    282e:	dc 01       	movw	r26, r24
    2830:	17 96       	adiw	r26, 0x07	; 7
    2832:	4d 91       	ld	r20, X+
    2834:	5c 91       	ld	r21, X
    2836:	18 97       	sbiw	r26, 0x08	; 8
    2838:	da 01       	movw	r26, r20
    283a:	4d 91       	ld	r20, X+
    283c:	5d 91       	ld	r21, X+
    283e:	6d 91       	ld	r22, X+
    2840:	7c 91       	ld	r23, X
    2842:	04 17       	cp	r16, r20
    2844:	15 07       	cpc	r17, r21
    2846:	26 07       	cpc	r18, r22
    2848:	37 07       	cpc	r19, r23
    284a:	70 f0       	brcs	.+28     	; 0x2868 <vListInsert+0x68>
    284c:	04 80       	ldd	r0, Z+4	; 0x04
    284e:	f5 81       	ldd	r31, Z+5	; 0x05
    2850:	e0 2d       	mov	r30, r0
    2852:	a4 81       	ldd	r26, Z+4	; 0x04
    2854:	b5 81       	ldd	r27, Z+5	; 0x05
    2856:	4d 91       	ld	r20, X+
    2858:	5d 91       	ld	r21, X+
    285a:	6d 91       	ld	r22, X+
    285c:	7c 91       	ld	r23, X
    285e:	04 17       	cp	r16, r20
    2860:	15 07       	cpc	r17, r21
    2862:	26 07       	cpc	r18, r22
    2864:	37 07       	cpc	r19, r23
    2866:	90 f7       	brcc	.-28     	; 0x284c <vListInsert+0x4c>
    2868:	a4 81       	ldd	r26, Z+4	; 0x04
    286a:	b5 81       	ldd	r27, Z+5	; 0x05
    286c:	ac 83       	std	Y+4, r26	; 0x04
    286e:	bd 83       	std	Y+5, r27	; 0x05
    2870:	16 96       	adiw	r26, 0x06	; 6
    2872:	cd 93       	st	X+, r28
    2874:	dc 93       	st	X, r29
    2876:	17 97       	sbiw	r26, 0x07	; 7
    2878:	ee 83       	std	Y+6, r30	; 0x06
    287a:	ff 83       	std	Y+7, r31	; 0x07
    287c:	c4 83       	std	Z+4, r28	; 0x04
    287e:	d5 83       	std	Z+5, r29	; 0x05
    2880:	8a 87       	std	Y+10, r24	; 0x0a
    2882:	9b 87       	std	Y+11, r25	; 0x0b
    2884:	fc 01       	movw	r30, r24
    2886:	20 81       	ld	r18, Z
    2888:	2f 5f       	subi	r18, 0xFF	; 255
    288a:	20 83       	st	Z, r18
    288c:	df 91       	pop	r29
    288e:	cf 91       	pop	r28
    2890:	1f 91       	pop	r17
    2892:	0f 91       	pop	r16
    2894:	08 95       	ret

00002896 <vListRemove>:
    2896:	fc 01       	movw	r30, r24
    2898:	a4 81       	ldd	r26, Z+4	; 0x04
    289a:	b5 81       	ldd	r27, Z+5	; 0x05
    289c:	86 81       	ldd	r24, Z+6	; 0x06
    289e:	97 81       	ldd	r25, Z+7	; 0x07
    28a0:	16 96       	adiw	r26, 0x06	; 6
    28a2:	8d 93       	st	X+, r24
    28a4:	9c 93       	st	X, r25
    28a6:	17 97       	sbiw	r26, 0x07	; 7
    28a8:	a6 81       	ldd	r26, Z+6	; 0x06
    28aa:	b7 81       	ldd	r27, Z+7	; 0x07
    28ac:	84 81       	ldd	r24, Z+4	; 0x04
    28ae:	95 81       	ldd	r25, Z+5	; 0x05
    28b0:	14 96       	adiw	r26, 0x04	; 4
    28b2:	8d 93       	st	X+, r24
    28b4:	9c 93       	st	X, r25
    28b6:	15 97       	sbiw	r26, 0x05	; 5
    28b8:	a2 85       	ldd	r26, Z+10	; 0x0a
    28ba:	b3 85       	ldd	r27, Z+11	; 0x0b
    28bc:	11 96       	adiw	r26, 0x01	; 1
    28be:	8d 91       	ld	r24, X+
    28c0:	9c 91       	ld	r25, X
    28c2:	12 97       	sbiw	r26, 0x02	; 2
    28c4:	e8 17       	cp	r30, r24
    28c6:	f9 07       	cpc	r31, r25
    28c8:	31 f4       	brne	.+12     	; 0x28d6 <vListRemove+0x40>
    28ca:	86 81       	ldd	r24, Z+6	; 0x06
    28cc:	97 81       	ldd	r25, Z+7	; 0x07
    28ce:	11 96       	adiw	r26, 0x01	; 1
    28d0:	8d 93       	st	X+, r24
    28d2:	9c 93       	st	X, r25
    28d4:	12 97       	sbiw	r26, 0x02	; 2
    28d6:	12 86       	std	Z+10, r1	; 0x0a
    28d8:	13 86       	std	Z+11, r1	; 0x0b
    28da:	8c 91       	ld	r24, X
    28dc:	81 50       	subi	r24, 0x01	; 1
    28de:	8c 93       	st	X, r24
    28e0:	08 95       	ret

000028e2 <pxPortInitialiseStack>:
    28e2:	80 93 a9 41 	sts	0x41A9, r24	; 0x8041a9 <portStackTopForTask>
    28e6:	90 93 aa 41 	sts	0x41AA, r25	; 0x8041aa <portStackTopForTask+0x1>
    28ea:	31 e1       	ldi	r19, 0x11	; 17
    28ec:	fc 01       	movw	r30, r24
    28ee:	30 83       	st	Z, r19
    28f0:	31 97       	sbiw	r30, 0x01	; 1
    28f2:	22 e2       	ldi	r18, 0x22	; 34
    28f4:	20 83       	st	Z, r18
    28f6:	31 97       	sbiw	r30, 0x01	; 1
    28f8:	a3 e3       	ldi	r26, 0x33	; 51
    28fa:	a0 83       	st	Z, r26
    28fc:	31 97       	sbiw	r30, 0x01	; 1
    28fe:	60 83       	st	Z, r22
    2900:	31 97       	sbiw	r30, 0x01	; 1
    2902:	70 83       	st	Z, r23
    2904:	31 97       	sbiw	r30, 0x01	; 1
    2906:	10 82       	st	Z, r1
    2908:	31 97       	sbiw	r30, 0x01	; 1
    290a:	10 82       	st	Z, r1
    290c:	31 97       	sbiw	r30, 0x01	; 1
    290e:	60 e8       	ldi	r22, 0x80	; 128
    2910:	60 83       	st	Z, r22
    2912:	31 97       	sbiw	r30, 0x01	; 1
    2914:	10 82       	st	Z, r1
    2916:	31 97       	sbiw	r30, 0x01	; 1
    2918:	10 82       	st	Z, r1
    291a:	31 97       	sbiw	r30, 0x01	; 1
    291c:	10 82       	st	Z, r1
    291e:	31 97       	sbiw	r30, 0x01	; 1
    2920:	62 e0       	ldi	r22, 0x02	; 2
    2922:	60 83       	st	Z, r22
    2924:	31 97       	sbiw	r30, 0x01	; 1
    2926:	63 e0       	ldi	r22, 0x03	; 3
    2928:	60 83       	st	Z, r22
    292a:	31 97       	sbiw	r30, 0x01	; 1
    292c:	64 e0       	ldi	r22, 0x04	; 4
    292e:	60 83       	st	Z, r22
    2930:	31 97       	sbiw	r30, 0x01	; 1
    2932:	65 e0       	ldi	r22, 0x05	; 5
    2934:	60 83       	st	Z, r22
    2936:	31 97       	sbiw	r30, 0x01	; 1
    2938:	66 e0       	ldi	r22, 0x06	; 6
    293a:	60 83       	st	Z, r22
    293c:	31 97       	sbiw	r30, 0x01	; 1
    293e:	67 e0       	ldi	r22, 0x07	; 7
    2940:	60 83       	st	Z, r22
    2942:	31 97       	sbiw	r30, 0x01	; 1
    2944:	68 e0       	ldi	r22, 0x08	; 8
    2946:	60 83       	st	Z, r22
    2948:	31 97       	sbiw	r30, 0x01	; 1
    294a:	69 e0       	ldi	r22, 0x09	; 9
    294c:	60 83       	st	Z, r22
    294e:	31 97       	sbiw	r30, 0x01	; 1
    2950:	60 e1       	ldi	r22, 0x10	; 16
    2952:	60 83       	st	Z, r22
    2954:	31 97       	sbiw	r30, 0x01	; 1
    2956:	30 83       	st	Z, r19
    2958:	31 97       	sbiw	r30, 0x01	; 1
    295a:	32 e1       	ldi	r19, 0x12	; 18
    295c:	30 83       	st	Z, r19
    295e:	31 97       	sbiw	r30, 0x01	; 1
    2960:	33 e1       	ldi	r19, 0x13	; 19
    2962:	30 83       	st	Z, r19
    2964:	31 97       	sbiw	r30, 0x01	; 1
    2966:	34 e1       	ldi	r19, 0x14	; 20
    2968:	30 83       	st	Z, r19
    296a:	31 97       	sbiw	r30, 0x01	; 1
    296c:	35 e1       	ldi	r19, 0x15	; 21
    296e:	30 83       	st	Z, r19
    2970:	31 97       	sbiw	r30, 0x01	; 1
    2972:	36 e1       	ldi	r19, 0x16	; 22
    2974:	30 83       	st	Z, r19
    2976:	31 97       	sbiw	r30, 0x01	; 1
    2978:	37 e1       	ldi	r19, 0x17	; 23
    297a:	30 83       	st	Z, r19
    297c:	31 97       	sbiw	r30, 0x01	; 1
    297e:	38 e1       	ldi	r19, 0x18	; 24
    2980:	30 83       	st	Z, r19
    2982:	31 97       	sbiw	r30, 0x01	; 1
    2984:	39 e1       	ldi	r19, 0x19	; 25
    2986:	30 83       	st	Z, r19
    2988:	31 97       	sbiw	r30, 0x01	; 1
    298a:	30 e2       	ldi	r19, 0x20	; 32
    298c:	30 83       	st	Z, r19
    298e:	31 97       	sbiw	r30, 0x01	; 1
    2990:	31 e2       	ldi	r19, 0x21	; 33
    2992:	30 83       	st	Z, r19
    2994:	31 97       	sbiw	r30, 0x01	; 1
    2996:	20 83       	st	Z, r18
    2998:	31 97       	sbiw	r30, 0x01	; 1
    299a:	23 e2       	ldi	r18, 0x23	; 35
    299c:	20 83       	st	Z, r18
    299e:	31 97       	sbiw	r30, 0x01	; 1
    29a0:	40 83       	st	Z, r20
    29a2:	31 97       	sbiw	r30, 0x01	; 1
    29a4:	50 83       	st	Z, r21
    29a6:	31 97       	sbiw	r30, 0x01	; 1
    29a8:	26 e2       	ldi	r18, 0x26	; 38
    29aa:	20 83       	st	Z, r18
    29ac:	31 97       	sbiw	r30, 0x01	; 1
    29ae:	27 e2       	ldi	r18, 0x27	; 39
    29b0:	20 83       	st	Z, r18
    29b2:	31 97       	sbiw	r30, 0x01	; 1
    29b4:	28 e2       	ldi	r18, 0x28	; 40
    29b6:	20 83       	st	Z, r18
    29b8:	31 97       	sbiw	r30, 0x01	; 1
    29ba:	29 e2       	ldi	r18, 0x29	; 41
    29bc:	20 83       	st	Z, r18
    29be:	31 97       	sbiw	r30, 0x01	; 1
    29c0:	20 e3       	ldi	r18, 0x30	; 48
    29c2:	20 83       	st	Z, r18
    29c4:	31 97       	sbiw	r30, 0x01	; 1
    29c6:	21 e3       	ldi	r18, 0x31	; 49
    29c8:	20 83       	st	Z, r18
    29ca:	89 97       	sbiw	r24, 0x29	; 41
    29cc:	08 95       	ret

000029ce <xPortStartScheduler>:
    29ce:	8c e7       	ldi	r24, 0x7C	; 124
    29d0:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <__TEXT_REGION_LENGTH__+0x700a69>
    29d4:	8f ef       	ldi	r24, 0xFF	; 255
    29d6:	80 93 68 0a 	sts	0x0A68, r24	; 0x800a68 <__TEXT_REGION_LENGTH__+0x700a68>
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
    29e0:	81 e1       	ldi	r24, 0x11	; 17
    29e2:	80 93 41 0a 	sts	0x0A41, r24	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
    29e6:	83 e0       	ldi	r24, 0x03	; 3
    29e8:	80 93 47 0a 	sts	0x0A47, r24	; 0x800a47 <__TEXT_REGION_LENGTH__+0x700a47>
    29ec:	a0 91 81 41 	lds	r26, 0x4181	; 0x804181 <pxCurrentTCB>
    29f0:	b0 91 82 41 	lds	r27, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    29f4:	cd 91       	ld	r28, X+
    29f6:	cd bf       	out	0x3d, r28	; 61
    29f8:	dd 91       	ld	r29, X+
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	ff 91       	pop	r31
    29fe:	ef 91       	pop	r30
    2a00:	df 91       	pop	r29
    2a02:	cf 91       	pop	r28
    2a04:	bf 91       	pop	r27
    2a06:	af 91       	pop	r26
    2a08:	9f 91       	pop	r25
    2a0a:	8f 91       	pop	r24
    2a0c:	7f 91       	pop	r23
    2a0e:	6f 91       	pop	r22
    2a10:	5f 91       	pop	r21
    2a12:	4f 91       	pop	r20
    2a14:	3f 91       	pop	r19
    2a16:	2f 91       	pop	r18
    2a18:	1f 91       	pop	r17
    2a1a:	0f 91       	pop	r16
    2a1c:	ff 90       	pop	r15
    2a1e:	ef 90       	pop	r14
    2a20:	df 90       	pop	r13
    2a22:	cf 90       	pop	r12
    2a24:	bf 90       	pop	r11
    2a26:	af 90       	pop	r10
    2a28:	9f 90       	pop	r9
    2a2a:	8f 90       	pop	r8
    2a2c:	7f 90       	pop	r7
    2a2e:	6f 90       	pop	r6
    2a30:	5f 90       	pop	r5
    2a32:	4f 90       	pop	r4
    2a34:	3f 90       	pop	r3
    2a36:	2f 90       	pop	r2
    2a38:	1f 90       	pop	r1
    2a3a:	0f 90       	pop	r0
    2a3c:	0c be       	out	0x3c, r0	; 60
    2a3e:	0f 90       	pop	r0
    2a40:	0b be       	out	0x3b, r0	; 59
    2a42:	0f 90       	pop	r0
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	0f 90       	pop	r0
    2a48:	08 95       	ret
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	08 95       	ret

00002a4e <vPortYield>:
    2a4e:	0f 92       	push	r0
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	0f 92       	push	r0
    2a56:	0b b6       	in	r0, 0x3b	; 59
    2a58:	0f 92       	push	r0
    2a5a:	0c b6       	in	r0, 0x3c	; 60
    2a5c:	0f 92       	push	r0
    2a5e:	1f 92       	push	r1
    2a60:	11 24       	eor	r1, r1
    2a62:	2f 92       	push	r2
    2a64:	3f 92       	push	r3
    2a66:	4f 92       	push	r4
    2a68:	5f 92       	push	r5
    2a6a:	6f 92       	push	r6
    2a6c:	7f 92       	push	r7
    2a6e:	8f 92       	push	r8
    2a70:	9f 92       	push	r9
    2a72:	af 92       	push	r10
    2a74:	bf 92       	push	r11
    2a76:	cf 92       	push	r12
    2a78:	df 92       	push	r13
    2a7a:	ef 92       	push	r14
    2a7c:	ff 92       	push	r15
    2a7e:	0f 93       	push	r16
    2a80:	1f 93       	push	r17
    2a82:	2f 93       	push	r18
    2a84:	3f 93       	push	r19
    2a86:	4f 93       	push	r20
    2a88:	5f 93       	push	r21
    2a8a:	6f 93       	push	r22
    2a8c:	7f 93       	push	r23
    2a8e:	8f 93       	push	r24
    2a90:	9f 93       	push	r25
    2a92:	af 93       	push	r26
    2a94:	bf 93       	push	r27
    2a96:	cf 93       	push	r28
    2a98:	df 93       	push	r29
    2a9a:	ef 93       	push	r30
    2a9c:	ff 93       	push	r31
    2a9e:	a0 91 81 41 	lds	r26, 0x4181	; 0x804181 <pxCurrentTCB>
    2aa2:	b0 91 82 41 	lds	r27, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    2aa6:	0d b6       	in	r0, 0x3d	; 61
    2aa8:	0d 92       	st	X+, r0
    2aaa:	0e b6       	in	r0, 0x3e	; 62
    2aac:	0d 92       	st	X+, r0
    2aae:	0e 94 23 1c 	call	0x3846	; 0x3846 <vTaskSwitchContext>
    2ab2:	a0 91 81 41 	lds	r26, 0x4181	; 0x804181 <pxCurrentTCB>
    2ab6:	b0 91 82 41 	lds	r27, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    2aba:	cd 91       	ld	r28, X+
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	dd 91       	ld	r29, X+
    2ac0:	de bf       	out	0x3e, r29	; 62
    2ac2:	ff 91       	pop	r31
    2ac4:	ef 91       	pop	r30
    2ac6:	df 91       	pop	r29
    2ac8:	cf 91       	pop	r28
    2aca:	bf 91       	pop	r27
    2acc:	af 91       	pop	r26
    2ace:	9f 91       	pop	r25
    2ad0:	8f 91       	pop	r24
    2ad2:	7f 91       	pop	r23
    2ad4:	6f 91       	pop	r22
    2ad6:	5f 91       	pop	r21
    2ad8:	4f 91       	pop	r20
    2ada:	3f 91       	pop	r19
    2adc:	2f 91       	pop	r18
    2ade:	1f 91       	pop	r17
    2ae0:	0f 91       	pop	r16
    2ae2:	ff 90       	pop	r15
    2ae4:	ef 90       	pop	r14
    2ae6:	df 90       	pop	r13
    2ae8:	cf 90       	pop	r12
    2aea:	bf 90       	pop	r11
    2aec:	af 90       	pop	r10
    2aee:	9f 90       	pop	r9
    2af0:	8f 90       	pop	r8
    2af2:	7f 90       	pop	r7
    2af4:	6f 90       	pop	r6
    2af6:	5f 90       	pop	r5
    2af8:	4f 90       	pop	r4
    2afa:	3f 90       	pop	r3
    2afc:	2f 90       	pop	r2
    2afe:	1f 90       	pop	r1
    2b00:	0f 90       	pop	r0
    2b02:	0c be       	out	0x3c, r0	; 60
    2b04:	0f 90       	pop	r0
    2b06:	0b be       	out	0x3b, r0	; 59
    2b08:	0f 90       	pop	r0
    2b0a:	0f be       	out	0x3f, r0	; 63
    2b0c:	0f 90       	pop	r0
    2b0e:	08 95       	ret

00002b10 <vPortYieldFromTick>:
    2b10:	0f 92       	push	r0
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	f8 94       	cli
    2b16:	0f 92       	push	r0
    2b18:	0b b6       	in	r0, 0x3b	; 59
    2b1a:	0f 92       	push	r0
    2b1c:	0c b6       	in	r0, 0x3c	; 60
    2b1e:	0f 92       	push	r0
    2b20:	1f 92       	push	r1
    2b22:	11 24       	eor	r1, r1
    2b24:	2f 92       	push	r2
    2b26:	3f 92       	push	r3
    2b28:	4f 92       	push	r4
    2b2a:	5f 92       	push	r5
    2b2c:	6f 92       	push	r6
    2b2e:	7f 92       	push	r7
    2b30:	8f 92       	push	r8
    2b32:	9f 92       	push	r9
    2b34:	af 92       	push	r10
    2b36:	bf 92       	push	r11
    2b38:	cf 92       	push	r12
    2b3a:	df 92       	push	r13
    2b3c:	ef 92       	push	r14
    2b3e:	ff 92       	push	r15
    2b40:	0f 93       	push	r16
    2b42:	1f 93       	push	r17
    2b44:	2f 93       	push	r18
    2b46:	3f 93       	push	r19
    2b48:	4f 93       	push	r20
    2b4a:	5f 93       	push	r21
    2b4c:	6f 93       	push	r22
    2b4e:	7f 93       	push	r23
    2b50:	8f 93       	push	r24
    2b52:	9f 93       	push	r25
    2b54:	af 93       	push	r26
    2b56:	bf 93       	push	r27
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	ef 93       	push	r30
    2b5e:	ff 93       	push	r31
    2b60:	a0 91 81 41 	lds	r26, 0x4181	; 0x804181 <pxCurrentTCB>
    2b64:	b0 91 82 41 	lds	r27, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    2b68:	0d b6       	in	r0, 0x3d	; 61
    2b6a:	0d 92       	st	X+, r0
    2b6c:	0e b6       	in	r0, 0x3e	; 62
    2b6e:	0d 92       	st	X+, r0
    2b70:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <vTaskIncrementTick>
    2b74:	0e 94 23 1c 	call	0x3846	; 0x3846 <vTaskSwitchContext>
    2b78:	a0 91 81 41 	lds	r26, 0x4181	; 0x804181 <pxCurrentTCB>
    2b7c:	b0 91 82 41 	lds	r27, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    2b80:	cd 91       	ld	r28, X+
    2b82:	cd bf       	out	0x3d, r28	; 61
    2b84:	dd 91       	ld	r29, X+
    2b86:	de bf       	out	0x3e, r29	; 62
    2b88:	ff 91       	pop	r31
    2b8a:	ef 91       	pop	r30
    2b8c:	df 91       	pop	r29
    2b8e:	cf 91       	pop	r28
    2b90:	bf 91       	pop	r27
    2b92:	af 91       	pop	r26
    2b94:	9f 91       	pop	r25
    2b96:	8f 91       	pop	r24
    2b98:	7f 91       	pop	r23
    2b9a:	6f 91       	pop	r22
    2b9c:	5f 91       	pop	r21
    2b9e:	4f 91       	pop	r20
    2ba0:	3f 91       	pop	r19
    2ba2:	2f 91       	pop	r18
    2ba4:	1f 91       	pop	r17
    2ba6:	0f 91       	pop	r16
    2ba8:	ff 90       	pop	r15
    2baa:	ef 90       	pop	r14
    2bac:	df 90       	pop	r13
    2bae:	cf 90       	pop	r12
    2bb0:	bf 90       	pop	r11
    2bb2:	af 90       	pop	r10
    2bb4:	9f 90       	pop	r9
    2bb6:	8f 90       	pop	r8
    2bb8:	7f 90       	pop	r7
    2bba:	6f 90       	pop	r6
    2bbc:	5f 90       	pop	r5
    2bbe:	4f 90       	pop	r4
    2bc0:	3f 90       	pop	r3
    2bc2:	2f 90       	pop	r2
    2bc4:	1f 90       	pop	r1
    2bc6:	0f 90       	pop	r0
    2bc8:	0c be       	out	0x3c, r0	; 60
    2bca:	0f 90       	pop	r0
    2bcc:	0b be       	out	0x3b, r0	; 59
    2bce:	0f 90       	pop	r0
    2bd0:	0f be       	out	0x3f, r0	; 63
    2bd2:	0f 90       	pop	r0
    2bd4:	08 95       	ret

00002bd6 <__vector_55>:
    2bd6:	0e 94 88 15 	call	0x2b10	; 0x2b10 <vPortYieldFromTick>
    2bda:	18 95       	reti

00002bdc <prvCopyDataToQueue>:
    2bdc:	cf 93       	push	r28
    2bde:	df 93       	push	r29
    2be0:	ec 01       	movw	r28, r24
    2be2:	88 a1       	ldd	r24, Y+32	; 0x20
    2be4:	81 11       	cpse	r24, r1
    2be6:	0b c0       	rjmp	.+22     	; 0x2bfe <prvCopyDataToQueue+0x22>
    2be8:	88 81       	ld	r24, Y
    2bea:	99 81       	ldd	r25, Y+1	; 0x01
    2bec:	89 2b       	or	r24, r25
    2bee:	e1 f5       	brne	.+120    	; 0x2c68 <prvCopyDataToQueue+0x8c>
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf4:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <vTaskPriorityDisinherit>
    2bf8:	1a 82       	std	Y+2, r1	; 0x02
    2bfa:	1b 82       	std	Y+3, r1	; 0x03
    2bfc:	35 c0       	rjmp	.+106    	; 0x2c68 <prvCopyDataToQueue+0x8c>
    2bfe:	41 11       	cpse	r20, r1
    2c00:	17 c0       	rjmp	.+46     	; 0x2c30 <prvCopyDataToQueue+0x54>
    2c02:	48 2f       	mov	r20, r24
    2c04:	50 e0       	ldi	r21, 0x00	; 0
    2c06:	8c 81       	ldd	r24, Y+4	; 0x04
    2c08:	9d 81       	ldd	r25, Y+5	; 0x05
    2c0a:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <memcpy>
    2c0e:	28 a1       	ldd	r18, Y+32	; 0x20
    2c10:	8c 81       	ldd	r24, Y+4	; 0x04
    2c12:	9d 81       	ldd	r25, Y+5	; 0x05
    2c14:	82 0f       	add	r24, r18
    2c16:	91 1d       	adc	r25, r1
    2c18:	8c 83       	std	Y+4, r24	; 0x04
    2c1a:	9d 83       	std	Y+5, r25	; 0x05
    2c1c:	2a 81       	ldd	r18, Y+2	; 0x02
    2c1e:	3b 81       	ldd	r19, Y+3	; 0x03
    2c20:	82 17       	cp	r24, r18
    2c22:	93 07       	cpc	r25, r19
    2c24:	08 f1       	brcs	.+66     	; 0x2c68 <prvCopyDataToQueue+0x8c>
    2c26:	88 81       	ld	r24, Y
    2c28:	99 81       	ldd	r25, Y+1	; 0x01
    2c2a:	8c 83       	std	Y+4, r24	; 0x04
    2c2c:	9d 83       	std	Y+5, r25	; 0x05
    2c2e:	1c c0       	rjmp	.+56     	; 0x2c68 <prvCopyDataToQueue+0x8c>
    2c30:	48 2f       	mov	r20, r24
    2c32:	50 e0       	ldi	r21, 0x00	; 0
    2c34:	8e 81       	ldd	r24, Y+6	; 0x06
    2c36:	9f 81       	ldd	r25, Y+7	; 0x07
    2c38:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <memcpy>
    2c3c:	88 a1       	ldd	r24, Y+32	; 0x20
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	91 95       	neg	r25
    2c42:	81 95       	neg	r24
    2c44:	91 09       	sbc	r25, r1
    2c46:	2e 81       	ldd	r18, Y+6	; 0x06
    2c48:	3f 81       	ldd	r19, Y+7	; 0x07
    2c4a:	28 0f       	add	r18, r24
    2c4c:	39 1f       	adc	r19, r25
    2c4e:	2e 83       	std	Y+6, r18	; 0x06
    2c50:	3f 83       	std	Y+7, r19	; 0x07
    2c52:	48 81       	ld	r20, Y
    2c54:	59 81       	ldd	r21, Y+1	; 0x01
    2c56:	24 17       	cp	r18, r20
    2c58:	35 07       	cpc	r19, r21
    2c5a:	30 f4       	brcc	.+12     	; 0x2c68 <prvCopyDataToQueue+0x8c>
    2c5c:	2a 81       	ldd	r18, Y+2	; 0x02
    2c5e:	3b 81       	ldd	r19, Y+3	; 0x03
    2c60:	82 0f       	add	r24, r18
    2c62:	93 1f       	adc	r25, r19
    2c64:	8e 83       	std	Y+6, r24	; 0x06
    2c66:	9f 83       	std	Y+7, r25	; 0x07
    2c68:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c6a:	8f 5f       	subi	r24, 0xFF	; 255
    2c6c:	8e 8f       	std	Y+30, r24	; 0x1e
    2c6e:	df 91       	pop	r29
    2c70:	cf 91       	pop	r28
    2c72:	08 95       	ret

00002c74 <prvCopyDataFromQueue>:
    2c74:	fc 01       	movw	r30, r24
    2c76:	80 81       	ld	r24, Z
    2c78:	91 81       	ldd	r25, Z+1	; 0x01
    2c7a:	00 97       	sbiw	r24, 0x00	; 0
    2c7c:	a1 f0       	breq	.+40     	; 0x2ca6 <prvCopyDataFromQueue+0x32>
    2c7e:	40 a1       	ldd	r20, Z+32	; 0x20
    2c80:	50 e0       	ldi	r21, 0x00	; 0
    2c82:	26 81       	ldd	r18, Z+6	; 0x06
    2c84:	37 81       	ldd	r19, Z+7	; 0x07
    2c86:	24 0f       	add	r18, r20
    2c88:	35 1f       	adc	r19, r21
    2c8a:	26 83       	std	Z+6, r18	; 0x06
    2c8c:	37 83       	std	Z+7, r19	; 0x07
    2c8e:	a2 81       	ldd	r26, Z+2	; 0x02
    2c90:	b3 81       	ldd	r27, Z+3	; 0x03
    2c92:	2a 17       	cp	r18, r26
    2c94:	3b 07       	cpc	r19, r27
    2c96:	10 f0       	brcs	.+4      	; 0x2c9c <prvCopyDataFromQueue+0x28>
    2c98:	86 83       	std	Z+6, r24	; 0x06
    2c9a:	97 83       	std	Z+7, r25	; 0x07
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	66 81       	ldd	r22, Z+6	; 0x06
    2ca0:	77 81       	ldd	r23, Z+7	; 0x07
    2ca2:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <memcpy>
    2ca6:	08 95       	ret

00002ca8 <prvUnlockQueue>:
    2ca8:	0f 93       	push	r16
    2caa:	1f 93       	push	r17
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    2cb0:	ec 01       	movw	r28, r24
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	f8 94       	cli
    2cb6:	0f 92       	push	r0
    2cb8:	8a a1       	ldd	r24, Y+34	; 0x22
    2cba:	18 16       	cp	r1, r24
    2cbc:	b4 f4       	brge	.+44     	; 0x2cea <prvUnlockQueue+0x42>
    2cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc0:	81 11       	cpse	r24, r1
    2cc2:	05 c0       	rjmp	.+10     	; 0x2cce <prvUnlockQueue+0x26>
    2cc4:	12 c0       	rjmp	.+36     	; 0x2cea <prvUnlockQueue+0x42>
    2cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc8:	81 11       	cpse	r24, r1
    2cca:	04 c0       	rjmp	.+8      	; 0x2cd4 <prvUnlockQueue+0x2c>
    2ccc:	0e c0       	rjmp	.+28     	; 0x2cea <prvUnlockQueue+0x42>
    2cce:	8e 01       	movw	r16, r28
    2cd0:	0d 5e       	subi	r16, 0xED	; 237
    2cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd4:	c8 01       	movw	r24, r16
    2cd6:	0e 94 aa 1c 	call	0x3954	; 0x3954 <xTaskRemoveFromEventList>
    2cda:	81 11       	cpse	r24, r1
    2cdc:	0e 94 67 1d 	call	0x3ace	; 0x3ace <vTaskMissedYield>
    2ce0:	8a a1       	ldd	r24, Y+34	; 0x22
    2ce2:	81 50       	subi	r24, 0x01	; 1
    2ce4:	8a a3       	std	Y+34, r24	; 0x22
    2ce6:	18 16       	cp	r1, r24
    2ce8:	74 f3       	brlt	.-36     	; 0x2cc6 <prvUnlockQueue+0x1e>
    2cea:	8f ef       	ldi	r24, 0xFF	; 255
    2cec:	8a a3       	std	Y+34, r24	; 0x22
    2cee:	0f 90       	pop	r0
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	0f b6       	in	r0, 0x3f	; 63
    2cf4:	f8 94       	cli
    2cf6:	0f 92       	push	r0
    2cf8:	89 a1       	ldd	r24, Y+33	; 0x21
    2cfa:	18 16       	cp	r1, r24
    2cfc:	b4 f4       	brge	.+44     	; 0x2d2a <prvUnlockQueue+0x82>
    2cfe:	88 85       	ldd	r24, Y+8	; 0x08
    2d00:	81 11       	cpse	r24, r1
    2d02:	05 c0       	rjmp	.+10     	; 0x2d0e <prvUnlockQueue+0x66>
    2d04:	12 c0       	rjmp	.+36     	; 0x2d2a <prvUnlockQueue+0x82>
    2d06:	88 85       	ldd	r24, Y+8	; 0x08
    2d08:	81 11       	cpse	r24, r1
    2d0a:	04 c0       	rjmp	.+8      	; 0x2d14 <prvUnlockQueue+0x6c>
    2d0c:	0e c0       	rjmp	.+28     	; 0x2d2a <prvUnlockQueue+0x82>
    2d0e:	8e 01       	movw	r16, r28
    2d10:	08 5f       	subi	r16, 0xF8	; 248
    2d12:	1f 4f       	sbci	r17, 0xFF	; 255
    2d14:	c8 01       	movw	r24, r16
    2d16:	0e 94 aa 1c 	call	0x3954	; 0x3954 <xTaskRemoveFromEventList>
    2d1a:	81 11       	cpse	r24, r1
    2d1c:	0e 94 67 1d 	call	0x3ace	; 0x3ace <vTaskMissedYield>
    2d20:	89 a1       	ldd	r24, Y+33	; 0x21
    2d22:	81 50       	subi	r24, 0x01	; 1
    2d24:	89 a3       	std	Y+33, r24	; 0x21
    2d26:	18 16       	cp	r1, r24
    2d28:	74 f3       	brlt	.-36     	; 0x2d06 <prvUnlockQueue+0x5e>
    2d2a:	8f ef       	ldi	r24, 0xFF	; 255
    2d2c:	89 a3       	std	Y+33, r24	; 0x21
    2d2e:	0f 90       	pop	r0
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	df 91       	pop	r29
    2d34:	cf 91       	pop	r28
    2d36:	1f 91       	pop	r17
    2d38:	0f 91       	pop	r16
    2d3a:	08 95       	ret

00002d3c <xQueueGenericReset>:
    2d3c:	1f 93       	push	r17
    2d3e:	cf 93       	push	r28
    2d40:	df 93       	push	r29
    2d42:	61 30       	cpi	r22, 0x01	; 1
    2d44:	59 f0       	breq	.+22     	; 0x2d5c <xQueueGenericReset+0x20>
    2d46:	fc 01       	movw	r30, r24
    2d48:	23 89       	ldd	r18, Z+19	; 0x13
    2d4a:	30 85       	ldd	r19, Z+8	; 0x08
    2d4c:	31 11       	cpse	r19, r1
    2d4e:	2c c0       	rjmp	.+88     	; 0x2da8 <xQueueGenericReset+0x6c>
    2d50:	11 e0       	ldi	r17, 0x01	; 1
    2d52:	21 11       	cpse	r18, r1
    2d54:	10 e0       	ldi	r17, 0x00	; 0
    2d56:	21 11       	cpse	r18, r1
    2d58:	28 c0       	rjmp	.+80     	; 0x2daa <xQueueGenericReset+0x6e>
    2d5a:	01 c0       	rjmp	.+2      	; 0x2d5e <xQueueGenericReset+0x22>
    2d5c:	11 e0       	ldi	r17, 0x01	; 1
    2d5e:	ec 01       	movw	r28, r24
    2d60:	48 81       	ld	r20, Y
    2d62:	59 81       	ldd	r21, Y+1	; 0x01
    2d64:	28 a1       	ldd	r18, Y+32	; 0x20
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d6a:	62 9f       	mul	r22, r18
    2d6c:	c0 01       	movw	r24, r0
    2d6e:	63 9f       	mul	r22, r19
    2d70:	90 0d       	add	r25, r0
    2d72:	11 24       	eor	r1, r1
    2d74:	ba 01       	movw	r22, r20
    2d76:	68 0f       	add	r22, r24
    2d78:	79 1f       	adc	r23, r25
    2d7a:	6a 83       	std	Y+2, r22	; 0x02
    2d7c:	7b 83       	std	Y+3, r23	; 0x03
    2d7e:	1e 8e       	std	Y+30, r1	; 0x1e
    2d80:	4c 83       	std	Y+4, r20	; 0x04
    2d82:	5d 83       	std	Y+5, r21	; 0x05
    2d84:	82 1b       	sub	r24, r18
    2d86:	93 0b       	sbc	r25, r19
    2d88:	84 0f       	add	r24, r20
    2d8a:	95 1f       	adc	r25, r21
    2d8c:	8e 83       	std	Y+6, r24	; 0x06
    2d8e:	9f 83       	std	Y+7, r25	; 0x07
    2d90:	8f ef       	ldi	r24, 0xFF	; 255
    2d92:	89 a3       	std	Y+33, r24	; 0x21
    2d94:	8a a3       	std	Y+34, r24	; 0x22
    2d96:	ce 01       	movw	r24, r28
    2d98:	08 96       	adiw	r24, 0x08	; 8
    2d9a:	0e 94 c4 13 	call	0x2788	; 0x2788 <vListInitialise>
    2d9e:	ce 01       	movw	r24, r28
    2da0:	43 96       	adiw	r24, 0x13	; 19
    2da2:	0e 94 c4 13 	call	0x2788	; 0x2788 <vListInitialise>
    2da6:	01 c0       	rjmp	.+2      	; 0x2daa <xQueueGenericReset+0x6e>
    2da8:	10 e0       	ldi	r17, 0x00	; 0
    2daa:	81 2f       	mov	r24, r17
    2dac:	df 91       	pop	r29
    2dae:	cf 91       	pop	r28
    2db0:	1f 91       	pop	r17
    2db2:	08 95       	ret

00002db4 <xQueueGenericCreate>:
    2db4:	0f 93       	push	r16
    2db6:	1f 93       	push	r17
    2db8:	cf 93       	push	r28
    2dba:	df 93       	push	r29
    2dbc:	88 23       	and	r24, r24
    2dbe:	01 f1       	breq	.+64     	; 0x2e00 <xQueueGenericCreate+0x4c>
    2dc0:	06 2f       	mov	r16, r22
    2dc2:	18 2f       	mov	r17, r24
    2dc4:	83 e2       	ldi	r24, 0x23	; 35
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	0e 94 f7 12 	call	0x25ee	; 0x25ee <pvPortMalloc>
    2dcc:	ec 01       	movw	r28, r24
    2dce:	89 2b       	or	r24, r25
    2dd0:	c9 f0       	breq	.+50     	; 0x2e04 <xQueueGenericCreate+0x50>
    2dd2:	10 9f       	mul	r17, r16
    2dd4:	c0 01       	movw	r24, r0
    2dd6:	11 24       	eor	r1, r1
    2dd8:	01 96       	adiw	r24, 0x01	; 1
    2dda:	0e 94 f7 12 	call	0x25ee	; 0x25ee <pvPortMalloc>
    2dde:	88 83       	st	Y, r24
    2de0:	99 83       	std	Y+1, r25	; 0x01
    2de2:	89 2b       	or	r24, r25
    2de4:	39 f0       	breq	.+14     	; 0x2df4 <xQueueGenericCreate+0x40>
    2de6:	1f 8f       	std	Y+31, r17	; 0x1f
    2de8:	08 a3       	std	Y+32, r16	; 0x20
    2dea:	61 e0       	ldi	r22, 0x01	; 1
    2dec:	ce 01       	movw	r24, r28
    2dee:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <xQueueGenericReset>
    2df2:	08 c0       	rjmp	.+16     	; 0x2e04 <xQueueGenericCreate+0x50>
    2df4:	ce 01       	movw	r24, r28
    2df6:	0e 94 91 13 	call	0x2722	; 0x2722 <vPortFree>
    2dfa:	c0 e0       	ldi	r28, 0x00	; 0
    2dfc:	d0 e0       	ldi	r29, 0x00	; 0
    2dfe:	02 c0       	rjmp	.+4      	; 0x2e04 <xQueueGenericCreate+0x50>
    2e00:	c0 e0       	ldi	r28, 0x00	; 0
    2e02:	d0 e0       	ldi	r29, 0x00	; 0
    2e04:	ce 01       	movw	r24, r28
    2e06:	df 91       	pop	r29
    2e08:	cf 91       	pop	r28
    2e0a:	1f 91       	pop	r17
    2e0c:	0f 91       	pop	r16
    2e0e:	08 95       	ret

00002e10 <xQueueGenericSend>:
    2e10:	af 92       	push	r10
    2e12:	bf 92       	push	r11
    2e14:	cf 92       	push	r12
    2e16:	df 92       	push	r13
    2e18:	ef 92       	push	r14
    2e1a:	ff 92       	push	r15
    2e1c:	0f 93       	push	r16
    2e1e:	1f 93       	push	r17
    2e20:	cf 93       	push	r28
    2e22:	df 93       	push	r29
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
    2e28:	29 97       	sbiw	r28, 0x09	; 9
    2e2a:	cd bf       	out	0x3d, r28	; 61
    2e2c:	de bf       	out	0x3e, r29	; 62
    2e2e:	7c 01       	movw	r14, r24
    2e30:	5b 01       	movw	r10, r22
    2e32:	2e 83       	std	Y+6, r18	; 0x06
    2e34:	3f 83       	std	Y+7, r19	; 0x07
    2e36:	48 87       	std	Y+8, r20	; 0x08
    2e38:	59 87       	std	Y+9, r21	; 0x09
    2e3a:	10 e0       	ldi	r17, 0x00	; 0
    2e3c:	6c 01       	movw	r12, r24
    2e3e:	88 e0       	ldi	r24, 0x08	; 8
    2e40:	c8 0e       	add	r12, r24
    2e42:	d1 1c       	adc	r13, r1
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	f8 94       	cli
    2e48:	0f 92       	push	r0
    2e4a:	f7 01       	movw	r30, r14
    2e4c:	96 8d       	ldd	r25, Z+30	; 0x1e
    2e4e:	87 8d       	ldd	r24, Z+31	; 0x1f
    2e50:	98 17       	cp	r25, r24
    2e52:	a8 f4       	brcc	.+42     	; 0x2e7e <xQueueGenericSend+0x6e>
    2e54:	40 2f       	mov	r20, r16
    2e56:	b5 01       	movw	r22, r10
    2e58:	c7 01       	movw	r24, r14
    2e5a:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <prvCopyDataToQueue>
    2e5e:	f7 01       	movw	r30, r14
    2e60:	83 89       	ldd	r24, Z+19	; 0x13
    2e62:	88 23       	and	r24, r24
    2e64:	41 f0       	breq	.+16     	; 0x2e76 <xQueueGenericSend+0x66>
    2e66:	c7 01       	movw	r24, r14
    2e68:	43 96       	adiw	r24, 0x13	; 19
    2e6a:	0e 94 aa 1c 	call	0x3954	; 0x3954 <xTaskRemoveFromEventList>
    2e6e:	81 30       	cpi	r24, 0x01	; 1
    2e70:	11 f4       	brne	.+4      	; 0x2e76 <xQueueGenericSend+0x66>
    2e72:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <vPortYield>
    2e76:	0f 90       	pop	r0
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	56 c0       	rjmp	.+172    	; 0x2f2a <xQueueGenericSend+0x11a>
    2e7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e80:	9f 81       	ldd	r25, Y+7	; 0x07
    2e82:	a8 85       	ldd	r26, Y+8	; 0x08
    2e84:	b9 85       	ldd	r27, Y+9	; 0x09
    2e86:	89 2b       	or	r24, r25
    2e88:	8a 2b       	or	r24, r26
    2e8a:	8b 2b       	or	r24, r27
    2e8c:	21 f4       	brne	.+8      	; 0x2e96 <xQueueGenericSend+0x86>
    2e8e:	0f 90       	pop	r0
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	4a c0       	rjmp	.+148    	; 0x2f2a <xQueueGenericSend+0x11a>
    2e96:	11 11       	cpse	r17, r1
    2e98:	05 c0       	rjmp	.+10     	; 0x2ea4 <xQueueGenericSend+0x94>
    2e9a:	ce 01       	movw	r24, r28
    2e9c:	01 96       	adiw	r24, 0x01	; 1
    2e9e:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <vTaskSetTimeOutState>
    2ea2:	11 e0       	ldi	r17, 0x01	; 1
    2ea4:	0f 90       	pop	r0
    2ea6:	0f be       	out	0x3f, r0	; 63
    2ea8:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <vTaskSuspendAll>
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	f8 94       	cli
    2eb0:	0f 92       	push	r0
    2eb2:	f7 01       	movw	r30, r14
    2eb4:	81 a1       	ldd	r24, Z+33	; 0x21
    2eb6:	8f 3f       	cpi	r24, 0xFF	; 255
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <xQueueGenericSend+0xac>
    2eba:	11 a2       	std	Z+33, r1	; 0x21
    2ebc:	f7 01       	movw	r30, r14
    2ebe:	82 a1       	ldd	r24, Z+34	; 0x22
    2ec0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ec2:	09 f4       	brne	.+2      	; 0x2ec6 <xQueueGenericSend+0xb6>
    2ec4:	12 a2       	std	Z+34, r1	; 0x22
    2ec6:	0f 90       	pop	r0
    2ec8:	0f be       	out	0x3f, r0	; 63
    2eca:	be 01       	movw	r22, r28
    2ecc:	6a 5f       	subi	r22, 0xFA	; 250
    2ece:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed0:	ce 01       	movw	r24, r28
    2ed2:	01 96       	adiw	r24, 0x01	; 1
    2ed4:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <xTaskCheckForTimeOut>
    2ed8:	81 11       	cpse	r24, r1
    2eda:	21 c0       	rjmp	.+66     	; 0x2f1e <xQueueGenericSend+0x10e>
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	f8 94       	cli
    2ee0:	0f 92       	push	r0
    2ee2:	f7 01       	movw	r30, r14
    2ee4:	96 8d       	ldd	r25, Z+30	; 0x1e
    2ee6:	0f 90       	pop	r0
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	87 8d       	ldd	r24, Z+31	; 0x1f
    2eec:	98 13       	cpse	r25, r24
    2eee:	11 c0       	rjmp	.+34     	; 0x2f12 <xQueueGenericSend+0x102>
    2ef0:	4e 81       	ldd	r20, Y+6	; 0x06
    2ef2:	5f 81       	ldd	r21, Y+7	; 0x07
    2ef4:	68 85       	ldd	r22, Y+8	; 0x08
    2ef6:	79 85       	ldd	r23, Y+9	; 0x09
    2ef8:	c6 01       	movw	r24, r12
    2efa:	0e 94 80 1c 	call	0x3900	; 0x3900 <vTaskPlaceOnEventList>
    2efe:	c7 01       	movw	r24, r14
    2f00:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <prvUnlockQueue>
    2f04:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <xTaskResumeAll>
    2f08:	81 11       	cpse	r24, r1
    2f0a:	9c cf       	rjmp	.-200    	; 0x2e44 <xQueueGenericSend+0x34>
    2f0c:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <vPortYield>
    2f10:	99 cf       	rjmp	.-206    	; 0x2e44 <xQueueGenericSend+0x34>
    2f12:	c7 01       	movw	r24, r14
    2f14:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <prvUnlockQueue>
    2f18:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <xTaskResumeAll>
    2f1c:	93 cf       	rjmp	.-218    	; 0x2e44 <xQueueGenericSend+0x34>
    2f1e:	c7 01       	movw	r24, r14
    2f20:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <prvUnlockQueue>
    2f24:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <xTaskResumeAll>
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	29 96       	adiw	r28, 0x09	; 9
    2f2c:	cd bf       	out	0x3d, r28	; 61
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	df 91       	pop	r29
    2f32:	cf 91       	pop	r28
    2f34:	1f 91       	pop	r17
    2f36:	0f 91       	pop	r16
    2f38:	ff 90       	pop	r15
    2f3a:	ef 90       	pop	r14
    2f3c:	df 90       	pop	r13
    2f3e:	cf 90       	pop	r12
    2f40:	bf 90       	pop	r11
    2f42:	af 90       	pop	r10
    2f44:	08 95       	ret

00002f46 <xQueueGenericSendFromISR>:
    2f46:	0f 93       	push	r16
    2f48:	1f 93       	push	r17
    2f4a:	cf 93       	push	r28
    2f4c:	df 93       	push	r29
    2f4e:	8a 01       	movw	r16, r20
    2f50:	fc 01       	movw	r30, r24
    2f52:	56 8d       	ldd	r21, Z+30	; 0x1e
    2f54:	37 8d       	ldd	r19, Z+31	; 0x1f
    2f56:	53 17       	cp	r21, r19
    2f58:	c0 f4       	brcc	.+48     	; 0x2f8a <xQueueGenericSendFromISR+0x44>
    2f5a:	42 2f       	mov	r20, r18
    2f5c:	ec 01       	movw	r28, r24
    2f5e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <prvCopyDataToQueue>
    2f62:	8a a1       	ldd	r24, Y+34	; 0x22
    2f64:	8f 3f       	cpi	r24, 0xFF	; 255
    2f66:	69 f4       	brne	.+26     	; 0x2f82 <xQueueGenericSendFromISR+0x3c>
    2f68:	8b 89       	ldd	r24, Y+19	; 0x13
    2f6a:	88 23       	and	r24, r24
    2f6c:	81 f0       	breq	.+32     	; 0x2f8e <xQueueGenericSendFromISR+0x48>
    2f6e:	ce 01       	movw	r24, r28
    2f70:	43 96       	adiw	r24, 0x13	; 19
    2f72:	0e 94 aa 1c 	call	0x3954	; 0x3954 <xTaskRemoveFromEventList>
    2f76:	88 23       	and	r24, r24
    2f78:	61 f0       	breq	.+24     	; 0x2f92 <xQueueGenericSendFromISR+0x4c>
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	f8 01       	movw	r30, r16
    2f7e:	80 83       	st	Z, r24
    2f80:	09 c0       	rjmp	.+18     	; 0x2f94 <xQueueGenericSendFromISR+0x4e>
    2f82:	8f 5f       	subi	r24, 0xFF	; 255
    2f84:	8a a3       	std	Y+34, r24	; 0x22
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	05 c0       	rjmp	.+10     	; 0x2f94 <xQueueGenericSendFromISR+0x4e>
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	03 c0       	rjmp	.+6      	; 0x2f94 <xQueueGenericSendFromISR+0x4e>
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	01 c0       	rjmp	.+2      	; 0x2f94 <xQueueGenericSendFromISR+0x4e>
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	df 91       	pop	r29
    2f96:	cf 91       	pop	r28
    2f98:	1f 91       	pop	r17
    2f9a:	0f 91       	pop	r16
    2f9c:	08 95       	ret

00002f9e <xQueueGenericReceive>:
    2f9e:	af 92       	push	r10
    2fa0:	bf 92       	push	r11
    2fa2:	cf 92       	push	r12
    2fa4:	df 92       	push	r13
    2fa6:	ef 92       	push	r14
    2fa8:	ff 92       	push	r15
    2faa:	0f 93       	push	r16
    2fac:	1f 93       	push	r17
    2fae:	cf 93       	push	r28
    2fb0:	df 93       	push	r29
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	29 97       	sbiw	r28, 0x09	; 9
    2fb8:	cd bf       	out	0x3d, r28	; 61
    2fba:	de bf       	out	0x3e, r29	; 62
    2fbc:	7c 01       	movw	r14, r24
    2fbe:	5b 01       	movw	r10, r22
    2fc0:	2e 83       	std	Y+6, r18	; 0x06
    2fc2:	3f 83       	std	Y+7, r19	; 0x07
    2fc4:	48 87       	std	Y+8, r20	; 0x08
    2fc6:	59 87       	std	Y+9, r21	; 0x09
    2fc8:	10 e0       	ldi	r17, 0x00	; 0
    2fca:	6c 01       	movw	r12, r24
    2fcc:	83 e1       	ldi	r24, 0x13	; 19
    2fce:	c8 0e       	add	r12, r24
    2fd0:	d1 1c       	adc	r13, r1
    2fd2:	0f b6       	in	r0, 0x3f	; 63
    2fd4:	f8 94       	cli
    2fd6:	0f 92       	push	r0
    2fd8:	f7 01       	movw	r30, r14
    2fda:	86 8d       	ldd	r24, Z+30	; 0x1e
    2fdc:	88 23       	and	r24, r24
    2fde:	99 f1       	breq	.+102    	; 0x3046 <xQueueGenericReceive+0xa8>
    2fe0:	c6 80       	ldd	r12, Z+6	; 0x06
    2fe2:	d7 80       	ldd	r13, Z+7	; 0x07
    2fe4:	b5 01       	movw	r22, r10
    2fe6:	c7 01       	movw	r24, r14
    2fe8:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <prvCopyDataFromQueue>
    2fec:	01 11       	cpse	r16, r1
    2fee:	1a c0       	rjmp	.+52     	; 0x3024 <xQueueGenericReceive+0x86>
    2ff0:	f7 01       	movw	r30, r14
    2ff2:	86 8d       	ldd	r24, Z+30	; 0x1e
    2ff4:	81 50       	subi	r24, 0x01	; 1
    2ff6:	86 8f       	std	Z+30, r24	; 0x1e
    2ff8:	80 81       	ld	r24, Z
    2ffa:	91 81       	ldd	r25, Z+1	; 0x01
    2ffc:	89 2b       	or	r24, r25
    2ffe:	29 f4       	brne	.+10     	; 0x300a <xQueueGenericReceive+0x6c>
    3000:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <xTaskGetCurrentTaskHandle>
    3004:	f7 01       	movw	r30, r14
    3006:	82 83       	std	Z+2, r24	; 0x02
    3008:	93 83       	std	Z+3, r25	; 0x03
    300a:	f7 01       	movw	r30, r14
    300c:	80 85       	ldd	r24, Z+8	; 0x08
    300e:	88 23       	and	r24, r24
    3010:	b1 f0       	breq	.+44     	; 0x303e <xQueueGenericReceive+0xa0>
    3012:	c7 01       	movw	r24, r14
    3014:	08 96       	adiw	r24, 0x08	; 8
    3016:	0e 94 aa 1c 	call	0x3954	; 0x3954 <xTaskRemoveFromEventList>
    301a:	81 30       	cpi	r24, 0x01	; 1
    301c:	81 f4       	brne	.+32     	; 0x303e <xQueueGenericReceive+0xa0>
    301e:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <vPortYield>
    3022:	0d c0       	rjmp	.+26     	; 0x303e <xQueueGenericReceive+0xa0>
    3024:	f7 01       	movw	r30, r14
    3026:	c6 82       	std	Z+6, r12	; 0x06
    3028:	d7 82       	std	Z+7, r13	; 0x07
    302a:	83 89       	ldd	r24, Z+19	; 0x13
    302c:	88 23       	and	r24, r24
    302e:	39 f0       	breq	.+14     	; 0x303e <xQueueGenericReceive+0xa0>
    3030:	c7 01       	movw	r24, r14
    3032:	43 96       	adiw	r24, 0x13	; 19
    3034:	0e 94 aa 1c 	call	0x3954	; 0x3954 <xTaskRemoveFromEventList>
    3038:	81 11       	cpse	r24, r1
    303a:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <vPortYield>
    303e:	0f 90       	pop	r0
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	62 c0       	rjmp	.+196    	; 0x310a <xQueueGenericReceive+0x16c>
    3046:	8e 81       	ldd	r24, Y+6	; 0x06
    3048:	9f 81       	ldd	r25, Y+7	; 0x07
    304a:	a8 85       	ldd	r26, Y+8	; 0x08
    304c:	b9 85       	ldd	r27, Y+9	; 0x09
    304e:	89 2b       	or	r24, r25
    3050:	8a 2b       	or	r24, r26
    3052:	8b 2b       	or	r24, r27
    3054:	21 f4       	brne	.+8      	; 0x305e <xQueueGenericReceive+0xc0>
    3056:	0f 90       	pop	r0
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	56 c0       	rjmp	.+172    	; 0x310a <xQueueGenericReceive+0x16c>
    305e:	11 11       	cpse	r17, r1
    3060:	05 c0       	rjmp	.+10     	; 0x306c <xQueueGenericReceive+0xce>
    3062:	ce 01       	movw	r24, r28
    3064:	01 96       	adiw	r24, 0x01	; 1
    3066:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <vTaskSetTimeOutState>
    306a:	11 e0       	ldi	r17, 0x01	; 1
    306c:	0f 90       	pop	r0
    306e:	0f be       	out	0x3f, r0	; 63
    3070:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <vTaskSuspendAll>
    3074:	0f b6       	in	r0, 0x3f	; 63
    3076:	f8 94       	cli
    3078:	0f 92       	push	r0
    307a:	f7 01       	movw	r30, r14
    307c:	81 a1       	ldd	r24, Z+33	; 0x21
    307e:	8f 3f       	cpi	r24, 0xFF	; 255
    3080:	09 f4       	brne	.+2      	; 0x3084 <xQueueGenericReceive+0xe6>
    3082:	11 a2       	std	Z+33, r1	; 0x21
    3084:	f7 01       	movw	r30, r14
    3086:	82 a1       	ldd	r24, Z+34	; 0x22
    3088:	8f 3f       	cpi	r24, 0xFF	; 255
    308a:	09 f4       	brne	.+2      	; 0x308e <xQueueGenericReceive+0xf0>
    308c:	12 a2       	std	Z+34, r1	; 0x22
    308e:	0f 90       	pop	r0
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	be 01       	movw	r22, r28
    3094:	6a 5f       	subi	r22, 0xFA	; 250
    3096:	7f 4f       	sbci	r23, 0xFF	; 255
    3098:	ce 01       	movw	r24, r28
    309a:	01 96       	adiw	r24, 0x01	; 1
    309c:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <xTaskCheckForTimeOut>
    30a0:	81 11       	cpse	r24, r1
    30a2:	2d c0       	rjmp	.+90     	; 0x30fe <xQueueGenericReceive+0x160>
    30a4:	0f b6       	in	r0, 0x3f	; 63
    30a6:	f8 94       	cli
    30a8:	0f 92       	push	r0
    30aa:	f7 01       	movw	r30, r14
    30ac:	86 8d       	ldd	r24, Z+30	; 0x1e
    30ae:	0f 90       	pop	r0
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	81 11       	cpse	r24, r1
    30b4:	1e c0       	rjmp	.+60     	; 0x30f2 <xQueueGenericReceive+0x154>
    30b6:	80 81       	ld	r24, Z
    30b8:	91 81       	ldd	r25, Z+1	; 0x01
    30ba:	89 2b       	or	r24, r25
    30bc:	49 f4       	brne	.+18     	; 0x30d0 <xQueueGenericReceive+0x132>
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	f8 94       	cli
    30c2:	0f 92       	push	r0
    30c4:	82 81       	ldd	r24, Z+2	; 0x02
    30c6:	93 81       	ldd	r25, Z+3	; 0x03
    30c8:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <vTaskPriorityInherit>
    30cc:	0f 90       	pop	r0
    30ce:	0f be       	out	0x3f, r0	; 63
    30d0:	4e 81       	ldd	r20, Y+6	; 0x06
    30d2:	5f 81       	ldd	r21, Y+7	; 0x07
    30d4:	68 85       	ldd	r22, Y+8	; 0x08
    30d6:	79 85       	ldd	r23, Y+9	; 0x09
    30d8:	c6 01       	movw	r24, r12
    30da:	0e 94 80 1c 	call	0x3900	; 0x3900 <vTaskPlaceOnEventList>
    30de:	c7 01       	movw	r24, r14
    30e0:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <prvUnlockQueue>
    30e4:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <xTaskResumeAll>
    30e8:	81 11       	cpse	r24, r1
    30ea:	73 cf       	rjmp	.-282    	; 0x2fd2 <xQueueGenericReceive+0x34>
    30ec:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <vPortYield>
    30f0:	70 cf       	rjmp	.-288    	; 0x2fd2 <xQueueGenericReceive+0x34>
    30f2:	c7 01       	movw	r24, r14
    30f4:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <prvUnlockQueue>
    30f8:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <xTaskResumeAll>
    30fc:	6a cf       	rjmp	.-300    	; 0x2fd2 <xQueueGenericReceive+0x34>
    30fe:	c7 01       	movw	r24, r14
    3100:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <prvUnlockQueue>
    3104:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <xTaskResumeAll>
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	29 96       	adiw	r28, 0x09	; 9
    310c:	cd bf       	out	0x3d, r28	; 61
    310e:	de bf       	out	0x3e, r29	; 62
    3110:	df 91       	pop	r29
    3112:	cf 91       	pop	r28
    3114:	1f 91       	pop	r17
    3116:	0f 91       	pop	r16
    3118:	ff 90       	pop	r15
    311a:	ef 90       	pop	r14
    311c:	df 90       	pop	r13
    311e:	cf 90       	pop	r12
    3120:	bf 90       	pop	r11
    3122:	af 90       	pop	r10
    3124:	08 95       	ret

00003126 <xQueueReceiveFromISR>:
    3126:	0f 93       	push	r16
    3128:	1f 93       	push	r17
    312a:	cf 93       	push	r28
    312c:	df 93       	push	r29
    312e:	fc 01       	movw	r30, r24
    3130:	26 8d       	ldd	r18, Z+30	; 0x1e
    3132:	22 23       	and	r18, r18
    3134:	d9 f0       	breq	.+54     	; 0x316c <xQueueReceiveFromISR+0x46>
    3136:	8a 01       	movw	r16, r20
    3138:	ec 01       	movw	r28, r24
    313a:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <prvCopyDataFromQueue>
    313e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3140:	81 50       	subi	r24, 0x01	; 1
    3142:	8e 8f       	std	Y+30, r24	; 0x1e
    3144:	89 a1       	ldd	r24, Y+33	; 0x21
    3146:	8f 3f       	cpi	r24, 0xFF	; 255
    3148:	69 f4       	brne	.+26     	; 0x3164 <xQueueReceiveFromISR+0x3e>
    314a:	88 85       	ldd	r24, Y+8	; 0x08
    314c:	88 23       	and	r24, r24
    314e:	81 f0       	breq	.+32     	; 0x3170 <xQueueReceiveFromISR+0x4a>
    3150:	ce 01       	movw	r24, r28
    3152:	08 96       	adiw	r24, 0x08	; 8
    3154:	0e 94 aa 1c 	call	0x3954	; 0x3954 <xTaskRemoveFromEventList>
    3158:	88 23       	and	r24, r24
    315a:	61 f0       	breq	.+24     	; 0x3174 <xQueueReceiveFromISR+0x4e>
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	f8 01       	movw	r30, r16
    3160:	80 83       	st	Z, r24
    3162:	09 c0       	rjmp	.+18     	; 0x3176 <xQueueReceiveFromISR+0x50>
    3164:	8f 5f       	subi	r24, 0xFF	; 255
    3166:	89 a3       	std	Y+33, r24	; 0x21
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	05 c0       	rjmp	.+10     	; 0x3176 <xQueueReceiveFromISR+0x50>
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	03 c0       	rjmp	.+6      	; 0x3176 <xQueueReceiveFromISR+0x50>
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	01 c0       	rjmp	.+2      	; 0x3176 <xQueueReceiveFromISR+0x50>
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	df 91       	pop	r29
    3178:	cf 91       	pop	r28
    317a:	1f 91       	pop	r17
    317c:	0f 91       	pop	r16
    317e:	08 95       	ret

00003180 <uxQueueMessagesWaiting>:
    3180:	0f b6       	in	r0, 0x3f	; 63
    3182:	f8 94       	cli
    3184:	0f 92       	push	r0
    3186:	fc 01       	movw	r30, r24
    3188:	86 8d       	ldd	r24, Z+30	; 0x1e
    318a:	0f 90       	pop	r0
    318c:	0f be       	out	0x3f, r0	; 63
    318e:	08 95       	ret

00003190 <uxQueueMessagesWaitingFromISR>:
    3190:	fc 01       	movw	r30, r24
    3192:	86 8d       	ldd	r24, Z+30	; 0x1e
    3194:	08 95       	ret

00003196 <prvIdleTask>:
    3196:	c5 e5       	ldi	r28, 0x55	; 85
    3198:	d1 e4       	ldi	r29, 0x41	; 65
    319a:	88 81       	ld	r24, Y
    319c:	82 30       	cpi	r24, 0x02	; 2
    319e:	e8 f3       	brcs	.-6      	; 0x319a <prvIdleTask+0x4>
    31a0:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <vPortYield>
    31a4:	fa cf       	rjmp	.-12     	; 0x319a <prvIdleTask+0x4>

000031a6 <prvAddCurrentTaskToDelayedList>:
    31a6:	cf 92       	push	r12
    31a8:	df 92       	push	r13
    31aa:	ef 92       	push	r14
    31ac:	ff 92       	push	r15
    31ae:	6b 01       	movw	r12, r22
    31b0:	7c 01       	movw	r14, r24
    31b2:	e0 91 81 41 	lds	r30, 0x4181	; 0x804181 <pxCurrentTCB>
    31b6:	f0 91 82 41 	lds	r31, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    31ba:	62 83       	std	Z+2, r22	; 0x02
    31bc:	73 83       	std	Z+3, r23	; 0x03
    31be:	84 83       	std	Z+4, r24	; 0x04
    31c0:	95 83       	std	Z+5, r25	; 0x05
    31c2:	80 91 29 41 	lds	r24, 0x4129	; 0x804129 <xTickCount>
    31c6:	90 91 2a 41 	lds	r25, 0x412A	; 0x80412a <xTickCount+0x1>
    31ca:	a0 91 2b 41 	lds	r26, 0x412B	; 0x80412b <xTickCount+0x2>
    31ce:	b0 91 2c 41 	lds	r27, 0x412C	; 0x80412c <xTickCount+0x3>
    31d2:	c8 16       	cp	r12, r24
    31d4:	d9 06       	cpc	r13, r25
    31d6:	ea 06       	cpc	r14, r26
    31d8:	fb 06       	cpc	r15, r27
    31da:	68 f4       	brcc	.+26     	; 0x31f6 <prvAddCurrentTaskToDelayedList+0x50>
    31dc:	60 91 81 41 	lds	r22, 0x4181	; 0x804181 <pxCurrentTCB>
    31e0:	70 91 82 41 	lds	r23, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    31e4:	80 91 3b 41 	lds	r24, 0x413B	; 0x80413b <pxOverflowDelayedTaskList>
    31e8:	90 91 3c 41 	lds	r25, 0x413C	; 0x80413c <pxOverflowDelayedTaskList+0x1>
    31ec:	6e 5f       	subi	r22, 0xFE	; 254
    31ee:	7f 4f       	sbci	r23, 0xFF	; 255
    31f0:	0e 94 00 14 	call	0x2800	; 0x2800 <vListInsert>
    31f4:	21 c0       	rjmp	.+66     	; 0x3238 <prvAddCurrentTaskToDelayedList+0x92>
    31f6:	60 91 81 41 	lds	r22, 0x4181	; 0x804181 <pxCurrentTCB>
    31fa:	70 91 82 41 	lds	r23, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    31fe:	80 91 3d 41 	lds	r24, 0x413D	; 0x80413d <pxDelayedTaskList>
    3202:	90 91 3e 41 	lds	r25, 0x413E	; 0x80413e <pxDelayedTaskList+0x1>
    3206:	6e 5f       	subi	r22, 0xFE	; 254
    3208:	7f 4f       	sbci	r23, 0xFF	; 255
    320a:	0e 94 00 14 	call	0x2800	; 0x2800 <vListInsert>
    320e:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    3212:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    3216:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    321a:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    321e:	c8 16       	cp	r12, r24
    3220:	d9 06       	cpc	r13, r25
    3222:	ea 06       	cpc	r14, r26
    3224:	fb 06       	cpc	r15, r27
    3226:	40 f4       	brcc	.+16     	; 0x3238 <prvAddCurrentTaskToDelayedList+0x92>
    3228:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
    322c:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
    3230:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
    3234:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
    3238:	ff 90       	pop	r15
    323a:	ef 90       	pop	r14
    323c:	df 90       	pop	r13
    323e:	cf 90       	pop	r12
    3240:	08 95       	ret

00003242 <xTaskGenericCreate>:
    3242:	4f 92       	push	r4
    3244:	5f 92       	push	r5
    3246:	6f 92       	push	r6
    3248:	7f 92       	push	r7
    324a:	8f 92       	push	r8
    324c:	9f 92       	push	r9
    324e:	af 92       	push	r10
    3250:	bf 92       	push	r11
    3252:	cf 92       	push	r12
    3254:	df 92       	push	r13
    3256:	ef 92       	push	r14
    3258:	ff 92       	push	r15
    325a:	0f 93       	push	r16
    325c:	1f 93       	push	r17
    325e:	cf 93       	push	r28
    3260:	df 93       	push	r29
    3262:	5c 01       	movw	r10, r24
    3264:	4b 01       	movw	r8, r22
    3266:	3a 01       	movw	r6, r20
    3268:	29 01       	movw	r4, r18
    326a:	88 e2       	ldi	r24, 0x28	; 40
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	0e 94 f7 12 	call	0x25ee	; 0x25ee <pvPortMalloc>
    3272:	ec 01       	movw	r28, r24
    3274:	89 2b       	or	r24, r25
    3276:	09 f4       	brne	.+2      	; 0x327a <xTaskGenericCreate+0x38>
    3278:	d4 c0       	rjmp	.+424    	; 0x3422 <xTaskGenericCreate+0x1e0>
    327a:	c1 14       	cp	r12, r1
    327c:	d1 04       	cpc	r13, r1
    327e:	09 f0       	breq	.+2      	; 0x3282 <xTaskGenericCreate+0x40>
    3280:	cc c0       	rjmp	.+408    	; 0x341a <xTaskGenericCreate+0x1d8>
    3282:	c3 01       	movw	r24, r6
    3284:	0e 94 f7 12 	call	0x25ee	; 0x25ee <pvPortMalloc>
    3288:	8b 8f       	std	Y+27, r24	; 0x1b
    328a:	9c 8f       	std	Y+28, r25	; 0x1c
    328c:	00 97       	sbiw	r24, 0x00	; 0
    328e:	21 f4       	brne	.+8      	; 0x3298 <xTaskGenericCreate+0x56>
    3290:	ce 01       	movw	r24, r28
    3292:	0e 94 91 13 	call	0x2722	; 0x2722 <vPortFree>
    3296:	c5 c0       	rjmp	.+394    	; 0x3422 <xTaskGenericCreate+0x1e0>
    3298:	a3 01       	movw	r20, r6
    329a:	61 e1       	ldi	r22, 0x11	; 17
    329c:	70 e0       	ldi	r23, 0x00	; 0
    329e:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <memset>
    32a2:	93 01       	movw	r18, r6
    32a4:	21 50       	subi	r18, 0x01	; 1
    32a6:	31 09       	sbc	r19, r1
    32a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ac:	3c 01       	movw	r6, r24
    32ae:	62 0e       	add	r6, r18
    32b0:	73 1e       	adc	r7, r19
    32b2:	4a e0       	ldi	r20, 0x0A	; 10
    32b4:	50 e0       	ldi	r21, 0x00	; 0
    32b6:	b4 01       	movw	r22, r8
    32b8:	ce 01       	movw	r24, r28
    32ba:	4d 96       	adiw	r24, 0x1d	; 29
    32bc:	0e 94 82 25 	call	0x4b04	; 0x4b04 <strncpy>
    32c0:	1e a2       	std	Y+38, r1	; 0x26
    32c2:	10 2f       	mov	r17, r16
    32c4:	04 30       	cpi	r16, 0x04	; 4
    32c6:	08 f0       	brcs	.+2      	; 0x32ca <xTaskGenericCreate+0x88>
    32c8:	13 e0       	ldi	r17, 0x03	; 3
    32ca:	1a 8f       	std	Y+26, r17	; 0x1a
    32cc:	1f a3       	std	Y+39, r17	; 0x27
    32ce:	6e 01       	movw	r12, r28
    32d0:	22 e0       	ldi	r18, 0x02	; 2
    32d2:	c2 0e       	add	r12, r18
    32d4:	d1 1c       	adc	r13, r1
    32d6:	c6 01       	movw	r24, r12
    32d8:	0e 94 d5 13 	call	0x27aa	; 0x27aa <vListInitialiseItem>
    32dc:	ce 01       	movw	r24, r28
    32de:	0e 96       	adiw	r24, 0x0e	; 14
    32e0:	0e 94 d5 13 	call	0x27aa	; 0x27aa <vListInitialiseItem>
    32e4:	ca 87       	std	Y+10, r28	; 0x0a
    32e6:	db 87       	std	Y+11, r29	; 0x0b
    32e8:	84 e0       	ldi	r24, 0x04	; 4
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	a0 e0       	ldi	r26, 0x00	; 0
    32ee:	b0 e0       	ldi	r27, 0x00	; 0
    32f0:	81 1b       	sub	r24, r17
    32f2:	91 09       	sbc	r25, r1
    32f4:	a1 09       	sbc	r26, r1
    32f6:	b1 09       	sbc	r27, r1
    32f8:	8e 87       	std	Y+14, r24	; 0x0e
    32fa:	9f 87       	std	Y+15, r25	; 0x0f
    32fc:	a8 8b       	std	Y+16, r26	; 0x10
    32fe:	b9 8b       	std	Y+17, r27	; 0x11
    3300:	ce 8b       	std	Y+22, r28	; 0x16
    3302:	df 8b       	std	Y+23, r29	; 0x17
    3304:	a2 01       	movw	r20, r4
    3306:	b5 01       	movw	r22, r10
    3308:	c3 01       	movw	r24, r6
    330a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <pxPortInitialiseStack>
    330e:	88 83       	st	Y, r24
    3310:	99 83       	std	Y+1, r25	; 0x01
    3312:	e1 14       	cp	r14, r1
    3314:	f1 04       	cpc	r15, r1
    3316:	19 f0       	breq	.+6      	; 0x331e <xTaskGenericCreate+0xdc>
    3318:	f7 01       	movw	r30, r14
    331a:	c0 83       	st	Z, r28
    331c:	d1 83       	std	Z+1, r29	; 0x01
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	f8 94       	cli
    3322:	0f 92       	push	r0
    3324:	80 91 2d 41 	lds	r24, 0x412D	; 0x80412d <uxCurrentNumberOfTasks>
    3328:	8f 5f       	subi	r24, 0xFF	; 255
    332a:	80 93 2d 41 	sts	0x412D, r24	; 0x80412d <uxCurrentNumberOfTasks>
    332e:	80 91 81 41 	lds	r24, 0x4181	; 0x804181 <pxCurrentTCB>
    3332:	90 91 82 41 	lds	r25, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    3336:	89 2b       	or	r24, r25
    3338:	89 f5       	brne	.+98     	; 0x339c <xTaskGenericCreate+0x15a>
    333a:	c0 93 81 41 	sts	0x4181, r28	; 0x804181 <pxCurrentTCB>
    333e:	d0 93 82 41 	sts	0x4182, r29	; 0x804182 <pxCurrentTCB+0x1>
    3342:	80 91 2d 41 	lds	r24, 0x412D	; 0x80412d <uxCurrentNumberOfTasks>
    3346:	81 30       	cpi	r24, 0x01	; 1
    3348:	c1 f5       	brne	.+112    	; 0x33ba <xTaskGenericCreate+0x178>
    334a:	85 e5       	ldi	r24, 0x55	; 85
    334c:	91 e4       	ldi	r25, 0x41	; 65
    334e:	0e 94 c4 13 	call	0x2788	; 0x2788 <vListInitialise>
    3352:	80 e6       	ldi	r24, 0x60	; 96
    3354:	91 e4       	ldi	r25, 0x41	; 65
    3356:	0e 94 c4 13 	call	0x2788	; 0x2788 <vListInitialise>
    335a:	8b e6       	ldi	r24, 0x6B	; 107
    335c:	91 e4       	ldi	r25, 0x41	; 65
    335e:	0e 94 c4 13 	call	0x2788	; 0x2788 <vListInitialise>
    3362:	86 e7       	ldi	r24, 0x76	; 118
    3364:	91 e4       	ldi	r25, 0x41	; 65
    3366:	0e 94 c4 13 	call	0x2788	; 0x2788 <vListInitialise>
    336a:	8a e4       	ldi	r24, 0x4A	; 74
    336c:	91 e4       	ldi	r25, 0x41	; 65
    336e:	0e 94 c4 13 	call	0x2788	; 0x2788 <vListInitialise>
    3372:	8f e3       	ldi	r24, 0x3F	; 63
    3374:	91 e4       	ldi	r25, 0x41	; 65
    3376:	0e 94 c4 13 	call	0x2788	; 0x2788 <vListInitialise>
    337a:	80 e3       	ldi	r24, 0x30	; 48
    337c:	91 e4       	ldi	r25, 0x41	; 65
    337e:	0e 94 c4 13 	call	0x2788	; 0x2788 <vListInitialise>
    3382:	8a e4       	ldi	r24, 0x4A	; 74
    3384:	91 e4       	ldi	r25, 0x41	; 65
    3386:	80 93 3d 41 	sts	0x413D, r24	; 0x80413d <pxDelayedTaskList>
    338a:	90 93 3e 41 	sts	0x413E, r25	; 0x80413e <pxDelayedTaskList+0x1>
    338e:	8f e3       	ldi	r24, 0x3F	; 63
    3390:	91 e4       	ldi	r25, 0x41	; 65
    3392:	80 93 3b 41 	sts	0x413B, r24	; 0x80413b <pxOverflowDelayedTaskList>
    3396:	90 93 3c 41 	sts	0x413C, r25	; 0x80413c <pxOverflowDelayedTaskList+0x1>
    339a:	0f c0       	rjmp	.+30     	; 0x33ba <xTaskGenericCreate+0x178>
    339c:	80 91 26 41 	lds	r24, 0x4126	; 0x804126 <xSchedulerRunning>
    33a0:	81 11       	cpse	r24, r1
    33a2:	0b c0       	rjmp	.+22     	; 0x33ba <xTaskGenericCreate+0x178>
    33a4:	e0 91 81 41 	lds	r30, 0x4181	; 0x804181 <pxCurrentTCB>
    33a8:	f0 91 82 41 	lds	r31, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    33ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    33ae:	08 17       	cp	r16, r24
    33b0:	20 f0       	brcs	.+8      	; 0x33ba <xTaskGenericCreate+0x178>
    33b2:	c0 93 81 41 	sts	0x4181, r28	; 0x804181 <pxCurrentTCB>
    33b6:	d0 93 82 41 	sts	0x4182, r29	; 0x804182 <pxCurrentTCB+0x1>
    33ba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    33bc:	90 91 28 41 	lds	r25, 0x4128	; 0x804128 <uxTopUsedPriority>
    33c0:	98 17       	cp	r25, r24
    33c2:	10 f4       	brcc	.+4      	; 0x33c8 <xTaskGenericCreate+0x186>
    33c4:	80 93 28 41 	sts	0x4128, r24	; 0x804128 <uxTopUsedPriority>
    33c8:	90 91 21 41 	lds	r25, 0x4121	; 0x804121 <uxTaskNumber>
    33cc:	9f 5f       	subi	r25, 0xFF	; 255
    33ce:	90 93 21 41 	sts	0x4121, r25	; 0x804121 <uxTaskNumber>
    33d2:	90 91 27 41 	lds	r25, 0x4127	; 0x804127 <uxTopReadyPriority>
    33d6:	98 17       	cp	r25, r24
    33d8:	10 f4       	brcc	.+4      	; 0x33de <xTaskGenericCreate+0x19c>
    33da:	80 93 27 41 	sts	0x4127, r24	; 0x804127 <uxTopReadyPriority>
    33de:	fb e0       	ldi	r31, 0x0B	; 11
    33e0:	8f 9f       	mul	r24, r31
    33e2:	c0 01       	movw	r24, r0
    33e4:	11 24       	eor	r1, r1
    33e6:	b6 01       	movw	r22, r12
    33e8:	8b 5a       	subi	r24, 0xAB	; 171
    33ea:	9e 4b       	sbci	r25, 0xBE	; 190
    33ec:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <vListInsertEnd>
    33f0:	0f 90       	pop	r0
    33f2:	0f be       	out	0x3f, r0	; 63
    33f4:	80 91 26 41 	lds	r24, 0x4126	; 0x804126 <xSchedulerRunning>
    33f8:	88 23       	and	r24, r24
    33fa:	59 f0       	breq	.+22     	; 0x3412 <xTaskGenericCreate+0x1d0>
    33fc:	e0 91 81 41 	lds	r30, 0x4181	; 0x804181 <pxCurrentTCB>
    3400:	f0 91 82 41 	lds	r31, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    3404:	82 8d       	ldd	r24, Z+26	; 0x1a
    3406:	80 17       	cp	r24, r16
    3408:	30 f4       	brcc	.+12     	; 0x3416 <xTaskGenericCreate+0x1d4>
    340a:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <vPortYield>
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	09 c0       	rjmp	.+18     	; 0x3424 <xTaskGenericCreate+0x1e2>
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	07 c0       	rjmp	.+14     	; 0x3424 <xTaskGenericCreate+0x1e2>
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	05 c0       	rjmp	.+10     	; 0x3424 <xTaskGenericCreate+0x1e2>
    341a:	cb 8e       	std	Y+27, r12	; 0x1b
    341c:	dc 8e       	std	Y+28, r13	; 0x1c
    341e:	c6 01       	movw	r24, r12
    3420:	3b cf       	rjmp	.-394    	; 0x3298 <xTaskGenericCreate+0x56>
    3422:	8f ef       	ldi	r24, 0xFF	; 255
    3424:	df 91       	pop	r29
    3426:	cf 91       	pop	r28
    3428:	1f 91       	pop	r17
    342a:	0f 91       	pop	r16
    342c:	ff 90       	pop	r15
    342e:	ef 90       	pop	r14
    3430:	df 90       	pop	r13
    3432:	cf 90       	pop	r12
    3434:	bf 90       	pop	r11
    3436:	af 90       	pop	r10
    3438:	9f 90       	pop	r9
    343a:	8f 90       	pop	r8
    343c:	7f 90       	pop	r7
    343e:	6f 90       	pop	r6
    3440:	5f 90       	pop	r5
    3442:	4f 90       	pop	r4
    3444:	08 95       	ret

00003446 <uxTaskPriorityGet>:
    3446:	0f b6       	in	r0, 0x3f	; 63
    3448:	f8 94       	cli
    344a:	0f 92       	push	r0
    344c:	00 97       	sbiw	r24, 0x00	; 0
    344e:	21 f4       	brne	.+8      	; 0x3458 <uxTaskPriorityGet+0x12>
    3450:	80 91 81 41 	lds	r24, 0x4181	; 0x804181 <pxCurrentTCB>
    3454:	90 91 82 41 	lds	r25, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    3458:	0f 90       	pop	r0
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	fc 01       	movw	r30, r24
    345e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3460:	08 95       	ret

00003462 <vTaskStartScheduler>:
    3462:	af 92       	push	r10
    3464:	bf 92       	push	r11
    3466:	cf 92       	push	r12
    3468:	df 92       	push	r13
    346a:	ef 92       	push	r14
    346c:	ff 92       	push	r15
    346e:	0f 93       	push	r16
    3470:	a1 2c       	mov	r10, r1
    3472:	b1 2c       	mov	r11, r1
    3474:	c1 2c       	mov	r12, r1
    3476:	d1 2c       	mov	r13, r1
    3478:	0f 2e       	mov	r0, r31
    347a:	fe e2       	ldi	r31, 0x2E	; 46
    347c:	ef 2e       	mov	r14, r31
    347e:	f1 e4       	ldi	r31, 0x41	; 65
    3480:	ff 2e       	mov	r15, r31
    3482:	f0 2d       	mov	r31, r0
    3484:	00 e0       	ldi	r16, 0x00	; 0
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	44 e6       	ldi	r20, 0x64	; 100
    348c:	50 e0       	ldi	r21, 0x00	; 0
    348e:	69 e5       	ldi	r22, 0x59	; 89
    3490:	70 e2       	ldi	r23, 0x20	; 32
    3492:	8b ec       	ldi	r24, 0xCB	; 203
    3494:	98 e1       	ldi	r25, 0x18	; 24
    3496:	0e 94 21 19 	call	0x3242	; 0x3242 <xTaskGenericCreate>
    349a:	81 30       	cpi	r24, 0x01	; 1
    349c:	69 f4       	brne	.+26     	; 0x34b8 <vTaskStartScheduler+0x56>
    349e:	f8 94       	cli
    34a0:	80 93 26 41 	sts	0x4126, r24	; 0x804126 <xSchedulerRunning>
    34a4:	10 92 29 41 	sts	0x4129, r1	; 0x804129 <xTickCount>
    34a8:	10 92 2a 41 	sts	0x412A, r1	; 0x80412a <xTickCount+0x1>
    34ac:	10 92 2b 41 	sts	0x412B, r1	; 0x80412b <xTickCount+0x2>
    34b0:	10 92 2c 41 	sts	0x412C, r1	; 0x80412c <xTickCount+0x3>
    34b4:	0e 94 e7 14 	call	0x29ce	; 0x29ce <xPortStartScheduler>
    34b8:	0f 91       	pop	r16
    34ba:	ff 90       	pop	r15
    34bc:	ef 90       	pop	r14
    34be:	df 90       	pop	r13
    34c0:	cf 90       	pop	r12
    34c2:	bf 90       	pop	r11
    34c4:	af 90       	pop	r10
    34c6:	08 95       	ret

000034c8 <vTaskSuspendAll>:
    34c8:	80 91 25 41 	lds	r24, 0x4125	; 0x804125 <uxSchedulerSuspended>
    34cc:	8f 5f       	subi	r24, 0xFF	; 255
    34ce:	80 93 25 41 	sts	0x4125, r24	; 0x804125 <uxSchedulerSuspended>
    34d2:	08 95       	ret

000034d4 <pcTaskGetTaskName>:
    34d4:	00 97       	sbiw	r24, 0x00	; 0
    34d6:	21 f4       	brne	.+8      	; 0x34e0 <pcTaskGetTaskName+0xc>
    34d8:	80 91 81 41 	lds	r24, 0x4181	; 0x804181 <pxCurrentTCB>
    34dc:	90 91 82 41 	lds	r25, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    34e0:	4d 96       	adiw	r24, 0x1d	; 29
    34e2:	08 95       	ret

000034e4 <vTaskIncrementTick>:
    34e4:	ff 92       	push	r15
    34e6:	0f 93       	push	r16
    34e8:	1f 93       	push	r17
    34ea:	cf 93       	push	r28
    34ec:	df 93       	push	r29
    34ee:	80 91 25 41 	lds	r24, 0x4125	; 0x804125 <uxSchedulerSuspended>
    34f2:	81 11       	cpse	r24, r1
    34f4:	ed c0       	rjmp	.+474    	; 0x36d0 <vTaskIncrementTick+0x1ec>
    34f6:	80 91 29 41 	lds	r24, 0x4129	; 0x804129 <xTickCount>
    34fa:	90 91 2a 41 	lds	r25, 0x412A	; 0x80412a <xTickCount+0x1>
    34fe:	a0 91 2b 41 	lds	r26, 0x412B	; 0x80412b <xTickCount+0x2>
    3502:	b0 91 2c 41 	lds	r27, 0x412C	; 0x80412c <xTickCount+0x3>
    3506:	01 96       	adiw	r24, 0x01	; 1
    3508:	a1 1d       	adc	r26, r1
    350a:	b1 1d       	adc	r27, r1
    350c:	80 93 29 41 	sts	0x4129, r24	; 0x804129 <xTickCount>
    3510:	90 93 2a 41 	sts	0x412A, r25	; 0x80412a <xTickCount+0x1>
    3514:	a0 93 2b 41 	sts	0x412B, r26	; 0x80412b <xTickCount+0x2>
    3518:	b0 93 2c 41 	sts	0x412C, r27	; 0x80412c <xTickCount+0x3>
    351c:	80 91 29 41 	lds	r24, 0x4129	; 0x804129 <xTickCount>
    3520:	90 91 2a 41 	lds	r25, 0x412A	; 0x80412a <xTickCount+0x1>
    3524:	a0 91 2b 41 	lds	r26, 0x412B	; 0x80412b <xTickCount+0x2>
    3528:	b0 91 2c 41 	lds	r27, 0x412C	; 0x80412c <xTickCount+0x3>
    352c:	89 2b       	or	r24, r25
    352e:	8a 2b       	or	r24, r26
    3530:	8b 2b       	or	r24, r27
    3532:	f1 f5       	brne	.+124    	; 0x35b0 <vTaskIncrementTick+0xcc>
    3534:	80 91 3d 41 	lds	r24, 0x413D	; 0x80413d <pxDelayedTaskList>
    3538:	90 91 3e 41 	lds	r25, 0x413E	; 0x80413e <pxDelayedTaskList+0x1>
    353c:	20 91 3b 41 	lds	r18, 0x413B	; 0x80413b <pxOverflowDelayedTaskList>
    3540:	30 91 3c 41 	lds	r19, 0x413C	; 0x80413c <pxOverflowDelayedTaskList+0x1>
    3544:	20 93 3d 41 	sts	0x413D, r18	; 0x80413d <pxDelayedTaskList>
    3548:	30 93 3e 41 	sts	0x413E, r19	; 0x80413e <pxDelayedTaskList+0x1>
    354c:	80 93 3b 41 	sts	0x413B, r24	; 0x80413b <pxOverflowDelayedTaskList>
    3550:	90 93 3c 41 	sts	0x413C, r25	; 0x80413c <pxOverflowDelayedTaskList+0x1>
    3554:	80 91 22 41 	lds	r24, 0x4122	; 0x804122 <xNumOfOverflows>
    3558:	8f 5f       	subi	r24, 0xFF	; 255
    355a:	80 93 22 41 	sts	0x4122, r24	; 0x804122 <xNumOfOverflows>
    355e:	e0 91 3d 41 	lds	r30, 0x413D	; 0x80413d <pxDelayedTaskList>
    3562:	f0 91 3e 41 	lds	r31, 0x413E	; 0x80413e <pxDelayedTaskList+0x1>
    3566:	80 81       	ld	r24, Z
    3568:	81 11       	cpse	r24, r1
    356a:	0c c0       	rjmp	.+24     	; 0x3584 <vTaskIncrementTick+0xa0>
    356c:	8f ef       	ldi	r24, 0xFF	; 255
    356e:	9f ef       	ldi	r25, 0xFF	; 255
    3570:	dc 01       	movw	r26, r24
    3572:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    3576:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    357a:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    357e:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    3582:	16 c0       	rjmp	.+44     	; 0x35b0 <vTaskIncrementTick+0xcc>
    3584:	e0 91 3d 41 	lds	r30, 0x413D	; 0x80413d <pxDelayedTaskList>
    3588:	f0 91 3e 41 	lds	r31, 0x413E	; 0x80413e <pxDelayedTaskList+0x1>
    358c:	07 80       	ldd	r0, Z+7	; 0x07
    358e:	f0 85       	ldd	r31, Z+8	; 0x08
    3590:	e0 2d       	mov	r30, r0
    3592:	00 84       	ldd	r0, Z+8	; 0x08
    3594:	f1 85       	ldd	r31, Z+9	; 0x09
    3596:	e0 2d       	mov	r30, r0
    3598:	82 81       	ldd	r24, Z+2	; 0x02
    359a:	93 81       	ldd	r25, Z+3	; 0x03
    359c:	a4 81       	ldd	r26, Z+4	; 0x04
    359e:	b5 81       	ldd	r27, Z+5	; 0x05
    35a0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    35a4:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    35a8:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    35ac:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    35b0:	40 91 29 41 	lds	r20, 0x4129	; 0x804129 <xTickCount>
    35b4:	50 91 2a 41 	lds	r21, 0x412A	; 0x80412a <xTickCount+0x1>
    35b8:	60 91 2b 41 	lds	r22, 0x412B	; 0x80412b <xTickCount+0x2>
    35bc:	70 91 2c 41 	lds	r23, 0x412C	; 0x80412c <xTickCount+0x3>
    35c0:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
    35c4:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
    35c8:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
    35cc:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
    35d0:	48 17       	cp	r20, r24
    35d2:	59 07       	cpc	r21, r25
    35d4:	6a 07       	cpc	r22, r26
    35d6:	7b 07       	cpc	r23, r27
    35d8:	08 f4       	brcc	.+2      	; 0x35dc <vTaskIncrementTick+0xf8>
    35da:	7f c0       	rjmp	.+254    	; 0x36da <vTaskIncrementTick+0x1f6>
    35dc:	e0 91 3d 41 	lds	r30, 0x413D	; 0x80413d <pxDelayedTaskList>
    35e0:	f0 91 3e 41 	lds	r31, 0x413E	; 0x80413e <pxDelayedTaskList+0x1>
    35e4:	80 81       	ld	r24, Z
    35e6:	88 23       	and	r24, r24
    35e8:	f9 f0       	breq	.+62     	; 0x3628 <vTaskIncrementTick+0x144>
    35ea:	e0 91 3d 41 	lds	r30, 0x413D	; 0x80413d <pxDelayedTaskList>
    35ee:	f0 91 3e 41 	lds	r31, 0x413E	; 0x80413e <pxDelayedTaskList+0x1>
    35f2:	07 80       	ldd	r0, Z+7	; 0x07
    35f4:	f0 85       	ldd	r31, Z+8	; 0x08
    35f6:	e0 2d       	mov	r30, r0
    35f8:	c0 85       	ldd	r28, Z+8	; 0x08
    35fa:	d1 85       	ldd	r29, Z+9	; 0x09
    35fc:	8a 81       	ldd	r24, Y+2	; 0x02
    35fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3600:	ac 81       	ldd	r26, Y+4	; 0x04
    3602:	bd 81       	ldd	r27, Y+5	; 0x05
    3604:	40 91 29 41 	lds	r20, 0x4129	; 0x804129 <xTickCount>
    3608:	50 91 2a 41 	lds	r21, 0x412A	; 0x80412a <xTickCount+0x1>
    360c:	60 91 2b 41 	lds	r22, 0x412B	; 0x80412b <xTickCount+0x2>
    3610:	70 91 2c 41 	lds	r23, 0x412C	; 0x80412c <xTickCount+0x3>
    3614:	48 17       	cp	r20, r24
    3616:	59 07       	cpc	r21, r25
    3618:	6a 07       	cpc	r22, r26
    361a:	7b 07       	cpc	r23, r27
    361c:	58 f1       	brcs	.+86     	; 0x3674 <vTaskIncrementTick+0x190>
    361e:	0f 2e       	mov	r0, r31
    3620:	fb e0       	ldi	r31, 0x0B	; 11
    3622:	ff 2e       	mov	r15, r31
    3624:	f0 2d       	mov	r31, r0
    3626:	2f c0       	rjmp	.+94     	; 0x3686 <vTaskIncrementTick+0x1a2>
    3628:	8f ef       	ldi	r24, 0xFF	; 255
    362a:	9f ef       	ldi	r25, 0xFF	; 255
    362c:	dc 01       	movw	r26, r24
    362e:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    3632:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    3636:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    363a:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    363e:	4d c0       	rjmp	.+154    	; 0x36da <vTaskIncrementTick+0x1f6>
    3640:	e0 91 3d 41 	lds	r30, 0x413D	; 0x80413d <pxDelayedTaskList>
    3644:	f0 91 3e 41 	lds	r31, 0x413E	; 0x80413e <pxDelayedTaskList+0x1>
    3648:	07 80       	ldd	r0, Z+7	; 0x07
    364a:	f0 85       	ldd	r31, Z+8	; 0x08
    364c:	e0 2d       	mov	r30, r0
    364e:	c0 85       	ldd	r28, Z+8	; 0x08
    3650:	d1 85       	ldd	r29, Z+9	; 0x09
    3652:	8a 81       	ldd	r24, Y+2	; 0x02
    3654:	9b 81       	ldd	r25, Y+3	; 0x03
    3656:	ac 81       	ldd	r26, Y+4	; 0x04
    3658:	bd 81       	ldd	r27, Y+5	; 0x05
    365a:	40 91 29 41 	lds	r20, 0x4129	; 0x804129 <xTickCount>
    365e:	50 91 2a 41 	lds	r21, 0x412A	; 0x80412a <xTickCount+0x1>
    3662:	60 91 2b 41 	lds	r22, 0x412B	; 0x80412b <xTickCount+0x2>
    3666:	70 91 2c 41 	lds	r23, 0x412C	; 0x80412c <xTickCount+0x3>
    366a:	48 17       	cp	r20, r24
    366c:	59 07       	cpc	r21, r25
    366e:	6a 07       	cpc	r22, r26
    3670:	7b 07       	cpc	r23, r27
    3672:	48 f4       	brcc	.+18     	; 0x3686 <vTaskIncrementTick+0x1a2>
    3674:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
    3678:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
    367c:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
    3680:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
    3684:	2a c0       	rjmp	.+84     	; 0x36da <vTaskIncrementTick+0x1f6>
    3686:	8e 01       	movw	r16, r28
    3688:	0e 5f       	subi	r16, 0xFE	; 254
    368a:	1f 4f       	sbci	r17, 0xFF	; 255
    368c:	c8 01       	movw	r24, r16
    368e:	0e 94 4b 14 	call	0x2896	; 0x2896 <vListRemove>
    3692:	88 8d       	ldd	r24, Y+24	; 0x18
    3694:	99 8d       	ldd	r25, Y+25	; 0x19
    3696:	89 2b       	or	r24, r25
    3698:	21 f0       	breq	.+8      	; 0x36a2 <vTaskIncrementTick+0x1be>
    369a:	ce 01       	movw	r24, r28
    369c:	0e 96       	adiw	r24, 0x0e	; 14
    369e:	0e 94 4b 14 	call	0x2896	; 0x2896 <vListRemove>
    36a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    36a4:	90 91 27 41 	lds	r25, 0x4127	; 0x804127 <uxTopReadyPriority>
    36a8:	98 17       	cp	r25, r24
    36aa:	10 f4       	brcc	.+4      	; 0x36b0 <vTaskIncrementTick+0x1cc>
    36ac:	80 93 27 41 	sts	0x4127, r24	; 0x804127 <uxTopReadyPriority>
    36b0:	f8 9e       	mul	r15, r24
    36b2:	c0 01       	movw	r24, r0
    36b4:	11 24       	eor	r1, r1
    36b6:	b8 01       	movw	r22, r16
    36b8:	8b 5a       	subi	r24, 0xAB	; 171
    36ba:	9e 4b       	sbci	r25, 0xBE	; 190
    36bc:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <vListInsertEnd>
    36c0:	e0 91 3d 41 	lds	r30, 0x413D	; 0x80413d <pxDelayedTaskList>
    36c4:	f0 91 3e 41 	lds	r31, 0x413E	; 0x80413e <pxDelayedTaskList+0x1>
    36c8:	80 81       	ld	r24, Z
    36ca:	81 11       	cpse	r24, r1
    36cc:	b9 cf       	rjmp	.-142    	; 0x3640 <vTaskIncrementTick+0x15c>
    36ce:	ac cf       	rjmp	.-168    	; 0x3628 <vTaskIncrementTick+0x144>
    36d0:	80 91 24 41 	lds	r24, 0x4124	; 0x804124 <uxMissedTicks>
    36d4:	8f 5f       	subi	r24, 0xFF	; 255
    36d6:	80 93 24 41 	sts	0x4124, r24	; 0x804124 <uxMissedTicks>
    36da:	df 91       	pop	r29
    36dc:	cf 91       	pop	r28
    36de:	1f 91       	pop	r17
    36e0:	0f 91       	pop	r16
    36e2:	ff 90       	pop	r15
    36e4:	08 95       	ret

000036e6 <xTaskResumeAll>:
    36e6:	cf 92       	push	r12
    36e8:	df 92       	push	r13
    36ea:	ef 92       	push	r14
    36ec:	ff 92       	push	r15
    36ee:	0f 93       	push	r16
    36f0:	1f 93       	push	r17
    36f2:	cf 93       	push	r28
    36f4:	df 93       	push	r29
    36f6:	0f b6       	in	r0, 0x3f	; 63
    36f8:	f8 94       	cli
    36fa:	0f 92       	push	r0
    36fc:	80 91 25 41 	lds	r24, 0x4125	; 0x804125 <uxSchedulerSuspended>
    3700:	81 50       	subi	r24, 0x01	; 1
    3702:	80 93 25 41 	sts	0x4125, r24	; 0x804125 <uxSchedulerSuspended>
    3706:	80 91 25 41 	lds	r24, 0x4125	; 0x804125 <uxSchedulerSuspended>
    370a:	81 11       	cpse	r24, r1
    370c:	60 c0       	rjmp	.+192    	; 0x37ce <xTaskResumeAll+0xe8>
    370e:	80 91 2d 41 	lds	r24, 0x412D	; 0x80412d <uxCurrentNumberOfTasks>
    3712:	81 11       	cpse	r24, r1
    3714:	2c c0       	rjmp	.+88     	; 0x376e <xTaskResumeAll+0x88>
    3716:	5e c0       	rjmp	.+188    	; 0x37d4 <xTaskResumeAll+0xee>
    3718:	d7 01       	movw	r26, r14
    371a:	17 96       	adiw	r26, 0x07	; 7
    371c:	ed 91       	ld	r30, X+
    371e:	fc 91       	ld	r31, X
    3720:	18 97       	sbiw	r26, 0x08	; 8
    3722:	c0 85       	ldd	r28, Z+8	; 0x08
    3724:	d1 85       	ldd	r29, Z+9	; 0x09
    3726:	ce 01       	movw	r24, r28
    3728:	0e 96       	adiw	r24, 0x0e	; 14
    372a:	0e 94 4b 14 	call	0x2896	; 0x2896 <vListRemove>
    372e:	8e 01       	movw	r16, r28
    3730:	0e 5f       	subi	r16, 0xFE	; 254
    3732:	1f 4f       	sbci	r17, 0xFF	; 255
    3734:	c8 01       	movw	r24, r16
    3736:	0e 94 4b 14 	call	0x2896	; 0x2896 <vListRemove>
    373a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    373c:	90 91 27 41 	lds	r25, 0x4127	; 0x804127 <uxTopReadyPriority>
    3740:	98 17       	cp	r25, r24
    3742:	10 f4       	brcc	.+4      	; 0x3748 <xTaskResumeAll+0x62>
    3744:	80 93 27 41 	sts	0x4127, r24	; 0x804127 <uxTopReadyPriority>
    3748:	d8 9e       	mul	r13, r24
    374a:	c0 01       	movw	r24, r0
    374c:	11 24       	eor	r1, r1
    374e:	b8 01       	movw	r22, r16
    3750:	8b 5a       	subi	r24, 0xAB	; 171
    3752:	9e 4b       	sbci	r25, 0xBE	; 190
    3754:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <vListInsertEnd>
    3758:	e0 91 81 41 	lds	r30, 0x4181	; 0x804181 <pxCurrentTCB>
    375c:	f0 91 82 41 	lds	r31, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    3760:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3762:	82 8d       	ldd	r24, Z+26	; 0x1a
    3764:	98 17       	cp	r25, r24
    3766:	70 f0       	brcs	.+28     	; 0x3784 <xTaskResumeAll+0x9e>
    3768:	cc 24       	eor	r12, r12
    376a:	c3 94       	inc	r12
    376c:	0b c0       	rjmp	.+22     	; 0x3784 <xTaskResumeAll+0x9e>
    376e:	c1 2c       	mov	r12, r1
    3770:	0f 2e       	mov	r0, r31
    3772:	f0 e3       	ldi	r31, 0x30	; 48
    3774:	ef 2e       	mov	r14, r31
    3776:	f1 e4       	ldi	r31, 0x41	; 65
    3778:	ff 2e       	mov	r15, r31
    377a:	f0 2d       	mov	r31, r0
    377c:	0f 2e       	mov	r0, r31
    377e:	fb e0       	ldi	r31, 0x0B	; 11
    3780:	df 2e       	mov	r13, r31
    3782:	f0 2d       	mov	r31, r0
    3784:	f7 01       	movw	r30, r14
    3786:	80 81       	ld	r24, Z
    3788:	81 11       	cpse	r24, r1
    378a:	c6 cf       	rjmp	.-116    	; 0x3718 <xTaskResumeAll+0x32>
    378c:	80 91 24 41 	lds	r24, 0x4124	; 0x804124 <uxMissedTicks>
    3790:	88 23       	and	r24, r24
    3792:	81 f0       	breq	.+32     	; 0x37b4 <xTaskResumeAll+0xce>
    3794:	80 91 24 41 	lds	r24, 0x4124	; 0x804124 <uxMissedTicks>
    3798:	88 23       	and	r24, r24
    379a:	99 f0       	breq	.+38     	; 0x37c2 <xTaskResumeAll+0xdc>
    379c:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <vTaskIncrementTick>
    37a0:	80 91 24 41 	lds	r24, 0x4124	; 0x804124 <uxMissedTicks>
    37a4:	81 50       	subi	r24, 0x01	; 1
    37a6:	80 93 24 41 	sts	0x4124, r24	; 0x804124 <uxMissedTicks>
    37aa:	80 91 24 41 	lds	r24, 0x4124	; 0x804124 <uxMissedTicks>
    37ae:	81 11       	cpse	r24, r1
    37b0:	f5 cf       	rjmp	.-22     	; 0x379c <xTaskResumeAll+0xb6>
    37b2:	07 c0       	rjmp	.+14     	; 0x37c2 <xTaskResumeAll+0xdc>
    37b4:	f1 e0       	ldi	r31, 0x01	; 1
    37b6:	cf 16       	cp	r12, r31
    37b8:	21 f0       	breq	.+8      	; 0x37c2 <xTaskResumeAll+0xdc>
    37ba:	80 91 23 41 	lds	r24, 0x4123	; 0x804123 <xMissedYield>
    37be:	81 30       	cpi	r24, 0x01	; 1
    37c0:	41 f4       	brne	.+16     	; 0x37d2 <xTaskResumeAll+0xec>
    37c2:	10 92 23 41 	sts	0x4123, r1	; 0x804123 <xMissedYield>
    37c6:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <vPortYield>
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	03 c0       	rjmp	.+6      	; 0x37d4 <xTaskResumeAll+0xee>
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	01 c0       	rjmp	.+2      	; 0x37d4 <xTaskResumeAll+0xee>
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	0f 90       	pop	r0
    37d6:	0f be       	out	0x3f, r0	; 63
    37d8:	df 91       	pop	r29
    37da:	cf 91       	pop	r28
    37dc:	1f 91       	pop	r17
    37de:	0f 91       	pop	r16
    37e0:	ff 90       	pop	r15
    37e2:	ef 90       	pop	r14
    37e4:	df 90       	pop	r13
    37e6:	cf 90       	pop	r12
    37e8:	08 95       	ret

000037ea <vTaskDelay>:
    37ea:	cf 92       	push	r12
    37ec:	df 92       	push	r13
    37ee:	ef 92       	push	r14
    37f0:	ff 92       	push	r15
    37f2:	6b 01       	movw	r12, r22
    37f4:	7c 01       	movw	r14, r24
    37f6:	67 2b       	or	r22, r23
    37f8:	68 2b       	or	r22, r24
    37fa:	69 2b       	or	r22, r25
    37fc:	e9 f0       	breq	.+58     	; 0x3838 <vTaskDelay+0x4e>
    37fe:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <vTaskSuspendAll>
    3802:	80 91 29 41 	lds	r24, 0x4129	; 0x804129 <xTickCount>
    3806:	90 91 2a 41 	lds	r25, 0x412A	; 0x80412a <xTickCount+0x1>
    380a:	a0 91 2b 41 	lds	r26, 0x412B	; 0x80412b <xTickCount+0x2>
    380e:	b0 91 2c 41 	lds	r27, 0x412C	; 0x80412c <xTickCount+0x3>
    3812:	c8 0e       	add	r12, r24
    3814:	d9 1e       	adc	r13, r25
    3816:	ea 1e       	adc	r14, r26
    3818:	fb 1e       	adc	r15, r27
    381a:	80 91 81 41 	lds	r24, 0x4181	; 0x804181 <pxCurrentTCB>
    381e:	90 91 82 41 	lds	r25, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    3822:	02 96       	adiw	r24, 0x02	; 2
    3824:	0e 94 4b 14 	call	0x2896	; 0x2896 <vListRemove>
    3828:	c7 01       	movw	r24, r14
    382a:	b6 01       	movw	r22, r12
    382c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <prvAddCurrentTaskToDelayedList>
    3830:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <xTaskResumeAll>
    3834:	81 11       	cpse	r24, r1
    3836:	02 c0       	rjmp	.+4      	; 0x383c <vTaskDelay+0x52>
    3838:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <vPortYield>
    383c:	ff 90       	pop	r15
    383e:	ef 90       	pop	r14
    3840:	df 90       	pop	r13
    3842:	cf 90       	pop	r12
    3844:	08 95       	ret

00003846 <vTaskSwitchContext>:
    3846:	80 91 25 41 	lds	r24, 0x4125	; 0x804125 <uxSchedulerSuspended>
    384a:	81 11       	cpse	r24, r1
    384c:	0c c0       	rjmp	.+24     	; 0x3866 <vTaskSwitchContext+0x20>
    384e:	e0 91 27 41 	lds	r30, 0x4127	; 0x804127 <uxTopReadyPriority>
    3852:	4b e0       	ldi	r20, 0x0B	; 11
    3854:	e4 9f       	mul	r30, r20
    3856:	f0 01       	movw	r30, r0
    3858:	11 24       	eor	r1, r1
    385a:	eb 5a       	subi	r30, 0xAB	; 171
    385c:	fe 4b       	sbci	r31, 0xBE	; 190
    385e:	80 81       	ld	r24, Z
    3860:	88 23       	and	r24, r24
    3862:	29 f0       	breq	.+10     	; 0x386e <vTaskSwitchContext+0x28>
    3864:	14 c0       	rjmp	.+40     	; 0x388e <vTaskSwitchContext+0x48>
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	80 93 23 41 	sts	0x4123, r24	; 0x804123 <xMissedYield>
    386c:	08 95       	ret
    386e:	9b e0       	ldi	r25, 0x0B	; 11
    3870:	80 91 27 41 	lds	r24, 0x4127	; 0x804127 <uxTopReadyPriority>
    3874:	81 50       	subi	r24, 0x01	; 1
    3876:	80 93 27 41 	sts	0x4127, r24	; 0x804127 <uxTopReadyPriority>
    387a:	e0 91 27 41 	lds	r30, 0x4127	; 0x804127 <uxTopReadyPriority>
    387e:	9e 9f       	mul	r25, r30
    3880:	f0 01       	movw	r30, r0
    3882:	11 24       	eor	r1, r1
    3884:	eb 5a       	subi	r30, 0xAB	; 171
    3886:	fe 4b       	sbci	r31, 0xBE	; 190
    3888:	80 81       	ld	r24, Z
    388a:	88 23       	and	r24, r24
    388c:	89 f3       	breq	.-30     	; 0x3870 <vTaskSwitchContext+0x2a>
    388e:	80 91 27 41 	lds	r24, 0x4127	; 0x804127 <uxTopReadyPriority>
    3892:	28 2f       	mov	r18, r24
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	4b e0       	ldi	r20, 0x0B	; 11
    3898:	84 9f       	mul	r24, r20
    389a:	c0 01       	movw	r24, r0
    389c:	11 24       	eor	r1, r1
    389e:	dc 01       	movw	r26, r24
    38a0:	ab 5a       	subi	r26, 0xAB	; 171
    38a2:	be 4b       	sbci	r27, 0xBE	; 190
    38a4:	11 96       	adiw	r26, 0x01	; 1
    38a6:	ed 91       	ld	r30, X+
    38a8:	fc 91       	ld	r31, X
    38aa:	12 97       	sbiw	r26, 0x02	; 2
    38ac:	04 80       	ldd	r0, Z+4	; 0x04
    38ae:	f5 81       	ldd	r31, Z+5	; 0x05
    38b0:	e0 2d       	mov	r30, r0
    38b2:	11 96       	adiw	r26, 0x01	; 1
    38b4:	ed 93       	st	X+, r30
    38b6:	fc 93       	st	X, r31
    38b8:	12 97       	sbiw	r26, 0x02	; 2
    38ba:	88 5a       	subi	r24, 0xA8	; 168
    38bc:	9e 4b       	sbci	r25, 0xBE	; 190
    38be:	e8 17       	cp	r30, r24
    38c0:	f9 07       	cpc	r31, r25
    38c2:	61 f4       	brne	.+24     	; 0x38dc <vTaskSwitchContext+0x96>
    38c4:	84 81       	ldd	r24, Z+4	; 0x04
    38c6:	95 81       	ldd	r25, Z+5	; 0x05
    38c8:	4b e0       	ldi	r20, 0x0B	; 11
    38ca:	42 9f       	mul	r20, r18
    38cc:	f0 01       	movw	r30, r0
    38ce:	43 9f       	mul	r20, r19
    38d0:	f0 0d       	add	r31, r0
    38d2:	11 24       	eor	r1, r1
    38d4:	eb 5a       	subi	r30, 0xAB	; 171
    38d6:	fe 4b       	sbci	r31, 0xBE	; 190
    38d8:	81 83       	std	Z+1, r24	; 0x01
    38da:	92 83       	std	Z+2, r25	; 0x02
    38dc:	8b e0       	ldi	r24, 0x0B	; 11
    38de:	82 9f       	mul	r24, r18
    38e0:	f0 01       	movw	r30, r0
    38e2:	83 9f       	mul	r24, r19
    38e4:	f0 0d       	add	r31, r0
    38e6:	11 24       	eor	r1, r1
    38e8:	eb 5a       	subi	r30, 0xAB	; 171
    38ea:	fe 4b       	sbci	r31, 0xBE	; 190
    38ec:	01 80       	ldd	r0, Z+1	; 0x01
    38ee:	f2 81       	ldd	r31, Z+2	; 0x02
    38f0:	e0 2d       	mov	r30, r0
    38f2:	80 85       	ldd	r24, Z+8	; 0x08
    38f4:	91 85       	ldd	r25, Z+9	; 0x09
    38f6:	80 93 81 41 	sts	0x4181, r24	; 0x804181 <pxCurrentTCB>
    38fa:	90 93 82 41 	sts	0x4182, r25	; 0x804182 <pxCurrentTCB+0x1>
    38fe:	08 95       	ret

00003900 <vTaskPlaceOnEventList>:
    3900:	cf 92       	push	r12
    3902:	df 92       	push	r13
    3904:	ef 92       	push	r14
    3906:	ff 92       	push	r15
    3908:	6a 01       	movw	r12, r20
    390a:	7b 01       	movw	r14, r22
    390c:	60 91 81 41 	lds	r22, 0x4181	; 0x804181 <pxCurrentTCB>
    3910:	70 91 82 41 	lds	r23, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    3914:	62 5f       	subi	r22, 0xF2	; 242
    3916:	7f 4f       	sbci	r23, 0xFF	; 255
    3918:	0e 94 00 14 	call	0x2800	; 0x2800 <vListInsert>
    391c:	80 91 81 41 	lds	r24, 0x4181	; 0x804181 <pxCurrentTCB>
    3920:	90 91 82 41 	lds	r25, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    3924:	02 96       	adiw	r24, 0x02	; 2
    3926:	0e 94 4b 14 	call	0x2896	; 0x2896 <vListRemove>
    392a:	80 91 29 41 	lds	r24, 0x4129	; 0x804129 <xTickCount>
    392e:	90 91 2a 41 	lds	r25, 0x412A	; 0x80412a <xTickCount+0x1>
    3932:	a0 91 2b 41 	lds	r26, 0x412B	; 0x80412b <xTickCount+0x2>
    3936:	b0 91 2c 41 	lds	r27, 0x412C	; 0x80412c <xTickCount+0x3>
    393a:	bc 01       	movw	r22, r24
    393c:	cd 01       	movw	r24, r26
    393e:	6c 0d       	add	r22, r12
    3940:	7d 1d       	adc	r23, r13
    3942:	8e 1d       	adc	r24, r14
    3944:	9f 1d       	adc	r25, r15
    3946:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <prvAddCurrentTaskToDelayedList>
    394a:	ff 90       	pop	r15
    394c:	ef 90       	pop	r14
    394e:	df 90       	pop	r13
    3950:	cf 90       	pop	r12
    3952:	08 95       	ret

00003954 <xTaskRemoveFromEventList>:
    3954:	0f 93       	push	r16
    3956:	1f 93       	push	r17
    3958:	cf 93       	push	r28
    395a:	df 93       	push	r29
    395c:	dc 01       	movw	r26, r24
    395e:	17 96       	adiw	r26, 0x07	; 7
    3960:	ed 91       	ld	r30, X+
    3962:	fc 91       	ld	r31, X
    3964:	18 97       	sbiw	r26, 0x08	; 8
    3966:	c0 85       	ldd	r28, Z+8	; 0x08
    3968:	d1 85       	ldd	r29, Z+9	; 0x09
    396a:	8e 01       	movw	r16, r28
    396c:	02 5f       	subi	r16, 0xF2	; 242
    396e:	1f 4f       	sbci	r17, 0xFF	; 255
    3970:	c8 01       	movw	r24, r16
    3972:	0e 94 4b 14 	call	0x2896	; 0x2896 <vListRemove>
    3976:	80 91 25 41 	lds	r24, 0x4125	; 0x804125 <uxSchedulerSuspended>
    397a:	81 11       	cpse	r24, r1
    397c:	16 c0       	rjmp	.+44     	; 0x39aa <xTaskRemoveFromEventList+0x56>
    397e:	0c 50       	subi	r16, 0x0C	; 12
    3980:	11 09       	sbc	r17, r1
    3982:	c8 01       	movw	r24, r16
    3984:	0e 94 4b 14 	call	0x2896	; 0x2896 <vListRemove>
    3988:	8a 8d       	ldd	r24, Y+26	; 0x1a
    398a:	90 91 27 41 	lds	r25, 0x4127	; 0x804127 <uxTopReadyPriority>
    398e:	98 17       	cp	r25, r24
    3990:	10 f4       	brcc	.+4      	; 0x3996 <xTaskRemoveFromEventList+0x42>
    3992:	80 93 27 41 	sts	0x4127, r24	; 0x804127 <uxTopReadyPriority>
    3996:	bb e0       	ldi	r27, 0x0B	; 11
    3998:	8b 9f       	mul	r24, r27
    399a:	c0 01       	movw	r24, r0
    399c:	11 24       	eor	r1, r1
    399e:	b8 01       	movw	r22, r16
    39a0:	8b 5a       	subi	r24, 0xAB	; 171
    39a2:	9e 4b       	sbci	r25, 0xBE	; 190
    39a4:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <vListInsertEnd>
    39a8:	05 c0       	rjmp	.+10     	; 0x39b4 <xTaskRemoveFromEventList+0x60>
    39aa:	b8 01       	movw	r22, r16
    39ac:	80 e3       	ldi	r24, 0x30	; 48
    39ae:	91 e4       	ldi	r25, 0x41	; 65
    39b0:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <vListInsertEnd>
    39b4:	e0 91 81 41 	lds	r30, 0x4181	; 0x804181 <pxCurrentTCB>
    39b8:	f0 91 82 41 	lds	r31, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	2a 8d       	ldd	r18, Y+26	; 0x1a
    39c0:	92 8d       	ldd	r25, Z+26	; 0x1a
    39c2:	29 17       	cp	r18, r25
    39c4:	08 f4       	brcc	.+2      	; 0x39c8 <xTaskRemoveFromEventList+0x74>
    39c6:	80 e0       	ldi	r24, 0x00	; 0
    39c8:	df 91       	pop	r29
    39ca:	cf 91       	pop	r28
    39cc:	1f 91       	pop	r17
    39ce:	0f 91       	pop	r16
    39d0:	08 95       	ret

000039d2 <vTaskSetTimeOutState>:
    39d2:	20 91 22 41 	lds	r18, 0x4122	; 0x804122 <xNumOfOverflows>
    39d6:	fc 01       	movw	r30, r24
    39d8:	20 83       	st	Z, r18
    39da:	40 91 29 41 	lds	r20, 0x4129	; 0x804129 <xTickCount>
    39de:	50 91 2a 41 	lds	r21, 0x412A	; 0x80412a <xTickCount+0x1>
    39e2:	60 91 2b 41 	lds	r22, 0x412B	; 0x80412b <xTickCount+0x2>
    39e6:	70 91 2c 41 	lds	r23, 0x412C	; 0x80412c <xTickCount+0x3>
    39ea:	41 83       	std	Z+1, r20	; 0x01
    39ec:	52 83       	std	Z+2, r21	; 0x02
    39ee:	63 83       	std	Z+3, r22	; 0x03
    39f0:	74 83       	std	Z+4, r23	; 0x04
    39f2:	08 95       	ret

000039f4 <xTaskCheckForTimeOut>:
    39f4:	8f 92       	push	r8
    39f6:	9f 92       	push	r9
    39f8:	af 92       	push	r10
    39fa:	bf 92       	push	r11
    39fc:	cf 92       	push	r12
    39fe:	df 92       	push	r13
    3a00:	ef 92       	push	r14
    3a02:	ff 92       	push	r15
    3a04:	0f 93       	push	r16
    3a06:	1f 93       	push	r17
    3a08:	cf 93       	push	r28
    3a0a:	df 93       	push	r29
    3a0c:	fc 01       	movw	r30, r24
    3a0e:	0f b6       	in	r0, 0x3f	; 63
    3a10:	f8 94       	cli
    3a12:	0f 92       	push	r0
    3a14:	80 91 22 41 	lds	r24, 0x4122	; 0x804122 <xNumOfOverflows>
    3a18:	90 81       	ld	r25, Z
    3a1a:	98 17       	cp	r25, r24
    3a1c:	89 f0       	breq	.+34     	; 0x3a40 <xTaskCheckForTimeOut+0x4c>
    3a1e:	80 91 29 41 	lds	r24, 0x4129	; 0x804129 <xTickCount>
    3a22:	90 91 2a 41 	lds	r25, 0x412A	; 0x80412a <xTickCount+0x1>
    3a26:	a0 91 2b 41 	lds	r26, 0x412B	; 0x80412b <xTickCount+0x2>
    3a2a:	b0 91 2c 41 	lds	r27, 0x412C	; 0x80412c <xTickCount+0x3>
    3a2e:	01 81       	ldd	r16, Z+1	; 0x01
    3a30:	12 81       	ldd	r17, Z+2	; 0x02
    3a32:	23 81       	ldd	r18, Z+3	; 0x03
    3a34:	34 81       	ldd	r19, Z+4	; 0x04
    3a36:	80 17       	cp	r24, r16
    3a38:	91 07       	cpc	r25, r17
    3a3a:	a2 07       	cpc	r26, r18
    3a3c:	b3 07       	cpc	r27, r19
    3a3e:	a8 f5       	brcc	.+106    	; 0x3aaa <xTaskCheckForTimeOut+0xb6>
    3a40:	80 91 29 41 	lds	r24, 0x4129	; 0x804129 <xTickCount>
    3a44:	90 91 2a 41 	lds	r25, 0x412A	; 0x80412a <xTickCount+0x1>
    3a48:	a0 91 2b 41 	lds	r26, 0x412B	; 0x80412b <xTickCount+0x2>
    3a4c:	b0 91 2c 41 	lds	r27, 0x412C	; 0x80412c <xTickCount+0x3>
    3a50:	c1 80       	ldd	r12, Z+1	; 0x01
    3a52:	d2 80       	ldd	r13, Z+2	; 0x02
    3a54:	e3 80       	ldd	r14, Z+3	; 0x03
    3a56:	f4 80       	ldd	r15, Z+4	; 0x04
    3a58:	eb 01       	movw	r28, r22
    3a5a:	08 81       	ld	r16, Y
    3a5c:	19 81       	ldd	r17, Y+1	; 0x01
    3a5e:	2a 81       	ldd	r18, Y+2	; 0x02
    3a60:	3b 81       	ldd	r19, Y+3	; 0x03
    3a62:	8c 19       	sub	r24, r12
    3a64:	9d 09       	sbc	r25, r13
    3a66:	ae 09       	sbc	r26, r14
    3a68:	bf 09       	sbc	r27, r15
    3a6a:	80 17       	cp	r24, r16
    3a6c:	91 07       	cpc	r25, r17
    3a6e:	a2 07       	cpc	r26, r18
    3a70:	b3 07       	cpc	r27, r19
    3a72:	e8 f4       	brcc	.+58     	; 0x3aae <xTaskCheckForTimeOut+0xba>
    3a74:	cf 01       	movw	r24, r30
    3a76:	80 90 29 41 	lds	r8, 0x4129	; 0x804129 <xTickCount>
    3a7a:	90 90 2a 41 	lds	r9, 0x412A	; 0x80412a <xTickCount+0x1>
    3a7e:	a0 90 2b 41 	lds	r10, 0x412B	; 0x80412b <xTickCount+0x2>
    3a82:	b0 90 2c 41 	lds	r11, 0x412C	; 0x80412c <xTickCount+0x3>
    3a86:	b5 01       	movw	r22, r10
    3a88:	a4 01       	movw	r20, r8
    3a8a:	4c 19       	sub	r20, r12
    3a8c:	5d 09       	sbc	r21, r13
    3a8e:	6e 09       	sbc	r22, r14
    3a90:	7f 09       	sbc	r23, r15
    3a92:	04 1b       	sub	r16, r20
    3a94:	15 0b       	sbc	r17, r21
    3a96:	26 0b       	sbc	r18, r22
    3a98:	37 0b       	sbc	r19, r23
    3a9a:	08 83       	st	Y, r16
    3a9c:	19 83       	std	Y+1, r17	; 0x01
    3a9e:	2a 83       	std	Y+2, r18	; 0x02
    3aa0:	3b 83       	std	Y+3, r19	; 0x03
    3aa2:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <vTaskSetTimeOutState>
    3aa6:	80 e0       	ldi	r24, 0x00	; 0
    3aa8:	03 c0       	rjmp	.+6      	; 0x3ab0 <xTaskCheckForTimeOut+0xbc>
    3aaa:	81 e0       	ldi	r24, 0x01	; 1
    3aac:	01 c0       	rjmp	.+2      	; 0x3ab0 <xTaskCheckForTimeOut+0xbc>
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	0f 90       	pop	r0
    3ab2:	0f be       	out	0x3f, r0	; 63
    3ab4:	df 91       	pop	r29
    3ab6:	cf 91       	pop	r28
    3ab8:	1f 91       	pop	r17
    3aba:	0f 91       	pop	r16
    3abc:	ff 90       	pop	r15
    3abe:	ef 90       	pop	r14
    3ac0:	df 90       	pop	r13
    3ac2:	cf 90       	pop	r12
    3ac4:	bf 90       	pop	r11
    3ac6:	af 90       	pop	r10
    3ac8:	9f 90       	pop	r9
    3aca:	8f 90       	pop	r8
    3acc:	08 95       	ret

00003ace <vTaskMissedYield>:
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	80 93 23 41 	sts	0x4123, r24	; 0x804123 <xMissedYield>
    3ad4:	08 95       	ret

00003ad6 <uxTaskGetStackHighWaterMark>:
    3ad6:	00 97       	sbiw	r24, 0x00	; 0
    3ad8:	21 f4       	brne	.+8      	; 0x3ae2 <uxTaskGetStackHighWaterMark+0xc>
    3ada:	80 91 81 41 	lds	r24, 0x4181	; 0x804181 <pxCurrentTCB>
    3ade:	90 91 82 41 	lds	r25, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	5b 96       	adiw	r26, 0x1b	; 27
    3ae6:	ed 91       	ld	r30, X+
    3ae8:	fc 91       	ld	r31, X
    3aea:	5c 97       	sbiw	r26, 0x1c	; 28
    3aec:	80 81       	ld	r24, Z
    3aee:	81 31       	cpi	r24, 0x11	; 17
    3af0:	41 f4       	brne	.+16     	; 0x3b02 <uxTaskGetStackHighWaterMark+0x2c>
    3af2:	31 96       	adiw	r30, 0x01	; 1
    3af4:	80 e0       	ldi	r24, 0x00	; 0
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	01 96       	adiw	r24, 0x01	; 1
    3afa:	21 91       	ld	r18, Z+
    3afc:	21 31       	cpi	r18, 0x11	; 17
    3afe:	e1 f3       	breq	.-8      	; 0x3af8 <uxTaskGetStackHighWaterMark+0x22>
    3b00:	08 95       	ret
    3b02:	80 e0       	ldi	r24, 0x00	; 0
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	08 95       	ret

00003b08 <xTaskGetCurrentTaskHandle>:
    3b08:	80 91 81 41 	lds	r24, 0x4181	; 0x804181 <pxCurrentTCB>
    3b0c:	90 91 82 41 	lds	r25, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    3b10:	08 95       	ret

00003b12 <vTaskPriorityInherit>:
    3b12:	0f 93       	push	r16
    3b14:	1f 93       	push	r17
    3b16:	cf 93       	push	r28
    3b18:	df 93       	push	r29
    3b1a:	fc 01       	movw	r30, r24
    3b1c:	22 8d       	ldd	r18, Z+26	; 0x1a
    3b1e:	a0 91 81 41 	lds	r26, 0x4181	; 0x804181 <pxCurrentTCB>
    3b22:	b0 91 82 41 	lds	r27, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    3b26:	5a 96       	adiw	r26, 0x1a	; 26
    3b28:	8c 91       	ld	r24, X
    3b2a:	28 17       	cp	r18, r24
    3b2c:	08 f0       	brcs	.+2      	; 0x3b30 <vTaskPriorityInherit+0x1e>
    3b2e:	41 c0       	rjmp	.+130    	; 0x3bb2 <vTaskPriorityInherit+0xa0>
    3b30:	a0 91 81 41 	lds	r26, 0x4181	; 0x804181 <pxCurrentTCB>
    3b34:	b0 91 82 41 	lds	r27, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    3b38:	5a 96       	adiw	r26, 0x1a	; 26
    3b3a:	3c 91       	ld	r19, X
    3b3c:	84 e0       	ldi	r24, 0x04	; 4
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	a0 e0       	ldi	r26, 0x00	; 0
    3b42:	b0 e0       	ldi	r27, 0x00	; 0
    3b44:	83 1b       	sub	r24, r19
    3b46:	91 09       	sbc	r25, r1
    3b48:	a1 09       	sbc	r26, r1
    3b4a:	b1 09       	sbc	r27, r1
    3b4c:	86 87       	std	Z+14, r24	; 0x0e
    3b4e:	97 87       	std	Z+15, r25	; 0x0f
    3b50:	a0 8b       	std	Z+16, r26	; 0x10
    3b52:	b1 8b       	std	Z+17, r27	; 0x11
    3b54:	8b e0       	ldi	r24, 0x0B	; 11
    3b56:	28 9f       	mul	r18, r24
    3b58:	90 01       	movw	r18, r0
    3b5a:	11 24       	eor	r1, r1
    3b5c:	2b 5a       	subi	r18, 0xAB	; 171
    3b5e:	3e 4b       	sbci	r19, 0xBE	; 190
    3b60:	84 85       	ldd	r24, Z+12	; 0x0c
    3b62:	95 85       	ldd	r25, Z+13	; 0x0d
    3b64:	82 17       	cp	r24, r18
    3b66:	93 07       	cpc	r25, r19
    3b68:	e9 f4       	brne	.+58     	; 0x3ba4 <vTaskPriorityInherit+0x92>
    3b6a:	8f 01       	movw	r16, r30
    3b6c:	ef 01       	movw	r28, r30
    3b6e:	22 96       	adiw	r28, 0x02	; 2
    3b70:	ce 01       	movw	r24, r28
    3b72:	0e 94 4b 14 	call	0x2896	; 0x2896 <vListRemove>
    3b76:	e0 91 81 41 	lds	r30, 0x4181	; 0x804181 <pxCurrentTCB>
    3b7a:	f0 91 82 41 	lds	r31, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    3b7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b80:	f8 01       	movw	r30, r16
    3b82:	82 8f       	std	Z+26, r24	; 0x1a
    3b84:	90 91 27 41 	lds	r25, 0x4127	; 0x804127 <uxTopReadyPriority>
    3b88:	98 17       	cp	r25, r24
    3b8a:	10 f4       	brcc	.+4      	; 0x3b90 <vTaskPriorityInherit+0x7e>
    3b8c:	80 93 27 41 	sts	0x4127, r24	; 0x804127 <uxTopReadyPriority>
    3b90:	fb e0       	ldi	r31, 0x0B	; 11
    3b92:	8f 9f       	mul	r24, r31
    3b94:	c0 01       	movw	r24, r0
    3b96:	11 24       	eor	r1, r1
    3b98:	be 01       	movw	r22, r28
    3b9a:	8b 5a       	subi	r24, 0xAB	; 171
    3b9c:	9e 4b       	sbci	r25, 0xBE	; 190
    3b9e:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <vListInsertEnd>
    3ba2:	07 c0       	rjmp	.+14     	; 0x3bb2 <vTaskPriorityInherit+0xa0>
    3ba4:	a0 91 81 41 	lds	r26, 0x4181	; 0x804181 <pxCurrentTCB>
    3ba8:	b0 91 82 41 	lds	r27, 0x4182	; 0x804182 <pxCurrentTCB+0x1>
    3bac:	5a 96       	adiw	r26, 0x1a	; 26
    3bae:	8c 91       	ld	r24, X
    3bb0:	82 8f       	std	Z+26, r24	; 0x1a
    3bb2:	df 91       	pop	r29
    3bb4:	cf 91       	pop	r28
    3bb6:	1f 91       	pop	r17
    3bb8:	0f 91       	pop	r16
    3bba:	08 95       	ret

00003bbc <vTaskPriorityDisinherit>:
    3bbc:	0f 93       	push	r16
    3bbe:	1f 93       	push	r17
    3bc0:	cf 93       	push	r28
    3bc2:	df 93       	push	r29
    3bc4:	00 97       	sbiw	r24, 0x00	; 0
    3bc6:	49 f1       	breq	.+82     	; 0x3c1a <vTaskPriorityDisinherit+0x5e>
    3bc8:	fc 01       	movw	r30, r24
    3bca:	32 8d       	ldd	r19, Z+26	; 0x1a
    3bcc:	27 a1       	ldd	r18, Z+39	; 0x27
    3bce:	32 17       	cp	r19, r18
    3bd0:	21 f1       	breq	.+72     	; 0x3c1a <vTaskPriorityDisinherit+0x5e>
    3bd2:	ec 01       	movw	r28, r24
    3bd4:	8c 01       	movw	r16, r24
    3bd6:	0e 5f       	subi	r16, 0xFE	; 254
    3bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bda:	c8 01       	movw	r24, r16
    3bdc:	0e 94 4b 14 	call	0x2896	; 0x2896 <vListRemove>
    3be0:	8f a1       	ldd	r24, Y+39	; 0x27
    3be2:	8a 8f       	std	Y+26, r24	; 0x1a
    3be4:	44 e0       	ldi	r20, 0x04	; 4
    3be6:	50 e0       	ldi	r21, 0x00	; 0
    3be8:	60 e0       	ldi	r22, 0x00	; 0
    3bea:	70 e0       	ldi	r23, 0x00	; 0
    3bec:	48 1b       	sub	r20, r24
    3bee:	51 09       	sbc	r21, r1
    3bf0:	61 09       	sbc	r22, r1
    3bf2:	71 09       	sbc	r23, r1
    3bf4:	4e 87       	std	Y+14, r20	; 0x0e
    3bf6:	5f 87       	std	Y+15, r21	; 0x0f
    3bf8:	68 8b       	std	Y+16, r22	; 0x10
    3bfa:	79 8b       	std	Y+17, r23	; 0x11
    3bfc:	90 91 27 41 	lds	r25, 0x4127	; 0x804127 <uxTopReadyPriority>
    3c00:	98 17       	cp	r25, r24
    3c02:	10 f4       	brcc	.+4      	; 0x3c08 <vTaskPriorityDisinherit+0x4c>
    3c04:	80 93 27 41 	sts	0x4127, r24	; 0x804127 <uxTopReadyPriority>
    3c08:	fb e0       	ldi	r31, 0x0B	; 11
    3c0a:	8f 9f       	mul	r24, r31
    3c0c:	c0 01       	movw	r24, r0
    3c0e:	11 24       	eor	r1, r1
    3c10:	b8 01       	movw	r22, r16
    3c12:	8b 5a       	subi	r24, 0xAB	; 171
    3c14:	9e 4b       	sbci	r25, 0xBE	; 190
    3c16:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <vListInsertEnd>
    3c1a:	df 91       	pop	r29
    3c1c:	cf 91       	pop	r28
    3c1e:	1f 91       	pop	r17
    3c20:	0f 91       	pop	r16
    3c22:	08 95       	ret

00003c24 <_ZN8frt_task22_call_users_run_methodEPS_>:
    3c24:	ec 01       	movw	r28, r24
    3c26:	e8 81       	ld	r30, Y
    3c28:	f9 81       	ldd	r31, Y+1	; 0x01
    3c2a:	01 90       	ld	r0, Z+
    3c2c:	f0 81       	ld	r31, Z
    3c2e:	e0 2d       	mov	r30, r0
    3c30:	19 95       	eicall
    3c32:	1a 82       	std	Y+2, r1	; 0x02
    3c34:	1b 82       	std	Y+3, r1	; 0x03
    3c36:	6f ef       	ldi	r22, 0xFF	; 255
    3c38:	7f ef       	ldi	r23, 0xFF	; 255
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <vTaskDelay>
    3c40:	fa cf       	rjmp	.-12     	; 0x3c36 <_ZN8frt_task22_call_users_run_methodEPS_+0x12>

00003c42 <_ZN8frt_task13transition_toEh>:
    3c42:	fc 01       	movw	r30, r24
    3c44:	64 87       	std	Z+12, r22	; 0x0c
    3c46:	65 87       	std	Z+13, r22	; 0x0d
    3c48:	08 95       	ret

00003c4a <_ZN8frt_taskC1EPKchjP8emstream>:
    3c4a:	4f 92       	push	r4
    3c4c:	5f 92       	push	r5
    3c4e:	6f 92       	push	r6
    3c50:	7f 92       	push	r7
    3c52:	8f 92       	push	r8
    3c54:	9f 92       	push	r9
    3c56:	af 92       	push	r10
    3c58:	bf 92       	push	r11
    3c5a:	cf 92       	push	r12
    3c5c:	df 92       	push	r13
    3c5e:	ef 92       	push	r14
    3c60:	ff 92       	push	r15
    3c62:	0f 93       	push	r16
    3c64:	1f 93       	push	r17
    3c66:	cf 93       	push	r28
    3c68:	df 93       	push	r29
    3c6a:	cd b7       	in	r28, 0x3d	; 61
    3c6c:	de b7       	in	r29, 0x3e	; 62
    3c6e:	2a 97       	sbiw	r28, 0x0a	; 10
    3c70:	cd bf       	out	0x3d, r28	; 61
    3c72:	de bf       	out	0x3e, r29	; 62
    3c74:	4c 01       	movw	r8, r24
    3c76:	29 01       	movw	r4, r18
    3c78:	38 01       	movw	r6, r16
    3c7a:	82 e6       	ldi	r24, 0x62	; 98
    3c7c:	90 e2       	ldi	r25, 0x20	; 32
    3c7e:	f4 01       	movw	r30, r8
    3c80:	80 83       	st	Z, r24
    3c82:	91 83       	std	Z+1, r25	; 0x01
    3c84:	fb 01       	movw	r30, r22
    3c86:	80 81       	ld	r24, Z
    3c88:	88 23       	and	r24, r24
    3c8a:	69 f0       	breq	.+26     	; 0x3ca6 <_ZN8frt_taskC1EPKchjP8emstream+0x5c>
    3c8c:	de 01       	movw	r26, r28
    3c8e:	11 96       	adiw	r26, 0x01	; 1
    3c90:	31 96       	adiw	r30, 0x01	; 1
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	02 c0       	rjmp	.+4      	; 0x3c9a <_ZN8frt_taskC1EPKchjP8emstream+0x50>
    3c96:	99 30       	cpi	r25, 0x09	; 9
    3c98:	39 f0       	breq	.+14     	; 0x3ca8 <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
    3c9a:	9f 5f       	subi	r25, 0xFF	; 255
    3c9c:	8d 93       	st	X+, r24
    3c9e:	81 91       	ld	r24, Z+
    3ca0:	81 11       	cpse	r24, r1
    3ca2:	f9 cf       	rjmp	.-14     	; 0x3c96 <_ZN8frt_taskC1EPKchjP8emstream+0x4c>
    3ca4:	01 c0       	rjmp	.+2      	; 0x3ca8 <_ZN8frt_taskC1EPKchjP8emstream+0x5e>
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	e1 e0       	ldi	r30, 0x01	; 1
    3caa:	f0 e0       	ldi	r31, 0x00	; 0
    3cac:	ec 0f       	add	r30, r28
    3cae:	fd 1f       	adc	r31, r29
    3cb0:	e9 0f       	add	r30, r25
    3cb2:	f1 1d       	adc	r31, r1
    3cb4:	10 82       	st	Z, r1
    3cb6:	74 01       	movw	r14, r8
    3cb8:	f2 e0       	ldi	r31, 0x02	; 2
    3cba:	ef 0e       	add	r14, r31
    3cbc:	f1 1c       	adc	r15, r1
    3cbe:	a1 2c       	mov	r10, r1
    3cc0:	b1 2c       	mov	r11, r1
    3cc2:	c1 2c       	mov	r12, r1
    3cc4:	d1 2c       	mov	r13, r1
    3cc6:	04 2f       	mov	r16, r20
    3cc8:	94 01       	movw	r18, r8
    3cca:	a2 01       	movw	r20, r4
    3ccc:	be 01       	movw	r22, r28
    3cce:	6f 5f       	subi	r22, 0xFF	; 255
    3cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    3cd2:	86 e7       	ldi	r24, 0x76	; 118
    3cd4:	96 e0       	ldi	r25, 0x06	; 6
    3cd6:	0e 94 21 19 	call	0x3242	; 0x3242 <xTaskGenericCreate>
    3cda:	f4 01       	movw	r30, r8
    3cdc:	66 82       	std	Z+6, r6	; 0x06
    3cde:	77 82       	std	Z+7, r7	; 0x07
    3ce0:	40 86       	std	Z+8, r4	; 0x08
    3ce2:	51 86       	std	Z+9, r5	; 0x09
    3ce4:	20 91 83 41 	lds	r18, 0x4183	; 0x804183 <last_created_task_pointer>
    3ce8:	30 91 84 41 	lds	r19, 0x4184	; 0x804184 <last_created_task_pointer+0x1>
    3cec:	24 83       	std	Z+4, r18	; 0x04
    3cee:	35 83       	std	Z+5, r19	; 0x05
    3cf0:	80 92 83 41 	sts	0x4183, r8	; 0x804183 <last_created_task_pointer>
    3cf4:	90 92 84 41 	sts	0x4184, r9	; 0x804184 <last_created_task_pointer+0x1>
    3cf8:	14 86       	std	Z+12, r1	; 0x0c
    3cfa:	15 86       	std	Z+13, r1	; 0x0d
    3cfc:	40 90 a9 41 	lds	r4, 0x41A9	; 0x8041a9 <portStackTopForTask>
    3d00:	50 90 aa 41 	lds	r5, 0x41AA	; 0x8041aa <portStackTopForTask+0x1>
    3d04:	ff ef       	ldi	r31, 0xFF	; 255
    3d06:	4f 1a       	sub	r4, r31
    3d08:	5f 0a       	sbc	r5, r31
    3d0a:	40 92 a9 41 	sts	0x41A9, r4	; 0x8041a9 <portStackTopForTask>
    3d0e:	50 92 aa 41 	sts	0x41AA, r5	; 0x8041aa <portStackTopForTask+0x1>
    3d12:	f4 01       	movw	r30, r8
    3d14:	42 86       	std	Z+10, r4	; 0x0a
    3d16:	53 86       	std	Z+11, r5	; 0x0b
    3d18:	16 86       	std	Z+14, r1	; 0x0e
    3d1a:	17 86       	std	Z+15, r1	; 0x0f
    3d1c:	10 8a       	std	Z+16, r1	; 0x10
    3d1e:	11 8a       	std	Z+17, r1	; 0x11
    3d20:	61 14       	cp	r6, r1
    3d22:	71 04       	cpc	r7, r1
    3d24:	09 f4       	brne	.+2      	; 0x3d28 <_ZN8frt_taskC1EPKchjP8emstream+0xde>
    3d26:	44 c0       	rjmp	.+136    	; 0x3db0 <_ZN8frt_taskC1EPKchjP8emstream+0x166>
    3d28:	81 30       	cpi	r24, 0x01	; 1
    3d2a:	79 f5       	brne	.+94     	; 0x3d8a <_ZN8frt_taskC1EPKchjP8emstream+0x140>
    3d2c:	6a e0       	ldi	r22, 0x0A	; 10
    3d2e:	c3 01       	movw	r24, r6
    3d30:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    3d34:	7c 01       	movw	r14, r24
    3d36:	63 e7       	ldi	r22, 0x73	; 115
    3d38:	7c e0       	ldi	r23, 0x0C	; 12
    3d3a:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    3d3e:	be 01       	movw	r22, r28
    3d40:	6f 5f       	subi	r22, 0xFF	; 255
    3d42:	7f 4f       	sbci	r23, 0xFF	; 255
    3d44:	c7 01       	movw	r24, r14
    3d46:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    3d4a:	6a e0       	ldi	r22, 0x0A	; 10
    3d4c:	c7 01       	movw	r24, r14
    3d4e:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    3d52:	7c 01       	movw	r14, r24
    3d54:	6a e6       	ldi	r22, 0x6A	; 106
    3d56:	7c e0       	ldi	r23, 0x0C	; 12
    3d58:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    3d5c:	6a e0       	ldi	r22, 0x0A	; 10
    3d5e:	c7 01       	movw	r24, r14
    3d60:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    3d64:	7c 01       	movw	r14, r24
    3d66:	6c e5       	ldi	r22, 0x5C	; 92
    3d68:	7c e0       	ldi	r23, 0x0C	; 12
    3d6a:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    3d6e:	63 e0       	ldi	r22, 0x03	; 3
    3d70:	c7 01       	movw	r24, r14
    3d72:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    3d76:	b2 01       	movw	r22, r4
    3d78:	0e 94 31 21 	call	0x4262	; 0x4262 <_ZN8emstreamlsEj>
    3d7c:	62 e0       	ldi	r22, 0x02	; 2
    3d7e:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    3d82:	66 e0       	ldi	r22, 0x06	; 6
    3d84:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    3d88:	13 c0       	rjmp	.+38     	; 0x3db0 <_ZN8frt_taskC1EPKchjP8emstream+0x166>
    3d8a:	6a e0       	ldi	r22, 0x0A	; 10
    3d8c:	c3 01       	movw	r24, r6
    3d8e:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    3d92:	4c 01       	movw	r8, r24
    3d94:	67 e4       	ldi	r22, 0x47	; 71
    3d96:	7c e0       	ldi	r23, 0x0C	; 12
    3d98:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    3d9c:	be 01       	movw	r22, r28
    3d9e:	6f 5f       	subi	r22, 0xFF	; 255
    3da0:	7f 4f       	sbci	r23, 0xFF	; 255
    3da2:	c4 01       	movw	r24, r8
    3da4:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    3da8:	66 e0       	ldi	r22, 0x06	; 6
    3daa:	c4 01       	movw	r24, r8
    3dac:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    3db0:	2a 96       	adiw	r28, 0x0a	; 10
    3db2:	cd bf       	out	0x3d, r28	; 61
    3db4:	de bf       	out	0x3e, r29	; 62
    3db6:	df 91       	pop	r29
    3db8:	cf 91       	pop	r28
    3dba:	1f 91       	pop	r17
    3dbc:	0f 91       	pop	r16
    3dbe:	ff 90       	pop	r15
    3dc0:	ef 90       	pop	r14
    3dc2:	df 90       	pop	r13
    3dc4:	cf 90       	pop	r12
    3dc6:	bf 90       	pop	r11
    3dc8:	af 90       	pop	r10
    3dca:	9f 90       	pop	r9
    3dcc:	8f 90       	pop	r8
    3dce:	7f 90       	pop	r7
    3dd0:	6f 90       	pop	r6
    3dd2:	5f 90       	pop	r5
    3dd4:	4f 90       	pop	r4
    3dd6:	08 95       	ret

00003dd8 <_ZN8frt_task12print_statusER8emstream>:
    3dd8:	8f 92       	push	r8
    3dda:	9f 92       	push	r9
    3ddc:	af 92       	push	r10
    3dde:	bf 92       	push	r11
    3de0:	cf 92       	push	r12
    3de2:	df 92       	push	r13
    3de4:	ef 92       	push	r14
    3de6:	ff 92       	push	r15
    3de8:	0f 93       	push	r16
    3dea:	1f 93       	push	r17
    3dec:	cf 93       	push	r28
    3dee:	df 93       	push	r29
    3df0:	ec 01       	movw	r28, r24
    3df2:	8b 01       	movw	r16, r22
    3df4:	8a 81       	ldd	r24, Y+2	; 0x02
    3df6:	9b 81       	ldd	r25, Y+3	; 0x03
    3df8:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <pcTaskGetTaskName>
    3dfc:	bc 01       	movw	r22, r24
    3dfe:	c8 01       	movw	r24, r16
    3e00:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    3e04:	d8 01       	movw	r26, r16
    3e06:	ed 91       	ld	r30, X+
    3e08:	fc 91       	ld	r31, X
    3e0a:	02 80       	ldd	r0, Z+2	; 0x02
    3e0c:	f3 81       	ldd	r31, Z+3	; 0x03
    3e0e:	e0 2d       	mov	r30, r0
    3e10:	69 e0       	ldi	r22, 0x09	; 9
    3e12:	c8 01       	movw	r24, r16
    3e14:	19 95       	eicall
    3e16:	8a 81       	ldd	r24, Y+2	; 0x02
    3e18:	9b 81       	ldd	r25, Y+3	; 0x03
    3e1a:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <pcTaskGetTaskName>
    3e1e:	fc 01       	movw	r30, r24
    3e20:	01 90       	ld	r0, Z+
    3e22:	00 20       	and	r0, r0
    3e24:	e9 f7       	brne	.-6      	; 0x3e20 <_ZN8frt_task12print_statusER8emstream+0x48>
    3e26:	31 97       	sbiw	r30, 0x01	; 1
    3e28:	e8 1b       	sub	r30, r24
    3e2a:	f9 0b       	sbc	r31, r25
    3e2c:	38 97       	sbiw	r30, 0x08	; 8
    3e2e:	48 f4       	brcc	.+18     	; 0x3e42 <_ZN8frt_task12print_statusER8emstream+0x6a>
    3e30:	d8 01       	movw	r26, r16
    3e32:	ed 91       	ld	r30, X+
    3e34:	fc 91       	ld	r31, X
    3e36:	02 80       	ldd	r0, Z+2	; 0x02
    3e38:	f3 81       	ldd	r31, Z+3	; 0x03
    3e3a:	e0 2d       	mov	r30, r0
    3e3c:	69 e0       	ldi	r22, 0x09	; 9
    3e3e:	c8 01       	movw	r24, r16
    3e40:	19 95       	eicall
    3e42:	ce 84       	ldd	r12, Y+14	; 0x0e
    3e44:	df 84       	ldd	r13, Y+15	; 0x0f
    3e46:	e8 88       	ldd	r14, Y+16	; 0x10
    3e48:	f9 88       	ldd	r15, Y+17	; 0x11
    3e4a:	a8 84       	ldd	r10, Y+8	; 0x08
    3e4c:	b9 84       	ldd	r11, Y+9	; 0x09
    3e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e50:	9b 81       	ldd	r25, Y+3	; 0x03
    3e52:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <uxTaskGetStackHighWaterMark>
    3e56:	98 2e       	mov	r9, r24
    3e58:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e5c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e5e:	0e 94 23 1a 	call	0x3446	; 0x3446 <uxTaskPriorityGet>
    3e62:	68 2f       	mov	r22, r24
    3e64:	c8 01       	movw	r24, r16
    3e66:	0e 94 a7 21 	call	0x434e	; 0x434e <_ZN8emstreamlsEh>
    3e6a:	6a e0       	ldi	r22, 0x0A	; 10
    3e6c:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    3e70:	ec 01       	movw	r28, r24
    3e72:	69 ee       	ldi	r22, 0xE9	; 233
    3e74:	7c e0       	ldi	r23, 0x0C	; 12
    3e76:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    3e7a:	68 2d       	mov	r22, r8
    3e7c:	ce 01       	movw	r24, r28
    3e7e:	0e 94 a7 21 	call	0x434e	; 0x434e <_ZN8emstreamlsEh>
    3e82:	6a e0       	ldi	r22, 0x0A	; 10
    3e84:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    3e88:	ec 01       	movw	r28, r24
    3e8a:	67 ee       	ldi	r22, 0xE7	; 231
    3e8c:	7c e0       	ldi	r23, 0x0C	; 12
    3e8e:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    3e92:	69 2d       	mov	r22, r9
    3e94:	ce 01       	movw	r24, r28
    3e96:	0e 94 a7 21 	call	0x434e	; 0x434e <_ZN8emstreamlsEh>
    3e9a:	6a e0       	ldi	r22, 0x0A	; 10
    3e9c:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    3ea0:	ec 01       	movw	r28, r24
    3ea2:	65 ee       	ldi	r22, 0xE5	; 229
    3ea4:	7c e0       	ldi	r23, 0x0C	; 12
    3ea6:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    3eaa:	b5 01       	movw	r22, r10
    3eac:	ce 01       	movw	r24, r28
    3eae:	0e 94 31 21 	call	0x4262	; 0x4262 <_ZN8emstreamlsEj>
    3eb2:	6a e0       	ldi	r22, 0x0A	; 10
    3eb4:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    3eb8:	ec 01       	movw	r28, r24
    3eba:	63 ee       	ldi	r22, 0xE3	; 227
    3ebc:	7c e0       	ldi	r23, 0x0C	; 12
    3ebe:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    3ec2:	6a e0       	ldi	r22, 0x0A	; 10
    3ec4:	ce 01       	movw	r24, r28
    3ec6:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <_ZN8emstreamlsE15ser_manipulator>
    3eca:	ec 01       	movw	r28, r24
    3ecc:	61 ee       	ldi	r22, 0xE1	; 225
    3ece:	7c e0       	ldi	r23, 0x0C	; 12
    3ed0:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    3ed4:	b7 01       	movw	r22, r14
    3ed6:	a6 01       	movw	r20, r12
    3ed8:	ce 01       	movw	r24, r28
    3eda:	0e 94 65 21 	call	0x42ca	; 0x42ca <_ZN8emstreamlsEm>
    3ede:	df 91       	pop	r29
    3ee0:	cf 91       	pop	r28
    3ee2:	1f 91       	pop	r17
    3ee4:	0f 91       	pop	r16
    3ee6:	ff 90       	pop	r15
    3ee8:	ef 90       	pop	r14
    3eea:	df 90       	pop	r13
    3eec:	cf 90       	pop	r12
    3eee:	bf 90       	pop	r11
    3ef0:	af 90       	pop	r10
    3ef2:	9f 90       	pop	r9
    3ef4:	8f 90       	pop	r8
    3ef6:	08 95       	ret

00003ef8 <_ZN14frt_text_queue7getcharEv>:
    3ef8:	0f 93       	push	r16
    3efa:	cf 93       	push	r28
    3efc:	df 93       	push	r29
    3efe:	1f 92       	push	r1
    3f00:	cd b7       	in	r28, 0x3d	; 61
    3f02:	de b7       	in	r29, 0x3e	; 62
    3f04:	00 e0       	ldi	r16, 0x00	; 0
    3f06:	2f ef       	ldi	r18, 0xFF	; 255
    3f08:	3f ef       	ldi	r19, 0xFF	; 255
    3f0a:	a9 01       	movw	r20, r18
    3f0c:	be 01       	movw	r22, r28
    3f0e:	6f 5f       	subi	r22, 0xFF	; 255
    3f10:	7f 4f       	sbci	r23, 0xFF	; 255
    3f12:	fc 01       	movw	r30, r24
    3f14:	80 85       	ldd	r24, Z+8	; 0x08
    3f16:	91 85       	ldd	r25, Z+9	; 0x09
    3f18:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <xQueueGenericReceive>
    3f1c:	81 30       	cpi	r24, 0x01	; 1
    3f1e:	19 f4       	brne	.+6      	; 0x3f26 <_ZN14frt_text_queue7getcharEv+0x2e>
    3f20:	89 81       	ldd	r24, Y+1	; 0x01
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	02 c0       	rjmp	.+4      	; 0x3f2a <_ZN14frt_text_queue7getcharEv+0x32>
    3f26:	8f ef       	ldi	r24, 0xFF	; 255
    3f28:	9f ef       	ldi	r25, 0xFF	; 255
    3f2a:	0f 90       	pop	r0
    3f2c:	df 91       	pop	r29
    3f2e:	cf 91       	pop	r28
    3f30:	0f 91       	pop	r16
    3f32:	08 95       	ret

00003f34 <_ZN14frt_text_queue14check_for_charEv>:
    3f34:	fc 01       	movw	r30, r24
    3f36:	80 85       	ldd	r24, Z+8	; 0x08
    3f38:	91 85       	ldd	r25, Z+9	; 0x09
    3f3a:	0e 94 c0 18 	call	0x3180	; 0x3180 <uxQueueMessagesWaiting>
    3f3e:	91 e0       	ldi	r25, 0x01	; 1
    3f40:	81 11       	cpse	r24, r1
    3f42:	01 c0       	rjmp	.+2      	; 0x3f46 <_ZN14frt_text_queue14check_for_charEv+0x12>
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	89 2f       	mov	r24, r25
    3f48:	08 95       	ret

00003f4a <_ZN14frt_text_queue7putcharEc>:
    3f4a:	0f 93       	push	r16
    3f4c:	cf 93       	push	r28
    3f4e:	df 93       	push	r29
    3f50:	1f 92       	push	r1
    3f52:	cd b7       	in	r28, 0x3d	; 61
    3f54:	de b7       	in	r29, 0x3e	; 62
    3f56:	69 83       	std	Y+1, r22	; 0x01
    3f58:	fc 01       	movw	r30, r24
    3f5a:	22 85       	ldd	r18, Z+10	; 0x0a
    3f5c:	33 85       	ldd	r19, Z+11	; 0x0b
    3f5e:	44 85       	ldd	r20, Z+12	; 0x0c
    3f60:	55 85       	ldd	r21, Z+13	; 0x0d
    3f62:	00 e0       	ldi	r16, 0x00	; 0
    3f64:	be 01       	movw	r22, r28
    3f66:	6f 5f       	subi	r22, 0xFF	; 255
    3f68:	7f 4f       	sbci	r23, 0xFF	; 255
    3f6a:	80 85       	ldd	r24, Z+8	; 0x08
    3f6c:	91 85       	ldd	r25, Z+9	; 0x09
    3f6e:	0e 94 08 17 	call	0x2e10	; 0x2e10 <xQueueGenericSend>
    3f72:	91 e0       	ldi	r25, 0x01	; 1
    3f74:	81 11       	cpse	r24, r1
    3f76:	01 c0       	rjmp	.+2      	; 0x3f7a <_ZN14frt_text_queue7putcharEc+0x30>
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	89 2f       	mov	r24, r25
    3f7c:	0f 90       	pop	r0
    3f7e:	df 91       	pop	r29
    3f80:	cf 91       	pop	r28
    3f82:	0f 91       	pop	r16
    3f84:	08 95       	ret

00003f86 <_ZN14frt_text_queueC1EjP8emstreamm>:
    3f86:	8f 92       	push	r8
    3f88:	9f 92       	push	r9
    3f8a:	bf 92       	push	r11
    3f8c:	cf 92       	push	r12
    3f8e:	df 92       	push	r13
    3f90:	ef 92       	push	r14
    3f92:	ff 92       	push	r15
    3f94:	0f 93       	push	r16
    3f96:	1f 93       	push	r17
    3f98:	cf 93       	push	r28
    3f9a:	df 93       	push	r29
    3f9c:	ec 01       	movw	r28, r24
    3f9e:	b6 2e       	mov	r11, r22
    3fa0:	4a 01       	movw	r8, r20
    3fa2:	68 01       	movw	r12, r16
    3fa4:	79 01       	movw	r14, r18
    3fa6:	0e 94 a5 20 	call	0x414a	; 0x414a <_ZN8emstreamC1Ev>
    3faa:	8a e6       	ldi	r24, 0x6A	; 106
    3fac:	90 e2       	ldi	r25, 0x20	; 32
    3fae:	88 83       	st	Y, r24
    3fb0:	99 83       	std	Y+1, r25	; 0x01
    3fb2:	8e 86       	std	Y+14, r8	; 0x0e
    3fb4:	9f 86       	std	Y+15, r9	; 0x0f
    3fb6:	40 e0       	ldi	r20, 0x00	; 0
    3fb8:	61 e0       	ldi	r22, 0x01	; 1
    3fba:	8b 2d       	mov	r24, r11
    3fbc:	0e 94 da 16 	call	0x2db4	; 0x2db4 <xQueueGenericCreate>
    3fc0:	88 87       	std	Y+8, r24	; 0x08
    3fc2:	99 87       	std	Y+9, r25	; 0x09
    3fc4:	ca 86       	std	Y+10, r12	; 0x0a
    3fc6:	db 86       	std	Y+11, r13	; 0x0b
    3fc8:	ec 86       	std	Y+12, r14	; 0x0c
    3fca:	fd 86       	std	Y+13, r15	; 0x0d
    3fcc:	df 91       	pop	r29
    3fce:	cf 91       	pop	r28
    3fd0:	1f 91       	pop	r17
    3fd2:	0f 91       	pop	r16
    3fd4:	ff 90       	pop	r15
    3fd6:	ef 90       	pop	r14
    3fd8:	df 90       	pop	r13
    3fda:	cf 90       	pop	r12
    3fdc:	bf 90       	pop	r11
    3fde:	9f 90       	pop	r9
    3fe0:	8f 90       	pop	r8
    3fe2:	08 95       	ret

00003fe4 <_Znwj>:
    3fe4:	0e 94 f7 12 	call	0x25ee	; 0x25ee <pvPortMalloc>
    3fe8:	08 95       	ret

00003fea <_Znaj>:
    3fea:	0e 94 f7 12 	call	0x25ee	; 0x25ee <pvPortMalloc>
    3fee:	08 95       	ret

00003ff0 <__cxa_pure_virtual>:
    3ff0:	08 95       	ret

00003ff2 <_ZN7base232C1EjP12USART_struct>:
    3ff2:	cf 93       	push	r28
    3ff4:	df 93       	push	r29
    3ff6:	fc 01       	movw	r30, r24
    3ff8:	da 01       	movw	r26, r20
    3ffa:	40 3a       	cpi	r20, 0xA0	; 160
    3ffc:	68 e0       	ldi	r22, 0x08	; 8
    3ffe:	56 07       	cpc	r21, r22
    4000:	49 f4       	brne	.+18     	; 0x4014 <_ZN7base232C1EjP12USART_struct+0x22>
    4002:	80 e4       	ldi	r24, 0x40	; 64
    4004:	96 e0       	ldi	r25, 0x06	; 6
    4006:	82 83       	std	Z+2, r24	; 0x02
    4008:	93 83       	std	Z+3, r25	; 0x03
    400a:	82 e0       	ldi	r24, 0x02	; 2
    400c:	84 83       	std	Z+4, r24	; 0x04
    400e:	83 e0       	ldi	r24, 0x03	; 3
    4010:	85 83       	std	Z+5, r24	; 0x05
    4012:	3f c0       	rjmp	.+126    	; 0x4092 <_ZN7base232C1EjP12USART_struct+0xa0>
    4014:	40 3b       	cpi	r20, 0xB0	; 176
    4016:	78 e0       	ldi	r23, 0x08	; 8
    4018:	57 07       	cpc	r21, r23
    401a:	49 f4       	brne	.+18     	; 0x402e <_ZN7base232C1EjP12USART_struct+0x3c>
    401c:	80 e4       	ldi	r24, 0x40	; 64
    401e:	96 e0       	ldi	r25, 0x06	; 6
    4020:	82 83       	std	Z+2, r24	; 0x02
    4022:	93 83       	std	Z+3, r25	; 0x03
    4024:	86 e0       	ldi	r24, 0x06	; 6
    4026:	84 83       	std	Z+4, r24	; 0x04
    4028:	87 e0       	ldi	r24, 0x07	; 7
    402a:	85 83       	std	Z+5, r24	; 0x05
    402c:	32 c0       	rjmp	.+100    	; 0x4092 <_ZN7base232C1EjP12USART_struct+0xa0>
    402e:	40 3a       	cpi	r20, 0xA0	; 160
    4030:	89 e0       	ldi	r24, 0x09	; 9
    4032:	58 07       	cpc	r21, r24
    4034:	49 f4       	brne	.+18     	; 0x4048 <_ZN7base232C1EjP12USART_struct+0x56>
    4036:	80 e6       	ldi	r24, 0x60	; 96
    4038:	96 e0       	ldi	r25, 0x06	; 6
    403a:	82 83       	std	Z+2, r24	; 0x02
    403c:	93 83       	std	Z+3, r25	; 0x03
    403e:	82 e0       	ldi	r24, 0x02	; 2
    4040:	84 83       	std	Z+4, r24	; 0x04
    4042:	83 e0       	ldi	r24, 0x03	; 3
    4044:	85 83       	std	Z+5, r24	; 0x05
    4046:	25 c0       	rjmp	.+74     	; 0x4092 <_ZN7base232C1EjP12USART_struct+0xa0>
    4048:	40 3b       	cpi	r20, 0xB0	; 176
    404a:	69 e0       	ldi	r22, 0x09	; 9
    404c:	56 07       	cpc	r21, r22
    404e:	49 f4       	brne	.+18     	; 0x4062 <_ZN7base232C1EjP12USART_struct+0x70>
    4050:	80 e6       	ldi	r24, 0x60	; 96
    4052:	96 e0       	ldi	r25, 0x06	; 6
    4054:	82 83       	std	Z+2, r24	; 0x02
    4056:	93 83       	std	Z+3, r25	; 0x03
    4058:	86 e0       	ldi	r24, 0x06	; 6
    405a:	84 83       	std	Z+4, r24	; 0x04
    405c:	87 e0       	ldi	r24, 0x07	; 7
    405e:	85 83       	std	Z+5, r24	; 0x05
    4060:	18 c0       	rjmp	.+48     	; 0x4092 <_ZN7base232C1EjP12USART_struct+0xa0>
    4062:	40 3a       	cpi	r20, 0xA0	; 160
    4064:	7a e0       	ldi	r23, 0x0A	; 10
    4066:	57 07       	cpc	r21, r23
    4068:	49 f4       	brne	.+18     	; 0x407c <_ZN7base232C1EjP12USART_struct+0x8a>
    406a:	80 e8       	ldi	r24, 0x80	; 128
    406c:	96 e0       	ldi	r25, 0x06	; 6
    406e:	82 83       	std	Z+2, r24	; 0x02
    4070:	93 83       	std	Z+3, r25	; 0x03
    4072:	82 e0       	ldi	r24, 0x02	; 2
    4074:	84 83       	std	Z+4, r24	; 0x04
    4076:	83 e0       	ldi	r24, 0x03	; 3
    4078:	85 83       	std	Z+5, r24	; 0x05
    407a:	0b c0       	rjmp	.+22     	; 0x4092 <_ZN7base232C1EjP12USART_struct+0xa0>
    407c:	40 3a       	cpi	r20, 0xA0	; 160
    407e:	5b 40       	sbci	r21, 0x0B	; 11
    4080:	41 f4       	brne	.+16     	; 0x4092 <_ZN7base232C1EjP12USART_struct+0xa0>
    4082:	80 ea       	ldi	r24, 0xA0	; 160
    4084:	96 e0       	ldi	r25, 0x06	; 6
    4086:	82 83       	std	Z+2, r24	; 0x02
    4088:	93 83       	std	Z+3, r25	; 0x03
    408a:	82 e0       	ldi	r24, 0x02	; 2
    408c:	84 83       	std	Z+4, r24	; 0x04
    408e:	83 e0       	ldi	r24, 0x03	; 3
    4090:	85 83       	std	Z+5, r24	; 0x05
    4092:	a6 83       	std	Z+6, r26	; 0x06
    4094:	b7 83       	std	Z+7, r27	; 0x07
    4096:	cd 01       	movw	r24, r26
    4098:	01 96       	adiw	r24, 0x01	; 1
    409a:	80 87       	std	Z+8, r24	; 0x08
    409c:	91 87       	std	Z+9, r25	; 0x09
    409e:	03 96       	adiw	r24, 0x03	; 3
    40a0:	82 87       	std	Z+10, r24	; 0x0a
    40a2:	93 87       	std	Z+11, r25	; 0x0b
    40a4:	25 81       	ldd	r18, Z+5	; 0x05
    40a6:	c2 81       	ldd	r28, Z+2	; 0x02
    40a8:	d3 81       	ldd	r29, Z+3	; 0x03
    40aa:	4c 81       	ldd	r20, Y+4	; 0x04
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	bc 01       	movw	r22, r24
    40b2:	02 c0       	rjmp	.+4      	; 0x40b8 <_ZN7base232C1EjP12USART_struct+0xc6>
    40b4:	66 0f       	add	r22, r22
    40b6:	77 1f       	adc	r23, r23
    40b8:	2a 95       	dec	r18
    40ba:	e2 f7       	brpl	.-8      	; 0x40b4 <_ZN7base232C1EjP12USART_struct+0xc2>
    40bc:	9b 01       	movw	r18, r22
    40be:	24 2b       	or	r18, r20
    40c0:	2c 83       	std	Y+4, r18	; 0x04
    40c2:	25 81       	ldd	r18, Z+5	; 0x05
    40c4:	c2 81       	ldd	r28, Z+2	; 0x02
    40c6:	d3 81       	ldd	r29, Z+3	; 0x03
    40c8:	48 81       	ld	r20, Y
    40ca:	bc 01       	movw	r22, r24
    40cc:	02 c0       	rjmp	.+4      	; 0x40d2 <_ZN7base232C1EjP12USART_struct+0xe0>
    40ce:	66 0f       	add	r22, r22
    40d0:	77 1f       	adc	r23, r23
    40d2:	2a 95       	dec	r18
    40d4:	e2 f7       	brpl	.-8      	; 0x40ce <_ZN7base232C1EjP12USART_struct+0xdc>
    40d6:	9b 01       	movw	r18, r22
    40d8:	24 2b       	or	r18, r20
    40da:	28 83       	st	Y, r18
    40dc:	34 81       	ldd	r19, Z+4	; 0x04
    40de:	c2 81       	ldd	r28, Z+2	; 0x02
    40e0:	d3 81       	ldd	r29, Z+3	; 0x03
    40e2:	28 81       	ld	r18, Y
    40e4:	02 c0       	rjmp	.+4      	; 0x40ea <_ZN7base232C1EjP12USART_struct+0xf8>
    40e6:	88 0f       	add	r24, r24
    40e8:	99 1f       	adc	r25, r25
    40ea:	3a 95       	dec	r19
    40ec:	e2 f7       	brpl	.-8      	; 0x40e6 <_ZN7base232C1EjP12USART_struct+0xf4>
    40ee:	80 95       	com	r24
    40f0:	90 95       	com	r25
    40f2:	82 23       	and	r24, r18
    40f4:	88 83       	st	Y, r24
    40f6:	80 e1       	ldi	r24, 0x10	; 16
    40f8:	13 96       	adiw	r26, 0x03	; 3
    40fa:	8c 93       	st	X, r24
    40fc:	13 97       	sbiw	r26, 0x03	; 3
    40fe:	83 e0       	ldi	r24, 0x03	; 3
    4100:	15 96       	adiw	r26, 0x05	; 5
    4102:	8c 93       	st	X, r24
    4104:	15 97       	sbiw	r26, 0x05	; 5
    4106:	80 ef       	ldi	r24, 0xF0	; 240
    4108:	17 96       	adiw	r26, 0x07	; 7
    410a:	8c 93       	st	X, r24
    410c:	17 97       	sbiw	r26, 0x07	; 7
    410e:	81 e2       	ldi	r24, 0x21	; 33
    4110:	16 96       	adiw	r26, 0x06	; 6
    4112:	8c 93       	st	X, r24
    4114:	16 97       	sbiw	r26, 0x06	; 6
    4116:	88 e1       	ldi	r24, 0x18	; 24
    4118:	14 96       	adiw	r26, 0x04	; 4
    411a:	8c 93       	st	X, r24
    411c:	80 e8       	ldi	r24, 0x80	; 128
    411e:	85 87       	std	Z+13, r24	; 0x0d
    4120:	80 e4       	ldi	r24, 0x40	; 64
    4122:	86 87       	std	Z+14, r24	; 0x0e
    4124:	80 e2       	ldi	r24, 0x20	; 32
    4126:	84 87       	std	Z+12, r24	; 0x0c
    4128:	06 80       	ldd	r0, Z+6	; 0x06
    412a:	f7 81       	ldd	r31, Z+7	; 0x07
    412c:	e0 2d       	mov	r30, r0
    412e:	80 81       	ld	r24, Z
    4130:	80 81       	ld	r24, Z
    4132:	df 91       	pop	r29
    4134:	cf 91       	pop	r28
    4136:	08 95       	ret

00004138 <_ZN8emstream13ready_to_sendEv>:
    4138:	81 e0       	ldi	r24, 0x01	; 1
    413a:	08 95       	ret

0000413c <_ZN8emstream7getcharEv>:
    413c:	80 e0       	ldi	r24, 0x00	; 0
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	08 95       	ret

00004142 <_ZN8emstream14check_for_charEv>:
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	08 95       	ret

00004146 <_ZN8emstream12transmit_nowEv>:
    4146:	08 95       	ret

00004148 <_ZN8emstream12clear_screenEv>:
    4148:	08 95       	ret

0000414a <_ZN8emstreamC1Ev>:
    414a:	fc 01       	movw	r30, r24
    414c:	8a e7       	ldi	r24, 0x7A	; 122
    414e:	90 e2       	ldi	r25, 0x20	; 32
    4150:	80 83       	st	Z, r24
    4152:	91 83       	std	Z+1, r25	; 0x01
    4154:	8a e0       	ldi	r24, 0x0A	; 10
    4156:	82 83       	std	Z+2, r24	; 0x02
    4158:	13 82       	std	Z+3, r1	; 0x03
    415a:	83 e0       	ldi	r24, 0x03	; 3
    415c:	85 83       	std	Z+5, r24	; 0x05
    415e:	14 82       	std	Z+4, r1	; 0x04
    4160:	16 82       	std	Z+6, r1	; 0x06
    4162:	17 82       	std	Z+7, r1	; 0x07
    4164:	08 95       	ret

00004166 <_ZN8emstream4putsEPKc>:
    4166:	0f 93       	push	r16
    4168:	1f 93       	push	r17
    416a:	cf 93       	push	r28
    416c:	df 93       	push	r29
    416e:	8c 01       	movw	r16, r24
    4170:	fb 01       	movw	r30, r22
    4172:	dc 01       	movw	r26, r24
    4174:	14 96       	adiw	r26, 0x04	; 4
    4176:	8c 91       	ld	r24, X
    4178:	81 11       	cpse	r24, r1
    417a:	04 c0       	rjmp	.+8      	; 0x4184 <_ZN8emstream4putsEPKc+0x1e>
    417c:	60 81       	ld	r22, Z
    417e:	61 11       	cpse	r22, r1
    4180:	17 c0       	rjmp	.+46     	; 0x41b0 <_ZN8emstream4putsEPKc+0x4a>
    4182:	23 c0       	rjmp	.+70     	; 0x41ca <_ZN8emstream4putsEPKc+0x64>
    4184:	d8 01       	movw	r26, r16
    4186:	14 96       	adiw	r26, 0x04	; 4
    4188:	1c 92       	st	X, r1
    418a:	eb 01       	movw	r28, r22
    418c:	21 96       	adiw	r28, 0x01	; 1
    418e:	64 91       	lpm	r22, Z
    4190:	66 23       	and	r22, r22
    4192:	d9 f0       	breq	.+54     	; 0x41ca <_ZN8emstream4putsEPKc+0x64>
    4194:	d8 01       	movw	r26, r16
    4196:	ed 91       	ld	r30, X+
    4198:	fc 91       	ld	r31, X
    419a:	02 80       	ldd	r0, Z+2	; 0x02
    419c:	f3 81       	ldd	r31, Z+3	; 0x03
    419e:	e0 2d       	mov	r30, r0
    41a0:	c8 01       	movw	r24, r16
    41a2:	19 95       	eicall
    41a4:	fe 01       	movw	r30, r28
    41a6:	64 91       	lpm	r22, Z
    41a8:	21 96       	adiw	r28, 0x01	; 1
    41aa:	61 11       	cpse	r22, r1
    41ac:	f3 cf       	rjmp	.-26     	; 0x4194 <_ZN8emstream4putsEPKc+0x2e>
    41ae:	0d c0       	rjmp	.+26     	; 0x41ca <_ZN8emstream4putsEPKc+0x64>
    41b0:	ef 01       	movw	r28, r30
    41b2:	21 96       	adiw	r28, 0x01	; 1
    41b4:	d8 01       	movw	r26, r16
    41b6:	ed 91       	ld	r30, X+
    41b8:	fc 91       	ld	r31, X
    41ba:	02 80       	ldd	r0, Z+2	; 0x02
    41bc:	f3 81       	ldd	r31, Z+3	; 0x03
    41be:	e0 2d       	mov	r30, r0
    41c0:	c8 01       	movw	r24, r16
    41c2:	19 95       	eicall
    41c4:	69 91       	ld	r22, Y+
    41c6:	61 11       	cpse	r22, r1
    41c8:	f5 cf       	rjmp	.-22     	; 0x41b4 <_ZN8emstream4putsEPKc+0x4e>
    41ca:	df 91       	pop	r29
    41cc:	cf 91       	pop	r28
    41ce:	1f 91       	pop	r17
    41d0:	0f 91       	pop	r16
    41d2:	08 95       	ret

000041d4 <_ZN8emstreamlsE15ser_manipulator>:
    41d4:	cf 93       	push	r28
    41d6:	df 93       	push	r29
    41d8:	ec 01       	movw	r28, r24
    41da:	86 2f       	mov	r24, r22
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	8b 30       	cpi	r24, 0x0B	; 11
    41e0:	91 05       	cpc	r25, r1
    41e2:	d8 f5       	brcc	.+118    	; 0x425a <_ZN8emstreamlsE15ser_manipulator+0x86>
    41e4:	fc 01       	movw	r30, r24
    41e6:	88 27       	eor	r24, r24
    41e8:	eb 53       	subi	r30, 0x3B	; 59
    41ea:	fe 4f       	sbci	r31, 0xFE	; 254
    41ec:	8f 4f       	sbci	r24, 0xFF	; 255
    41ee:	0c 94 50 25 	jmp	0x4aa0	; 0x4aa0 <__tablejump2__>
    41f2:	82 e0       	ldi	r24, 0x02	; 2
    41f4:	8a 83       	std	Y+2, r24	; 0x02
    41f6:	31 c0       	rjmp	.+98     	; 0x425a <_ZN8emstreamlsE15ser_manipulator+0x86>
    41f8:	88 e0       	ldi	r24, 0x08	; 8
    41fa:	8a 83       	std	Y+2, r24	; 0x02
    41fc:	2e c0       	rjmp	.+92     	; 0x425a <_ZN8emstreamlsE15ser_manipulator+0x86>
    41fe:	8a e0       	ldi	r24, 0x0A	; 10
    4200:	8a 83       	std	Y+2, r24	; 0x02
    4202:	2b c0       	rjmp	.+86     	; 0x425a <_ZN8emstreamlsE15ser_manipulator+0x86>
    4204:	80 e1       	ldi	r24, 0x10	; 16
    4206:	8a 83       	std	Y+2, r24	; 0x02
    4208:	28 c0       	rjmp	.+80     	; 0x425a <_ZN8emstreamlsE15ser_manipulator+0x86>
    420a:	81 e0       	ldi	r24, 0x01	; 1
    420c:	8b 83       	std	Y+3, r24	; 0x03
    420e:	25 c0       	rjmp	.+74     	; 0x425a <_ZN8emstreamlsE15ser_manipulator+0x86>
    4210:	1b 82       	std	Y+3, r1	; 0x03
    4212:	23 c0       	rjmp	.+70     	; 0x425a <_ZN8emstreamlsE15ser_manipulator+0x86>
    4214:	e8 81       	ld	r30, Y
    4216:	f9 81       	ldd	r31, Y+1	; 0x01
    4218:	02 80       	ldd	r0, Z+2	; 0x02
    421a:	f3 81       	ldd	r31, Z+3	; 0x03
    421c:	e0 2d       	mov	r30, r0
    421e:	6d e0       	ldi	r22, 0x0D	; 13
    4220:	ce 01       	movw	r24, r28
    4222:	19 95       	eicall
    4224:	e8 81       	ld	r30, Y
    4226:	f9 81       	ldd	r31, Y+1	; 0x01
    4228:	02 80       	ldd	r0, Z+2	; 0x02
    422a:	f3 81       	ldd	r31, Z+3	; 0x03
    422c:	e0 2d       	mov	r30, r0
    422e:	6a e0       	ldi	r22, 0x0A	; 10
    4230:	ce 01       	movw	r24, r28
    4232:	19 95       	eicall
    4234:	12 c0       	rjmp	.+36     	; 0x425a <_ZN8emstreamlsE15ser_manipulator+0x86>
    4236:	e8 81       	ld	r30, Y
    4238:	f9 81       	ldd	r31, Y+1	; 0x01
    423a:	02 84       	ldd	r0, Z+10	; 0x0a
    423c:	f3 85       	ldd	r31, Z+11	; 0x0b
    423e:	e0 2d       	mov	r30, r0
    4240:	ce 01       	movw	r24, r28
    4242:	19 95       	eicall
    4244:	0a c0       	rjmp	.+20     	; 0x425a <_ZN8emstreamlsE15ser_manipulator+0x86>
    4246:	e8 81       	ld	r30, Y
    4248:	f9 81       	ldd	r31, Y+1	; 0x01
    424a:	00 84       	ldd	r0, Z+8	; 0x08
    424c:	f1 85       	ldd	r31, Z+9	; 0x09
    424e:	e0 2d       	mov	r30, r0
    4250:	ce 01       	movw	r24, r28
    4252:	19 95       	eicall
    4254:	02 c0       	rjmp	.+4      	; 0x425a <_ZN8emstreamlsE15ser_manipulator+0x86>
    4256:	81 e0       	ldi	r24, 0x01	; 1
    4258:	8c 83       	std	Y+4, r24	; 0x04
    425a:	ce 01       	movw	r24, r28
    425c:	df 91       	pop	r29
    425e:	cf 91       	pop	r28
    4260:	08 95       	ret

00004262 <_ZN8emstreamlsEj>:
    4262:	ff 92       	push	r15
    4264:	0f 93       	push	r16
    4266:	1f 93       	push	r17
    4268:	cf 93       	push	r28
    426a:	df 93       	push	r29
    426c:	cd b7       	in	r28, 0x3d	; 61
    426e:	de b7       	in	r29, 0x3e	; 62
    4270:	61 97       	sbiw	r28, 0x11	; 17
    4272:	cd bf       	out	0x3d, r28	; 61
    4274:	de bf       	out	0x3e, r29	; 62
    4276:	8c 01       	movw	r16, r24
    4278:	f6 2e       	mov	r15, r22
    427a:	97 2f       	mov	r25, r23
    427c:	f8 01       	movw	r30, r16
    427e:	42 81       	ldd	r20, Z+2	; 0x02
    4280:	40 31       	cpi	r20, 0x10	; 16
    4282:	21 f0       	breq	.+8      	; 0x428c <_ZN8emstreamlsEj+0x2a>
    4284:	48 30       	cpi	r20, 0x08	; 8
    4286:	11 f0       	breq	.+4      	; 0x428c <_ZN8emstreamlsEj+0x2a>
    4288:	42 30       	cpi	r20, 0x02	; 2
    428a:	41 f4       	brne	.+16     	; 0x429c <_ZN8emstreamlsEj+0x3a>
    428c:	69 2f       	mov	r22, r25
    428e:	c8 01       	movw	r24, r16
    4290:	0e 94 a7 21 	call	0x434e	; 0x434e <_ZN8emstreamlsEh>
    4294:	6f 2d       	mov	r22, r15
    4296:	0e 94 a7 21 	call	0x434e	; 0x434e <_ZN8emstreamlsEh>
    429a:	0d c0       	rjmp	.+26     	; 0x42b6 <_ZN8emstreamlsEj+0x54>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    429c:	50 e0       	ldi	r21, 0x00	; 0
    429e:	be 01       	movw	r22, r28
    42a0:	6f 5f       	subi	r22, 0xFF	; 255
    42a2:	7f 4f       	sbci	r23, 0xFF	; 255
    42a4:	8f 2d       	mov	r24, r15
    42a6:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <utoa>
    42aa:	be 01       	movw	r22, r28
    42ac:	6f 5f       	subi	r22, 0xFF	; 255
    42ae:	7f 4f       	sbci	r23, 0xFF	; 255
    42b0:	c8 01       	movw	r24, r16
    42b2:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    42b6:	c8 01       	movw	r24, r16
    42b8:	61 96       	adiw	r28, 0x11	; 17
    42ba:	cd bf       	out	0x3d, r28	; 61
    42bc:	de bf       	out	0x3e, r29	; 62
    42be:	df 91       	pop	r29
    42c0:	cf 91       	pop	r28
    42c2:	1f 91       	pop	r17
    42c4:	0f 91       	pop	r16
    42c6:	ff 90       	pop	r15
    42c8:	08 95       	ret

000042ca <_ZN8emstreamlsEm>:
    42ca:	df 92       	push	r13
    42cc:	ef 92       	push	r14
    42ce:	ff 92       	push	r15
    42d0:	0f 93       	push	r16
    42d2:	1f 93       	push	r17
    42d4:	cf 93       	push	r28
    42d6:	df 93       	push	r29
    42d8:	cd b7       	in	r28, 0x3d	; 61
    42da:	de b7       	in	r29, 0x3e	; 62
    42dc:	a1 97       	sbiw	r28, 0x21	; 33
    42de:	cd bf       	out	0x3d, r28	; 61
    42e0:	de bf       	out	0x3e, r29	; 62
    42e2:	8c 01       	movw	r16, r24
    42e4:	d4 2e       	mov	r13, r20
    42e6:	e5 2e       	mov	r14, r21
    42e8:	f6 2e       	mov	r15, r22
    42ea:	97 2f       	mov	r25, r23
    42ec:	f8 01       	movw	r30, r16
    42ee:	22 81       	ldd	r18, Z+2	; 0x02
    42f0:	20 31       	cpi	r18, 0x10	; 16
    42f2:	21 f0       	breq	.+8      	; 0x42fc <_ZN8emstreamlsEm+0x32>
    42f4:	28 30       	cpi	r18, 0x08	; 8
    42f6:	11 f0       	breq	.+4      	; 0x42fc <_ZN8emstreamlsEm+0x32>
    42f8:	22 30       	cpi	r18, 0x02	; 2
    42fa:	71 f4       	brne	.+28     	; 0x4318 <_ZN8emstreamlsEm+0x4e>
    42fc:	69 2f       	mov	r22, r25
    42fe:	c8 01       	movw	r24, r16
    4300:	0e 94 a7 21 	call	0x434e	; 0x434e <_ZN8emstreamlsEh>
    4304:	6f 2d       	mov	r22, r15
    4306:	0e 94 a7 21 	call	0x434e	; 0x434e <_ZN8emstreamlsEh>
    430a:	6e 2d       	mov	r22, r14
    430c:	0e 94 a7 21 	call	0x434e	; 0x434e <_ZN8emstreamlsEh>
    4310:	6d 2d       	mov	r22, r13
    4312:	0e 94 a7 21 	call	0x434e	; 0x434e <_ZN8emstreamlsEh>
    4316:	0f c0       	rjmp	.+30     	; 0x4336 <_ZN8emstreamlsEm+0x6c>
extern __inline__ __ATTR_GNU_INLINE__
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ultoa (unsigned long, char *, int);
	return __ultoa (__val, __s, __radix);
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	ae 01       	movw	r20, r28
    431c:	4f 5f       	subi	r20, 0xFF	; 255
    431e:	5f 4f       	sbci	r21, 0xFF	; 255
    4320:	6d 2d       	mov	r22, r13
    4322:	7e 2d       	mov	r23, r14
    4324:	8f 2d       	mov	r24, r15
    4326:	0e 94 91 25 	call	0x4b22	; 0x4b22 <ultoa>
    432a:	be 01       	movw	r22, r28
    432c:	6f 5f       	subi	r22, 0xFF	; 255
    432e:	7f 4f       	sbci	r23, 0xFF	; 255
    4330:	c8 01       	movw	r24, r16
    4332:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    4336:	c8 01       	movw	r24, r16
    4338:	a1 96       	adiw	r28, 0x21	; 33
    433a:	cd bf       	out	0x3d, r28	; 61
    433c:	de bf       	out	0x3e, r29	; 62
    433e:	df 91       	pop	r29
    4340:	cf 91       	pop	r28
    4342:	1f 91       	pop	r17
    4344:	0f 91       	pop	r16
    4346:	ff 90       	pop	r15
    4348:	ef 90       	pop	r14
    434a:	df 90       	pop	r13
    434c:	08 95       	ret

0000434e <_ZN8emstreamlsEh>:
    434e:	cf 92       	push	r12
    4350:	df 92       	push	r13
    4352:	ef 92       	push	r14
    4354:	ff 92       	push	r15
    4356:	0f 93       	push	r16
    4358:	1f 93       	push	r17
    435a:	cf 93       	push	r28
    435c:	df 93       	push	r29
    435e:	cd b7       	in	r28, 0x3d	; 61
    4360:	de b7       	in	r29, 0x3e	; 62
    4362:	29 97       	sbiw	r28, 0x09	; 9
    4364:	cd bf       	out	0x3d, r28	; 61
    4366:	de bf       	out	0x3e, r29	; 62
    4368:	8c 01       	movw	r16, r24
    436a:	e6 2e       	mov	r14, r22
    436c:	dc 01       	movw	r26, r24
    436e:	13 96       	adiw	r26, 0x03	; 3
    4370:	8c 91       	ld	r24, X
    4372:	13 97       	sbiw	r26, 0x03	; 3
    4374:	88 23       	and	r24, r24
    4376:	41 f0       	breq	.+16     	; 0x4388 <_ZN8emstreamlsEh+0x3a>
    4378:	ed 91       	ld	r30, X+
    437a:	fc 91       	ld	r31, X
    437c:	02 80       	ldd	r0, Z+2	; 0x02
    437e:	f3 81       	ldd	r31, Z+3	; 0x03
    4380:	e0 2d       	mov	r30, r0
    4382:	c8 01       	movw	r24, r16
    4384:	19 95       	eicall
    4386:	56 c0       	rjmp	.+172    	; 0x4434 <_ZN8emstreamlsEh+0xe6>
    4388:	f8 01       	movw	r30, r16
    438a:	42 81       	ldd	r20, Z+2	; 0x02
    438c:	42 30       	cpi	r20, 0x02	; 2
    438e:	19 f5       	brne	.+70     	; 0x43d6 <_ZN8emstreamlsEh+0x88>
    4390:	68 94       	set
    4392:	cc 24       	eor	r12, r12
    4394:	c3 f8       	bld	r12, 3
    4396:	d1 2c       	mov	r13, r1
    4398:	68 94       	set
    439a:	ff 24       	eor	r15, r15
    439c:	f7 f8       	bld	r15, 7
    439e:	8e 2d       	mov	r24, r14
    43a0:	8f 21       	and	r24, r15
    43a2:	51 f0       	breq	.+20     	; 0x43b8 <_ZN8emstreamlsEh+0x6a>
    43a4:	d8 01       	movw	r26, r16
    43a6:	ed 91       	ld	r30, X+
    43a8:	fc 91       	ld	r31, X
    43aa:	02 80       	ldd	r0, Z+2	; 0x02
    43ac:	f3 81       	ldd	r31, Z+3	; 0x03
    43ae:	e0 2d       	mov	r30, r0
    43b0:	61 e3       	ldi	r22, 0x31	; 49
    43b2:	c8 01       	movw	r24, r16
    43b4:	19 95       	eicall
    43b6:	09 c0       	rjmp	.+18     	; 0x43ca <_ZN8emstreamlsEh+0x7c>
    43b8:	d8 01       	movw	r26, r16
    43ba:	ed 91       	ld	r30, X+
    43bc:	fc 91       	ld	r31, X
    43be:	02 80       	ldd	r0, Z+2	; 0x02
    43c0:	f3 81       	ldd	r31, Z+3	; 0x03
    43c2:	e0 2d       	mov	r30, r0
    43c4:	60 e3       	ldi	r22, 0x30	; 48
    43c6:	c8 01       	movw	r24, r16
    43c8:	19 95       	eicall
    43ca:	f6 94       	lsr	r15
    43cc:	b1 e0       	ldi	r27, 0x01	; 1
    43ce:	cb 1a       	sub	r12, r27
    43d0:	d1 08       	sbc	r13, r1
    43d2:	29 f7       	brne	.-54     	; 0x439e <_ZN8emstreamlsEh+0x50>
    43d4:	2f c0       	rjmp	.+94     	; 0x4434 <_ZN8emstreamlsEh+0xe6>
    43d6:	40 31       	cpi	r20, 0x10	; 16
    43d8:	f9 f4       	brne	.+62     	; 0x4418 <_ZN8emstreamlsEh+0xca>
    43da:	62 95       	swap	r22
    43dc:	6f 70       	andi	r22, 0x0F	; 15
    43de:	01 90       	ld	r0, Z+
    43e0:	f0 81       	ld	r31, Z
    43e2:	e0 2d       	mov	r30, r0
    43e4:	02 80       	ldd	r0, Z+2	; 0x02
    43e6:	f3 81       	ldd	r31, Z+3	; 0x03
    43e8:	e0 2d       	mov	r30, r0
    43ea:	6a 30       	cpi	r22, 0x0A	; 10
    43ec:	10 f0       	brcs	.+4      	; 0x43f2 <_ZN8emstreamlsEh+0xa4>
    43ee:	69 5c       	subi	r22, 0xC9	; 201
    43f0:	01 c0       	rjmp	.+2      	; 0x43f4 <_ZN8emstreamlsEh+0xa6>
    43f2:	60 5d       	subi	r22, 0xD0	; 208
    43f4:	c8 01       	movw	r24, r16
    43f6:	19 95       	eicall
    43f8:	6e 2d       	mov	r22, r14
    43fa:	6f 70       	andi	r22, 0x0F	; 15
    43fc:	d8 01       	movw	r26, r16
    43fe:	ed 91       	ld	r30, X+
    4400:	fc 91       	ld	r31, X
    4402:	02 80       	ldd	r0, Z+2	; 0x02
    4404:	f3 81       	ldd	r31, Z+3	; 0x03
    4406:	e0 2d       	mov	r30, r0
    4408:	6a 30       	cpi	r22, 0x0A	; 10
    440a:	10 f0       	brcs	.+4      	; 0x4410 <_ZN8emstreamlsEh+0xc2>
    440c:	69 5c       	subi	r22, 0xC9	; 201
    440e:	01 c0       	rjmp	.+2      	; 0x4412 <_ZN8emstreamlsEh+0xc4>
    4410:	60 5d       	subi	r22, 0xD0	; 208
    4412:	c8 01       	movw	r24, r16
    4414:	19 95       	eicall
    4416:	0e c0       	rjmp	.+28     	; 0x4434 <_ZN8emstreamlsEh+0xe6>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    4418:	50 e0       	ldi	r21, 0x00	; 0
    441a:	be 01       	movw	r22, r28
    441c:	6f 5f       	subi	r22, 0xFF	; 255
    441e:	7f 4f       	sbci	r23, 0xFF	; 255
    4420:	8e 2d       	mov	r24, r14
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <utoa>
    4428:	be 01       	movw	r22, r28
    442a:	6f 5f       	subi	r22, 0xFF	; 255
    442c:	7f 4f       	sbci	r23, 0xFF	; 255
    442e:	c8 01       	movw	r24, r16
    4430:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN8emstream4putsEPKc>
    4434:	c8 01       	movw	r24, r16
    4436:	29 96       	adiw	r28, 0x09	; 9
    4438:	cd bf       	out	0x3d, r28	; 61
    443a:	de bf       	out	0x3e, r29	; 62
    443c:	df 91       	pop	r29
    443e:	cf 91       	pop	r28
    4440:	1f 91       	pop	r17
    4442:	0f 91       	pop	r16
    4444:	ff 90       	pop	r15
    4446:	ef 90       	pop	r14
    4448:	df 90       	pop	r13
    444a:	cf 90       	pop	r12
    444c:	08 95       	ret

0000444e <_ZN5rs2327putcharEc>:
    444e:	dc 01       	movw	r26, r24
    4450:	50 96       	adiw	r26, 0x10	; 16
    4452:	ed 91       	ld	r30, X+
    4454:	fc 91       	ld	r31, X
    4456:	51 97       	sbiw	r26, 0x11	; 17
    4458:	80 81       	ld	r24, Z
    445a:	54 96       	adiw	r26, 0x14	; 20
    445c:	4c 91       	ld	r20, X
    445e:	54 97       	sbiw	r26, 0x14	; 20
    4460:	84 23       	and	r24, r20
    4462:	29 f0       	breq	.+10     	; 0x446e <_ZN5rs2327putcharEc+0x20>
    4464:	09 c0       	rjmp	.+18     	; 0x4478 <_ZN5rs2327putcharEc+0x2a>
    4466:	21 50       	subi	r18, 0x01	; 1
    4468:	31 09       	sbc	r19, r1
    446a:	19 f4       	brne	.+6      	; 0x4472 <_ZN5rs2327putcharEc+0x24>
    446c:	12 c0       	rjmp	.+36     	; 0x4492 <_ZN5rs2327putcharEc+0x44>
    446e:	21 e2       	ldi	r18, 0x21	; 33
    4470:	3e e4       	ldi	r19, 0x4E	; 78
    4472:	90 81       	ld	r25, Z
    4474:	94 23       	and	r25, r20
    4476:	b9 f3       	breq	.-18     	; 0x4466 <_ZN5rs2327putcharEc+0x18>
    4478:	90 81       	ld	r25, Z
    447a:	56 96       	adiw	r26, 0x16	; 22
    447c:	8c 91       	ld	r24, X
    447e:	56 97       	sbiw	r26, 0x16	; 22
    4480:	89 2b       	or	r24, r25
    4482:	80 83       	st	Z, r24
    4484:	1e 96       	adiw	r26, 0x0e	; 14
    4486:	ed 91       	ld	r30, X+
    4488:	fc 91       	ld	r31, X
    448a:	1f 97       	sbiw	r26, 0x0f	; 15
    448c:	60 83       	st	Z, r22
    448e:	81 e0       	ldi	r24, 0x01	; 1
    4490:	08 95       	ret
    4492:	80 e0       	ldi	r24, 0x00	; 0
    4494:	08 95       	ret

00004496 <_ZN5rs2327getcharEv>:
    4496:	cf 93       	push	r28
    4498:	df 93       	push	r29
    449a:	fc 01       	movw	r30, r24
    449c:	c1 8d       	ldd	r28, Z+25	; 0x19
    449e:	d2 8d       	ldd	r29, Z+26	; 0x1a
    44a0:	28 81       	ld	r18, Y
    44a2:	39 81       	ldd	r19, Y+1	; 0x01
    44a4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    44a6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    44a8:	4d 91       	ld	r20, X+
    44aa:	5c 91       	ld	r21, X
    44ac:	24 17       	cp	r18, r20
    44ae:	35 07       	cpc	r19, r21
    44b0:	e9 f3       	breq	.-6      	; 0x44ac <_ZN5rs2327getcharEv+0x16>
    44b2:	a7 89       	ldd	r26, Z+23	; 0x17
    44b4:	b0 8d       	ldd	r27, Z+24	; 0x18
    44b6:	0d 90       	ld	r0, X+
    44b8:	bc 91       	ld	r27, X
    44ba:	a0 2d       	mov	r26, r0
    44bc:	a2 0f       	add	r26, r18
    44be:	b3 1f       	adc	r27, r19
    44c0:	8c 91       	ld	r24, X
    44c2:	2f 5f       	subi	r18, 0xFF	; 255
    44c4:	3f 4f       	sbci	r19, 0xFF	; 255
    44c6:	28 83       	st	Y, r18
    44c8:	39 83       	std	Y+1, r19	; 0x01
    44ca:	24 36       	cpi	r18, 0x64	; 100
    44cc:	31 05       	cpc	r19, r1
    44ce:	28 f0       	brcs	.+10     	; 0x44da <_ZN5rs2327getcharEv+0x44>
    44d0:	01 8c       	ldd	r0, Z+25	; 0x19
    44d2:	f2 8d       	ldd	r31, Z+26	; 0x1a
    44d4:	e0 2d       	mov	r30, r0
    44d6:	10 82       	st	Z, r1
    44d8:	11 82       	std	Z+1, r1	; 0x01
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	df 91       	pop	r29
    44de:	cf 91       	pop	r28
    44e0:	08 95       	ret

000044e2 <_ZN5rs23214check_for_charEv>:
    44e2:	cf 93       	push	r28
    44e4:	df 93       	push	r29
    44e6:	ec 01       	movw	r28, r24
    44e8:	a9 8d       	ldd	r26, Y+25	; 0x19
    44ea:	ba 8d       	ldd	r27, Y+26	; 0x1a
    44ec:	eb 8d       	ldd	r30, Y+27	; 0x1b
    44ee:	fc 8d       	ldd	r31, Y+28	; 0x1c
    44f0:	81 e0       	ldi	r24, 0x01	; 1
    44f2:	4d 91       	ld	r20, X+
    44f4:	5c 91       	ld	r21, X
    44f6:	20 81       	ld	r18, Z
    44f8:	31 81       	ldd	r19, Z+1	; 0x01
    44fa:	42 17       	cp	r20, r18
    44fc:	53 07       	cpc	r21, r19
    44fe:	09 f4       	brne	.+2      	; 0x4502 <_ZN5rs23214check_for_charEv+0x20>
    4500:	80 e0       	ldi	r24, 0x00	; 0
    4502:	df 91       	pop	r29
    4504:	cf 91       	pop	r28
    4506:	08 95       	ret

00004508 <_ZN5rs23212clear_screenEv>:
    4508:	dc 01       	movw	r26, r24
    450a:	ed 91       	ld	r30, X+
    450c:	fc 91       	ld	r31, X
    450e:	02 80       	ldd	r0, Z+2	; 0x02
    4510:	f3 81       	ldd	r31, Z+3	; 0x03
    4512:	e0 2d       	mov	r30, r0
    4514:	6c e0       	ldi	r22, 0x0C	; 12
    4516:	19 95       	eicall
    4518:	08 95       	ret

0000451a <_ZN5rs232C1EjP12USART_struct>:
    451a:	ef 92       	push	r14
    451c:	ff 92       	push	r15
    451e:	0f 93       	push	r16
    4520:	1f 93       	push	r17
    4522:	cf 93       	push	r28
    4524:	df 93       	push	r29
    4526:	ec 01       	movw	r28, r24
    4528:	7b 01       	movw	r14, r22
    452a:	8a 01       	movw	r16, r20
    452c:	0e 94 a5 20 	call	0x414a	; 0x414a <_ZN8emstreamC1Ev>
    4530:	a8 01       	movw	r20, r16
    4532:	b7 01       	movw	r22, r14
    4534:	ce 01       	movw	r24, r28
    4536:	08 96       	adiw	r24, 0x08	; 8
    4538:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <_ZN7base232C1EjP12USART_struct>
    453c:	8a e8       	ldi	r24, 0x8A	; 138
    453e:	90 e2       	ldi	r25, 0x20	; 32
    4540:	88 83       	st	Y, r24
    4542:	99 83       	std	Y+1, r25	; 0x01
    4544:	00 3a       	cpi	r16, 0xA0	; 160
    4546:	88 e0       	ldi	r24, 0x08	; 8
    4548:	18 07       	cpc	r17, r24
    454a:	69 f4       	brne	.+26     	; 0x4566 <_ZN5rs232C1EjP12USART_struct+0x4c>
    454c:	87 ea       	ldi	r24, 0xA7	; 167
    454e:	91 e4       	ldi	r25, 0x41	; 65
    4550:	8f 8b       	std	Y+23, r24	; 0x17
    4552:	98 8f       	std	Y+24, r25	; 0x18
    4554:	8b e9       	ldi	r24, 0x9B	; 155
    4556:	91 e4       	ldi	r25, 0x41	; 65
    4558:	89 8f       	std	Y+25, r24	; 0x19
    455a:	9a 8f       	std	Y+26, r25	; 0x1a
    455c:	8f e8       	ldi	r24, 0x8F	; 143
    455e:	91 e4       	ldi	r25, 0x41	; 65
    4560:	8b 8f       	std	Y+27, r24	; 0x1b
    4562:	9c 8f       	std	Y+28, r25	; 0x1c
    4564:	53 c0       	rjmp	.+166    	; 0x460c <_ZN5rs232C1EjP12USART_struct+0xf2>
    4566:	00 3b       	cpi	r16, 0xB0	; 176
    4568:	e8 e0       	ldi	r30, 0x08	; 8
    456a:	1e 07       	cpc	r17, r30
    456c:	69 f4       	brne	.+26     	; 0x4588 <_ZN5rs232C1EjP12USART_struct+0x6e>
    456e:	85 ea       	ldi	r24, 0xA5	; 165
    4570:	91 e4       	ldi	r25, 0x41	; 65
    4572:	8f 8b       	std	Y+23, r24	; 0x17
    4574:	98 8f       	std	Y+24, r25	; 0x18
    4576:	89 e9       	ldi	r24, 0x99	; 153
    4578:	91 e4       	ldi	r25, 0x41	; 65
    457a:	89 8f       	std	Y+25, r24	; 0x19
    457c:	9a 8f       	std	Y+26, r25	; 0x1a
    457e:	8d e8       	ldi	r24, 0x8D	; 141
    4580:	91 e4       	ldi	r25, 0x41	; 65
    4582:	8b 8f       	std	Y+27, r24	; 0x1b
    4584:	9c 8f       	std	Y+28, r25	; 0x1c
    4586:	42 c0       	rjmp	.+132    	; 0x460c <_ZN5rs232C1EjP12USART_struct+0xf2>
    4588:	00 3a       	cpi	r16, 0xA0	; 160
    458a:	f9 e0       	ldi	r31, 0x09	; 9
    458c:	1f 07       	cpc	r17, r31
    458e:	69 f4       	brne	.+26     	; 0x45aa <_ZN5rs232C1EjP12USART_struct+0x90>
    4590:	83 ea       	ldi	r24, 0xA3	; 163
    4592:	91 e4       	ldi	r25, 0x41	; 65
    4594:	8f 8b       	std	Y+23, r24	; 0x17
    4596:	98 8f       	std	Y+24, r25	; 0x18
    4598:	87 e9       	ldi	r24, 0x97	; 151
    459a:	91 e4       	ldi	r25, 0x41	; 65
    459c:	89 8f       	std	Y+25, r24	; 0x19
    459e:	9a 8f       	std	Y+26, r25	; 0x1a
    45a0:	8b e8       	ldi	r24, 0x8B	; 139
    45a2:	91 e4       	ldi	r25, 0x41	; 65
    45a4:	8b 8f       	std	Y+27, r24	; 0x1b
    45a6:	9c 8f       	std	Y+28, r25	; 0x1c
    45a8:	31 c0       	rjmp	.+98     	; 0x460c <_ZN5rs232C1EjP12USART_struct+0xf2>
    45aa:	00 3b       	cpi	r16, 0xB0	; 176
    45ac:	89 e0       	ldi	r24, 0x09	; 9
    45ae:	18 07       	cpc	r17, r24
    45b0:	69 f4       	brne	.+26     	; 0x45cc <_ZN5rs232C1EjP12USART_struct+0xb2>
    45b2:	81 ea       	ldi	r24, 0xA1	; 161
    45b4:	91 e4       	ldi	r25, 0x41	; 65
    45b6:	8f 8b       	std	Y+23, r24	; 0x17
    45b8:	98 8f       	std	Y+24, r25	; 0x18
    45ba:	85 e9       	ldi	r24, 0x95	; 149
    45bc:	91 e4       	ldi	r25, 0x41	; 65
    45be:	89 8f       	std	Y+25, r24	; 0x19
    45c0:	9a 8f       	std	Y+26, r25	; 0x1a
    45c2:	89 e8       	ldi	r24, 0x89	; 137
    45c4:	91 e4       	ldi	r25, 0x41	; 65
    45c6:	8b 8f       	std	Y+27, r24	; 0x1b
    45c8:	9c 8f       	std	Y+28, r25	; 0x1c
    45ca:	20 c0       	rjmp	.+64     	; 0x460c <_ZN5rs232C1EjP12USART_struct+0xf2>
    45cc:	00 3a       	cpi	r16, 0xA0	; 160
    45ce:	ea e0       	ldi	r30, 0x0A	; 10
    45d0:	1e 07       	cpc	r17, r30
    45d2:	69 f4       	brne	.+26     	; 0x45ee <_ZN5rs232C1EjP12USART_struct+0xd4>
    45d4:	8f e9       	ldi	r24, 0x9F	; 159
    45d6:	91 e4       	ldi	r25, 0x41	; 65
    45d8:	8f 8b       	std	Y+23, r24	; 0x17
    45da:	98 8f       	std	Y+24, r25	; 0x18
    45dc:	83 e9       	ldi	r24, 0x93	; 147
    45de:	91 e4       	ldi	r25, 0x41	; 65
    45e0:	89 8f       	std	Y+25, r24	; 0x19
    45e2:	9a 8f       	std	Y+26, r25	; 0x1a
    45e4:	87 e8       	ldi	r24, 0x87	; 135
    45e6:	91 e4       	ldi	r25, 0x41	; 65
    45e8:	8b 8f       	std	Y+27, r24	; 0x1b
    45ea:	9c 8f       	std	Y+28, r25	; 0x1c
    45ec:	0f c0       	rjmp	.+30     	; 0x460c <_ZN5rs232C1EjP12USART_struct+0xf2>
    45ee:	00 3a       	cpi	r16, 0xA0	; 160
    45f0:	1b 40       	sbci	r17, 0x0B	; 11
    45f2:	61 f4       	brne	.+24     	; 0x460c <_ZN5rs232C1EjP12USART_struct+0xf2>
    45f4:	8d e9       	ldi	r24, 0x9D	; 157
    45f6:	91 e4       	ldi	r25, 0x41	; 65
    45f8:	8f 8b       	std	Y+23, r24	; 0x17
    45fa:	98 8f       	std	Y+24, r25	; 0x18
    45fc:	81 e9       	ldi	r24, 0x91	; 145
    45fe:	91 e4       	ldi	r25, 0x41	; 65
    4600:	89 8f       	std	Y+25, r24	; 0x19
    4602:	9a 8f       	std	Y+26, r25	; 0x1a
    4604:	85 e8       	ldi	r24, 0x85	; 133
    4606:	91 e4       	ldi	r25, 0x41	; 65
    4608:	8b 8f       	std	Y+27, r24	; 0x1b
    460a:	9c 8f       	std	Y+28, r25	; 0x1c
    460c:	0f 89       	ldd	r16, Y+23	; 0x17
    460e:	18 8d       	ldd	r17, Y+24	; 0x18
    4610:	84 e6       	ldi	r24, 0x64	; 100
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <_Znaj>
    4618:	f8 01       	movw	r30, r16
    461a:	80 83       	st	Z, r24
    461c:	91 83       	std	Z+1, r25	; 0x01
    461e:	e9 8d       	ldd	r30, Y+25	; 0x19
    4620:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4622:	10 82       	st	Z, r1
    4624:	11 82       	std	Z+1, r1	; 0x01
    4626:	eb 8d       	ldd	r30, Y+27	; 0x1b
    4628:	fc 8d       	ldd	r31, Y+28	; 0x1c
    462a:	10 82       	st	Z, r1
    462c:	11 82       	std	Z+1, r1	; 0x01
    462e:	df 91       	pop	r29
    4630:	cf 91       	pop	r28
    4632:	1f 91       	pop	r17
    4634:	0f 91       	pop	r16
    4636:	ff 90       	pop	r15
    4638:	ef 90       	pop	r14
    463a:	08 95       	ret

0000463c <__vector_25>:
    463c:	1f 92       	push	r1
    463e:	0f 92       	push	r0
    4640:	0f b6       	in	r0, 0x3f	; 63
    4642:	0f 92       	push	r0
    4644:	11 24       	eor	r1, r1
    4646:	0b b6       	in	r0, 0x3b	; 59
    4648:	0f 92       	push	r0
    464a:	2f 93       	push	r18
    464c:	3f 93       	push	r19
    464e:	8f 93       	push	r24
    4650:	9f 93       	push	r25
    4652:	ef 93       	push	r30
    4654:	ff 93       	push	r31
    4656:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    465a:	e0 91 a7 41 	lds	r30, 0x41A7	; 0x8041a7 <rcvC0_buffer>
    465e:	f0 91 a8 41 	lds	r31, 0x41A8	; 0x8041a8 <rcvC0_buffer+0x1>
    4662:	80 91 8f 41 	lds	r24, 0x418F	; 0x80418f <rcvC0_write_index>
    4666:	90 91 90 41 	lds	r25, 0x4190	; 0x804190 <rcvC0_write_index+0x1>
    466a:	e8 0f       	add	r30, r24
    466c:	f9 1f       	adc	r31, r25
    466e:	20 83       	st	Z, r18
    4670:	80 91 8f 41 	lds	r24, 0x418F	; 0x80418f <rcvC0_write_index>
    4674:	90 91 90 41 	lds	r25, 0x4190	; 0x804190 <rcvC0_write_index+0x1>
    4678:	01 96       	adiw	r24, 0x01	; 1
    467a:	84 36       	cpi	r24, 0x64	; 100
    467c:	91 05       	cpc	r25, r1
    467e:	60 f4       	brcc	.+24     	; 0x4698 <__vector_25+0x5c>
    4680:	80 93 8f 41 	sts	0x418F, r24	; 0x80418f <rcvC0_write_index>
    4684:	90 93 90 41 	sts	0x4190, r25	; 0x804190 <rcvC0_write_index+0x1>
    4688:	20 91 9b 41 	lds	r18, 0x419B	; 0x80419b <rcvC0_read_index>
    468c:	30 91 9c 41 	lds	r19, 0x419C	; 0x80419c <rcvC0_read_index+0x1>
    4690:	82 17       	cp	r24, r18
    4692:	93 07       	cpc	r25, r19
    4694:	f1 f4       	brne	.+60     	; 0x46d2 <__vector_25+0x96>
    4696:	0c c0       	rjmp	.+24     	; 0x46b0 <__vector_25+0x74>
    4698:	10 92 8f 41 	sts	0x418F, r1	; 0x80418f <rcvC0_write_index>
    469c:	10 92 90 41 	sts	0x4190, r1	; 0x804190 <rcvC0_write_index+0x1>
    46a0:	80 91 9b 41 	lds	r24, 0x419B	; 0x80419b <rcvC0_read_index>
    46a4:	90 91 9c 41 	lds	r25, 0x419C	; 0x80419c <rcvC0_read_index+0x1>
    46a8:	18 16       	cp	r1, r24
    46aa:	19 06       	cpc	r1, r25
    46ac:	91 f4       	brne	.+36     	; 0x46d2 <__vector_25+0x96>
    46ae:	0e c0       	rjmp	.+28     	; 0x46cc <__vector_25+0x90>
    46b0:	01 96       	adiw	r24, 0x01	; 1
    46b2:	84 36       	cpi	r24, 0x64	; 100
    46b4:	91 05       	cpc	r25, r1
    46b6:	28 f4       	brcc	.+10     	; 0x46c2 <__vector_25+0x86>
    46b8:	80 93 9b 41 	sts	0x419B, r24	; 0x80419b <rcvC0_read_index>
    46bc:	90 93 9c 41 	sts	0x419C, r25	; 0x80419c <rcvC0_read_index+0x1>
    46c0:	08 c0       	rjmp	.+16     	; 0x46d2 <__vector_25+0x96>
    46c2:	10 92 9b 41 	sts	0x419B, r1	; 0x80419b <rcvC0_read_index>
    46c6:	10 92 9c 41 	sts	0x419C, r1	; 0x80419c <rcvC0_read_index+0x1>
    46ca:	03 c0       	rjmp	.+6      	; 0x46d2 <__vector_25+0x96>
    46cc:	81 e0       	ldi	r24, 0x01	; 1
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	f3 cf       	rjmp	.-26     	; 0x46b8 <__vector_25+0x7c>
    46d2:	ff 91       	pop	r31
    46d4:	ef 91       	pop	r30
    46d6:	9f 91       	pop	r25
    46d8:	8f 91       	pop	r24
    46da:	3f 91       	pop	r19
    46dc:	2f 91       	pop	r18
    46de:	0f 90       	pop	r0
    46e0:	0b be       	out	0x3b, r0	; 59
    46e2:	0f 90       	pop	r0
    46e4:	0f be       	out	0x3f, r0	; 63
    46e6:	0f 90       	pop	r0
    46e8:	1f 90       	pop	r1
    46ea:	18 95       	reti

000046ec <__vector_28>:
    46ec:	1f 92       	push	r1
    46ee:	0f 92       	push	r0
    46f0:	0f b6       	in	r0, 0x3f	; 63
    46f2:	0f 92       	push	r0
    46f4:	11 24       	eor	r1, r1
    46f6:	0b b6       	in	r0, 0x3b	; 59
    46f8:	0f 92       	push	r0
    46fa:	2f 93       	push	r18
    46fc:	3f 93       	push	r19
    46fe:	8f 93       	push	r24
    4700:	9f 93       	push	r25
    4702:	ef 93       	push	r30
    4704:	ff 93       	push	r31
    4706:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    470a:	e0 91 a5 41 	lds	r30, 0x41A5	; 0x8041a5 <rcvC1_buffer>
    470e:	f0 91 a6 41 	lds	r31, 0x41A6	; 0x8041a6 <rcvC1_buffer+0x1>
    4712:	80 91 8d 41 	lds	r24, 0x418D	; 0x80418d <rcvC1_write_index>
    4716:	90 91 8e 41 	lds	r25, 0x418E	; 0x80418e <rcvC1_write_index+0x1>
    471a:	e8 0f       	add	r30, r24
    471c:	f9 1f       	adc	r31, r25
    471e:	20 83       	st	Z, r18
    4720:	80 91 8d 41 	lds	r24, 0x418D	; 0x80418d <rcvC1_write_index>
    4724:	90 91 8e 41 	lds	r25, 0x418E	; 0x80418e <rcvC1_write_index+0x1>
    4728:	01 96       	adiw	r24, 0x01	; 1
    472a:	84 36       	cpi	r24, 0x64	; 100
    472c:	91 05       	cpc	r25, r1
    472e:	60 f4       	brcc	.+24     	; 0x4748 <__vector_28+0x5c>
    4730:	80 93 8d 41 	sts	0x418D, r24	; 0x80418d <rcvC1_write_index>
    4734:	90 93 8e 41 	sts	0x418E, r25	; 0x80418e <rcvC1_write_index+0x1>
    4738:	20 91 99 41 	lds	r18, 0x4199	; 0x804199 <rcvC1_read_index>
    473c:	30 91 9a 41 	lds	r19, 0x419A	; 0x80419a <rcvC1_read_index+0x1>
    4740:	82 17       	cp	r24, r18
    4742:	93 07       	cpc	r25, r19
    4744:	f1 f4       	brne	.+60     	; 0x4782 <__vector_28+0x96>
    4746:	0c c0       	rjmp	.+24     	; 0x4760 <__vector_28+0x74>
    4748:	10 92 8d 41 	sts	0x418D, r1	; 0x80418d <rcvC1_write_index>
    474c:	10 92 8e 41 	sts	0x418E, r1	; 0x80418e <rcvC1_write_index+0x1>
    4750:	80 91 99 41 	lds	r24, 0x4199	; 0x804199 <rcvC1_read_index>
    4754:	90 91 9a 41 	lds	r25, 0x419A	; 0x80419a <rcvC1_read_index+0x1>
    4758:	18 16       	cp	r1, r24
    475a:	19 06       	cpc	r1, r25
    475c:	91 f4       	brne	.+36     	; 0x4782 <__vector_28+0x96>
    475e:	0e c0       	rjmp	.+28     	; 0x477c <__vector_28+0x90>
    4760:	01 96       	adiw	r24, 0x01	; 1
    4762:	84 36       	cpi	r24, 0x64	; 100
    4764:	91 05       	cpc	r25, r1
    4766:	28 f4       	brcc	.+10     	; 0x4772 <__vector_28+0x86>
    4768:	80 93 99 41 	sts	0x4199, r24	; 0x804199 <rcvC1_read_index>
    476c:	90 93 9a 41 	sts	0x419A, r25	; 0x80419a <rcvC1_read_index+0x1>
    4770:	08 c0       	rjmp	.+16     	; 0x4782 <__vector_28+0x96>
    4772:	10 92 99 41 	sts	0x4199, r1	; 0x804199 <rcvC1_read_index>
    4776:	10 92 9a 41 	sts	0x419A, r1	; 0x80419a <rcvC1_read_index+0x1>
    477a:	03 c0       	rjmp	.+6      	; 0x4782 <__vector_28+0x96>
    477c:	81 e0       	ldi	r24, 0x01	; 1
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	f3 cf       	rjmp	.-26     	; 0x4768 <__vector_28+0x7c>
    4782:	ff 91       	pop	r31
    4784:	ef 91       	pop	r30
    4786:	9f 91       	pop	r25
    4788:	8f 91       	pop	r24
    478a:	3f 91       	pop	r19
    478c:	2f 91       	pop	r18
    478e:	0f 90       	pop	r0
    4790:	0b be       	out	0x3b, r0	; 59
    4792:	0f 90       	pop	r0
    4794:	0f be       	out	0x3f, r0	; 63
    4796:	0f 90       	pop	r0
    4798:	1f 90       	pop	r1
    479a:	18 95       	reti

0000479c <__vector_88>:
    479c:	1f 92       	push	r1
    479e:	0f 92       	push	r0
    47a0:	0f b6       	in	r0, 0x3f	; 63
    47a2:	0f 92       	push	r0
    47a4:	11 24       	eor	r1, r1
    47a6:	0b b6       	in	r0, 0x3b	; 59
    47a8:	0f 92       	push	r0
    47aa:	2f 93       	push	r18
    47ac:	3f 93       	push	r19
    47ae:	8f 93       	push	r24
    47b0:	9f 93       	push	r25
    47b2:	ef 93       	push	r30
    47b4:	ff 93       	push	r31
    47b6:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    47ba:	e0 91 a3 41 	lds	r30, 0x41A3	; 0x8041a3 <rcvD0_buffer>
    47be:	f0 91 a4 41 	lds	r31, 0x41A4	; 0x8041a4 <rcvD0_buffer+0x1>
    47c2:	80 91 8f 41 	lds	r24, 0x418F	; 0x80418f <rcvC0_write_index>
    47c6:	90 91 90 41 	lds	r25, 0x4190	; 0x804190 <rcvC0_write_index+0x1>
    47ca:	e8 0f       	add	r30, r24
    47cc:	f9 1f       	adc	r31, r25
    47ce:	20 83       	st	Z, r18
    47d0:	80 91 8b 41 	lds	r24, 0x418B	; 0x80418b <rcvD0_write_index>
    47d4:	90 91 8c 41 	lds	r25, 0x418C	; 0x80418c <rcvD0_write_index+0x1>
    47d8:	01 96       	adiw	r24, 0x01	; 1
    47da:	84 36       	cpi	r24, 0x64	; 100
    47dc:	91 05       	cpc	r25, r1
    47de:	60 f4       	brcc	.+24     	; 0x47f8 <__vector_88+0x5c>
    47e0:	80 93 8b 41 	sts	0x418B, r24	; 0x80418b <rcvD0_write_index>
    47e4:	90 93 8c 41 	sts	0x418C, r25	; 0x80418c <rcvD0_write_index+0x1>
    47e8:	20 91 97 41 	lds	r18, 0x4197	; 0x804197 <rcvD0_read_index>
    47ec:	30 91 98 41 	lds	r19, 0x4198	; 0x804198 <rcvD0_read_index+0x1>
    47f0:	82 17       	cp	r24, r18
    47f2:	93 07       	cpc	r25, r19
    47f4:	f1 f4       	brne	.+60     	; 0x4832 <__vector_88+0x96>
    47f6:	0c c0       	rjmp	.+24     	; 0x4810 <__vector_88+0x74>
    47f8:	10 92 8b 41 	sts	0x418B, r1	; 0x80418b <rcvD0_write_index>
    47fc:	10 92 8c 41 	sts	0x418C, r1	; 0x80418c <rcvD0_write_index+0x1>
    4800:	80 91 97 41 	lds	r24, 0x4197	; 0x804197 <rcvD0_read_index>
    4804:	90 91 98 41 	lds	r25, 0x4198	; 0x804198 <rcvD0_read_index+0x1>
    4808:	18 16       	cp	r1, r24
    480a:	19 06       	cpc	r1, r25
    480c:	91 f4       	brne	.+36     	; 0x4832 <__vector_88+0x96>
    480e:	0e c0       	rjmp	.+28     	; 0x482c <__vector_88+0x90>
    4810:	01 96       	adiw	r24, 0x01	; 1
    4812:	84 36       	cpi	r24, 0x64	; 100
    4814:	91 05       	cpc	r25, r1
    4816:	28 f4       	brcc	.+10     	; 0x4822 <__vector_88+0x86>
    4818:	80 93 97 41 	sts	0x4197, r24	; 0x804197 <rcvD0_read_index>
    481c:	90 93 98 41 	sts	0x4198, r25	; 0x804198 <rcvD0_read_index+0x1>
    4820:	08 c0       	rjmp	.+16     	; 0x4832 <__vector_88+0x96>
    4822:	10 92 97 41 	sts	0x4197, r1	; 0x804197 <rcvD0_read_index>
    4826:	10 92 98 41 	sts	0x4198, r1	; 0x804198 <rcvD0_read_index+0x1>
    482a:	03 c0       	rjmp	.+6      	; 0x4832 <__vector_88+0x96>
    482c:	81 e0       	ldi	r24, 0x01	; 1
    482e:	90 e0       	ldi	r25, 0x00	; 0
    4830:	f3 cf       	rjmp	.-26     	; 0x4818 <__vector_88+0x7c>
    4832:	ff 91       	pop	r31
    4834:	ef 91       	pop	r30
    4836:	9f 91       	pop	r25
    4838:	8f 91       	pop	r24
    483a:	3f 91       	pop	r19
    483c:	2f 91       	pop	r18
    483e:	0f 90       	pop	r0
    4840:	0b be       	out	0x3b, r0	; 59
    4842:	0f 90       	pop	r0
    4844:	0f be       	out	0x3f, r0	; 63
    4846:	0f 90       	pop	r0
    4848:	1f 90       	pop	r1
    484a:	18 95       	reti

0000484c <__vector_91>:
    484c:	1f 92       	push	r1
    484e:	0f 92       	push	r0
    4850:	0f b6       	in	r0, 0x3f	; 63
    4852:	0f 92       	push	r0
    4854:	11 24       	eor	r1, r1
    4856:	0b b6       	in	r0, 0x3b	; 59
    4858:	0f 92       	push	r0
    485a:	2f 93       	push	r18
    485c:	3f 93       	push	r19
    485e:	8f 93       	push	r24
    4860:	9f 93       	push	r25
    4862:	ef 93       	push	r30
    4864:	ff 93       	push	r31
    4866:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    486a:	e0 91 a1 41 	lds	r30, 0x41A1	; 0x8041a1 <rcvD1_buffer>
    486e:	f0 91 a2 41 	lds	r31, 0x41A2	; 0x8041a2 <rcvD1_buffer+0x1>
    4872:	80 91 89 41 	lds	r24, 0x4189	; 0x804189 <rcvD1_write_index>
    4876:	90 91 8a 41 	lds	r25, 0x418A	; 0x80418a <rcvD1_write_index+0x1>
    487a:	e8 0f       	add	r30, r24
    487c:	f9 1f       	adc	r31, r25
    487e:	20 83       	st	Z, r18
    4880:	80 91 89 41 	lds	r24, 0x4189	; 0x804189 <rcvD1_write_index>
    4884:	90 91 8a 41 	lds	r25, 0x418A	; 0x80418a <rcvD1_write_index+0x1>
    4888:	01 96       	adiw	r24, 0x01	; 1
    488a:	84 36       	cpi	r24, 0x64	; 100
    488c:	91 05       	cpc	r25, r1
    488e:	60 f4       	brcc	.+24     	; 0x48a8 <__vector_91+0x5c>
    4890:	80 93 89 41 	sts	0x4189, r24	; 0x804189 <rcvD1_write_index>
    4894:	90 93 8a 41 	sts	0x418A, r25	; 0x80418a <rcvD1_write_index+0x1>
    4898:	20 91 95 41 	lds	r18, 0x4195	; 0x804195 <rcvD1_read_index>
    489c:	30 91 96 41 	lds	r19, 0x4196	; 0x804196 <rcvD1_read_index+0x1>
    48a0:	82 17       	cp	r24, r18
    48a2:	93 07       	cpc	r25, r19
    48a4:	f1 f4       	brne	.+60     	; 0x48e2 <__vector_91+0x96>
    48a6:	0c c0       	rjmp	.+24     	; 0x48c0 <__vector_91+0x74>
    48a8:	10 92 89 41 	sts	0x4189, r1	; 0x804189 <rcvD1_write_index>
    48ac:	10 92 8a 41 	sts	0x418A, r1	; 0x80418a <rcvD1_write_index+0x1>
    48b0:	80 91 95 41 	lds	r24, 0x4195	; 0x804195 <rcvD1_read_index>
    48b4:	90 91 96 41 	lds	r25, 0x4196	; 0x804196 <rcvD1_read_index+0x1>
    48b8:	18 16       	cp	r1, r24
    48ba:	19 06       	cpc	r1, r25
    48bc:	91 f4       	brne	.+36     	; 0x48e2 <__vector_91+0x96>
    48be:	0e c0       	rjmp	.+28     	; 0x48dc <__vector_91+0x90>
    48c0:	01 96       	adiw	r24, 0x01	; 1
    48c2:	84 36       	cpi	r24, 0x64	; 100
    48c4:	91 05       	cpc	r25, r1
    48c6:	28 f4       	brcc	.+10     	; 0x48d2 <__vector_91+0x86>
    48c8:	80 93 95 41 	sts	0x4195, r24	; 0x804195 <rcvD1_read_index>
    48cc:	90 93 96 41 	sts	0x4196, r25	; 0x804196 <rcvD1_read_index+0x1>
    48d0:	08 c0       	rjmp	.+16     	; 0x48e2 <__vector_91+0x96>
    48d2:	10 92 95 41 	sts	0x4195, r1	; 0x804195 <rcvD1_read_index>
    48d6:	10 92 96 41 	sts	0x4196, r1	; 0x804196 <rcvD1_read_index+0x1>
    48da:	03 c0       	rjmp	.+6      	; 0x48e2 <__vector_91+0x96>
    48dc:	81 e0       	ldi	r24, 0x01	; 1
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	f3 cf       	rjmp	.-26     	; 0x48c8 <__vector_91+0x7c>
    48e2:	ff 91       	pop	r31
    48e4:	ef 91       	pop	r30
    48e6:	9f 91       	pop	r25
    48e8:	8f 91       	pop	r24
    48ea:	3f 91       	pop	r19
    48ec:	2f 91       	pop	r18
    48ee:	0f 90       	pop	r0
    48f0:	0b be       	out	0x3b, r0	; 59
    48f2:	0f 90       	pop	r0
    48f4:	0f be       	out	0x3f, r0	; 63
    48f6:	0f 90       	pop	r0
    48f8:	1f 90       	pop	r1
    48fa:	18 95       	reti

000048fc <__vector_58>:
    48fc:	1f 92       	push	r1
    48fe:	0f 92       	push	r0
    4900:	0f b6       	in	r0, 0x3f	; 63
    4902:	0f 92       	push	r0
    4904:	11 24       	eor	r1, r1
    4906:	0b b6       	in	r0, 0x3b	; 59
    4908:	0f 92       	push	r0
    490a:	2f 93       	push	r18
    490c:	3f 93       	push	r19
    490e:	8f 93       	push	r24
    4910:	9f 93       	push	r25
    4912:	ef 93       	push	r30
    4914:	ff 93       	push	r31
    4916:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    491a:	e0 91 9f 41 	lds	r30, 0x419F	; 0x80419f <rcvE0_buffer>
    491e:	f0 91 a0 41 	lds	r31, 0x41A0	; 0x8041a0 <rcvE0_buffer+0x1>
    4922:	80 91 87 41 	lds	r24, 0x4187	; 0x804187 <rcvE0_write_index>
    4926:	90 91 88 41 	lds	r25, 0x4188	; 0x804188 <rcvE0_write_index+0x1>
    492a:	e8 0f       	add	r30, r24
    492c:	f9 1f       	adc	r31, r25
    492e:	20 83       	st	Z, r18
    4930:	80 91 87 41 	lds	r24, 0x4187	; 0x804187 <rcvE0_write_index>
    4934:	90 91 88 41 	lds	r25, 0x4188	; 0x804188 <rcvE0_write_index+0x1>
    4938:	01 96       	adiw	r24, 0x01	; 1
    493a:	84 36       	cpi	r24, 0x64	; 100
    493c:	91 05       	cpc	r25, r1
    493e:	60 f4       	brcc	.+24     	; 0x4958 <__vector_58+0x5c>
    4940:	80 93 87 41 	sts	0x4187, r24	; 0x804187 <rcvE0_write_index>
    4944:	90 93 88 41 	sts	0x4188, r25	; 0x804188 <rcvE0_write_index+0x1>
    4948:	20 91 93 41 	lds	r18, 0x4193	; 0x804193 <rcvE0_read_index>
    494c:	30 91 94 41 	lds	r19, 0x4194	; 0x804194 <rcvE0_read_index+0x1>
    4950:	82 17       	cp	r24, r18
    4952:	93 07       	cpc	r25, r19
    4954:	f1 f4       	brne	.+60     	; 0x4992 <__vector_58+0x96>
    4956:	0c c0       	rjmp	.+24     	; 0x4970 <__vector_58+0x74>
    4958:	10 92 87 41 	sts	0x4187, r1	; 0x804187 <rcvE0_write_index>
    495c:	10 92 88 41 	sts	0x4188, r1	; 0x804188 <rcvE0_write_index+0x1>
    4960:	80 91 93 41 	lds	r24, 0x4193	; 0x804193 <rcvE0_read_index>
    4964:	90 91 94 41 	lds	r25, 0x4194	; 0x804194 <rcvE0_read_index+0x1>
    4968:	18 16       	cp	r1, r24
    496a:	19 06       	cpc	r1, r25
    496c:	91 f4       	brne	.+36     	; 0x4992 <__vector_58+0x96>
    496e:	0e c0       	rjmp	.+28     	; 0x498c <__vector_58+0x90>
    4970:	01 96       	adiw	r24, 0x01	; 1
    4972:	84 36       	cpi	r24, 0x64	; 100
    4974:	91 05       	cpc	r25, r1
    4976:	28 f4       	brcc	.+10     	; 0x4982 <__vector_58+0x86>
    4978:	80 93 93 41 	sts	0x4193, r24	; 0x804193 <rcvE0_read_index>
    497c:	90 93 94 41 	sts	0x4194, r25	; 0x804194 <rcvE0_read_index+0x1>
    4980:	08 c0       	rjmp	.+16     	; 0x4992 <__vector_58+0x96>
    4982:	10 92 93 41 	sts	0x4193, r1	; 0x804193 <rcvE0_read_index>
    4986:	10 92 94 41 	sts	0x4194, r1	; 0x804194 <rcvE0_read_index+0x1>
    498a:	03 c0       	rjmp	.+6      	; 0x4992 <__vector_58+0x96>
    498c:	81 e0       	ldi	r24, 0x01	; 1
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	f3 cf       	rjmp	.-26     	; 0x4978 <__vector_58+0x7c>
    4992:	ff 91       	pop	r31
    4994:	ef 91       	pop	r30
    4996:	9f 91       	pop	r25
    4998:	8f 91       	pop	r24
    499a:	3f 91       	pop	r19
    499c:	2f 91       	pop	r18
    499e:	0f 90       	pop	r0
    49a0:	0b be       	out	0x3b, r0	; 59
    49a2:	0f 90       	pop	r0
    49a4:	0f be       	out	0x3f, r0	; 63
    49a6:	0f 90       	pop	r0
    49a8:	1f 90       	pop	r1
    49aa:	18 95       	reti

000049ac <__vector_119>:
    49ac:	1f 92       	push	r1
    49ae:	0f 92       	push	r0
    49b0:	0f b6       	in	r0, 0x3f	; 63
    49b2:	0f 92       	push	r0
    49b4:	11 24       	eor	r1, r1
    49b6:	0b b6       	in	r0, 0x3b	; 59
    49b8:	0f 92       	push	r0
    49ba:	2f 93       	push	r18
    49bc:	3f 93       	push	r19
    49be:	8f 93       	push	r24
    49c0:	9f 93       	push	r25
    49c2:	ef 93       	push	r30
    49c4:	ff 93       	push	r31
    49c6:	20 91 a0 0b 	lds	r18, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
    49ca:	e0 91 9d 41 	lds	r30, 0x419D	; 0x80419d <rcvF0_buffer>
    49ce:	f0 91 9e 41 	lds	r31, 0x419E	; 0x80419e <rcvF0_buffer+0x1>
    49d2:	80 91 85 41 	lds	r24, 0x4185	; 0x804185 <rcvF0_write_index>
    49d6:	90 91 86 41 	lds	r25, 0x4186	; 0x804186 <rcvF0_write_index+0x1>
    49da:	e8 0f       	add	r30, r24
    49dc:	f9 1f       	adc	r31, r25
    49de:	20 83       	st	Z, r18
    49e0:	80 91 85 41 	lds	r24, 0x4185	; 0x804185 <rcvF0_write_index>
    49e4:	90 91 86 41 	lds	r25, 0x4186	; 0x804186 <rcvF0_write_index+0x1>
    49e8:	01 96       	adiw	r24, 0x01	; 1
    49ea:	84 36       	cpi	r24, 0x64	; 100
    49ec:	91 05       	cpc	r25, r1
    49ee:	60 f4       	brcc	.+24     	; 0x4a08 <__vector_119+0x5c>
    49f0:	80 93 85 41 	sts	0x4185, r24	; 0x804185 <rcvF0_write_index>
    49f4:	90 93 86 41 	sts	0x4186, r25	; 0x804186 <rcvF0_write_index+0x1>
    49f8:	20 91 91 41 	lds	r18, 0x4191	; 0x804191 <rcvF0_read_index>
    49fc:	30 91 92 41 	lds	r19, 0x4192	; 0x804192 <rcvF0_read_index+0x1>
    4a00:	82 17       	cp	r24, r18
    4a02:	93 07       	cpc	r25, r19
    4a04:	f1 f4       	brne	.+60     	; 0x4a42 <__vector_119+0x96>
    4a06:	0c c0       	rjmp	.+24     	; 0x4a20 <__vector_119+0x74>
    4a08:	10 92 85 41 	sts	0x4185, r1	; 0x804185 <rcvF0_write_index>
    4a0c:	10 92 86 41 	sts	0x4186, r1	; 0x804186 <rcvF0_write_index+0x1>
    4a10:	80 91 91 41 	lds	r24, 0x4191	; 0x804191 <rcvF0_read_index>
    4a14:	90 91 92 41 	lds	r25, 0x4192	; 0x804192 <rcvF0_read_index+0x1>
    4a18:	18 16       	cp	r1, r24
    4a1a:	19 06       	cpc	r1, r25
    4a1c:	91 f4       	brne	.+36     	; 0x4a42 <__vector_119+0x96>
    4a1e:	0e c0       	rjmp	.+28     	; 0x4a3c <__vector_119+0x90>
    4a20:	01 96       	adiw	r24, 0x01	; 1
    4a22:	84 36       	cpi	r24, 0x64	; 100
    4a24:	91 05       	cpc	r25, r1
    4a26:	28 f4       	brcc	.+10     	; 0x4a32 <__vector_119+0x86>
    4a28:	80 93 91 41 	sts	0x4191, r24	; 0x804191 <rcvF0_read_index>
    4a2c:	90 93 92 41 	sts	0x4192, r25	; 0x804192 <rcvF0_read_index+0x1>
    4a30:	08 c0       	rjmp	.+16     	; 0x4a42 <__vector_119+0x96>
    4a32:	10 92 91 41 	sts	0x4191, r1	; 0x804191 <rcvF0_read_index>
    4a36:	10 92 92 41 	sts	0x4192, r1	; 0x804192 <rcvF0_read_index+0x1>
    4a3a:	03 c0       	rjmp	.+6      	; 0x4a42 <__vector_119+0x96>
    4a3c:	81 e0       	ldi	r24, 0x01	; 1
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	f3 cf       	rjmp	.-26     	; 0x4a28 <__vector_119+0x7c>
    4a42:	ff 91       	pop	r31
    4a44:	ef 91       	pop	r30
    4a46:	9f 91       	pop	r25
    4a48:	8f 91       	pop	r24
    4a4a:	3f 91       	pop	r19
    4a4c:	2f 91       	pop	r18
    4a4e:	0f 90       	pop	r0
    4a50:	0b be       	out	0x3b, r0	; 59
    4a52:	0f 90       	pop	r0
    4a54:	0f be       	out	0x3f, r0	; 63
    4a56:	0f 90       	pop	r0
    4a58:	1f 90       	pop	r1
    4a5a:	18 95       	reti

00004a5c <__udivmodsi4>:
    4a5c:	a1 e2       	ldi	r26, 0x21	; 33
    4a5e:	1a 2e       	mov	r1, r26
    4a60:	aa 1b       	sub	r26, r26
    4a62:	bb 1b       	sub	r27, r27
    4a64:	fd 01       	movw	r30, r26
    4a66:	0d c0       	rjmp	.+26     	; 0x4a82 <__udivmodsi4_ep>

00004a68 <__udivmodsi4_loop>:
    4a68:	aa 1f       	adc	r26, r26
    4a6a:	bb 1f       	adc	r27, r27
    4a6c:	ee 1f       	adc	r30, r30
    4a6e:	ff 1f       	adc	r31, r31
    4a70:	a2 17       	cp	r26, r18
    4a72:	b3 07       	cpc	r27, r19
    4a74:	e4 07       	cpc	r30, r20
    4a76:	f5 07       	cpc	r31, r21
    4a78:	20 f0       	brcs	.+8      	; 0x4a82 <__udivmodsi4_ep>
    4a7a:	a2 1b       	sub	r26, r18
    4a7c:	b3 0b       	sbc	r27, r19
    4a7e:	e4 0b       	sbc	r30, r20
    4a80:	f5 0b       	sbc	r31, r21

00004a82 <__udivmodsi4_ep>:
    4a82:	66 1f       	adc	r22, r22
    4a84:	77 1f       	adc	r23, r23
    4a86:	88 1f       	adc	r24, r24
    4a88:	99 1f       	adc	r25, r25
    4a8a:	1a 94       	dec	r1
    4a8c:	69 f7       	brne	.-38     	; 0x4a68 <__udivmodsi4_loop>
    4a8e:	60 95       	com	r22
    4a90:	70 95       	com	r23
    4a92:	80 95       	com	r24
    4a94:	90 95       	com	r25
    4a96:	9b 01       	movw	r18, r22
    4a98:	ac 01       	movw	r20, r24
    4a9a:	bd 01       	movw	r22, r26
    4a9c:	cf 01       	movw	r24, r30
    4a9e:	08 95       	ret

00004aa0 <__tablejump2__>:
    4aa0:	ee 0f       	add	r30, r30
    4aa2:	ff 1f       	adc	r31, r31
    4aa4:	88 1f       	adc	r24, r24
    4aa6:	8b bf       	out	0x3b, r24	; 59
    4aa8:	07 90       	elpm	r0, Z+
    4aaa:	f6 91       	elpm	r31, Z
    4aac:	e0 2d       	mov	r30, r0
    4aae:	19 94       	eijmp

00004ab0 <__umulhisi3>:
    4ab0:	a2 9f       	mul	r26, r18
    4ab2:	b0 01       	movw	r22, r0
    4ab4:	b3 9f       	mul	r27, r19
    4ab6:	c0 01       	movw	r24, r0
    4ab8:	a3 9f       	mul	r26, r19
    4aba:	70 0d       	add	r23, r0
    4abc:	81 1d       	adc	r24, r1
    4abe:	11 24       	eor	r1, r1
    4ac0:	91 1d       	adc	r25, r1
    4ac2:	b2 9f       	mul	r27, r18
    4ac4:	70 0d       	add	r23, r0
    4ac6:	81 1d       	adc	r24, r1
    4ac8:	11 24       	eor	r1, r1
    4aca:	91 1d       	adc	r25, r1
    4acc:	08 95       	ret

00004ace <__muluhisi3>:
    4ace:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__umulhisi3>
    4ad2:	a5 9f       	mul	r26, r21
    4ad4:	90 0d       	add	r25, r0
    4ad6:	b4 9f       	mul	r27, r20
    4ad8:	90 0d       	add	r25, r0
    4ada:	a4 9f       	mul	r26, r20
    4adc:	80 0d       	add	r24, r0
    4ade:	91 1d       	adc	r25, r1
    4ae0:	11 24       	eor	r1, r1
    4ae2:	08 95       	ret

00004ae4 <memcpy>:
    4ae4:	fb 01       	movw	r30, r22
    4ae6:	dc 01       	movw	r26, r24
    4ae8:	02 c0       	rjmp	.+4      	; 0x4aee <memcpy+0xa>
    4aea:	01 90       	ld	r0, Z+
    4aec:	0d 92       	st	X+, r0
    4aee:	41 50       	subi	r20, 0x01	; 1
    4af0:	50 40       	sbci	r21, 0x00	; 0
    4af2:	d8 f7       	brcc	.-10     	; 0x4aea <memcpy+0x6>
    4af4:	08 95       	ret

00004af6 <memset>:
    4af6:	dc 01       	movw	r26, r24
    4af8:	01 c0       	rjmp	.+2      	; 0x4afc <memset+0x6>
    4afa:	6d 93       	st	X+, r22
    4afc:	41 50       	subi	r20, 0x01	; 1
    4afe:	50 40       	sbci	r21, 0x00	; 0
    4b00:	e0 f7       	brcc	.-8      	; 0x4afa <memset+0x4>
    4b02:	08 95       	ret

00004b04 <strncpy>:
    4b04:	fb 01       	movw	r30, r22
    4b06:	dc 01       	movw	r26, r24
    4b08:	41 50       	subi	r20, 0x01	; 1
    4b0a:	50 40       	sbci	r21, 0x00	; 0
    4b0c:	48 f0       	brcs	.+18     	; 0x4b20 <strncpy+0x1c>
    4b0e:	01 90       	ld	r0, Z+
    4b10:	0d 92       	st	X+, r0
    4b12:	00 20       	and	r0, r0
    4b14:	c9 f7       	brne	.-14     	; 0x4b08 <strncpy+0x4>
    4b16:	01 c0       	rjmp	.+2      	; 0x4b1a <strncpy+0x16>
    4b18:	1d 92       	st	X+, r1
    4b1a:	41 50       	subi	r20, 0x01	; 1
    4b1c:	50 40       	sbci	r21, 0x00	; 0
    4b1e:	e0 f7       	brcc	.-8      	; 0x4b18 <strncpy+0x14>
    4b20:	08 95       	ret

00004b22 <ultoa>:
    4b22:	25 32       	cpi	r18, 0x25	; 37
    4b24:	31 05       	cpc	r19, r1
    4b26:	20 f4       	brcc	.+8      	; 0x4b30 <ultoa+0xe>
    4b28:	22 30       	cpi	r18, 0x02	; 2
    4b2a:	10 f0       	brcs	.+4      	; 0x4b30 <ultoa+0xe>
    4b2c:	0c 94 9c 25 	jmp	0x4b38	; 0x4b38 <__ultoa_ncheck>
    4b30:	fa 01       	movw	r30, r20
    4b32:	10 82       	st	Z, r1
    4b34:	ca 01       	movw	r24, r20
    4b36:	08 95       	ret

00004b38 <__ultoa_ncheck>:
    4b38:	bb 27       	eor	r27, r27

00004b3a <__ultoa_common>:
    4b3a:	fa 01       	movw	r30, r20
    4b3c:	a6 2f       	mov	r26, r22
    4b3e:	62 17       	cp	r22, r18
    4b40:	71 05       	cpc	r23, r1
    4b42:	81 05       	cpc	r24, r1
    4b44:	91 05       	cpc	r25, r1
    4b46:	33 0b       	sbc	r19, r19
    4b48:	30 fb       	bst	r19, 0
    4b4a:	66 f0       	brts	.+24     	; 0x4b64 <__ultoa_common+0x2a>
    4b4c:	aa 27       	eor	r26, r26
    4b4e:	66 0f       	add	r22, r22
    4b50:	77 1f       	adc	r23, r23
    4b52:	88 1f       	adc	r24, r24
    4b54:	99 1f       	adc	r25, r25
    4b56:	aa 1f       	adc	r26, r26
    4b58:	a2 17       	cp	r26, r18
    4b5a:	10 f0       	brcs	.+4      	; 0x4b60 <__ultoa_common+0x26>
    4b5c:	a2 1b       	sub	r26, r18
    4b5e:	63 95       	inc	r22
    4b60:	38 50       	subi	r19, 0x08	; 8
    4b62:	a9 f7       	brne	.-22     	; 0x4b4e <__ultoa_common+0x14>
    4b64:	a0 5d       	subi	r26, 0xD0	; 208
    4b66:	aa 33       	cpi	r26, 0x3A	; 58
    4b68:	08 f0       	brcs	.+2      	; 0x4b6c <__ultoa_common+0x32>
    4b6a:	a9 5d       	subi	r26, 0xD9	; 217
    4b6c:	a1 93       	st	Z+, r26
    4b6e:	36 f7       	brtc	.-52     	; 0x4b3c <__ultoa_common+0x2>
    4b70:	b1 11       	cpse	r27, r1
    4b72:	b1 93       	st	Z+, r27
    4b74:	10 82       	st	Z, r1
    4b76:	ca 01       	movw	r24, r20
    4b78:	0c 94 e3 25 	jmp	0x4bc6	; 0x4bc6 <strrev>

00004b7c <utoa>:
    4b7c:	45 32       	cpi	r20, 0x25	; 37
    4b7e:	51 05       	cpc	r21, r1
    4b80:	20 f4       	brcc	.+8      	; 0x4b8a <utoa+0xe>
    4b82:	42 30       	cpi	r20, 0x02	; 2
    4b84:	10 f0       	brcs	.+4      	; 0x4b8a <utoa+0xe>
    4b86:	0c 94 c9 25 	jmp	0x4b92	; 0x4b92 <__utoa_ncheck>
    4b8a:	fb 01       	movw	r30, r22
    4b8c:	10 82       	st	Z, r1
    4b8e:	cb 01       	movw	r24, r22
    4b90:	08 95       	ret

00004b92 <__utoa_ncheck>:
    4b92:	bb 27       	eor	r27, r27

00004b94 <__utoa_common>:
    4b94:	fb 01       	movw	r30, r22
    4b96:	55 27       	eor	r21, r21
    4b98:	aa 27       	eor	r26, r26
    4b9a:	88 0f       	add	r24, r24
    4b9c:	99 1f       	adc	r25, r25
    4b9e:	aa 1f       	adc	r26, r26
    4ba0:	a4 17       	cp	r26, r20
    4ba2:	10 f0       	brcs	.+4      	; 0x4ba8 <__utoa_common+0x14>
    4ba4:	a4 1b       	sub	r26, r20
    4ba6:	83 95       	inc	r24
    4ba8:	50 51       	subi	r21, 0x10	; 16
    4baa:	b9 f7       	brne	.-18     	; 0x4b9a <__utoa_common+0x6>
    4bac:	a0 5d       	subi	r26, 0xD0	; 208
    4bae:	aa 33       	cpi	r26, 0x3A	; 58
    4bb0:	08 f0       	brcs	.+2      	; 0x4bb4 <__utoa_common+0x20>
    4bb2:	a9 5d       	subi	r26, 0xD9	; 217
    4bb4:	a1 93       	st	Z+, r26
    4bb6:	00 97       	sbiw	r24, 0x00	; 0
    4bb8:	79 f7       	brne	.-34     	; 0x4b98 <__utoa_common+0x4>
    4bba:	b1 11       	cpse	r27, r1
    4bbc:	b1 93       	st	Z+, r27
    4bbe:	11 92       	st	Z+, r1
    4bc0:	cb 01       	movw	r24, r22
    4bc2:	0c 94 e3 25 	jmp	0x4bc6	; 0x4bc6 <strrev>

00004bc6 <strrev>:
    4bc6:	dc 01       	movw	r26, r24
    4bc8:	fc 01       	movw	r30, r24
    4bca:	67 2f       	mov	r22, r23
    4bcc:	71 91       	ld	r23, Z+
    4bce:	77 23       	and	r23, r23
    4bd0:	e1 f7       	brne	.-8      	; 0x4bca <strrev+0x4>
    4bd2:	32 97       	sbiw	r30, 0x02	; 2
    4bd4:	04 c0       	rjmp	.+8      	; 0x4bde <strrev+0x18>
    4bd6:	7c 91       	ld	r23, X
    4bd8:	6d 93       	st	X+, r22
    4bda:	70 83       	st	Z, r23
    4bdc:	62 91       	ld	r22, -Z
    4bde:	ae 17       	cp	r26, r30
    4be0:	bf 07       	cpc	r27, r31
    4be2:	c8 f3       	brcs	.-14     	; 0x4bd6 <strrev+0x10>
    4be4:	08 95       	ret

00004be6 <_exit>:
    4be6:	f8 94       	cli

00004be8 <__stop_program>:
    4be8:	ff cf       	rjmp	.-2      	; 0x4be8 <__stop_program>
